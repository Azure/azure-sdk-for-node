/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Class representing a OAuth2PermissionGrant.
 */
class OAuth2PermissionGrant {
  /**
   * Create a OAuth2PermissionGrant.
   * @property {string} [odatatype]
   * Microsoft.DirectoryServices.OAuth2PermissionGrant
   * @property {string} [clientId] The id of the resource's service principal
   * granted consent to impersonate the user when accessing the resource
   * (represented by the resourceId property).
   * @property {string} [objectId] The id of the permission grant
   * @property {string} [consentType] Indicates if consent was provided by the
   * administrator (on behalf of the organization) or by an individual.
   * Possible values include: 'AllPrincipals', 'Principal'
   * @property {string} [principalId] When consent type is Principal, this
   * property specifies the id of the user that granted consent and applies
   * only for that user.
   * @property {string} [resourceId] Object Id of the resource you want to
   * grant
   * @property {string} [scope] Specifies the value of the scope claim that the
   * resource application should expect in the OAuth 2.0 access token. For
   * example, User.Read
   * @property {string} [startTime] Start time for TTL
   * @property {string} [expiryTime] Expiry time for TTL
   */
  constructor() {
  }

  /**
   * Defines the metadata of OAuth2PermissionGrant
   *
   * @returns {object} metadata of OAuth2PermissionGrant
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'OAuth2PermissionGrant',
      type: {
        name: 'Composite',
        className: 'OAuth2PermissionGrant',
        modelProperties: {
          odatatype: {
            required: false,
            serializedName: 'odata\\.type',
            type: {
              name: 'String'
            }
          },
          clientId: {
            required: false,
            serializedName: 'clientId',
            type: {
              name: 'String'
            }
          },
          objectId: {
            required: false,
            serializedName: 'objectId',
            type: {
              name: 'String'
            }
          },
          consentType: {
            required: false,
            serializedName: 'consentType',
            type: {
              name: 'String'
            }
          },
          principalId: {
            required: false,
            serializedName: 'principalId',
            type: {
              name: 'String'
            }
          },
          resourceId: {
            required: false,
            serializedName: 'resourceId',
            type: {
              name: 'String'
            }
          },
          scope: {
            required: false,
            serializedName: 'scope',
            type: {
              name: 'String'
            }
          },
          startTime: {
            required: false,
            serializedName: 'startTime',
            type: {
              name: 'String'
            }
          },
          expiryTime: {
            required: false,
            serializedName: 'expiryTime',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = OAuth2PermissionGrant;
