/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the UserCreateParameters class.
 * @constructor
 * Request parameters for create a new work or school account user
 *
 * @member {boolean} accountEnabled Enable the account. If it is enabled then
 * true else false.
 * 
 * @member {string} displayName User display name
 * 
 * @member {object} passwordProfile Password Profile
 * 
 * @member {string} [passwordProfile.password] Password
 * 
 * @member {boolean} [passwordProfile.forceChangePasswordNextLogin] Force
 * change password on next login
 * 
 * @member {string} userPrincipalName The user principal name
 * (someuser@contoso.com). It must contain one of the verified domains for
 * the tenant.
 * 
 * @member {string} mailNickname The mail alias for the user
 * 
 * @member {string} [immutableId] Needs to be specified if you are using a
 * federated domain for the user's userPrincipalName (UPN) property while
 * creating a new user account. It is used to associate an on-premises Active
 * Directory user account to their Azure AD user object.
 * 
 */
function UserCreateParameters() {
}

/**
 * Defines the metadata of UserCreateParameters
 *
 * @returns {object} metadata of UserCreateParameters
 *
 */
UserCreateParameters.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'UserCreateParameters',
    type: {
      name: 'Composite',
      className: 'UserCreateParameters',
      modelProperties: {
        accountEnabled: {
          required: true,
          serializedName: 'accountEnabled',
          type: {
            name: 'Boolean'
          }
        },
        displayName: {
          required: true,
          serializedName: 'displayName',
          type: {
            name: 'String'
          }
        },
        passwordProfile: {
          required: true,
          serializedName: 'passwordProfile',
          type: {
            name: 'Composite',
            className: 'PasswordProfile'
          }
        },
        userPrincipalName: {
          required: true,
          serializedName: 'userPrincipalName',
          type: {
            name: 'String'
          }
        },
        mailNickname: {
          required: true,
          serializedName: 'mailNickname',
          type: {
            name: 'String'
          }
        },
        immutableId: {
          required: false,
          serializedName: 'immutableId',
          type: {
            name: 'String'
          }
        }
      }
    }
  };
};

module.exports = UserCreateParameters;
