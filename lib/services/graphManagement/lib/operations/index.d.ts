/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Objects
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the GraphRbacManagementClient.
 */
export interface Objects {

    /**
     * Gets the details for the currently logged-in user.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getCurrentUser(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AADObject>): void;
    getCurrentUser(callback: ServiceCallback<models.AADObject>): void;

    /**
     * Gets AD group membership for the specified AD object IDs.
     *
     * @param {object} parameters Objects filtering parameters.
     * 
     * @param {array} [parameters.objectIds] The requested object IDs.
     * 
     * @param {array} [parameters.types] The requested object types.
     * 
     * @param {boolean} parameters.includeDirectoryObjectReferences If true, also
     * searches for object IDs in the partner tenant.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getObjectsByObjectIds(parameters: models.GetObjectsParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetObjectsResult>): void;
    getObjectsByObjectIds(parameters: models.GetObjectsParameters, callback: ServiceCallback<models.GetObjectsResult>): void;

    /**
     * Gets AD group membership for the specified AD object IDs.
     *
     * @param {string} nextLink Next link for the list operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getObjectsByObjectIdsNext(nextLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetObjectsResult>): void;
    getObjectsByObjectIdsNext(nextLink: string, callback: ServiceCallback<models.GetObjectsResult>): void;
}

/**
 * @class
 * Applications
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the GraphRbacManagementClient.
 */
export interface Applications {

    /**
     * Create a new application.
     *
     * @param {object} parameters The parameters for creating an application.
     * 
     * @param {boolean} parameters.availableToOtherTenants Whether the application
     * is available to other tenants.
     * 
     * @param {string} parameters.displayName The display name of the application.
     * 
     * @param {string} [parameters.homepage] The home page of the application.
     * 
     * @param {array} parameters.identifierUris A collection of URIs for the
     * application.
     * 
     * @param {array} [parameters.replyUrls] A collection of reply URLs for the
     * application.
     * 
     * @param {array} [parameters.keyCredentials] The list of KeyCredential
     * objects.
     * 
     * @param {array} [parameters.passwordCredentials] The list of
     * PasswordCredential objects.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    create(parameters: models.ApplicationCreateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Application>): void;
    create(parameters: models.ApplicationCreateParameters, callback: ServiceCallback<models.Application>): void;

    /**
     * Lists applications by filter parameters.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.filter] The filters to apply to the operation.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationListResult>): void;
    list(callback: ServiceCallback<models.ApplicationListResult>): void;

    /**
     * Delete an application.
     *
     * @param {string} applicationObjectId Application object ID.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(applicationObjectId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(applicationObjectId: string, callback: ServiceCallback<void>): void;

    /**
     * Get an application by object ID.
     *
     * @param {string} applicationObjectId Application object ID.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(applicationObjectId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Application>): void;
    get(applicationObjectId: string, callback: ServiceCallback<models.Application>): void;

    /**
     * Update an existing application.
     *
     * @param {string} applicationObjectId Application object ID.
     * 
     * @param {object} parameters Parameters to update an existing application.
     * 
     * @param {boolean} [parameters.availableToOtherTenants] Whether the
     * application is available to other tenants
     * 
     * @param {string} [parameters.displayName] The display name of the
     * application.
     * 
     * @param {string} [parameters.homepage] The home page of the application.
     * 
     * @param {array} [parameters.identifierUris] A collection of URIs for the
     * application.
     * 
     * @param {array} [parameters.replyUrls] A collection of reply URLs for the
     * application.
     * 
     * @param {array} [parameters.keyCredentials] The list of KeyCredential
     * objects.
     * 
     * @param {array} [parameters.passwordCredentials] The list of
     * PasswordCredential objects.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    patch(applicationObjectId: string, parameters: models.ApplicationUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    patch(applicationObjectId: string, parameters: models.ApplicationUpdateParameters, callback: ServiceCallback<void>): void;

    /**
     * Get the keyCredentials associated with an application.
     *
     * @param {string} applicationObjectId Application object ID.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listKeyCredentials(applicationObjectId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyCredentialListResult>): void;
    listKeyCredentials(applicationObjectId: string, callback: ServiceCallback<models.KeyCredentialListResult>): void;

    /**
     * Update the keyCredentials associated with an application.
     *
     * @param {string} applicationObjectId Application object ID.
     * 
     * @param {array} value A collection of KeyCredentials.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateKeyCredentials(applicationObjectId: string, value: models.KeyCredential[], options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    updateKeyCredentials(applicationObjectId: string, value: models.KeyCredential[], callback: ServiceCallback<void>): void;

    /**
     * Get the passwordCredentials associated with an application.
     *
     * @param {string} applicationObjectId Application object ID.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listPasswordCredentials(applicationObjectId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PasswordCredentialListResult>): void;
    listPasswordCredentials(applicationObjectId: string, callback: ServiceCallback<models.PasswordCredentialListResult>): void;

    /**
     * Update passwordCredentials associated with an application.
     *
     * @param {string} applicationObjectId Application object ID.
     * 
     * @param {array} value A collection of PasswordCredentials.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updatePasswordCredentials(applicationObjectId: string, value: models.PasswordCredential[], options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    updatePasswordCredentials(applicationObjectId: string, value: models.PasswordCredential[], callback: ServiceCallback<void>): void;

    /**
     * Gets a list of applications from the current tenant.
     *
     * @param {string} nextLink Next link for the list operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationListResult>): void;
    listNext(nextLink: string, callback: ServiceCallback<models.ApplicationListResult>): void;
}

/**
 * @class
 * Groups
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the GraphRbacManagementClient.
 */
export interface Groups {

    /**
     * Checks whether the specified user, group, contact, or service principal is a
     * direct or transitive member of the specified group.
     *
     * @param {object} parameters The check group membership parameters.
     * 
     * @param {string} parameters.groupId The object ID of the group to check.
     * 
     * @param {string} parameters.memberId The object ID of the contact, group,
     * user, or service principal to check for membership in the specified group.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    isMemberOf(parameters: models.CheckGroupMembershipParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CheckGroupMembershipResult>): void;
    isMemberOf(parameters: models.CheckGroupMembershipParameters, callback: ServiceCallback<models.CheckGroupMembershipResult>): void;

    /**
     * Remove a member from a group.
     *
     * @param {string} groupObjectId The object ID of the group from which to
     * remove the member.
     * 
     * @param {string} memberObjectId Member object id
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    removeMember(groupObjectId: string, memberObjectId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    removeMember(groupObjectId: string, memberObjectId: string, callback: ServiceCallback<void>): void;

    /**
     * Add a member to a group.
     *
     * @param {string} groupObjectId The object ID of the group to which to add the
     * member.
     * 
     * @param {string} url A member object URL, such as
     * "https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd",
     * where "0b1f9851-1bf0-433f-aec3-cb9272f093dc" is the tenantId and
     * "f260bbc4-c254-447b-94cf-293b5ec434dd" is the objectId of the member (user,
     * application, servicePrincipal, group) to be added.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    addMember(groupObjectId: string, url: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    addMember(groupObjectId: string, url: string, callback: ServiceCallback<void>): void;

    /**
     * Delete a group from the directory.
     *
     * @param {string} groupObjectId The object ID of the group to delete.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(groupObjectId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(groupObjectId: string, callback: ServiceCallback<void>): void;

    /**
     * Create a group in the directory.
     *
     * @param {object} parameters The parameters for the group to create.
     * 
     * @param {string} parameters.displayName Group display name
     * 
     * @param {string} parameters.mailNickname Mail nickname
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    create(parameters: models.GroupCreateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ADGroup>): void;
    create(parameters: models.GroupCreateParameters, callback: ServiceCallback<models.ADGroup>): void;

    /**
     * Gets list of groups for the current tenant.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.filter] The filter to apply to the operation.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GroupListResult>): void;
    list(callback: ServiceCallback<models.GroupListResult>): void;

    /**
     * Gets the members of a group.
     *
     * @param {string} objectId The object ID of the group whose members should be
     * retrieved.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getGroupMembers(objectId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetObjectsResult>): void;
    getGroupMembers(objectId: string, callback: ServiceCallback<models.GetObjectsResult>): void;

    /**
     * Gets group information from the directory.
     *
     * @param {string} objectId The object ID of the user for which to get group
     * information.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(objectId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ADGroup>): void;
    get(objectId: string, callback: ServiceCallback<models.ADGroup>): void;

    /**
     * Gets a collection of object IDs of groups of which the specified group is a
     * member.
     *
     * @param {string} objectId The object ID of the group for which to get group
     * membership.
     * 
     * @param {boolean} securityEnabledOnly If true, only membership in
     * security-enabled groups should be checked. Otherwise, membership in all
     * groups should be checked.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getMemberGroups(objectId: string, securityEnabledOnly: boolean, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GroupGetMemberGroupsResult>): void;
    getMemberGroups(objectId: string, securityEnabledOnly: boolean, callback: ServiceCallback<models.GroupGetMemberGroupsResult>): void;

    /**
     * Gets a list of groups for the current tenant.
     *
     * @param {string} nextLink Next link for the list operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GroupListResult>): void;
    listNext(nextLink: string, callback: ServiceCallback<models.GroupListResult>): void;

    /**
     * Gets the members of a group.
     *
     * @param {string} nextLink Next link for the list operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getGroupMembersNext(nextLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetObjectsResult>): void;
    getGroupMembersNext(nextLink: string, callback: ServiceCallback<models.GetObjectsResult>): void;
}

/**
 * @class
 * ServicePrincipals
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the GraphRbacManagementClient.
 */
export interface ServicePrincipals {

    /**
     * Creates a service principal in the directory.
     *
     * @param {object} parameters Parameters to create a service principal.
     * 
     * @param {string} parameters.appId application Id
     * 
     * @param {boolean} parameters.accountEnabled Whether the account is enabled
     * 
     * @param {array} [parameters.keyCredentials] A collection of KeyCredential
     * objects.
     * 
     * @param {array} [parameters.passwordCredentials] A collection of
     * PasswordCredential objects
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    create(parameters: models.ServicePrincipalCreateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServicePrincipal>): void;
    create(parameters: models.ServicePrincipalCreateParameters, callback: ServiceCallback<models.ServicePrincipal>): void;

    /**
     * Gets a list of service principals from the current tenant.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.filter] The filter to apply to the operation.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServicePrincipalListResult>): void;
    list(callback: ServiceCallback<models.ServicePrincipalListResult>): void;

    /**
     * Deletes a service principal from the directory.
     *
     * @param {string} objectId The object ID of the service principal to delete.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(objectId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(objectId: string, callback: ServiceCallback<void>): void;

    /**
     * Gets service principal information from the directory.
     *
     * @param {string} objectId The object ID of the service principal to get.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(objectId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServicePrincipal>): void;
    get(objectId: string, callback: ServiceCallback<models.ServicePrincipal>): void;

    /**
     * Get the keyCredentials associated with the specified service principal.
     *
     * @param {string} objectId The object ID of the service principal for which to
     * get keyCredentials.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listKeyCredentials(objectId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyCredentialListResult>): void;
    listKeyCredentials(objectId: string, callback: ServiceCallback<models.KeyCredentialListResult>): void;

    /**
     * Update the keyCredentials associated with a service principal.
     *
     * @param {string} objectId The object ID for which to get service principal
     * information.
     * 
     * @param {array} value A collection of KeyCredentials.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateKeyCredentials(objectId: string, value: models.KeyCredential[], options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    updateKeyCredentials(objectId: string, value: models.KeyCredential[], callback: ServiceCallback<void>): void;

    /**
     * Gets the passwordCredentials associated with a service principal.
     *
     * @param {string} objectId The object ID of the service principal.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listPasswordCredentials(objectId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PasswordCredentialListResult>): void;
    listPasswordCredentials(objectId: string, callback: ServiceCallback<models.PasswordCredentialListResult>): void;

    /**
     * Updates the passwordCredentials associated with a service principal.
     *
     * @param {string} objectId The object ID of the service principal.
     * 
     * @param {array} value A collection of PasswordCredentials.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updatePasswordCredentials(objectId: string, value: models.PasswordCredential[], options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    updatePasswordCredentials(objectId: string, value: models.PasswordCredential[], callback: ServiceCallback<void>): void;

    /**
     * Gets a list of service principals from the current tenant.
     *
     * @param {string} nextLink Next link for the list operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServicePrincipalListResult>): void;
    listNext(nextLink: string, callback: ServiceCallback<models.ServicePrincipalListResult>): void;
}

/**
 * @class
 * Users
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the GraphRbacManagementClient.
 */
export interface Users {

    /**
     * Create a new user.
     *
     * @param {object} parameters Parameters to create a user.
     * 
     * @param {boolean} parameters.accountEnabled Whether the account is enabled.
     * 
     * @param {string} parameters.displayName The display name of the user.
     * 
     * @param {object} parameters.passwordProfile Password Profile
     * 
     * @param {string} parameters.passwordProfile.password Password
     * 
     * @param {boolean} [parameters.passwordProfile.forceChangePasswordNextLogin]
     * Whether to force a password change on next login.
     * 
     * @param {string} parameters.userPrincipalName The user principal name
     * (someuser@contoso.com). It must contain one of the verified domains for the
     * tenant.
     * 
     * @param {string} parameters.mailNickname The mail alias for the user.
     * 
     * @param {string} [parameters.immutableId] This must be specified if you are
     * using a federated domain for the user's userPrincipalName (UPN) property
     * when creating a new user account. It is used to associate an on-premises
     * Active Directory user account with their Azure AD user object.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    create(parameters: models.UserCreateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.User>): void;
    create(parameters: models.UserCreateParameters, callback: ServiceCallback<models.User>): void;

    /**
     * Gets list of users for the current tenant.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.filter] The filter to apply to the operation.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UserListResult>): void;
    list(callback: ServiceCallback<models.UserListResult>): void;

    /**
     * Gets user information from the directory.
     *
     * @param {string} upnOrObjectId The object ID or principal name of the user
     * for which to get information.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(upnOrObjectId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.User>): void;
    get(upnOrObjectId: string, callback: ServiceCallback<models.User>): void;

    /**
     * Updates a user.
     *
     * @param {string} upnOrObjectId The object ID or principal name of the user to
     * update.
     * 
     * @param {object} parameters Parameters to update an existing user.
     * 
     * @param {boolean} [parameters.accountEnabled] Whether the account is enabled.
     * 
     * @param {string} [parameters.displayName] The display name of the user.
     * 
     * @param {object} [parameters.passwordProfile] The password profile of the
     * user.
     * 
     * @param {string} parameters.passwordProfile.password Password
     * 
     * @param {boolean} [parameters.passwordProfile.forceChangePasswordNextLogin]
     * Whether to force a password change on next login.
     * 
     * @param {string} [parameters.mailNickname] The mail alias for the user.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    update(upnOrObjectId: string, parameters: models.UserUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    update(upnOrObjectId: string, parameters: models.UserUpdateParameters, callback: ServiceCallback<void>): void;

    /**
     * Delete a user.
     *
     * @param {string} upnOrObjectId The object ID or principal name of the user to
     * delete.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(upnOrObjectId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(upnOrObjectId: string, callback: ServiceCallback<void>): void;

    /**
     * Gets a collection that contains the object IDs of the groups of which the
     * user is a member.
     *
     * @param {string} objectId The object ID of the user for which to get group
     * membership.
     * 
     * @param {boolean} securityEnabledOnly If true, only membership in
     * security-enabled groups should be checked. Otherwise, membership in all
     * groups should be checked.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getMemberGroups(objectId: string, securityEnabledOnly: boolean, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UserGetMemberGroupsResult>): void;
    getMemberGroups(objectId: string, securityEnabledOnly: boolean, callback: ServiceCallback<models.UserGetMemberGroupsResult>): void;

    /**
     * Gets a list of users for the current tenant.
     *
     * @param {string} nextLink Next link for the list operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listNext(nextLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UserListResult>): void;
    listNext(nextLink: string, callback: ServiceCallback<models.UserListResult>): void;
}
