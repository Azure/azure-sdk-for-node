/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Objects
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the GraphRbacManagementClient.
 */
export interface Objects {


    /**
     * Gets the details for the currently logged-in user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AADObject>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getCurrentUserWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AADObject>>;

    /**
     * Gets the details for the currently logged-in user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AADObject} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AADObject} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AADObject} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getCurrentUser(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AADObject>;
    getCurrentUser(callback: ServiceCallback<models.AADObject>): void;
    getCurrentUser(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AADObject>): void;


    /**
     * Gets AD group membership for the specified AD object IDs.
     *
     * @param {object} parameters Objects filtering parameters.
     *
     * @param {array} [parameters.objectIds] The requested object IDs.
     *
     * @param {array} [parameters.types] The requested object types.
     *
     * @param {boolean} parameters.includeDirectoryObjectReferences If true, also
     * searches for object IDs in the partner tenant.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetObjectsResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getObjectsByObjectIdsWithHttpOperationResponse(parameters: models.GetObjectsParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetObjectsResult>>;

    /**
     * Gets AD group membership for the specified AD object IDs.
     *
     * @param {object} parameters Objects filtering parameters.
     *
     * @param {array} [parameters.objectIds] The requested object IDs.
     *
     * @param {array} [parameters.types] The requested object types.
     *
     * @param {boolean} parameters.includeDirectoryObjectReferences If true, also
     * searches for object IDs in the partner tenant.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetObjectsResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetObjectsResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetObjectsResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getObjectsByObjectIds(parameters: models.GetObjectsParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetObjectsResult>;
    getObjectsByObjectIds(parameters: models.GetObjectsParameters, callback: ServiceCallback<models.GetObjectsResult>): void;
    getObjectsByObjectIds(parameters: models.GetObjectsParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetObjectsResult>): void;


    /**
     * Gets AD group membership for the specified AD object IDs.
     *
     * @param {string} nextLink Next link for the list operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetObjectsResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getObjectsByObjectIdsNextWithHttpOperationResponse(nextLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetObjectsResult>>;

    /**
     * Gets AD group membership for the specified AD object IDs.
     *
     * @param {string} nextLink Next link for the list operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetObjectsResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetObjectsResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetObjectsResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getObjectsByObjectIdsNext(nextLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetObjectsResult>;
    getObjectsByObjectIdsNext(nextLink: string, callback: ServiceCallback<models.GetObjectsResult>): void;
    getObjectsByObjectIdsNext(nextLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetObjectsResult>): void;
}

/**
 * @class
 * Applications
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the GraphRbacManagementClient.
 */
export interface Applications {


    /**
     * Create a new application.
     *
     * @param {object} parameters The parameters for creating an application.
     *
     * @param {boolean} parameters.availableToOtherTenants Whether the application
     * is available to other tenants.
     *
     * @param {string} parameters.displayName The display name of the application.
     *
     * @param {string} [parameters.homepage] The home page of the application.
     *
     * @param {array} parameters.identifierUris A collection of URIs for the
     * application.
     *
     * @param {array} [parameters.replyUrls] A collection of reply URLs for the
     * application.
     *
     * @param {array} [parameters.keyCredentials] The list of KeyCredential
     * objects.
     *
     * @param {array} [parameters.passwordCredentials] The list of
     * PasswordCredential objects.
     *
     * @param {boolean} [parameters.oauth2AllowImplicitFlow] Whether to allow
     * implicit grant flow for OAuth2
     *
     * @param {array} [parameters.requiredResourceAccess] Specifies resources that
     * this application requires access to and the set of OAuth permission scopes
     * and application roles that it needs under each of those resources. This
     * pre-configuration of required resource access drives the consent experience.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Application>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(parameters: models.ApplicationCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Application>>;

    /**
     * Create a new application.
     *
     * @param {object} parameters The parameters for creating an application.
     *
     * @param {boolean} parameters.availableToOtherTenants Whether the application
     * is available to other tenants.
     *
     * @param {string} parameters.displayName The display name of the application.
     *
     * @param {string} [parameters.homepage] The home page of the application.
     *
     * @param {array} parameters.identifierUris A collection of URIs for the
     * application.
     *
     * @param {array} [parameters.replyUrls] A collection of reply URLs for the
     * application.
     *
     * @param {array} [parameters.keyCredentials] The list of KeyCredential
     * objects.
     *
     * @param {array} [parameters.passwordCredentials] The list of
     * PasswordCredential objects.
     *
     * @param {boolean} [parameters.oauth2AllowImplicitFlow] Whether to allow
     * implicit grant flow for OAuth2
     *
     * @param {array} [parameters.requiredResourceAccess] Specifies resources that
     * this application requires access to and the set of OAuth permission scopes
     * and application roles that it needs under each of those resources. This
     * pre-configuration of required resource access drives the consent experience.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Application} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Application} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Application} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(parameters: models.ApplicationCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Application>;
    create(parameters: models.ApplicationCreateParameters, callback: ServiceCallback<models.Application>): void;
    create(parameters: models.ApplicationCreateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Application>): void;


    /**
     * Lists applications by filter parameters.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filters to apply to the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationListResult>>;

    /**
     * Lists applications by filter parameters.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filters to apply to the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationListResult>;
    list(callback: ServiceCallback<models.ApplicationListResult>): void;
    list(options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationListResult>): void;


    /**
     * Delete an application.
     *
     * @param {string} applicationObjectId Application object ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(applicationObjectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete an application.
     *
     * @param {string} applicationObjectId Application object ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(applicationObjectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(applicationObjectId: string, callback: ServiceCallback<void>): void;
    deleteMethod(applicationObjectId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get an application by object ID.
     *
     * @param {string} applicationObjectId Application object ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Application>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(applicationObjectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Application>>;

    /**
     * Get an application by object ID.
     *
     * @param {string} applicationObjectId Application object ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Application} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Application} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Application} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(applicationObjectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Application>;
    get(applicationObjectId: string, callback: ServiceCallback<models.Application>): void;
    get(applicationObjectId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Application>): void;


    /**
     * Update an existing application.
     *
     * @param {string} applicationObjectId Application object ID.
     *
     * @param {object} parameters Parameters to update an existing application.
     *
     * @param {boolean} [parameters.availableToOtherTenants] Whether the
     * application is available to other tenants
     *
     * @param {string} [parameters.displayName] The display name of the
     * application.
     *
     * @param {string} [parameters.homepage] The home page of the application.
     *
     * @param {array} [parameters.identifierUris] A collection of URIs for the
     * application.
     *
     * @param {array} [parameters.replyUrls] A collection of reply URLs for the
     * application.
     *
     * @param {array} [parameters.keyCredentials] The list of KeyCredential
     * objects.
     *
     * @param {array} [parameters.passwordCredentials] The list of
     * PasswordCredential objects.
     *
     * @param {boolean} [parameters.oauth2AllowImplicitFlow] Whether to allow
     * implicit grant flow for OAuth2
     *
     * @param {array} [parameters.requiredResourceAccess] Specifies resources that
     * this application requires access to and the set of OAuth permission scopes
     * and application roles that it needs under each of those resources. This
     * pre-configuration of required resource access drives the consent experience.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    patchWithHttpOperationResponse(applicationObjectId: string, parameters: models.ApplicationUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Update an existing application.
     *
     * @param {string} applicationObjectId Application object ID.
     *
     * @param {object} parameters Parameters to update an existing application.
     *
     * @param {boolean} [parameters.availableToOtherTenants] Whether the
     * application is available to other tenants
     *
     * @param {string} [parameters.displayName] The display name of the
     * application.
     *
     * @param {string} [parameters.homepage] The home page of the application.
     *
     * @param {array} [parameters.identifierUris] A collection of URIs for the
     * application.
     *
     * @param {array} [parameters.replyUrls] A collection of reply URLs for the
     * application.
     *
     * @param {array} [parameters.keyCredentials] The list of KeyCredential
     * objects.
     *
     * @param {array} [parameters.passwordCredentials] The list of
     * PasswordCredential objects.
     *
     * @param {boolean} [parameters.oauth2AllowImplicitFlow] Whether to allow
     * implicit grant flow for OAuth2
     *
     * @param {array} [parameters.requiredResourceAccess] Specifies resources that
     * this application requires access to and the set of OAuth permission scopes
     * and application roles that it needs under each of those resources. This
     * pre-configuration of required resource access drives the consent experience.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    patch(applicationObjectId: string, parameters: models.ApplicationUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    patch(applicationObjectId: string, parameters: models.ApplicationUpdateParameters, callback: ServiceCallback<void>): void;
    patch(applicationObjectId: string, parameters: models.ApplicationUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get the keyCredentials associated with an application.
     *
     * @param {string} applicationObjectId Application object ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<KeyCredentialListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listKeyCredentialsWithHttpOperationResponse(applicationObjectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.KeyCredentialListResult>>;

    /**
     * Get the keyCredentials associated with an application.
     *
     * @param {string} applicationObjectId Application object ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {KeyCredentialListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {KeyCredentialListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link KeyCredentialListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listKeyCredentials(applicationObjectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.KeyCredentialListResult>;
    listKeyCredentials(applicationObjectId: string, callback: ServiceCallback<models.KeyCredentialListResult>): void;
    listKeyCredentials(applicationObjectId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyCredentialListResult>): void;


    /**
     * Update the keyCredentials associated with an application.
     *
     * @param {string} applicationObjectId Application object ID.
     *
     * @param {array} value A collection of KeyCredentials.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateKeyCredentialsWithHttpOperationResponse(applicationObjectId: string, value: models.KeyCredential[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Update the keyCredentials associated with an application.
     *
     * @param {string} applicationObjectId Application object ID.
     *
     * @param {array} value A collection of KeyCredentials.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateKeyCredentials(applicationObjectId: string, value: models.KeyCredential[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    updateKeyCredentials(applicationObjectId: string, value: models.KeyCredential[], callback: ServiceCallback<void>): void;
    updateKeyCredentials(applicationObjectId: string, value: models.KeyCredential[], options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get the passwordCredentials associated with an application.
     *
     * @param {string} applicationObjectId Application object ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PasswordCredentialListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listPasswordCredentialsWithHttpOperationResponse(applicationObjectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PasswordCredentialListResult>>;

    /**
     * Get the passwordCredentials associated with an application.
     *
     * @param {string} applicationObjectId Application object ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PasswordCredentialListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PasswordCredentialListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PasswordCredentialListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listPasswordCredentials(applicationObjectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PasswordCredentialListResult>;
    listPasswordCredentials(applicationObjectId: string, callback: ServiceCallback<models.PasswordCredentialListResult>): void;
    listPasswordCredentials(applicationObjectId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PasswordCredentialListResult>): void;


    /**
     * Update passwordCredentials associated with an application.
     *
     * @param {string} applicationObjectId Application object ID.
     *
     * @param {array} value A collection of PasswordCredentials.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updatePasswordCredentialsWithHttpOperationResponse(applicationObjectId: string, value: models.PasswordCredential[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Update passwordCredentials associated with an application.
     *
     * @param {string} applicationObjectId Application object ID.
     *
     * @param {array} value A collection of PasswordCredentials.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updatePasswordCredentials(applicationObjectId: string, value: models.PasswordCredential[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    updatePasswordCredentials(applicationObjectId: string, value: models.PasswordCredential[], callback: ServiceCallback<void>): void;
    updatePasswordCredentials(applicationObjectId: string, value: models.PasswordCredential[], options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a list of applications from the current tenant.
     *
     * @param {string} nextLink Next link for the list operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationListResult>>;

    /**
     * Gets a list of applications from the current tenant.
     *
     * @param {string} nextLink Next link for the list operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationListResult>;
    listNext(nextLink: string, callback: ServiceCallback<models.ApplicationListResult>): void;
    listNext(nextLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationListResult>): void;
}

/**
 * @class
 * Groups
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the GraphRbacManagementClient.
 */
export interface Groups {


    /**
     * Checks whether the specified user, group, contact, or service principal is a
     * direct or transitive member of the specified group.
     *
     * @param {object} parameters The check group membership parameters.
     *
     * @param {string} parameters.groupId The object ID of the group to check.
     *
     * @param {string} parameters.memberId The object ID of the contact, group,
     * user, or service principal to check for membership in the specified group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CheckGroupMembershipResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    isMemberOfWithHttpOperationResponse(parameters: models.CheckGroupMembershipParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CheckGroupMembershipResult>>;

    /**
     * Checks whether the specified user, group, contact, or service principal is a
     * direct or transitive member of the specified group.
     *
     * @param {object} parameters The check group membership parameters.
     *
     * @param {string} parameters.groupId The object ID of the group to check.
     *
     * @param {string} parameters.memberId The object ID of the contact, group,
     * user, or service principal to check for membership in the specified group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CheckGroupMembershipResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CheckGroupMembershipResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CheckGroupMembershipResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    isMemberOf(parameters: models.CheckGroupMembershipParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CheckGroupMembershipResult>;
    isMemberOf(parameters: models.CheckGroupMembershipParameters, callback: ServiceCallback<models.CheckGroupMembershipResult>): void;
    isMemberOf(parameters: models.CheckGroupMembershipParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CheckGroupMembershipResult>): void;


    /**
     * Remove a member from a group.
     *
     * @param {string} groupObjectId The object ID of the group from which to
     * remove the member.
     *
     * @param {string} memberObjectId Member object id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    removeMemberWithHttpOperationResponse(groupObjectId: string, memberObjectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Remove a member from a group.
     *
     * @param {string} groupObjectId The object ID of the group from which to
     * remove the member.
     *
     * @param {string} memberObjectId Member object id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    removeMember(groupObjectId: string, memberObjectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    removeMember(groupObjectId: string, memberObjectId: string, callback: ServiceCallback<void>): void;
    removeMember(groupObjectId: string, memberObjectId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Add a member to a group.
     *
     * @param {string} groupObjectId The object ID of the group to which to add the
     * member.
     *
     * @param {string} url A member object URL, such as
     * "https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd",
     * where "0b1f9851-1bf0-433f-aec3-cb9272f093dc" is the tenantId and
     * "f260bbc4-c254-447b-94cf-293b5ec434dd" is the objectId of the member (user,
     * application, servicePrincipal, group) to be added.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addMemberWithHttpOperationResponse(groupObjectId: string, url: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Add a member to a group.
     *
     * @param {string} groupObjectId The object ID of the group to which to add the
     * member.
     *
     * @param {string} url A member object URL, such as
     * "https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd",
     * where "0b1f9851-1bf0-433f-aec3-cb9272f093dc" is the tenantId and
     * "f260bbc4-c254-447b-94cf-293b5ec434dd" is the objectId of the member (user,
     * application, servicePrincipal, group) to be added.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addMember(groupObjectId: string, url: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    addMember(groupObjectId: string, url: string, callback: ServiceCallback<void>): void;
    addMember(groupObjectId: string, url: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Delete a group from the directory.
     *
     * @param {string} groupObjectId The object ID of the group to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(groupObjectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete a group from the directory.
     *
     * @param {string} groupObjectId The object ID of the group to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(groupObjectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(groupObjectId: string, callback: ServiceCallback<void>): void;
    deleteMethod(groupObjectId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Create a group in the directory.
     *
     * @param {object} parameters The parameters for the group to create.
     *
     * @param {string} parameters.displayName Group display name
     *
     * @param {string} parameters.mailNickname Mail nickname
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ADGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(parameters: models.GroupCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ADGroup>>;

    /**
     * Create a group in the directory.
     *
     * @param {object} parameters The parameters for the group to create.
     *
     * @param {string} parameters.displayName Group display name
     *
     * @param {string} parameters.mailNickname Mail nickname
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ADGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ADGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ADGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(parameters: models.GroupCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ADGroup>;
    create(parameters: models.GroupCreateParameters, callback: ServiceCallback<models.ADGroup>): void;
    create(parameters: models.GroupCreateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ADGroup>): void;


    /**
     * Gets list of groups for the current tenant.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GroupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GroupListResult>>;

    /**
     * Gets list of groups for the current tenant.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GroupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GroupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GroupListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.GroupListResult>;
    list(callback: ServiceCallback<models.GroupListResult>): void;
    list(options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GroupListResult>): void;


    /**
     * Gets the members of a group.
     *
     * @param {string} objectId The object ID of the group whose members should be
     * retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetObjectsResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getGroupMembersWithHttpOperationResponse(objectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetObjectsResult>>;

    /**
     * Gets the members of a group.
     *
     * @param {string} objectId The object ID of the group whose members should be
     * retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetObjectsResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetObjectsResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetObjectsResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getGroupMembers(objectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetObjectsResult>;
    getGroupMembers(objectId: string, callback: ServiceCallback<models.GetObjectsResult>): void;
    getGroupMembers(objectId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetObjectsResult>): void;


    /**
     * Gets group information from the directory.
     *
     * @param {string} objectId The object ID of the user for which to get group
     * information.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ADGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(objectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ADGroup>>;

    /**
     * Gets group information from the directory.
     *
     * @param {string} objectId The object ID of the user for which to get group
     * information.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ADGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ADGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ADGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(objectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ADGroup>;
    get(objectId: string, callback: ServiceCallback<models.ADGroup>): void;
    get(objectId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ADGroup>): void;


    /**
     * Gets a collection of object IDs of groups of which the specified group is a
     * member.
     *
     * @param {string} objectId The object ID of the group for which to get group
     * membership.
     *
     * @param {boolean} securityEnabledOnly If true, only membership in
     * security-enabled groups should be checked. Otherwise, membership in all
     * groups should be checked.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GroupGetMemberGroupsResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getMemberGroupsWithHttpOperationResponse(objectId: string, securityEnabledOnly: boolean, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GroupGetMemberGroupsResult>>;

    /**
     * Gets a collection of object IDs of groups of which the specified group is a
     * member.
     *
     * @param {string} objectId The object ID of the group for which to get group
     * membership.
     *
     * @param {boolean} securityEnabledOnly If true, only membership in
     * security-enabled groups should be checked. Otherwise, membership in all
     * groups should be checked.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GroupGetMemberGroupsResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GroupGetMemberGroupsResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GroupGetMemberGroupsResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getMemberGroups(objectId: string, securityEnabledOnly: boolean, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GroupGetMemberGroupsResult>;
    getMemberGroups(objectId: string, securityEnabledOnly: boolean, callback: ServiceCallback<models.GroupGetMemberGroupsResult>): void;
    getMemberGroups(objectId: string, securityEnabledOnly: boolean, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GroupGetMemberGroupsResult>): void;


    /**
     * Gets a list of groups for the current tenant.
     *
     * @param {string} nextLink Next link for the list operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GroupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GroupListResult>>;

    /**
     * Gets a list of groups for the current tenant.
     *
     * @param {string} nextLink Next link for the list operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GroupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GroupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GroupListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GroupListResult>;
    listNext(nextLink: string, callback: ServiceCallback<models.GroupListResult>): void;
    listNext(nextLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GroupListResult>): void;


    /**
     * Gets the members of a group.
     *
     * @param {string} nextLink Next link for the list operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetObjectsResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getGroupMembersNextWithHttpOperationResponse(nextLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetObjectsResult>>;

    /**
     * Gets the members of a group.
     *
     * @param {string} nextLink Next link for the list operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetObjectsResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetObjectsResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetObjectsResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getGroupMembersNext(nextLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetObjectsResult>;
    getGroupMembersNext(nextLink: string, callback: ServiceCallback<models.GetObjectsResult>): void;
    getGroupMembersNext(nextLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetObjectsResult>): void;
}

/**
 * @class
 * ServicePrincipals
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the GraphRbacManagementClient.
 */
export interface ServicePrincipals {


    /**
     * Creates a service principal in the directory.
     *
     * @param {object} parameters Parameters to create a service principal.
     *
     * @param {string} parameters.appId application Id
     *
     * @param {boolean} parameters.accountEnabled Whether the account is enabled
     *
     * @param {array} [parameters.keyCredentials] A collection of KeyCredential
     * objects.
     *
     * @param {array} [parameters.passwordCredentials] A collection of
     * PasswordCredential objects
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServicePrincipal>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(parameters: models.ServicePrincipalCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServicePrincipal>>;

    /**
     * Creates a service principal in the directory.
     *
     * @param {object} parameters Parameters to create a service principal.
     *
     * @param {string} parameters.appId application Id
     *
     * @param {boolean} parameters.accountEnabled Whether the account is enabled
     *
     * @param {array} [parameters.keyCredentials] A collection of KeyCredential
     * objects.
     *
     * @param {array} [parameters.passwordCredentials] A collection of
     * PasswordCredential objects
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServicePrincipal} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServicePrincipal} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServicePrincipal} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(parameters: models.ServicePrincipalCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServicePrincipal>;
    create(parameters: models.ServicePrincipalCreateParameters, callback: ServiceCallback<models.ServicePrincipal>): void;
    create(parameters: models.ServicePrincipalCreateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServicePrincipal>): void;


    /**
     * Gets a list of service principals from the current tenant.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServicePrincipalListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServicePrincipalListResult>>;

    /**
     * Gets a list of service principals from the current tenant.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServicePrincipalListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServicePrincipalListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServicePrincipalListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ServicePrincipalListResult>;
    list(callback: ServiceCallback<models.ServicePrincipalListResult>): void;
    list(options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServicePrincipalListResult>): void;


    /**
     * Deletes a service principal from the directory.
     *
     * @param {string} objectId The object ID of the service principal to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(objectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a service principal from the directory.
     *
     * @param {string} objectId The object ID of the service principal to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(objectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(objectId: string, callback: ServiceCallback<void>): void;
    deleteMethod(objectId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets service principal information from the directory.
     *
     * @param {string} objectId The object ID of the service principal to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServicePrincipal>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(objectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServicePrincipal>>;

    /**
     * Gets service principal information from the directory.
     *
     * @param {string} objectId The object ID of the service principal to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServicePrincipal} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServicePrincipal} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServicePrincipal} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(objectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServicePrincipal>;
    get(objectId: string, callback: ServiceCallback<models.ServicePrincipal>): void;
    get(objectId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServicePrincipal>): void;


    /**
     * Get the keyCredentials associated with the specified service principal.
     *
     * @param {string} objectId The object ID of the service principal for which to
     * get keyCredentials.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<KeyCredentialListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listKeyCredentialsWithHttpOperationResponse(objectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.KeyCredentialListResult>>;

    /**
     * Get the keyCredentials associated with the specified service principal.
     *
     * @param {string} objectId The object ID of the service principal for which to
     * get keyCredentials.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {KeyCredentialListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {KeyCredentialListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link KeyCredentialListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listKeyCredentials(objectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.KeyCredentialListResult>;
    listKeyCredentials(objectId: string, callback: ServiceCallback<models.KeyCredentialListResult>): void;
    listKeyCredentials(objectId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KeyCredentialListResult>): void;


    /**
     * Update the keyCredentials associated with a service principal.
     *
     * @param {string} objectId The object ID for which to get service principal
     * information.
     *
     * @param {array} value A collection of KeyCredentials.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateKeyCredentialsWithHttpOperationResponse(objectId: string, value: models.KeyCredential[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Update the keyCredentials associated with a service principal.
     *
     * @param {string} objectId The object ID for which to get service principal
     * information.
     *
     * @param {array} value A collection of KeyCredentials.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateKeyCredentials(objectId: string, value: models.KeyCredential[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    updateKeyCredentials(objectId: string, value: models.KeyCredential[], callback: ServiceCallback<void>): void;
    updateKeyCredentials(objectId: string, value: models.KeyCredential[], options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the passwordCredentials associated with a service principal.
     *
     * @param {string} objectId The object ID of the service principal.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PasswordCredentialListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listPasswordCredentialsWithHttpOperationResponse(objectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PasswordCredentialListResult>>;

    /**
     * Gets the passwordCredentials associated with a service principal.
     *
     * @param {string} objectId The object ID of the service principal.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PasswordCredentialListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PasswordCredentialListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PasswordCredentialListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listPasswordCredentials(objectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PasswordCredentialListResult>;
    listPasswordCredentials(objectId: string, callback: ServiceCallback<models.PasswordCredentialListResult>): void;
    listPasswordCredentials(objectId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PasswordCredentialListResult>): void;


    /**
     * Updates the passwordCredentials associated with a service principal.
     *
     * @param {string} objectId The object ID of the service principal.
     *
     * @param {array} value A collection of PasswordCredentials.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updatePasswordCredentialsWithHttpOperationResponse(objectId: string, value: models.PasswordCredential[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Updates the passwordCredentials associated with a service principal.
     *
     * @param {string} objectId The object ID of the service principal.
     *
     * @param {array} value A collection of PasswordCredentials.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updatePasswordCredentials(objectId: string, value: models.PasswordCredential[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    updatePasswordCredentials(objectId: string, value: models.PasswordCredential[], callback: ServiceCallback<void>): void;
    updatePasswordCredentials(objectId: string, value: models.PasswordCredential[], options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a list of service principals from the current tenant.
     *
     * @param {string} nextLink Next link for the list operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServicePrincipalListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServicePrincipalListResult>>;

    /**
     * Gets a list of service principals from the current tenant.
     *
     * @param {string} nextLink Next link for the list operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServicePrincipalListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServicePrincipalListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServicePrincipalListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServicePrincipalListResult>;
    listNext(nextLink: string, callback: ServiceCallback<models.ServicePrincipalListResult>): void;
    listNext(nextLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServicePrincipalListResult>): void;
}

/**
 * @class
 * Users
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the GraphRbacManagementClient.
 */
export interface Users {


    /**
     * Create a new user.
     *
     * @param {object} parameters Parameters to create a user.
     *
     * @param {boolean} parameters.accountEnabled Whether the account is enabled.
     *
     * @param {string} parameters.displayName The display name of the user.
     *
     * @param {object} parameters.passwordProfile Password Profile
     *
     * @param {string} parameters.passwordProfile.password Password
     *
     * @param {boolean} [parameters.passwordProfile.forceChangePasswordNextLogin]
     * Whether to force a password change on next login.
     *
     * @param {string} parameters.userPrincipalName The user principal name
     * (someuser@contoso.com). It must contain one of the verified domains for the
     * tenant.
     *
     * @param {string} parameters.mailNickname The mail alias for the user.
     *
     * @param {string} [parameters.mail] The primary email address of the user.
     *
     * @param {string} [parameters.immutableId] This must be specified if you are
     * using a federated domain for the user's userPrincipalName (UPN) property
     * when creating a new user account. It is used to associate an on-premises
     * Active Directory user account with their Azure AD user object.
     *
     * @param {string} [parameters.usageLocation] A two letter country code (ISO
     * standard 3166). Required for users that will be assigned licenses due to
     * legal requirement to check for availability of services in countries.
     * Examples include: "US", "JP", and "GB".
     *
     * @param {string} [parameters.givenName] The given name for the user.
     *
     * @param {string} [parameters.surname] The user's surname (family name or last
     * name).
     *
     * @param {string} [parameters.userType] A string value that can be used to
     * classify user types in your directory, such as 'Member' and 'Guest'.
     * Possible values include: 'Member', 'Guest'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<User>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(parameters: models.UserCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.User>>;

    /**
     * Create a new user.
     *
     * @param {object} parameters Parameters to create a user.
     *
     * @param {boolean} parameters.accountEnabled Whether the account is enabled.
     *
     * @param {string} parameters.displayName The display name of the user.
     *
     * @param {object} parameters.passwordProfile Password Profile
     *
     * @param {string} parameters.passwordProfile.password Password
     *
     * @param {boolean} [parameters.passwordProfile.forceChangePasswordNextLogin]
     * Whether to force a password change on next login.
     *
     * @param {string} parameters.userPrincipalName The user principal name
     * (someuser@contoso.com). It must contain one of the verified domains for the
     * tenant.
     *
     * @param {string} parameters.mailNickname The mail alias for the user.
     *
     * @param {string} [parameters.mail] The primary email address of the user.
     *
     * @param {string} [parameters.immutableId] This must be specified if you are
     * using a federated domain for the user's userPrincipalName (UPN) property
     * when creating a new user account. It is used to associate an on-premises
     * Active Directory user account with their Azure AD user object.
     *
     * @param {string} [parameters.usageLocation] A two letter country code (ISO
     * standard 3166). Required for users that will be assigned licenses due to
     * legal requirement to check for availability of services in countries.
     * Examples include: "US", "JP", and "GB".
     *
     * @param {string} [parameters.givenName] The given name for the user.
     *
     * @param {string} [parameters.surname] The user's surname (family name or last
     * name).
     *
     * @param {string} [parameters.userType] A string value that can be used to
     * classify user types in your directory, such as 'Member' and 'Guest'.
     * Possible values include: 'Member', 'Guest'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {User} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {User} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link User} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(parameters: models.UserCreateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.User>;
    create(parameters: models.UserCreateParameters, callback: ServiceCallback<models.User>): void;
    create(parameters: models.UserCreateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.User>): void;


    /**
     * Gets list of users for the current tenant.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UserListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UserListResult>>;

    /**
     * Gets list of users for the current tenant.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UserListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UserListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UserListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.UserListResult>;
    list(callback: ServiceCallback<models.UserListResult>): void;
    list(options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UserListResult>): void;


    /**
     * Gets user information from the directory.
     *
     * @param {string} upnOrObjectId The object ID or principal name of the user
     * for which to get information.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<User>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(upnOrObjectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.User>>;

    /**
     * Gets user information from the directory.
     *
     * @param {string} upnOrObjectId The object ID or principal name of the user
     * for which to get information.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {User} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {User} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link User} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(upnOrObjectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.User>;
    get(upnOrObjectId: string, callback: ServiceCallback<models.User>): void;
    get(upnOrObjectId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.User>): void;


    /**
     * Updates a user.
     *
     * @param {string} upnOrObjectId The object ID or principal name of the user to
     * update.
     *
     * @param {object} parameters Parameters to update an existing user.
     *
     * @param {boolean} [parameters.accountEnabled] Whether the account is enabled.
     *
     * @param {string} [parameters.displayName] The display name of the user.
     *
     * @param {object} [parameters.passwordProfile] The password profile of the
     * user.
     *
     * @param {string} parameters.passwordProfile.password Password
     *
     * @param {boolean} [parameters.passwordProfile.forceChangePasswordNextLogin]
     * Whether to force a password change on next login.
     *
     * @param {string} [parameters.userPrincipalName] The user principal name
     * (someuser@contoso.com). It must contain one of the verified domains for the
     * tenant.
     *
     * @param {string} [parameters.mailNickname] The mail alias for the user.
     *
     * @param {string} [parameters.immutableId] This must be specified if you are
     * using a federated domain for the user's userPrincipalName (UPN) property
     * when creating a new user account. It is used to associate an on-premises
     * Active Directory user account with their Azure AD user object.
     *
     * @param {string} [parameters.usageLocation] A two letter country code (ISO
     * standard 3166). Required for users that will be assigned licenses due to
     * legal requirement to check for availability of services in countries.
     * Examples include: "US", "JP", and "GB".
     *
     * @param {string} [parameters.givenName] The given name for the user.
     *
     * @param {string} [parameters.surname] The user's surname (family name or last
     * name).
     *
     * @param {string} [parameters.userType] A string value that can be used to
     * classify user types in your directory, such as 'Member' and 'Guest'.
     * Possible values include: 'Member', 'Guest'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(upnOrObjectId: string, parameters: models.UserUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Updates a user.
     *
     * @param {string} upnOrObjectId The object ID or principal name of the user to
     * update.
     *
     * @param {object} parameters Parameters to update an existing user.
     *
     * @param {boolean} [parameters.accountEnabled] Whether the account is enabled.
     *
     * @param {string} [parameters.displayName] The display name of the user.
     *
     * @param {object} [parameters.passwordProfile] The password profile of the
     * user.
     *
     * @param {string} parameters.passwordProfile.password Password
     *
     * @param {boolean} [parameters.passwordProfile.forceChangePasswordNextLogin]
     * Whether to force a password change on next login.
     *
     * @param {string} [parameters.userPrincipalName] The user principal name
     * (someuser@contoso.com). It must contain one of the verified domains for the
     * tenant.
     *
     * @param {string} [parameters.mailNickname] The mail alias for the user.
     *
     * @param {string} [parameters.immutableId] This must be specified if you are
     * using a federated domain for the user's userPrincipalName (UPN) property
     * when creating a new user account. It is used to associate an on-premises
     * Active Directory user account with their Azure AD user object.
     *
     * @param {string} [parameters.usageLocation] A two letter country code (ISO
     * standard 3166). Required for users that will be assigned licenses due to
     * legal requirement to check for availability of services in countries.
     * Examples include: "US", "JP", and "GB".
     *
     * @param {string} [parameters.givenName] The given name for the user.
     *
     * @param {string} [parameters.surname] The user's surname (family name or last
     * name).
     *
     * @param {string} [parameters.userType] A string value that can be used to
     * classify user types in your directory, such as 'Member' and 'Guest'.
     * Possible values include: 'Member', 'Guest'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(upnOrObjectId: string, parameters: models.UserUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    update(upnOrObjectId: string, parameters: models.UserUpdateParameters, callback: ServiceCallback<void>): void;
    update(upnOrObjectId: string, parameters: models.UserUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Delete a user.
     *
     * @param {string} upnOrObjectId The object ID or principal name of the user to
     * delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(upnOrObjectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete a user.
     *
     * @param {string} upnOrObjectId The object ID or principal name of the user to
     * delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(upnOrObjectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(upnOrObjectId: string, callback: ServiceCallback<void>): void;
    deleteMethod(upnOrObjectId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a collection that contains the object IDs of the groups of which the
     * user is a member.
     *
     * @param {string} objectId The object ID of the user for which to get group
     * membership.
     *
     * @param {boolean} securityEnabledOnly If true, only membership in
     * security-enabled groups should be checked. Otherwise, membership in all
     * groups should be checked.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UserGetMemberGroupsResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getMemberGroupsWithHttpOperationResponse(objectId: string, securityEnabledOnly: boolean, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UserGetMemberGroupsResult>>;

    /**
     * Gets a collection that contains the object IDs of the groups of which the
     * user is a member.
     *
     * @param {string} objectId The object ID of the user for which to get group
     * membership.
     *
     * @param {boolean} securityEnabledOnly If true, only membership in
     * security-enabled groups should be checked. Otherwise, membership in all
     * groups should be checked.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UserGetMemberGroupsResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UserGetMemberGroupsResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UserGetMemberGroupsResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getMemberGroups(objectId: string, securityEnabledOnly: boolean, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.UserGetMemberGroupsResult>;
    getMemberGroups(objectId: string, securityEnabledOnly: boolean, callback: ServiceCallback<models.UserGetMemberGroupsResult>): void;
    getMemberGroups(objectId: string, securityEnabledOnly: boolean, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UserGetMemberGroupsResult>): void;


    /**
     * Gets a list of users for the current tenant.
     *
     * @param {string} nextLink Next link for the list operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UserListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UserListResult>>;

    /**
     * Gets a list of users for the current tenant.
     *
     * @param {string} nextLink Next link for the list operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UserListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UserListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UserListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.UserListResult>;
    listNext(nextLink: string, callback: ServiceCallback<models.UserListResult>): void;
    listNext(nextLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UserListResult>): void;
}

/**
 * @class
 * Domains
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the GraphRbacManagementClient.
 */
export interface Domains {


    /**
     * Gets a list of domains for the current tenant.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DomainListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DomainListResult>>;

    /**
     * Gets a list of domains for the current tenant.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DomainListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DomainListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DomainListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.DomainListResult>;
    list(callback: ServiceCallback<models.DomainListResult>): void;
    list(options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainListResult>): void;


    /**
     * Gets a specific domain in the current tenant.
     *
     * @param {string} domainName name of the domain.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Domain>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(domainName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Domain>>;

    /**
     * Gets a specific domain in the current tenant.
     *
     * @param {string} domainName name of the domain.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Domain} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Domain} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Domain} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(domainName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Domain>;
    get(domainName: string, callback: ServiceCallback<models.Domain>): void;
    get(domainName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Domain>): void;
}
