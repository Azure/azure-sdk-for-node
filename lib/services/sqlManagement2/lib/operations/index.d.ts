/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * RecoverableDatabases
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface RecoverableDatabases {


    /**
     * Gets a recoverable database, which is a resource representing a database's
     * geo backup
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RecoverableDatabase>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RecoverableDatabase>>;

    /**
     * Gets a recoverable database, which is a resource representing a database's
     * geo backup
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RecoverableDatabase} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RecoverableDatabase} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RecoverableDatabase} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RecoverableDatabase>;
    get(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.RecoverableDatabase>): void;
    get(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RecoverableDatabase>): void;


    /**
     * Gets a list of recoverable databases
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RecoverableDatabaseListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RecoverableDatabaseListResult>>;

    /**
     * Gets a list of recoverable databases
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RecoverableDatabaseListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RecoverableDatabaseListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RecoverableDatabaseListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RecoverableDatabaseListResult>;
    listByServer(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.RecoverableDatabaseListResult>): void;
    listByServer(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RecoverableDatabaseListResult>): void;
}

/**
 * @class
 * RestorableDroppedDatabases
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface RestorableDroppedDatabases {


    /**
     * Gets a deleted database that can be restored
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} restorableDroppededDatabaseId The id of the deleted database
     * in the form of databaseName,deletionTimeInFileTimeFormat
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RestorableDroppedDatabase>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, restorableDroppededDatabaseId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RestorableDroppedDatabase>>;

    /**
     * Gets a deleted database that can be restored
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} restorableDroppededDatabaseId The id of the deleted database
     * in the form of databaseName,deletionTimeInFileTimeFormat
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RestorableDroppedDatabase} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RestorableDroppedDatabase} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RestorableDroppedDatabase} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, restorableDroppededDatabaseId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RestorableDroppedDatabase>;
    get(resourceGroupName: string, serverName: string, restorableDroppededDatabaseId: string, callback: ServiceCallback<models.RestorableDroppedDatabase>): void;
    get(resourceGroupName: string, serverName: string, restorableDroppededDatabaseId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RestorableDroppedDatabase>): void;


    /**
     * Gets a list of deleted databases that can be restored
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RestorableDroppedDatabaseListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RestorableDroppedDatabaseListResult>>;

    /**
     * Gets a list of deleted databases that can be restored
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RestorableDroppedDatabaseListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RestorableDroppedDatabaseListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RestorableDroppedDatabaseListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RestorableDroppedDatabaseListResult>;
    listByServer(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.RestorableDroppedDatabaseListResult>): void;
    listByServer(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RestorableDroppedDatabaseListResult>): void;
}

/**
 * @class
 * Servers
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface Servers {


    /**
     * Determines whether a resource can be created with the specified name.
     *
     * @param {object} parameters The parameters to request for name availability.
     *
     * @param {string} parameters.name The name whose availability is to be
     * checked.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CheckNameAvailabilityResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkNameAvailabilityWithHttpOperationResponse(parameters: models.CheckNameAvailabilityRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CheckNameAvailabilityResponse>>;

    /**
     * Determines whether a resource can be created with the specified name.
     *
     * @param {object} parameters The parameters to request for name availability.
     *
     * @param {string} parameters.name The name whose availability is to be
     * checked.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CheckNameAvailabilityResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CheckNameAvailabilityResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CheckNameAvailabilityResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkNameAvailability(parameters: models.CheckNameAvailabilityRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CheckNameAvailabilityResponse>;
    checkNameAvailability(parameters: models.CheckNameAvailabilityRequest, callback: ServiceCallback<models.CheckNameAvailabilityResponse>): void;
    checkNameAvailability(parameters: models.CheckNameAvailabilityRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CheckNameAvailabilityResponse>): void;


    /**
     * Gets a list of all servers in the subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerListResult>>;

    /**
     * Gets a list of all servers in the subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerListResult>;
    list(callback: ServiceCallback<models.ServerListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerListResult>): void;


    /**
     * Gets a list of servers in a resource groups.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerListResult>>;

    /**
     * Gets a list of servers in a resource groups.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.ServerListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerListResult>): void;


    /**
     * Gets a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Server>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Server>>;

    /**
     * Gets a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Server} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Server} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Server} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Server>;
    get(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.Server>): void;
    get(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Server>): void;


    /**
     * Creates or updates a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The requested server resource state.
     *
     * @param {object} [parameters.identity] The Azure Active Directory identity of
     * the server.
     *
     * @param {string} [parameters.identity.type] The identity type. Set this to
     * 'SystemAssigned' in order to automatically create and assign an Azure Active
     * Directory principal for the resource. Possible values include:
     * 'SystemAssigned'
     *
     * @param {string} [parameters.administratorLogin] Administrator username for
     * the server. Once created it cannot be changed.
     *
     * @param {string} [parameters.administratorLoginPassword] The administrator
     * login password (required for server creation).
     *
     * @param {string} [parameters.version] The version of the server.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Server>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, parameters: models.Server, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Server>>;

    /**
     * Creates or updates a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The requested server resource state.
     *
     * @param {object} [parameters.identity] The Azure Active Directory identity of
     * the server.
     *
     * @param {string} [parameters.identity.type] The identity type. Set this to
     * 'SystemAssigned' in order to automatically create and assign an Azure Active
     * Directory principal for the resource. Possible values include:
     * 'SystemAssigned'
     *
     * @param {string} [parameters.administratorLogin] Administrator username for
     * the server. Once created it cannot be changed.
     *
     * @param {string} [parameters.administratorLoginPassword] The administrator
     * login password (required for server creation).
     *
     * @param {string} [parameters.version] The version of the server.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Server} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Server} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Server} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, parameters: models.Server, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Server>;
    createOrUpdate(resourceGroupName: string, serverName: string, parameters: models.Server, callback: ServiceCallback<models.Server>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, parameters: models.Server, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Server>): void;


    /**
     * Deletes a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serverName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The requested server resource state.
     *
     * @param {string} [parameters.administratorLogin] Administrator username for
     * the server. Once created it cannot be changed.
     *
     * @param {string} [parameters.administratorLoginPassword] The administrator
     * login password (required for server creation).
     *
     * @param {string} [parameters.version] The version of the server.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Server>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serverName: string, parameters: models.ServerUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Server>>;

    /**
     * Updates a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The requested server resource state.
     *
     * @param {string} [parameters.administratorLogin] Administrator username for
     * the server. Once created it cannot be changed.
     *
     * @param {string} [parameters.administratorLoginPassword] The administrator
     * login password (required for server creation).
     *
     * @param {string} [parameters.version] The version of the server.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Server} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Server} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Server} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serverName: string, parameters: models.ServerUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Server>;
    update(resourceGroupName: string, serverName: string, parameters: models.ServerUpdate, callback: ServiceCallback<models.Server>): void;
    update(resourceGroupName: string, serverName: string, parameters: models.ServerUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Server>): void;


    /**
     * Creates or updates a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The requested server resource state.
     *
     * @param {object} [parameters.identity] The Azure Active Directory identity of
     * the server.
     *
     * @param {string} [parameters.identity.type] The identity type. Set this to
     * 'SystemAssigned' in order to automatically create and assign an Azure Active
     * Directory principal for the resource. Possible values include:
     * 'SystemAssigned'
     *
     * @param {string} [parameters.administratorLogin] Administrator username for
     * the server. Once created it cannot be changed.
     *
     * @param {string} [parameters.administratorLoginPassword] The administrator
     * login password (required for server creation).
     *
     * @param {string} [parameters.version] The version of the server.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Server>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, parameters: models.Server, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Server>>;

    /**
     * Creates or updates a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The requested server resource state.
     *
     * @param {object} [parameters.identity] The Azure Active Directory identity of
     * the server.
     *
     * @param {string} [parameters.identity.type] The identity type. Set this to
     * 'SystemAssigned' in order to automatically create and assign an Azure Active
     * Directory principal for the resource. Possible values include:
     * 'SystemAssigned'
     *
     * @param {string} [parameters.administratorLogin] Administrator username for
     * the server. Once created it cannot be changed.
     *
     * @param {string} [parameters.administratorLoginPassword] The administrator
     * login password (required for server creation).
     *
     * @param {string} [parameters.version] The version of the server.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Server} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Server} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Server} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, parameters: models.Server, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Server>;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, parameters: models.Server, callback: ServiceCallback<models.Server>): void;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, parameters: models.Server, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Server>): void;


    /**
     * Deletes a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, serverName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The requested server resource state.
     *
     * @param {string} [parameters.administratorLogin] Administrator username for
     * the server. Once created it cannot be changed.
     *
     * @param {string} [parameters.administratorLoginPassword] The administrator
     * login password (required for server creation).
     *
     * @param {string} [parameters.version] The version of the server.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Server>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, parameters: models.ServerUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Server>>;

    /**
     * Updates a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The requested server resource state.
     *
     * @param {string} [parameters.administratorLogin] Administrator username for
     * the server. Once created it cannot be changed.
     *
     * @param {string} [parameters.administratorLoginPassword] The administrator
     * login password (required for server creation).
     *
     * @param {string} [parameters.version] The version of the server.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Server} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Server} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Server} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, serverName: string, parameters: models.ServerUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Server>;
    beginUpdate(resourceGroupName: string, serverName: string, parameters: models.ServerUpdate, callback: ServiceCallback<models.Server>): void;
    beginUpdate(resourceGroupName: string, serverName: string, parameters: models.ServerUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Server>): void;


    /**
     * Gets a list of all servers in the subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerListResult>>;

    /**
     * Gets a list of all servers in the subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ServerListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerListResult>): void;


    /**
     * Gets a list of servers in a resource groups.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerListResult>>;

    /**
     * Gets a list of servers in a resource groups.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.ServerListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerListResult>): void;
}

/**
 * @class
 * ServerConnectionPolicies
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface ServerConnectionPolicies {


    /**
     * Creates or updates the server's connection policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The required parameters for updating a secure
     * connection policy.
     *
     * @param {string} parameters.connectionType The server connection type.
     * Possible values include: 'Default', 'Proxy', 'Redirect'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerConnectionPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, parameters: models.ServerConnectionPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerConnectionPolicy>>;

    /**
     * Creates or updates the server's connection policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The required parameters for updating a secure
     * connection policy.
     *
     * @param {string} parameters.connectionType The server connection type.
     * Possible values include: 'Default', 'Proxy', 'Redirect'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerConnectionPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerConnectionPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerConnectionPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, parameters: models.ServerConnectionPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerConnectionPolicy>;
    createOrUpdate(resourceGroupName: string, serverName: string, parameters: models.ServerConnectionPolicy, callback: ServiceCallback<models.ServerConnectionPolicy>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, parameters: models.ServerConnectionPolicy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerConnectionPolicy>): void;


    /**
     * Gets the server's secure connection policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerConnectionPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerConnectionPolicy>>;

    /**
     * Gets the server's secure connection policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerConnectionPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerConnectionPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerConnectionPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerConnectionPolicy>;
    get(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.ServerConnectionPolicy>): void;
    get(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerConnectionPolicy>): void;
}

/**
 * @class
 * DatabaseThreatDetectionPolicies
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface DatabaseThreatDetectionPolicies {


    /**
     * Gets a database's threat detection policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which database
     * Threat Detection policy is defined.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseSecurityAlertPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseSecurityAlertPolicy>>;

    /**
     * Gets a database's threat detection policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which database
     * Threat Detection policy is defined.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseSecurityAlertPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseSecurityAlertPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseSecurityAlertPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseSecurityAlertPolicy>;
    get(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.DatabaseSecurityAlertPolicy>): void;
    get(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseSecurityAlertPolicy>): void;


    /**
     * Creates or updates a database's threat detection policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which database
     * Threat Detection policy is defined.
     *
     * @param {object} parameters The database Threat Detection policy.
     *
     * @param {string} [parameters.location] The geo-location where the resource
     * lives
     *
     * @param {string} parameters.state Specifies the state of the policy. If state
     * is Enabled, storageEndpoint and storageAccountAccessKey are required.
     * Possible values include: 'New', 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.disabledAlerts] Specifies the
     * semicolon-separated list of alerts that are disabled, or empty string to
     * disable no alerts. Possible values: Sql_Injection;
     * Sql_Injection_Vulnerability; Access_Anomaly; Data_Exfiltration;
     * Unsafe_Action.
     *
     * @param {string} [parameters.emailAddresses] Specifies the
     * semicolon-separated list of e-mail addresses to which the alert is sent.
     *
     * @param {string} [parameters.emailAccountAdmins] Specifies that the alert is
     * sent to the account administrators. Possible values include: 'Enabled',
     * 'Disabled'
     *
     * @param {string} [parameters.storageEndpoint] Specifies the blob storage
     * endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage
     * will hold all Threat Detection audit logs. If state is Enabled,
     * storageEndpoint is required.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the Threat Detection audit storage account. If state is
     * Enabled, storageAccountAccessKey is required.
     *
     * @param {number} [parameters.retentionDays] Specifies the number of days to
     * keep in the Threat Detection audit logs.
     *
     * @param {string} [parameters.useServerDefault] Specifies whether to use the
     * default server policy. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseSecurityAlertPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DatabaseSecurityAlertPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseSecurityAlertPolicy>>;

    /**
     * Creates or updates a database's threat detection policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which database
     * Threat Detection policy is defined.
     *
     * @param {object} parameters The database Threat Detection policy.
     *
     * @param {string} [parameters.location] The geo-location where the resource
     * lives
     *
     * @param {string} parameters.state Specifies the state of the policy. If state
     * is Enabled, storageEndpoint and storageAccountAccessKey are required.
     * Possible values include: 'New', 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.disabledAlerts] Specifies the
     * semicolon-separated list of alerts that are disabled, or empty string to
     * disable no alerts. Possible values: Sql_Injection;
     * Sql_Injection_Vulnerability; Access_Anomaly; Data_Exfiltration;
     * Unsafe_Action.
     *
     * @param {string} [parameters.emailAddresses] Specifies the
     * semicolon-separated list of e-mail addresses to which the alert is sent.
     *
     * @param {string} [parameters.emailAccountAdmins] Specifies that the alert is
     * sent to the account administrators. Possible values include: 'Enabled',
     * 'Disabled'
     *
     * @param {string} [parameters.storageEndpoint] Specifies the blob storage
     * endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage
     * will hold all Threat Detection audit logs. If state is Enabled,
     * storageEndpoint is required.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the Threat Detection audit storage account. If state is
     * Enabled, storageAccountAccessKey is required.
     *
     * @param {number} [parameters.retentionDays] Specifies the number of days to
     * keep in the Threat Detection audit logs.
     *
     * @param {string} [parameters.useServerDefault] Specifies whether to use the
     * default server policy. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseSecurityAlertPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseSecurityAlertPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseSecurityAlertPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DatabaseSecurityAlertPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseSecurityAlertPolicy>;
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DatabaseSecurityAlertPolicy, callback: ServiceCallback<models.DatabaseSecurityAlertPolicy>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DatabaseSecurityAlertPolicy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseSecurityAlertPolicy>): void;
}

/**
 * @class
 * DataMaskingPolicies
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface DataMaskingPolicies {


    /**
     * Creates or updates a database data masking policy
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters Parameters for creating or updating a data
     * masking policy.
     *
     * @param {string} parameters.dataMaskingState The state of the data masking
     * policy. Possible values include: 'Disabled', 'Enabled'
     *
     * @param {string} [parameters.exemptPrincipals] The list of the exempt
     * principals. Specifies the semicolon-separated list of database users for
     * which the data masking policy does not apply. The specified users receive
     * data results without masking for all of the database queries.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataMaskingPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DataMaskingPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataMaskingPolicy>>;

    /**
     * Creates or updates a database data masking policy
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters Parameters for creating or updating a data
     * masking policy.
     *
     * @param {string} parameters.dataMaskingState The state of the data masking
     * policy. Possible values include: 'Disabled', 'Enabled'
     *
     * @param {string} [parameters.exemptPrincipals] The list of the exempt
     * principals. Specifies the semicolon-separated list of database users for
     * which the data masking policy does not apply. The specified users receive
     * data results without masking for all of the database queries.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataMaskingPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataMaskingPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataMaskingPolicy} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DataMaskingPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataMaskingPolicy>;
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DataMaskingPolicy, callback: ServiceCallback<models.DataMaskingPolicy>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DataMaskingPolicy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataMaskingPolicy>): void;


    /**
     * Gets a database data masking policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataMaskingPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataMaskingPolicy>>;

    /**
     * Gets a database data masking policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataMaskingPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataMaskingPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataMaskingPolicy} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataMaskingPolicy>;
    get(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.DataMaskingPolicy>): void;
    get(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataMaskingPolicy>): void;
}

/**
 * @class
 * DataMaskingRules
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface DataMaskingRules {


    /**
     * Creates or updates a database data masking rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {string} dataMaskingRuleName The name of the data masking rule.
     *
     * @param {object} parameters The required parameters for creating or updating
     * a data masking rule.
     *
     * @param {string} [parameters.aliasName] The alias name. This is a legacy
     * parameter and is no longer used.
     *
     * @param {string} [parameters.ruleState] The rule state. Used to delete a
     * rule. To delete an existing rule, specify the schemaName, tableName,
     * columnName, maskingFunction, and specify ruleState as disabled. However, if
     * the rule doesn't already exist, the rule will be created with ruleState set
     * to enabled, regardless of the provided value of ruleState. Possible values
     * include: 'Disabled', 'Enabled'
     *
     * @param {string} parameters.schemaName The schema name on which the data
     * masking rule is applied.
     *
     * @param {string} parameters.tableName The table name on which the data
     * masking rule is applied.
     *
     * @param {string} parameters.columnName The column name on which the data
     * masking rule is applied.
     *
     * @param {string} parameters.maskingFunction The masking function that is used
     * for the data masking rule. Possible values include: 'Default', 'CCN',
     * 'Email', 'Number', 'SSN', 'Text'
     *
     * @param {string} [parameters.numberFrom] The numberFrom property of the
     * masking rule. Required if maskingFunction is set to Number, otherwise this
     * parameter will be ignored.
     *
     * @param {string} [parameters.numberTo] The numberTo property of the data
     * masking rule. Required if maskingFunction is set to Number, otherwise this
     * parameter will be ignored.
     *
     * @param {string} [parameters.prefixSize] If maskingFunction is set to Text,
     * the number of characters to show unmasked in the beginning of the string.
     * Otherwise, this parameter will be ignored.
     *
     * @param {string} [parameters.suffixSize] If maskingFunction is set to Text,
     * the number of characters to show unmasked at the end of the string.
     * Otherwise, this parameter will be ignored.
     *
     * @param {string} [parameters.replacementString] If maskingFunction is set to
     * Text, the character to use for masking the unexposed part of the string.
     * Otherwise, this parameter will be ignored.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataMaskingRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, dataMaskingRuleName: string, parameters: models.DataMaskingRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataMaskingRule>>;

    /**
     * Creates or updates a database data masking rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {string} dataMaskingRuleName The name of the data masking rule.
     *
     * @param {object} parameters The required parameters for creating or updating
     * a data masking rule.
     *
     * @param {string} [parameters.aliasName] The alias name. This is a legacy
     * parameter and is no longer used.
     *
     * @param {string} [parameters.ruleState] The rule state. Used to delete a
     * rule. To delete an existing rule, specify the schemaName, tableName,
     * columnName, maskingFunction, and specify ruleState as disabled. However, if
     * the rule doesn't already exist, the rule will be created with ruleState set
     * to enabled, regardless of the provided value of ruleState. Possible values
     * include: 'Disabled', 'Enabled'
     *
     * @param {string} parameters.schemaName The schema name on which the data
     * masking rule is applied.
     *
     * @param {string} parameters.tableName The table name on which the data
     * masking rule is applied.
     *
     * @param {string} parameters.columnName The column name on which the data
     * masking rule is applied.
     *
     * @param {string} parameters.maskingFunction The masking function that is used
     * for the data masking rule. Possible values include: 'Default', 'CCN',
     * 'Email', 'Number', 'SSN', 'Text'
     *
     * @param {string} [parameters.numberFrom] The numberFrom property of the
     * masking rule. Required if maskingFunction is set to Number, otherwise this
     * parameter will be ignored.
     *
     * @param {string} [parameters.numberTo] The numberTo property of the data
     * masking rule. Required if maskingFunction is set to Number, otherwise this
     * parameter will be ignored.
     *
     * @param {string} [parameters.prefixSize] If maskingFunction is set to Text,
     * the number of characters to show unmasked in the beginning of the string.
     * Otherwise, this parameter will be ignored.
     *
     * @param {string} [parameters.suffixSize] If maskingFunction is set to Text,
     * the number of characters to show unmasked at the end of the string.
     * Otherwise, this parameter will be ignored.
     *
     * @param {string} [parameters.replacementString] If maskingFunction is set to
     * Text, the character to use for masking the unexposed part of the string.
     * Otherwise, this parameter will be ignored.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataMaskingRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataMaskingRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataMaskingRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, dataMaskingRuleName: string, parameters: models.DataMaskingRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataMaskingRule>;
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, dataMaskingRuleName: string, parameters: models.DataMaskingRule, callback: ServiceCallback<models.DataMaskingRule>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, dataMaskingRuleName: string, parameters: models.DataMaskingRule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataMaskingRule>): void;


    /**
     * Gets a list of database data masking rules.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataMaskingRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDatabaseWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataMaskingRuleListResult>>;

    /**
     * Gets a list of database data masking rules.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataMaskingRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataMaskingRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataMaskingRuleListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataMaskingRuleListResult>;
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.DataMaskingRuleListResult>): void;
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataMaskingRuleListResult>): void;
}

/**
 * @class
 * FirewallRules
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface FirewallRules {


    /**
     * Creates or updates a firewall rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} firewallRuleName The name of the firewall rule.
     *
     * @param {object} parameters The required parameters for creating or updating
     * a firewall rule.
     *
     * @param {string} parameters.startIpAddress The start IP address of the
     * firewall rule. Must be IPv4 format. Use value '0.0.0.0' to represent all
     * Azure-internal IP addresses.
     *
     * @param {string} parameters.endIpAddress The end IP address of the firewall
     * rule. Must be IPv4 format. Must be greater than or equal to startIpAddress.
     * Use value '0.0.0.0' to represent all Azure-internal IP addresses.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FirewallRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, firewallRuleName: string, parameters: models.FirewallRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FirewallRule>>;

    /**
     * Creates or updates a firewall rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} firewallRuleName The name of the firewall rule.
     *
     * @param {object} parameters The required parameters for creating or updating
     * a firewall rule.
     *
     * @param {string} parameters.startIpAddress The start IP address of the
     * firewall rule. Must be IPv4 format. Use value '0.0.0.0' to represent all
     * Azure-internal IP addresses.
     *
     * @param {string} parameters.endIpAddress The end IP address of the firewall
     * rule. Must be IPv4 format. Must be greater than or equal to startIpAddress.
     * Use value '0.0.0.0' to represent all Azure-internal IP addresses.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FirewallRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FirewallRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FirewallRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, firewallRuleName: string, parameters: models.FirewallRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FirewallRule>;
    createOrUpdate(resourceGroupName: string, serverName: string, firewallRuleName: string, parameters: models.FirewallRule, callback: ServiceCallback<models.FirewallRule>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, firewallRuleName: string, parameters: models.FirewallRule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FirewallRule>): void;


    /**
     * Deletes a firewall rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} firewallRuleName The name of the firewall rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, firewallRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a firewall rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} firewallRuleName The name of the firewall rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serverName: string, firewallRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serverName: string, firewallRuleName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serverName: string, firewallRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a firewall rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} firewallRuleName The name of the firewall rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FirewallRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, firewallRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FirewallRule>>;

    /**
     * Gets a firewall rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} firewallRuleName The name of the firewall rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FirewallRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FirewallRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FirewallRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, firewallRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FirewallRule>;
    get(resourceGroupName: string, serverName: string, firewallRuleName: string, callback: ServiceCallback<models.FirewallRule>): void;
    get(resourceGroupName: string, serverName: string, firewallRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FirewallRule>): void;


    /**
     * Returns a list of firewall rules.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FirewallRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FirewallRuleListResult>>;

    /**
     * Returns a list of firewall rules.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FirewallRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FirewallRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FirewallRuleListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FirewallRuleListResult>;
    listByServer(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.FirewallRuleListResult>): void;
    listByServer(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FirewallRuleListResult>): void;
}

/**
 * @class
 * GeoBackupPolicies
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface GeoBackupPolicies {


    /**
     * Updates a database geo backup policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The required parameters for creating or updating
     * the geo backup policy.
     *
     * @param {string} parameters.state The state of the geo backup policy.
     * Possible values include: 'Disabled', 'Enabled'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GeoBackupPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.GeoBackupPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GeoBackupPolicy>>;

    /**
     * Updates a database geo backup policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The required parameters for creating or updating
     * the geo backup policy.
     *
     * @param {string} parameters.state The state of the geo backup policy.
     * Possible values include: 'Disabled', 'Enabled'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GeoBackupPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GeoBackupPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GeoBackupPolicy} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.GeoBackupPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GeoBackupPolicy>;
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.GeoBackupPolicy, callback: ServiceCallback<models.GeoBackupPolicy>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.GeoBackupPolicy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GeoBackupPolicy>): void;


    /**
     * Gets a geo backup policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GeoBackupPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GeoBackupPolicy>>;

    /**
     * Gets a geo backup policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GeoBackupPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GeoBackupPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GeoBackupPolicy} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GeoBackupPolicy>;
    get(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.GeoBackupPolicy>): void;
    get(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GeoBackupPolicy>): void;


    /**
     * Returns a list of geo backup policies.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GeoBackupPolicyListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDatabaseWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GeoBackupPolicyListResult>>;

    /**
     * Returns a list of geo backup policies.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GeoBackupPolicyListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GeoBackupPolicyListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GeoBackupPolicyListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GeoBackupPolicyListResult>;
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.GeoBackupPolicyListResult>): void;
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GeoBackupPolicyListResult>): void;
}

/**
 * @class
 * Databases
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface Databases {


    /**
     * Imports a bacpac into a new database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The required parameters for importing a Bacpac
     * into a database.
     *
     * @param {string} parameters.databaseName The name of the database to import.
     *
     * @param {string} parameters.edition The edition for the database being
     * created. Possible values include: 'Web', 'Business', 'Basic', 'Standard',
     * 'Premium', 'PremiumRS', 'Free', 'Stretch', 'DataWarehouse', 'System',
     * 'System2'
     *
     * @param {string} parameters.serviceObjectiveName The name of the service
     * objective to assign to the database. Possible values include: 'System',
     * 'System0', 'System1', 'System2', 'System3', 'System4', 'System2L',
     * 'System3L', 'System4L', 'Free', 'Basic', 'S0', 'S1', 'S2', 'S3', 'S4', 'S6',
     * 'S7', 'S9', 'S12', 'P1', 'P2', 'P3', 'P4', 'P6', 'P11', 'P15', 'PRS1',
     * 'PRS2', 'PRS4', 'PRS6', 'DW100', 'DW200', 'DW300', 'DW400', 'DW500',
     * 'DW600', 'DW1000', 'DW1200', 'DW1000c', 'DW1500', 'DW1500c', 'DW2000',
     * 'DW2000c', 'DW3000', 'DW2500c', 'DW3000c', 'DW6000', 'DW5000c', 'DW6000c',
     * 'DW7500c', 'DW10000c', 'DW15000c', 'DW30000c', 'DS100', 'DS200', 'DS300',
     * 'DS400', 'DS500', 'DS600', 'DS1000', 'DS1200', 'DS1500', 'DS2000',
     * 'ElasticPool'
     *
     * @param {string} parameters.maxSizeBytes The maximum size for the newly
     * imported database.
     *
     * @param {string} parameters.storageKeyType The type of the storage key to
     * use. Possible values include: 'StorageAccessKey', 'SharedAccessKey'
     *
     * @param {string} parameters.storageKey The storage key to use.  If storage
     * key type is SharedAccessKey, it must be preceded with a "?."
     *
     * @param {string} parameters.storageUri The storage uri to use.
     *
     * @param {string} parameters.administratorLogin The name of the SQL
     * administrator.
     *
     * @param {string} parameters.administratorLoginPassword The password of the
     * SQL administrator.
     *
     * @param {string} [parameters.authenticationType] The authentication type.
     * Possible values include: 'SQL', 'ADPassword'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ImportExportResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    importMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, parameters: models.ImportRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImportExportResponse>>;

    /**
     * Imports a bacpac into a new database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The required parameters for importing a Bacpac
     * into a database.
     *
     * @param {string} parameters.databaseName The name of the database to import.
     *
     * @param {string} parameters.edition The edition for the database being
     * created. Possible values include: 'Web', 'Business', 'Basic', 'Standard',
     * 'Premium', 'PremiumRS', 'Free', 'Stretch', 'DataWarehouse', 'System',
     * 'System2'
     *
     * @param {string} parameters.serviceObjectiveName The name of the service
     * objective to assign to the database. Possible values include: 'System',
     * 'System0', 'System1', 'System2', 'System3', 'System4', 'System2L',
     * 'System3L', 'System4L', 'Free', 'Basic', 'S0', 'S1', 'S2', 'S3', 'S4', 'S6',
     * 'S7', 'S9', 'S12', 'P1', 'P2', 'P3', 'P4', 'P6', 'P11', 'P15', 'PRS1',
     * 'PRS2', 'PRS4', 'PRS6', 'DW100', 'DW200', 'DW300', 'DW400', 'DW500',
     * 'DW600', 'DW1000', 'DW1200', 'DW1000c', 'DW1500', 'DW1500c', 'DW2000',
     * 'DW2000c', 'DW3000', 'DW2500c', 'DW3000c', 'DW6000', 'DW5000c', 'DW6000c',
     * 'DW7500c', 'DW10000c', 'DW15000c', 'DW30000c', 'DS100', 'DS200', 'DS300',
     * 'DS400', 'DS500', 'DS600', 'DS1000', 'DS1200', 'DS1500', 'DS2000',
     * 'ElasticPool'
     *
     * @param {string} parameters.maxSizeBytes The maximum size for the newly
     * imported database.
     *
     * @param {string} parameters.storageKeyType The type of the storage key to
     * use. Possible values include: 'StorageAccessKey', 'SharedAccessKey'
     *
     * @param {string} parameters.storageKey The storage key to use.  If storage
     * key type is SharedAccessKey, it must be preceded with a "?."
     *
     * @param {string} parameters.storageUri The storage uri to use.
     *
     * @param {string} parameters.administratorLogin The name of the SQL
     * administrator.
     *
     * @param {string} parameters.administratorLoginPassword The password of the
     * SQL administrator.
     *
     * @param {string} [parameters.authenticationType] The authentication type.
     * Possible values include: 'SQL', 'ADPassword'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ImportExportResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ImportExportResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ImportExportResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    importMethod(resourceGroupName: string, serverName: string, parameters: models.ImportRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ImportExportResponse>;
    importMethod(resourceGroupName: string, serverName: string, parameters: models.ImportRequest, callback: ServiceCallback<models.ImportExportResponse>): void;
    importMethod(resourceGroupName: string, serverName: string, parameters: models.ImportRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImportExportResponse>): void;


    /**
     * Creates an import operation that imports a bacpac into an existing database.
     * The existing database must be empty.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to import into
     *
     * @param {object} parameters The required parameters for importing a Bacpac
     * into a database.
     *
     * @param {string} [parameters.name] The name of the extension.
     *
     * @param {string} [parameters.type] The type of the extension.
     *
     * @param {string} parameters.storageKeyType The type of the storage key to
     * use. Possible values include: 'StorageAccessKey', 'SharedAccessKey'
     *
     * @param {string} parameters.storageKey The storage key to use.  If storage
     * key type is SharedAccessKey, it must be preceded with a "?."
     *
     * @param {string} parameters.storageUri The storage uri to use.
     *
     * @param {string} parameters.administratorLogin The name of the SQL
     * administrator.
     *
     * @param {string} parameters.administratorLoginPassword The password of the
     * SQL administrator.
     *
     * @param {string} [parameters.authenticationType] The authentication type.
     * Possible values include: 'SQL', 'ADPassword'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ImportExportResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createImportOperationWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ImportExtensionRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImportExportResponse>>;

    /**
     * Creates an import operation that imports a bacpac into an existing database.
     * The existing database must be empty.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to import into
     *
     * @param {object} parameters The required parameters for importing a Bacpac
     * into a database.
     *
     * @param {string} [parameters.name] The name of the extension.
     *
     * @param {string} [parameters.type] The type of the extension.
     *
     * @param {string} parameters.storageKeyType The type of the storage key to
     * use. Possible values include: 'StorageAccessKey', 'SharedAccessKey'
     *
     * @param {string} parameters.storageKey The storage key to use.  If storage
     * key type is SharedAccessKey, it must be preceded with a "?."
     *
     * @param {string} parameters.storageUri The storage uri to use.
     *
     * @param {string} parameters.administratorLogin The name of the SQL
     * administrator.
     *
     * @param {string} parameters.administratorLoginPassword The password of the
     * SQL administrator.
     *
     * @param {string} [parameters.authenticationType] The authentication type.
     * Possible values include: 'SQL', 'ADPassword'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ImportExportResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ImportExportResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ImportExportResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createImportOperation(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ImportExtensionRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ImportExportResponse>;
    createImportOperation(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ImportExtensionRequest, callback: ServiceCallback<models.ImportExportResponse>): void;
    createImportOperation(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ImportExtensionRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImportExportResponse>): void;


    /**
     * Exports a database to a bacpac.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to be exported.
     *
     * @param {object} parameters The required parameters for exporting a database.
     *
     * @param {string} parameters.storageKeyType The type of the storage key to
     * use. Possible values include: 'StorageAccessKey', 'SharedAccessKey'
     *
     * @param {string} parameters.storageKey The storage key to use.  If storage
     * key type is SharedAccessKey, it must be preceded with a "?."
     *
     * @param {string} parameters.storageUri The storage uri to use.
     *
     * @param {string} parameters.administratorLogin The name of the SQL
     * administrator.
     *
     * @param {string} parameters.administratorLoginPassword The password of the
     * SQL administrator.
     *
     * @param {string} [parameters.authenticationType] The authentication type.
     * Possible values include: 'SQL', 'ADPassword'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ImportExportResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    exportMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ExportRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImportExportResponse>>;

    /**
     * Exports a database to a bacpac.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to be exported.
     *
     * @param {object} parameters The required parameters for exporting a database.
     *
     * @param {string} parameters.storageKeyType The type of the storage key to
     * use. Possible values include: 'StorageAccessKey', 'SharedAccessKey'
     *
     * @param {string} parameters.storageKey The storage key to use.  If storage
     * key type is SharedAccessKey, it must be preceded with a "?."
     *
     * @param {string} parameters.storageUri The storage uri to use.
     *
     * @param {string} parameters.administratorLogin The name of the SQL
     * administrator.
     *
     * @param {string} parameters.administratorLoginPassword The password of the
     * SQL administrator.
     *
     * @param {string} [parameters.authenticationType] The authentication type.
     * Possible values include: 'SQL', 'ADPassword'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ImportExportResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ImportExportResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ImportExportResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    exportMethod(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ExportRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ImportExportResponse>;
    exportMethod(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ExportRequest, callback: ServiceCallback<models.ImportExportResponse>): void;
    exportMethod(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ExportRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImportExportResponse>): void;


    /**
     * Returns database metrics.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {string} filter An OData filter expression that describes a subset of
     * metrics to return.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MetricListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricsWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MetricListResult>>;

    /**
     * Returns database metrics.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {string} filter An OData filter expression that describes a subset of
     * metrics to return.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MetricListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MetricListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MetricListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetrics(resourceGroupName: string, serverName: string, databaseName: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MetricListResult>;
    listMetrics(resourceGroupName: string, serverName: string, databaseName: string, filter: string, callback: ServiceCallback<models.MetricListResult>): void;
    listMetrics(resourceGroupName: string, serverName: string, databaseName: string, filter: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricListResult>): void;


    /**
     * Returns database metric definitions.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MetricDefinitionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricDefinitionsWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MetricDefinitionListResult>>;

    /**
     * Returns database metric definitions.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MetricDefinitionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MetricDefinitionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MetricDefinitionListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetricDefinitions(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MetricDefinitionListResult>;
    listMetricDefinitions(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.MetricDefinitionListResult>): void;
    listMetricDefinitions(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricDefinitionListResult>): void;


    /**
     * Upgrades a data warehouse.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to be upgraded.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    upgradeDataWarehouseWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Upgrades a data warehouse.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to be upgraded.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    upgradeDataWarehouse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    upgradeDataWarehouse(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<void>): void;
    upgradeDataWarehouse(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a list of databases.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseListResult>>;

    /**
     * Gets a list of databases.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseListResult>;
    listByServer(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.DatabaseListResult>): void;
    listByServer(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseListResult>): void;


    /**
     * Gets a database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Database>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Database>>;

    /**
     * Gets a database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Database} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Database} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Database} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Database>;
    get(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.Database>): void;
    get(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Database>): void;


    /**
     * Creates a new database or updates an existing database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The requested database resource state.
     *
     * @param {object} [parameters.sku] The name and tier of the SKU.
     *
     * @param {string} parameters.sku.name The name of the SKU. Ex - P3. It is
     * typically a letter+number code
     *
     * @param {string} [parameters.sku.tier] This field is required to be
     * implemented by the Resource Provider if the service has more than one tier,
     * but is not required on a PUT.
     *
     * @param {string} [parameters.sku.size] The SKU size. When the name field is
     * the combination of tier and some other value, this would be the standalone
     * code.
     *
     * @param {string} [parameters.sku.family] If the service has different
     * generations of hardware, for the same SKU, then that can be captured here.
     *
     * @param {number} [parameters.sku.capacity] If the SKU supports scale out/in
     * then the capacity integer should be included. If scale out/in is not
     * possible for the resource this may be omitted.
     *
     * @param {string} [parameters.createMode] Specifies the mode of database
     * creation.
     *
     * Default: regular database creation.
     *
     * Copy: creates a database as a copy of an existing database. sourceDatabaseId
     * must be specified as the resource ID of the source database.
     *
     * Secondary: creates a database as a secondary replica of an existing
     * database. sourceDatabaseId must be specified as the resource ID of the
     * existing primary database.
     *
     * PointInTimeRestore: Creates a database by restoring a point in time backup
     * of an existing database. sourceDatabaseId must be specified as the resource
     * ID of the existing database, and restorePointInTime must be specified.
     *
     * Recovery: Creates a database by restoring a geo-replicated backup.
     * sourceDatabaseId must be specified as the recoverable database resource ID
     * to restore.
     *
     * Restore: Creates a database by restoring a backup of a deleted database.
     * sourceDatabaseId must be specified. If sourceDatabaseId is the database's
     * original resource ID, then sourceDatabaseDeletionDate must be specified.
     * Otherwise sourceDatabaseId must be the restorable dropped database resource
     * ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be
     * specified to restore from an earlier point in time.
     *
     * RestoreLongTermRetentionBackup: Creates a database by restoring from a long
     * term retention vault. recoveryServicesRecoveryPointResourceId must be
     * specified as the recovery point resource ID.
     *
     * Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for
     * DataWarehouse edition. Possible values include: 'Default', 'Copy',
     * 'Secondary', 'PointInTimeRestore', 'Restore', 'Recovery',
     * 'RestoreExternalBackup', 'RestoreExternalBackupSecondary',
     * 'RestoreLongTermRetentionBackup', 'OnlineSecondary'
     *
     * @param {string} [parameters.collation] The collation of the database.
     *
     * @param {number} [parameters.maxSizeBytes] The max size of the database
     * expressed in bytes.
     *
     * @param {string} [parameters.sampleName] The name of the sample schema to
     * apply when creating this database. Possible values include:
     * 'AdventureWorksLT', 'WideWorldImportersStd', 'WideWorldImportersFull'
     *
     * @param {string} [parameters.elasticPoolId] The resource identifier of the
     * elastic pool containing this database.
     *
     * @param {string} [parameters.sourceDatabaseId] The resource identifier of the
     * source database associated with create operation of this database.
     *
     * @param {date} [parameters.restorePointInTime] Specifies the point in time
     * (ISO8601 format) of the source database that will be restored to create the
     * new database.
     *
     * @param {date} [parameters.sourceDatabaseDeletionDate] Specifies the time
     * that the database was deleted.
     *
     * @param {string} [parameters.recoveryServicesRecoveryPointId] The resource
     * identifier of the recovery point associated with create operation of this
     * database.
     *
     * @param {string} [parameters.longTermRetentionBackupResourceId] The resource
     * identifier of the long term retention backup associated with create
     * operation of this database.
     *
     * @param {string} [parameters.recoverableDatabaseId] The resource identifier
     * of the recoverable database associated with create operation of this
     * database.
     *
     * @param {string} [parameters.restorableDroppedDatabaseId] The resource
     * identifier of the restorable dropped database associated with create
     * operation of this database.
     *
     * @param {string} [parameters.catalogCollation] Collation of the metadata
     * catalog. Possible values include: 'DATABASE_DEFAULT',
     * 'SQL_Latin1_General_CP1_CI_AS'
     *
     * @param {boolean} [parameters.zoneRedundant] Whether or not this database is
     * zone redundant, which means the replicas of this database will be spread
     * across multiple availability zones.
     *
     * @param {string} [parameters.licenseType] The license type to apply for this
     * database. Possible values include: 'LicenseIncluded', 'BasePrice'
     *
     * @param {string} [parameters.readScale] The state of read-only routing. If
     * enabled, connections that have application intent set to readonly in their
     * connection string may be routed to a readonly secondary replica in the same
     * region. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Database>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.Database, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Database>>;

    /**
     * Creates a new database or updates an existing database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The requested database resource state.
     *
     * @param {object} [parameters.sku] The name and tier of the SKU.
     *
     * @param {string} parameters.sku.name The name of the SKU. Ex - P3. It is
     * typically a letter+number code
     *
     * @param {string} [parameters.sku.tier] This field is required to be
     * implemented by the Resource Provider if the service has more than one tier,
     * but is not required on a PUT.
     *
     * @param {string} [parameters.sku.size] The SKU size. When the name field is
     * the combination of tier and some other value, this would be the standalone
     * code.
     *
     * @param {string} [parameters.sku.family] If the service has different
     * generations of hardware, for the same SKU, then that can be captured here.
     *
     * @param {number} [parameters.sku.capacity] If the SKU supports scale out/in
     * then the capacity integer should be included. If scale out/in is not
     * possible for the resource this may be omitted.
     *
     * @param {string} [parameters.createMode] Specifies the mode of database
     * creation.
     *
     * Default: regular database creation.
     *
     * Copy: creates a database as a copy of an existing database. sourceDatabaseId
     * must be specified as the resource ID of the source database.
     *
     * Secondary: creates a database as a secondary replica of an existing
     * database. sourceDatabaseId must be specified as the resource ID of the
     * existing primary database.
     *
     * PointInTimeRestore: Creates a database by restoring a point in time backup
     * of an existing database. sourceDatabaseId must be specified as the resource
     * ID of the existing database, and restorePointInTime must be specified.
     *
     * Recovery: Creates a database by restoring a geo-replicated backup.
     * sourceDatabaseId must be specified as the recoverable database resource ID
     * to restore.
     *
     * Restore: Creates a database by restoring a backup of a deleted database.
     * sourceDatabaseId must be specified. If sourceDatabaseId is the database's
     * original resource ID, then sourceDatabaseDeletionDate must be specified.
     * Otherwise sourceDatabaseId must be the restorable dropped database resource
     * ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be
     * specified to restore from an earlier point in time.
     *
     * RestoreLongTermRetentionBackup: Creates a database by restoring from a long
     * term retention vault. recoveryServicesRecoveryPointResourceId must be
     * specified as the recovery point resource ID.
     *
     * Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for
     * DataWarehouse edition. Possible values include: 'Default', 'Copy',
     * 'Secondary', 'PointInTimeRestore', 'Restore', 'Recovery',
     * 'RestoreExternalBackup', 'RestoreExternalBackupSecondary',
     * 'RestoreLongTermRetentionBackup', 'OnlineSecondary'
     *
     * @param {string} [parameters.collation] The collation of the database.
     *
     * @param {number} [parameters.maxSizeBytes] The max size of the database
     * expressed in bytes.
     *
     * @param {string} [parameters.sampleName] The name of the sample schema to
     * apply when creating this database. Possible values include:
     * 'AdventureWorksLT', 'WideWorldImportersStd', 'WideWorldImportersFull'
     *
     * @param {string} [parameters.elasticPoolId] The resource identifier of the
     * elastic pool containing this database.
     *
     * @param {string} [parameters.sourceDatabaseId] The resource identifier of the
     * source database associated with create operation of this database.
     *
     * @param {date} [parameters.restorePointInTime] Specifies the point in time
     * (ISO8601 format) of the source database that will be restored to create the
     * new database.
     *
     * @param {date} [parameters.sourceDatabaseDeletionDate] Specifies the time
     * that the database was deleted.
     *
     * @param {string} [parameters.recoveryServicesRecoveryPointId] The resource
     * identifier of the recovery point associated with create operation of this
     * database.
     *
     * @param {string} [parameters.longTermRetentionBackupResourceId] The resource
     * identifier of the long term retention backup associated with create
     * operation of this database.
     *
     * @param {string} [parameters.recoverableDatabaseId] The resource identifier
     * of the recoverable database associated with create operation of this
     * database.
     *
     * @param {string} [parameters.restorableDroppedDatabaseId] The resource
     * identifier of the restorable dropped database associated with create
     * operation of this database.
     *
     * @param {string} [parameters.catalogCollation] Collation of the metadata
     * catalog. Possible values include: 'DATABASE_DEFAULT',
     * 'SQL_Latin1_General_CP1_CI_AS'
     *
     * @param {boolean} [parameters.zoneRedundant] Whether or not this database is
     * zone redundant, which means the replicas of this database will be spread
     * across multiple availability zones.
     *
     * @param {string} [parameters.licenseType] The license type to apply for this
     * database. Possible values include: 'LicenseIncluded', 'BasePrice'
     *
     * @param {string} [parameters.readScale] The state of read-only routing. If
     * enabled, connections that have application intent set to readonly in their
     * connection string may be routed to a readonly secondary replica in the same
     * region. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Database} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Database} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Database} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.Database, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Database>;
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.Database, callback: ServiceCallback<models.Database>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.Database, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Database>): void;


    /**
     * Deletes the database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates an existing database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The requested database resource state.
     *
     * @param {object} [parameters.sku] The name and tier of the SKU.
     *
     * @param {string} parameters.sku.name The name of the SKU. Ex - P3. It is
     * typically a letter+number code
     *
     * @param {string} [parameters.sku.tier] This field is required to be
     * implemented by the Resource Provider if the service has more than one tier,
     * but is not required on a PUT.
     *
     * @param {string} [parameters.sku.size] The SKU size. When the name field is
     * the combination of tier and some other value, this would be the standalone
     * code.
     *
     * @param {string} [parameters.sku.family] If the service has different
     * generations of hardware, for the same SKU, then that can be captured here.
     *
     * @param {number} [parameters.sku.capacity] If the SKU supports scale out/in
     * then the capacity integer should be included. If scale out/in is not
     * possible for the resource this may be omitted.
     *
     * @param {string} [parameters.createMode] Specifies the mode of database
     * creation.
     *
     * Default: regular database creation.
     *
     * Copy: creates a database as a copy of an existing database. sourceDatabaseId
     * must be specified as the resource ID of the source database.
     *
     * Secondary: creates a database as a secondary replica of an existing
     * database. sourceDatabaseId must be specified as the resource ID of the
     * existing primary database.
     *
     * PointInTimeRestore: Creates a database by restoring a point in time backup
     * of an existing database. sourceDatabaseId must be specified as the resource
     * ID of the existing database, and restorePointInTime must be specified.
     *
     * Recovery: Creates a database by restoring a geo-replicated backup.
     * sourceDatabaseId must be specified as the recoverable database resource ID
     * to restore.
     *
     * Restore: Creates a database by restoring a backup of a deleted database.
     * sourceDatabaseId must be specified. If sourceDatabaseId is the database's
     * original resource ID, then sourceDatabaseDeletionDate must be specified.
     * Otherwise sourceDatabaseId must be the restorable dropped database resource
     * ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be
     * specified to restore from an earlier point in time.
     *
     * RestoreLongTermRetentionBackup: Creates a database by restoring from a long
     * term retention vault. recoveryServicesRecoveryPointResourceId must be
     * specified as the recovery point resource ID.
     *
     * Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for
     * DataWarehouse edition. Possible values include: 'Default', 'Copy',
     * 'Secondary', 'PointInTimeRestore', 'Restore', 'Recovery',
     * 'RestoreExternalBackup', 'RestoreExternalBackupSecondary',
     * 'RestoreLongTermRetentionBackup', 'OnlineSecondary'
     *
     * @param {string} [parameters.collation] The collation of the database.
     *
     * @param {number} [parameters.maxSizeBytes] The max size of the database
     * expressed in bytes.
     *
     * @param {string} [parameters.sampleName] The name of the sample schema to
     * apply when creating this database. Possible values include:
     * 'AdventureWorksLT', 'WideWorldImportersStd', 'WideWorldImportersFull'
     *
     * @param {string} [parameters.elasticPoolId] The resource identifier of the
     * elastic pool containing this database.
     *
     * @param {string} [parameters.sourceDatabaseId] The resource identifier of the
     * source database associated with create operation of this database.
     *
     * @param {date} [parameters.restorePointInTime] Specifies the point in time
     * (ISO8601 format) of the source database that will be restored to create the
     * new database.
     *
     * @param {date} [parameters.sourceDatabaseDeletionDate] Specifies the time
     * that the database was deleted.
     *
     * @param {string} [parameters.recoveryServicesRecoveryPointId] The resource
     * identifier of the recovery point associated with create operation of this
     * database.
     *
     * @param {string} [parameters.longTermRetentionBackupResourceId] The resource
     * identifier of the long term retention backup associated with create
     * operation of this database.
     *
     * @param {string} [parameters.recoverableDatabaseId] The resource identifier
     * of the recoverable database associated with create operation of this
     * database.
     *
     * @param {string} [parameters.restorableDroppedDatabaseId] The resource
     * identifier of the restorable dropped database associated with create
     * operation of this database.
     *
     * @param {string} [parameters.catalogCollation] Collation of the metadata
     * catalog. Possible values include: 'DATABASE_DEFAULT',
     * 'SQL_Latin1_General_CP1_CI_AS'
     *
     * @param {boolean} [parameters.zoneRedundant] Whether or not this database is
     * zone redundant, which means the replicas of this database will be spread
     * across multiple availability zones.
     *
     * @param {string} [parameters.licenseType] The license type to apply for this
     * database. Possible values include: 'LicenseIncluded', 'BasePrice'
     *
     * @param {string} [parameters.readScale] The state of read-only routing. If
     * enabled, connections that have application intent set to readonly in their
     * connection string may be routed to a readonly secondary replica in the same
     * region. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Database>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DatabaseUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Database>>;

    /**
     * Updates an existing database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The requested database resource state.
     *
     * @param {object} [parameters.sku] The name and tier of the SKU.
     *
     * @param {string} parameters.sku.name The name of the SKU. Ex - P3. It is
     * typically a letter+number code
     *
     * @param {string} [parameters.sku.tier] This field is required to be
     * implemented by the Resource Provider if the service has more than one tier,
     * but is not required on a PUT.
     *
     * @param {string} [parameters.sku.size] The SKU size. When the name field is
     * the combination of tier and some other value, this would be the standalone
     * code.
     *
     * @param {string} [parameters.sku.family] If the service has different
     * generations of hardware, for the same SKU, then that can be captured here.
     *
     * @param {number} [parameters.sku.capacity] If the SKU supports scale out/in
     * then the capacity integer should be included. If scale out/in is not
     * possible for the resource this may be omitted.
     *
     * @param {string} [parameters.createMode] Specifies the mode of database
     * creation.
     *
     * Default: regular database creation.
     *
     * Copy: creates a database as a copy of an existing database. sourceDatabaseId
     * must be specified as the resource ID of the source database.
     *
     * Secondary: creates a database as a secondary replica of an existing
     * database. sourceDatabaseId must be specified as the resource ID of the
     * existing primary database.
     *
     * PointInTimeRestore: Creates a database by restoring a point in time backup
     * of an existing database. sourceDatabaseId must be specified as the resource
     * ID of the existing database, and restorePointInTime must be specified.
     *
     * Recovery: Creates a database by restoring a geo-replicated backup.
     * sourceDatabaseId must be specified as the recoverable database resource ID
     * to restore.
     *
     * Restore: Creates a database by restoring a backup of a deleted database.
     * sourceDatabaseId must be specified. If sourceDatabaseId is the database's
     * original resource ID, then sourceDatabaseDeletionDate must be specified.
     * Otherwise sourceDatabaseId must be the restorable dropped database resource
     * ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be
     * specified to restore from an earlier point in time.
     *
     * RestoreLongTermRetentionBackup: Creates a database by restoring from a long
     * term retention vault. recoveryServicesRecoveryPointResourceId must be
     * specified as the recovery point resource ID.
     *
     * Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for
     * DataWarehouse edition. Possible values include: 'Default', 'Copy',
     * 'Secondary', 'PointInTimeRestore', 'Restore', 'Recovery',
     * 'RestoreExternalBackup', 'RestoreExternalBackupSecondary',
     * 'RestoreLongTermRetentionBackup', 'OnlineSecondary'
     *
     * @param {string} [parameters.collation] The collation of the database.
     *
     * @param {number} [parameters.maxSizeBytes] The max size of the database
     * expressed in bytes.
     *
     * @param {string} [parameters.sampleName] The name of the sample schema to
     * apply when creating this database. Possible values include:
     * 'AdventureWorksLT', 'WideWorldImportersStd', 'WideWorldImportersFull'
     *
     * @param {string} [parameters.elasticPoolId] The resource identifier of the
     * elastic pool containing this database.
     *
     * @param {string} [parameters.sourceDatabaseId] The resource identifier of the
     * source database associated with create operation of this database.
     *
     * @param {date} [parameters.restorePointInTime] Specifies the point in time
     * (ISO8601 format) of the source database that will be restored to create the
     * new database.
     *
     * @param {date} [parameters.sourceDatabaseDeletionDate] Specifies the time
     * that the database was deleted.
     *
     * @param {string} [parameters.recoveryServicesRecoveryPointId] The resource
     * identifier of the recovery point associated with create operation of this
     * database.
     *
     * @param {string} [parameters.longTermRetentionBackupResourceId] The resource
     * identifier of the long term retention backup associated with create
     * operation of this database.
     *
     * @param {string} [parameters.recoverableDatabaseId] The resource identifier
     * of the recoverable database associated with create operation of this
     * database.
     *
     * @param {string} [parameters.restorableDroppedDatabaseId] The resource
     * identifier of the restorable dropped database associated with create
     * operation of this database.
     *
     * @param {string} [parameters.catalogCollation] Collation of the metadata
     * catalog. Possible values include: 'DATABASE_DEFAULT',
     * 'SQL_Latin1_General_CP1_CI_AS'
     *
     * @param {boolean} [parameters.zoneRedundant] Whether or not this database is
     * zone redundant, which means the replicas of this database will be spread
     * across multiple availability zones.
     *
     * @param {string} [parameters.licenseType] The license type to apply for this
     * database. Possible values include: 'LicenseIncluded', 'BasePrice'
     *
     * @param {string} [parameters.readScale] The state of read-only routing. If
     * enabled, connections that have application intent set to readonly in their
     * connection string may be routed to a readonly secondary replica in the same
     * region. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Database} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Database} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Database} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DatabaseUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Database>;
    update(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DatabaseUpdate, callback: ServiceCallback<models.Database>): void;
    update(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DatabaseUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Database>): void;


    /**
     * Gets a list of databases in an elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByElasticPoolWithHttpOperationResponse(resourceGroupName: string, serverName: string, elasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseListResult>>;

    /**
     * Gets a list of databases in an elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByElasticPool(resourceGroupName: string, serverName: string, elasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseListResult>;
    listByElasticPool(resourceGroupName: string, serverName: string, elasticPoolName: string, callback: ServiceCallback<models.DatabaseListResult>): void;
    listByElasticPool(resourceGroupName: string, serverName: string, elasticPoolName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseListResult>): void;


    /**
     * Pauses a database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to be paused.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Database>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    pauseWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Database>>;

    /**
     * Pauses a database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to be paused.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Database} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Database} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Database} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    pause(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Database>;
    pause(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.Database>): void;
    pause(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Database>): void;


    /**
     * Resumes a database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to be resumed.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Database>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    resumeWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Database>>;

    /**
     * Resumes a database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to be resumed.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Database} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Database} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Database} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    resume(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Database>;
    resume(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.Database>): void;
    resume(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Database>): void;


    /**
     * Renames a database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to rename.
     *
     * @param {object} parameters The resource move definition for renaming this
     * database.
     *
     * @param {string} parameters.id The target ID for the resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    renameWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ResourceMoveDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Renames a database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to rename.
     *
     * @param {object} parameters The resource move definition for renaming this
     * database.
     *
     * @param {string} parameters.id The target ID for the resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    rename(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ResourceMoveDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    rename(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ResourceMoveDefinition, callback: ServiceCallback<void>): void;
    rename(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ResourceMoveDefinition, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Imports a bacpac into a new database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The required parameters for importing a Bacpac
     * into a database.
     *
     * @param {string} parameters.databaseName The name of the database to import.
     *
     * @param {string} parameters.edition The edition for the database being
     * created. Possible values include: 'Web', 'Business', 'Basic', 'Standard',
     * 'Premium', 'PremiumRS', 'Free', 'Stretch', 'DataWarehouse', 'System',
     * 'System2'
     *
     * @param {string} parameters.serviceObjectiveName The name of the service
     * objective to assign to the database. Possible values include: 'System',
     * 'System0', 'System1', 'System2', 'System3', 'System4', 'System2L',
     * 'System3L', 'System4L', 'Free', 'Basic', 'S0', 'S1', 'S2', 'S3', 'S4', 'S6',
     * 'S7', 'S9', 'S12', 'P1', 'P2', 'P3', 'P4', 'P6', 'P11', 'P15', 'PRS1',
     * 'PRS2', 'PRS4', 'PRS6', 'DW100', 'DW200', 'DW300', 'DW400', 'DW500',
     * 'DW600', 'DW1000', 'DW1200', 'DW1000c', 'DW1500', 'DW1500c', 'DW2000',
     * 'DW2000c', 'DW3000', 'DW2500c', 'DW3000c', 'DW6000', 'DW5000c', 'DW6000c',
     * 'DW7500c', 'DW10000c', 'DW15000c', 'DW30000c', 'DS100', 'DS200', 'DS300',
     * 'DS400', 'DS500', 'DS600', 'DS1000', 'DS1200', 'DS1500', 'DS2000',
     * 'ElasticPool'
     *
     * @param {string} parameters.maxSizeBytes The maximum size for the newly
     * imported database.
     *
     * @param {string} parameters.storageKeyType The type of the storage key to
     * use. Possible values include: 'StorageAccessKey', 'SharedAccessKey'
     *
     * @param {string} parameters.storageKey The storage key to use.  If storage
     * key type is SharedAccessKey, it must be preceded with a "?."
     *
     * @param {string} parameters.storageUri The storage uri to use.
     *
     * @param {string} parameters.administratorLogin The name of the SQL
     * administrator.
     *
     * @param {string} parameters.administratorLoginPassword The password of the
     * SQL administrator.
     *
     * @param {string} [parameters.authenticationType] The authentication type.
     * Possible values include: 'SQL', 'ADPassword'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ImportExportResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginImportMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, parameters: models.ImportRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImportExportResponse>>;

    /**
     * Imports a bacpac into a new database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The required parameters for importing a Bacpac
     * into a database.
     *
     * @param {string} parameters.databaseName The name of the database to import.
     *
     * @param {string} parameters.edition The edition for the database being
     * created. Possible values include: 'Web', 'Business', 'Basic', 'Standard',
     * 'Premium', 'PremiumRS', 'Free', 'Stretch', 'DataWarehouse', 'System',
     * 'System2'
     *
     * @param {string} parameters.serviceObjectiveName The name of the service
     * objective to assign to the database. Possible values include: 'System',
     * 'System0', 'System1', 'System2', 'System3', 'System4', 'System2L',
     * 'System3L', 'System4L', 'Free', 'Basic', 'S0', 'S1', 'S2', 'S3', 'S4', 'S6',
     * 'S7', 'S9', 'S12', 'P1', 'P2', 'P3', 'P4', 'P6', 'P11', 'P15', 'PRS1',
     * 'PRS2', 'PRS4', 'PRS6', 'DW100', 'DW200', 'DW300', 'DW400', 'DW500',
     * 'DW600', 'DW1000', 'DW1200', 'DW1000c', 'DW1500', 'DW1500c', 'DW2000',
     * 'DW2000c', 'DW3000', 'DW2500c', 'DW3000c', 'DW6000', 'DW5000c', 'DW6000c',
     * 'DW7500c', 'DW10000c', 'DW15000c', 'DW30000c', 'DS100', 'DS200', 'DS300',
     * 'DS400', 'DS500', 'DS600', 'DS1000', 'DS1200', 'DS1500', 'DS2000',
     * 'ElasticPool'
     *
     * @param {string} parameters.maxSizeBytes The maximum size for the newly
     * imported database.
     *
     * @param {string} parameters.storageKeyType The type of the storage key to
     * use. Possible values include: 'StorageAccessKey', 'SharedAccessKey'
     *
     * @param {string} parameters.storageKey The storage key to use.  If storage
     * key type is SharedAccessKey, it must be preceded with a "?."
     *
     * @param {string} parameters.storageUri The storage uri to use.
     *
     * @param {string} parameters.administratorLogin The name of the SQL
     * administrator.
     *
     * @param {string} parameters.administratorLoginPassword The password of the
     * SQL administrator.
     *
     * @param {string} [parameters.authenticationType] The authentication type.
     * Possible values include: 'SQL', 'ADPassword'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ImportExportResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ImportExportResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ImportExportResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginImportMethod(resourceGroupName: string, serverName: string, parameters: models.ImportRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ImportExportResponse>;
    beginImportMethod(resourceGroupName: string, serverName: string, parameters: models.ImportRequest, callback: ServiceCallback<models.ImportExportResponse>): void;
    beginImportMethod(resourceGroupName: string, serverName: string, parameters: models.ImportRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImportExportResponse>): void;


    /**
     * Creates an import operation that imports a bacpac into an existing database.
     * The existing database must be empty.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to import into
     *
     * @param {object} parameters The required parameters for importing a Bacpac
     * into a database.
     *
     * @param {string} [parameters.name] The name of the extension.
     *
     * @param {string} [parameters.type] The type of the extension.
     *
     * @param {string} parameters.storageKeyType The type of the storage key to
     * use. Possible values include: 'StorageAccessKey', 'SharedAccessKey'
     *
     * @param {string} parameters.storageKey The storage key to use.  If storage
     * key type is SharedAccessKey, it must be preceded with a "?."
     *
     * @param {string} parameters.storageUri The storage uri to use.
     *
     * @param {string} parameters.administratorLogin The name of the SQL
     * administrator.
     *
     * @param {string} parameters.administratorLoginPassword The password of the
     * SQL administrator.
     *
     * @param {string} [parameters.authenticationType] The authentication type.
     * Possible values include: 'SQL', 'ADPassword'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ImportExportResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateImportOperationWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ImportExtensionRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImportExportResponse>>;

    /**
     * Creates an import operation that imports a bacpac into an existing database.
     * The existing database must be empty.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to import into
     *
     * @param {object} parameters The required parameters for importing a Bacpac
     * into a database.
     *
     * @param {string} [parameters.name] The name of the extension.
     *
     * @param {string} [parameters.type] The type of the extension.
     *
     * @param {string} parameters.storageKeyType The type of the storage key to
     * use. Possible values include: 'StorageAccessKey', 'SharedAccessKey'
     *
     * @param {string} parameters.storageKey The storage key to use.  If storage
     * key type is SharedAccessKey, it must be preceded with a "?."
     *
     * @param {string} parameters.storageUri The storage uri to use.
     *
     * @param {string} parameters.administratorLogin The name of the SQL
     * administrator.
     *
     * @param {string} parameters.administratorLoginPassword The password of the
     * SQL administrator.
     *
     * @param {string} [parameters.authenticationType] The authentication type.
     * Possible values include: 'SQL', 'ADPassword'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ImportExportResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ImportExportResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ImportExportResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateImportOperation(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ImportExtensionRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ImportExportResponse>;
    beginCreateImportOperation(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ImportExtensionRequest, callback: ServiceCallback<models.ImportExportResponse>): void;
    beginCreateImportOperation(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ImportExtensionRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImportExportResponse>): void;


    /**
     * Exports a database to a bacpac.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to be exported.
     *
     * @param {object} parameters The required parameters for exporting a database.
     *
     * @param {string} parameters.storageKeyType The type of the storage key to
     * use. Possible values include: 'StorageAccessKey', 'SharedAccessKey'
     *
     * @param {string} parameters.storageKey The storage key to use.  If storage
     * key type is SharedAccessKey, it must be preceded with a "?."
     *
     * @param {string} parameters.storageUri The storage uri to use.
     *
     * @param {string} parameters.administratorLogin The name of the SQL
     * administrator.
     *
     * @param {string} parameters.administratorLoginPassword The password of the
     * SQL administrator.
     *
     * @param {string} [parameters.authenticationType] The authentication type.
     * Possible values include: 'SQL', 'ADPassword'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ImportExportResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginExportMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ExportRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImportExportResponse>>;

    /**
     * Exports a database to a bacpac.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to be exported.
     *
     * @param {object} parameters The required parameters for exporting a database.
     *
     * @param {string} parameters.storageKeyType The type of the storage key to
     * use. Possible values include: 'StorageAccessKey', 'SharedAccessKey'
     *
     * @param {string} parameters.storageKey The storage key to use.  If storage
     * key type is SharedAccessKey, it must be preceded with a "?."
     *
     * @param {string} parameters.storageUri The storage uri to use.
     *
     * @param {string} parameters.administratorLogin The name of the SQL
     * administrator.
     *
     * @param {string} parameters.administratorLoginPassword The password of the
     * SQL administrator.
     *
     * @param {string} [parameters.authenticationType] The authentication type.
     * Possible values include: 'SQL', 'ADPassword'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ImportExportResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ImportExportResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ImportExportResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginExportMethod(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ExportRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ImportExportResponse>;
    beginExportMethod(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ExportRequest, callback: ServiceCallback<models.ImportExportResponse>): void;
    beginExportMethod(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ExportRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImportExportResponse>): void;


    /**
     * Upgrades a data warehouse.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to be upgraded.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpgradeDataWarehouseWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Upgrades a data warehouse.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to be upgraded.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpgradeDataWarehouse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginUpgradeDataWarehouse(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<void>): void;
    beginUpgradeDataWarehouse(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates a new database or updates an existing database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The requested database resource state.
     *
     * @param {object} [parameters.sku] The name and tier of the SKU.
     *
     * @param {string} parameters.sku.name The name of the SKU. Ex - P3. It is
     * typically a letter+number code
     *
     * @param {string} [parameters.sku.tier] This field is required to be
     * implemented by the Resource Provider if the service has more than one tier,
     * but is not required on a PUT.
     *
     * @param {string} [parameters.sku.size] The SKU size. When the name field is
     * the combination of tier and some other value, this would be the standalone
     * code.
     *
     * @param {string} [parameters.sku.family] If the service has different
     * generations of hardware, for the same SKU, then that can be captured here.
     *
     * @param {number} [parameters.sku.capacity] If the SKU supports scale out/in
     * then the capacity integer should be included. If scale out/in is not
     * possible for the resource this may be omitted.
     *
     * @param {string} [parameters.createMode] Specifies the mode of database
     * creation.
     *
     * Default: regular database creation.
     *
     * Copy: creates a database as a copy of an existing database. sourceDatabaseId
     * must be specified as the resource ID of the source database.
     *
     * Secondary: creates a database as a secondary replica of an existing
     * database. sourceDatabaseId must be specified as the resource ID of the
     * existing primary database.
     *
     * PointInTimeRestore: Creates a database by restoring a point in time backup
     * of an existing database. sourceDatabaseId must be specified as the resource
     * ID of the existing database, and restorePointInTime must be specified.
     *
     * Recovery: Creates a database by restoring a geo-replicated backup.
     * sourceDatabaseId must be specified as the recoverable database resource ID
     * to restore.
     *
     * Restore: Creates a database by restoring a backup of a deleted database.
     * sourceDatabaseId must be specified. If sourceDatabaseId is the database's
     * original resource ID, then sourceDatabaseDeletionDate must be specified.
     * Otherwise sourceDatabaseId must be the restorable dropped database resource
     * ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be
     * specified to restore from an earlier point in time.
     *
     * RestoreLongTermRetentionBackup: Creates a database by restoring from a long
     * term retention vault. recoveryServicesRecoveryPointResourceId must be
     * specified as the recovery point resource ID.
     *
     * Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for
     * DataWarehouse edition. Possible values include: 'Default', 'Copy',
     * 'Secondary', 'PointInTimeRestore', 'Restore', 'Recovery',
     * 'RestoreExternalBackup', 'RestoreExternalBackupSecondary',
     * 'RestoreLongTermRetentionBackup', 'OnlineSecondary'
     *
     * @param {string} [parameters.collation] The collation of the database.
     *
     * @param {number} [parameters.maxSizeBytes] The max size of the database
     * expressed in bytes.
     *
     * @param {string} [parameters.sampleName] The name of the sample schema to
     * apply when creating this database. Possible values include:
     * 'AdventureWorksLT', 'WideWorldImportersStd', 'WideWorldImportersFull'
     *
     * @param {string} [parameters.elasticPoolId] The resource identifier of the
     * elastic pool containing this database.
     *
     * @param {string} [parameters.sourceDatabaseId] The resource identifier of the
     * source database associated with create operation of this database.
     *
     * @param {date} [parameters.restorePointInTime] Specifies the point in time
     * (ISO8601 format) of the source database that will be restored to create the
     * new database.
     *
     * @param {date} [parameters.sourceDatabaseDeletionDate] Specifies the time
     * that the database was deleted.
     *
     * @param {string} [parameters.recoveryServicesRecoveryPointId] The resource
     * identifier of the recovery point associated with create operation of this
     * database.
     *
     * @param {string} [parameters.longTermRetentionBackupResourceId] The resource
     * identifier of the long term retention backup associated with create
     * operation of this database.
     *
     * @param {string} [parameters.recoverableDatabaseId] The resource identifier
     * of the recoverable database associated with create operation of this
     * database.
     *
     * @param {string} [parameters.restorableDroppedDatabaseId] The resource
     * identifier of the restorable dropped database associated with create
     * operation of this database.
     *
     * @param {string} [parameters.catalogCollation] Collation of the metadata
     * catalog. Possible values include: 'DATABASE_DEFAULT',
     * 'SQL_Latin1_General_CP1_CI_AS'
     *
     * @param {boolean} [parameters.zoneRedundant] Whether or not this database is
     * zone redundant, which means the replicas of this database will be spread
     * across multiple availability zones.
     *
     * @param {string} [parameters.licenseType] The license type to apply for this
     * database. Possible values include: 'LicenseIncluded', 'BasePrice'
     *
     * @param {string} [parameters.readScale] The state of read-only routing. If
     * enabled, connections that have application intent set to readonly in their
     * connection string may be routed to a readonly secondary replica in the same
     * region. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Database>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.Database, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Database>>;

    /**
     * Creates a new database or updates an existing database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The requested database resource state.
     *
     * @param {object} [parameters.sku] The name and tier of the SKU.
     *
     * @param {string} parameters.sku.name The name of the SKU. Ex - P3. It is
     * typically a letter+number code
     *
     * @param {string} [parameters.sku.tier] This field is required to be
     * implemented by the Resource Provider if the service has more than one tier,
     * but is not required on a PUT.
     *
     * @param {string} [parameters.sku.size] The SKU size. When the name field is
     * the combination of tier and some other value, this would be the standalone
     * code.
     *
     * @param {string} [parameters.sku.family] If the service has different
     * generations of hardware, for the same SKU, then that can be captured here.
     *
     * @param {number} [parameters.sku.capacity] If the SKU supports scale out/in
     * then the capacity integer should be included. If scale out/in is not
     * possible for the resource this may be omitted.
     *
     * @param {string} [parameters.createMode] Specifies the mode of database
     * creation.
     *
     * Default: regular database creation.
     *
     * Copy: creates a database as a copy of an existing database. sourceDatabaseId
     * must be specified as the resource ID of the source database.
     *
     * Secondary: creates a database as a secondary replica of an existing
     * database. sourceDatabaseId must be specified as the resource ID of the
     * existing primary database.
     *
     * PointInTimeRestore: Creates a database by restoring a point in time backup
     * of an existing database. sourceDatabaseId must be specified as the resource
     * ID of the existing database, and restorePointInTime must be specified.
     *
     * Recovery: Creates a database by restoring a geo-replicated backup.
     * sourceDatabaseId must be specified as the recoverable database resource ID
     * to restore.
     *
     * Restore: Creates a database by restoring a backup of a deleted database.
     * sourceDatabaseId must be specified. If sourceDatabaseId is the database's
     * original resource ID, then sourceDatabaseDeletionDate must be specified.
     * Otherwise sourceDatabaseId must be the restorable dropped database resource
     * ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be
     * specified to restore from an earlier point in time.
     *
     * RestoreLongTermRetentionBackup: Creates a database by restoring from a long
     * term retention vault. recoveryServicesRecoveryPointResourceId must be
     * specified as the recovery point resource ID.
     *
     * Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for
     * DataWarehouse edition. Possible values include: 'Default', 'Copy',
     * 'Secondary', 'PointInTimeRestore', 'Restore', 'Recovery',
     * 'RestoreExternalBackup', 'RestoreExternalBackupSecondary',
     * 'RestoreLongTermRetentionBackup', 'OnlineSecondary'
     *
     * @param {string} [parameters.collation] The collation of the database.
     *
     * @param {number} [parameters.maxSizeBytes] The max size of the database
     * expressed in bytes.
     *
     * @param {string} [parameters.sampleName] The name of the sample schema to
     * apply when creating this database. Possible values include:
     * 'AdventureWorksLT', 'WideWorldImportersStd', 'WideWorldImportersFull'
     *
     * @param {string} [parameters.elasticPoolId] The resource identifier of the
     * elastic pool containing this database.
     *
     * @param {string} [parameters.sourceDatabaseId] The resource identifier of the
     * source database associated with create operation of this database.
     *
     * @param {date} [parameters.restorePointInTime] Specifies the point in time
     * (ISO8601 format) of the source database that will be restored to create the
     * new database.
     *
     * @param {date} [parameters.sourceDatabaseDeletionDate] Specifies the time
     * that the database was deleted.
     *
     * @param {string} [parameters.recoveryServicesRecoveryPointId] The resource
     * identifier of the recovery point associated with create operation of this
     * database.
     *
     * @param {string} [parameters.longTermRetentionBackupResourceId] The resource
     * identifier of the long term retention backup associated with create
     * operation of this database.
     *
     * @param {string} [parameters.recoverableDatabaseId] The resource identifier
     * of the recoverable database associated with create operation of this
     * database.
     *
     * @param {string} [parameters.restorableDroppedDatabaseId] The resource
     * identifier of the restorable dropped database associated with create
     * operation of this database.
     *
     * @param {string} [parameters.catalogCollation] Collation of the metadata
     * catalog. Possible values include: 'DATABASE_DEFAULT',
     * 'SQL_Latin1_General_CP1_CI_AS'
     *
     * @param {boolean} [parameters.zoneRedundant] Whether or not this database is
     * zone redundant, which means the replicas of this database will be spread
     * across multiple availability zones.
     *
     * @param {string} [parameters.licenseType] The license type to apply for this
     * database. Possible values include: 'LicenseIncluded', 'BasePrice'
     *
     * @param {string} [parameters.readScale] The state of read-only routing. If
     * enabled, connections that have application intent set to readonly in their
     * connection string may be routed to a readonly secondary replica in the same
     * region. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Database} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Database} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Database} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.Database, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Database>;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.Database, callback: ServiceCallback<models.Database>): void;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.Database, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Database>): void;


    /**
     * Deletes the database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates an existing database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The requested database resource state.
     *
     * @param {object} [parameters.sku] The name and tier of the SKU.
     *
     * @param {string} parameters.sku.name The name of the SKU. Ex - P3. It is
     * typically a letter+number code
     *
     * @param {string} [parameters.sku.tier] This field is required to be
     * implemented by the Resource Provider if the service has more than one tier,
     * but is not required on a PUT.
     *
     * @param {string} [parameters.sku.size] The SKU size. When the name field is
     * the combination of tier and some other value, this would be the standalone
     * code.
     *
     * @param {string} [parameters.sku.family] If the service has different
     * generations of hardware, for the same SKU, then that can be captured here.
     *
     * @param {number} [parameters.sku.capacity] If the SKU supports scale out/in
     * then the capacity integer should be included. If scale out/in is not
     * possible for the resource this may be omitted.
     *
     * @param {string} [parameters.createMode] Specifies the mode of database
     * creation.
     *
     * Default: regular database creation.
     *
     * Copy: creates a database as a copy of an existing database. sourceDatabaseId
     * must be specified as the resource ID of the source database.
     *
     * Secondary: creates a database as a secondary replica of an existing
     * database. sourceDatabaseId must be specified as the resource ID of the
     * existing primary database.
     *
     * PointInTimeRestore: Creates a database by restoring a point in time backup
     * of an existing database. sourceDatabaseId must be specified as the resource
     * ID of the existing database, and restorePointInTime must be specified.
     *
     * Recovery: Creates a database by restoring a geo-replicated backup.
     * sourceDatabaseId must be specified as the recoverable database resource ID
     * to restore.
     *
     * Restore: Creates a database by restoring a backup of a deleted database.
     * sourceDatabaseId must be specified. If sourceDatabaseId is the database's
     * original resource ID, then sourceDatabaseDeletionDate must be specified.
     * Otherwise sourceDatabaseId must be the restorable dropped database resource
     * ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be
     * specified to restore from an earlier point in time.
     *
     * RestoreLongTermRetentionBackup: Creates a database by restoring from a long
     * term retention vault. recoveryServicesRecoveryPointResourceId must be
     * specified as the recovery point resource ID.
     *
     * Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for
     * DataWarehouse edition. Possible values include: 'Default', 'Copy',
     * 'Secondary', 'PointInTimeRestore', 'Restore', 'Recovery',
     * 'RestoreExternalBackup', 'RestoreExternalBackupSecondary',
     * 'RestoreLongTermRetentionBackup', 'OnlineSecondary'
     *
     * @param {string} [parameters.collation] The collation of the database.
     *
     * @param {number} [parameters.maxSizeBytes] The max size of the database
     * expressed in bytes.
     *
     * @param {string} [parameters.sampleName] The name of the sample schema to
     * apply when creating this database. Possible values include:
     * 'AdventureWorksLT', 'WideWorldImportersStd', 'WideWorldImportersFull'
     *
     * @param {string} [parameters.elasticPoolId] The resource identifier of the
     * elastic pool containing this database.
     *
     * @param {string} [parameters.sourceDatabaseId] The resource identifier of the
     * source database associated with create operation of this database.
     *
     * @param {date} [parameters.restorePointInTime] Specifies the point in time
     * (ISO8601 format) of the source database that will be restored to create the
     * new database.
     *
     * @param {date} [parameters.sourceDatabaseDeletionDate] Specifies the time
     * that the database was deleted.
     *
     * @param {string} [parameters.recoveryServicesRecoveryPointId] The resource
     * identifier of the recovery point associated with create operation of this
     * database.
     *
     * @param {string} [parameters.longTermRetentionBackupResourceId] The resource
     * identifier of the long term retention backup associated with create
     * operation of this database.
     *
     * @param {string} [parameters.recoverableDatabaseId] The resource identifier
     * of the recoverable database associated with create operation of this
     * database.
     *
     * @param {string} [parameters.restorableDroppedDatabaseId] The resource
     * identifier of the restorable dropped database associated with create
     * operation of this database.
     *
     * @param {string} [parameters.catalogCollation] Collation of the metadata
     * catalog. Possible values include: 'DATABASE_DEFAULT',
     * 'SQL_Latin1_General_CP1_CI_AS'
     *
     * @param {boolean} [parameters.zoneRedundant] Whether or not this database is
     * zone redundant, which means the replicas of this database will be spread
     * across multiple availability zones.
     *
     * @param {string} [parameters.licenseType] The license type to apply for this
     * database. Possible values include: 'LicenseIncluded', 'BasePrice'
     *
     * @param {string} [parameters.readScale] The state of read-only routing. If
     * enabled, connections that have application intent set to readonly in their
     * connection string may be routed to a readonly secondary replica in the same
     * region. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Database>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DatabaseUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Database>>;

    /**
     * Updates an existing database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The requested database resource state.
     *
     * @param {object} [parameters.sku] The name and tier of the SKU.
     *
     * @param {string} parameters.sku.name The name of the SKU. Ex - P3. It is
     * typically a letter+number code
     *
     * @param {string} [parameters.sku.tier] This field is required to be
     * implemented by the Resource Provider if the service has more than one tier,
     * but is not required on a PUT.
     *
     * @param {string} [parameters.sku.size] The SKU size. When the name field is
     * the combination of tier and some other value, this would be the standalone
     * code.
     *
     * @param {string} [parameters.sku.family] If the service has different
     * generations of hardware, for the same SKU, then that can be captured here.
     *
     * @param {number} [parameters.sku.capacity] If the SKU supports scale out/in
     * then the capacity integer should be included. If scale out/in is not
     * possible for the resource this may be omitted.
     *
     * @param {string} [parameters.createMode] Specifies the mode of database
     * creation.
     *
     * Default: regular database creation.
     *
     * Copy: creates a database as a copy of an existing database. sourceDatabaseId
     * must be specified as the resource ID of the source database.
     *
     * Secondary: creates a database as a secondary replica of an existing
     * database. sourceDatabaseId must be specified as the resource ID of the
     * existing primary database.
     *
     * PointInTimeRestore: Creates a database by restoring a point in time backup
     * of an existing database. sourceDatabaseId must be specified as the resource
     * ID of the existing database, and restorePointInTime must be specified.
     *
     * Recovery: Creates a database by restoring a geo-replicated backup.
     * sourceDatabaseId must be specified as the recoverable database resource ID
     * to restore.
     *
     * Restore: Creates a database by restoring a backup of a deleted database.
     * sourceDatabaseId must be specified. If sourceDatabaseId is the database's
     * original resource ID, then sourceDatabaseDeletionDate must be specified.
     * Otherwise sourceDatabaseId must be the restorable dropped database resource
     * ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be
     * specified to restore from an earlier point in time.
     *
     * RestoreLongTermRetentionBackup: Creates a database by restoring from a long
     * term retention vault. recoveryServicesRecoveryPointResourceId must be
     * specified as the recovery point resource ID.
     *
     * Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for
     * DataWarehouse edition. Possible values include: 'Default', 'Copy',
     * 'Secondary', 'PointInTimeRestore', 'Restore', 'Recovery',
     * 'RestoreExternalBackup', 'RestoreExternalBackupSecondary',
     * 'RestoreLongTermRetentionBackup', 'OnlineSecondary'
     *
     * @param {string} [parameters.collation] The collation of the database.
     *
     * @param {number} [parameters.maxSizeBytes] The max size of the database
     * expressed in bytes.
     *
     * @param {string} [parameters.sampleName] The name of the sample schema to
     * apply when creating this database. Possible values include:
     * 'AdventureWorksLT', 'WideWorldImportersStd', 'WideWorldImportersFull'
     *
     * @param {string} [parameters.elasticPoolId] The resource identifier of the
     * elastic pool containing this database.
     *
     * @param {string} [parameters.sourceDatabaseId] The resource identifier of the
     * source database associated with create operation of this database.
     *
     * @param {date} [parameters.restorePointInTime] Specifies the point in time
     * (ISO8601 format) of the source database that will be restored to create the
     * new database.
     *
     * @param {date} [parameters.sourceDatabaseDeletionDate] Specifies the time
     * that the database was deleted.
     *
     * @param {string} [parameters.recoveryServicesRecoveryPointId] The resource
     * identifier of the recovery point associated with create operation of this
     * database.
     *
     * @param {string} [parameters.longTermRetentionBackupResourceId] The resource
     * identifier of the long term retention backup associated with create
     * operation of this database.
     *
     * @param {string} [parameters.recoverableDatabaseId] The resource identifier
     * of the recoverable database associated with create operation of this
     * database.
     *
     * @param {string} [parameters.restorableDroppedDatabaseId] The resource
     * identifier of the restorable dropped database associated with create
     * operation of this database.
     *
     * @param {string} [parameters.catalogCollation] Collation of the metadata
     * catalog. Possible values include: 'DATABASE_DEFAULT',
     * 'SQL_Latin1_General_CP1_CI_AS'
     *
     * @param {boolean} [parameters.zoneRedundant] Whether or not this database is
     * zone redundant, which means the replicas of this database will be spread
     * across multiple availability zones.
     *
     * @param {string} [parameters.licenseType] The license type to apply for this
     * database. Possible values include: 'LicenseIncluded', 'BasePrice'
     *
     * @param {string} [parameters.readScale] The state of read-only routing. If
     * enabled, connections that have application intent set to readonly in their
     * connection string may be routed to a readonly secondary replica in the same
     * region. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Database} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Database} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Database} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DatabaseUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Database>;
    beginUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DatabaseUpdate, callback: ServiceCallback<models.Database>): void;
    beginUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DatabaseUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Database>): void;


    /**
     * Pauses a database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to be paused.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Database>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginPauseWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Database>>;

    /**
     * Pauses a database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to be paused.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Database} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Database} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Database} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginPause(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Database>;
    beginPause(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.Database>): void;
    beginPause(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Database>): void;


    /**
     * Resumes a database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to be resumed.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Database>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginResumeWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Database>>;

    /**
     * Resumes a database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to be resumed.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Database} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Database} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Database} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginResume(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Database>;
    beginResume(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.Database>): void;
    beginResume(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Database>): void;


    /**
     * Gets a list of databases.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseListResult>>;

    /**
     * Gets a list of databases.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServerNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseListResult>;
    listByServerNext(nextPageLink: string, callback: ServiceCallback<models.DatabaseListResult>): void;
    listByServerNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseListResult>): void;


    /**
     * Gets a list of databases in an elastic pool.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByElasticPoolNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseListResult>>;

    /**
     * Gets a list of databases in an elastic pool.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByElasticPoolNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseListResult>;
    listByElasticPoolNext(nextPageLink: string, callback: ServiceCallback<models.DatabaseListResult>): void;
    listByElasticPoolNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseListResult>): void;
}

/**
 * @class
 * ElasticPools
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface ElasticPools {


    /**
     * Returns elastic pool  metrics.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool.
     *
     * @param {string} filter An OData filter expression that describes a subset of
     * metrics to return.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MetricListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricsWithHttpOperationResponse(resourceGroupName: string, serverName: string, elasticPoolName: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MetricListResult>>;

    /**
     * Returns elastic pool  metrics.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool.
     *
     * @param {string} filter An OData filter expression that describes a subset of
     * metrics to return.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MetricListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MetricListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MetricListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetrics(resourceGroupName: string, serverName: string, elasticPoolName: string, filter: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MetricListResult>;
    listMetrics(resourceGroupName: string, serverName: string, elasticPoolName: string, filter: string, callback: ServiceCallback<models.MetricListResult>): void;
    listMetrics(resourceGroupName: string, serverName: string, elasticPoolName: string, filter: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricListResult>): void;


    /**
     * Returns elastic pool metric definitions.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MetricDefinitionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricDefinitionsWithHttpOperationResponse(resourceGroupName: string, serverName: string, elasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MetricDefinitionListResult>>;

    /**
     * Returns elastic pool metric definitions.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MetricDefinitionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MetricDefinitionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MetricDefinitionListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetricDefinitions(resourceGroupName: string, serverName: string, elasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MetricDefinitionListResult>;
    listMetricDefinitions(resourceGroupName: string, serverName: string, elasticPoolName: string, callback: ServiceCallback<models.MetricDefinitionListResult>): void;
    listMetricDefinitions(resourceGroupName: string, serverName: string, elasticPoolName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricDefinitionListResult>): void;


    /**
     * Gets all elastic pools in a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of elements in the collection to
     * skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ElasticPoolListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ElasticPoolListResult>>;

    /**
     * Gets all elastic pools in a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.skip] The number of elements in the collection to
     * skip.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ElasticPoolListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ElasticPoolListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ElasticPoolListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: { skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.ElasticPoolListResult>;
    listByServer(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.ElasticPoolListResult>): void;
    listByServer(resourceGroupName: string, serverName: string, options: { skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ElasticPoolListResult>): void;


    /**
     * Gets an elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ElasticPool>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, elasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ElasticPool>>;

    /**
     * Gets an elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ElasticPool} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ElasticPool} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ElasticPool} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, elasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ElasticPool>;
    get(resourceGroupName: string, serverName: string, elasticPoolName: string, callback: ServiceCallback<models.ElasticPool>): void;
    get(resourceGroupName: string, serverName: string, elasticPoolName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ElasticPool>): void;


    /**
     * Creates or updates an elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool.
     *
     * @param {object} parameters The elastic pool parameters.
     *
     * @param {object} [parameters.sku]
     *
     * @param {string} parameters.sku.name The name of the SKU. Ex - P3. It is
     * typically a letter+number code
     *
     * @param {string} [parameters.sku.tier] This field is required to be
     * implemented by the Resource Provider if the service has more than one tier,
     * but is not required on a PUT.
     *
     * @param {string} [parameters.sku.size] The SKU size. When the name field is
     * the combination of tier and some other value, this would be the standalone
     * code.
     *
     * @param {string} [parameters.sku.family] If the service has different
     * generations of hardware, for the same SKU, then that can be captured here.
     *
     * @param {number} [parameters.sku.capacity] If the SKU supports scale out/in
     * then the capacity integer should be included. If scale out/in is not
     * possible for the resource this may be omitted.
     *
     * @param {number} [parameters.maxSizeBytes] The storage limit for the database
     * elastic pool in bytes.
     *
     * @param {object} [parameters.perDatabaseSettings] The per database settings
     * for the elastic pool.
     *
     * @param {number} [parameters.perDatabaseSettings.minCapacity] The minimum
     * capacity all databases are guaranteed.
     *
     * @param {number} [parameters.perDatabaseSettings.maxCapacity] The maximum
     * capacity any one database can consume.
     *
     * @param {boolean} [parameters.zoneRedundant] Whether or not this elastic pool
     * is zone redundant, which means the replicas of this elastic pool will be
     * spread across multiple availability zones.
     *
     * @param {string} [parameters.licenseType] The license type to apply for this
     * elastic pool. Possible values include: 'LicenseIncluded', 'BasePrice'
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ElasticPool>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, elasticPoolName: string, parameters: models.ElasticPool, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ElasticPool>>;

    /**
     * Creates or updates an elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool.
     *
     * @param {object} parameters The elastic pool parameters.
     *
     * @param {object} [parameters.sku]
     *
     * @param {string} parameters.sku.name The name of the SKU. Ex - P3. It is
     * typically a letter+number code
     *
     * @param {string} [parameters.sku.tier] This field is required to be
     * implemented by the Resource Provider if the service has more than one tier,
     * but is not required on a PUT.
     *
     * @param {string} [parameters.sku.size] The SKU size. When the name field is
     * the combination of tier and some other value, this would be the standalone
     * code.
     *
     * @param {string} [parameters.sku.family] If the service has different
     * generations of hardware, for the same SKU, then that can be captured here.
     *
     * @param {number} [parameters.sku.capacity] If the SKU supports scale out/in
     * then the capacity integer should be included. If scale out/in is not
     * possible for the resource this may be omitted.
     *
     * @param {number} [parameters.maxSizeBytes] The storage limit for the database
     * elastic pool in bytes.
     *
     * @param {object} [parameters.perDatabaseSettings] The per database settings
     * for the elastic pool.
     *
     * @param {number} [parameters.perDatabaseSettings.minCapacity] The minimum
     * capacity all databases are guaranteed.
     *
     * @param {number} [parameters.perDatabaseSettings.maxCapacity] The maximum
     * capacity any one database can consume.
     *
     * @param {boolean} [parameters.zoneRedundant] Whether or not this elastic pool
     * is zone redundant, which means the replicas of this elastic pool will be
     * spread across multiple availability zones.
     *
     * @param {string} [parameters.licenseType] The license type to apply for this
     * elastic pool. Possible values include: 'LicenseIncluded', 'BasePrice'
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ElasticPool} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ElasticPool} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ElasticPool} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, elasticPoolName: string, parameters: models.ElasticPool, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ElasticPool>;
    createOrUpdate(resourceGroupName: string, serverName: string, elasticPoolName: string, parameters: models.ElasticPool, callback: ServiceCallback<models.ElasticPool>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, elasticPoolName: string, parameters: models.ElasticPool, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ElasticPool>): void;


    /**
     * Deletes an elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, elasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes an elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serverName: string, elasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serverName: string, elasticPoolName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serverName: string, elasticPoolName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates an elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool.
     *
     * @param {object} parameters The elastic pool update parameters.
     *
     * @param {object} [parameters.sku]
     *
     * @param {string} parameters.sku.name The name of the SKU. Ex - P3. It is
     * typically a letter+number code
     *
     * @param {string} [parameters.sku.tier] This field is required to be
     * implemented by the Resource Provider if the service has more than one tier,
     * but is not required on a PUT.
     *
     * @param {string} [parameters.sku.size] The SKU size. When the name field is
     * the combination of tier and some other value, this would be the standalone
     * code.
     *
     * @param {string} [parameters.sku.family] If the service has different
     * generations of hardware, for the same SKU, then that can be captured here.
     *
     * @param {number} [parameters.sku.capacity] If the SKU supports scale out/in
     * then the capacity integer should be included. If scale out/in is not
     * possible for the resource this may be omitted.
     *
     * @param {number} [parameters.maxSizeBytes] The storage limit for the database
     * elastic pool in bytes.
     *
     * @param {object} [parameters.perDatabaseSettings] The per database settings
     * for the elastic pool.
     *
     * @param {number} [parameters.perDatabaseSettings.minCapacity] The minimum
     * capacity all databases are guaranteed.
     *
     * @param {number} [parameters.perDatabaseSettings.maxCapacity] The maximum
     * capacity any one database can consume.
     *
     * @param {boolean} [parameters.zoneRedundant] Whether or not this elastic pool
     * is zone redundant, which means the replicas of this elastic pool will be
     * spread across multiple availability zones.
     *
     * @param {string} [parameters.licenseType] The license type to apply for this
     * elastic pool. Possible values include: 'LicenseIncluded', 'BasePrice'
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ElasticPool>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serverName: string, elasticPoolName: string, parameters: models.ElasticPoolUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ElasticPool>>;

    /**
     * Updates an elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool.
     *
     * @param {object} parameters The elastic pool update parameters.
     *
     * @param {object} [parameters.sku]
     *
     * @param {string} parameters.sku.name The name of the SKU. Ex - P3. It is
     * typically a letter+number code
     *
     * @param {string} [parameters.sku.tier] This field is required to be
     * implemented by the Resource Provider if the service has more than one tier,
     * but is not required on a PUT.
     *
     * @param {string} [parameters.sku.size] The SKU size. When the name field is
     * the combination of tier and some other value, this would be the standalone
     * code.
     *
     * @param {string} [parameters.sku.family] If the service has different
     * generations of hardware, for the same SKU, then that can be captured here.
     *
     * @param {number} [parameters.sku.capacity] If the SKU supports scale out/in
     * then the capacity integer should be included. If scale out/in is not
     * possible for the resource this may be omitted.
     *
     * @param {number} [parameters.maxSizeBytes] The storage limit for the database
     * elastic pool in bytes.
     *
     * @param {object} [parameters.perDatabaseSettings] The per database settings
     * for the elastic pool.
     *
     * @param {number} [parameters.perDatabaseSettings.minCapacity] The minimum
     * capacity all databases are guaranteed.
     *
     * @param {number} [parameters.perDatabaseSettings.maxCapacity] The maximum
     * capacity any one database can consume.
     *
     * @param {boolean} [parameters.zoneRedundant] Whether or not this elastic pool
     * is zone redundant, which means the replicas of this elastic pool will be
     * spread across multiple availability zones.
     *
     * @param {string} [parameters.licenseType] The license type to apply for this
     * elastic pool. Possible values include: 'LicenseIncluded', 'BasePrice'
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ElasticPool} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ElasticPool} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ElasticPool} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serverName: string, elasticPoolName: string, parameters: models.ElasticPoolUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ElasticPool>;
    update(resourceGroupName: string, serverName: string, elasticPoolName: string, parameters: models.ElasticPoolUpdate, callback: ServiceCallback<models.ElasticPool>): void;
    update(resourceGroupName: string, serverName: string, elasticPoolName: string, parameters: models.ElasticPoolUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ElasticPool>): void;


    /**
     * Creates or updates an elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool.
     *
     * @param {object} parameters The elastic pool parameters.
     *
     * @param {object} [parameters.sku]
     *
     * @param {string} parameters.sku.name The name of the SKU. Ex - P3. It is
     * typically a letter+number code
     *
     * @param {string} [parameters.sku.tier] This field is required to be
     * implemented by the Resource Provider if the service has more than one tier,
     * but is not required on a PUT.
     *
     * @param {string} [parameters.sku.size] The SKU size. When the name field is
     * the combination of tier and some other value, this would be the standalone
     * code.
     *
     * @param {string} [parameters.sku.family] If the service has different
     * generations of hardware, for the same SKU, then that can be captured here.
     *
     * @param {number} [parameters.sku.capacity] If the SKU supports scale out/in
     * then the capacity integer should be included. If scale out/in is not
     * possible for the resource this may be omitted.
     *
     * @param {number} [parameters.maxSizeBytes] The storage limit for the database
     * elastic pool in bytes.
     *
     * @param {object} [parameters.perDatabaseSettings] The per database settings
     * for the elastic pool.
     *
     * @param {number} [parameters.perDatabaseSettings.minCapacity] The minimum
     * capacity all databases are guaranteed.
     *
     * @param {number} [parameters.perDatabaseSettings.maxCapacity] The maximum
     * capacity any one database can consume.
     *
     * @param {boolean} [parameters.zoneRedundant] Whether or not this elastic pool
     * is zone redundant, which means the replicas of this elastic pool will be
     * spread across multiple availability zones.
     *
     * @param {string} [parameters.licenseType] The license type to apply for this
     * elastic pool. Possible values include: 'LicenseIncluded', 'BasePrice'
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ElasticPool>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, elasticPoolName: string, parameters: models.ElasticPool, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ElasticPool>>;

    /**
     * Creates or updates an elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool.
     *
     * @param {object} parameters The elastic pool parameters.
     *
     * @param {object} [parameters.sku]
     *
     * @param {string} parameters.sku.name The name of the SKU. Ex - P3. It is
     * typically a letter+number code
     *
     * @param {string} [parameters.sku.tier] This field is required to be
     * implemented by the Resource Provider if the service has more than one tier,
     * but is not required on a PUT.
     *
     * @param {string} [parameters.sku.size] The SKU size. When the name field is
     * the combination of tier and some other value, this would be the standalone
     * code.
     *
     * @param {string} [parameters.sku.family] If the service has different
     * generations of hardware, for the same SKU, then that can be captured here.
     *
     * @param {number} [parameters.sku.capacity] If the SKU supports scale out/in
     * then the capacity integer should be included. If scale out/in is not
     * possible for the resource this may be omitted.
     *
     * @param {number} [parameters.maxSizeBytes] The storage limit for the database
     * elastic pool in bytes.
     *
     * @param {object} [parameters.perDatabaseSettings] The per database settings
     * for the elastic pool.
     *
     * @param {number} [parameters.perDatabaseSettings.minCapacity] The minimum
     * capacity all databases are guaranteed.
     *
     * @param {number} [parameters.perDatabaseSettings.maxCapacity] The maximum
     * capacity any one database can consume.
     *
     * @param {boolean} [parameters.zoneRedundant] Whether or not this elastic pool
     * is zone redundant, which means the replicas of this elastic pool will be
     * spread across multiple availability zones.
     *
     * @param {string} [parameters.licenseType] The license type to apply for this
     * elastic pool. Possible values include: 'LicenseIncluded', 'BasePrice'
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ElasticPool} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ElasticPool} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ElasticPool} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, elasticPoolName: string, parameters: models.ElasticPool, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ElasticPool>;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, elasticPoolName: string, parameters: models.ElasticPool, callback: ServiceCallback<models.ElasticPool>): void;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, elasticPoolName: string, parameters: models.ElasticPool, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ElasticPool>): void;


    /**
     * Deletes an elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, elasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes an elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, serverName: string, elasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, serverName: string, elasticPoolName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, serverName: string, elasticPoolName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates an elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool.
     *
     * @param {object} parameters The elastic pool update parameters.
     *
     * @param {object} [parameters.sku]
     *
     * @param {string} parameters.sku.name The name of the SKU. Ex - P3. It is
     * typically a letter+number code
     *
     * @param {string} [parameters.sku.tier] This field is required to be
     * implemented by the Resource Provider if the service has more than one tier,
     * but is not required on a PUT.
     *
     * @param {string} [parameters.sku.size] The SKU size. When the name field is
     * the combination of tier and some other value, this would be the standalone
     * code.
     *
     * @param {string} [parameters.sku.family] If the service has different
     * generations of hardware, for the same SKU, then that can be captured here.
     *
     * @param {number} [parameters.sku.capacity] If the SKU supports scale out/in
     * then the capacity integer should be included. If scale out/in is not
     * possible for the resource this may be omitted.
     *
     * @param {number} [parameters.maxSizeBytes] The storage limit for the database
     * elastic pool in bytes.
     *
     * @param {object} [parameters.perDatabaseSettings] The per database settings
     * for the elastic pool.
     *
     * @param {number} [parameters.perDatabaseSettings.minCapacity] The minimum
     * capacity all databases are guaranteed.
     *
     * @param {number} [parameters.perDatabaseSettings.maxCapacity] The maximum
     * capacity any one database can consume.
     *
     * @param {boolean} [parameters.zoneRedundant] Whether or not this elastic pool
     * is zone redundant, which means the replicas of this elastic pool will be
     * spread across multiple availability zones.
     *
     * @param {string} [parameters.licenseType] The license type to apply for this
     * elastic pool. Possible values include: 'LicenseIncluded', 'BasePrice'
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ElasticPool>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, elasticPoolName: string, parameters: models.ElasticPoolUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ElasticPool>>;

    /**
     * Updates an elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool.
     *
     * @param {object} parameters The elastic pool update parameters.
     *
     * @param {object} [parameters.sku]
     *
     * @param {string} parameters.sku.name The name of the SKU. Ex - P3. It is
     * typically a letter+number code
     *
     * @param {string} [parameters.sku.tier] This field is required to be
     * implemented by the Resource Provider if the service has more than one tier,
     * but is not required on a PUT.
     *
     * @param {string} [parameters.sku.size] The SKU size. When the name field is
     * the combination of tier and some other value, this would be the standalone
     * code.
     *
     * @param {string} [parameters.sku.family] If the service has different
     * generations of hardware, for the same SKU, then that can be captured here.
     *
     * @param {number} [parameters.sku.capacity] If the SKU supports scale out/in
     * then the capacity integer should be included. If scale out/in is not
     * possible for the resource this may be omitted.
     *
     * @param {number} [parameters.maxSizeBytes] The storage limit for the database
     * elastic pool in bytes.
     *
     * @param {object} [parameters.perDatabaseSettings] The per database settings
     * for the elastic pool.
     *
     * @param {number} [parameters.perDatabaseSettings.minCapacity] The minimum
     * capacity all databases are guaranteed.
     *
     * @param {number} [parameters.perDatabaseSettings.maxCapacity] The maximum
     * capacity any one database can consume.
     *
     * @param {boolean} [parameters.zoneRedundant] Whether or not this elastic pool
     * is zone redundant, which means the replicas of this elastic pool will be
     * spread across multiple availability zones.
     *
     * @param {string} [parameters.licenseType] The license type to apply for this
     * elastic pool. Possible values include: 'LicenseIncluded', 'BasePrice'
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ElasticPool} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ElasticPool} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ElasticPool} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, serverName: string, elasticPoolName: string, parameters: models.ElasticPoolUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ElasticPool>;
    beginUpdate(resourceGroupName: string, serverName: string, elasticPoolName: string, parameters: models.ElasticPoolUpdate, callback: ServiceCallback<models.ElasticPool>): void;
    beginUpdate(resourceGroupName: string, serverName: string, elasticPoolName: string, parameters: models.ElasticPoolUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ElasticPool>): void;


    /**
     * Gets all elastic pools in a server.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ElasticPoolListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ElasticPoolListResult>>;

    /**
     * Gets all elastic pools in a server.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ElasticPoolListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ElasticPoolListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ElasticPoolListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServerNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ElasticPoolListResult>;
    listByServerNext(nextPageLink: string, callback: ServiceCallback<models.ElasticPoolListResult>): void;
    listByServerNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ElasticPoolListResult>): void;
}

/**
 * @class
 * RecommendedElasticPools
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface RecommendedElasticPools {


    /**
     * Gets a recommended elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} recommendedElasticPoolName The name of the recommended
     * elastic pool to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RecommendedElasticPool>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, recommendedElasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RecommendedElasticPool>>;

    /**
     * Gets a recommended elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} recommendedElasticPoolName The name of the recommended
     * elastic pool to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RecommendedElasticPool} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RecommendedElasticPool} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RecommendedElasticPool} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, recommendedElasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RecommendedElasticPool>;
    get(resourceGroupName: string, serverName: string, recommendedElasticPoolName: string, callback: ServiceCallback<models.RecommendedElasticPool>): void;
    get(resourceGroupName: string, serverName: string, recommendedElasticPoolName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RecommendedElasticPool>): void;


    /**
     * Returns recommended elastic pools.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RecommendedElasticPoolListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RecommendedElasticPoolListResult>>;

    /**
     * Returns recommended elastic pools.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RecommendedElasticPoolListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RecommendedElasticPoolListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RecommendedElasticPoolListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RecommendedElasticPoolListResult>;
    listByServer(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.RecommendedElasticPoolListResult>): void;
    listByServer(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RecommendedElasticPoolListResult>): void;


    /**
     * Returns recommended elastic pool metrics.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} recommendedElasticPoolName The name of the recommended
     * elastic pool to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RecommendedElasticPoolListMetricsResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricsWithHttpOperationResponse(resourceGroupName: string, serverName: string, recommendedElasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RecommendedElasticPoolListMetricsResult>>;

    /**
     * Returns recommended elastic pool metrics.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} recommendedElasticPoolName The name of the recommended
     * elastic pool to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RecommendedElasticPoolListMetricsResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RecommendedElasticPoolListMetricsResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RecommendedElasticPoolListMetricsResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetrics(resourceGroupName: string, serverName: string, recommendedElasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RecommendedElasticPoolListMetricsResult>;
    listMetrics(resourceGroupName: string, serverName: string, recommendedElasticPoolName: string, callback: ServiceCallback<models.RecommendedElasticPoolListMetricsResult>): void;
    listMetrics(resourceGroupName: string, serverName: string, recommendedElasticPoolName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RecommendedElasticPoolListMetricsResult>): void;
}

/**
 * @class
 * ReplicationLinks
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface ReplicationLinks {


    /**
     * Deletes a database replication link. Cannot be done during failover.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database that has the
     * replication link to be dropped.
     *
     * @param {string} linkId The ID of the replication link to be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a database replication link. Cannot be done during failover.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database that has the
     * replication link to be dropped.
     *
     * @param {string} linkId The ID of the replication link to be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a database replication link.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to get the link for.
     *
     * @param {string} linkId The replication link ID to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReplicationLink>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReplicationLink>>;

    /**
     * Gets a database replication link.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to get the link for.
     *
     * @param {string} linkId The replication link ID to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReplicationLink} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReplicationLink} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReplicationLink} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ReplicationLink>;
    get(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, callback: ServiceCallback<models.ReplicationLink>): void;
    get(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReplicationLink>): void;


    /**
     * Sets which replica database is primary by failing over from the current
     * primary replica database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database that has the
     * replication link to be failed over.
     *
     * @param {string} linkId The ID of the replication link to be failed over.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    failoverWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Sets which replica database is primary by failing over from the current
     * primary replica database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database that has the
     * replication link to be failed over.
     *
     * @param {string} linkId The ID of the replication link to be failed over.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    failover(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    failover(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, callback: ServiceCallback<void>): void;
    failover(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Sets which replica database is primary by failing over from the current
     * primary replica database. This operation might result in data loss.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database that has the
     * replication link to be failed over.
     *
     * @param {string} linkId The ID of the replication link to be failed over.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    failoverAllowDataLossWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Sets which replica database is primary by failing over from the current
     * primary replica database. This operation might result in data loss.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database that has the
     * replication link to be failed over.
     *
     * @param {string} linkId The ID of the replication link to be failed over.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    failoverAllowDataLoss(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    failoverAllowDataLoss(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, callback: ServiceCallback<void>): void;
    failoverAllowDataLoss(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists a database's replication links.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to retrieve links for.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReplicationLinkListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDatabaseWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReplicationLinkListResult>>;

    /**
     * Lists a database's replication links.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database to retrieve links for.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReplicationLinkListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReplicationLinkListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReplicationLinkListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ReplicationLinkListResult>;
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.ReplicationLinkListResult>): void;
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReplicationLinkListResult>): void;


    /**
     * Sets which replica database is primary by failing over from the current
     * primary replica database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database that has the
     * replication link to be failed over.
     *
     * @param {string} linkId The ID of the replication link to be failed over.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginFailoverWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Sets which replica database is primary by failing over from the current
     * primary replica database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database that has the
     * replication link to be failed over.
     *
     * @param {string} linkId The ID of the replication link to be failed over.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginFailover(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginFailover(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, callback: ServiceCallback<void>): void;
    beginFailover(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Sets which replica database is primary by failing over from the current
     * primary replica database. This operation might result in data loss.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database that has the
     * replication link to be failed over.
     *
     * @param {string} linkId The ID of the replication link to be failed over.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginFailoverAllowDataLossWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Sets which replica database is primary by failing over from the current
     * primary replica database. This operation might result in data loss.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database that has the
     * replication link to be failed over.
     *
     * @param {string} linkId The ID of the replication link to be failed over.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginFailoverAllowDataLoss(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginFailoverAllowDataLoss(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, callback: ServiceCallback<void>): void;
    beginFailoverAllowDataLoss(resourceGroupName: string, serverName: string, databaseName: string, linkId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * ServerAzureADAdministrators
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface ServerAzureADAdministrators {


    /**
     * Creates a new Server Active Directory Administrator or updates an existing
     * server Active Directory Administrator.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} properties The required parameters for creating or updating
     * an Active Directory Administrator.
     *
     * @param {string} properties.login The server administrator login value.
     *
     * @param {uuid} properties.sid The server administrator Sid (Secure ID).
     *
     * @param {uuid} properties.tenantId The server Active Directory Administrator
     * tenant id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerAzureADAdministrator>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, properties: models.ServerAzureADAdministrator, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerAzureADAdministrator>>;

    /**
     * Creates a new Server Active Directory Administrator or updates an existing
     * server Active Directory Administrator.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} properties The required parameters for creating or updating
     * an Active Directory Administrator.
     *
     * @param {string} properties.login The server administrator login value.
     *
     * @param {uuid} properties.sid The server administrator Sid (Secure ID).
     *
     * @param {uuid} properties.tenantId The server Active Directory Administrator
     * tenant id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerAzureADAdministrator} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerAzureADAdministrator} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerAzureADAdministrator} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, properties: models.ServerAzureADAdministrator, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerAzureADAdministrator>;
    createOrUpdate(resourceGroupName: string, serverName: string, properties: models.ServerAzureADAdministrator, callback: ServiceCallback<models.ServerAzureADAdministrator>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, properties: models.ServerAzureADAdministrator, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerAzureADAdministrator>): void;


    /**
     * Deletes an existing server Active Directory Administrator.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerAzureADAdministrator>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerAzureADAdministrator>>;

    /**
     * Deletes an existing server Active Directory Administrator.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerAzureADAdministrator} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerAzureADAdministrator} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerAzureADAdministrator} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerAzureADAdministrator>;
    deleteMethod(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.ServerAzureADAdministrator>): void;
    deleteMethod(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerAzureADAdministrator>): void;


    /**
     * Returns an server Administrator.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerAzureADAdministrator>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerAzureADAdministrator>>;

    /**
     * Returns an server Administrator.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerAzureADAdministrator} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerAzureADAdministrator} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerAzureADAdministrator} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerAzureADAdministrator>;
    get(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.ServerAzureADAdministrator>): void;
    get(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerAzureADAdministrator>): void;


    /**
     * Returns a list of server Administrators.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerAdministratorListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerAdministratorListResult>>;

    /**
     * Returns a list of server Administrators.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerAdministratorListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerAdministratorListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerAdministratorListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerAdministratorListResult>;
    listByServer(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.ServerAdministratorListResult>): void;
    listByServer(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerAdministratorListResult>): void;


    /**
     * Creates a new Server Active Directory Administrator or updates an existing
     * server Active Directory Administrator.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} properties The required parameters for creating or updating
     * an Active Directory Administrator.
     *
     * @param {string} properties.login The server administrator login value.
     *
     * @param {uuid} properties.sid The server administrator Sid (Secure ID).
     *
     * @param {uuid} properties.tenantId The server Active Directory Administrator
     * tenant id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerAzureADAdministrator>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, properties: models.ServerAzureADAdministrator, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerAzureADAdministrator>>;

    /**
     * Creates a new Server Active Directory Administrator or updates an existing
     * server Active Directory Administrator.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} properties The required parameters for creating or updating
     * an Active Directory Administrator.
     *
     * @param {string} properties.login The server administrator login value.
     *
     * @param {uuid} properties.sid The server administrator Sid (Secure ID).
     *
     * @param {uuid} properties.tenantId The server Active Directory Administrator
     * tenant id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerAzureADAdministrator} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerAzureADAdministrator} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerAzureADAdministrator} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, properties: models.ServerAzureADAdministrator, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerAzureADAdministrator>;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, properties: models.ServerAzureADAdministrator, callback: ServiceCallback<models.ServerAzureADAdministrator>): void;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, properties: models.ServerAzureADAdministrator, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerAzureADAdministrator>): void;


    /**
     * Deletes an existing server Active Directory Administrator.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerAzureADAdministrator>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerAzureADAdministrator>>;

    /**
     * Deletes an existing server Active Directory Administrator.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerAzureADAdministrator} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerAzureADAdministrator} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerAzureADAdministrator} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerAzureADAdministrator>;
    beginDeleteMethod(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.ServerAzureADAdministrator>): void;
    beginDeleteMethod(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerAzureADAdministrator>): void;
}

/**
 * @class
 * ServerCommunicationLinks
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface ServerCommunicationLinks {


    /**
     * Deletes a server communication link.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} communicationLinkName The name of the server communication
     * link.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, communicationLinkName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a server communication link.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} communicationLinkName The name of the server communication
     * link.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serverName: string, communicationLinkName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serverName: string, communicationLinkName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serverName: string, communicationLinkName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Returns a server communication link.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} communicationLinkName The name of the server communication
     * link.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerCommunicationLink>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, communicationLinkName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerCommunicationLink>>;

    /**
     * Returns a server communication link.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} communicationLinkName The name of the server communication
     * link.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerCommunicationLink} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerCommunicationLink} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerCommunicationLink} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, communicationLinkName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerCommunicationLink>;
    get(resourceGroupName: string, serverName: string, communicationLinkName: string, callback: ServiceCallback<models.ServerCommunicationLink>): void;
    get(resourceGroupName: string, serverName: string, communicationLinkName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerCommunicationLink>): void;


    /**
     * Creates a server communication link.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} communicationLinkName The name of the server communication
     * link.
     *
     * @param {object} parameters The required parameters for creating a server
     * communication link.
     *
     * @param {string} parameters.partnerServer The name of the partner server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerCommunicationLink>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, communicationLinkName: string, parameters: models.ServerCommunicationLink, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerCommunicationLink>>;

    /**
     * Creates a server communication link.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} communicationLinkName The name of the server communication
     * link.
     *
     * @param {object} parameters The required parameters for creating a server
     * communication link.
     *
     * @param {string} parameters.partnerServer The name of the partner server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerCommunicationLink} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerCommunicationLink} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerCommunicationLink} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, communicationLinkName: string, parameters: models.ServerCommunicationLink, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerCommunicationLink>;
    createOrUpdate(resourceGroupName: string, serverName: string, communicationLinkName: string, parameters: models.ServerCommunicationLink, callback: ServiceCallback<models.ServerCommunicationLink>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, communicationLinkName: string, parameters: models.ServerCommunicationLink, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerCommunicationLink>): void;


    /**
     * Gets a list of server communication links.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerCommunicationLinkListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerCommunicationLinkListResult>>;

    /**
     * Gets a list of server communication links.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerCommunicationLinkListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerCommunicationLinkListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerCommunicationLinkListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerCommunicationLinkListResult>;
    listByServer(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.ServerCommunicationLinkListResult>): void;
    listByServer(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerCommunicationLinkListResult>): void;


    /**
     * Creates a server communication link.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} communicationLinkName The name of the server communication
     * link.
     *
     * @param {object} parameters The required parameters for creating a server
     * communication link.
     *
     * @param {string} parameters.partnerServer The name of the partner server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerCommunicationLink>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, communicationLinkName: string, parameters: models.ServerCommunicationLink, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerCommunicationLink>>;

    /**
     * Creates a server communication link.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} communicationLinkName The name of the server communication
     * link.
     *
     * @param {object} parameters The required parameters for creating a server
     * communication link.
     *
     * @param {string} parameters.partnerServer The name of the partner server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerCommunicationLink} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerCommunicationLink} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerCommunicationLink} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, communicationLinkName: string, parameters: models.ServerCommunicationLink, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerCommunicationLink>;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, communicationLinkName: string, parameters: models.ServerCommunicationLink, callback: ServiceCallback<models.ServerCommunicationLink>): void;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, communicationLinkName: string, parameters: models.ServerCommunicationLink, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerCommunicationLink>): void;
}

/**
 * @class
 * ServiceObjectives
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface ServiceObjectives {


    /**
     * Gets a database service objective.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} serviceObjectiveName The name of the service objective to
     * retrieve.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceObjective>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, serviceObjectiveName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceObjective>>;

    /**
     * Gets a database service objective.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} serviceObjectiveName The name of the service objective to
     * retrieve.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceObjective} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceObjective} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceObjective} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, serviceObjectiveName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceObjective>;
    get(resourceGroupName: string, serverName: string, serviceObjectiveName: string, callback: ServiceCallback<models.ServiceObjective>): void;
    get(resourceGroupName: string, serverName: string, serviceObjectiveName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceObjective>): void;


    /**
     * Returns database service objectives.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceObjectiveListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceObjectiveListResult>>;

    /**
     * Returns database service objectives.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceObjectiveListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceObjectiveListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceObjectiveListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceObjectiveListResult>;
    listByServer(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.ServiceObjectiveListResult>): void;
    listByServer(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceObjectiveListResult>): void;
}

/**
 * @class
 * ElasticPoolActivities
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface ElasticPoolActivities {


    /**
     * Returns elastic pool activities.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool for which to
     * get the current activity.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ElasticPoolActivityListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByElasticPoolWithHttpOperationResponse(resourceGroupName: string, serverName: string, elasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ElasticPoolActivityListResult>>;

    /**
     * Returns elastic pool activities.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool for which to
     * get the current activity.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ElasticPoolActivityListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ElasticPoolActivityListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ElasticPoolActivityListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByElasticPool(resourceGroupName: string, serverName: string, elasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ElasticPoolActivityListResult>;
    listByElasticPool(resourceGroupName: string, serverName: string, elasticPoolName: string, callback: ServiceCallback<models.ElasticPoolActivityListResult>): void;
    listByElasticPool(resourceGroupName: string, serverName: string, elasticPoolName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ElasticPoolActivityListResult>): void;
}

/**
 * @class
 * ElasticPoolDatabaseActivities
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface ElasticPoolDatabaseActivities {


    /**
     * Returns activity on databases inside of an elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ElasticPoolDatabaseActivityListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByElasticPoolWithHttpOperationResponse(resourceGroupName: string, serverName: string, elasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ElasticPoolDatabaseActivityListResult>>;

    /**
     * Returns activity on databases inside of an elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName The name of the elastic pool.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ElasticPoolDatabaseActivityListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ElasticPoolDatabaseActivityListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ElasticPoolDatabaseActivityListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByElasticPool(resourceGroupName: string, serverName: string, elasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ElasticPoolDatabaseActivityListResult>;
    listByElasticPool(resourceGroupName: string, serverName: string, elasticPoolName: string, callback: ServiceCallback<models.ElasticPoolDatabaseActivityListResult>): void;
    listByElasticPool(resourceGroupName: string, serverName: string, elasticPoolName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ElasticPoolDatabaseActivityListResult>): void;
}

/**
 * @class
 * ServiceTierAdvisors
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface ServiceTierAdvisors {


    /**
     * Gets a service tier advisor.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of database.
     *
     * @param {string} serviceTierAdvisorName The name of service tier advisor.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceTierAdvisor>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, serviceTierAdvisorName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceTierAdvisor>>;

    /**
     * Gets a service tier advisor.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of database.
     *
     * @param {string} serviceTierAdvisorName The name of service tier advisor.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceTierAdvisor} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceTierAdvisor} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceTierAdvisor} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, databaseName: string, serviceTierAdvisorName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceTierAdvisor>;
    get(resourceGroupName: string, serverName: string, databaseName: string, serviceTierAdvisorName: string, callback: ServiceCallback<models.ServiceTierAdvisor>): void;
    get(resourceGroupName: string, serverName: string, databaseName: string, serviceTierAdvisorName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceTierAdvisor>): void;


    /**
     * Returns service tier advisors for specified database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceTierAdvisorListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDatabaseWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceTierAdvisorListResult>>;

    /**
     * Returns service tier advisors for specified database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceTierAdvisorListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceTierAdvisorListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceTierAdvisorListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceTierAdvisorListResult>;
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.ServiceTierAdvisorListResult>): void;
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceTierAdvisorListResult>): void;
}

/**
 * @class
 * TransparentDataEncryptions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface TransparentDataEncryptions {


    /**
     * Creates or updates a database's transparent data encryption configuration.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which setting the
     * transparent data encryption applies.
     *
     * @param {object} parameters The required parameters for creating or updating
     * transparent data encryption.
     *
     * @param {string} [parameters.status] The status of the database transparent
     * data encryption. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TransparentDataEncryption>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.TransparentDataEncryption, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TransparentDataEncryption>>;

    /**
     * Creates or updates a database's transparent data encryption configuration.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which setting the
     * transparent data encryption applies.
     *
     * @param {object} parameters The required parameters for creating or updating
     * transparent data encryption.
     *
     * @param {string} [parameters.status] The status of the database transparent
     * data encryption. Possible values include: 'Enabled', 'Disabled'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TransparentDataEncryption} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TransparentDataEncryption} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TransparentDataEncryption} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.TransparentDataEncryption, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TransparentDataEncryption>;
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.TransparentDataEncryption, callback: ServiceCallback<models.TransparentDataEncryption>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.TransparentDataEncryption, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TransparentDataEncryption>): void;


    /**
     * Gets a database's transparent data encryption configuration.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which the
     * transparent data encryption applies.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TransparentDataEncryption>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TransparentDataEncryption>>;

    /**
     * Gets a database's transparent data encryption configuration.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which the
     * transparent data encryption applies.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TransparentDataEncryption} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TransparentDataEncryption} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TransparentDataEncryption} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TransparentDataEncryption>;
    get(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.TransparentDataEncryption>): void;
    get(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TransparentDataEncryption>): void;
}

/**
 * @class
 * TransparentDataEncryptionActivities
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface TransparentDataEncryptionActivities {


    /**
     * Returns a database's transparent data encryption operation result.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which the
     * transparent data encryption applies.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TransparentDataEncryptionActivityListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByConfigurationWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TransparentDataEncryptionActivityListResult>>;

    /**
     * Returns a database's transparent data encryption operation result.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which the
     * transparent data encryption applies.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TransparentDataEncryptionActivityListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TransparentDataEncryptionActivityListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TransparentDataEncryptionActivityListResult}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByConfiguration(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TransparentDataEncryptionActivityListResult>;
    listByConfiguration(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.TransparentDataEncryptionActivityListResult>): void;
    listByConfiguration(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TransparentDataEncryptionActivityListResult>): void;
}

/**
 * @class
 * ServerUsages
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface ServerUsages {


    /**
     * Returns server usages.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerUsageListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerUsageListResult>>;

    /**
     * Returns server usages.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerUsageListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerUsageListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerUsageListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerUsageListResult>;
    listByServer(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.ServerUsageListResult>): void;
    listByServer(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerUsageListResult>): void;
}

/**
 * @class
 * DatabaseUsages
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface DatabaseUsages {


    /**
     * Returns database usages.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseUsageListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDatabaseWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseUsageListResult>>;

    /**
     * Returns database usages.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseUsageListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseUsageListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseUsageListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseUsageListResult>;
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.DatabaseUsageListResult>): void;
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseUsageListResult>): void;
}

/**
 * @class
 * DatabaseAutomaticTuningOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface DatabaseAutomaticTuningOperations {


    /**
     * Gets a database's automatic tuning.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseAutomaticTuning>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseAutomaticTuning>>;

    /**
     * Gets a database's automatic tuning.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseAutomaticTuning} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseAutomaticTuning} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseAutomaticTuning} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseAutomaticTuning>;
    get(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.DatabaseAutomaticTuning>): void;
    get(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseAutomaticTuning>): void;


    /**
     * Update automatic tuning properties for target database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The requested automatic tuning resource state.
     *
     * @param {string} [parameters.desiredState] Automatic tuning desired state.
     * Possible values include: 'Inherit', 'Custom', 'Auto', 'Unspecified'
     *
     * @param {object} [parameters.options] Automatic tuning options definition.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseAutomaticTuning>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DatabaseAutomaticTuning, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseAutomaticTuning>>;

    /**
     * Update automatic tuning properties for target database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The requested automatic tuning resource state.
     *
     * @param {string} [parameters.desiredState] Automatic tuning desired state.
     * Possible values include: 'Inherit', 'Custom', 'Auto', 'Unspecified'
     *
     * @param {object} [parameters.options] Automatic tuning options definition.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseAutomaticTuning} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseAutomaticTuning} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseAutomaticTuning} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DatabaseAutomaticTuning, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseAutomaticTuning>;
    update(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DatabaseAutomaticTuning, callback: ServiceCallback<models.DatabaseAutomaticTuning>): void;
    update(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DatabaseAutomaticTuning, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseAutomaticTuning>): void;
}

/**
 * @class
 * EncryptionProtectors
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface EncryptionProtectors {


    /**
     * Gets a list of server encryption protectors
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EncryptionProtectorListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EncryptionProtectorListResult>>;

    /**
     * Gets a list of server encryption protectors
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EncryptionProtectorListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EncryptionProtectorListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EncryptionProtectorListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EncryptionProtectorListResult>;
    listByServer(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.EncryptionProtectorListResult>): void;
    listByServer(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EncryptionProtectorListResult>): void;


    /**
     * Gets a server encryption protector.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EncryptionProtector>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EncryptionProtector>>;

    /**
     * Gets a server encryption protector.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EncryptionProtector} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EncryptionProtector} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EncryptionProtector} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EncryptionProtector>;
    get(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.EncryptionProtector>): void;
    get(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EncryptionProtector>): void;


    /**
     * Updates an existing encryption protector.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The requested encryption protector resource
     * state.
     *
     * @param {string} [parameters.kind] Kind of encryption protector. This is
     * metadata used for the Azure portal experience.
     *
     * @param {string} [parameters.serverKeyName] The name of the server key.
     *
     * @param {string} parameters.serverKeyType The encryption protector type like
     * 'ServiceManaged', 'AzureKeyVault'. Possible values include:
     * 'ServiceManaged', 'AzureKeyVault'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EncryptionProtector>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, parameters: models.EncryptionProtector, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EncryptionProtector>>;

    /**
     * Updates an existing encryption protector.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The requested encryption protector resource
     * state.
     *
     * @param {string} [parameters.kind] Kind of encryption protector. This is
     * metadata used for the Azure portal experience.
     *
     * @param {string} [parameters.serverKeyName] The name of the server key.
     *
     * @param {string} parameters.serverKeyType The encryption protector type like
     * 'ServiceManaged', 'AzureKeyVault'. Possible values include:
     * 'ServiceManaged', 'AzureKeyVault'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EncryptionProtector} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EncryptionProtector} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EncryptionProtector} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, parameters: models.EncryptionProtector, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EncryptionProtector>;
    createOrUpdate(resourceGroupName: string, serverName: string, parameters: models.EncryptionProtector, callback: ServiceCallback<models.EncryptionProtector>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, parameters: models.EncryptionProtector, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EncryptionProtector>): void;


    /**
     * Updates an existing encryption protector.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The requested encryption protector resource
     * state.
     *
     * @param {string} [parameters.kind] Kind of encryption protector. This is
     * metadata used for the Azure portal experience.
     *
     * @param {string} [parameters.serverKeyName] The name of the server key.
     *
     * @param {string} parameters.serverKeyType The encryption protector type like
     * 'ServiceManaged', 'AzureKeyVault'. Possible values include:
     * 'ServiceManaged', 'AzureKeyVault'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EncryptionProtector>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, parameters: models.EncryptionProtector, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EncryptionProtector>>;

    /**
     * Updates an existing encryption protector.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The requested encryption protector resource
     * state.
     *
     * @param {string} [parameters.kind] Kind of encryption protector. This is
     * metadata used for the Azure portal experience.
     *
     * @param {string} [parameters.serverKeyName] The name of the server key.
     *
     * @param {string} parameters.serverKeyType The encryption protector type like
     * 'ServiceManaged', 'AzureKeyVault'. Possible values include:
     * 'ServiceManaged', 'AzureKeyVault'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EncryptionProtector} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EncryptionProtector} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EncryptionProtector} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, parameters: models.EncryptionProtector, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EncryptionProtector>;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, parameters: models.EncryptionProtector, callback: ServiceCallback<models.EncryptionProtector>): void;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, parameters: models.EncryptionProtector, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EncryptionProtector>): void;


    /**
     * Gets a list of server encryption protectors
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EncryptionProtectorListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EncryptionProtectorListResult>>;

    /**
     * Gets a list of server encryption protectors
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EncryptionProtectorListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EncryptionProtectorListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EncryptionProtectorListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServerNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EncryptionProtectorListResult>;
    listByServerNext(nextPageLink: string, callback: ServiceCallback<models.EncryptionProtectorListResult>): void;
    listByServerNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EncryptionProtectorListResult>): void;
}

/**
 * @class
 * FailoverGroups
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface FailoverGroups {


    /**
     * Gets a failover group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server containing the failover
     * group.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FailoverGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, failoverGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FailoverGroup>>;

    /**
     * Gets a failover group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server containing the failover
     * group.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FailoverGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FailoverGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FailoverGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, failoverGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FailoverGroup>;
    get(resourceGroupName: string, serverName: string, failoverGroupName: string, callback: ServiceCallback<models.FailoverGroup>): void;
    get(resourceGroupName: string, serverName: string, failoverGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FailoverGroup>): void;


    /**
     * Creates or updates a failover group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server containing the failover
     * group.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} parameters The failover group parameters.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} parameters.readWriteEndpoint Read-write endpoint of the
     * failover group instance.
     *
     * @param {string} parameters.readWriteEndpoint.failoverPolicy Failover policy
     * of the read-write endpoint for the failover group. If failoverPolicy is
     * Automatic then failoverWithDataLossGracePeriodMinutes is required. Possible
     * values include: 'Manual', 'Automatic'
     *
     * @param {number}
     * [parameters.readWriteEndpoint.failoverWithDataLossGracePeriodMinutes] Grace
     * period before failover with data loss is attempted for the read-write
     * endpoint. If failoverPolicy is Automatic then
     * failoverWithDataLossGracePeriodMinutes is required.
     *
     * @param {object} [parameters.readOnlyEndpoint] Read-only endpoint of the
     * failover group instance.
     *
     * @param {string} [parameters.readOnlyEndpoint.failoverPolicy] Failover policy
     * of the read-only endpoint for the failover group. Possible values include:
     * 'Disabled', 'Enabled'
     *
     * @param {array} parameters.partnerServers List of partner server information
     * for the failover group.
     *
     * @param {array} [parameters.databases] List of databases in the failover
     * group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FailoverGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, failoverGroupName: string, parameters: models.FailoverGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FailoverGroup>>;

    /**
     * Creates or updates a failover group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server containing the failover
     * group.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} parameters The failover group parameters.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} parameters.readWriteEndpoint Read-write endpoint of the
     * failover group instance.
     *
     * @param {string} parameters.readWriteEndpoint.failoverPolicy Failover policy
     * of the read-write endpoint for the failover group. If failoverPolicy is
     * Automatic then failoverWithDataLossGracePeriodMinutes is required. Possible
     * values include: 'Manual', 'Automatic'
     *
     * @param {number}
     * [parameters.readWriteEndpoint.failoverWithDataLossGracePeriodMinutes] Grace
     * period before failover with data loss is attempted for the read-write
     * endpoint. If failoverPolicy is Automatic then
     * failoverWithDataLossGracePeriodMinutes is required.
     *
     * @param {object} [parameters.readOnlyEndpoint] Read-only endpoint of the
     * failover group instance.
     *
     * @param {string} [parameters.readOnlyEndpoint.failoverPolicy] Failover policy
     * of the read-only endpoint for the failover group. Possible values include:
     * 'Disabled', 'Enabled'
     *
     * @param {array} parameters.partnerServers List of partner server information
     * for the failover group.
     *
     * @param {array} [parameters.databases] List of databases in the failover
     * group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FailoverGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FailoverGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FailoverGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, failoverGroupName: string, parameters: models.FailoverGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FailoverGroup>;
    createOrUpdate(resourceGroupName: string, serverName: string, failoverGroupName: string, parameters: models.FailoverGroup, callback: ServiceCallback<models.FailoverGroup>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, failoverGroupName: string, parameters: models.FailoverGroup, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FailoverGroup>): void;


    /**
     * Deletes a failover group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server containing the failover
     * group.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, failoverGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a failover group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server containing the failover
     * group.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serverName: string, failoverGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serverName: string, failoverGroupName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serverName: string, failoverGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a failover group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server containing the failover
     * group.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} parameters The failover group parameters.
     *
     * @param {object} [parameters.readWriteEndpoint] Read-write endpoint of the
     * failover group instance.
     *
     * @param {string} parameters.readWriteEndpoint.failoverPolicy Failover policy
     * of the read-write endpoint for the failover group. If failoverPolicy is
     * Automatic then failoverWithDataLossGracePeriodMinutes is required. Possible
     * values include: 'Manual', 'Automatic'
     *
     * @param {number}
     * [parameters.readWriteEndpoint.failoverWithDataLossGracePeriodMinutes] Grace
     * period before failover with data loss is attempted for the read-write
     * endpoint. If failoverPolicy is Automatic then
     * failoverWithDataLossGracePeriodMinutes is required.
     *
     * @param {object} [parameters.readOnlyEndpoint] Read-only endpoint of the
     * failover group instance.
     *
     * @param {string} [parameters.readOnlyEndpoint.failoverPolicy] Failover policy
     * of the read-only endpoint for the failover group. Possible values include:
     * 'Disabled', 'Enabled'
     *
     * @param {array} [parameters.databases] List of databases in the failover
     * group.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FailoverGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serverName: string, failoverGroupName: string, parameters: models.FailoverGroupUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FailoverGroup>>;

    /**
     * Updates a failover group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server containing the failover
     * group.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} parameters The failover group parameters.
     *
     * @param {object} [parameters.readWriteEndpoint] Read-write endpoint of the
     * failover group instance.
     *
     * @param {string} parameters.readWriteEndpoint.failoverPolicy Failover policy
     * of the read-write endpoint for the failover group. If failoverPolicy is
     * Automatic then failoverWithDataLossGracePeriodMinutes is required. Possible
     * values include: 'Manual', 'Automatic'
     *
     * @param {number}
     * [parameters.readWriteEndpoint.failoverWithDataLossGracePeriodMinutes] Grace
     * period before failover with data loss is attempted for the read-write
     * endpoint. If failoverPolicy is Automatic then
     * failoverWithDataLossGracePeriodMinutes is required.
     *
     * @param {object} [parameters.readOnlyEndpoint] Read-only endpoint of the
     * failover group instance.
     *
     * @param {string} [parameters.readOnlyEndpoint.failoverPolicy] Failover policy
     * of the read-only endpoint for the failover group. Possible values include:
     * 'Disabled', 'Enabled'
     *
     * @param {array} [parameters.databases] List of databases in the failover
     * group.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FailoverGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FailoverGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FailoverGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serverName: string, failoverGroupName: string, parameters: models.FailoverGroupUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FailoverGroup>;
    update(resourceGroupName: string, serverName: string, failoverGroupName: string, parameters: models.FailoverGroupUpdate, callback: ServiceCallback<models.FailoverGroup>): void;
    update(resourceGroupName: string, serverName: string, failoverGroupName: string, parameters: models.FailoverGroupUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FailoverGroup>): void;


    /**
     * Lists the failover groups in a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server containing the failover
     * group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FailoverGroupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FailoverGroupListResult>>;

    /**
     * Lists the failover groups in a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server containing the failover
     * group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FailoverGroupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FailoverGroupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FailoverGroupListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FailoverGroupListResult>;
    listByServer(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.FailoverGroupListResult>): void;
    listByServer(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FailoverGroupListResult>): void;


    /**
     * Fails over from the current primary server to this server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server containing the failover
     * group.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FailoverGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    failoverWithHttpOperationResponse(resourceGroupName: string, serverName: string, failoverGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FailoverGroup>>;

    /**
     * Fails over from the current primary server to this server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server containing the failover
     * group.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FailoverGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FailoverGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FailoverGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    failover(resourceGroupName: string, serverName: string, failoverGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FailoverGroup>;
    failover(resourceGroupName: string, serverName: string, failoverGroupName: string, callback: ServiceCallback<models.FailoverGroup>): void;
    failover(resourceGroupName: string, serverName: string, failoverGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FailoverGroup>): void;


    /**
     * Fails over from the current primary server to this server. This operation
     * might result in data loss.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server containing the failover
     * group.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FailoverGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    forceFailoverAllowDataLossWithHttpOperationResponse(resourceGroupName: string, serverName: string, failoverGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FailoverGroup>>;

    /**
     * Fails over from the current primary server to this server. This operation
     * might result in data loss.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server containing the failover
     * group.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FailoverGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FailoverGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FailoverGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    forceFailoverAllowDataLoss(resourceGroupName: string, serverName: string, failoverGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FailoverGroup>;
    forceFailoverAllowDataLoss(resourceGroupName: string, serverName: string, failoverGroupName: string, callback: ServiceCallback<models.FailoverGroup>): void;
    forceFailoverAllowDataLoss(resourceGroupName: string, serverName: string, failoverGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FailoverGroup>): void;


    /**
     * Creates or updates a failover group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server containing the failover
     * group.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} parameters The failover group parameters.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} parameters.readWriteEndpoint Read-write endpoint of the
     * failover group instance.
     *
     * @param {string} parameters.readWriteEndpoint.failoverPolicy Failover policy
     * of the read-write endpoint for the failover group. If failoverPolicy is
     * Automatic then failoverWithDataLossGracePeriodMinutes is required. Possible
     * values include: 'Manual', 'Automatic'
     *
     * @param {number}
     * [parameters.readWriteEndpoint.failoverWithDataLossGracePeriodMinutes] Grace
     * period before failover with data loss is attempted for the read-write
     * endpoint. If failoverPolicy is Automatic then
     * failoverWithDataLossGracePeriodMinutes is required.
     *
     * @param {object} [parameters.readOnlyEndpoint] Read-only endpoint of the
     * failover group instance.
     *
     * @param {string} [parameters.readOnlyEndpoint.failoverPolicy] Failover policy
     * of the read-only endpoint for the failover group. Possible values include:
     * 'Disabled', 'Enabled'
     *
     * @param {array} parameters.partnerServers List of partner server information
     * for the failover group.
     *
     * @param {array} [parameters.databases] List of databases in the failover
     * group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FailoverGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, failoverGroupName: string, parameters: models.FailoverGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FailoverGroup>>;

    /**
     * Creates or updates a failover group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server containing the failover
     * group.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} parameters The failover group parameters.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} parameters.readWriteEndpoint Read-write endpoint of the
     * failover group instance.
     *
     * @param {string} parameters.readWriteEndpoint.failoverPolicy Failover policy
     * of the read-write endpoint for the failover group. If failoverPolicy is
     * Automatic then failoverWithDataLossGracePeriodMinutes is required. Possible
     * values include: 'Manual', 'Automatic'
     *
     * @param {number}
     * [parameters.readWriteEndpoint.failoverWithDataLossGracePeriodMinutes] Grace
     * period before failover with data loss is attempted for the read-write
     * endpoint. If failoverPolicy is Automatic then
     * failoverWithDataLossGracePeriodMinutes is required.
     *
     * @param {object} [parameters.readOnlyEndpoint] Read-only endpoint of the
     * failover group instance.
     *
     * @param {string} [parameters.readOnlyEndpoint.failoverPolicy] Failover policy
     * of the read-only endpoint for the failover group. Possible values include:
     * 'Disabled', 'Enabled'
     *
     * @param {array} parameters.partnerServers List of partner server information
     * for the failover group.
     *
     * @param {array} [parameters.databases] List of databases in the failover
     * group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FailoverGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FailoverGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FailoverGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, failoverGroupName: string, parameters: models.FailoverGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FailoverGroup>;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, failoverGroupName: string, parameters: models.FailoverGroup, callback: ServiceCallback<models.FailoverGroup>): void;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, failoverGroupName: string, parameters: models.FailoverGroup, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FailoverGroup>): void;


    /**
     * Deletes a failover group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server containing the failover
     * group.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, failoverGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a failover group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server containing the failover
     * group.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, serverName: string, failoverGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, serverName: string, failoverGroupName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, serverName: string, failoverGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a failover group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server containing the failover
     * group.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} parameters The failover group parameters.
     *
     * @param {object} [parameters.readWriteEndpoint] Read-write endpoint of the
     * failover group instance.
     *
     * @param {string} parameters.readWriteEndpoint.failoverPolicy Failover policy
     * of the read-write endpoint for the failover group. If failoverPolicy is
     * Automatic then failoverWithDataLossGracePeriodMinutes is required. Possible
     * values include: 'Manual', 'Automatic'
     *
     * @param {number}
     * [parameters.readWriteEndpoint.failoverWithDataLossGracePeriodMinutes] Grace
     * period before failover with data loss is attempted for the read-write
     * endpoint. If failoverPolicy is Automatic then
     * failoverWithDataLossGracePeriodMinutes is required.
     *
     * @param {object} [parameters.readOnlyEndpoint] Read-only endpoint of the
     * failover group instance.
     *
     * @param {string} [parameters.readOnlyEndpoint.failoverPolicy] Failover policy
     * of the read-only endpoint for the failover group. Possible values include:
     * 'Disabled', 'Enabled'
     *
     * @param {array} [parameters.databases] List of databases in the failover
     * group.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FailoverGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, failoverGroupName: string, parameters: models.FailoverGroupUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FailoverGroup>>;

    /**
     * Updates a failover group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server containing the failover
     * group.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} parameters The failover group parameters.
     *
     * @param {object} [parameters.readWriteEndpoint] Read-write endpoint of the
     * failover group instance.
     *
     * @param {string} parameters.readWriteEndpoint.failoverPolicy Failover policy
     * of the read-write endpoint for the failover group. If failoverPolicy is
     * Automatic then failoverWithDataLossGracePeriodMinutes is required. Possible
     * values include: 'Manual', 'Automatic'
     *
     * @param {number}
     * [parameters.readWriteEndpoint.failoverWithDataLossGracePeriodMinutes] Grace
     * period before failover with data loss is attempted for the read-write
     * endpoint. If failoverPolicy is Automatic then
     * failoverWithDataLossGracePeriodMinutes is required.
     *
     * @param {object} [parameters.readOnlyEndpoint] Read-only endpoint of the
     * failover group instance.
     *
     * @param {string} [parameters.readOnlyEndpoint.failoverPolicy] Failover policy
     * of the read-only endpoint for the failover group. Possible values include:
     * 'Disabled', 'Enabled'
     *
     * @param {array} [parameters.databases] List of databases in the failover
     * group.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FailoverGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FailoverGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FailoverGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, serverName: string, failoverGroupName: string, parameters: models.FailoverGroupUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FailoverGroup>;
    beginUpdate(resourceGroupName: string, serverName: string, failoverGroupName: string, parameters: models.FailoverGroupUpdate, callback: ServiceCallback<models.FailoverGroup>): void;
    beginUpdate(resourceGroupName: string, serverName: string, failoverGroupName: string, parameters: models.FailoverGroupUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FailoverGroup>): void;


    /**
     * Fails over from the current primary server to this server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server containing the failover
     * group.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FailoverGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginFailoverWithHttpOperationResponse(resourceGroupName: string, serverName: string, failoverGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FailoverGroup>>;

    /**
     * Fails over from the current primary server to this server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server containing the failover
     * group.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FailoverGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FailoverGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FailoverGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginFailover(resourceGroupName: string, serverName: string, failoverGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FailoverGroup>;
    beginFailover(resourceGroupName: string, serverName: string, failoverGroupName: string, callback: ServiceCallback<models.FailoverGroup>): void;
    beginFailover(resourceGroupName: string, serverName: string, failoverGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FailoverGroup>): void;


    /**
     * Fails over from the current primary server to this server. This operation
     * might result in data loss.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server containing the failover
     * group.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FailoverGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginForceFailoverAllowDataLossWithHttpOperationResponse(resourceGroupName: string, serverName: string, failoverGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FailoverGroup>>;

    /**
     * Fails over from the current primary server to this server. This operation
     * might result in data loss.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server containing the failover
     * group.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FailoverGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FailoverGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FailoverGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginForceFailoverAllowDataLoss(resourceGroupName: string, serverName: string, failoverGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FailoverGroup>;
    beginForceFailoverAllowDataLoss(resourceGroupName: string, serverName: string, failoverGroupName: string, callback: ServiceCallback<models.FailoverGroup>): void;
    beginForceFailoverAllowDataLoss(resourceGroupName: string, serverName: string, failoverGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FailoverGroup>): void;


    /**
     * Lists the failover groups in a server.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FailoverGroupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FailoverGroupListResult>>;

    /**
     * Lists the failover groups in a server.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FailoverGroupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FailoverGroupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FailoverGroupListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServerNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FailoverGroupListResult>;
    listByServerNext(nextPageLink: string, callback: ServiceCallback<models.FailoverGroupListResult>): void;
    listByServerNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FailoverGroupListResult>): void;
}

/**
 * @class
 * ManagedInstances
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface ManagedInstances {


    /**
     * Gets a list of all managed instances in the subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedInstanceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedInstanceListResult>>;

    /**
     * Gets a list of all managed instances in the subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedInstanceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedInstanceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedInstanceListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedInstanceListResult>;
    list(callback: ServiceCallback<models.ManagedInstanceListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedInstanceListResult>): void;


    /**
     * Gets a list of managed instances in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedInstanceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedInstanceListResult>>;

    /**
     * Gets a list of managed instances in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedInstanceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedInstanceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedInstanceListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedInstanceListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.ManagedInstanceListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedInstanceListResult>): void;


    /**
     * Gets a managed instance.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedInstance>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedInstance>>;

    /**
     * Gets a managed instance.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedInstance} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedInstance} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedInstance} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, managedInstanceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedInstance>;
    get(resourceGroupName: string, managedInstanceName: string, callback: ServiceCallback<models.ManagedInstance>): void;
    get(resourceGroupName: string, managedInstanceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedInstance>): void;


    /**
     * Creates or updates a managed instance.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} parameters The requested managed instance resource state.
     *
     * @param {object} [parameters.identity] The Azure Active Directory identity of
     * the managed instance.
     *
     * @param {string} [parameters.identity.type] The identity type. Set this to
     * 'SystemAssigned' in order to automatically create and assign an Azure Active
     * Directory principal for the resource. Possible values include:
     * 'SystemAssigned'
     *
     * @param {object} [parameters.sku] Managed instance sku
     *
     * @param {string} parameters.sku.name The name of the SKU. Ex - P3. It is
     * typically a letter+number code
     *
     * @param {string} [parameters.sku.tier] This field is required to be
     * implemented by the Resource Provider if the service has more than one tier,
     * but is not required on a PUT.
     *
     * @param {string} [parameters.sku.size] The SKU size. When the name field is
     * the combination of tier and some other value, this would be the standalone
     * code.
     *
     * @param {string} [parameters.sku.family] If the service has different
     * generations of hardware, for the same SKU, then that can be captured here.
     *
     * @param {number} [parameters.sku.capacity] If the SKU supports scale out/in
     * then the capacity integer should be included. If scale out/in is not
     * possible for the resource this may be omitted.
     *
     * @param {string} [parameters.administratorLogin] Administrator username for
     * the managed instance. Can only be specified when the managed instance is
     * being created (and is required for creation).
     *
     * @param {string} [parameters.administratorLoginPassword] The administrator
     * login password (required for managed instance creation).
     *
     * @param {string} [parameters.subnetId] Subnet resource ID for the managed
     * instance.
     *
     * @param {string} [parameters.licenseType] The license type. Possible values
     * are 'LicenseIncluded' and 'BasePrice'.
     *
     * @param {number} [parameters.vCores] The number of VCores.
     *
     * @param {number} [parameters.storageSizeInGB] The maximum storage size in GB.
     *
     * @param {string} [parameters.collation] Collation of the managed instance.
     *
     * @param {string} [parameters.dnsZonePartner] The resource id of another
     * managed instance whose DNS zone this managed instance will share after
     * creation.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedInstance>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedInstance, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedInstance>>;

    /**
     * Creates or updates a managed instance.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} parameters The requested managed instance resource state.
     *
     * @param {object} [parameters.identity] The Azure Active Directory identity of
     * the managed instance.
     *
     * @param {string} [parameters.identity.type] The identity type. Set this to
     * 'SystemAssigned' in order to automatically create and assign an Azure Active
     * Directory principal for the resource. Possible values include:
     * 'SystemAssigned'
     *
     * @param {object} [parameters.sku] Managed instance sku
     *
     * @param {string} parameters.sku.name The name of the SKU. Ex - P3. It is
     * typically a letter+number code
     *
     * @param {string} [parameters.sku.tier] This field is required to be
     * implemented by the Resource Provider if the service has more than one tier,
     * but is not required on a PUT.
     *
     * @param {string} [parameters.sku.size] The SKU size. When the name field is
     * the combination of tier and some other value, this would be the standalone
     * code.
     *
     * @param {string} [parameters.sku.family] If the service has different
     * generations of hardware, for the same SKU, then that can be captured here.
     *
     * @param {number} [parameters.sku.capacity] If the SKU supports scale out/in
     * then the capacity integer should be included. If scale out/in is not
     * possible for the resource this may be omitted.
     *
     * @param {string} [parameters.administratorLogin] Administrator username for
     * the managed instance. Can only be specified when the managed instance is
     * being created (and is required for creation).
     *
     * @param {string} [parameters.administratorLoginPassword] The administrator
     * login password (required for managed instance creation).
     *
     * @param {string} [parameters.subnetId] Subnet resource ID for the managed
     * instance.
     *
     * @param {string} [parameters.licenseType] The license type. Possible values
     * are 'LicenseIncluded' and 'BasePrice'.
     *
     * @param {number} [parameters.vCores] The number of VCores.
     *
     * @param {number} [parameters.storageSizeInGB] The maximum storage size in GB.
     *
     * @param {string} [parameters.collation] Collation of the managed instance.
     *
     * @param {string} [parameters.dnsZonePartner] The resource id of another
     * managed instance whose DNS zone this managed instance will share after
     * creation.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedInstance} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedInstance} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedInstance} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedInstance, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedInstance>;
    createOrUpdate(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedInstance, callback: ServiceCallback<models.ManagedInstance>): void;
    createOrUpdate(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedInstance, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedInstance>): void;


    /**
     * Deletes a managed instance.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a managed instance.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, managedInstanceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, managedInstanceName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, managedInstanceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a managed instance.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} parameters The requested managed instance resource state.
     *
     * @param {object} [parameters.sku] Managed instance sku
     *
     * @param {string} parameters.sku.name The name of the SKU. Ex - P3. It is
     * typically a letter+number code
     *
     * @param {string} [parameters.sku.tier] This field is required to be
     * implemented by the Resource Provider if the service has more than one tier,
     * but is not required on a PUT.
     *
     * @param {string} [parameters.sku.size] The SKU size. When the name field is
     * the combination of tier and some other value, this would be the standalone
     * code.
     *
     * @param {string} [parameters.sku.family] If the service has different
     * generations of hardware, for the same SKU, then that can be captured here.
     *
     * @param {number} [parameters.sku.capacity] If the SKU supports scale out/in
     * then the capacity integer should be included. If scale out/in is not
     * possible for the resource this may be omitted.
     *
     * @param {string} [parameters.administratorLogin] Administrator username for
     * the managed instance. Can only be specified when the managed instance is
     * being created (and is required for creation).
     *
     * @param {string} [parameters.administratorLoginPassword] The administrator
     * login password (required for managed instance creation).
     *
     * @param {string} [parameters.subnetId] Subnet resource ID for the managed
     * instance.
     *
     * @param {string} [parameters.licenseType] The license type. Possible values
     * are 'LicenseIncluded' and 'BasePrice'.
     *
     * @param {number} [parameters.vCores] The number of VCores.
     *
     * @param {number} [parameters.storageSizeInGB] The maximum storage size in GB.
     *
     * @param {string} [parameters.collation] Collation of the managed instance.
     *
     * @param {string} [parameters.dnsZonePartner] The resource id of another
     * managed instance whose DNS zone this managed instance will share after
     * creation.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedInstance>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedInstanceUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedInstance>>;

    /**
     * Updates a managed instance.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} parameters The requested managed instance resource state.
     *
     * @param {object} [parameters.sku] Managed instance sku
     *
     * @param {string} parameters.sku.name The name of the SKU. Ex - P3. It is
     * typically a letter+number code
     *
     * @param {string} [parameters.sku.tier] This field is required to be
     * implemented by the Resource Provider if the service has more than one tier,
     * but is not required on a PUT.
     *
     * @param {string} [parameters.sku.size] The SKU size. When the name field is
     * the combination of tier and some other value, this would be the standalone
     * code.
     *
     * @param {string} [parameters.sku.family] If the service has different
     * generations of hardware, for the same SKU, then that can be captured here.
     *
     * @param {number} [parameters.sku.capacity] If the SKU supports scale out/in
     * then the capacity integer should be included. If scale out/in is not
     * possible for the resource this may be omitted.
     *
     * @param {string} [parameters.administratorLogin] Administrator username for
     * the managed instance. Can only be specified when the managed instance is
     * being created (and is required for creation).
     *
     * @param {string} [parameters.administratorLoginPassword] The administrator
     * login password (required for managed instance creation).
     *
     * @param {string} [parameters.subnetId] Subnet resource ID for the managed
     * instance.
     *
     * @param {string} [parameters.licenseType] The license type. Possible values
     * are 'LicenseIncluded' and 'BasePrice'.
     *
     * @param {number} [parameters.vCores] The number of VCores.
     *
     * @param {number} [parameters.storageSizeInGB] The maximum storage size in GB.
     *
     * @param {string} [parameters.collation] Collation of the managed instance.
     *
     * @param {string} [parameters.dnsZonePartner] The resource id of another
     * managed instance whose DNS zone this managed instance will share after
     * creation.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedInstance} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedInstance} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedInstance} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedInstanceUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedInstance>;
    update(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedInstanceUpdate, callback: ServiceCallback<models.ManagedInstance>): void;
    update(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedInstanceUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedInstance>): void;


    /**
     * Creates or updates a managed instance.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} parameters The requested managed instance resource state.
     *
     * @param {object} [parameters.identity] The Azure Active Directory identity of
     * the managed instance.
     *
     * @param {string} [parameters.identity.type] The identity type. Set this to
     * 'SystemAssigned' in order to automatically create and assign an Azure Active
     * Directory principal for the resource. Possible values include:
     * 'SystemAssigned'
     *
     * @param {object} [parameters.sku] Managed instance sku
     *
     * @param {string} parameters.sku.name The name of the SKU. Ex - P3. It is
     * typically a letter+number code
     *
     * @param {string} [parameters.sku.tier] This field is required to be
     * implemented by the Resource Provider if the service has more than one tier,
     * but is not required on a PUT.
     *
     * @param {string} [parameters.sku.size] The SKU size. When the name field is
     * the combination of tier and some other value, this would be the standalone
     * code.
     *
     * @param {string} [parameters.sku.family] If the service has different
     * generations of hardware, for the same SKU, then that can be captured here.
     *
     * @param {number} [parameters.sku.capacity] If the SKU supports scale out/in
     * then the capacity integer should be included. If scale out/in is not
     * possible for the resource this may be omitted.
     *
     * @param {string} [parameters.administratorLogin] Administrator username for
     * the managed instance. Can only be specified when the managed instance is
     * being created (and is required for creation).
     *
     * @param {string} [parameters.administratorLoginPassword] The administrator
     * login password (required for managed instance creation).
     *
     * @param {string} [parameters.subnetId] Subnet resource ID for the managed
     * instance.
     *
     * @param {string} [parameters.licenseType] The license type. Possible values
     * are 'LicenseIncluded' and 'BasePrice'.
     *
     * @param {number} [parameters.vCores] The number of VCores.
     *
     * @param {number} [parameters.storageSizeInGB] The maximum storage size in GB.
     *
     * @param {string} [parameters.collation] Collation of the managed instance.
     *
     * @param {string} [parameters.dnsZonePartner] The resource id of another
     * managed instance whose DNS zone this managed instance will share after
     * creation.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedInstance>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedInstance, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedInstance>>;

    /**
     * Creates or updates a managed instance.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} parameters The requested managed instance resource state.
     *
     * @param {object} [parameters.identity] The Azure Active Directory identity of
     * the managed instance.
     *
     * @param {string} [parameters.identity.type] The identity type. Set this to
     * 'SystemAssigned' in order to automatically create and assign an Azure Active
     * Directory principal for the resource. Possible values include:
     * 'SystemAssigned'
     *
     * @param {object} [parameters.sku] Managed instance sku
     *
     * @param {string} parameters.sku.name The name of the SKU. Ex - P3. It is
     * typically a letter+number code
     *
     * @param {string} [parameters.sku.tier] This field is required to be
     * implemented by the Resource Provider if the service has more than one tier,
     * but is not required on a PUT.
     *
     * @param {string} [parameters.sku.size] The SKU size. When the name field is
     * the combination of tier and some other value, this would be the standalone
     * code.
     *
     * @param {string} [parameters.sku.family] If the service has different
     * generations of hardware, for the same SKU, then that can be captured here.
     *
     * @param {number} [parameters.sku.capacity] If the SKU supports scale out/in
     * then the capacity integer should be included. If scale out/in is not
     * possible for the resource this may be omitted.
     *
     * @param {string} [parameters.administratorLogin] Administrator username for
     * the managed instance. Can only be specified when the managed instance is
     * being created (and is required for creation).
     *
     * @param {string} [parameters.administratorLoginPassword] The administrator
     * login password (required for managed instance creation).
     *
     * @param {string} [parameters.subnetId] Subnet resource ID for the managed
     * instance.
     *
     * @param {string} [parameters.licenseType] The license type. Possible values
     * are 'LicenseIncluded' and 'BasePrice'.
     *
     * @param {number} [parameters.vCores] The number of VCores.
     *
     * @param {number} [parameters.storageSizeInGB] The maximum storage size in GB.
     *
     * @param {string} [parameters.collation] Collation of the managed instance.
     *
     * @param {string} [parameters.dnsZonePartner] The resource id of another
     * managed instance whose DNS zone this managed instance will share after
     * creation.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedInstance} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedInstance} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedInstance} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedInstance, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedInstance>;
    beginCreateOrUpdate(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedInstance, callback: ServiceCallback<models.ManagedInstance>): void;
    beginCreateOrUpdate(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedInstance, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedInstance>): void;


    /**
     * Deletes a managed instance.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a managed instance.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, managedInstanceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, managedInstanceName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, managedInstanceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a managed instance.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} parameters The requested managed instance resource state.
     *
     * @param {object} [parameters.sku] Managed instance sku
     *
     * @param {string} parameters.sku.name The name of the SKU. Ex - P3. It is
     * typically a letter+number code
     *
     * @param {string} [parameters.sku.tier] This field is required to be
     * implemented by the Resource Provider if the service has more than one tier,
     * but is not required on a PUT.
     *
     * @param {string} [parameters.sku.size] The SKU size. When the name field is
     * the combination of tier and some other value, this would be the standalone
     * code.
     *
     * @param {string} [parameters.sku.family] If the service has different
     * generations of hardware, for the same SKU, then that can be captured here.
     *
     * @param {number} [parameters.sku.capacity] If the SKU supports scale out/in
     * then the capacity integer should be included. If scale out/in is not
     * possible for the resource this may be omitted.
     *
     * @param {string} [parameters.administratorLogin] Administrator username for
     * the managed instance. Can only be specified when the managed instance is
     * being created (and is required for creation).
     *
     * @param {string} [parameters.administratorLoginPassword] The administrator
     * login password (required for managed instance creation).
     *
     * @param {string} [parameters.subnetId] Subnet resource ID for the managed
     * instance.
     *
     * @param {string} [parameters.licenseType] The license type. Possible values
     * are 'LicenseIncluded' and 'BasePrice'.
     *
     * @param {number} [parameters.vCores] The number of VCores.
     *
     * @param {number} [parameters.storageSizeInGB] The maximum storage size in GB.
     *
     * @param {string} [parameters.collation] Collation of the managed instance.
     *
     * @param {string} [parameters.dnsZonePartner] The resource id of another
     * managed instance whose DNS zone this managed instance will share after
     * creation.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedInstance>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedInstanceUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedInstance>>;

    /**
     * Updates a managed instance.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} parameters The requested managed instance resource state.
     *
     * @param {object} [parameters.sku] Managed instance sku
     *
     * @param {string} parameters.sku.name The name of the SKU. Ex - P3. It is
     * typically a letter+number code
     *
     * @param {string} [parameters.sku.tier] This field is required to be
     * implemented by the Resource Provider if the service has more than one tier,
     * but is not required on a PUT.
     *
     * @param {string} [parameters.sku.size] The SKU size. When the name field is
     * the combination of tier and some other value, this would be the standalone
     * code.
     *
     * @param {string} [parameters.sku.family] If the service has different
     * generations of hardware, for the same SKU, then that can be captured here.
     *
     * @param {number} [parameters.sku.capacity] If the SKU supports scale out/in
     * then the capacity integer should be included. If scale out/in is not
     * possible for the resource this may be omitted.
     *
     * @param {string} [parameters.administratorLogin] Administrator username for
     * the managed instance. Can only be specified when the managed instance is
     * being created (and is required for creation).
     *
     * @param {string} [parameters.administratorLoginPassword] The administrator
     * login password (required for managed instance creation).
     *
     * @param {string} [parameters.subnetId] Subnet resource ID for the managed
     * instance.
     *
     * @param {string} [parameters.licenseType] The license type. Possible values
     * are 'LicenseIncluded' and 'BasePrice'.
     *
     * @param {number} [parameters.vCores] The number of VCores.
     *
     * @param {number} [parameters.storageSizeInGB] The maximum storage size in GB.
     *
     * @param {string} [parameters.collation] Collation of the managed instance.
     *
     * @param {string} [parameters.dnsZonePartner] The resource id of another
     * managed instance whose DNS zone this managed instance will share after
     * creation.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedInstance} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedInstance} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedInstance} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedInstanceUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedInstance>;
    beginUpdate(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedInstanceUpdate, callback: ServiceCallback<models.ManagedInstance>): void;
    beginUpdate(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedInstanceUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedInstance>): void;


    /**
     * Gets a list of all managed instances in the subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedInstanceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedInstanceListResult>>;

    /**
     * Gets a list of all managed instances in the subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedInstanceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedInstanceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedInstanceListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedInstanceListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ManagedInstanceListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedInstanceListResult>): void;


    /**
     * Gets a list of managed instances in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedInstanceListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedInstanceListResult>>;

    /**
     * Gets a list of managed instances in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedInstanceListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedInstanceListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedInstanceListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedInstanceListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.ManagedInstanceListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedInstanceListResult>): void;
}

/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface Operations {


    /**
     * Lists all of the available SQL Rest API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available SQL Rest API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    list(callback: ServiceCallback<models.OperationListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;


    /**
     * Lists all of the available SQL Rest API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available SQL Rest API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.OperationListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;
}

/**
 * @class
 * ServerKeys
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface ServerKeys {


    /**
     * Gets a list of server keys.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerKeyListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerKeyListResult>>;

    /**
     * Gets a list of server keys.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerKeyListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerKeyListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerKeyListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerKeyListResult>;
    listByServer(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.ServerKeyListResult>): void;
    listByServer(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerKeyListResult>): void;


    /**
     * Gets a server key.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} keyName The name of the server key to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerKey>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, keyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerKey>>;

    /**
     * Gets a server key.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} keyName The name of the server key to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerKey} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerKey} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerKey} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, keyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerKey>;
    get(resourceGroupName: string, serverName: string, keyName: string, callback: ServiceCallback<models.ServerKey>): void;
    get(resourceGroupName: string, serverName: string, keyName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerKey>): void;


    /**
     * Creates or updates a server key.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} keyName The name of the server key to be operated on
     * (updated or created). The key name is required to be in the format of
     * 'vault_key_version'. For example, if the keyId is
     * https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901,
     * then the server key name should be formatted as:
     * YourVaultName_YourKeyName_01234567890123456789012345678901
     *
     * @param {object} parameters The requested server key resource state.
     *
     * @param {string} [parameters.kind] Kind of encryption protector. This is
     * metadata used for the Azure portal experience.
     *
     * @param {string} parameters.serverKeyType The server key type like
     * 'ServiceManaged', 'AzureKeyVault'. Possible values include:
     * 'ServiceManaged', 'AzureKeyVault'
     *
     * @param {string} [parameters.uri] The URI of the server key.
     *
     * @param {string} [parameters.thumbprint] Thumbprint of the server key.
     *
     * @param {date} [parameters.creationDate] The server key creation date.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerKey>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, keyName: string, parameters: models.ServerKey, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerKey>>;

    /**
     * Creates or updates a server key.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} keyName The name of the server key to be operated on
     * (updated or created). The key name is required to be in the format of
     * 'vault_key_version'. For example, if the keyId is
     * https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901,
     * then the server key name should be formatted as:
     * YourVaultName_YourKeyName_01234567890123456789012345678901
     *
     * @param {object} parameters The requested server key resource state.
     *
     * @param {string} [parameters.kind] Kind of encryption protector. This is
     * metadata used for the Azure portal experience.
     *
     * @param {string} parameters.serverKeyType The server key type like
     * 'ServiceManaged', 'AzureKeyVault'. Possible values include:
     * 'ServiceManaged', 'AzureKeyVault'
     *
     * @param {string} [parameters.uri] The URI of the server key.
     *
     * @param {string} [parameters.thumbprint] Thumbprint of the server key.
     *
     * @param {date} [parameters.creationDate] The server key creation date.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerKey} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerKey} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerKey} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, keyName: string, parameters: models.ServerKey, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerKey>;
    createOrUpdate(resourceGroupName: string, serverName: string, keyName: string, parameters: models.ServerKey, callback: ServiceCallback<models.ServerKey>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, keyName: string, parameters: models.ServerKey, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerKey>): void;


    /**
     * Deletes the server key with the given name.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} keyName The name of the server key to be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, keyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the server key with the given name.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} keyName The name of the server key to be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serverName: string, keyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serverName: string, keyName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serverName: string, keyName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates a server key.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} keyName The name of the server key to be operated on
     * (updated or created). The key name is required to be in the format of
     * 'vault_key_version'. For example, if the keyId is
     * https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901,
     * then the server key name should be formatted as:
     * YourVaultName_YourKeyName_01234567890123456789012345678901
     *
     * @param {object} parameters The requested server key resource state.
     *
     * @param {string} [parameters.kind] Kind of encryption protector. This is
     * metadata used for the Azure portal experience.
     *
     * @param {string} parameters.serverKeyType The server key type like
     * 'ServiceManaged', 'AzureKeyVault'. Possible values include:
     * 'ServiceManaged', 'AzureKeyVault'
     *
     * @param {string} [parameters.uri] The URI of the server key.
     *
     * @param {string} [parameters.thumbprint] Thumbprint of the server key.
     *
     * @param {date} [parameters.creationDate] The server key creation date.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerKey>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, keyName: string, parameters: models.ServerKey, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerKey>>;

    /**
     * Creates or updates a server key.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} keyName The name of the server key to be operated on
     * (updated or created). The key name is required to be in the format of
     * 'vault_key_version'. For example, if the keyId is
     * https://YourVaultName.vault.azure.net/keys/YourKeyName/01234567890123456789012345678901,
     * then the server key name should be formatted as:
     * YourVaultName_YourKeyName_01234567890123456789012345678901
     *
     * @param {object} parameters The requested server key resource state.
     *
     * @param {string} [parameters.kind] Kind of encryption protector. This is
     * metadata used for the Azure portal experience.
     *
     * @param {string} parameters.serverKeyType The server key type like
     * 'ServiceManaged', 'AzureKeyVault'. Possible values include:
     * 'ServiceManaged', 'AzureKeyVault'
     *
     * @param {string} [parameters.uri] The URI of the server key.
     *
     * @param {string} [parameters.thumbprint] Thumbprint of the server key.
     *
     * @param {date} [parameters.creationDate] The server key creation date.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerKey} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerKey} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerKey} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, keyName: string, parameters: models.ServerKey, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerKey>;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, keyName: string, parameters: models.ServerKey, callback: ServiceCallback<models.ServerKey>): void;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, keyName: string, parameters: models.ServerKey, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerKey>): void;


    /**
     * Deletes the server key with the given name.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} keyName The name of the server key to be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, keyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the server key with the given name.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} keyName The name of the server key to be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, serverName: string, keyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, serverName: string, keyName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, serverName: string, keyName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a list of server keys.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerKeyListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerKeyListResult>>;

    /**
     * Gets a list of server keys.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerKeyListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerKeyListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerKeyListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServerNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerKeyListResult>;
    listByServerNext(nextPageLink: string, callback: ServiceCallback<models.ServerKeyListResult>): void;
    listByServerNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerKeyListResult>): void;
}

/**
 * @class
 * SyncAgents
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface SyncAgents {


    /**
     * Gets a sync agent.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server on which the sync agent is
     * hosted.
     *
     * @param {string} syncAgentName The name of the sync agent.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SyncAgent>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, syncAgentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SyncAgent>>;

    /**
     * Gets a sync agent.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server on which the sync agent is
     * hosted.
     *
     * @param {string} syncAgentName The name of the sync agent.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SyncAgent} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SyncAgent} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SyncAgent} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, syncAgentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SyncAgent>;
    get(resourceGroupName: string, serverName: string, syncAgentName: string, callback: ServiceCallback<models.SyncAgent>): void;
    get(resourceGroupName: string, serverName: string, syncAgentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SyncAgent>): void;


    /**
     * Creates or updates a sync agent.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server on which the sync agent is
     * hosted.
     *
     * @param {string} syncAgentName The name of the sync agent.
     *
     * @param {object} parameters The requested sync agent resource state.
     *
     * @param {string} [parameters.syncDatabaseId] ARM resource id of the sync
     * database in the sync agent.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SyncAgent>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, syncAgentName: string, parameters: models.SyncAgent, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SyncAgent>>;

    /**
     * Creates or updates a sync agent.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server on which the sync agent is
     * hosted.
     *
     * @param {string} syncAgentName The name of the sync agent.
     *
     * @param {object} parameters The requested sync agent resource state.
     *
     * @param {string} [parameters.syncDatabaseId] ARM resource id of the sync
     * database in the sync agent.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SyncAgent} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SyncAgent} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SyncAgent} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, syncAgentName: string, parameters: models.SyncAgent, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SyncAgent>;
    createOrUpdate(resourceGroupName: string, serverName: string, syncAgentName: string, parameters: models.SyncAgent, callback: ServiceCallback<models.SyncAgent>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, syncAgentName: string, parameters: models.SyncAgent, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SyncAgent>): void;


    /**
     * Deletes a sync agent.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server on which the sync agent is
     * hosted.
     *
     * @param {string} syncAgentName The name of the sync agent.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, syncAgentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a sync agent.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server on which the sync agent is
     * hosted.
     *
     * @param {string} syncAgentName The name of the sync agent.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serverName: string, syncAgentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serverName: string, syncAgentName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serverName: string, syncAgentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists sync agents in a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server on which the sync agent is
     * hosted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SyncAgentListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SyncAgentListResult>>;

    /**
     * Lists sync agents in a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server on which the sync agent is
     * hosted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SyncAgentListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SyncAgentListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SyncAgentListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SyncAgentListResult>;
    listByServer(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.SyncAgentListResult>): void;
    listByServer(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SyncAgentListResult>): void;


    /**
     * Generates a sync agent key.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server on which the sync agent is
     * hosted.
     *
     * @param {string} syncAgentName The name of the sync agent.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SyncAgentKeyProperties>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    generateKeyWithHttpOperationResponse(resourceGroupName: string, serverName: string, syncAgentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SyncAgentKeyProperties>>;

    /**
     * Generates a sync agent key.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server on which the sync agent is
     * hosted.
     *
     * @param {string} syncAgentName The name of the sync agent.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SyncAgentKeyProperties} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SyncAgentKeyProperties} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SyncAgentKeyProperties} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    generateKey(resourceGroupName: string, serverName: string, syncAgentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SyncAgentKeyProperties>;
    generateKey(resourceGroupName: string, serverName: string, syncAgentName: string, callback: ServiceCallback<models.SyncAgentKeyProperties>): void;
    generateKey(resourceGroupName: string, serverName: string, syncAgentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SyncAgentKeyProperties>): void;


    /**
     * Lists databases linked to a sync agent.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server on which the sync agent is
     * hosted.
     *
     * @param {string} syncAgentName The name of the sync agent.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SyncAgentLinkedDatabaseListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listLinkedDatabasesWithHttpOperationResponse(resourceGroupName: string, serverName: string, syncAgentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SyncAgentLinkedDatabaseListResult>>;

    /**
     * Lists databases linked to a sync agent.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server on which the sync agent is
     * hosted.
     *
     * @param {string} syncAgentName The name of the sync agent.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SyncAgentLinkedDatabaseListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SyncAgentLinkedDatabaseListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SyncAgentLinkedDatabaseListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listLinkedDatabases(resourceGroupName: string, serverName: string, syncAgentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SyncAgentLinkedDatabaseListResult>;
    listLinkedDatabases(resourceGroupName: string, serverName: string, syncAgentName: string, callback: ServiceCallback<models.SyncAgentLinkedDatabaseListResult>): void;
    listLinkedDatabases(resourceGroupName: string, serverName: string, syncAgentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SyncAgentLinkedDatabaseListResult>): void;


    /**
     * Creates or updates a sync agent.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server on which the sync agent is
     * hosted.
     *
     * @param {string} syncAgentName The name of the sync agent.
     *
     * @param {object} parameters The requested sync agent resource state.
     *
     * @param {string} [parameters.syncDatabaseId] ARM resource id of the sync
     * database in the sync agent.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SyncAgent>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, syncAgentName: string, parameters: models.SyncAgent, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SyncAgent>>;

    /**
     * Creates or updates a sync agent.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server on which the sync agent is
     * hosted.
     *
     * @param {string} syncAgentName The name of the sync agent.
     *
     * @param {object} parameters The requested sync agent resource state.
     *
     * @param {string} [parameters.syncDatabaseId] ARM resource id of the sync
     * database in the sync agent.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SyncAgent} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SyncAgent} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SyncAgent} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, syncAgentName: string, parameters: models.SyncAgent, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SyncAgent>;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, syncAgentName: string, parameters: models.SyncAgent, callback: ServiceCallback<models.SyncAgent>): void;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, syncAgentName: string, parameters: models.SyncAgent, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SyncAgent>): void;


    /**
     * Deletes a sync agent.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server on which the sync agent is
     * hosted.
     *
     * @param {string} syncAgentName The name of the sync agent.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, syncAgentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a sync agent.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server on which the sync agent is
     * hosted.
     *
     * @param {string} syncAgentName The name of the sync agent.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, serverName: string, syncAgentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, serverName: string, syncAgentName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, serverName: string, syncAgentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists sync agents in a server.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SyncAgentListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SyncAgentListResult>>;

    /**
     * Lists sync agents in a server.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SyncAgentListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SyncAgentListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SyncAgentListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServerNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SyncAgentListResult>;
    listByServerNext(nextPageLink: string, callback: ServiceCallback<models.SyncAgentListResult>): void;
    listByServerNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SyncAgentListResult>): void;


    /**
     * Lists databases linked to a sync agent.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SyncAgentLinkedDatabaseListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listLinkedDatabasesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SyncAgentLinkedDatabaseListResult>>;

    /**
     * Lists databases linked to a sync agent.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SyncAgentLinkedDatabaseListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SyncAgentLinkedDatabaseListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SyncAgentLinkedDatabaseListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listLinkedDatabasesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SyncAgentLinkedDatabaseListResult>;
    listLinkedDatabasesNext(nextPageLink: string, callback: ServiceCallback<models.SyncAgentLinkedDatabaseListResult>): void;
    listLinkedDatabasesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SyncAgentLinkedDatabaseListResult>): void;
}

/**
 * @class
 * SyncGroups
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface SyncGroups {


    /**
     * Gets a collection of sync database ids.
     *
     * @param {string} locationName The name of the region where the resource is
     * located.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SyncDatabaseIdListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSyncDatabaseIdsWithHttpOperationResponse(locationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SyncDatabaseIdListResult>>;

    /**
     * Gets a collection of sync database ids.
     *
     * @param {string} locationName The name of the region where the resource is
     * located.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SyncDatabaseIdListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SyncDatabaseIdListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SyncDatabaseIdListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSyncDatabaseIds(locationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SyncDatabaseIdListResult>;
    listSyncDatabaseIds(locationName: string, callback: ServiceCallback<models.SyncDatabaseIdListResult>): void;
    listSyncDatabaseIds(locationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SyncDatabaseIdListResult>): void;


    /**
     * Refreshes a hub database schema.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    refreshHubSchemaWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Refreshes a hub database schema.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    refreshHubSchema(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    refreshHubSchema(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, callback: ServiceCallback<void>): void;
    refreshHubSchema(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a collection of hub database schemas.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SyncFullSchemaPropertiesListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listHubSchemasWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SyncFullSchemaPropertiesListResult>>;

    /**
     * Gets a collection of hub database schemas.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SyncFullSchemaPropertiesListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SyncFullSchemaPropertiesListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SyncFullSchemaPropertiesListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listHubSchemas(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SyncFullSchemaPropertiesListResult>;
    listHubSchemas(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, callback: ServiceCallback<models.SyncFullSchemaPropertiesListResult>): void;
    listHubSchemas(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SyncFullSchemaPropertiesListResult>): void;


    /**
     * Gets a collection of sync group logs.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group.
     *
     * @param {string} startTime Get logs generated after this time.
     *
     * @param {string} endTime Get logs generated before this time.
     *
     * @param {string} type The types of logs to retrieve. Possible values include:
     * 'All', 'Error', 'Warning', 'Success'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.continuationToken] The continuation token for this
     * operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SyncGroupLogListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listLogsWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, startTime: string, endTime: string, type: string, options?: { continuationToken? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SyncGroupLogListResult>>;

    /**
     * Gets a collection of sync group logs.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group.
     *
     * @param {string} startTime Get logs generated after this time.
     *
     * @param {string} endTime Get logs generated before this time.
     *
     * @param {string} type The types of logs to retrieve. Possible values include:
     * 'All', 'Error', 'Warning', 'Success'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.continuationToken] The continuation token for this
     * operation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SyncGroupLogListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SyncGroupLogListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SyncGroupLogListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listLogs(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, startTime: string, endTime: string, type: string, options?: { continuationToken? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.SyncGroupLogListResult>;
    listLogs(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, startTime: string, endTime: string, type: string, callback: ServiceCallback<models.SyncGroupLogListResult>): void;
    listLogs(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, startTime: string, endTime: string, type: string, options: { continuationToken? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SyncGroupLogListResult>): void;


    /**
     * Cancels a sync group synchronization.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    cancelSyncWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Cancels a sync group synchronization.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    cancelSync(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    cancelSync(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, callback: ServiceCallback<void>): void;
    cancelSync(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Triggers a sync group synchronization.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    triggerSyncWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Triggers a sync group synchronization.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    triggerSync(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    triggerSync(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, callback: ServiceCallback<void>): void;
    triggerSync(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a sync group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SyncGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SyncGroup>>;

    /**
     * Gets a sync group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SyncGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SyncGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SyncGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SyncGroup>;
    get(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, callback: ServiceCallback<models.SyncGroup>): void;
    get(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SyncGroup>): void;


    /**
     * Creates or updates a sync group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group.
     *
     * @param {object} parameters The requested sync group resource state.
     *
     * @param {number} [parameters.interval] Sync interval of the sync group.
     *
     * @param {string} [parameters.conflictResolutionPolicy] Conflict resolution
     * policy of the sync group. Possible values include: 'HubWin', 'MemberWin'
     *
     * @param {string} [parameters.syncDatabaseId] ARM resource id of the sync
     * database in the sync group.
     *
     * @param {string} [parameters.hubDatabaseUserName] User name for the sync
     * group hub database credential.
     *
     * @param {string} [parameters.hubDatabasePassword] Password for the sync group
     * hub database credential.
     *
     * @param {object} [parameters.schema] Sync schema of the sync group.
     *
     * @param {array} [parameters.schema.tables] List of tables in sync group
     * schema.
     *
     * @param {string} [parameters.schema.masterSyncMemberName] Name of master sync
     * member where the schema is from.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SyncGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, parameters: models.SyncGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SyncGroup>>;

    /**
     * Creates or updates a sync group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group.
     *
     * @param {object} parameters The requested sync group resource state.
     *
     * @param {number} [parameters.interval] Sync interval of the sync group.
     *
     * @param {string} [parameters.conflictResolutionPolicy] Conflict resolution
     * policy of the sync group. Possible values include: 'HubWin', 'MemberWin'
     *
     * @param {string} [parameters.syncDatabaseId] ARM resource id of the sync
     * database in the sync group.
     *
     * @param {string} [parameters.hubDatabaseUserName] User name for the sync
     * group hub database credential.
     *
     * @param {string} [parameters.hubDatabasePassword] Password for the sync group
     * hub database credential.
     *
     * @param {object} [parameters.schema] Sync schema of the sync group.
     *
     * @param {array} [parameters.schema.tables] List of tables in sync group
     * schema.
     *
     * @param {string} [parameters.schema.masterSyncMemberName] Name of master sync
     * member where the schema is from.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SyncGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SyncGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SyncGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, parameters: models.SyncGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SyncGroup>;
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, parameters: models.SyncGroup, callback: ServiceCallback<models.SyncGroup>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, parameters: models.SyncGroup, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SyncGroup>): void;


    /**
     * Deletes a sync group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a sync group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a sync group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group.
     *
     * @param {object} parameters The requested sync group resource state.
     *
     * @param {number} [parameters.interval] Sync interval of the sync group.
     *
     * @param {string} [parameters.conflictResolutionPolicy] Conflict resolution
     * policy of the sync group. Possible values include: 'HubWin', 'MemberWin'
     *
     * @param {string} [parameters.syncDatabaseId] ARM resource id of the sync
     * database in the sync group.
     *
     * @param {string} [parameters.hubDatabaseUserName] User name for the sync
     * group hub database credential.
     *
     * @param {string} [parameters.hubDatabasePassword] Password for the sync group
     * hub database credential.
     *
     * @param {object} [parameters.schema] Sync schema of the sync group.
     *
     * @param {array} [parameters.schema.tables] List of tables in sync group
     * schema.
     *
     * @param {string} [parameters.schema.masterSyncMemberName] Name of master sync
     * member where the schema is from.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SyncGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, parameters: models.SyncGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SyncGroup>>;

    /**
     * Updates a sync group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group.
     *
     * @param {object} parameters The requested sync group resource state.
     *
     * @param {number} [parameters.interval] Sync interval of the sync group.
     *
     * @param {string} [parameters.conflictResolutionPolicy] Conflict resolution
     * policy of the sync group. Possible values include: 'HubWin', 'MemberWin'
     *
     * @param {string} [parameters.syncDatabaseId] ARM resource id of the sync
     * database in the sync group.
     *
     * @param {string} [parameters.hubDatabaseUserName] User name for the sync
     * group hub database credential.
     *
     * @param {string} [parameters.hubDatabasePassword] Password for the sync group
     * hub database credential.
     *
     * @param {object} [parameters.schema] Sync schema of the sync group.
     *
     * @param {array} [parameters.schema.tables] List of tables in sync group
     * schema.
     *
     * @param {string} [parameters.schema.masterSyncMemberName] Name of master sync
     * member where the schema is from.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SyncGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SyncGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SyncGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, parameters: models.SyncGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SyncGroup>;
    update(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, parameters: models.SyncGroup, callback: ServiceCallback<models.SyncGroup>): void;
    update(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, parameters: models.SyncGroup, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SyncGroup>): void;


    /**
     * Lists sync groups under a hub database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SyncGroupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDatabaseWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SyncGroupListResult>>;

    /**
     * Lists sync groups under a hub database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SyncGroupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SyncGroupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SyncGroupListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SyncGroupListResult>;
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.SyncGroupListResult>): void;
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SyncGroupListResult>): void;


    /**
     * Refreshes a hub database schema.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginRefreshHubSchemaWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Refreshes a hub database schema.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginRefreshHubSchema(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginRefreshHubSchema(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, callback: ServiceCallback<void>): void;
    beginRefreshHubSchema(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates a sync group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group.
     *
     * @param {object} parameters The requested sync group resource state.
     *
     * @param {number} [parameters.interval] Sync interval of the sync group.
     *
     * @param {string} [parameters.conflictResolutionPolicy] Conflict resolution
     * policy of the sync group. Possible values include: 'HubWin', 'MemberWin'
     *
     * @param {string} [parameters.syncDatabaseId] ARM resource id of the sync
     * database in the sync group.
     *
     * @param {string} [parameters.hubDatabaseUserName] User name for the sync
     * group hub database credential.
     *
     * @param {string} [parameters.hubDatabasePassword] Password for the sync group
     * hub database credential.
     *
     * @param {object} [parameters.schema] Sync schema of the sync group.
     *
     * @param {array} [parameters.schema.tables] List of tables in sync group
     * schema.
     *
     * @param {string} [parameters.schema.masterSyncMemberName] Name of master sync
     * member where the schema is from.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SyncGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, parameters: models.SyncGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SyncGroup>>;

    /**
     * Creates or updates a sync group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group.
     *
     * @param {object} parameters The requested sync group resource state.
     *
     * @param {number} [parameters.interval] Sync interval of the sync group.
     *
     * @param {string} [parameters.conflictResolutionPolicy] Conflict resolution
     * policy of the sync group. Possible values include: 'HubWin', 'MemberWin'
     *
     * @param {string} [parameters.syncDatabaseId] ARM resource id of the sync
     * database in the sync group.
     *
     * @param {string} [parameters.hubDatabaseUserName] User name for the sync
     * group hub database credential.
     *
     * @param {string} [parameters.hubDatabasePassword] Password for the sync group
     * hub database credential.
     *
     * @param {object} [parameters.schema] Sync schema of the sync group.
     *
     * @param {array} [parameters.schema.tables] List of tables in sync group
     * schema.
     *
     * @param {string} [parameters.schema.masterSyncMemberName] Name of master sync
     * member where the schema is from.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SyncGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SyncGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SyncGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, parameters: models.SyncGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SyncGroup>;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, parameters: models.SyncGroup, callback: ServiceCallback<models.SyncGroup>): void;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, parameters: models.SyncGroup, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SyncGroup>): void;


    /**
     * Deletes a sync group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a sync group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a sync group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group.
     *
     * @param {object} parameters The requested sync group resource state.
     *
     * @param {number} [parameters.interval] Sync interval of the sync group.
     *
     * @param {string} [parameters.conflictResolutionPolicy] Conflict resolution
     * policy of the sync group. Possible values include: 'HubWin', 'MemberWin'
     *
     * @param {string} [parameters.syncDatabaseId] ARM resource id of the sync
     * database in the sync group.
     *
     * @param {string} [parameters.hubDatabaseUserName] User name for the sync
     * group hub database credential.
     *
     * @param {string} [parameters.hubDatabasePassword] Password for the sync group
     * hub database credential.
     *
     * @param {object} [parameters.schema] Sync schema of the sync group.
     *
     * @param {array} [parameters.schema.tables] List of tables in sync group
     * schema.
     *
     * @param {string} [parameters.schema.masterSyncMemberName] Name of master sync
     * member where the schema is from.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SyncGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, parameters: models.SyncGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SyncGroup>>;

    /**
     * Updates a sync group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group.
     *
     * @param {object} parameters The requested sync group resource state.
     *
     * @param {number} [parameters.interval] Sync interval of the sync group.
     *
     * @param {string} [parameters.conflictResolutionPolicy] Conflict resolution
     * policy of the sync group. Possible values include: 'HubWin', 'MemberWin'
     *
     * @param {string} [parameters.syncDatabaseId] ARM resource id of the sync
     * database in the sync group.
     *
     * @param {string} [parameters.hubDatabaseUserName] User name for the sync
     * group hub database credential.
     *
     * @param {string} [parameters.hubDatabasePassword] Password for the sync group
     * hub database credential.
     *
     * @param {object} [parameters.schema] Sync schema of the sync group.
     *
     * @param {array} [parameters.schema.tables] List of tables in sync group
     * schema.
     *
     * @param {string} [parameters.schema.masterSyncMemberName] Name of master sync
     * member where the schema is from.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SyncGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SyncGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SyncGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, parameters: models.SyncGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SyncGroup>;
    beginUpdate(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, parameters: models.SyncGroup, callback: ServiceCallback<models.SyncGroup>): void;
    beginUpdate(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, parameters: models.SyncGroup, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SyncGroup>): void;


    /**
     * Gets a collection of sync database ids.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SyncDatabaseIdListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSyncDatabaseIdsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SyncDatabaseIdListResult>>;

    /**
     * Gets a collection of sync database ids.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SyncDatabaseIdListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SyncDatabaseIdListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SyncDatabaseIdListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSyncDatabaseIdsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SyncDatabaseIdListResult>;
    listSyncDatabaseIdsNext(nextPageLink: string, callback: ServiceCallback<models.SyncDatabaseIdListResult>): void;
    listSyncDatabaseIdsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SyncDatabaseIdListResult>): void;


    /**
     * Gets a collection of hub database schemas.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SyncFullSchemaPropertiesListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listHubSchemasNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SyncFullSchemaPropertiesListResult>>;

    /**
     * Gets a collection of hub database schemas.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SyncFullSchemaPropertiesListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SyncFullSchemaPropertiesListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SyncFullSchemaPropertiesListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listHubSchemasNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SyncFullSchemaPropertiesListResult>;
    listHubSchemasNext(nextPageLink: string, callback: ServiceCallback<models.SyncFullSchemaPropertiesListResult>): void;
    listHubSchemasNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SyncFullSchemaPropertiesListResult>): void;


    /**
     * Gets a collection of sync group logs.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SyncGroupLogListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listLogsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SyncGroupLogListResult>>;

    /**
     * Gets a collection of sync group logs.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SyncGroupLogListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SyncGroupLogListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SyncGroupLogListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listLogsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SyncGroupLogListResult>;
    listLogsNext(nextPageLink: string, callback: ServiceCallback<models.SyncGroupLogListResult>): void;
    listLogsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SyncGroupLogListResult>): void;


    /**
     * Lists sync groups under a hub database.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SyncGroupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDatabaseNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SyncGroupListResult>>;

    /**
     * Lists sync groups under a hub database.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SyncGroupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SyncGroupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SyncGroupListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDatabaseNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SyncGroupListResult>;
    listByDatabaseNext(nextPageLink: string, callback: ServiceCallback<models.SyncGroupListResult>): void;
    listByDatabaseNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SyncGroupListResult>): void;
}

/**
 * @class
 * SyncMembers
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface SyncMembers {


    /**
     * Gets a sync member.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group on which the sync
     * member is hosted.
     *
     * @param {string} syncMemberName The name of the sync member.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SyncMember>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SyncMember>>;

    /**
     * Gets a sync member.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group on which the sync
     * member is hosted.
     *
     * @param {string} syncMemberName The name of the sync member.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SyncMember} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SyncMember} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SyncMember} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SyncMember>;
    get(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, callback: ServiceCallback<models.SyncMember>): void;
    get(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SyncMember>): void;


    /**
     * Creates or updates a sync member.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group on which the sync
     * member is hosted.
     *
     * @param {string} syncMemberName The name of the sync member.
     *
     * @param {object} parameters The requested sync member resource state.
     *
     * @param {string} [parameters.databaseType] Database type of the sync member.
     * Possible values include: 'AzureSqlDatabase', 'SqlServerDatabase'
     *
     * @param {string} [parameters.syncAgentId] ARM resource id of the sync agent
     * in the sync member.
     *
     * @param {uuid} [parameters.sqlServerDatabaseId] SQL Server database id of the
     * sync member.
     *
     * @param {string} [parameters.serverName] Server name of the member database
     * in the sync member
     *
     * @param {string} [parameters.databaseName] Database name of the member
     * database in the sync member.
     *
     * @param {string} [parameters.userName] User name of the member database in
     * the sync member.
     *
     * @param {string} [parameters.password] Password of the member database in the
     * sync member.
     *
     * @param {string} [parameters.syncDirection] Sync direction of the sync
     * member. Possible values include: 'Bidirectional', 'OneWayMemberToHub',
     * 'OneWayHubToMember'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SyncMember>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, parameters: models.SyncMember, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SyncMember>>;

    /**
     * Creates or updates a sync member.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group on which the sync
     * member is hosted.
     *
     * @param {string} syncMemberName The name of the sync member.
     *
     * @param {object} parameters The requested sync member resource state.
     *
     * @param {string} [parameters.databaseType] Database type of the sync member.
     * Possible values include: 'AzureSqlDatabase', 'SqlServerDatabase'
     *
     * @param {string} [parameters.syncAgentId] ARM resource id of the sync agent
     * in the sync member.
     *
     * @param {uuid} [parameters.sqlServerDatabaseId] SQL Server database id of the
     * sync member.
     *
     * @param {string} [parameters.serverName] Server name of the member database
     * in the sync member
     *
     * @param {string} [parameters.databaseName] Database name of the member
     * database in the sync member.
     *
     * @param {string} [parameters.userName] User name of the member database in
     * the sync member.
     *
     * @param {string} [parameters.password] Password of the member database in the
     * sync member.
     *
     * @param {string} [parameters.syncDirection] Sync direction of the sync
     * member. Possible values include: 'Bidirectional', 'OneWayMemberToHub',
     * 'OneWayHubToMember'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SyncMember} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SyncMember} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SyncMember} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, parameters: models.SyncMember, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SyncMember>;
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, parameters: models.SyncMember, callback: ServiceCallback<models.SyncMember>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, parameters: models.SyncMember, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SyncMember>): void;


    /**
     * Deletes a sync member.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group on which the sync
     * member is hosted.
     *
     * @param {string} syncMemberName The name of the sync member.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a sync member.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group on which the sync
     * member is hosted.
     *
     * @param {string} syncMemberName The name of the sync member.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates an existing sync member.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group on which the sync
     * member is hosted.
     *
     * @param {string} syncMemberName The name of the sync member.
     *
     * @param {object} parameters The requested sync member resource state.
     *
     * @param {string} [parameters.databaseType] Database type of the sync member.
     * Possible values include: 'AzureSqlDatabase', 'SqlServerDatabase'
     *
     * @param {string} [parameters.syncAgentId] ARM resource id of the sync agent
     * in the sync member.
     *
     * @param {uuid} [parameters.sqlServerDatabaseId] SQL Server database id of the
     * sync member.
     *
     * @param {string} [parameters.serverName] Server name of the member database
     * in the sync member
     *
     * @param {string} [parameters.databaseName] Database name of the member
     * database in the sync member.
     *
     * @param {string} [parameters.userName] User name of the member database in
     * the sync member.
     *
     * @param {string} [parameters.password] Password of the member database in the
     * sync member.
     *
     * @param {string} [parameters.syncDirection] Sync direction of the sync
     * member. Possible values include: 'Bidirectional', 'OneWayMemberToHub',
     * 'OneWayHubToMember'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SyncMember>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, parameters: models.SyncMember, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SyncMember>>;

    /**
     * Updates an existing sync member.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group on which the sync
     * member is hosted.
     *
     * @param {string} syncMemberName The name of the sync member.
     *
     * @param {object} parameters The requested sync member resource state.
     *
     * @param {string} [parameters.databaseType] Database type of the sync member.
     * Possible values include: 'AzureSqlDatabase', 'SqlServerDatabase'
     *
     * @param {string} [parameters.syncAgentId] ARM resource id of the sync agent
     * in the sync member.
     *
     * @param {uuid} [parameters.sqlServerDatabaseId] SQL Server database id of the
     * sync member.
     *
     * @param {string} [parameters.serverName] Server name of the member database
     * in the sync member
     *
     * @param {string} [parameters.databaseName] Database name of the member
     * database in the sync member.
     *
     * @param {string} [parameters.userName] User name of the member database in
     * the sync member.
     *
     * @param {string} [parameters.password] Password of the member database in the
     * sync member.
     *
     * @param {string} [parameters.syncDirection] Sync direction of the sync
     * member. Possible values include: 'Bidirectional', 'OneWayMemberToHub',
     * 'OneWayHubToMember'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SyncMember} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SyncMember} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SyncMember} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, parameters: models.SyncMember, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SyncMember>;
    update(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, parameters: models.SyncMember, callback: ServiceCallback<models.SyncMember>): void;
    update(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, parameters: models.SyncMember, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SyncMember>): void;


    /**
     * Lists sync members in the given sync group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SyncMemberListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySyncGroupWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SyncMemberListResult>>;

    /**
     * Lists sync members in the given sync group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SyncMemberListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SyncMemberListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SyncMemberListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySyncGroup(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SyncMemberListResult>;
    listBySyncGroup(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, callback: ServiceCallback<models.SyncMemberListResult>): void;
    listBySyncGroup(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SyncMemberListResult>): void;


    /**
     * Gets a sync member database schema.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group on which the sync
     * member is hosted.
     *
     * @param {string} syncMemberName The name of the sync member.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SyncFullSchemaPropertiesListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMemberSchemasWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SyncFullSchemaPropertiesListResult>>;

    /**
     * Gets a sync member database schema.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group on which the sync
     * member is hosted.
     *
     * @param {string} syncMemberName The name of the sync member.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SyncFullSchemaPropertiesListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SyncFullSchemaPropertiesListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SyncFullSchemaPropertiesListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMemberSchemas(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SyncFullSchemaPropertiesListResult>;
    listMemberSchemas(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, callback: ServiceCallback<models.SyncFullSchemaPropertiesListResult>): void;
    listMemberSchemas(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SyncFullSchemaPropertiesListResult>): void;


    /**
     * Refreshes a sync member database schema.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group on which the sync
     * member is hosted.
     *
     * @param {string} syncMemberName The name of the sync member.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    refreshMemberSchemaWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Refreshes a sync member database schema.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group on which the sync
     * member is hosted.
     *
     * @param {string} syncMemberName The name of the sync member.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    refreshMemberSchema(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    refreshMemberSchema(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, callback: ServiceCallback<void>): void;
    refreshMemberSchema(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates a sync member.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group on which the sync
     * member is hosted.
     *
     * @param {string} syncMemberName The name of the sync member.
     *
     * @param {object} parameters The requested sync member resource state.
     *
     * @param {string} [parameters.databaseType] Database type of the sync member.
     * Possible values include: 'AzureSqlDatabase', 'SqlServerDatabase'
     *
     * @param {string} [parameters.syncAgentId] ARM resource id of the sync agent
     * in the sync member.
     *
     * @param {uuid} [parameters.sqlServerDatabaseId] SQL Server database id of the
     * sync member.
     *
     * @param {string} [parameters.serverName] Server name of the member database
     * in the sync member
     *
     * @param {string} [parameters.databaseName] Database name of the member
     * database in the sync member.
     *
     * @param {string} [parameters.userName] User name of the member database in
     * the sync member.
     *
     * @param {string} [parameters.password] Password of the member database in the
     * sync member.
     *
     * @param {string} [parameters.syncDirection] Sync direction of the sync
     * member. Possible values include: 'Bidirectional', 'OneWayMemberToHub',
     * 'OneWayHubToMember'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SyncMember>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, parameters: models.SyncMember, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SyncMember>>;

    /**
     * Creates or updates a sync member.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group on which the sync
     * member is hosted.
     *
     * @param {string} syncMemberName The name of the sync member.
     *
     * @param {object} parameters The requested sync member resource state.
     *
     * @param {string} [parameters.databaseType] Database type of the sync member.
     * Possible values include: 'AzureSqlDatabase', 'SqlServerDatabase'
     *
     * @param {string} [parameters.syncAgentId] ARM resource id of the sync agent
     * in the sync member.
     *
     * @param {uuid} [parameters.sqlServerDatabaseId] SQL Server database id of the
     * sync member.
     *
     * @param {string} [parameters.serverName] Server name of the member database
     * in the sync member
     *
     * @param {string} [parameters.databaseName] Database name of the member
     * database in the sync member.
     *
     * @param {string} [parameters.userName] User name of the member database in
     * the sync member.
     *
     * @param {string} [parameters.password] Password of the member database in the
     * sync member.
     *
     * @param {string} [parameters.syncDirection] Sync direction of the sync
     * member. Possible values include: 'Bidirectional', 'OneWayMemberToHub',
     * 'OneWayHubToMember'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SyncMember} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SyncMember} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SyncMember} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, parameters: models.SyncMember, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SyncMember>;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, parameters: models.SyncMember, callback: ServiceCallback<models.SyncMember>): void;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, parameters: models.SyncMember, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SyncMember>): void;


    /**
     * Deletes a sync member.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group on which the sync
     * member is hosted.
     *
     * @param {string} syncMemberName The name of the sync member.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a sync member.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group on which the sync
     * member is hosted.
     *
     * @param {string} syncMemberName The name of the sync member.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates an existing sync member.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group on which the sync
     * member is hosted.
     *
     * @param {string} syncMemberName The name of the sync member.
     *
     * @param {object} parameters The requested sync member resource state.
     *
     * @param {string} [parameters.databaseType] Database type of the sync member.
     * Possible values include: 'AzureSqlDatabase', 'SqlServerDatabase'
     *
     * @param {string} [parameters.syncAgentId] ARM resource id of the sync agent
     * in the sync member.
     *
     * @param {uuid} [parameters.sqlServerDatabaseId] SQL Server database id of the
     * sync member.
     *
     * @param {string} [parameters.serverName] Server name of the member database
     * in the sync member
     *
     * @param {string} [parameters.databaseName] Database name of the member
     * database in the sync member.
     *
     * @param {string} [parameters.userName] User name of the member database in
     * the sync member.
     *
     * @param {string} [parameters.password] Password of the member database in the
     * sync member.
     *
     * @param {string} [parameters.syncDirection] Sync direction of the sync
     * member. Possible values include: 'Bidirectional', 'OneWayMemberToHub',
     * 'OneWayHubToMember'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SyncMember>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, parameters: models.SyncMember, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SyncMember>>;

    /**
     * Updates an existing sync member.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group on which the sync
     * member is hosted.
     *
     * @param {string} syncMemberName The name of the sync member.
     *
     * @param {object} parameters The requested sync member resource state.
     *
     * @param {string} [parameters.databaseType] Database type of the sync member.
     * Possible values include: 'AzureSqlDatabase', 'SqlServerDatabase'
     *
     * @param {string} [parameters.syncAgentId] ARM resource id of the sync agent
     * in the sync member.
     *
     * @param {uuid} [parameters.sqlServerDatabaseId] SQL Server database id of the
     * sync member.
     *
     * @param {string} [parameters.serverName] Server name of the member database
     * in the sync member
     *
     * @param {string} [parameters.databaseName] Database name of the member
     * database in the sync member.
     *
     * @param {string} [parameters.userName] User name of the member database in
     * the sync member.
     *
     * @param {string} [parameters.password] Password of the member database in the
     * sync member.
     *
     * @param {string} [parameters.syncDirection] Sync direction of the sync
     * member. Possible values include: 'Bidirectional', 'OneWayMemberToHub',
     * 'OneWayHubToMember'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SyncMember} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SyncMember} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SyncMember} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, parameters: models.SyncMember, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SyncMember>;
    beginUpdate(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, parameters: models.SyncMember, callback: ServiceCallback<models.SyncMember>): void;
    beginUpdate(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, parameters: models.SyncMember, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SyncMember>): void;


    /**
     * Refreshes a sync member database schema.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group on which the sync
     * member is hosted.
     *
     * @param {string} syncMemberName The name of the sync member.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginRefreshMemberSchemaWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Refreshes a sync member database schema.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database on which the sync
     * group is hosted.
     *
     * @param {string} syncGroupName The name of the sync group on which the sync
     * member is hosted.
     *
     * @param {string} syncMemberName The name of the sync member.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginRefreshMemberSchema(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginRefreshMemberSchema(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, callback: ServiceCallback<void>): void;
    beginRefreshMemberSchema(resourceGroupName: string, serverName: string, databaseName: string, syncGroupName: string, syncMemberName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists sync members in the given sync group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SyncMemberListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySyncGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SyncMemberListResult>>;

    /**
     * Lists sync members in the given sync group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SyncMemberListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SyncMemberListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SyncMemberListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySyncGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SyncMemberListResult>;
    listBySyncGroupNext(nextPageLink: string, callback: ServiceCallback<models.SyncMemberListResult>): void;
    listBySyncGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SyncMemberListResult>): void;


    /**
     * Gets a sync member database schema.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SyncFullSchemaPropertiesListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMemberSchemasNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SyncFullSchemaPropertiesListResult>>;

    /**
     * Gets a sync member database schema.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SyncFullSchemaPropertiesListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SyncFullSchemaPropertiesListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SyncFullSchemaPropertiesListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMemberSchemasNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SyncFullSchemaPropertiesListResult>;
    listMemberSchemasNext(nextPageLink: string, callback: ServiceCallback<models.SyncFullSchemaPropertiesListResult>): void;
    listMemberSchemasNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SyncFullSchemaPropertiesListResult>): void;
}

/**
 * @class
 * SubscriptionUsages
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface SubscriptionUsages {


    /**
     * Gets all subscription usage metrics in a given location.
     *
     * @param {string} locationName The name of the region where the resource is
     * located.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SubscriptionUsageListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByLocationWithHttpOperationResponse(locationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SubscriptionUsageListResult>>;

    /**
     * Gets all subscription usage metrics in a given location.
     *
     * @param {string} locationName The name of the region where the resource is
     * located.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SubscriptionUsageListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SubscriptionUsageListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SubscriptionUsageListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByLocation(locationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SubscriptionUsageListResult>;
    listByLocation(locationName: string, callback: ServiceCallback<models.SubscriptionUsageListResult>): void;
    listByLocation(locationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SubscriptionUsageListResult>): void;


    /**
     * Gets a subscription usage metric.
     *
     * @param {string} locationName The name of the region where the resource is
     * located.
     *
     * @param {string} usageName Name of usage metric to return.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SubscriptionUsage>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(locationName: string, usageName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SubscriptionUsage>>;

    /**
     * Gets a subscription usage metric.
     *
     * @param {string} locationName The name of the region where the resource is
     * located.
     *
     * @param {string} usageName Name of usage metric to return.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SubscriptionUsage} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SubscriptionUsage} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SubscriptionUsage} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(locationName: string, usageName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SubscriptionUsage>;
    get(locationName: string, usageName: string, callback: ServiceCallback<models.SubscriptionUsage>): void;
    get(locationName: string, usageName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SubscriptionUsage>): void;


    /**
     * Gets all subscription usage metrics in a given location.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SubscriptionUsageListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByLocationNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SubscriptionUsageListResult>>;

    /**
     * Gets all subscription usage metrics in a given location.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SubscriptionUsageListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SubscriptionUsageListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SubscriptionUsageListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByLocationNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SubscriptionUsageListResult>;
    listByLocationNext(nextPageLink: string, callback: ServiceCallback<models.SubscriptionUsageListResult>): void;
    listByLocationNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SubscriptionUsageListResult>): void;
}

/**
 * @class
 * VirtualNetworkRules
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface VirtualNetworkRules {


    /**
     * Gets a virtual network rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} virtualNetworkRuleName The name of the virtual network rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkRule>>;

    /**
     * Gets a virtual network rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} virtualNetworkRuleName The name of the virtual network rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkRule>;
    get(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, callback: ServiceCallback<models.VirtualNetworkRule>): void;
    get(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkRule>): void;


    /**
     * Creates or updates an existing virtual network rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} virtualNetworkRuleName The name of the virtual network rule.
     *
     * @param {object} parameters The requested virtual Network Rule Resource
     * state.
     *
     * @param {string} parameters.virtualNetworkSubnetId The ARM resource id of the
     * virtual network subnet.
     *
     * @param {boolean} [parameters.ignoreMissingVnetServiceEndpoint] Create
     * firewall rule before the virtual network has vnet service endpoint enabled.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, parameters: models.VirtualNetworkRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkRule>>;

    /**
     * Creates or updates an existing virtual network rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} virtualNetworkRuleName The name of the virtual network rule.
     *
     * @param {object} parameters The requested virtual Network Rule Resource
     * state.
     *
     * @param {string} parameters.virtualNetworkSubnetId The ARM resource id of the
     * virtual network subnet.
     *
     * @param {boolean} [parameters.ignoreMissingVnetServiceEndpoint] Create
     * firewall rule before the virtual network has vnet service endpoint enabled.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, parameters: models.VirtualNetworkRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkRule>;
    createOrUpdate(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, parameters: models.VirtualNetworkRule, callback: ServiceCallback<models.VirtualNetworkRule>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, parameters: models.VirtualNetworkRule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkRule>): void;


    /**
     * Deletes the virtual network rule with the given name.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} virtualNetworkRuleName The name of the virtual network rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the virtual network rule with the given name.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} virtualNetworkRuleName The name of the virtual network rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a list of virtual network rules in a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkRuleListResult>>;

    /**
     * Gets a list of virtual network rules in a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkRuleListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkRuleListResult>;
    listByServer(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.VirtualNetworkRuleListResult>): void;
    listByServer(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkRuleListResult>): void;


    /**
     * Creates or updates an existing virtual network rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} virtualNetworkRuleName The name of the virtual network rule.
     *
     * @param {object} parameters The requested virtual Network Rule Resource
     * state.
     *
     * @param {string} parameters.virtualNetworkSubnetId The ARM resource id of the
     * virtual network subnet.
     *
     * @param {boolean} [parameters.ignoreMissingVnetServiceEndpoint] Create
     * firewall rule before the virtual network has vnet service endpoint enabled.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, parameters: models.VirtualNetworkRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkRule>>;

    /**
     * Creates or updates an existing virtual network rule.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} virtualNetworkRuleName The name of the virtual network rule.
     *
     * @param {object} parameters The requested virtual Network Rule Resource
     * state.
     *
     * @param {string} parameters.virtualNetworkSubnetId The ARM resource id of the
     * virtual network subnet.
     *
     * @param {boolean} [parameters.ignoreMissingVnetServiceEndpoint] Create
     * firewall rule before the virtual network has vnet service endpoint enabled.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, parameters: models.VirtualNetworkRule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkRule>;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, parameters: models.VirtualNetworkRule, callback: ServiceCallback<models.VirtualNetworkRule>): void;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, parameters: models.VirtualNetworkRule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkRule>): void;


    /**
     * Deletes the virtual network rule with the given name.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} virtualNetworkRuleName The name of the virtual network rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the virtual network rule with the given name.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} virtualNetworkRuleName The name of the virtual network rule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a list of virtual network rules in a server.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetworkRuleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetworkRuleListResult>>;

    /**
     * Gets a list of virtual network rules in a server.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetworkRuleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetworkRuleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetworkRuleListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServerNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetworkRuleListResult>;
    listByServerNext(nextPageLink: string, callback: ServiceCallback<models.VirtualNetworkRuleListResult>): void;
    listByServerNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetworkRuleListResult>): void;
}

/**
 * @class
 * ExtendedDatabaseBlobAuditingPolicies
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface ExtendedDatabaseBlobAuditingPolicies {


    /**
     * Gets an extended database's blob auditing policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExtendedDatabaseBlobAuditingPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExtendedDatabaseBlobAuditingPolicy>>;

    /**
     * Gets an extended database's blob auditing policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExtendedDatabaseBlobAuditingPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExtendedDatabaseBlobAuditingPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExtendedDatabaseBlobAuditingPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExtendedDatabaseBlobAuditingPolicy>;
    get(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.ExtendedDatabaseBlobAuditingPolicy>): void;
    get(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExtendedDatabaseBlobAuditingPolicy>): void;


    /**
     * Creates or updates an extended database's blob auditing policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The extended database blob auditing policy.
     *
     * @param {string} [parameters.predicateExpression] Specifies condition of
     * where clause when creating an audit.
     *
     * @param {string} parameters.state Specifies the state of the policy. If state
     * is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.
     * Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.storageEndpoint] Specifies the blob storage
     * endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is
     * Enabled, storageEndpoint is required.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the auditing storage account. If state is Enabled and
     * storageEndpoint is specified, storageAccountAccessKey is required.
     *
     * @param {number} [parameters.retentionDays] Specifies the number of days to
     * keep in the audit logs in the storage account.
     *
     * @param {array} [parameters.auditActionsAndGroups] Specifies the
     * Actions-Groups and Actions to audit.
     *
     * The recommended set of action groups to use is the following combination -
     * this will audit all the queries and stored procedures executed against the
     * database, as well as successful and failed logins:
     *
     * BATCH_COMPLETED_GROUP,
     * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
     * FAILED_DATABASE_AUTHENTICATION_GROUP.
     *
     * This above combination is also the set that is configured by default when
     * enabling auditing from the Azure portal.
     *
     * The supported action groups to audit are (note: choose only specific groups
     * that cover your auditing needs. Using unnecessary groups could lead to very
     * large quantities of audit records):
     *
     * APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
     * BACKUP_RESTORE_GROUP
     * DATABASE_LOGOUT_GROUP
     * DATABASE_OBJECT_CHANGE_GROUP
     * DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
     * DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
     * DATABASE_OPERATION_GROUP
     * DATABASE_PERMISSION_CHANGE_GROUP
     * DATABASE_PRINCIPAL_CHANGE_GROUP
     * DATABASE_PRINCIPAL_IMPERSONATION_GROUP
     * DATABASE_ROLE_MEMBER_CHANGE_GROUP
     * FAILED_DATABASE_AUTHENTICATION_GROUP
     * SCHEMA_OBJECT_ACCESS_GROUP
     * SCHEMA_OBJECT_CHANGE_GROUP
     * SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
     * SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
     * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
     * USER_CHANGE_PASSWORD_GROUP
     * BATCH_STARTED_GROUP
     * BATCH_COMPLETED_GROUP
     *
     * These are groups that cover all sql statements and stored procedures
     * executed against the database, and should not be used in combination with
     * other groups as this will result in duplicate audit logs.
     *
     * For more information, see [Database-Level Audit Action
     * Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
     *
     * For Database auditing policy, specific Actions can also be specified (note
     * that Actions cannot be specified for Server auditing policy). The supported
     * actions to audit are:
     * SELECT
     * UPDATE
     * INSERT
     * DELETE
     * EXECUTE
     * RECEIVE
     * REFERENCES
     *
     * The general form for defining an action to be audited is:
     * {action} ON {object} BY {principal}
     *
     * Note that <object> in the above format can refer to an object like a table,
     * view, or stored procedure, or an entire database or schema. For the latter
     * cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used,
     * respectively.
     *
     * For example:
     * SELECT on dbo.myTable by public
     * SELECT on DATABASE::myDatabase by public
     * SELECT on SCHEMA::mySchema by public
     *
     * For more information, see [Database-Level Audit
     * Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
     *
     * @param {uuid} [parameters.storageAccountSubscriptionId] Specifies the blob
     * storage subscription Id.
     *
     * @param {boolean} [parameters.isStorageSecondaryKeyInUse] Specifies whether
     * storageAccountAccessKey value is the storage's secondary key.
     *
     * @param {boolean} [parameters.isAzureMonitorTargetEnabled] Specifies whether
     * audit events are sent to Azure Monitor.
     * In order to send the events to Azure Monitor, specify 'State' as 'Enabled'
     * and 'IsAzureMonitorTargetEnabled' as true.
     *
     * When using REST API to configure auditing, Diagnostic Settings with
     * 'SQLSecurityAuditEvents' diagnostic logs category on the database should be
     * also created.
     * Note that for server level audit you should use the 'master' database as
     * {databaseName}.
     *
     * Diagnostic Settings URI format:
     * PUT
     * https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
     *
     * For more information, see [Diagnostic Settings REST
     * API](https://go.microsoft.com/fwlink/?linkid=2033207)
     * or [Diagnostic Settings
     * PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
     *
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExtendedDatabaseBlobAuditingPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ExtendedDatabaseBlobAuditingPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExtendedDatabaseBlobAuditingPolicy>>;

    /**
     * Creates or updates an extended database's blob auditing policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The extended database blob auditing policy.
     *
     * @param {string} [parameters.predicateExpression] Specifies condition of
     * where clause when creating an audit.
     *
     * @param {string} parameters.state Specifies the state of the policy. If state
     * is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.
     * Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.storageEndpoint] Specifies the blob storage
     * endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is
     * Enabled, storageEndpoint is required.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the auditing storage account. If state is Enabled and
     * storageEndpoint is specified, storageAccountAccessKey is required.
     *
     * @param {number} [parameters.retentionDays] Specifies the number of days to
     * keep in the audit logs in the storage account.
     *
     * @param {array} [parameters.auditActionsAndGroups] Specifies the
     * Actions-Groups and Actions to audit.
     *
     * The recommended set of action groups to use is the following combination -
     * this will audit all the queries and stored procedures executed against the
     * database, as well as successful and failed logins:
     *
     * BATCH_COMPLETED_GROUP,
     * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
     * FAILED_DATABASE_AUTHENTICATION_GROUP.
     *
     * This above combination is also the set that is configured by default when
     * enabling auditing from the Azure portal.
     *
     * The supported action groups to audit are (note: choose only specific groups
     * that cover your auditing needs. Using unnecessary groups could lead to very
     * large quantities of audit records):
     *
     * APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
     * BACKUP_RESTORE_GROUP
     * DATABASE_LOGOUT_GROUP
     * DATABASE_OBJECT_CHANGE_GROUP
     * DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
     * DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
     * DATABASE_OPERATION_GROUP
     * DATABASE_PERMISSION_CHANGE_GROUP
     * DATABASE_PRINCIPAL_CHANGE_GROUP
     * DATABASE_PRINCIPAL_IMPERSONATION_GROUP
     * DATABASE_ROLE_MEMBER_CHANGE_GROUP
     * FAILED_DATABASE_AUTHENTICATION_GROUP
     * SCHEMA_OBJECT_ACCESS_GROUP
     * SCHEMA_OBJECT_CHANGE_GROUP
     * SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
     * SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
     * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
     * USER_CHANGE_PASSWORD_GROUP
     * BATCH_STARTED_GROUP
     * BATCH_COMPLETED_GROUP
     *
     * These are groups that cover all sql statements and stored procedures
     * executed against the database, and should not be used in combination with
     * other groups as this will result in duplicate audit logs.
     *
     * For more information, see [Database-Level Audit Action
     * Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
     *
     * For Database auditing policy, specific Actions can also be specified (note
     * that Actions cannot be specified for Server auditing policy). The supported
     * actions to audit are:
     * SELECT
     * UPDATE
     * INSERT
     * DELETE
     * EXECUTE
     * RECEIVE
     * REFERENCES
     *
     * The general form for defining an action to be audited is:
     * {action} ON {object} BY {principal}
     *
     * Note that <object> in the above format can refer to an object like a table,
     * view, or stored procedure, or an entire database or schema. For the latter
     * cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used,
     * respectively.
     *
     * For example:
     * SELECT on dbo.myTable by public
     * SELECT on DATABASE::myDatabase by public
     * SELECT on SCHEMA::mySchema by public
     *
     * For more information, see [Database-Level Audit
     * Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
     *
     * @param {uuid} [parameters.storageAccountSubscriptionId] Specifies the blob
     * storage subscription Id.
     *
     * @param {boolean} [parameters.isStorageSecondaryKeyInUse] Specifies whether
     * storageAccountAccessKey value is the storage's secondary key.
     *
     * @param {boolean} [parameters.isAzureMonitorTargetEnabled] Specifies whether
     * audit events are sent to Azure Monitor.
     * In order to send the events to Azure Monitor, specify 'State' as 'Enabled'
     * and 'IsAzureMonitorTargetEnabled' as true.
     *
     * When using REST API to configure auditing, Diagnostic Settings with
     * 'SQLSecurityAuditEvents' diagnostic logs category on the database should be
     * also created.
     * Note that for server level audit you should use the 'master' database as
     * {databaseName}.
     *
     * Diagnostic Settings URI format:
     * PUT
     * https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
     *
     * For more information, see [Diagnostic Settings REST
     * API](https://go.microsoft.com/fwlink/?linkid=2033207)
     * or [Diagnostic Settings
     * PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
     *
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExtendedDatabaseBlobAuditingPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExtendedDatabaseBlobAuditingPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExtendedDatabaseBlobAuditingPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ExtendedDatabaseBlobAuditingPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExtendedDatabaseBlobAuditingPolicy>;
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ExtendedDatabaseBlobAuditingPolicy, callback: ServiceCallback<models.ExtendedDatabaseBlobAuditingPolicy>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.ExtendedDatabaseBlobAuditingPolicy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExtendedDatabaseBlobAuditingPolicy>): void;
}

/**
 * @class
 * ExtendedServerBlobAuditingPolicies
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface ExtendedServerBlobAuditingPolicies {


    /**
     * Gets an extended server's blob auditing policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExtendedServerBlobAuditingPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExtendedServerBlobAuditingPolicy>>;

    /**
     * Gets an extended server's blob auditing policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExtendedServerBlobAuditingPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExtendedServerBlobAuditingPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExtendedServerBlobAuditingPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExtendedServerBlobAuditingPolicy>;
    get(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.ExtendedServerBlobAuditingPolicy>): void;
    get(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExtendedServerBlobAuditingPolicy>): void;


    /**
     * Creates or updates an extended server's blob auditing policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters Properties of extended blob auditing policy
     *
     * @param {string} [parameters.predicateExpression] Specifies condition of
     * where clause when creating an audit.
     *
     * @param {string} parameters.state Specifies the state of the policy. If state
     * is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.
     * Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.storageEndpoint] Specifies the blob storage
     * endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is
     * Enabled, storageEndpoint is required.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the auditing storage account. If state is Enabled and
     * storageEndpoint is specified, storageAccountAccessKey is required.
     *
     * @param {number} [parameters.retentionDays] Specifies the number of days to
     * keep in the audit logs in the storage account.
     *
     * @param {array} [parameters.auditActionsAndGroups] Specifies the
     * Actions-Groups and Actions to audit.
     *
     * The recommended set of action groups to use is the following combination -
     * this will audit all the queries and stored procedures executed against the
     * database, as well as successful and failed logins:
     *
     * BATCH_COMPLETED_GROUP,
     * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
     * FAILED_DATABASE_AUTHENTICATION_GROUP.
     *
     * This above combination is also the set that is configured by default when
     * enabling auditing from the Azure portal.
     *
     * The supported action groups to audit are (note: choose only specific groups
     * that cover your auditing needs. Using unnecessary groups could lead to very
     * large quantities of audit records):
     *
     * APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
     * BACKUP_RESTORE_GROUP
     * DATABASE_LOGOUT_GROUP
     * DATABASE_OBJECT_CHANGE_GROUP
     * DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
     * DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
     * DATABASE_OPERATION_GROUP
     * DATABASE_PERMISSION_CHANGE_GROUP
     * DATABASE_PRINCIPAL_CHANGE_GROUP
     * DATABASE_PRINCIPAL_IMPERSONATION_GROUP
     * DATABASE_ROLE_MEMBER_CHANGE_GROUP
     * FAILED_DATABASE_AUTHENTICATION_GROUP
     * SCHEMA_OBJECT_ACCESS_GROUP
     * SCHEMA_OBJECT_CHANGE_GROUP
     * SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
     * SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
     * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
     * USER_CHANGE_PASSWORD_GROUP
     * BATCH_STARTED_GROUP
     * BATCH_COMPLETED_GROUP
     *
     * These are groups that cover all sql statements and stored procedures
     * executed against the database, and should not be used in combination with
     * other groups as this will result in duplicate audit logs.
     *
     * For more information, see [Database-Level Audit Action
     * Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
     *
     * For Database auditing policy, specific Actions can also be specified (note
     * that Actions cannot be specified for Server auditing policy). The supported
     * actions to audit are:
     * SELECT
     * UPDATE
     * INSERT
     * DELETE
     * EXECUTE
     * RECEIVE
     * REFERENCES
     *
     * The general form for defining an action to be audited is:
     * {action} ON {object} BY {principal}
     *
     * Note that <object> in the above format can refer to an object like a table,
     * view, or stored procedure, or an entire database or schema. For the latter
     * cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used,
     * respectively.
     *
     * For example:
     * SELECT on dbo.myTable by public
     * SELECT on DATABASE::myDatabase by public
     * SELECT on SCHEMA::mySchema by public
     *
     * For more information, see [Database-Level Audit
     * Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
     *
     * @param {uuid} [parameters.storageAccountSubscriptionId] Specifies the blob
     * storage subscription Id.
     *
     * @param {boolean} [parameters.isStorageSecondaryKeyInUse] Specifies whether
     * storageAccountAccessKey value is the storage's secondary key.
     *
     * @param {boolean} [parameters.isAzureMonitorTargetEnabled] Specifies whether
     * audit events are sent to Azure Monitor.
     * In order to send the events to Azure Monitor, specify 'State' as 'Enabled'
     * and 'IsAzureMonitorTargetEnabled' as true.
     *
     * When using REST API to configure auditing, Diagnostic Settings with
     * 'SQLSecurityAuditEvents' diagnostic logs category on the database should be
     * also created.
     * Note that for server level audit you should use the 'master' database as
     * {databaseName}.
     *
     * Diagnostic Settings URI format:
     * PUT
     * https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
     *
     * For more information, see [Diagnostic Settings REST
     * API](https://go.microsoft.com/fwlink/?linkid=2033207)
     * or [Diagnostic Settings
     * PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
     *
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExtendedServerBlobAuditingPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, parameters: models.ExtendedServerBlobAuditingPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExtendedServerBlobAuditingPolicy>>;

    /**
     * Creates or updates an extended server's blob auditing policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters Properties of extended blob auditing policy
     *
     * @param {string} [parameters.predicateExpression] Specifies condition of
     * where clause when creating an audit.
     *
     * @param {string} parameters.state Specifies the state of the policy. If state
     * is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.
     * Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.storageEndpoint] Specifies the blob storage
     * endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is
     * Enabled, storageEndpoint is required.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the auditing storage account. If state is Enabled and
     * storageEndpoint is specified, storageAccountAccessKey is required.
     *
     * @param {number} [parameters.retentionDays] Specifies the number of days to
     * keep in the audit logs in the storage account.
     *
     * @param {array} [parameters.auditActionsAndGroups] Specifies the
     * Actions-Groups and Actions to audit.
     *
     * The recommended set of action groups to use is the following combination -
     * this will audit all the queries and stored procedures executed against the
     * database, as well as successful and failed logins:
     *
     * BATCH_COMPLETED_GROUP,
     * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
     * FAILED_DATABASE_AUTHENTICATION_GROUP.
     *
     * This above combination is also the set that is configured by default when
     * enabling auditing from the Azure portal.
     *
     * The supported action groups to audit are (note: choose only specific groups
     * that cover your auditing needs. Using unnecessary groups could lead to very
     * large quantities of audit records):
     *
     * APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
     * BACKUP_RESTORE_GROUP
     * DATABASE_LOGOUT_GROUP
     * DATABASE_OBJECT_CHANGE_GROUP
     * DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
     * DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
     * DATABASE_OPERATION_GROUP
     * DATABASE_PERMISSION_CHANGE_GROUP
     * DATABASE_PRINCIPAL_CHANGE_GROUP
     * DATABASE_PRINCIPAL_IMPERSONATION_GROUP
     * DATABASE_ROLE_MEMBER_CHANGE_GROUP
     * FAILED_DATABASE_AUTHENTICATION_GROUP
     * SCHEMA_OBJECT_ACCESS_GROUP
     * SCHEMA_OBJECT_CHANGE_GROUP
     * SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
     * SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
     * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
     * USER_CHANGE_PASSWORD_GROUP
     * BATCH_STARTED_GROUP
     * BATCH_COMPLETED_GROUP
     *
     * These are groups that cover all sql statements and stored procedures
     * executed against the database, and should not be used in combination with
     * other groups as this will result in duplicate audit logs.
     *
     * For more information, see [Database-Level Audit Action
     * Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
     *
     * For Database auditing policy, specific Actions can also be specified (note
     * that Actions cannot be specified for Server auditing policy). The supported
     * actions to audit are:
     * SELECT
     * UPDATE
     * INSERT
     * DELETE
     * EXECUTE
     * RECEIVE
     * REFERENCES
     *
     * The general form for defining an action to be audited is:
     * {action} ON {object} BY {principal}
     *
     * Note that <object> in the above format can refer to an object like a table,
     * view, or stored procedure, or an entire database or schema. For the latter
     * cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used,
     * respectively.
     *
     * For example:
     * SELECT on dbo.myTable by public
     * SELECT on DATABASE::myDatabase by public
     * SELECT on SCHEMA::mySchema by public
     *
     * For more information, see [Database-Level Audit
     * Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
     *
     * @param {uuid} [parameters.storageAccountSubscriptionId] Specifies the blob
     * storage subscription Id.
     *
     * @param {boolean} [parameters.isStorageSecondaryKeyInUse] Specifies whether
     * storageAccountAccessKey value is the storage's secondary key.
     *
     * @param {boolean} [parameters.isAzureMonitorTargetEnabled] Specifies whether
     * audit events are sent to Azure Monitor.
     * In order to send the events to Azure Monitor, specify 'State' as 'Enabled'
     * and 'IsAzureMonitorTargetEnabled' as true.
     *
     * When using REST API to configure auditing, Diagnostic Settings with
     * 'SQLSecurityAuditEvents' diagnostic logs category on the database should be
     * also created.
     * Note that for server level audit you should use the 'master' database as
     * {databaseName}.
     *
     * Diagnostic Settings URI format:
     * PUT
     * https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
     *
     * For more information, see [Diagnostic Settings REST
     * API](https://go.microsoft.com/fwlink/?linkid=2033207)
     * or [Diagnostic Settings
     * PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
     *
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExtendedServerBlobAuditingPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExtendedServerBlobAuditingPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExtendedServerBlobAuditingPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, parameters: models.ExtendedServerBlobAuditingPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExtendedServerBlobAuditingPolicy>;
    createOrUpdate(resourceGroupName: string, serverName: string, parameters: models.ExtendedServerBlobAuditingPolicy, callback: ServiceCallback<models.ExtendedServerBlobAuditingPolicy>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, parameters: models.ExtendedServerBlobAuditingPolicy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExtendedServerBlobAuditingPolicy>): void;


    /**
     * Creates or updates an extended server's blob auditing policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters Properties of extended blob auditing policy
     *
     * @param {string} [parameters.predicateExpression] Specifies condition of
     * where clause when creating an audit.
     *
     * @param {string} parameters.state Specifies the state of the policy. If state
     * is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.
     * Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.storageEndpoint] Specifies the blob storage
     * endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is
     * Enabled, storageEndpoint is required.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the auditing storage account. If state is Enabled and
     * storageEndpoint is specified, storageAccountAccessKey is required.
     *
     * @param {number} [parameters.retentionDays] Specifies the number of days to
     * keep in the audit logs in the storage account.
     *
     * @param {array} [parameters.auditActionsAndGroups] Specifies the
     * Actions-Groups and Actions to audit.
     *
     * The recommended set of action groups to use is the following combination -
     * this will audit all the queries and stored procedures executed against the
     * database, as well as successful and failed logins:
     *
     * BATCH_COMPLETED_GROUP,
     * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
     * FAILED_DATABASE_AUTHENTICATION_GROUP.
     *
     * This above combination is also the set that is configured by default when
     * enabling auditing from the Azure portal.
     *
     * The supported action groups to audit are (note: choose only specific groups
     * that cover your auditing needs. Using unnecessary groups could lead to very
     * large quantities of audit records):
     *
     * APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
     * BACKUP_RESTORE_GROUP
     * DATABASE_LOGOUT_GROUP
     * DATABASE_OBJECT_CHANGE_GROUP
     * DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
     * DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
     * DATABASE_OPERATION_GROUP
     * DATABASE_PERMISSION_CHANGE_GROUP
     * DATABASE_PRINCIPAL_CHANGE_GROUP
     * DATABASE_PRINCIPAL_IMPERSONATION_GROUP
     * DATABASE_ROLE_MEMBER_CHANGE_GROUP
     * FAILED_DATABASE_AUTHENTICATION_GROUP
     * SCHEMA_OBJECT_ACCESS_GROUP
     * SCHEMA_OBJECT_CHANGE_GROUP
     * SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
     * SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
     * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
     * USER_CHANGE_PASSWORD_GROUP
     * BATCH_STARTED_GROUP
     * BATCH_COMPLETED_GROUP
     *
     * These are groups that cover all sql statements and stored procedures
     * executed against the database, and should not be used in combination with
     * other groups as this will result in duplicate audit logs.
     *
     * For more information, see [Database-Level Audit Action
     * Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
     *
     * For Database auditing policy, specific Actions can also be specified (note
     * that Actions cannot be specified for Server auditing policy). The supported
     * actions to audit are:
     * SELECT
     * UPDATE
     * INSERT
     * DELETE
     * EXECUTE
     * RECEIVE
     * REFERENCES
     *
     * The general form for defining an action to be audited is:
     * {action} ON {object} BY {principal}
     *
     * Note that <object> in the above format can refer to an object like a table,
     * view, or stored procedure, or an entire database or schema. For the latter
     * cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used,
     * respectively.
     *
     * For example:
     * SELECT on dbo.myTable by public
     * SELECT on DATABASE::myDatabase by public
     * SELECT on SCHEMA::mySchema by public
     *
     * For more information, see [Database-Level Audit
     * Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
     *
     * @param {uuid} [parameters.storageAccountSubscriptionId] Specifies the blob
     * storage subscription Id.
     *
     * @param {boolean} [parameters.isStorageSecondaryKeyInUse] Specifies whether
     * storageAccountAccessKey value is the storage's secondary key.
     *
     * @param {boolean} [parameters.isAzureMonitorTargetEnabled] Specifies whether
     * audit events are sent to Azure Monitor.
     * In order to send the events to Azure Monitor, specify 'State' as 'Enabled'
     * and 'IsAzureMonitorTargetEnabled' as true.
     *
     * When using REST API to configure auditing, Diagnostic Settings with
     * 'SQLSecurityAuditEvents' diagnostic logs category on the database should be
     * also created.
     * Note that for server level audit you should use the 'master' database as
     * {databaseName}.
     *
     * Diagnostic Settings URI format:
     * PUT
     * https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
     *
     * For more information, see [Diagnostic Settings REST
     * API](https://go.microsoft.com/fwlink/?linkid=2033207)
     * or [Diagnostic Settings
     * PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
     *
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ExtendedServerBlobAuditingPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, parameters: models.ExtendedServerBlobAuditingPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExtendedServerBlobAuditingPolicy>>;

    /**
     * Creates or updates an extended server's blob auditing policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters Properties of extended blob auditing policy
     *
     * @param {string} [parameters.predicateExpression] Specifies condition of
     * where clause when creating an audit.
     *
     * @param {string} parameters.state Specifies the state of the policy. If state
     * is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.
     * Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.storageEndpoint] Specifies the blob storage
     * endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is
     * Enabled, storageEndpoint is required.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the auditing storage account. If state is Enabled and
     * storageEndpoint is specified, storageAccountAccessKey is required.
     *
     * @param {number} [parameters.retentionDays] Specifies the number of days to
     * keep in the audit logs in the storage account.
     *
     * @param {array} [parameters.auditActionsAndGroups] Specifies the
     * Actions-Groups and Actions to audit.
     *
     * The recommended set of action groups to use is the following combination -
     * this will audit all the queries and stored procedures executed against the
     * database, as well as successful and failed logins:
     *
     * BATCH_COMPLETED_GROUP,
     * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
     * FAILED_DATABASE_AUTHENTICATION_GROUP.
     *
     * This above combination is also the set that is configured by default when
     * enabling auditing from the Azure portal.
     *
     * The supported action groups to audit are (note: choose only specific groups
     * that cover your auditing needs. Using unnecessary groups could lead to very
     * large quantities of audit records):
     *
     * APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
     * BACKUP_RESTORE_GROUP
     * DATABASE_LOGOUT_GROUP
     * DATABASE_OBJECT_CHANGE_GROUP
     * DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
     * DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
     * DATABASE_OPERATION_GROUP
     * DATABASE_PERMISSION_CHANGE_GROUP
     * DATABASE_PRINCIPAL_CHANGE_GROUP
     * DATABASE_PRINCIPAL_IMPERSONATION_GROUP
     * DATABASE_ROLE_MEMBER_CHANGE_GROUP
     * FAILED_DATABASE_AUTHENTICATION_GROUP
     * SCHEMA_OBJECT_ACCESS_GROUP
     * SCHEMA_OBJECT_CHANGE_GROUP
     * SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
     * SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
     * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
     * USER_CHANGE_PASSWORD_GROUP
     * BATCH_STARTED_GROUP
     * BATCH_COMPLETED_GROUP
     *
     * These are groups that cover all sql statements and stored procedures
     * executed against the database, and should not be used in combination with
     * other groups as this will result in duplicate audit logs.
     *
     * For more information, see [Database-Level Audit Action
     * Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
     *
     * For Database auditing policy, specific Actions can also be specified (note
     * that Actions cannot be specified for Server auditing policy). The supported
     * actions to audit are:
     * SELECT
     * UPDATE
     * INSERT
     * DELETE
     * EXECUTE
     * RECEIVE
     * REFERENCES
     *
     * The general form for defining an action to be audited is:
     * {action} ON {object} BY {principal}
     *
     * Note that <object> in the above format can refer to an object like a table,
     * view, or stored procedure, or an entire database or schema. For the latter
     * cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used,
     * respectively.
     *
     * For example:
     * SELECT on dbo.myTable by public
     * SELECT on DATABASE::myDatabase by public
     * SELECT on SCHEMA::mySchema by public
     *
     * For more information, see [Database-Level Audit
     * Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
     *
     * @param {uuid} [parameters.storageAccountSubscriptionId] Specifies the blob
     * storage subscription Id.
     *
     * @param {boolean} [parameters.isStorageSecondaryKeyInUse] Specifies whether
     * storageAccountAccessKey value is the storage's secondary key.
     *
     * @param {boolean} [parameters.isAzureMonitorTargetEnabled] Specifies whether
     * audit events are sent to Azure Monitor.
     * In order to send the events to Azure Monitor, specify 'State' as 'Enabled'
     * and 'IsAzureMonitorTargetEnabled' as true.
     *
     * When using REST API to configure auditing, Diagnostic Settings with
     * 'SQLSecurityAuditEvents' diagnostic logs category on the database should be
     * also created.
     * Note that for server level audit you should use the 'master' database as
     * {databaseName}.
     *
     * Diagnostic Settings URI format:
     * PUT
     * https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
     *
     * For more information, see [Diagnostic Settings REST
     * API](https://go.microsoft.com/fwlink/?linkid=2033207)
     * or [Diagnostic Settings
     * PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
     *
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ExtendedServerBlobAuditingPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ExtendedServerBlobAuditingPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ExtendedServerBlobAuditingPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, parameters: models.ExtendedServerBlobAuditingPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExtendedServerBlobAuditingPolicy>;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, parameters: models.ExtendedServerBlobAuditingPolicy, callback: ServiceCallback<models.ExtendedServerBlobAuditingPolicy>): void;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, parameters: models.ExtendedServerBlobAuditingPolicy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExtendedServerBlobAuditingPolicy>): void;
}

/**
 * @class
 * ServerBlobAuditingPolicies
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface ServerBlobAuditingPolicies {


    /**
     * Gets a server's blob auditing policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerBlobAuditingPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerBlobAuditingPolicy>>;

    /**
     * Gets a server's blob auditing policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerBlobAuditingPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerBlobAuditingPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerBlobAuditingPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerBlobAuditingPolicy>;
    get(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.ServerBlobAuditingPolicy>): void;
    get(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerBlobAuditingPolicy>): void;


    /**
     * Creates or updates a server's blob auditing policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters Properties of blob auditing policy
     *
     * @param {string} parameters.state Specifies the state of the policy. If state
     * is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.
     * Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.storageEndpoint] Specifies the blob storage
     * endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is
     * Enabled, storageEndpoint is required.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the auditing storage account. If state is Enabled and
     * storageEndpoint is specified, storageAccountAccessKey is required.
     *
     * @param {number} [parameters.retentionDays] Specifies the number of days to
     * keep in the audit logs in the storage account.
     *
     * @param {array} [parameters.auditActionsAndGroups] Specifies the
     * Actions-Groups and Actions to audit.
     *
     * The recommended set of action groups to use is the following combination -
     * this will audit all the queries and stored procedures executed against the
     * database, as well as successful and failed logins:
     *
     * BATCH_COMPLETED_GROUP,
     * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
     * FAILED_DATABASE_AUTHENTICATION_GROUP.
     *
     * This above combination is also the set that is configured by default when
     * enabling auditing from the Azure portal.
     *
     * The supported action groups to audit are (note: choose only specific groups
     * that cover your auditing needs. Using unnecessary groups could lead to very
     * large quantities of audit records):
     *
     * APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
     * BACKUP_RESTORE_GROUP
     * DATABASE_LOGOUT_GROUP
     * DATABASE_OBJECT_CHANGE_GROUP
     * DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
     * DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
     * DATABASE_OPERATION_GROUP
     * DATABASE_PERMISSION_CHANGE_GROUP
     * DATABASE_PRINCIPAL_CHANGE_GROUP
     * DATABASE_PRINCIPAL_IMPERSONATION_GROUP
     * DATABASE_ROLE_MEMBER_CHANGE_GROUP
     * FAILED_DATABASE_AUTHENTICATION_GROUP
     * SCHEMA_OBJECT_ACCESS_GROUP
     * SCHEMA_OBJECT_CHANGE_GROUP
     * SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
     * SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
     * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
     * USER_CHANGE_PASSWORD_GROUP
     * BATCH_STARTED_GROUP
     * BATCH_COMPLETED_GROUP
     *
     * These are groups that cover all sql statements and stored procedures
     * executed against the database, and should not be used in combination with
     * other groups as this will result in duplicate audit logs.
     *
     * For more information, see [Database-Level Audit Action
     * Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
     *
     * For Database auditing policy, specific Actions can also be specified (note
     * that Actions cannot be specified for Server auditing policy). The supported
     * actions to audit are:
     * SELECT
     * UPDATE
     * INSERT
     * DELETE
     * EXECUTE
     * RECEIVE
     * REFERENCES
     *
     * The general form for defining an action to be audited is:
     * {action} ON {object} BY {principal}
     *
     * Note that <object> in the above format can refer to an object like a table,
     * view, or stored procedure, or an entire database or schema. For the latter
     * cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used,
     * respectively.
     *
     * For example:
     * SELECT on dbo.myTable by public
     * SELECT on DATABASE::myDatabase by public
     * SELECT on SCHEMA::mySchema by public
     *
     * For more information, see [Database-Level Audit
     * Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
     *
     * @param {uuid} [parameters.storageAccountSubscriptionId] Specifies the blob
     * storage subscription Id.
     *
     * @param {boolean} [parameters.isStorageSecondaryKeyInUse] Specifies whether
     * storageAccountAccessKey value is the storage's secondary key.
     *
     * @param {boolean} [parameters.isAzureMonitorTargetEnabled] Specifies whether
     * audit events are sent to Azure Monitor.
     * In order to send the events to Azure Monitor, specify 'State' as 'Enabled'
     * and 'IsAzureMonitorTargetEnabled' as true.
     *
     * When using REST API to configure auditing, Diagnostic Settings with
     * 'SQLSecurityAuditEvents' diagnostic logs category on the database should be
     * also created.
     * Note that for server level audit you should use the 'master' database as
     * {databaseName}.
     *
     * Diagnostic Settings URI format:
     * PUT
     * https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
     *
     * For more information, see [Diagnostic Settings REST
     * API](https://go.microsoft.com/fwlink/?linkid=2033207)
     * or [Diagnostic Settings
     * PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
     *
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerBlobAuditingPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, parameters: models.ServerBlobAuditingPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerBlobAuditingPolicy>>;

    /**
     * Creates or updates a server's blob auditing policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters Properties of blob auditing policy
     *
     * @param {string} parameters.state Specifies the state of the policy. If state
     * is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.
     * Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.storageEndpoint] Specifies the blob storage
     * endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is
     * Enabled, storageEndpoint is required.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the auditing storage account. If state is Enabled and
     * storageEndpoint is specified, storageAccountAccessKey is required.
     *
     * @param {number} [parameters.retentionDays] Specifies the number of days to
     * keep in the audit logs in the storage account.
     *
     * @param {array} [parameters.auditActionsAndGroups] Specifies the
     * Actions-Groups and Actions to audit.
     *
     * The recommended set of action groups to use is the following combination -
     * this will audit all the queries and stored procedures executed against the
     * database, as well as successful and failed logins:
     *
     * BATCH_COMPLETED_GROUP,
     * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
     * FAILED_DATABASE_AUTHENTICATION_GROUP.
     *
     * This above combination is also the set that is configured by default when
     * enabling auditing from the Azure portal.
     *
     * The supported action groups to audit are (note: choose only specific groups
     * that cover your auditing needs. Using unnecessary groups could lead to very
     * large quantities of audit records):
     *
     * APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
     * BACKUP_RESTORE_GROUP
     * DATABASE_LOGOUT_GROUP
     * DATABASE_OBJECT_CHANGE_GROUP
     * DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
     * DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
     * DATABASE_OPERATION_GROUP
     * DATABASE_PERMISSION_CHANGE_GROUP
     * DATABASE_PRINCIPAL_CHANGE_GROUP
     * DATABASE_PRINCIPAL_IMPERSONATION_GROUP
     * DATABASE_ROLE_MEMBER_CHANGE_GROUP
     * FAILED_DATABASE_AUTHENTICATION_GROUP
     * SCHEMA_OBJECT_ACCESS_GROUP
     * SCHEMA_OBJECT_CHANGE_GROUP
     * SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
     * SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
     * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
     * USER_CHANGE_PASSWORD_GROUP
     * BATCH_STARTED_GROUP
     * BATCH_COMPLETED_GROUP
     *
     * These are groups that cover all sql statements and stored procedures
     * executed against the database, and should not be used in combination with
     * other groups as this will result in duplicate audit logs.
     *
     * For more information, see [Database-Level Audit Action
     * Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
     *
     * For Database auditing policy, specific Actions can also be specified (note
     * that Actions cannot be specified for Server auditing policy). The supported
     * actions to audit are:
     * SELECT
     * UPDATE
     * INSERT
     * DELETE
     * EXECUTE
     * RECEIVE
     * REFERENCES
     *
     * The general form for defining an action to be audited is:
     * {action} ON {object} BY {principal}
     *
     * Note that <object> in the above format can refer to an object like a table,
     * view, or stored procedure, or an entire database or schema. For the latter
     * cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used,
     * respectively.
     *
     * For example:
     * SELECT on dbo.myTable by public
     * SELECT on DATABASE::myDatabase by public
     * SELECT on SCHEMA::mySchema by public
     *
     * For more information, see [Database-Level Audit
     * Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
     *
     * @param {uuid} [parameters.storageAccountSubscriptionId] Specifies the blob
     * storage subscription Id.
     *
     * @param {boolean} [parameters.isStorageSecondaryKeyInUse] Specifies whether
     * storageAccountAccessKey value is the storage's secondary key.
     *
     * @param {boolean} [parameters.isAzureMonitorTargetEnabled] Specifies whether
     * audit events are sent to Azure Monitor.
     * In order to send the events to Azure Monitor, specify 'State' as 'Enabled'
     * and 'IsAzureMonitorTargetEnabled' as true.
     *
     * When using REST API to configure auditing, Diagnostic Settings with
     * 'SQLSecurityAuditEvents' diagnostic logs category on the database should be
     * also created.
     * Note that for server level audit you should use the 'master' database as
     * {databaseName}.
     *
     * Diagnostic Settings URI format:
     * PUT
     * https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
     *
     * For more information, see [Diagnostic Settings REST
     * API](https://go.microsoft.com/fwlink/?linkid=2033207)
     * or [Diagnostic Settings
     * PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
     *
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerBlobAuditingPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerBlobAuditingPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerBlobAuditingPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, parameters: models.ServerBlobAuditingPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerBlobAuditingPolicy>;
    createOrUpdate(resourceGroupName: string, serverName: string, parameters: models.ServerBlobAuditingPolicy, callback: ServiceCallback<models.ServerBlobAuditingPolicy>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, parameters: models.ServerBlobAuditingPolicy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerBlobAuditingPolicy>): void;


    /**
     * Creates or updates a server's blob auditing policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters Properties of blob auditing policy
     *
     * @param {string} parameters.state Specifies the state of the policy. If state
     * is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.
     * Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.storageEndpoint] Specifies the blob storage
     * endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is
     * Enabled, storageEndpoint is required.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the auditing storage account. If state is Enabled and
     * storageEndpoint is specified, storageAccountAccessKey is required.
     *
     * @param {number} [parameters.retentionDays] Specifies the number of days to
     * keep in the audit logs in the storage account.
     *
     * @param {array} [parameters.auditActionsAndGroups] Specifies the
     * Actions-Groups and Actions to audit.
     *
     * The recommended set of action groups to use is the following combination -
     * this will audit all the queries and stored procedures executed against the
     * database, as well as successful and failed logins:
     *
     * BATCH_COMPLETED_GROUP,
     * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
     * FAILED_DATABASE_AUTHENTICATION_GROUP.
     *
     * This above combination is also the set that is configured by default when
     * enabling auditing from the Azure portal.
     *
     * The supported action groups to audit are (note: choose only specific groups
     * that cover your auditing needs. Using unnecessary groups could lead to very
     * large quantities of audit records):
     *
     * APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
     * BACKUP_RESTORE_GROUP
     * DATABASE_LOGOUT_GROUP
     * DATABASE_OBJECT_CHANGE_GROUP
     * DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
     * DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
     * DATABASE_OPERATION_GROUP
     * DATABASE_PERMISSION_CHANGE_GROUP
     * DATABASE_PRINCIPAL_CHANGE_GROUP
     * DATABASE_PRINCIPAL_IMPERSONATION_GROUP
     * DATABASE_ROLE_MEMBER_CHANGE_GROUP
     * FAILED_DATABASE_AUTHENTICATION_GROUP
     * SCHEMA_OBJECT_ACCESS_GROUP
     * SCHEMA_OBJECT_CHANGE_GROUP
     * SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
     * SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
     * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
     * USER_CHANGE_PASSWORD_GROUP
     * BATCH_STARTED_GROUP
     * BATCH_COMPLETED_GROUP
     *
     * These are groups that cover all sql statements and stored procedures
     * executed against the database, and should not be used in combination with
     * other groups as this will result in duplicate audit logs.
     *
     * For more information, see [Database-Level Audit Action
     * Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
     *
     * For Database auditing policy, specific Actions can also be specified (note
     * that Actions cannot be specified for Server auditing policy). The supported
     * actions to audit are:
     * SELECT
     * UPDATE
     * INSERT
     * DELETE
     * EXECUTE
     * RECEIVE
     * REFERENCES
     *
     * The general form for defining an action to be audited is:
     * {action} ON {object} BY {principal}
     *
     * Note that <object> in the above format can refer to an object like a table,
     * view, or stored procedure, or an entire database or schema. For the latter
     * cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used,
     * respectively.
     *
     * For example:
     * SELECT on dbo.myTable by public
     * SELECT on DATABASE::myDatabase by public
     * SELECT on SCHEMA::mySchema by public
     *
     * For more information, see [Database-Level Audit
     * Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
     *
     * @param {uuid} [parameters.storageAccountSubscriptionId] Specifies the blob
     * storage subscription Id.
     *
     * @param {boolean} [parameters.isStorageSecondaryKeyInUse] Specifies whether
     * storageAccountAccessKey value is the storage's secondary key.
     *
     * @param {boolean} [parameters.isAzureMonitorTargetEnabled] Specifies whether
     * audit events are sent to Azure Monitor.
     * In order to send the events to Azure Monitor, specify 'State' as 'Enabled'
     * and 'IsAzureMonitorTargetEnabled' as true.
     *
     * When using REST API to configure auditing, Diagnostic Settings with
     * 'SQLSecurityAuditEvents' diagnostic logs category on the database should be
     * also created.
     * Note that for server level audit you should use the 'master' database as
     * {databaseName}.
     *
     * Diagnostic Settings URI format:
     * PUT
     * https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
     *
     * For more information, see [Diagnostic Settings REST
     * API](https://go.microsoft.com/fwlink/?linkid=2033207)
     * or [Diagnostic Settings
     * PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
     *
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerBlobAuditingPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, parameters: models.ServerBlobAuditingPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerBlobAuditingPolicy>>;

    /**
     * Creates or updates a server's blob auditing policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters Properties of blob auditing policy
     *
     * @param {string} parameters.state Specifies the state of the policy. If state
     * is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.
     * Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.storageEndpoint] Specifies the blob storage
     * endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is
     * Enabled, storageEndpoint is required.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the auditing storage account. If state is Enabled and
     * storageEndpoint is specified, storageAccountAccessKey is required.
     *
     * @param {number} [parameters.retentionDays] Specifies the number of days to
     * keep in the audit logs in the storage account.
     *
     * @param {array} [parameters.auditActionsAndGroups] Specifies the
     * Actions-Groups and Actions to audit.
     *
     * The recommended set of action groups to use is the following combination -
     * this will audit all the queries and stored procedures executed against the
     * database, as well as successful and failed logins:
     *
     * BATCH_COMPLETED_GROUP,
     * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
     * FAILED_DATABASE_AUTHENTICATION_GROUP.
     *
     * This above combination is also the set that is configured by default when
     * enabling auditing from the Azure portal.
     *
     * The supported action groups to audit are (note: choose only specific groups
     * that cover your auditing needs. Using unnecessary groups could lead to very
     * large quantities of audit records):
     *
     * APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
     * BACKUP_RESTORE_GROUP
     * DATABASE_LOGOUT_GROUP
     * DATABASE_OBJECT_CHANGE_GROUP
     * DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
     * DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
     * DATABASE_OPERATION_GROUP
     * DATABASE_PERMISSION_CHANGE_GROUP
     * DATABASE_PRINCIPAL_CHANGE_GROUP
     * DATABASE_PRINCIPAL_IMPERSONATION_GROUP
     * DATABASE_ROLE_MEMBER_CHANGE_GROUP
     * FAILED_DATABASE_AUTHENTICATION_GROUP
     * SCHEMA_OBJECT_ACCESS_GROUP
     * SCHEMA_OBJECT_CHANGE_GROUP
     * SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
     * SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
     * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
     * USER_CHANGE_PASSWORD_GROUP
     * BATCH_STARTED_GROUP
     * BATCH_COMPLETED_GROUP
     *
     * These are groups that cover all sql statements and stored procedures
     * executed against the database, and should not be used in combination with
     * other groups as this will result in duplicate audit logs.
     *
     * For more information, see [Database-Level Audit Action
     * Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
     *
     * For Database auditing policy, specific Actions can also be specified (note
     * that Actions cannot be specified for Server auditing policy). The supported
     * actions to audit are:
     * SELECT
     * UPDATE
     * INSERT
     * DELETE
     * EXECUTE
     * RECEIVE
     * REFERENCES
     *
     * The general form for defining an action to be audited is:
     * {action} ON {object} BY {principal}
     *
     * Note that <object> in the above format can refer to an object like a table,
     * view, or stored procedure, or an entire database or schema. For the latter
     * cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used,
     * respectively.
     *
     * For example:
     * SELECT on dbo.myTable by public
     * SELECT on DATABASE::myDatabase by public
     * SELECT on SCHEMA::mySchema by public
     *
     * For more information, see [Database-Level Audit
     * Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
     *
     * @param {uuid} [parameters.storageAccountSubscriptionId] Specifies the blob
     * storage subscription Id.
     *
     * @param {boolean} [parameters.isStorageSecondaryKeyInUse] Specifies whether
     * storageAccountAccessKey value is the storage's secondary key.
     *
     * @param {boolean} [parameters.isAzureMonitorTargetEnabled] Specifies whether
     * audit events are sent to Azure Monitor.
     * In order to send the events to Azure Monitor, specify 'State' as 'Enabled'
     * and 'IsAzureMonitorTargetEnabled' as true.
     *
     * When using REST API to configure auditing, Diagnostic Settings with
     * 'SQLSecurityAuditEvents' diagnostic logs category on the database should be
     * also created.
     * Note that for server level audit you should use the 'master' database as
     * {databaseName}.
     *
     * Diagnostic Settings URI format:
     * PUT
     * https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
     *
     * For more information, see [Diagnostic Settings REST
     * API](https://go.microsoft.com/fwlink/?linkid=2033207)
     * or [Diagnostic Settings
     * PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
     *
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerBlobAuditingPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerBlobAuditingPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerBlobAuditingPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, parameters: models.ServerBlobAuditingPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerBlobAuditingPolicy>;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, parameters: models.ServerBlobAuditingPolicy, callback: ServiceCallback<models.ServerBlobAuditingPolicy>): void;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, parameters: models.ServerBlobAuditingPolicy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerBlobAuditingPolicy>): void;
}

/**
 * @class
 * DatabaseBlobAuditingPolicies
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface DatabaseBlobAuditingPolicies {


    /**
     * Gets a database's blob auditing policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseBlobAuditingPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseBlobAuditingPolicy>>;

    /**
     * Gets a database's blob auditing policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseBlobAuditingPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseBlobAuditingPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseBlobAuditingPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseBlobAuditingPolicy>;
    get(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.DatabaseBlobAuditingPolicy>): void;
    get(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseBlobAuditingPolicy>): void;


    /**
     * Creates or updates a database's blob auditing policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The database blob auditing policy.
     *
     * @param {string} parameters.state Specifies the state of the policy. If state
     * is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.
     * Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.storageEndpoint] Specifies the blob storage
     * endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is
     * Enabled, storageEndpoint is required.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the auditing storage account. If state is Enabled and
     * storageEndpoint is specified, storageAccountAccessKey is required.
     *
     * @param {number} [parameters.retentionDays] Specifies the number of days to
     * keep in the audit logs in the storage account.
     *
     * @param {array} [parameters.auditActionsAndGroups] Specifies the
     * Actions-Groups and Actions to audit.
     *
     * The recommended set of action groups to use is the following combination -
     * this will audit all the queries and stored procedures executed against the
     * database, as well as successful and failed logins:
     *
     * BATCH_COMPLETED_GROUP,
     * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
     * FAILED_DATABASE_AUTHENTICATION_GROUP.
     *
     * This above combination is also the set that is configured by default when
     * enabling auditing from the Azure portal.
     *
     * The supported action groups to audit are (note: choose only specific groups
     * that cover your auditing needs. Using unnecessary groups could lead to very
     * large quantities of audit records):
     *
     * APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
     * BACKUP_RESTORE_GROUP
     * DATABASE_LOGOUT_GROUP
     * DATABASE_OBJECT_CHANGE_GROUP
     * DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
     * DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
     * DATABASE_OPERATION_GROUP
     * DATABASE_PERMISSION_CHANGE_GROUP
     * DATABASE_PRINCIPAL_CHANGE_GROUP
     * DATABASE_PRINCIPAL_IMPERSONATION_GROUP
     * DATABASE_ROLE_MEMBER_CHANGE_GROUP
     * FAILED_DATABASE_AUTHENTICATION_GROUP
     * SCHEMA_OBJECT_ACCESS_GROUP
     * SCHEMA_OBJECT_CHANGE_GROUP
     * SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
     * SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
     * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
     * USER_CHANGE_PASSWORD_GROUP
     * BATCH_STARTED_GROUP
     * BATCH_COMPLETED_GROUP
     *
     * These are groups that cover all sql statements and stored procedures
     * executed against the database, and should not be used in combination with
     * other groups as this will result in duplicate audit logs.
     *
     * For more information, see [Database-Level Audit Action
     * Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
     *
     * For Database auditing policy, specific Actions can also be specified (note
     * that Actions cannot be specified for Server auditing policy). The supported
     * actions to audit are:
     * SELECT
     * UPDATE
     * INSERT
     * DELETE
     * EXECUTE
     * RECEIVE
     * REFERENCES
     *
     * The general form for defining an action to be audited is:
     * {action} ON {object} BY {principal}
     *
     * Note that <object> in the above format can refer to an object like a table,
     * view, or stored procedure, or an entire database or schema. For the latter
     * cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used,
     * respectively.
     *
     * For example:
     * SELECT on dbo.myTable by public
     * SELECT on DATABASE::myDatabase by public
     * SELECT on SCHEMA::mySchema by public
     *
     * For more information, see [Database-Level Audit
     * Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
     *
     * @param {uuid} [parameters.storageAccountSubscriptionId] Specifies the blob
     * storage subscription Id.
     *
     * @param {boolean} [parameters.isStorageSecondaryKeyInUse] Specifies whether
     * storageAccountAccessKey value is the storage's secondary key.
     *
     * @param {boolean} [parameters.isAzureMonitorTargetEnabled] Specifies whether
     * audit events are sent to Azure Monitor.
     * In order to send the events to Azure Monitor, specify 'State' as 'Enabled'
     * and 'IsAzureMonitorTargetEnabled' as true.
     *
     * When using REST API to configure auditing, Diagnostic Settings with
     * 'SQLSecurityAuditEvents' diagnostic logs category on the database should be
     * also created.
     * Note that for server level audit you should use the 'master' database as
     * {databaseName}.
     *
     * Diagnostic Settings URI format:
     * PUT
     * https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
     *
     * For more information, see [Diagnostic Settings REST
     * API](https://go.microsoft.com/fwlink/?linkid=2033207)
     * or [Diagnostic Settings
     * PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
     *
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseBlobAuditingPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DatabaseBlobAuditingPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseBlobAuditingPolicy>>;

    /**
     * Creates or updates a database's blob auditing policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The database blob auditing policy.
     *
     * @param {string} parameters.state Specifies the state of the policy. If state
     * is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.
     * Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [parameters.storageEndpoint] Specifies the blob storage
     * endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is
     * Enabled, storageEndpoint is required.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the auditing storage account. If state is Enabled and
     * storageEndpoint is specified, storageAccountAccessKey is required.
     *
     * @param {number} [parameters.retentionDays] Specifies the number of days to
     * keep in the audit logs in the storage account.
     *
     * @param {array} [parameters.auditActionsAndGroups] Specifies the
     * Actions-Groups and Actions to audit.
     *
     * The recommended set of action groups to use is the following combination -
     * this will audit all the queries and stored procedures executed against the
     * database, as well as successful and failed logins:
     *
     * BATCH_COMPLETED_GROUP,
     * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
     * FAILED_DATABASE_AUTHENTICATION_GROUP.
     *
     * This above combination is also the set that is configured by default when
     * enabling auditing from the Azure portal.
     *
     * The supported action groups to audit are (note: choose only specific groups
     * that cover your auditing needs. Using unnecessary groups could lead to very
     * large quantities of audit records):
     *
     * APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
     * BACKUP_RESTORE_GROUP
     * DATABASE_LOGOUT_GROUP
     * DATABASE_OBJECT_CHANGE_GROUP
     * DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
     * DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
     * DATABASE_OPERATION_GROUP
     * DATABASE_PERMISSION_CHANGE_GROUP
     * DATABASE_PRINCIPAL_CHANGE_GROUP
     * DATABASE_PRINCIPAL_IMPERSONATION_GROUP
     * DATABASE_ROLE_MEMBER_CHANGE_GROUP
     * FAILED_DATABASE_AUTHENTICATION_GROUP
     * SCHEMA_OBJECT_ACCESS_GROUP
     * SCHEMA_OBJECT_CHANGE_GROUP
     * SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
     * SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
     * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
     * USER_CHANGE_PASSWORD_GROUP
     * BATCH_STARTED_GROUP
     * BATCH_COMPLETED_GROUP
     *
     * These are groups that cover all sql statements and stored procedures
     * executed against the database, and should not be used in combination with
     * other groups as this will result in duplicate audit logs.
     *
     * For more information, see [Database-Level Audit Action
     * Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
     *
     * For Database auditing policy, specific Actions can also be specified (note
     * that Actions cannot be specified for Server auditing policy). The supported
     * actions to audit are:
     * SELECT
     * UPDATE
     * INSERT
     * DELETE
     * EXECUTE
     * RECEIVE
     * REFERENCES
     *
     * The general form for defining an action to be audited is:
     * {action} ON {object} BY {principal}
     *
     * Note that <object> in the above format can refer to an object like a table,
     * view, or stored procedure, or an entire database or schema. For the latter
     * cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used,
     * respectively.
     *
     * For example:
     * SELECT on dbo.myTable by public
     * SELECT on DATABASE::myDatabase by public
     * SELECT on SCHEMA::mySchema by public
     *
     * For more information, see [Database-Level Audit
     * Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
     *
     * @param {uuid} [parameters.storageAccountSubscriptionId] Specifies the blob
     * storage subscription Id.
     *
     * @param {boolean} [parameters.isStorageSecondaryKeyInUse] Specifies whether
     * storageAccountAccessKey value is the storage's secondary key.
     *
     * @param {boolean} [parameters.isAzureMonitorTargetEnabled] Specifies whether
     * audit events are sent to Azure Monitor.
     * In order to send the events to Azure Monitor, specify 'State' as 'Enabled'
     * and 'IsAzureMonitorTargetEnabled' as true.
     *
     * When using REST API to configure auditing, Diagnostic Settings with
     * 'SQLSecurityAuditEvents' diagnostic logs category on the database should be
     * also created.
     * Note that for server level audit you should use the 'master' database as
     * {databaseName}.
     *
     * Diagnostic Settings URI format:
     * PUT
     * https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
     *
     * For more information, see [Diagnostic Settings REST
     * API](https://go.microsoft.com/fwlink/?linkid=2033207)
     * or [Diagnostic Settings
     * PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
     *
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseBlobAuditingPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseBlobAuditingPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseBlobAuditingPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DatabaseBlobAuditingPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseBlobAuditingPolicy>;
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DatabaseBlobAuditingPolicy, callback: ServiceCallback<models.DatabaseBlobAuditingPolicy>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DatabaseBlobAuditingPolicy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseBlobAuditingPolicy>): void;
}

/**
 * @class
 * DatabaseVulnerabilityAssessmentRuleBaselines
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface DatabaseVulnerabilityAssessmentRuleBaselines {


    /**
     * Gets a database's vulnerability assessment rule baseline.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which the
     * vulnerability assessment rule baseline is defined.
     *
     * @param {string} ruleId The vulnerability assessment rule ID.
     *
     * @param {string} baselineName The name of the vulnerability assessment rule
     * baseline (default implies a baseline on a database level rule and master for
     * server level rule). Possible values include: 'master', 'default'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseVulnerabilityAssessmentRuleBaseline>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, ruleId: string, baselineName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseVulnerabilityAssessmentRuleBaseline>>;

    /**
     * Gets a database's vulnerability assessment rule baseline.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which the
     * vulnerability assessment rule baseline is defined.
     *
     * @param {string} ruleId The vulnerability assessment rule ID.
     *
     * @param {string} baselineName The name of the vulnerability assessment rule
     * baseline (default implies a baseline on a database level rule and master for
     * server level rule). Possible values include: 'master', 'default'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseVulnerabilityAssessmentRuleBaseline} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseVulnerabilityAssessmentRuleBaseline} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseVulnerabilityAssessmentRuleBaseline}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, databaseName: string, ruleId: string, baselineName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseVulnerabilityAssessmentRuleBaseline>;
    get(resourceGroupName: string, serverName: string, databaseName: string, ruleId: string, baselineName: string, callback: ServiceCallback<models.DatabaseVulnerabilityAssessmentRuleBaseline>): void;
    get(resourceGroupName: string, serverName: string, databaseName: string, ruleId: string, baselineName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseVulnerabilityAssessmentRuleBaseline>): void;


    /**
     * Creates or updates a database's vulnerability assessment rule baseline.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which the
     * vulnerability assessment rule baseline is defined.
     *
     * @param {string} ruleId The vulnerability assessment rule ID.
     *
     * @param {string} baselineName The name of the vulnerability assessment rule
     * baseline (default implies a baseline on a database level rule and master for
     * server level rule). Possible values include: 'master', 'default'
     *
     * @param {object} parameters The requested rule baseline resource.
     *
     * @param {array} parameters.baselineResults The rule baseline result
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseVulnerabilityAssessmentRuleBaseline>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, ruleId: string, baselineName: string, parameters: models.DatabaseVulnerabilityAssessmentRuleBaseline, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseVulnerabilityAssessmentRuleBaseline>>;

    /**
     * Creates or updates a database's vulnerability assessment rule baseline.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which the
     * vulnerability assessment rule baseline is defined.
     *
     * @param {string} ruleId The vulnerability assessment rule ID.
     *
     * @param {string} baselineName The name of the vulnerability assessment rule
     * baseline (default implies a baseline on a database level rule and master for
     * server level rule). Possible values include: 'master', 'default'
     *
     * @param {object} parameters The requested rule baseline resource.
     *
     * @param {array} parameters.baselineResults The rule baseline result
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseVulnerabilityAssessmentRuleBaseline} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseVulnerabilityAssessmentRuleBaseline} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseVulnerabilityAssessmentRuleBaseline}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, ruleId: string, baselineName: string, parameters: models.DatabaseVulnerabilityAssessmentRuleBaseline, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseVulnerabilityAssessmentRuleBaseline>;
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, ruleId: string, baselineName: string, parameters: models.DatabaseVulnerabilityAssessmentRuleBaseline, callback: ServiceCallback<models.DatabaseVulnerabilityAssessmentRuleBaseline>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, ruleId: string, baselineName: string, parameters: models.DatabaseVulnerabilityAssessmentRuleBaseline, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseVulnerabilityAssessmentRuleBaseline>): void;


    /**
     * Removes the database's vulnerability assessment rule baseline.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which the
     * vulnerability assessment rule baseline is defined.
     *
     * @param {string} ruleId The vulnerability assessment rule ID.
     *
     * @param {string} baselineName The name of the vulnerability assessment rule
     * baseline (default implies a baseline on a database level rule and master for
     * server level rule). Possible values include: 'master', 'default'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, ruleId: string, baselineName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Removes the database's vulnerability assessment rule baseline.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which the
     * vulnerability assessment rule baseline is defined.
     *
     * @param {string} ruleId The vulnerability assessment rule ID.
     *
     * @param {string} baselineName The name of the vulnerability assessment rule
     * baseline (default implies a baseline on a database level rule and master for
     * server level rule). Possible values include: 'master', 'default'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serverName: string, databaseName: string, ruleId: string, baselineName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serverName: string, databaseName: string, ruleId: string, baselineName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serverName: string, databaseName: string, ruleId: string, baselineName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * DatabaseVulnerabilityAssessments
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface DatabaseVulnerabilityAssessments {


    /**
     * Gets the database's vulnerability assessment.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which the
     * vulnerability assessment is defined.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseVulnerabilityAssessment>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseVulnerabilityAssessment>>;

    /**
     * Gets the database's vulnerability assessment.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which the
     * vulnerability assessment is defined.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseVulnerabilityAssessment} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseVulnerabilityAssessment} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseVulnerabilityAssessment} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseVulnerabilityAssessment>;
    get(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.DatabaseVulnerabilityAssessment>): void;
    get(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseVulnerabilityAssessment>): void;


    /**
     * Creates or updates the database's vulnerability assessment.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which the
     * vulnerability assessment is defined.
     *
     * @param {object} parameters The requested resource.
     *
     * @param {string} [parameters.storageContainerPath] A blob storage container
     * path to hold the scan results (e.g.
     * https://myStorage.blob.core.windows.net/VaScans/).  It is required if server
     * level vulnerability assessment policy doesn't set
     *
     * @param {string} [parameters.storageContainerSasKey] A shared access
     * signature (SAS Key) that has write access to the blob container specified in
     * 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't
     * specified, StorageContainerSasKey is required.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the storage account for vulnerability assessment scan
     * results. If 'StorageContainerSasKey' isn't specified,
     * storageAccountAccessKey is required.
     *
     * @param {object} [parameters.recurringScans] The recurring scans settings
     *
     * @param {boolean} [parameters.recurringScans.isEnabled] Recurring scans
     * state.
     *
     * @param {boolean} [parameters.recurringScans.emailSubscriptionAdmins]
     * Specifies that the schedule scan notification will be is sent to the
     * subscription administrators.
     *
     * @param {array} [parameters.recurringScans.emails] Specifies an array of
     * e-mail addresses to which the scan notification is sent.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseVulnerabilityAssessment>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DatabaseVulnerabilityAssessment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseVulnerabilityAssessment>>;

    /**
     * Creates or updates the database's vulnerability assessment.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which the
     * vulnerability assessment is defined.
     *
     * @param {object} parameters The requested resource.
     *
     * @param {string} [parameters.storageContainerPath] A blob storage container
     * path to hold the scan results (e.g.
     * https://myStorage.blob.core.windows.net/VaScans/).  It is required if server
     * level vulnerability assessment policy doesn't set
     *
     * @param {string} [parameters.storageContainerSasKey] A shared access
     * signature (SAS Key) that has write access to the blob container specified in
     * 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't
     * specified, StorageContainerSasKey is required.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the storage account for vulnerability assessment scan
     * results. If 'StorageContainerSasKey' isn't specified,
     * storageAccountAccessKey is required.
     *
     * @param {object} [parameters.recurringScans] The recurring scans settings
     *
     * @param {boolean} [parameters.recurringScans.isEnabled] Recurring scans
     * state.
     *
     * @param {boolean} [parameters.recurringScans.emailSubscriptionAdmins]
     * Specifies that the schedule scan notification will be is sent to the
     * subscription administrators.
     *
     * @param {array} [parameters.recurringScans.emails] Specifies an array of
     * e-mail addresses to which the scan notification is sent.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseVulnerabilityAssessment} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseVulnerabilityAssessment} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseVulnerabilityAssessment} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DatabaseVulnerabilityAssessment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseVulnerabilityAssessment>;
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DatabaseVulnerabilityAssessment, callback: ServiceCallback<models.DatabaseVulnerabilityAssessment>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.DatabaseVulnerabilityAssessment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseVulnerabilityAssessment>): void;


    /**
     * Removes the database's vulnerability assessment.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which the
     * vulnerability assessment is defined.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Removes the database's vulnerability assessment.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which the
     * vulnerability assessment is defined.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists the vulnerability assessment policies associated with a database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which the
     * vulnerability assessment policies are defined.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseVulnerabilityAssessmentListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDatabaseWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseVulnerabilityAssessmentListResult>>;

    /**
     * Lists the vulnerability assessment policies associated with a database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database for which the
     * vulnerability assessment policies are defined.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseVulnerabilityAssessmentListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseVulnerabilityAssessmentListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseVulnerabilityAssessmentListResult}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseVulnerabilityAssessmentListResult>;
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.DatabaseVulnerabilityAssessmentListResult>): void;
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseVulnerabilityAssessmentListResult>): void;


    /**
     * Lists the vulnerability assessment policies associated with a database.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseVulnerabilityAssessmentListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDatabaseNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseVulnerabilityAssessmentListResult>>;

    /**
     * Lists the vulnerability assessment policies associated with a database.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseVulnerabilityAssessmentListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseVulnerabilityAssessmentListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseVulnerabilityAssessmentListResult}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDatabaseNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseVulnerabilityAssessmentListResult>;
    listByDatabaseNext(nextPageLink: string, callback: ServiceCallback<models.DatabaseVulnerabilityAssessmentListResult>): void;
    listByDatabaseNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseVulnerabilityAssessmentListResult>): void;
}

/**
 * @class
 * JobAgents
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface JobAgents {


    /**
     * Gets a list of job agents in a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobAgentListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobAgentListResult>>;

    /**
     * Gets a list of job agents in a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobAgentListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobAgentListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobAgentListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobAgentListResult>;
    listByServer(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.JobAgentListResult>): void;
    listByServer(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobAgentListResult>): void;


    /**
     * Gets a job agent.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobAgent>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobAgent>>;

    /**
     * Gets a job agent.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobAgent} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobAgent} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobAgent} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, jobAgentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobAgent>;
    get(resourceGroupName: string, serverName: string, jobAgentName: string, callback: ServiceCallback<models.JobAgent>): void;
    get(resourceGroupName: string, serverName: string, jobAgentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobAgent>): void;


    /**
     * Creates or updates a job agent.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent to be created or
     * updated.
     *
     * @param {object} parameters The requested job agent resource state.
     *
     * @param {object} [parameters.sku] The name and tier of the SKU.
     *
     * @param {string} parameters.sku.name The name of the SKU. Ex - P3. It is
     * typically a letter+number code
     *
     * @param {string} [parameters.sku.tier] This field is required to be
     * implemented by the Resource Provider if the service has more than one tier,
     * but is not required on a PUT.
     *
     * @param {string} [parameters.sku.size] The SKU size. When the name field is
     * the combination of tier and some other value, this would be the standalone
     * code.
     *
     * @param {string} [parameters.sku.family] If the service has different
     * generations of hardware, for the same SKU, then that can be captured here.
     *
     * @param {number} [parameters.sku.capacity] If the SKU supports scale out/in
     * then the capacity integer should be included. If scale out/in is not
     * possible for the resource this may be omitted.
     *
     * @param {string} parameters.databaseId Resource ID of the database to store
     * job metadata in.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobAgent>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, parameters: models.JobAgent, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobAgent>>;

    /**
     * Creates or updates a job agent.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent to be created or
     * updated.
     *
     * @param {object} parameters The requested job agent resource state.
     *
     * @param {object} [parameters.sku] The name and tier of the SKU.
     *
     * @param {string} parameters.sku.name The name of the SKU. Ex - P3. It is
     * typically a letter+number code
     *
     * @param {string} [parameters.sku.tier] This field is required to be
     * implemented by the Resource Provider if the service has more than one tier,
     * but is not required on a PUT.
     *
     * @param {string} [parameters.sku.size] The SKU size. When the name field is
     * the combination of tier and some other value, this would be the standalone
     * code.
     *
     * @param {string} [parameters.sku.family] If the service has different
     * generations of hardware, for the same SKU, then that can be captured here.
     *
     * @param {number} [parameters.sku.capacity] If the SKU supports scale out/in
     * then the capacity integer should be included. If scale out/in is not
     * possible for the resource this may be omitted.
     *
     * @param {string} parameters.databaseId Resource ID of the database to store
     * job metadata in.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobAgent} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobAgent} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobAgent} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, jobAgentName: string, parameters: models.JobAgent, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobAgent>;
    createOrUpdate(resourceGroupName: string, serverName: string, jobAgentName: string, parameters: models.JobAgent, callback: ServiceCallback<models.JobAgent>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, jobAgentName: string, parameters: models.JobAgent, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobAgent>): void;


    /**
     * Deletes a job agent.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent to be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a job agent.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent to be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serverName: string, jobAgentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serverName: string, jobAgentName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serverName: string, jobAgentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a job agent.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent to be updated.
     *
     * @param {object} parameters The update to the job agent.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobAgent>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, parameters: models.JobAgentUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobAgent>>;

    /**
     * Updates a job agent.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent to be updated.
     *
     * @param {object} parameters The update to the job agent.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobAgent} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobAgent} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobAgent} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serverName: string, jobAgentName: string, parameters: models.JobAgentUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobAgent>;
    update(resourceGroupName: string, serverName: string, jobAgentName: string, parameters: models.JobAgentUpdate, callback: ServiceCallback<models.JobAgent>): void;
    update(resourceGroupName: string, serverName: string, jobAgentName: string, parameters: models.JobAgentUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobAgent>): void;


    /**
     * Creates or updates a job agent.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent to be created or
     * updated.
     *
     * @param {object} parameters The requested job agent resource state.
     *
     * @param {object} [parameters.sku] The name and tier of the SKU.
     *
     * @param {string} parameters.sku.name The name of the SKU. Ex - P3. It is
     * typically a letter+number code
     *
     * @param {string} [parameters.sku.tier] This field is required to be
     * implemented by the Resource Provider if the service has more than one tier,
     * but is not required on a PUT.
     *
     * @param {string} [parameters.sku.size] The SKU size. When the name field is
     * the combination of tier and some other value, this would be the standalone
     * code.
     *
     * @param {string} [parameters.sku.family] If the service has different
     * generations of hardware, for the same SKU, then that can be captured here.
     *
     * @param {number} [parameters.sku.capacity] If the SKU supports scale out/in
     * then the capacity integer should be included. If scale out/in is not
     * possible for the resource this may be omitted.
     *
     * @param {string} parameters.databaseId Resource ID of the database to store
     * job metadata in.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobAgent>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, parameters: models.JobAgent, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobAgent>>;

    /**
     * Creates or updates a job agent.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent to be created or
     * updated.
     *
     * @param {object} parameters The requested job agent resource state.
     *
     * @param {object} [parameters.sku] The name and tier of the SKU.
     *
     * @param {string} parameters.sku.name The name of the SKU. Ex - P3. It is
     * typically a letter+number code
     *
     * @param {string} [parameters.sku.tier] This field is required to be
     * implemented by the Resource Provider if the service has more than one tier,
     * but is not required on a PUT.
     *
     * @param {string} [parameters.sku.size] The SKU size. When the name field is
     * the combination of tier and some other value, this would be the standalone
     * code.
     *
     * @param {string} [parameters.sku.family] If the service has different
     * generations of hardware, for the same SKU, then that can be captured here.
     *
     * @param {number} [parameters.sku.capacity] If the SKU supports scale out/in
     * then the capacity integer should be included. If scale out/in is not
     * possible for the resource this may be omitted.
     *
     * @param {string} parameters.databaseId Resource ID of the database to store
     * job metadata in.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobAgent} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobAgent} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobAgent} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, jobAgentName: string, parameters: models.JobAgent, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobAgent>;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, jobAgentName: string, parameters: models.JobAgent, callback: ServiceCallback<models.JobAgent>): void;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, jobAgentName: string, parameters: models.JobAgent, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobAgent>): void;


    /**
     * Deletes a job agent.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent to be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a job agent.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent to be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, serverName: string, jobAgentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, serverName: string, jobAgentName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, serverName: string, jobAgentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a job agent.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent to be updated.
     *
     * @param {object} parameters The update to the job agent.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobAgent>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, parameters: models.JobAgentUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobAgent>>;

    /**
     * Updates a job agent.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent to be updated.
     *
     * @param {object} parameters The update to the job agent.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobAgent} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobAgent} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobAgent} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, serverName: string, jobAgentName: string, parameters: models.JobAgentUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobAgent>;
    beginUpdate(resourceGroupName: string, serverName: string, jobAgentName: string, parameters: models.JobAgentUpdate, callback: ServiceCallback<models.JobAgent>): void;
    beginUpdate(resourceGroupName: string, serverName: string, jobAgentName: string, parameters: models.JobAgentUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobAgent>): void;


    /**
     * Gets a list of job agents in a server.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobAgentListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobAgentListResult>>;

    /**
     * Gets a list of job agents in a server.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobAgentListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobAgentListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobAgentListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServerNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobAgentListResult>;
    listByServerNext(nextPageLink: string, callback: ServiceCallback<models.JobAgentListResult>): void;
    listByServerNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobAgentListResult>): void;
}

/**
 * @class
 * JobCredentials
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface JobCredentials {


    /**
     * Gets a list of jobs credentials.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobCredentialListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByAgentWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobCredentialListResult>>;

    /**
     * Gets a list of jobs credentials.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobCredentialListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobCredentialListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobCredentialListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByAgent(resourceGroupName: string, serverName: string, jobAgentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobCredentialListResult>;
    listByAgent(resourceGroupName: string, serverName: string, jobAgentName: string, callback: ServiceCallback<models.JobCredentialListResult>): void;
    listByAgent(resourceGroupName: string, serverName: string, jobAgentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobCredentialListResult>): void;


    /**
     * Gets a jobs credential.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} credentialName The name of the credential.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobCredential>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, credentialName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobCredential>>;

    /**
     * Gets a jobs credential.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} credentialName The name of the credential.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobCredential} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobCredential} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobCredential} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, jobAgentName: string, credentialName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobCredential>;
    get(resourceGroupName: string, serverName: string, jobAgentName: string, credentialName: string, callback: ServiceCallback<models.JobCredential>): void;
    get(resourceGroupName: string, serverName: string, jobAgentName: string, credentialName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobCredential>): void;


    /**
     * Creates or updates a job credential.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} credentialName The name of the credential.
     *
     * @param {object} parameters The requested job credential state.
     *
     * @param {string} parameters.username The credential user name.
     *
     * @param {string} parameters.password The credential password.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobCredential>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, credentialName: string, parameters: models.JobCredential, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobCredential>>;

    /**
     * Creates or updates a job credential.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} credentialName The name of the credential.
     *
     * @param {object} parameters The requested job credential state.
     *
     * @param {string} parameters.username The credential user name.
     *
     * @param {string} parameters.password The credential password.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobCredential} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobCredential} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobCredential} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, jobAgentName: string, credentialName: string, parameters: models.JobCredential, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobCredential>;
    createOrUpdate(resourceGroupName: string, serverName: string, jobAgentName: string, credentialName: string, parameters: models.JobCredential, callback: ServiceCallback<models.JobCredential>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, jobAgentName: string, credentialName: string, parameters: models.JobCredential, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobCredential>): void;


    /**
     * Deletes a job credential.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} credentialName The name of the credential.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, credentialName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a job credential.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} credentialName The name of the credential.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serverName: string, jobAgentName: string, credentialName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serverName: string, jobAgentName: string, credentialName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serverName: string, jobAgentName: string, credentialName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a list of jobs credentials.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobCredentialListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByAgentNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobCredentialListResult>>;

    /**
     * Gets a list of jobs credentials.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobCredentialListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobCredentialListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobCredentialListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByAgentNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobCredentialListResult>;
    listByAgentNext(nextPageLink: string, callback: ServiceCallback<models.JobCredentialListResult>): void;
    listByAgentNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobCredentialListResult>): void;
}

/**
 * @class
 * JobExecutions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface JobExecutions {


    /**
     * Lists all executions in a job agent.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.createTimeMin] If specified, only job executions
     * created at or after the specified time are included.
     *
     * @param {date} [options.createTimeMax] If specified, only job executions
     * created before the specified time are included.
     *
     * @param {date} [options.endTimeMin] If specified, only job executions
     * completed at or after the specified time are included.
     *
     * @param {date} [options.endTimeMax] If specified, only job executions
     * completed before the specified time are included.
     *
     * @param {boolean} [options.isActive] If specified, only active or only
     * completed job executions are included.
     *
     * @param {number} [options.skip] The number of elements in the collection to
     * skip.
     *
     * @param {number} [options.top] The number of elements to return from the
     * collection.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobExecutionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByAgentWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, options?: { createTimeMin? : Date, createTimeMax? : Date, endTimeMin? : Date, endTimeMax? : Date, isActive? : boolean, skip? : number, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobExecutionListResult>>;

    /**
     * Lists all executions in a job agent.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.createTimeMin] If specified, only job executions
     * created at or after the specified time are included.
     *
     * @param {date} [options.createTimeMax] If specified, only job executions
     * created before the specified time are included.
     *
     * @param {date} [options.endTimeMin] If specified, only job executions
     * completed at or after the specified time are included.
     *
     * @param {date} [options.endTimeMax] If specified, only job executions
     * completed before the specified time are included.
     *
     * @param {boolean} [options.isActive] If specified, only active or only
     * completed job executions are included.
     *
     * @param {number} [options.skip] The number of elements in the collection to
     * skip.
     *
     * @param {number} [options.top] The number of elements to return from the
     * collection.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobExecutionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobExecutionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobExecutionListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByAgent(resourceGroupName: string, serverName: string, jobAgentName: string, options?: { createTimeMin? : Date, createTimeMax? : Date, endTimeMin? : Date, endTimeMax? : Date, isActive? : boolean, skip? : number, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.JobExecutionListResult>;
    listByAgent(resourceGroupName: string, serverName: string, jobAgentName: string, callback: ServiceCallback<models.JobExecutionListResult>): void;
    listByAgent(resourceGroupName: string, serverName: string, jobAgentName: string, options: { createTimeMin? : Date, createTimeMax? : Date, endTimeMin? : Date, endTimeMax? : Date, isActive? : boolean, skip? : number, top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobExecutionListResult>): void;


    /**
     * Requests cancellation of a job execution.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job.
     *
     * @param {uuid} jobExecutionId The id of the job execution to cancel.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    cancelWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Requests cancellation of a job execution.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job.
     *
     * @param {uuid} jobExecutionId The id of the job execution to cancel.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    cancel(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    cancel(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, callback: ServiceCallback<void>): void;
    cancel(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Starts an elastic job execution.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobExecution>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobExecution>>;

    /**
     * Starts an elastic job execution.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobExecution} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobExecution} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobExecution} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobExecution>;
    create(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, callback: ServiceCallback<models.JobExecution>): void;
    create(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobExecution>): void;


    /**
     * Lists a job's executions.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.createTimeMin] If specified, only job executions
     * created at or after the specified time are included.
     *
     * @param {date} [options.createTimeMax] If specified, only job executions
     * created before the specified time are included.
     *
     * @param {date} [options.endTimeMin] If specified, only job executions
     * completed at or after the specified time are included.
     *
     * @param {date} [options.endTimeMax] If specified, only job executions
     * completed before the specified time are included.
     *
     * @param {boolean} [options.isActive] If specified, only active or only
     * completed job executions are included.
     *
     * @param {number} [options.skip] The number of elements in the collection to
     * skip.
     *
     * @param {number} [options.top] The number of elements to return from the
     * collection.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobExecutionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByJobWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, options?: { createTimeMin? : Date, createTimeMax? : Date, endTimeMin? : Date, endTimeMax? : Date, isActive? : boolean, skip? : number, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobExecutionListResult>>;

    /**
     * Lists a job's executions.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.createTimeMin] If specified, only job executions
     * created at or after the specified time are included.
     *
     * @param {date} [options.createTimeMax] If specified, only job executions
     * created before the specified time are included.
     *
     * @param {date} [options.endTimeMin] If specified, only job executions
     * completed at or after the specified time are included.
     *
     * @param {date} [options.endTimeMax] If specified, only job executions
     * completed before the specified time are included.
     *
     * @param {boolean} [options.isActive] If specified, only active or only
     * completed job executions are included.
     *
     * @param {number} [options.skip] The number of elements in the collection to
     * skip.
     *
     * @param {number} [options.top] The number of elements to return from the
     * collection.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobExecutionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobExecutionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobExecutionListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByJob(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, options?: { createTimeMin? : Date, createTimeMax? : Date, endTimeMin? : Date, endTimeMax? : Date, isActive? : boolean, skip? : number, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.JobExecutionListResult>;
    listByJob(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, callback: ServiceCallback<models.JobExecutionListResult>): void;
    listByJob(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, options: { createTimeMin? : Date, createTimeMax? : Date, endTimeMin? : Date, endTimeMax? : Date, isActive? : boolean, skip? : number, top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobExecutionListResult>): void;


    /**
     * Gets a job execution.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job.
     *
     * @param {uuid} jobExecutionId The id of the job execution
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobExecution>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobExecution>>;

    /**
     * Gets a job execution.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job.
     *
     * @param {uuid} jobExecutionId The id of the job execution
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobExecution} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobExecution} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobExecution} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobExecution>;
    get(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, callback: ServiceCallback<models.JobExecution>): void;
    get(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobExecution>): void;


    /**
     * Creates or updates a job execution.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job to get.
     *
     * @param {uuid} jobExecutionId The job execution id to create the job
     * execution under.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobExecution>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobExecution>>;

    /**
     * Creates or updates a job execution.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job to get.
     *
     * @param {uuid} jobExecutionId The job execution id to create the job
     * execution under.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobExecution} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobExecution} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobExecution} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobExecution>;
    createOrUpdate(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, callback: ServiceCallback<models.JobExecution>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobExecution>): void;


    /**
     * Starts an elastic job execution.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobExecution>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobExecution>>;

    /**
     * Starts an elastic job execution.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobExecution} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobExecution} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobExecution} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreate(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobExecution>;
    beginCreate(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, callback: ServiceCallback<models.JobExecution>): void;
    beginCreate(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobExecution>): void;


    /**
     * Creates or updates a job execution.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job to get.
     *
     * @param {uuid} jobExecutionId The job execution id to create the job
     * execution under.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobExecution>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobExecution>>;

    /**
     * Creates or updates a job execution.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job to get.
     *
     * @param {uuid} jobExecutionId The job execution id to create the job
     * execution under.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobExecution} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobExecution} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobExecution} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobExecution>;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, callback: ServiceCallback<models.JobExecution>): void;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobExecution>): void;


    /**
     * Lists all executions in a job agent.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobExecutionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByAgentNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobExecutionListResult>>;

    /**
     * Lists all executions in a job agent.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobExecutionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobExecutionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobExecutionListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByAgentNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobExecutionListResult>;
    listByAgentNext(nextPageLink: string, callback: ServiceCallback<models.JobExecutionListResult>): void;
    listByAgentNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobExecutionListResult>): void;


    /**
     * Lists a job's executions.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobExecutionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByJobNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobExecutionListResult>>;

    /**
     * Lists a job's executions.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobExecutionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobExecutionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobExecutionListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByJobNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobExecutionListResult>;
    listByJobNext(nextPageLink: string, callback: ServiceCallback<models.JobExecutionListResult>): void;
    listByJobNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobExecutionListResult>): void;
}

/**
 * @class
 * Jobs
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface Jobs {


    /**
     * Gets a list of jobs.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByAgentWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobListResult>>;

    /**
     * Gets a list of jobs.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByAgent(resourceGroupName: string, serverName: string, jobAgentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobListResult>;
    listByAgent(resourceGroupName: string, serverName: string, jobAgentName: string, callback: ServiceCallback<models.JobListResult>): void;
    listByAgent(resourceGroupName: string, serverName: string, jobAgentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobListResult>): void;


    /**
     * Gets a job.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Job>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Job>>;

    /**
     * Gets a job.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Job} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Job} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Job} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Job>;
    get(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, callback: ServiceCallback<models.Job>): void;
    get(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Job>): void;


    /**
     * Creates or updates a job.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job to get.
     *
     * @param {object} parameters The requested job state.
     *
     * @param {string} [parameters.description] User-defined description of the
     * job.
     *
     * @param {object} [parameters.schedule] Schedule properties of the job.
     *
     * @param {date} [parameters.schedule.startTime] Schedule start time.
     *
     * @param {date} [parameters.schedule.endTime] Schedule end time.
     *
     * @param {string} [parameters.schedule.type] Schedule interval type. Possible
     * values include: 'Once', 'Recurring'
     *
     * @param {boolean} [parameters.schedule.enabled] Whether or not the schedule
     * is enabled.
     *
     * @param {string} [parameters.schedule.interval] Value of the schedule's
     * recurring interval, if the schedule type is recurring. ISO8601 duration
     * format.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Job>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, parameters: models.Job, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Job>>;

    /**
     * Creates or updates a job.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job to get.
     *
     * @param {object} parameters The requested job state.
     *
     * @param {string} [parameters.description] User-defined description of the
     * job.
     *
     * @param {object} [parameters.schedule] Schedule properties of the job.
     *
     * @param {date} [parameters.schedule.startTime] Schedule start time.
     *
     * @param {date} [parameters.schedule.endTime] Schedule end time.
     *
     * @param {string} [parameters.schedule.type] Schedule interval type. Possible
     * values include: 'Once', 'Recurring'
     *
     * @param {boolean} [parameters.schedule.enabled] Whether or not the schedule
     * is enabled.
     *
     * @param {string} [parameters.schedule.interval] Value of the schedule's
     * recurring interval, if the schedule type is recurring. ISO8601 duration
     * format.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Job} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Job} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Job} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, parameters: models.Job, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Job>;
    createOrUpdate(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, parameters: models.Job, callback: ServiceCallback<models.Job>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, parameters: models.Job, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Job>): void;


    /**
     * Deletes a job.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a job.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a list of jobs.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByAgentNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobListResult>>;

    /**
     * Gets a list of jobs.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByAgentNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobListResult>;
    listByAgentNext(nextPageLink: string, callback: ServiceCallback<models.JobListResult>): void;
    listByAgentNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobListResult>): void;
}

/**
 * @class
 * JobStepExecutions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface JobStepExecutions {


    /**
     * Lists the step executions of a job execution.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job to get.
     *
     * @param {uuid} jobExecutionId The id of the job execution
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.createTimeMin] If specified, only job executions
     * created at or after the specified time are included.
     *
     * @param {date} [options.createTimeMax] If specified, only job executions
     * created before the specified time are included.
     *
     * @param {date} [options.endTimeMin] If specified, only job executions
     * completed at or after the specified time are included.
     *
     * @param {date} [options.endTimeMax] If specified, only job executions
     * completed before the specified time are included.
     *
     * @param {boolean} [options.isActive] If specified, only active or only
     * completed job executions are included.
     *
     * @param {number} [options.skip] The number of elements in the collection to
     * skip.
     *
     * @param {number} [options.top] The number of elements to return from the
     * collection.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobExecutionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByJobExecutionWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, options?: { createTimeMin? : Date, createTimeMax? : Date, endTimeMin? : Date, endTimeMax? : Date, isActive? : boolean, skip? : number, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobExecutionListResult>>;

    /**
     * Lists the step executions of a job execution.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job to get.
     *
     * @param {uuid} jobExecutionId The id of the job execution
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.createTimeMin] If specified, only job executions
     * created at or after the specified time are included.
     *
     * @param {date} [options.createTimeMax] If specified, only job executions
     * created before the specified time are included.
     *
     * @param {date} [options.endTimeMin] If specified, only job executions
     * completed at or after the specified time are included.
     *
     * @param {date} [options.endTimeMax] If specified, only job executions
     * completed before the specified time are included.
     *
     * @param {boolean} [options.isActive] If specified, only active or only
     * completed job executions are included.
     *
     * @param {number} [options.skip] The number of elements in the collection to
     * skip.
     *
     * @param {number} [options.top] The number of elements to return from the
     * collection.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobExecutionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobExecutionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobExecutionListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByJobExecution(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, options?: { createTimeMin? : Date, createTimeMax? : Date, endTimeMin? : Date, endTimeMax? : Date, isActive? : boolean, skip? : number, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.JobExecutionListResult>;
    listByJobExecution(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, callback: ServiceCallback<models.JobExecutionListResult>): void;
    listByJobExecution(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, options: { createTimeMin? : Date, createTimeMax? : Date, endTimeMin? : Date, endTimeMax? : Date, isActive? : boolean, skip? : number, top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobExecutionListResult>): void;


    /**
     * Gets a step execution of a job execution.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job to get.
     *
     * @param {uuid} jobExecutionId The unique id of the job execution
     *
     * @param {string} stepName The name of the step.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobExecution>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, stepName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobExecution>>;

    /**
     * Gets a step execution of a job execution.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job to get.
     *
     * @param {uuid} jobExecutionId The unique id of the job execution
     *
     * @param {string} stepName The name of the step.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobExecution} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobExecution} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobExecution} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, stepName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobExecution>;
    get(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, stepName: string, callback: ServiceCallback<models.JobExecution>): void;
    get(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, stepName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobExecution>): void;


    /**
     * Lists the step executions of a job execution.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobExecutionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByJobExecutionNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobExecutionListResult>>;

    /**
     * Lists the step executions of a job execution.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobExecutionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobExecutionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobExecutionListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByJobExecutionNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobExecutionListResult>;
    listByJobExecutionNext(nextPageLink: string, callback: ServiceCallback<models.JobExecutionListResult>): void;
    listByJobExecutionNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobExecutionListResult>): void;
}

/**
 * @class
 * JobSteps
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface JobSteps {


    /**
     * Gets all job steps in the specified job version.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job to get.
     *
     * @param {number} jobVersion The version of the job to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobStepListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByVersionWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobVersion: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobStepListResult>>;

    /**
     * Gets all job steps in the specified job version.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job to get.
     *
     * @param {number} jobVersion The version of the job to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobStepListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobStepListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobStepListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByVersion(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobVersion: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobStepListResult>;
    listByVersion(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobVersion: number, callback: ServiceCallback<models.JobStepListResult>): void;
    listByVersion(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobVersion: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobStepListResult>): void;


    /**
     * Gets the specified version of a job step.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job.
     *
     * @param {number} jobVersion The version of the job to get.
     *
     * @param {string} stepName The name of the job step.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobStep>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getByVersionWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobVersion: number, stepName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobStep>>;

    /**
     * Gets the specified version of a job step.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job.
     *
     * @param {number} jobVersion The version of the job to get.
     *
     * @param {string} stepName The name of the job step.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobStep} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobStep} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobStep} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getByVersion(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobVersion: number, stepName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobStep>;
    getByVersion(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobVersion: number, stepName: string, callback: ServiceCallback<models.JobStep>): void;
    getByVersion(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobVersion: number, stepName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobStep>): void;


    /**
     * Gets all job steps for a job's current version.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobStepListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByJobWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobStepListResult>>;

    /**
     * Gets all job steps for a job's current version.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobStepListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobStepListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobStepListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByJob(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobStepListResult>;
    listByJob(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, callback: ServiceCallback<models.JobStepListResult>): void;
    listByJob(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobStepListResult>): void;


    /**
     * Gets a job step in a job's current version.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job.
     *
     * @param {string} stepName The name of the job step.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobStep>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, stepName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobStep>>;

    /**
     * Gets a job step in a job's current version.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job.
     *
     * @param {string} stepName The name of the job step.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobStep} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobStep} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobStep} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, stepName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobStep>;
    get(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, stepName: string, callback: ServiceCallback<models.JobStep>): void;
    get(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, stepName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobStep>): void;


    /**
     * Creates or updates a job step. This will implicitly create a new job
     * version.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job.
     *
     * @param {string} stepName The name of the job step.
     *
     * @param {object} parameters The requested state of the job step.
     *
     * @param {number} [parameters.stepId] The job step's index within the job. If
     * not specified when creating the job step, it will be created as the last
     * step. If not specified when updating the job step, the step id is not
     * modified.
     *
     * @param {string} parameters.targetGroup The resource ID of the target group
     * that the job step will be executed on.
     *
     * @param {string} parameters.credential The resource ID of the job credential
     * that will be used to connect to the targets.
     *
     * @param {object} parameters.action The action payload of the job step.
     *
     * @param {string} [parameters.action.type] Type of action being executed by
     * the job step. Possible values include: 'TSql'
     *
     * @param {string} [parameters.action.source] The source of the action to
     * execute. Possible values include: 'Inline'
     *
     * @param {string} parameters.action.value The action value, for example the
     * text of the T-SQL script to execute.
     *
     * @param {object} [parameters.output] Output destination properties of the job
     * step.
     *
     * @param {string} [parameters.output.type] The output destination type.
     * Possible values include: 'SqlDatabase'
     *
     * @param {uuid} [parameters.output.subscriptionId] The output destination
     * subscription id.
     *
     * @param {string} [parameters.output.resourceGroupName] The output destination
     * resource group.
     *
     * @param {string} parameters.output.serverName The output destination server
     * name.
     *
     * @param {string} parameters.output.databaseName The output destination
     * database.
     *
     * @param {string} [parameters.output.schemaName] The output destination
     * schema.
     *
     * @param {string} parameters.output.tableName The output destination table.
     *
     * @param {string} parameters.output.credential The resource ID of the
     * credential to use to connect to the output destination.
     *
     * @param {object} [parameters.executionOptions] Execution options for the job
     * step.
     *
     * @param {number} [parameters.executionOptions.timeoutSeconds] Execution
     * timeout for the job step.
     *
     * @param {number} [parameters.executionOptions.retryAttempts] Maximum number
     * of times the job step will be reattempted if the first attempt fails.
     *
     * @param {number} [parameters.executionOptions.initialRetryIntervalSeconds]
     * Initial delay between retries for job step execution.
     *
     * @param {number} [parameters.executionOptions.maximumRetryIntervalSeconds]
     * The maximum amount of time to wait between retries for job step execution.
     *
     * @param {number} [parameters.executionOptions.retryIntervalBackoffMultiplier]
     * The backoff multiplier for the time between retries.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobStep>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, stepName: string, parameters: models.JobStep, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobStep>>;

    /**
     * Creates or updates a job step. This will implicitly create a new job
     * version.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job.
     *
     * @param {string} stepName The name of the job step.
     *
     * @param {object} parameters The requested state of the job step.
     *
     * @param {number} [parameters.stepId] The job step's index within the job. If
     * not specified when creating the job step, it will be created as the last
     * step. If not specified when updating the job step, the step id is not
     * modified.
     *
     * @param {string} parameters.targetGroup The resource ID of the target group
     * that the job step will be executed on.
     *
     * @param {string} parameters.credential The resource ID of the job credential
     * that will be used to connect to the targets.
     *
     * @param {object} parameters.action The action payload of the job step.
     *
     * @param {string} [parameters.action.type] Type of action being executed by
     * the job step. Possible values include: 'TSql'
     *
     * @param {string} [parameters.action.source] The source of the action to
     * execute. Possible values include: 'Inline'
     *
     * @param {string} parameters.action.value The action value, for example the
     * text of the T-SQL script to execute.
     *
     * @param {object} [parameters.output] Output destination properties of the job
     * step.
     *
     * @param {string} [parameters.output.type] The output destination type.
     * Possible values include: 'SqlDatabase'
     *
     * @param {uuid} [parameters.output.subscriptionId] The output destination
     * subscription id.
     *
     * @param {string} [parameters.output.resourceGroupName] The output destination
     * resource group.
     *
     * @param {string} parameters.output.serverName The output destination server
     * name.
     *
     * @param {string} parameters.output.databaseName The output destination
     * database.
     *
     * @param {string} [parameters.output.schemaName] The output destination
     * schema.
     *
     * @param {string} parameters.output.tableName The output destination table.
     *
     * @param {string} parameters.output.credential The resource ID of the
     * credential to use to connect to the output destination.
     *
     * @param {object} [parameters.executionOptions] Execution options for the job
     * step.
     *
     * @param {number} [parameters.executionOptions.timeoutSeconds] Execution
     * timeout for the job step.
     *
     * @param {number} [parameters.executionOptions.retryAttempts] Maximum number
     * of times the job step will be reattempted if the first attempt fails.
     *
     * @param {number} [parameters.executionOptions.initialRetryIntervalSeconds]
     * Initial delay between retries for job step execution.
     *
     * @param {number} [parameters.executionOptions.maximumRetryIntervalSeconds]
     * The maximum amount of time to wait between retries for job step execution.
     *
     * @param {number} [parameters.executionOptions.retryIntervalBackoffMultiplier]
     * The backoff multiplier for the time between retries.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobStep} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobStep} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobStep} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, stepName: string, parameters: models.JobStep, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobStep>;
    createOrUpdate(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, stepName: string, parameters: models.JobStep, callback: ServiceCallback<models.JobStep>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, stepName: string, parameters: models.JobStep, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobStep>): void;


    /**
     * Deletes a job step. This will implicitly create a new job version.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job.
     *
     * @param {string} stepName The name of the job step to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, stepName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a job step. This will implicitly create a new job version.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job.
     *
     * @param {string} stepName The name of the job step to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, stepName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, stepName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, stepName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets all job steps in the specified job version.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobStepListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByVersionNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobStepListResult>>;

    /**
     * Gets all job steps in the specified job version.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobStepListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobStepListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobStepListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByVersionNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobStepListResult>;
    listByVersionNext(nextPageLink: string, callback: ServiceCallback<models.JobStepListResult>): void;
    listByVersionNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobStepListResult>): void;


    /**
     * Gets all job steps for a job's current version.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobStepListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByJobNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobStepListResult>>;

    /**
     * Gets all job steps for a job's current version.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobStepListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobStepListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobStepListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByJobNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobStepListResult>;
    listByJobNext(nextPageLink: string, callback: ServiceCallback<models.JobStepListResult>): void;
    listByJobNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobStepListResult>): void;
}

/**
 * @class
 * JobTargetExecutions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface JobTargetExecutions {


    /**
     * Lists target executions for all steps of a job execution.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job to get.
     *
     * @param {uuid} jobExecutionId The id of the job execution
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.createTimeMin] If specified, only job executions
     * created at or after the specified time are included.
     *
     * @param {date} [options.createTimeMax] If specified, only job executions
     * created before the specified time are included.
     *
     * @param {date} [options.endTimeMin] If specified, only job executions
     * completed at or after the specified time are included.
     *
     * @param {date} [options.endTimeMax] If specified, only job executions
     * completed before the specified time are included.
     *
     * @param {boolean} [options.isActive] If specified, only active or only
     * completed job executions are included.
     *
     * @param {number} [options.skip] The number of elements in the collection to
     * skip.
     *
     * @param {number} [options.top] The number of elements to return from the
     * collection.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobExecutionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByJobExecutionWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, options?: { createTimeMin? : Date, createTimeMax? : Date, endTimeMin? : Date, endTimeMax? : Date, isActive? : boolean, skip? : number, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobExecutionListResult>>;

    /**
     * Lists target executions for all steps of a job execution.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job to get.
     *
     * @param {uuid} jobExecutionId The id of the job execution
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.createTimeMin] If specified, only job executions
     * created at or after the specified time are included.
     *
     * @param {date} [options.createTimeMax] If specified, only job executions
     * created before the specified time are included.
     *
     * @param {date} [options.endTimeMin] If specified, only job executions
     * completed at or after the specified time are included.
     *
     * @param {date} [options.endTimeMax] If specified, only job executions
     * completed before the specified time are included.
     *
     * @param {boolean} [options.isActive] If specified, only active or only
     * completed job executions are included.
     *
     * @param {number} [options.skip] The number of elements in the collection to
     * skip.
     *
     * @param {number} [options.top] The number of elements to return from the
     * collection.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobExecutionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobExecutionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobExecutionListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByJobExecution(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, options?: { createTimeMin? : Date, createTimeMax? : Date, endTimeMin? : Date, endTimeMax? : Date, isActive? : boolean, skip? : number, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.JobExecutionListResult>;
    listByJobExecution(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, callback: ServiceCallback<models.JobExecutionListResult>): void;
    listByJobExecution(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, options: { createTimeMin? : Date, createTimeMax? : Date, endTimeMin? : Date, endTimeMax? : Date, isActive? : boolean, skip? : number, top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobExecutionListResult>): void;


    /**
     * Lists the target executions of a job step execution.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job to get.
     *
     * @param {uuid} jobExecutionId The id of the job execution
     *
     * @param {string} stepName The name of the step.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.createTimeMin] If specified, only job executions
     * created at or after the specified time are included.
     *
     * @param {date} [options.createTimeMax] If specified, only job executions
     * created before the specified time are included.
     *
     * @param {date} [options.endTimeMin] If specified, only job executions
     * completed at or after the specified time are included.
     *
     * @param {date} [options.endTimeMax] If specified, only job executions
     * completed before the specified time are included.
     *
     * @param {boolean} [options.isActive] If specified, only active or only
     * completed job executions are included.
     *
     * @param {number} [options.skip] The number of elements in the collection to
     * skip.
     *
     * @param {number} [options.top] The number of elements to return from the
     * collection.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobExecutionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByStepWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, stepName: string, options?: { createTimeMin? : Date, createTimeMax? : Date, endTimeMin? : Date, endTimeMax? : Date, isActive? : boolean, skip? : number, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobExecutionListResult>>;

    /**
     * Lists the target executions of a job step execution.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job to get.
     *
     * @param {uuid} jobExecutionId The id of the job execution
     *
     * @param {string} stepName The name of the step.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.createTimeMin] If specified, only job executions
     * created at or after the specified time are included.
     *
     * @param {date} [options.createTimeMax] If specified, only job executions
     * created before the specified time are included.
     *
     * @param {date} [options.endTimeMin] If specified, only job executions
     * completed at or after the specified time are included.
     *
     * @param {date} [options.endTimeMax] If specified, only job executions
     * completed before the specified time are included.
     *
     * @param {boolean} [options.isActive] If specified, only active or only
     * completed job executions are included.
     *
     * @param {number} [options.skip] The number of elements in the collection to
     * skip.
     *
     * @param {number} [options.top] The number of elements to return from the
     * collection.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobExecutionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobExecutionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobExecutionListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByStep(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, stepName: string, options?: { createTimeMin? : Date, createTimeMax? : Date, endTimeMin? : Date, endTimeMax? : Date, isActive? : boolean, skip? : number, top? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.JobExecutionListResult>;
    listByStep(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, stepName: string, callback: ServiceCallback<models.JobExecutionListResult>): void;
    listByStep(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, stepName: string, options: { createTimeMin? : Date, createTimeMax? : Date, endTimeMin? : Date, endTimeMax? : Date, isActive? : boolean, skip? : number, top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobExecutionListResult>): void;


    /**
     * Gets a target execution.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job to get.
     *
     * @param {uuid} jobExecutionId The unique id of the job execution
     *
     * @param {string} stepName The name of the step.
     *
     * @param {uuid} targetId The target id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobExecution>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, stepName: string, targetId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobExecution>>;

    /**
     * Gets a target execution.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job to get.
     *
     * @param {uuid} jobExecutionId The unique id of the job execution
     *
     * @param {string} stepName The name of the step.
     *
     * @param {uuid} targetId The target id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobExecution} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobExecution} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobExecution} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, stepName: string, targetId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobExecution>;
    get(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, stepName: string, targetId: string, callback: ServiceCallback<models.JobExecution>): void;
    get(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobExecutionId: string, stepName: string, targetId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobExecution>): void;


    /**
     * Lists target executions for all steps of a job execution.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobExecutionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByJobExecutionNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobExecutionListResult>>;

    /**
     * Lists target executions for all steps of a job execution.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobExecutionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobExecutionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobExecutionListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByJobExecutionNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobExecutionListResult>;
    listByJobExecutionNext(nextPageLink: string, callback: ServiceCallback<models.JobExecutionListResult>): void;
    listByJobExecutionNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobExecutionListResult>): void;


    /**
     * Lists the target executions of a job step execution.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobExecutionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByStepNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobExecutionListResult>>;

    /**
     * Lists the target executions of a job step execution.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobExecutionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobExecutionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobExecutionListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByStepNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobExecutionListResult>;
    listByStepNext(nextPageLink: string, callback: ServiceCallback<models.JobExecutionListResult>): void;
    listByStepNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobExecutionListResult>): void;
}

/**
 * @class
 * JobTargetGroups
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface JobTargetGroups {


    /**
     * Gets all target groups in an agent.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobTargetGroupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByAgentWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobTargetGroupListResult>>;

    /**
     * Gets all target groups in an agent.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobTargetGroupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobTargetGroupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobTargetGroupListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByAgent(resourceGroupName: string, serverName: string, jobAgentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobTargetGroupListResult>;
    listByAgent(resourceGroupName: string, serverName: string, jobAgentName: string, callback: ServiceCallback<models.JobTargetGroupListResult>): void;
    listByAgent(resourceGroupName: string, serverName: string, jobAgentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobTargetGroupListResult>): void;


    /**
     * Gets a target group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} targetGroupName The name of the target group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobTargetGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, targetGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobTargetGroup>>;

    /**
     * Gets a target group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} targetGroupName The name of the target group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobTargetGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobTargetGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobTargetGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, jobAgentName: string, targetGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobTargetGroup>;
    get(resourceGroupName: string, serverName: string, jobAgentName: string, targetGroupName: string, callback: ServiceCallback<models.JobTargetGroup>): void;
    get(resourceGroupName: string, serverName: string, jobAgentName: string, targetGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobTargetGroup>): void;


    /**
     * Creates or updates a target group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} targetGroupName The name of the target group.
     *
     * @param {object} parameters The requested state of the target group.
     *
     * @param {array} parameters.members Members of the target group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobTargetGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, targetGroupName: string, parameters: models.JobTargetGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobTargetGroup>>;

    /**
     * Creates or updates a target group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} targetGroupName The name of the target group.
     *
     * @param {object} parameters The requested state of the target group.
     *
     * @param {array} parameters.members Members of the target group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobTargetGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobTargetGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobTargetGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, jobAgentName: string, targetGroupName: string, parameters: models.JobTargetGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobTargetGroup>;
    createOrUpdate(resourceGroupName: string, serverName: string, jobAgentName: string, targetGroupName: string, parameters: models.JobTargetGroup, callback: ServiceCallback<models.JobTargetGroup>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, jobAgentName: string, targetGroupName: string, parameters: models.JobTargetGroup, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobTargetGroup>): void;


    /**
     * Deletes a target group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} targetGroupName The name of the target group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, targetGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a target group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} targetGroupName The name of the target group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serverName: string, jobAgentName: string, targetGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serverName: string, jobAgentName: string, targetGroupName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serverName: string, jobAgentName: string, targetGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets all target groups in an agent.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobTargetGroupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByAgentNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobTargetGroupListResult>>;

    /**
     * Gets all target groups in an agent.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobTargetGroupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobTargetGroupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobTargetGroupListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByAgentNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobTargetGroupListResult>;
    listByAgentNext(nextPageLink: string, callback: ServiceCallback<models.JobTargetGroupListResult>): void;
    listByAgentNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobTargetGroupListResult>): void;
}

/**
 * @class
 * JobVersions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface JobVersions {


    /**
     * Gets all versions of a job.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobVersionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByJobWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobVersionListResult>>;

    /**
     * Gets all versions of a job.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobVersionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobVersionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobVersionListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByJob(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobVersionListResult>;
    listByJob(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, callback: ServiceCallback<models.JobVersionListResult>): void;
    listByJob(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobVersionListResult>): void;


    /**
     * Gets a job version.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job.
     *
     * @param {number} jobVersion The version of the job to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobVersion>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobVersion: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobVersion>>;

    /**
     * Gets a job version.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} jobAgentName The name of the job agent.
     *
     * @param {string} jobName The name of the job.
     *
     * @param {number} jobVersion The version of the job to get.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobVersion} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobVersion} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobVersion} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobVersion: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobVersion>;
    get(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobVersion: number, callback: ServiceCallback<models.JobVersion>): void;
    get(resourceGroupName: string, serverName: string, jobAgentName: string, jobName: string, jobVersion: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobVersion>): void;


    /**
     * Gets all versions of a job.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobVersionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByJobNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobVersionListResult>>;

    /**
     * Gets all versions of a job.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobVersionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobVersionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobVersionListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByJobNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.JobVersionListResult>;
    listByJobNext(nextPageLink: string, callback: ServiceCallback<models.JobVersionListResult>): void;
    listByJobNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobVersionListResult>): void;
}

/**
 * @class
 * LongTermRetentionBackups
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface LongTermRetentionBackups {


    /**
     * Gets a long term retention backup.
     *
     * @param {string} locationName The location of the database.
     *
     * @param {string} longTermRetentionServerName
     *
     * @param {string} longTermRetentionDatabaseName
     *
     * @param {string} backupName The backup name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LongTermRetentionBackup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, backupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LongTermRetentionBackup>>;

    /**
     * Gets a long term retention backup.
     *
     * @param {string} locationName The location of the database.
     *
     * @param {string} longTermRetentionServerName
     *
     * @param {string} longTermRetentionDatabaseName
     *
     * @param {string} backupName The backup name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LongTermRetentionBackup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LongTermRetentionBackup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LongTermRetentionBackup} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, backupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LongTermRetentionBackup>;
    get(locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, backupName: string, callback: ServiceCallback<models.LongTermRetentionBackup>): void;
    get(locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, backupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LongTermRetentionBackup>): void;


    /**
     * Deletes a long term retention backup.
     *
     * @param {string} locationName The location of the database
     *
     * @param {string} longTermRetentionServerName
     *
     * @param {string} longTermRetentionDatabaseName
     *
     * @param {string} backupName The backup name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, backupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a long term retention backup.
     *
     * @param {string} locationName The location of the database
     *
     * @param {string} longTermRetentionServerName
     *
     * @param {string} longTermRetentionDatabaseName
     *
     * @param {string} backupName The backup name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, backupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, backupName: string, callback: ServiceCallback<void>): void;
    deleteMethod(locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, backupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists all long term retention backups for a database.
     *
     * @param {string} locationName The location of the database
     *
     * @param {string} longTermRetentionServerName
     *
     * @param {string} longTermRetentionDatabaseName
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.onlyLatestPerDatabase] Whether or not to only get
     * the latest backup for each database.
     *
     * @param {string} [options.databaseState] Whether to query against just live
     * databases, just deleted databases, or all databases. Possible values
     * include: 'All', 'Live', 'Deleted'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LongTermRetentionBackupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDatabaseWithHttpOperationResponse(locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, options?: { onlyLatestPerDatabase? : boolean, databaseState? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LongTermRetentionBackupListResult>>;

    /**
     * Lists all long term retention backups for a database.
     *
     * @param {string} locationName The location of the database
     *
     * @param {string} longTermRetentionServerName
     *
     * @param {string} longTermRetentionDatabaseName
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.onlyLatestPerDatabase] Whether or not to only get
     * the latest backup for each database.
     *
     * @param {string} [options.databaseState] Whether to query against just live
     * databases, just deleted databases, or all databases. Possible values
     * include: 'All', 'Live', 'Deleted'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LongTermRetentionBackupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LongTermRetentionBackupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LongTermRetentionBackupListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDatabase(locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, options?: { onlyLatestPerDatabase? : boolean, databaseState? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.LongTermRetentionBackupListResult>;
    listByDatabase(locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, callback: ServiceCallback<models.LongTermRetentionBackupListResult>): void;
    listByDatabase(locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, options: { onlyLatestPerDatabase? : boolean, databaseState? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LongTermRetentionBackupListResult>): void;


    /**
     * Lists the long term retention backups for a given location.
     *
     * @param {string} locationName The location of the database
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.onlyLatestPerDatabase] Whether or not to only get
     * the latest backup for each database.
     *
     * @param {string} [options.databaseState] Whether to query against just live
     * databases, just deleted databases, or all databases. Possible values
     * include: 'All', 'Live', 'Deleted'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LongTermRetentionBackupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByLocationWithHttpOperationResponse(locationName: string, options?: { onlyLatestPerDatabase? : boolean, databaseState? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LongTermRetentionBackupListResult>>;

    /**
     * Lists the long term retention backups for a given location.
     *
     * @param {string} locationName The location of the database
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.onlyLatestPerDatabase] Whether or not to only get
     * the latest backup for each database.
     *
     * @param {string} [options.databaseState] Whether to query against just live
     * databases, just deleted databases, or all databases. Possible values
     * include: 'All', 'Live', 'Deleted'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LongTermRetentionBackupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LongTermRetentionBackupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LongTermRetentionBackupListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByLocation(locationName: string, options?: { onlyLatestPerDatabase? : boolean, databaseState? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.LongTermRetentionBackupListResult>;
    listByLocation(locationName: string, callback: ServiceCallback<models.LongTermRetentionBackupListResult>): void;
    listByLocation(locationName: string, options: { onlyLatestPerDatabase? : boolean, databaseState? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LongTermRetentionBackupListResult>): void;


    /**
     * Lists the long term retention backups for a given server.
     *
     * @param {string} locationName The location of the database
     *
     * @param {string} longTermRetentionServerName
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.onlyLatestPerDatabase] Whether or not to only get
     * the latest backup for each database.
     *
     * @param {string} [options.databaseState] Whether to query against just live
     * databases, just deleted databases, or all databases. Possible values
     * include: 'All', 'Live', 'Deleted'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LongTermRetentionBackupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerWithHttpOperationResponse(locationName: string, longTermRetentionServerName: string, options?: { onlyLatestPerDatabase? : boolean, databaseState? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LongTermRetentionBackupListResult>>;

    /**
     * Lists the long term retention backups for a given server.
     *
     * @param {string} locationName The location of the database
     *
     * @param {string} longTermRetentionServerName
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.onlyLatestPerDatabase] Whether or not to only get
     * the latest backup for each database.
     *
     * @param {string} [options.databaseState] Whether to query against just live
     * databases, just deleted databases, or all databases. Possible values
     * include: 'All', 'Live', 'Deleted'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LongTermRetentionBackupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LongTermRetentionBackupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LongTermRetentionBackupListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServer(locationName: string, longTermRetentionServerName: string, options?: { onlyLatestPerDatabase? : boolean, databaseState? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.LongTermRetentionBackupListResult>;
    listByServer(locationName: string, longTermRetentionServerName: string, callback: ServiceCallback<models.LongTermRetentionBackupListResult>): void;
    listByServer(locationName: string, longTermRetentionServerName: string, options: { onlyLatestPerDatabase? : boolean, databaseState? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LongTermRetentionBackupListResult>): void;


    /**
     * Deletes a long term retention backup.
     *
     * @param {string} locationName The location of the database
     *
     * @param {string} longTermRetentionServerName
     *
     * @param {string} longTermRetentionDatabaseName
     *
     * @param {string} backupName The backup name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, backupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a long term retention backup.
     *
     * @param {string} locationName The location of the database
     *
     * @param {string} longTermRetentionServerName
     *
     * @param {string} longTermRetentionDatabaseName
     *
     * @param {string} backupName The backup name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, backupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, backupName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, backupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists all long term retention backups for a database.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LongTermRetentionBackupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDatabaseNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LongTermRetentionBackupListResult>>;

    /**
     * Lists all long term retention backups for a database.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LongTermRetentionBackupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LongTermRetentionBackupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LongTermRetentionBackupListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDatabaseNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LongTermRetentionBackupListResult>;
    listByDatabaseNext(nextPageLink: string, callback: ServiceCallback<models.LongTermRetentionBackupListResult>): void;
    listByDatabaseNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LongTermRetentionBackupListResult>): void;


    /**
     * Lists the long term retention backups for a given location.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LongTermRetentionBackupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByLocationNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LongTermRetentionBackupListResult>>;

    /**
     * Lists the long term retention backups for a given location.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LongTermRetentionBackupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LongTermRetentionBackupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LongTermRetentionBackupListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByLocationNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LongTermRetentionBackupListResult>;
    listByLocationNext(nextPageLink: string, callback: ServiceCallback<models.LongTermRetentionBackupListResult>): void;
    listByLocationNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LongTermRetentionBackupListResult>): void;


    /**
     * Lists the long term retention backups for a given server.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LongTermRetentionBackupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LongTermRetentionBackupListResult>>;

    /**
     * Lists the long term retention backups for a given server.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LongTermRetentionBackupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LongTermRetentionBackupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LongTermRetentionBackupListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServerNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LongTermRetentionBackupListResult>;
    listByServerNext(nextPageLink: string, callback: ServiceCallback<models.LongTermRetentionBackupListResult>): void;
    listByServerNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LongTermRetentionBackupListResult>): void;
}

/**
 * @class
 * BackupLongTermRetentionPolicies
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface BackupLongTermRetentionPolicies {


    /**
     * Gets a database's long term retention policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupLongTermRetentionPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupLongTermRetentionPolicy>>;

    /**
     * Gets a database's long term retention policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupLongTermRetentionPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupLongTermRetentionPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupLongTermRetentionPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupLongTermRetentionPolicy>;
    get(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.BackupLongTermRetentionPolicy>): void;
    get(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupLongTermRetentionPolicy>): void;


    /**
     * Sets a database's long term retention policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The long term retention policy info.
     *
     * @param {string} [parameters.weeklyRetention] The weekly retention policy for
     * an LTR backup in an ISO 8601 format.
     *
     * @param {string} [parameters.monthlyRetention] The monthly retention policy
     * for an LTR backup in an ISO 8601 format.
     *
     * @param {string} [parameters.yearlyRetention] The yearly retention policy for
     * an LTR backup in an ISO 8601 format.
     *
     * @param {number} [parameters.weekOfYear] The week of year to take the yearly
     * backup in an ISO 8601 format.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupLongTermRetentionPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.BackupLongTermRetentionPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupLongTermRetentionPolicy>>;

    /**
     * Sets a database's long term retention policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The long term retention policy info.
     *
     * @param {string} [parameters.weeklyRetention] The weekly retention policy for
     * an LTR backup in an ISO 8601 format.
     *
     * @param {string} [parameters.monthlyRetention] The monthly retention policy
     * for an LTR backup in an ISO 8601 format.
     *
     * @param {string} [parameters.yearlyRetention] The yearly retention policy for
     * an LTR backup in an ISO 8601 format.
     *
     * @param {number} [parameters.weekOfYear] The week of year to take the yearly
     * backup in an ISO 8601 format.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupLongTermRetentionPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupLongTermRetentionPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupLongTermRetentionPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.BackupLongTermRetentionPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupLongTermRetentionPolicy>;
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.BackupLongTermRetentionPolicy, callback: ServiceCallback<models.BackupLongTermRetentionPolicy>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.BackupLongTermRetentionPolicy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupLongTermRetentionPolicy>): void;


    /**
     * Gets a database's long term retention policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupLongTermRetentionPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDatabaseWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupLongTermRetentionPolicy>>;

    /**
     * Gets a database's long term retention policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupLongTermRetentionPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupLongTermRetentionPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupLongTermRetentionPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupLongTermRetentionPolicy>;
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.BackupLongTermRetentionPolicy>): void;
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupLongTermRetentionPolicy>): void;


    /**
     * Sets a database's long term retention policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The long term retention policy info.
     *
     * @param {string} [parameters.weeklyRetention] The weekly retention policy for
     * an LTR backup in an ISO 8601 format.
     *
     * @param {string} [parameters.monthlyRetention] The monthly retention policy
     * for an LTR backup in an ISO 8601 format.
     *
     * @param {string} [parameters.yearlyRetention] The yearly retention policy for
     * an LTR backup in an ISO 8601 format.
     *
     * @param {number} [parameters.weekOfYear] The week of year to take the yearly
     * backup in an ISO 8601 format.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupLongTermRetentionPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.BackupLongTermRetentionPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupLongTermRetentionPolicy>>;

    /**
     * Sets a database's long term retention policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The long term retention policy info.
     *
     * @param {string} [parameters.weeklyRetention] The weekly retention policy for
     * an LTR backup in an ISO 8601 format.
     *
     * @param {string} [parameters.monthlyRetention] The monthly retention policy
     * for an LTR backup in an ISO 8601 format.
     *
     * @param {string} [parameters.yearlyRetention] The yearly retention policy for
     * an LTR backup in an ISO 8601 format.
     *
     * @param {number} [parameters.weekOfYear] The week of year to take the yearly
     * backup in an ISO 8601 format.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupLongTermRetentionPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupLongTermRetentionPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupLongTermRetentionPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.BackupLongTermRetentionPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupLongTermRetentionPolicy>;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.BackupLongTermRetentionPolicy, callback: ServiceCallback<models.BackupLongTermRetentionPolicy>): void;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.BackupLongTermRetentionPolicy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupLongTermRetentionPolicy>): void;
}

/**
 * @class
 * ManagedBackupShortTermRetentionPolicies
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface ManagedBackupShortTermRetentionPolicies {


    /**
     * Gets a managed database's short term retention policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedBackupShortTermRetentionPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedBackupShortTermRetentionPolicy>>;

    /**
     * Gets a managed database's short term retention policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedBackupShortTermRetentionPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedBackupShortTermRetentionPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedBackupShortTermRetentionPolicy} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, managedInstanceName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedBackupShortTermRetentionPolicy>;
    get(resourceGroupName: string, managedInstanceName: string, databaseName: string, callback: ServiceCallback<models.ManagedBackupShortTermRetentionPolicy>): void;
    get(resourceGroupName: string, managedInstanceName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedBackupShortTermRetentionPolicy>): void;


    /**
     * Updates a managed database's short term retention policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The short term retention policy info.
     *
     * @param {number} [parameters.retentionDays] The backup retention period in
     * days. This is how many days Point-in-Time Restore will be supported.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedBackupShortTermRetentionPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedBackupShortTermRetentionPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedBackupShortTermRetentionPolicy>>;

    /**
     * Updates a managed database's short term retention policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The short term retention policy info.
     *
     * @param {number} [parameters.retentionDays] The backup retention period in
     * days. This is how many days Point-in-Time Restore will be supported.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedBackupShortTermRetentionPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedBackupShortTermRetentionPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedBackupShortTermRetentionPolicy} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedBackupShortTermRetentionPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedBackupShortTermRetentionPolicy>;
    createOrUpdate(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedBackupShortTermRetentionPolicy, callback: ServiceCallback<models.ManagedBackupShortTermRetentionPolicy>): void;
    createOrUpdate(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedBackupShortTermRetentionPolicy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedBackupShortTermRetentionPolicy>): void;


    /**
     * Updates a managed database's short term retention policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The short term retention policy info.
     *
     * @param {number} [parameters.retentionDays] The backup retention period in
     * days. This is how many days Point-in-Time Restore will be supported.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedBackupShortTermRetentionPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedBackupShortTermRetentionPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedBackupShortTermRetentionPolicy>>;

    /**
     * Updates a managed database's short term retention policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The short term retention policy info.
     *
     * @param {number} [parameters.retentionDays] The backup retention period in
     * days. This is how many days Point-in-Time Restore will be supported.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedBackupShortTermRetentionPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedBackupShortTermRetentionPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedBackupShortTermRetentionPolicy} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedBackupShortTermRetentionPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedBackupShortTermRetentionPolicy>;
    update(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedBackupShortTermRetentionPolicy, callback: ServiceCallback<models.ManagedBackupShortTermRetentionPolicy>): void;
    update(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedBackupShortTermRetentionPolicy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedBackupShortTermRetentionPolicy>): void;


    /**
     * Gets a managed database's short term retention policy list.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedBackupShortTermRetentionPolicyListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDatabaseWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedBackupShortTermRetentionPolicyListResult>>;

    /**
     * Gets a managed database's short term retention policy list.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedBackupShortTermRetentionPolicyListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedBackupShortTermRetentionPolicyListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link
     *                      ManagedBackupShortTermRetentionPolicyListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDatabase(resourceGroupName: string, managedInstanceName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedBackupShortTermRetentionPolicyListResult>;
    listByDatabase(resourceGroupName: string, managedInstanceName: string, databaseName: string, callback: ServiceCallback<models.ManagedBackupShortTermRetentionPolicyListResult>): void;
    listByDatabase(resourceGroupName: string, managedInstanceName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedBackupShortTermRetentionPolicyListResult>): void;


    /**
     * Updates a managed database's short term retention policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The short term retention policy info.
     *
     * @param {number} [parameters.retentionDays] The backup retention period in
     * days. This is how many days Point-in-Time Restore will be supported.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedBackupShortTermRetentionPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedBackupShortTermRetentionPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedBackupShortTermRetentionPolicy>>;

    /**
     * Updates a managed database's short term retention policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The short term retention policy info.
     *
     * @param {number} [parameters.retentionDays] The backup retention period in
     * days. This is how many days Point-in-Time Restore will be supported.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedBackupShortTermRetentionPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedBackupShortTermRetentionPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedBackupShortTermRetentionPolicy} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedBackupShortTermRetentionPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedBackupShortTermRetentionPolicy>;
    beginCreateOrUpdate(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedBackupShortTermRetentionPolicy, callback: ServiceCallback<models.ManagedBackupShortTermRetentionPolicy>): void;
    beginCreateOrUpdate(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedBackupShortTermRetentionPolicy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedBackupShortTermRetentionPolicy>): void;


    /**
     * Updates a managed database's short term retention policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The short term retention policy info.
     *
     * @param {number} [parameters.retentionDays] The backup retention period in
     * days. This is how many days Point-in-Time Restore will be supported.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedBackupShortTermRetentionPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedBackupShortTermRetentionPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedBackupShortTermRetentionPolicy>>;

    /**
     * Updates a managed database's short term retention policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The short term retention policy info.
     *
     * @param {number} [parameters.retentionDays] The backup retention period in
     * days. This is how many days Point-in-Time Restore will be supported.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedBackupShortTermRetentionPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedBackupShortTermRetentionPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedBackupShortTermRetentionPolicy} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedBackupShortTermRetentionPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedBackupShortTermRetentionPolicy>;
    beginUpdate(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedBackupShortTermRetentionPolicy, callback: ServiceCallback<models.ManagedBackupShortTermRetentionPolicy>): void;
    beginUpdate(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedBackupShortTermRetentionPolicy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedBackupShortTermRetentionPolicy>): void;


    /**
     * Gets a managed database's short term retention policy list.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedBackupShortTermRetentionPolicyListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDatabaseNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedBackupShortTermRetentionPolicyListResult>>;

    /**
     * Gets a managed database's short term retention policy list.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedBackupShortTermRetentionPolicyListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedBackupShortTermRetentionPolicyListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link
     *                      ManagedBackupShortTermRetentionPolicyListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDatabaseNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedBackupShortTermRetentionPolicyListResult>;
    listByDatabaseNext(nextPageLink: string, callback: ServiceCallback<models.ManagedBackupShortTermRetentionPolicyListResult>): void;
    listByDatabaseNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedBackupShortTermRetentionPolicyListResult>): void;
}

/**
 * @class
 * ManagedDatabases
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface ManagedDatabases {


    /**
     * Completes the restore operation on a managed database.
     *
     * @param {string} locationName The name of the region where the resource is
     * located.
     *
     * @param {uuid} operationId Management operation id that this request tries to
     * complete.
     *
     * @param {object} parameters The definition for completing the restore of this
     * managed database.
     *
     * @param {string} parameters.lastBackupName The last backup name to apply
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    completeRestoreWithHttpOperationResponse(locationName: string, operationId: string, parameters: models.CompleteDatabaseRestoreDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Completes the restore operation on a managed database.
     *
     * @param {string} locationName The name of the region where the resource is
     * located.
     *
     * @param {uuid} operationId Management operation id that this request tries to
     * complete.
     *
     * @param {object} parameters The definition for completing the restore of this
     * managed database.
     *
     * @param {string} parameters.lastBackupName The last backup name to apply
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    completeRestore(locationName: string, operationId: string, parameters: models.CompleteDatabaseRestoreDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    completeRestore(locationName: string, operationId: string, parameters: models.CompleteDatabaseRestoreDefinition, callback: ServiceCallback<void>): void;
    completeRestore(locationName: string, operationId: string, parameters: models.CompleteDatabaseRestoreDefinition, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a list of managed databases.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedDatabaseListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByInstanceWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedDatabaseListResult>>;

    /**
     * Gets a list of managed databases.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedDatabaseListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedDatabaseListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedDatabaseListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByInstance(resourceGroupName: string, managedInstanceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedDatabaseListResult>;
    listByInstance(resourceGroupName: string, managedInstanceName: string, callback: ServiceCallback<models.ManagedDatabaseListResult>): void;
    listByInstance(resourceGroupName: string, managedInstanceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedDatabaseListResult>): void;


    /**
     * Gets a managed database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedDatabase>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedDatabase>>;

    /**
     * Gets a managed database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedDatabase} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedDatabase} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedDatabase} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, managedInstanceName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedDatabase>;
    get(resourceGroupName: string, managedInstanceName: string, databaseName: string, callback: ServiceCallback<models.ManagedDatabase>): void;
    get(resourceGroupName: string, managedInstanceName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedDatabase>): void;


    /**
     * Creates a new database or updates an existing database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The requested database resource state.
     *
     * @param {string} [parameters.collation] Collation of the managed database.
     *
     * @param {date} [parameters.restorePointInTime] Conditional. If createMode is
     * PointInTimeRestore, this value is required. Specifies the point in time
     * (ISO8601 format) of the source database that will be restored to create the
     * new database.
     *
     * @param {string} [parameters.catalogCollation] Collation of the metadata
     * catalog. Possible values include: 'DATABASE_DEFAULT',
     * 'SQL_Latin1_General_CP1_CI_AS'
     *
     * @param {string} [parameters.createMode] Managed database create mode.
     * PointInTimeRestore: Create a database by restoring a point in time backup of
     * an existing database. SourceDatabaseName, SourceManagedInstanceName and
     * PointInTime must be specified. RestoreExternalBackup: Create a database by
     * restoring from external backup files. Collation, StorageContainerUri and
     * StorageContainerSasToken must be specified. Recovery: Creates a database by
     * restoring a geo-replicated backup. RecoverableDatabaseId must be specified
     * as the recoverable database resource ID to restore. Possible values include:
     * 'Default', 'RestoreExternalBackup', 'PointInTimeRestore', 'Recovery'
     *
     * @param {string} [parameters.storageContainerUri] Conditional. If createMode
     * is RestoreExternalBackup, this value is required. Specifies the uri of the
     * storage container where backups for this restore are stored.
     *
     * @param {string} [parameters.sourceDatabaseId] The resource identifier of the
     * source database associated with create operation of this database.
     *
     * @param {string} [parameters.restorableDroppedDatabaseId] The restorable
     * dropped database resource id to restore when creating this database.
     *
     * @param {string} [parameters.storageContainerSasToken] Conditional. If
     * createMode is RestoreExternalBackup, this value is required. Specifies the
     * storage container sas token.
     *
     * @param {string} [parameters.recoverableDatabaseId] The resource identifier
     * of the recoverable database associated with create operation of this
     * database.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedDatabase>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedDatabase, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedDatabase>>;

    /**
     * Creates a new database or updates an existing database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The requested database resource state.
     *
     * @param {string} [parameters.collation] Collation of the managed database.
     *
     * @param {date} [parameters.restorePointInTime] Conditional. If createMode is
     * PointInTimeRestore, this value is required. Specifies the point in time
     * (ISO8601 format) of the source database that will be restored to create the
     * new database.
     *
     * @param {string} [parameters.catalogCollation] Collation of the metadata
     * catalog. Possible values include: 'DATABASE_DEFAULT',
     * 'SQL_Latin1_General_CP1_CI_AS'
     *
     * @param {string} [parameters.createMode] Managed database create mode.
     * PointInTimeRestore: Create a database by restoring a point in time backup of
     * an existing database. SourceDatabaseName, SourceManagedInstanceName and
     * PointInTime must be specified. RestoreExternalBackup: Create a database by
     * restoring from external backup files. Collation, StorageContainerUri and
     * StorageContainerSasToken must be specified. Recovery: Creates a database by
     * restoring a geo-replicated backup. RecoverableDatabaseId must be specified
     * as the recoverable database resource ID to restore. Possible values include:
     * 'Default', 'RestoreExternalBackup', 'PointInTimeRestore', 'Recovery'
     *
     * @param {string} [parameters.storageContainerUri] Conditional. If createMode
     * is RestoreExternalBackup, this value is required. Specifies the uri of the
     * storage container where backups for this restore are stored.
     *
     * @param {string} [parameters.sourceDatabaseId] The resource identifier of the
     * source database associated with create operation of this database.
     *
     * @param {string} [parameters.restorableDroppedDatabaseId] The restorable
     * dropped database resource id to restore when creating this database.
     *
     * @param {string} [parameters.storageContainerSasToken] Conditional. If
     * createMode is RestoreExternalBackup, this value is required. Specifies the
     * storage container sas token.
     *
     * @param {string} [parameters.recoverableDatabaseId] The resource identifier
     * of the recoverable database associated with create operation of this
     * database.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedDatabase} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedDatabase} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedDatabase} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedDatabase, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedDatabase>;
    createOrUpdate(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedDatabase, callback: ServiceCallback<models.ManagedDatabase>): void;
    createOrUpdate(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedDatabase, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedDatabase>): void;


    /**
     * Deletes a managed database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a managed database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, managedInstanceName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, managedInstanceName: string, databaseName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, managedInstanceName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates an existing database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The requested database resource state.
     *
     * @param {string} [parameters.collation] Collation of the managed database.
     *
     * @param {date} [parameters.restorePointInTime] Conditional. If createMode is
     * PointInTimeRestore, this value is required. Specifies the point in time
     * (ISO8601 format) of the source database that will be restored to create the
     * new database.
     *
     * @param {string} [parameters.catalogCollation] Collation of the metadata
     * catalog. Possible values include: 'DATABASE_DEFAULT',
     * 'SQL_Latin1_General_CP1_CI_AS'
     *
     * @param {string} [parameters.createMode] Managed database create mode.
     * PointInTimeRestore: Create a database by restoring a point in time backup of
     * an existing database. SourceDatabaseName, SourceManagedInstanceName and
     * PointInTime must be specified. RestoreExternalBackup: Create a database by
     * restoring from external backup files. Collation, StorageContainerUri and
     * StorageContainerSasToken must be specified. Recovery: Creates a database by
     * restoring a geo-replicated backup. RecoverableDatabaseId must be specified
     * as the recoverable database resource ID to restore. Possible values include:
     * 'Default', 'RestoreExternalBackup', 'PointInTimeRestore', 'Recovery'
     *
     * @param {string} [parameters.storageContainerUri] Conditional. If createMode
     * is RestoreExternalBackup, this value is required. Specifies the uri of the
     * storage container where backups for this restore are stored.
     *
     * @param {string} [parameters.sourceDatabaseId] The resource identifier of the
     * source database associated with create operation of this database.
     *
     * @param {string} [parameters.restorableDroppedDatabaseId] The restorable
     * dropped database resource id to restore when creating this database.
     *
     * @param {string} [parameters.storageContainerSasToken] Conditional. If
     * createMode is RestoreExternalBackup, this value is required. Specifies the
     * storage container sas token.
     *
     * @param {string} [parameters.recoverableDatabaseId] The resource identifier
     * of the recoverable database associated with create operation of this
     * database.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedDatabase>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedDatabaseUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedDatabase>>;

    /**
     * Updates an existing database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The requested database resource state.
     *
     * @param {string} [parameters.collation] Collation of the managed database.
     *
     * @param {date} [parameters.restorePointInTime] Conditional. If createMode is
     * PointInTimeRestore, this value is required. Specifies the point in time
     * (ISO8601 format) of the source database that will be restored to create the
     * new database.
     *
     * @param {string} [parameters.catalogCollation] Collation of the metadata
     * catalog. Possible values include: 'DATABASE_DEFAULT',
     * 'SQL_Latin1_General_CP1_CI_AS'
     *
     * @param {string} [parameters.createMode] Managed database create mode.
     * PointInTimeRestore: Create a database by restoring a point in time backup of
     * an existing database. SourceDatabaseName, SourceManagedInstanceName and
     * PointInTime must be specified. RestoreExternalBackup: Create a database by
     * restoring from external backup files. Collation, StorageContainerUri and
     * StorageContainerSasToken must be specified. Recovery: Creates a database by
     * restoring a geo-replicated backup. RecoverableDatabaseId must be specified
     * as the recoverable database resource ID to restore. Possible values include:
     * 'Default', 'RestoreExternalBackup', 'PointInTimeRestore', 'Recovery'
     *
     * @param {string} [parameters.storageContainerUri] Conditional. If createMode
     * is RestoreExternalBackup, this value is required. Specifies the uri of the
     * storage container where backups for this restore are stored.
     *
     * @param {string} [parameters.sourceDatabaseId] The resource identifier of the
     * source database associated with create operation of this database.
     *
     * @param {string} [parameters.restorableDroppedDatabaseId] The restorable
     * dropped database resource id to restore when creating this database.
     *
     * @param {string} [parameters.storageContainerSasToken] Conditional. If
     * createMode is RestoreExternalBackup, this value is required. Specifies the
     * storage container sas token.
     *
     * @param {string} [parameters.recoverableDatabaseId] The resource identifier
     * of the recoverable database associated with create operation of this
     * database.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedDatabase} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedDatabase} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedDatabase} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedDatabaseUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedDatabase>;
    update(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedDatabaseUpdate, callback: ServiceCallback<models.ManagedDatabase>): void;
    update(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedDatabaseUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedDatabase>): void;


    /**
     * Completes the restore operation on a managed database.
     *
     * @param {string} locationName The name of the region where the resource is
     * located.
     *
     * @param {uuid} operationId Management operation id that this request tries to
     * complete.
     *
     * @param {object} parameters The definition for completing the restore of this
     * managed database.
     *
     * @param {string} parameters.lastBackupName The last backup name to apply
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCompleteRestoreWithHttpOperationResponse(locationName: string, operationId: string, parameters: models.CompleteDatabaseRestoreDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Completes the restore operation on a managed database.
     *
     * @param {string} locationName The name of the region where the resource is
     * located.
     *
     * @param {uuid} operationId Management operation id that this request tries to
     * complete.
     *
     * @param {object} parameters The definition for completing the restore of this
     * managed database.
     *
     * @param {string} parameters.lastBackupName The last backup name to apply
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCompleteRestore(locationName: string, operationId: string, parameters: models.CompleteDatabaseRestoreDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginCompleteRestore(locationName: string, operationId: string, parameters: models.CompleteDatabaseRestoreDefinition, callback: ServiceCallback<void>): void;
    beginCompleteRestore(locationName: string, operationId: string, parameters: models.CompleteDatabaseRestoreDefinition, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates a new database or updates an existing database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The requested database resource state.
     *
     * @param {string} [parameters.collation] Collation of the managed database.
     *
     * @param {date} [parameters.restorePointInTime] Conditional. If createMode is
     * PointInTimeRestore, this value is required. Specifies the point in time
     * (ISO8601 format) of the source database that will be restored to create the
     * new database.
     *
     * @param {string} [parameters.catalogCollation] Collation of the metadata
     * catalog. Possible values include: 'DATABASE_DEFAULT',
     * 'SQL_Latin1_General_CP1_CI_AS'
     *
     * @param {string} [parameters.createMode] Managed database create mode.
     * PointInTimeRestore: Create a database by restoring a point in time backup of
     * an existing database. SourceDatabaseName, SourceManagedInstanceName and
     * PointInTime must be specified. RestoreExternalBackup: Create a database by
     * restoring from external backup files. Collation, StorageContainerUri and
     * StorageContainerSasToken must be specified. Recovery: Creates a database by
     * restoring a geo-replicated backup. RecoverableDatabaseId must be specified
     * as the recoverable database resource ID to restore. Possible values include:
     * 'Default', 'RestoreExternalBackup', 'PointInTimeRestore', 'Recovery'
     *
     * @param {string} [parameters.storageContainerUri] Conditional. If createMode
     * is RestoreExternalBackup, this value is required. Specifies the uri of the
     * storage container where backups for this restore are stored.
     *
     * @param {string} [parameters.sourceDatabaseId] The resource identifier of the
     * source database associated with create operation of this database.
     *
     * @param {string} [parameters.restorableDroppedDatabaseId] The restorable
     * dropped database resource id to restore when creating this database.
     *
     * @param {string} [parameters.storageContainerSasToken] Conditional. If
     * createMode is RestoreExternalBackup, this value is required. Specifies the
     * storage container sas token.
     *
     * @param {string} [parameters.recoverableDatabaseId] The resource identifier
     * of the recoverable database associated with create operation of this
     * database.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedDatabase>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedDatabase, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedDatabase>>;

    /**
     * Creates a new database or updates an existing database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The requested database resource state.
     *
     * @param {string} [parameters.collation] Collation of the managed database.
     *
     * @param {date} [parameters.restorePointInTime] Conditional. If createMode is
     * PointInTimeRestore, this value is required. Specifies the point in time
     * (ISO8601 format) of the source database that will be restored to create the
     * new database.
     *
     * @param {string} [parameters.catalogCollation] Collation of the metadata
     * catalog. Possible values include: 'DATABASE_DEFAULT',
     * 'SQL_Latin1_General_CP1_CI_AS'
     *
     * @param {string} [parameters.createMode] Managed database create mode.
     * PointInTimeRestore: Create a database by restoring a point in time backup of
     * an existing database. SourceDatabaseName, SourceManagedInstanceName and
     * PointInTime must be specified. RestoreExternalBackup: Create a database by
     * restoring from external backup files. Collation, StorageContainerUri and
     * StorageContainerSasToken must be specified. Recovery: Creates a database by
     * restoring a geo-replicated backup. RecoverableDatabaseId must be specified
     * as the recoverable database resource ID to restore. Possible values include:
     * 'Default', 'RestoreExternalBackup', 'PointInTimeRestore', 'Recovery'
     *
     * @param {string} [parameters.storageContainerUri] Conditional. If createMode
     * is RestoreExternalBackup, this value is required. Specifies the uri of the
     * storage container where backups for this restore are stored.
     *
     * @param {string} [parameters.sourceDatabaseId] The resource identifier of the
     * source database associated with create operation of this database.
     *
     * @param {string} [parameters.restorableDroppedDatabaseId] The restorable
     * dropped database resource id to restore when creating this database.
     *
     * @param {string} [parameters.storageContainerSasToken] Conditional. If
     * createMode is RestoreExternalBackup, this value is required. Specifies the
     * storage container sas token.
     *
     * @param {string} [parameters.recoverableDatabaseId] The resource identifier
     * of the recoverable database associated with create operation of this
     * database.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedDatabase} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedDatabase} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedDatabase} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedDatabase, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedDatabase>;
    beginCreateOrUpdate(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedDatabase, callback: ServiceCallback<models.ManagedDatabase>): void;
    beginCreateOrUpdate(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedDatabase, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedDatabase>): void;


    /**
     * Deletes a managed database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a managed database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, managedInstanceName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, managedInstanceName: string, databaseName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, managedInstanceName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates an existing database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The requested database resource state.
     *
     * @param {string} [parameters.collation] Collation of the managed database.
     *
     * @param {date} [parameters.restorePointInTime] Conditional. If createMode is
     * PointInTimeRestore, this value is required. Specifies the point in time
     * (ISO8601 format) of the source database that will be restored to create the
     * new database.
     *
     * @param {string} [parameters.catalogCollation] Collation of the metadata
     * catalog. Possible values include: 'DATABASE_DEFAULT',
     * 'SQL_Latin1_General_CP1_CI_AS'
     *
     * @param {string} [parameters.createMode] Managed database create mode.
     * PointInTimeRestore: Create a database by restoring a point in time backup of
     * an existing database. SourceDatabaseName, SourceManagedInstanceName and
     * PointInTime must be specified. RestoreExternalBackup: Create a database by
     * restoring from external backup files. Collation, StorageContainerUri and
     * StorageContainerSasToken must be specified. Recovery: Creates a database by
     * restoring a geo-replicated backup. RecoverableDatabaseId must be specified
     * as the recoverable database resource ID to restore. Possible values include:
     * 'Default', 'RestoreExternalBackup', 'PointInTimeRestore', 'Recovery'
     *
     * @param {string} [parameters.storageContainerUri] Conditional. If createMode
     * is RestoreExternalBackup, this value is required. Specifies the uri of the
     * storage container where backups for this restore are stored.
     *
     * @param {string} [parameters.sourceDatabaseId] The resource identifier of the
     * source database associated with create operation of this database.
     *
     * @param {string} [parameters.restorableDroppedDatabaseId] The restorable
     * dropped database resource id to restore when creating this database.
     *
     * @param {string} [parameters.storageContainerSasToken] Conditional. If
     * createMode is RestoreExternalBackup, this value is required. Specifies the
     * storage container sas token.
     *
     * @param {string} [parameters.recoverableDatabaseId] The resource identifier
     * of the recoverable database associated with create operation of this
     * database.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedDatabase>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedDatabaseUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedDatabase>>;

    /**
     * Updates an existing database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The requested database resource state.
     *
     * @param {string} [parameters.collation] Collation of the managed database.
     *
     * @param {date} [parameters.restorePointInTime] Conditional. If createMode is
     * PointInTimeRestore, this value is required. Specifies the point in time
     * (ISO8601 format) of the source database that will be restored to create the
     * new database.
     *
     * @param {string} [parameters.catalogCollation] Collation of the metadata
     * catalog. Possible values include: 'DATABASE_DEFAULT',
     * 'SQL_Latin1_General_CP1_CI_AS'
     *
     * @param {string} [parameters.createMode] Managed database create mode.
     * PointInTimeRestore: Create a database by restoring a point in time backup of
     * an existing database. SourceDatabaseName, SourceManagedInstanceName and
     * PointInTime must be specified. RestoreExternalBackup: Create a database by
     * restoring from external backup files. Collation, StorageContainerUri and
     * StorageContainerSasToken must be specified. Recovery: Creates a database by
     * restoring a geo-replicated backup. RecoverableDatabaseId must be specified
     * as the recoverable database resource ID to restore. Possible values include:
     * 'Default', 'RestoreExternalBackup', 'PointInTimeRestore', 'Recovery'
     *
     * @param {string} [parameters.storageContainerUri] Conditional. If createMode
     * is RestoreExternalBackup, this value is required. Specifies the uri of the
     * storage container where backups for this restore are stored.
     *
     * @param {string} [parameters.sourceDatabaseId] The resource identifier of the
     * source database associated with create operation of this database.
     *
     * @param {string} [parameters.restorableDroppedDatabaseId] The restorable
     * dropped database resource id to restore when creating this database.
     *
     * @param {string} [parameters.storageContainerSasToken] Conditional. If
     * createMode is RestoreExternalBackup, this value is required. Specifies the
     * storage container sas token.
     *
     * @param {string} [parameters.recoverableDatabaseId] The resource identifier
     * of the recoverable database associated with create operation of this
     * database.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedDatabase} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedDatabase} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedDatabase} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedDatabaseUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedDatabase>;
    beginUpdate(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedDatabaseUpdate, callback: ServiceCallback<models.ManagedDatabase>): void;
    beginUpdate(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedDatabaseUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedDatabase>): void;


    /**
     * Gets a list of managed databases.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedDatabaseListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByInstanceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedDatabaseListResult>>;

    /**
     * Gets a list of managed databases.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedDatabaseListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedDatabaseListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedDatabaseListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByInstanceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedDatabaseListResult>;
    listByInstanceNext(nextPageLink: string, callback: ServiceCallback<models.ManagedDatabaseListResult>): void;
    listByInstanceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedDatabaseListResult>): void;
}

/**
 * @class
 * ServerAutomaticTuningOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface ServerAutomaticTuningOperations {


    /**
     * Retrieves server automatic tuning options.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerAutomaticTuning>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerAutomaticTuning>>;

    /**
     * Retrieves server automatic tuning options.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerAutomaticTuning} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerAutomaticTuning} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerAutomaticTuning} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerAutomaticTuning>;
    get(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.ServerAutomaticTuning>): void;
    get(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerAutomaticTuning>): void;


    /**
     * Update automatic tuning options on server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The requested automatic tuning resource state.
     *
     * @param {string} [parameters.desiredState] Automatic tuning desired state.
     * Possible values include: 'Custom', 'Auto', 'Unspecified'
     *
     * @param {object} [parameters.options] Automatic tuning options definition.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerAutomaticTuning>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serverName: string, parameters: models.ServerAutomaticTuning, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerAutomaticTuning>>;

    /**
     * Update automatic tuning options on server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The requested automatic tuning resource state.
     *
     * @param {string} [parameters.desiredState] Automatic tuning desired state.
     * Possible values include: 'Custom', 'Auto', 'Unspecified'
     *
     * @param {object} [parameters.options] Automatic tuning options definition.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerAutomaticTuning} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerAutomaticTuning} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerAutomaticTuning} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serverName: string, parameters: models.ServerAutomaticTuning, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerAutomaticTuning>;
    update(resourceGroupName: string, serverName: string, parameters: models.ServerAutomaticTuning, callback: ServiceCallback<models.ServerAutomaticTuning>): void;
    update(resourceGroupName: string, serverName: string, parameters: models.ServerAutomaticTuning, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerAutomaticTuning>): void;
}

/**
 * @class
 * ServerDnsAliases
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface ServerDnsAliases {


    /**
     * Gets a server DNS alias.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server that the alias is pointing
     * to.
     *
     * @param {string} dnsAliasName The name of the server DNS alias.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerDnsAlias>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, dnsAliasName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerDnsAlias>>;

    /**
     * Gets a server DNS alias.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server that the alias is pointing
     * to.
     *
     * @param {string} dnsAliasName The name of the server DNS alias.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerDnsAlias} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerDnsAlias} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerDnsAlias} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, dnsAliasName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerDnsAlias>;
    get(resourceGroupName: string, serverName: string, dnsAliasName: string, callback: ServiceCallback<models.ServerDnsAlias>): void;
    get(resourceGroupName: string, serverName: string, dnsAliasName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerDnsAlias>): void;


    /**
     * Creates a server dns alias.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server that the alias is pointing
     * to.
     *
     * @param {string} dnsAliasName The name of the server DNS alias.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerDnsAlias>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, dnsAliasName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerDnsAlias>>;

    /**
     * Creates a server dns alias.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server that the alias is pointing
     * to.
     *
     * @param {string} dnsAliasName The name of the server DNS alias.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerDnsAlias} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerDnsAlias} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerDnsAlias} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, dnsAliasName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerDnsAlias>;
    createOrUpdate(resourceGroupName: string, serverName: string, dnsAliasName: string, callback: ServiceCallback<models.ServerDnsAlias>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, dnsAliasName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerDnsAlias>): void;


    /**
     * Deletes the server DNS alias with the given name.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server that the alias is pointing
     * to.
     *
     * @param {string} dnsAliasName The name of the server DNS alias.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, dnsAliasName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the server DNS alias with the given name.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server that the alias is pointing
     * to.
     *
     * @param {string} dnsAliasName The name of the server DNS alias.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serverName: string, dnsAliasName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serverName: string, dnsAliasName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serverName: string, dnsAliasName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a list of server DNS aliases for a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server that the alias is pointing
     * to.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerDnsAliasListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerDnsAliasListResult>>;

    /**
     * Gets a list of server DNS aliases for a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server that the alias is pointing
     * to.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerDnsAliasListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerDnsAliasListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerDnsAliasListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerDnsAliasListResult>;
    listByServer(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.ServerDnsAliasListResult>): void;
    listByServer(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerDnsAliasListResult>): void;


    /**
     * Acquires server DNS alias from another server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server that the alias is pointing
     * to.
     *
     * @param {string} dnsAliasName The name of the server dns alias.
     *
     * @param {object} parameters
     *
     * @param {string} [parameters.oldServerDnsAliasId] The id of the server alias
     * that will be acquired to point to this server instead.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    acquireWithHttpOperationResponse(resourceGroupName: string, serverName: string, dnsAliasName: string, parameters: models.ServerDnsAliasAcquisition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Acquires server DNS alias from another server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server that the alias is pointing
     * to.
     *
     * @param {string} dnsAliasName The name of the server dns alias.
     *
     * @param {object} parameters
     *
     * @param {string} [parameters.oldServerDnsAliasId] The id of the server alias
     * that will be acquired to point to this server instead.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    acquire(resourceGroupName: string, serverName: string, dnsAliasName: string, parameters: models.ServerDnsAliasAcquisition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    acquire(resourceGroupName: string, serverName: string, dnsAliasName: string, parameters: models.ServerDnsAliasAcquisition, callback: ServiceCallback<void>): void;
    acquire(resourceGroupName: string, serverName: string, dnsAliasName: string, parameters: models.ServerDnsAliasAcquisition, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates a server dns alias.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server that the alias is pointing
     * to.
     *
     * @param {string} dnsAliasName The name of the server DNS alias.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerDnsAlias>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, dnsAliasName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerDnsAlias>>;

    /**
     * Creates a server dns alias.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server that the alias is pointing
     * to.
     *
     * @param {string} dnsAliasName The name of the server DNS alias.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerDnsAlias} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerDnsAlias} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerDnsAlias} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, dnsAliasName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerDnsAlias>;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, dnsAliasName: string, callback: ServiceCallback<models.ServerDnsAlias>): void;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, dnsAliasName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerDnsAlias>): void;


    /**
     * Deletes the server DNS alias with the given name.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server that the alias is pointing
     * to.
     *
     * @param {string} dnsAliasName The name of the server DNS alias.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, dnsAliasName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the server DNS alias with the given name.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server that the alias is pointing
     * to.
     *
     * @param {string} dnsAliasName The name of the server DNS alias.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, serverName: string, dnsAliasName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, serverName: string, dnsAliasName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, serverName: string, dnsAliasName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Acquires server DNS alias from another server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server that the alias is pointing
     * to.
     *
     * @param {string} dnsAliasName The name of the server dns alias.
     *
     * @param {object} parameters
     *
     * @param {string} [parameters.oldServerDnsAliasId] The id of the server alias
     * that will be acquired to point to this server instead.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginAcquireWithHttpOperationResponse(resourceGroupName: string, serverName: string, dnsAliasName: string, parameters: models.ServerDnsAliasAcquisition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Acquires server DNS alias from another server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server that the alias is pointing
     * to.
     *
     * @param {string} dnsAliasName The name of the server dns alias.
     *
     * @param {object} parameters
     *
     * @param {string} [parameters.oldServerDnsAliasId] The id of the server alias
     * that will be acquired to point to this server instead.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginAcquire(resourceGroupName: string, serverName: string, dnsAliasName: string, parameters: models.ServerDnsAliasAcquisition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginAcquire(resourceGroupName: string, serverName: string, dnsAliasName: string, parameters: models.ServerDnsAliasAcquisition, callback: ServiceCallback<void>): void;
    beginAcquire(resourceGroupName: string, serverName: string, dnsAliasName: string, parameters: models.ServerDnsAliasAcquisition, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a list of server DNS aliases for a server.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerDnsAliasListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerDnsAliasListResult>>;

    /**
     * Gets a list of server DNS aliases for a server.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerDnsAliasListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerDnsAliasListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerDnsAliasListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServerNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerDnsAliasListResult>;
    listByServerNext(nextPageLink: string, callback: ServiceCallback<models.ServerDnsAliasListResult>): void;
    listByServerNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerDnsAliasListResult>): void;
}

/**
 * @class
 * ServerSecurityAlertPolicies
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface ServerSecurityAlertPolicies {


    /**
     * Get a server's security alert policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerSecurityAlertPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerSecurityAlertPolicy>>;

    /**
     * Get a server's security alert policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerSecurityAlertPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerSecurityAlertPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerSecurityAlertPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerSecurityAlertPolicy>;
    get(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.ServerSecurityAlertPolicy>): void;
    get(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerSecurityAlertPolicy>): void;


    /**
     * Creates or updates a threat detection policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The server security alert policy.
     *
     * @param {string} parameters.state Specifies the state of the policy, whether
     * it is enabled or disabled. Possible values include: 'New', 'Enabled',
     * 'Disabled'
     *
     * @param {array} [parameters.disabledAlerts] Specifies an array of alerts that
     * are disabled. Allowed values are: Sql_Injection,
     * Sql_Injection_Vulnerability, Access_Anomaly, Data_Exfiltration,
     * Unsafe_Action
     *
     * @param {array} [parameters.emailAddresses] Specifies an array of e-mail
     * addresses to which the alert is sent.
     *
     * @param {boolean} [parameters.emailAccountAdmins] Specifies that the alert is
     * sent to the account administrators.
     *
     * @param {string} [parameters.storageEndpoint] Specifies the blob storage
     * endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage
     * will hold all Threat Detection audit logs.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the Threat Detection audit storage account.
     *
     * @param {number} [parameters.retentionDays] Specifies the number of days to
     * keep in the Threat Detection audit logs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerSecurityAlertPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, parameters: models.ServerSecurityAlertPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerSecurityAlertPolicy>>;

    /**
     * Creates or updates a threat detection policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The server security alert policy.
     *
     * @param {string} parameters.state Specifies the state of the policy, whether
     * it is enabled or disabled. Possible values include: 'New', 'Enabled',
     * 'Disabled'
     *
     * @param {array} [parameters.disabledAlerts] Specifies an array of alerts that
     * are disabled. Allowed values are: Sql_Injection,
     * Sql_Injection_Vulnerability, Access_Anomaly, Data_Exfiltration,
     * Unsafe_Action
     *
     * @param {array} [parameters.emailAddresses] Specifies an array of e-mail
     * addresses to which the alert is sent.
     *
     * @param {boolean} [parameters.emailAccountAdmins] Specifies that the alert is
     * sent to the account administrators.
     *
     * @param {string} [parameters.storageEndpoint] Specifies the blob storage
     * endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage
     * will hold all Threat Detection audit logs.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the Threat Detection audit storage account.
     *
     * @param {number} [parameters.retentionDays] Specifies the number of days to
     * keep in the Threat Detection audit logs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerSecurityAlertPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerSecurityAlertPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerSecurityAlertPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, parameters: models.ServerSecurityAlertPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerSecurityAlertPolicy>;
    createOrUpdate(resourceGroupName: string, serverName: string, parameters: models.ServerSecurityAlertPolicy, callback: ServiceCallback<models.ServerSecurityAlertPolicy>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, parameters: models.ServerSecurityAlertPolicy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerSecurityAlertPolicy>): void;


    /**
     * Creates or updates a threat detection policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The server security alert policy.
     *
     * @param {string} parameters.state Specifies the state of the policy, whether
     * it is enabled or disabled. Possible values include: 'New', 'Enabled',
     * 'Disabled'
     *
     * @param {array} [parameters.disabledAlerts] Specifies an array of alerts that
     * are disabled. Allowed values are: Sql_Injection,
     * Sql_Injection_Vulnerability, Access_Anomaly, Data_Exfiltration,
     * Unsafe_Action
     *
     * @param {array} [parameters.emailAddresses] Specifies an array of e-mail
     * addresses to which the alert is sent.
     *
     * @param {boolean} [parameters.emailAccountAdmins] Specifies that the alert is
     * sent to the account administrators.
     *
     * @param {string} [parameters.storageEndpoint] Specifies the blob storage
     * endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage
     * will hold all Threat Detection audit logs.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the Threat Detection audit storage account.
     *
     * @param {number} [parameters.retentionDays] Specifies the number of days to
     * keep in the Threat Detection audit logs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerSecurityAlertPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, parameters: models.ServerSecurityAlertPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerSecurityAlertPolicy>>;

    /**
     * Creates or updates a threat detection policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The server security alert policy.
     *
     * @param {string} parameters.state Specifies the state of the policy, whether
     * it is enabled or disabled. Possible values include: 'New', 'Enabled',
     * 'Disabled'
     *
     * @param {array} [parameters.disabledAlerts] Specifies an array of alerts that
     * are disabled. Allowed values are: Sql_Injection,
     * Sql_Injection_Vulnerability, Access_Anomaly, Data_Exfiltration,
     * Unsafe_Action
     *
     * @param {array} [parameters.emailAddresses] Specifies an array of e-mail
     * addresses to which the alert is sent.
     *
     * @param {boolean} [parameters.emailAccountAdmins] Specifies that the alert is
     * sent to the account administrators.
     *
     * @param {string} [parameters.storageEndpoint] Specifies the blob storage
     * endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage
     * will hold all Threat Detection audit logs.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the Threat Detection audit storage account.
     *
     * @param {number} [parameters.retentionDays] Specifies the number of days to
     * keep in the Threat Detection audit logs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerSecurityAlertPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerSecurityAlertPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerSecurityAlertPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, parameters: models.ServerSecurityAlertPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerSecurityAlertPolicy>;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, parameters: models.ServerSecurityAlertPolicy, callback: ServiceCallback<models.ServerSecurityAlertPolicy>): void;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, parameters: models.ServerSecurityAlertPolicy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerSecurityAlertPolicy>): void;
}

/**
 * @class
 * RestorePoints
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface RestorePoints {


    /**
     * Gets a list of database restore points.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RestorePointListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDatabaseWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RestorePointListResult>>;

    /**
     * Gets a list of database restore points.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RestorePointListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RestorePointListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RestorePointListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RestorePointListResult>;
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.RestorePointListResult>): void;
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RestorePointListResult>): void;


    /**
     * Creates a restore point for a data warehouse.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The definition for creating the restore point of
     * this database.
     *
     * @param {string} parameters.restorePointLabel The restore point label to
     * apply
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RestorePoint>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.CreateDatabaseRestorePointDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RestorePoint>>;

    /**
     * Creates a restore point for a data warehouse.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The definition for creating the restore point of
     * this database.
     *
     * @param {string} parameters.restorePointLabel The restore point label to
     * apply
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RestorePoint} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RestorePoint} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RestorePoint} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.CreateDatabaseRestorePointDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RestorePoint>;
    create(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.CreateDatabaseRestorePointDefinition, callback: ServiceCallback<models.RestorePoint>): void;
    create(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.CreateDatabaseRestorePointDefinition, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RestorePoint>): void;


    /**
     * Gets a restore point.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {string} restorePointName The name of the restore point.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RestorePoint>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, restorePointName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RestorePoint>>;

    /**
     * Gets a restore point.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {string} restorePointName The name of the restore point.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RestorePoint} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RestorePoint} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RestorePoint} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, databaseName: string, restorePointName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RestorePoint>;
    get(resourceGroupName: string, serverName: string, databaseName: string, restorePointName: string, callback: ServiceCallback<models.RestorePoint>): void;
    get(resourceGroupName: string, serverName: string, databaseName: string, restorePointName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RestorePoint>): void;


    /**
     * Deletes a restore point.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {string} restorePointName The name of the restore point.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, restorePointName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a restore point.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {string} restorePointName The name of the restore point.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serverName: string, databaseName: string, restorePointName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serverName: string, databaseName: string, restorePointName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serverName: string, databaseName: string, restorePointName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates a restore point for a data warehouse.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The definition for creating the restore point of
     * this database.
     *
     * @param {string} parameters.restorePointLabel The restore point label to
     * apply
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RestorePoint>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.CreateDatabaseRestorePointDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RestorePoint>>;

    /**
     * Creates a restore point for a data warehouse.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The definition for creating the restore point of
     * this database.
     *
     * @param {string} parameters.restorePointLabel The restore point label to
     * apply
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RestorePoint} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RestorePoint} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RestorePoint} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.CreateDatabaseRestorePointDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RestorePoint>;
    beginCreate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.CreateDatabaseRestorePointDefinition, callback: ServiceCallback<models.RestorePoint>): void;
    beginCreate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.CreateDatabaseRestorePointDefinition, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RestorePoint>): void;
}

/**
 * @class
 * ManagedDatabaseSecurityAlertPolicies
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface ManagedDatabaseSecurityAlertPolicies {


    /**
     * Gets a managed database's security alert policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the managed database for which the
     * security alert policy is defined.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedDatabaseSecurityAlertPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedDatabaseSecurityAlertPolicy>>;

    /**
     * Gets a managed database's security alert policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the managed database for which the
     * security alert policy is defined.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedDatabaseSecurityAlertPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedDatabaseSecurityAlertPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedDatabaseSecurityAlertPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, managedInstanceName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedDatabaseSecurityAlertPolicy>;
    get(resourceGroupName: string, managedInstanceName: string, databaseName: string, callback: ServiceCallback<models.ManagedDatabaseSecurityAlertPolicy>): void;
    get(resourceGroupName: string, managedInstanceName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedDatabaseSecurityAlertPolicy>): void;


    /**
     * Creates or updates a database's security alert policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the managed database for which the
     * security alert policy is defined.
     *
     * @param {object} parameters The database security alert policy.
     *
     * @param {string} parameters.state Specifies the state of the policy, whether
     * it is enabled or disabled. Possible values include: 'New', 'Enabled',
     * 'Disabled'
     *
     * @param {array} [parameters.disabledAlerts] Specifies an array of alerts that
     * are disabled. Allowed values are: Sql_Injection,
     * Sql_Injection_Vulnerability, Access_Anomaly, Data_Exfiltration,
     * Unsafe_Action
     *
     * @param {array} [parameters.emailAddresses] Specifies an array of e-mail
     * addresses to which the alert is sent.
     *
     * @param {boolean} [parameters.emailAccountAdmins] Specifies that the alert is
     * sent to the account administrators.
     *
     * @param {string} [parameters.storageEndpoint] Specifies the blob storage
     * endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage
     * will hold all Threat Detection audit logs.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the Threat Detection audit storage account.
     *
     * @param {number} [parameters.retentionDays] Specifies the number of days to
     * keep in the Threat Detection audit logs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedDatabaseSecurityAlertPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedDatabaseSecurityAlertPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedDatabaseSecurityAlertPolicy>>;

    /**
     * Creates or updates a database's security alert policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the managed database for which the
     * security alert policy is defined.
     *
     * @param {object} parameters The database security alert policy.
     *
     * @param {string} parameters.state Specifies the state of the policy, whether
     * it is enabled or disabled. Possible values include: 'New', 'Enabled',
     * 'Disabled'
     *
     * @param {array} [parameters.disabledAlerts] Specifies an array of alerts that
     * are disabled. Allowed values are: Sql_Injection,
     * Sql_Injection_Vulnerability, Access_Anomaly, Data_Exfiltration,
     * Unsafe_Action
     *
     * @param {array} [parameters.emailAddresses] Specifies an array of e-mail
     * addresses to which the alert is sent.
     *
     * @param {boolean} [parameters.emailAccountAdmins] Specifies that the alert is
     * sent to the account administrators.
     *
     * @param {string} [parameters.storageEndpoint] Specifies the blob storage
     * endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage
     * will hold all Threat Detection audit logs.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the Threat Detection audit storage account.
     *
     * @param {number} [parameters.retentionDays] Specifies the number of days to
     * keep in the Threat Detection audit logs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedDatabaseSecurityAlertPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedDatabaseSecurityAlertPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedDatabaseSecurityAlertPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedDatabaseSecurityAlertPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedDatabaseSecurityAlertPolicy>;
    createOrUpdate(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedDatabaseSecurityAlertPolicy, callback: ServiceCallback<models.ManagedDatabaseSecurityAlertPolicy>): void;
    createOrUpdate(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.ManagedDatabaseSecurityAlertPolicy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedDatabaseSecurityAlertPolicy>): void;
}

/**
 * @class
 * ManagedServerSecurityAlertPolicies
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface ManagedServerSecurityAlertPolicies {


    /**
     * Get a managed server's threat detection policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedServerSecurityAlertPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedServerSecurityAlertPolicy>>;

    /**
     * Get a managed server's threat detection policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedServerSecurityAlertPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedServerSecurityAlertPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedServerSecurityAlertPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, managedInstanceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedServerSecurityAlertPolicy>;
    get(resourceGroupName: string, managedInstanceName: string, callback: ServiceCallback<models.ManagedServerSecurityAlertPolicy>): void;
    get(resourceGroupName: string, managedInstanceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedServerSecurityAlertPolicy>): void;


    /**
     * Creates or updates a threat detection policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} parameters The managed server security alert policy.
     *
     * @param {string} parameters.state Specifies the state of the policy, whether
     * it is enabled or disabled. Possible values include: 'New', 'Enabled',
     * 'Disabled'
     *
     * @param {array} [parameters.disabledAlerts] Specifies an array of alerts that
     * are disabled. Allowed values are: Sql_Injection,
     * Sql_Injection_Vulnerability, Access_Anomaly, Data_Exfiltration,
     * Unsafe_Action
     *
     * @param {array} [parameters.emailAddresses] Specifies an array of e-mail
     * addresses to which the alert is sent.
     *
     * @param {boolean} [parameters.emailAccountAdmins] Specifies that the alert is
     * sent to the account administrators.
     *
     * @param {string} [parameters.storageEndpoint] Specifies the blob storage
     * endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage
     * will hold all Threat Detection audit logs.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the Threat Detection audit storage account.
     *
     * @param {number} [parameters.retentionDays] Specifies the number of days to
     * keep in the Threat Detection audit logs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedServerSecurityAlertPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedServerSecurityAlertPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedServerSecurityAlertPolicy>>;

    /**
     * Creates or updates a threat detection policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} parameters The managed server security alert policy.
     *
     * @param {string} parameters.state Specifies the state of the policy, whether
     * it is enabled or disabled. Possible values include: 'New', 'Enabled',
     * 'Disabled'
     *
     * @param {array} [parameters.disabledAlerts] Specifies an array of alerts that
     * are disabled. Allowed values are: Sql_Injection,
     * Sql_Injection_Vulnerability, Access_Anomaly, Data_Exfiltration,
     * Unsafe_Action
     *
     * @param {array} [parameters.emailAddresses] Specifies an array of e-mail
     * addresses to which the alert is sent.
     *
     * @param {boolean} [parameters.emailAccountAdmins] Specifies that the alert is
     * sent to the account administrators.
     *
     * @param {string} [parameters.storageEndpoint] Specifies the blob storage
     * endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage
     * will hold all Threat Detection audit logs.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the Threat Detection audit storage account.
     *
     * @param {number} [parameters.retentionDays] Specifies the number of days to
     * keep in the Threat Detection audit logs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedServerSecurityAlertPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedServerSecurityAlertPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedServerSecurityAlertPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedServerSecurityAlertPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedServerSecurityAlertPolicy>;
    createOrUpdate(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedServerSecurityAlertPolicy, callback: ServiceCallback<models.ManagedServerSecurityAlertPolicy>): void;
    createOrUpdate(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedServerSecurityAlertPolicy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedServerSecurityAlertPolicy>): void;


    /**
     * Creates or updates a threat detection policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} parameters The managed server security alert policy.
     *
     * @param {string} parameters.state Specifies the state of the policy, whether
     * it is enabled or disabled. Possible values include: 'New', 'Enabled',
     * 'Disabled'
     *
     * @param {array} [parameters.disabledAlerts] Specifies an array of alerts that
     * are disabled. Allowed values are: Sql_Injection,
     * Sql_Injection_Vulnerability, Access_Anomaly, Data_Exfiltration,
     * Unsafe_Action
     *
     * @param {array} [parameters.emailAddresses] Specifies an array of e-mail
     * addresses to which the alert is sent.
     *
     * @param {boolean} [parameters.emailAccountAdmins] Specifies that the alert is
     * sent to the account administrators.
     *
     * @param {string} [parameters.storageEndpoint] Specifies the blob storage
     * endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage
     * will hold all Threat Detection audit logs.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the Threat Detection audit storage account.
     *
     * @param {number} [parameters.retentionDays] Specifies the number of days to
     * keep in the Threat Detection audit logs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedServerSecurityAlertPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedServerSecurityAlertPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedServerSecurityAlertPolicy>>;

    /**
     * Creates or updates a threat detection policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} parameters The managed server security alert policy.
     *
     * @param {string} parameters.state Specifies the state of the policy, whether
     * it is enabled or disabled. Possible values include: 'New', 'Enabled',
     * 'Disabled'
     *
     * @param {array} [parameters.disabledAlerts] Specifies an array of alerts that
     * are disabled. Allowed values are: Sql_Injection,
     * Sql_Injection_Vulnerability, Access_Anomaly, Data_Exfiltration,
     * Unsafe_Action
     *
     * @param {array} [parameters.emailAddresses] Specifies an array of e-mail
     * addresses to which the alert is sent.
     *
     * @param {boolean} [parameters.emailAccountAdmins] Specifies that the alert is
     * sent to the account administrators.
     *
     * @param {string} [parameters.storageEndpoint] Specifies the blob storage
     * endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage
     * will hold all Threat Detection audit logs.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the Threat Detection audit storage account.
     *
     * @param {number} [parameters.retentionDays] Specifies the number of days to
     * keep in the Threat Detection audit logs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedServerSecurityAlertPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedServerSecurityAlertPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedServerSecurityAlertPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedServerSecurityAlertPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedServerSecurityAlertPolicy>;
    beginCreateOrUpdate(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedServerSecurityAlertPolicy, callback: ServiceCallback<models.ManagedServerSecurityAlertPolicy>): void;
    beginCreateOrUpdate(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedServerSecurityAlertPolicy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedServerSecurityAlertPolicy>): void;
}

/**
 * @class
 * DatabaseOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface DatabaseOperations {


    /**
     * Cancels the asynchronous operation on the database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {uuid} operationId The operation identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    cancelWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, operationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Cancels the asynchronous operation on the database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {uuid} operationId The operation identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    cancel(resourceGroupName: string, serverName: string, databaseName: string, operationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    cancel(resourceGroupName: string, serverName: string, databaseName: string, operationId: string, callback: ServiceCallback<void>): void;
    cancel(resourceGroupName: string, serverName: string, databaseName: string, operationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a list of operations performed on the database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseOperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDatabaseWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseOperationListResult>>;

    /**
     * Gets a list of operations performed on the database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseOperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseOperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseOperationListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseOperationListResult>;
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.DatabaseOperationListResult>): void;
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseOperationListResult>): void;


    /**
     * Gets a list of operations performed on the database.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseOperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDatabaseNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseOperationListResult>>;

    /**
     * Gets a list of operations performed on the database.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseOperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseOperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseOperationListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDatabaseNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseOperationListResult>;
    listByDatabaseNext(nextPageLink: string, callback: ServiceCallback<models.DatabaseOperationListResult>): void;
    listByDatabaseNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseOperationListResult>): void;
}

/**
 * @class
 * ElasticPoolOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface ElasticPoolOperations {


    /**
     * Cancels the asynchronous operation on the elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName
     *
     * @param {uuid} operationId The operation identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    cancelWithHttpOperationResponse(resourceGroupName: string, serverName: string, elasticPoolName: string, operationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Cancels the asynchronous operation on the elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName
     *
     * @param {uuid} operationId The operation identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    cancel(resourceGroupName: string, serverName: string, elasticPoolName: string, operationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    cancel(resourceGroupName: string, serverName: string, elasticPoolName: string, operationId: string, callback: ServiceCallback<void>): void;
    cancel(resourceGroupName: string, serverName: string, elasticPoolName: string, operationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a list of operations performed on the elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ElasticPoolOperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByElasticPoolWithHttpOperationResponse(resourceGroupName: string, serverName: string, elasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ElasticPoolOperationListResult>>;

    /**
     * Gets a list of operations performed on the elastic pool.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} elasticPoolName
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ElasticPoolOperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ElasticPoolOperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ElasticPoolOperationListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByElasticPool(resourceGroupName: string, serverName: string, elasticPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ElasticPoolOperationListResult>;
    listByElasticPool(resourceGroupName: string, serverName: string, elasticPoolName: string, callback: ServiceCallback<models.ElasticPoolOperationListResult>): void;
    listByElasticPool(resourceGroupName: string, serverName: string, elasticPoolName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ElasticPoolOperationListResult>): void;


    /**
     * Gets a list of operations performed on the elastic pool.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ElasticPoolOperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByElasticPoolNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ElasticPoolOperationListResult>>;

    /**
     * Gets a list of operations performed on the elastic pool.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ElasticPoolOperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ElasticPoolOperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ElasticPoolOperationListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByElasticPoolNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ElasticPoolOperationListResult>;
    listByElasticPoolNext(nextPageLink: string, callback: ServiceCallback<models.ElasticPoolOperationListResult>): void;
    listByElasticPoolNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ElasticPoolOperationListResult>): void;
}

/**
 * @class
 * Capabilities
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface Capabilities {


    /**
     * Gets the subscription capabilities available for the specified location.
     *
     * @param {string} locationName The location name whose capabilities are
     * retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.include] If specified, restricts the response to
     * only include the selected item. Possible values include:
     * 'supportedEditions', 'supportedElasticPoolEditions',
     * 'supportedManagedInstanceVersions'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LocationCapabilities>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByLocationWithHttpOperationResponse(locationName: string, options?: { include? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LocationCapabilities>>;

    /**
     * Gets the subscription capabilities available for the specified location.
     *
     * @param {string} locationName The location name whose capabilities are
     * retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.include] If specified, restricts the response to
     * only include the selected item. Possible values include:
     * 'supportedEditions', 'supportedElasticPoolEditions',
     * 'supportedManagedInstanceVersions'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LocationCapabilities} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LocationCapabilities} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LocationCapabilities} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByLocation(locationName: string, options?: { include? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.LocationCapabilities>;
    listByLocation(locationName: string, callback: ServiceCallback<models.LocationCapabilities>): void;
    listByLocation(locationName: string, options: { include? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LocationCapabilities>): void;
}

/**
 * @class
 * DatabaseVulnerabilityAssessmentScans
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface DatabaseVulnerabilityAssessmentScans {


    /**
     * Lists the vulnerability assessment scans of a database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VulnerabilityAssessmentScanRecordListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDatabaseWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VulnerabilityAssessmentScanRecordListResult>>;

    /**
     * Lists the vulnerability assessment scans of a database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VulnerabilityAssessmentScanRecordListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VulnerabilityAssessmentScanRecordListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VulnerabilityAssessmentScanRecordListResult}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VulnerabilityAssessmentScanRecordListResult>;
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.VulnerabilityAssessmentScanRecordListResult>): void;
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VulnerabilityAssessmentScanRecordListResult>): void;


    /**
     * Gets a vulnerability assessment scan record of a database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {string} scanId The vulnerability assessment scan Id of the scan to
     * retrieve.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VulnerabilityAssessmentScanRecord>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, scanId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VulnerabilityAssessmentScanRecord>>;

    /**
     * Gets a vulnerability assessment scan record of a database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {string} scanId The vulnerability assessment scan Id of the scan to
     * retrieve.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VulnerabilityAssessmentScanRecord} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VulnerabilityAssessmentScanRecord} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VulnerabilityAssessmentScanRecord} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, databaseName: string, scanId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VulnerabilityAssessmentScanRecord>;
    get(resourceGroupName: string, serverName: string, databaseName: string, scanId: string, callback: ServiceCallback<models.VulnerabilityAssessmentScanRecord>): void;
    get(resourceGroupName: string, serverName: string, databaseName: string, scanId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VulnerabilityAssessmentScanRecord>): void;


    /**
     * Executes a Vulnerability Assessment database scan.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {string} scanId The vulnerability assessment scan Id of the scan to
     * retrieve.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    initiateScanWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, scanId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Executes a Vulnerability Assessment database scan.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {string} scanId The vulnerability assessment scan Id of the scan to
     * retrieve.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    initiateScan(resourceGroupName: string, serverName: string, databaseName: string, scanId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    initiateScan(resourceGroupName: string, serverName: string, databaseName: string, scanId: string, callback: ServiceCallback<void>): void;
    initiateScan(resourceGroupName: string, serverName: string, databaseName: string, scanId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Convert an existing scan result to a human readable format. If already
     * exists nothing happens
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the scanned database.
     *
     * @param {string} scanId The vulnerability assessment scan Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseVulnerabilityAssessmentScansExport>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    exportMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, scanId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseVulnerabilityAssessmentScansExport>>;

    /**
     * Convert an existing scan result to a human readable format. If already
     * exists nothing happens
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the scanned database.
     *
     * @param {string} scanId The vulnerability assessment scan Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseVulnerabilityAssessmentScansExport} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseVulnerabilityAssessmentScansExport} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseVulnerabilityAssessmentScansExport}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    exportMethod(resourceGroupName: string, serverName: string, databaseName: string, scanId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseVulnerabilityAssessmentScansExport>;
    exportMethod(resourceGroupName: string, serverName: string, databaseName: string, scanId: string, callback: ServiceCallback<models.DatabaseVulnerabilityAssessmentScansExport>): void;
    exportMethod(resourceGroupName: string, serverName: string, databaseName: string, scanId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseVulnerabilityAssessmentScansExport>): void;


    /**
     * Executes a Vulnerability Assessment database scan.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {string} scanId The vulnerability assessment scan Id of the scan to
     * retrieve.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginInitiateScanWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, scanId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Executes a Vulnerability Assessment database scan.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {string} scanId The vulnerability assessment scan Id of the scan to
     * retrieve.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginInitiateScan(resourceGroupName: string, serverName: string, databaseName: string, scanId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginInitiateScan(resourceGroupName: string, serverName: string, databaseName: string, scanId: string, callback: ServiceCallback<void>): void;
    beginInitiateScan(resourceGroupName: string, serverName: string, databaseName: string, scanId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists the vulnerability assessment scans of a database.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VulnerabilityAssessmentScanRecordListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDatabaseNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VulnerabilityAssessmentScanRecordListResult>>;

    /**
     * Lists the vulnerability assessment scans of a database.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VulnerabilityAssessmentScanRecordListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VulnerabilityAssessmentScanRecordListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VulnerabilityAssessmentScanRecordListResult}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDatabaseNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VulnerabilityAssessmentScanRecordListResult>;
    listByDatabaseNext(nextPageLink: string, callback: ServiceCallback<models.VulnerabilityAssessmentScanRecordListResult>): void;
    listByDatabaseNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VulnerabilityAssessmentScanRecordListResult>): void;
}

/**
 * @class
 * ManagedDatabaseVulnerabilityAssessmentRuleBaselines
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface ManagedDatabaseVulnerabilityAssessmentRuleBaselines {


    /**
     * Gets a database's vulnerability assessment rule baseline.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database for which the
     * vulnerability assessment rule baseline is defined.
     *
     * @param {string} ruleId The vulnerability assessment rule ID.
     *
     * @param {string} baselineName The name of the vulnerability assessment rule
     * baseline (default implies a baseline on a database level rule and master for
     * server level rule). Possible values include: 'master', 'default'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseVulnerabilityAssessmentRuleBaseline>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, databaseName: string, ruleId: string, baselineName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseVulnerabilityAssessmentRuleBaseline>>;

    /**
     * Gets a database's vulnerability assessment rule baseline.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database for which the
     * vulnerability assessment rule baseline is defined.
     *
     * @param {string} ruleId The vulnerability assessment rule ID.
     *
     * @param {string} baselineName The name of the vulnerability assessment rule
     * baseline (default implies a baseline on a database level rule and master for
     * server level rule). Possible values include: 'master', 'default'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseVulnerabilityAssessmentRuleBaseline} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseVulnerabilityAssessmentRuleBaseline} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseVulnerabilityAssessmentRuleBaseline}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, managedInstanceName: string, databaseName: string, ruleId: string, baselineName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseVulnerabilityAssessmentRuleBaseline>;
    get(resourceGroupName: string, managedInstanceName: string, databaseName: string, ruleId: string, baselineName: string, callback: ServiceCallback<models.DatabaseVulnerabilityAssessmentRuleBaseline>): void;
    get(resourceGroupName: string, managedInstanceName: string, databaseName: string, ruleId: string, baselineName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseVulnerabilityAssessmentRuleBaseline>): void;


    /**
     * Creates or updates a database's vulnerability assessment rule baseline.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database for which the
     * vulnerability assessment rule baseline is defined.
     *
     * @param {string} ruleId The vulnerability assessment rule ID.
     *
     * @param {string} baselineName The name of the vulnerability assessment rule
     * baseline (default implies a baseline on a database level rule and master for
     * server level rule). Possible values include: 'master', 'default'
     *
     * @param {object} parameters The requested rule baseline resource.
     *
     * @param {array} parameters.baselineResults The rule baseline result
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseVulnerabilityAssessmentRuleBaseline>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, databaseName: string, ruleId: string, baselineName: string, parameters: models.DatabaseVulnerabilityAssessmentRuleBaseline, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseVulnerabilityAssessmentRuleBaseline>>;

    /**
     * Creates or updates a database's vulnerability assessment rule baseline.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database for which the
     * vulnerability assessment rule baseline is defined.
     *
     * @param {string} ruleId The vulnerability assessment rule ID.
     *
     * @param {string} baselineName The name of the vulnerability assessment rule
     * baseline (default implies a baseline on a database level rule and master for
     * server level rule). Possible values include: 'master', 'default'
     *
     * @param {object} parameters The requested rule baseline resource.
     *
     * @param {array} parameters.baselineResults The rule baseline result
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseVulnerabilityAssessmentRuleBaseline} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseVulnerabilityAssessmentRuleBaseline} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseVulnerabilityAssessmentRuleBaseline}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, managedInstanceName: string, databaseName: string, ruleId: string, baselineName: string, parameters: models.DatabaseVulnerabilityAssessmentRuleBaseline, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseVulnerabilityAssessmentRuleBaseline>;
    createOrUpdate(resourceGroupName: string, managedInstanceName: string, databaseName: string, ruleId: string, baselineName: string, parameters: models.DatabaseVulnerabilityAssessmentRuleBaseline, callback: ServiceCallback<models.DatabaseVulnerabilityAssessmentRuleBaseline>): void;
    createOrUpdate(resourceGroupName: string, managedInstanceName: string, databaseName: string, ruleId: string, baselineName: string, parameters: models.DatabaseVulnerabilityAssessmentRuleBaseline, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseVulnerabilityAssessmentRuleBaseline>): void;


    /**
     * Removes the database's vulnerability assessment rule baseline.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database for which the
     * vulnerability assessment rule baseline is defined.
     *
     * @param {string} ruleId The vulnerability assessment rule ID.
     *
     * @param {string} baselineName The name of the vulnerability assessment rule
     * baseline (default implies a baseline on a database level rule and master for
     * server level rule). Possible values include: 'master', 'default'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, databaseName: string, ruleId: string, baselineName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Removes the database's vulnerability assessment rule baseline.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database for which the
     * vulnerability assessment rule baseline is defined.
     *
     * @param {string} ruleId The vulnerability assessment rule ID.
     *
     * @param {string} baselineName The name of the vulnerability assessment rule
     * baseline (default implies a baseline on a database level rule and master for
     * server level rule). Possible values include: 'master', 'default'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, managedInstanceName: string, databaseName: string, ruleId: string, baselineName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, managedInstanceName: string, databaseName: string, ruleId: string, baselineName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, managedInstanceName: string, databaseName: string, ruleId: string, baselineName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * ManagedDatabaseVulnerabilityAssessmentScans
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface ManagedDatabaseVulnerabilityAssessmentScans {


    /**
     * Lists the vulnerability assessment scans of a database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VulnerabilityAssessmentScanRecordListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDatabaseWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VulnerabilityAssessmentScanRecordListResult>>;

    /**
     * Lists the vulnerability assessment scans of a database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VulnerabilityAssessmentScanRecordListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VulnerabilityAssessmentScanRecordListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VulnerabilityAssessmentScanRecordListResult}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDatabase(resourceGroupName: string, managedInstanceName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VulnerabilityAssessmentScanRecordListResult>;
    listByDatabase(resourceGroupName: string, managedInstanceName: string, databaseName: string, callback: ServiceCallback<models.VulnerabilityAssessmentScanRecordListResult>): void;
    listByDatabase(resourceGroupName: string, managedInstanceName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VulnerabilityAssessmentScanRecordListResult>): void;


    /**
     * Gets a vulnerability assessment scan record of a database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {string} scanId The vulnerability assessment scan Id of the scan to
     * retrieve.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VulnerabilityAssessmentScanRecord>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, databaseName: string, scanId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VulnerabilityAssessmentScanRecord>>;

    /**
     * Gets a vulnerability assessment scan record of a database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {string} scanId The vulnerability assessment scan Id of the scan to
     * retrieve.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VulnerabilityAssessmentScanRecord} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VulnerabilityAssessmentScanRecord} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VulnerabilityAssessmentScanRecord} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, managedInstanceName: string, databaseName: string, scanId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VulnerabilityAssessmentScanRecord>;
    get(resourceGroupName: string, managedInstanceName: string, databaseName: string, scanId: string, callback: ServiceCallback<models.VulnerabilityAssessmentScanRecord>): void;
    get(resourceGroupName: string, managedInstanceName: string, databaseName: string, scanId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VulnerabilityAssessmentScanRecord>): void;


    /**
     * Executes a Vulnerability Assessment database scan.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {string} scanId The vulnerability assessment scan Id of the scan to
     * retrieve.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    initiateScanWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, databaseName: string, scanId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Executes a Vulnerability Assessment database scan.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {string} scanId The vulnerability assessment scan Id of the scan to
     * retrieve.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    initiateScan(resourceGroupName: string, managedInstanceName: string, databaseName: string, scanId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    initiateScan(resourceGroupName: string, managedInstanceName: string, databaseName: string, scanId: string, callback: ServiceCallback<void>): void;
    initiateScan(resourceGroupName: string, managedInstanceName: string, databaseName: string, scanId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Convert an existing scan result to a human readable format. If already
     * exists nothing happens
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the scanned database.
     *
     * @param {string} scanId The vulnerability assessment scan Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseVulnerabilityAssessmentScansExport>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    exportMethodWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, databaseName: string, scanId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseVulnerabilityAssessmentScansExport>>;

    /**
     * Convert an existing scan result to a human readable format. If already
     * exists nothing happens
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the scanned database.
     *
     * @param {string} scanId The vulnerability assessment scan Id.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseVulnerabilityAssessmentScansExport} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseVulnerabilityAssessmentScansExport} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseVulnerabilityAssessmentScansExport}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    exportMethod(resourceGroupName: string, managedInstanceName: string, databaseName: string, scanId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseVulnerabilityAssessmentScansExport>;
    exportMethod(resourceGroupName: string, managedInstanceName: string, databaseName: string, scanId: string, callback: ServiceCallback<models.DatabaseVulnerabilityAssessmentScansExport>): void;
    exportMethod(resourceGroupName: string, managedInstanceName: string, databaseName: string, scanId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseVulnerabilityAssessmentScansExport>): void;


    /**
     * Executes a Vulnerability Assessment database scan.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {string} scanId The vulnerability assessment scan Id of the scan to
     * retrieve.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginInitiateScanWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, databaseName: string, scanId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Executes a Vulnerability Assessment database scan.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {string} scanId The vulnerability assessment scan Id of the scan to
     * retrieve.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginInitiateScan(resourceGroupName: string, managedInstanceName: string, databaseName: string, scanId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginInitiateScan(resourceGroupName: string, managedInstanceName: string, databaseName: string, scanId: string, callback: ServiceCallback<void>): void;
    beginInitiateScan(resourceGroupName: string, managedInstanceName: string, databaseName: string, scanId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists the vulnerability assessment scans of a database.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VulnerabilityAssessmentScanRecordListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDatabaseNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VulnerabilityAssessmentScanRecordListResult>>;

    /**
     * Lists the vulnerability assessment scans of a database.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VulnerabilityAssessmentScanRecordListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VulnerabilityAssessmentScanRecordListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VulnerabilityAssessmentScanRecordListResult}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDatabaseNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VulnerabilityAssessmentScanRecordListResult>;
    listByDatabaseNext(nextPageLink: string, callback: ServiceCallback<models.VulnerabilityAssessmentScanRecordListResult>): void;
    listByDatabaseNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VulnerabilityAssessmentScanRecordListResult>): void;
}

/**
 * @class
 * ManagedDatabaseVulnerabilityAssessments
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface ManagedDatabaseVulnerabilityAssessments {


    /**
     * Gets the database's vulnerability assessment.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database for which the
     * vulnerability assessment is defined.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseVulnerabilityAssessment>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseVulnerabilityAssessment>>;

    /**
     * Gets the database's vulnerability assessment.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database for which the
     * vulnerability assessment is defined.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseVulnerabilityAssessment} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseVulnerabilityAssessment} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseVulnerabilityAssessment} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, managedInstanceName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseVulnerabilityAssessment>;
    get(resourceGroupName: string, managedInstanceName: string, databaseName: string, callback: ServiceCallback<models.DatabaseVulnerabilityAssessment>): void;
    get(resourceGroupName: string, managedInstanceName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseVulnerabilityAssessment>): void;


    /**
     * Creates or updates the database's vulnerability assessment.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database for which the
     * vulnerability assessment is defined.
     *
     * @param {object} parameters The requested resource.
     *
     * @param {string} [parameters.storageContainerPath] A blob storage container
     * path to hold the scan results (e.g.
     * https://myStorage.blob.core.windows.net/VaScans/).  It is required if server
     * level vulnerability assessment policy doesn't set
     *
     * @param {string} [parameters.storageContainerSasKey] A shared access
     * signature (SAS Key) that has write access to the blob container specified in
     * 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't
     * specified, StorageContainerSasKey is required.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the storage account for vulnerability assessment scan
     * results. If 'StorageContainerSasKey' isn't specified,
     * storageAccountAccessKey is required.
     *
     * @param {object} [parameters.recurringScans] The recurring scans settings
     *
     * @param {boolean} [parameters.recurringScans.isEnabled] Recurring scans
     * state.
     *
     * @param {boolean} [parameters.recurringScans.emailSubscriptionAdmins]
     * Specifies that the schedule scan notification will be is sent to the
     * subscription administrators.
     *
     * @param {array} [parameters.recurringScans.emails] Specifies an array of
     * e-mail addresses to which the scan notification is sent.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseVulnerabilityAssessment>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.DatabaseVulnerabilityAssessment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseVulnerabilityAssessment>>;

    /**
     * Creates or updates the database's vulnerability assessment.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database for which the
     * vulnerability assessment is defined.
     *
     * @param {object} parameters The requested resource.
     *
     * @param {string} [parameters.storageContainerPath] A blob storage container
     * path to hold the scan results (e.g.
     * https://myStorage.blob.core.windows.net/VaScans/).  It is required if server
     * level vulnerability assessment policy doesn't set
     *
     * @param {string} [parameters.storageContainerSasKey] A shared access
     * signature (SAS Key) that has write access to the blob container specified in
     * 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't
     * specified, StorageContainerSasKey is required.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the storage account for vulnerability assessment scan
     * results. If 'StorageContainerSasKey' isn't specified,
     * storageAccountAccessKey is required.
     *
     * @param {object} [parameters.recurringScans] The recurring scans settings
     *
     * @param {boolean} [parameters.recurringScans.isEnabled] Recurring scans
     * state.
     *
     * @param {boolean} [parameters.recurringScans.emailSubscriptionAdmins]
     * Specifies that the schedule scan notification will be is sent to the
     * subscription administrators.
     *
     * @param {array} [parameters.recurringScans.emails] Specifies an array of
     * e-mail addresses to which the scan notification is sent.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseVulnerabilityAssessment} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseVulnerabilityAssessment} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseVulnerabilityAssessment} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.DatabaseVulnerabilityAssessment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseVulnerabilityAssessment>;
    createOrUpdate(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.DatabaseVulnerabilityAssessment, callback: ServiceCallback<models.DatabaseVulnerabilityAssessment>): void;
    createOrUpdate(resourceGroupName: string, managedInstanceName: string, databaseName: string, parameters: models.DatabaseVulnerabilityAssessment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseVulnerabilityAssessment>): void;


    /**
     * Removes the database's vulnerability assessment.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database for which the
     * vulnerability assessment is defined.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Removes the database's vulnerability assessment.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database for which the
     * vulnerability assessment is defined.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, managedInstanceName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, managedInstanceName: string, databaseName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, managedInstanceName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists the vulnerability assessments of a managed database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database for which the
     * vulnerability assessment is defined.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseVulnerabilityAssessmentListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDatabaseWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseVulnerabilityAssessmentListResult>>;

    /**
     * Lists the vulnerability assessments of a managed database.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} databaseName The name of the database for which the
     * vulnerability assessment is defined.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseVulnerabilityAssessmentListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseVulnerabilityAssessmentListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseVulnerabilityAssessmentListResult}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDatabase(resourceGroupName: string, managedInstanceName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseVulnerabilityAssessmentListResult>;
    listByDatabase(resourceGroupName: string, managedInstanceName: string, databaseName: string, callback: ServiceCallback<models.DatabaseVulnerabilityAssessmentListResult>): void;
    listByDatabase(resourceGroupName: string, managedInstanceName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseVulnerabilityAssessmentListResult>): void;


    /**
     * Lists the vulnerability assessments of a managed database.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DatabaseVulnerabilityAssessmentListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDatabaseNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DatabaseVulnerabilityAssessmentListResult>>;

    /**
     * Lists the vulnerability assessments of a managed database.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DatabaseVulnerabilityAssessmentListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DatabaseVulnerabilityAssessmentListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DatabaseVulnerabilityAssessmentListResult}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDatabaseNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DatabaseVulnerabilityAssessmentListResult>;
    listByDatabaseNext(nextPageLink: string, callback: ServiceCallback<models.DatabaseVulnerabilityAssessmentListResult>): void;
    listByDatabaseNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DatabaseVulnerabilityAssessmentListResult>): void;
}

/**
 * @class
 * InstanceFailoverGroups
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface InstanceFailoverGroups {


    /**
     * Gets a failover group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} locationName The name of the region where the resource is
     * located.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<InstanceFailoverGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, locationName: string, failoverGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.InstanceFailoverGroup>>;

    /**
     * Gets a failover group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} locationName The name of the region where the resource is
     * located.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {InstanceFailoverGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {InstanceFailoverGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link InstanceFailoverGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, locationName: string, failoverGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.InstanceFailoverGroup>;
    get(resourceGroupName: string, locationName: string, failoverGroupName: string, callback: ServiceCallback<models.InstanceFailoverGroup>): void;
    get(resourceGroupName: string, locationName: string, failoverGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.InstanceFailoverGroup>): void;


    /**
     * Creates or updates a failover group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} locationName The name of the region where the resource is
     * located.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} parameters The failover group parameters.
     *
     * @param {object} parameters.readWriteEndpoint Read-write endpoint of the
     * failover group instance.
     *
     * @param {string} parameters.readWriteEndpoint.failoverPolicy Failover policy
     * of the read-write endpoint for the failover group. If failoverPolicy is
     * Automatic then failoverWithDataLossGracePeriodMinutes is required. Possible
     * values include: 'Manual', 'Automatic'
     *
     * @param {number}
     * [parameters.readWriteEndpoint.failoverWithDataLossGracePeriodMinutes] Grace
     * period before failover with data loss is attempted for the read-write
     * endpoint. If failoverPolicy is Automatic then
     * failoverWithDataLossGracePeriodMinutes is required.
     *
     * @param {object} [parameters.readOnlyEndpoint] Read-only endpoint of the
     * failover group instance.
     *
     * @param {string} [parameters.readOnlyEndpoint.failoverPolicy] Failover policy
     * of the read-only endpoint for the failover group. Possible values include:
     * 'Disabled', 'Enabled'
     *
     * @param {array} parameters.partnerRegions Partner region information for the
     * failover group.
     *
     * @param {array} parameters.managedInstancePairs List of managed instance
     * pairs in the failover group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<InstanceFailoverGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, locationName: string, failoverGroupName: string, parameters: models.InstanceFailoverGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.InstanceFailoverGroup>>;

    /**
     * Creates or updates a failover group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} locationName The name of the region where the resource is
     * located.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} parameters The failover group parameters.
     *
     * @param {object} parameters.readWriteEndpoint Read-write endpoint of the
     * failover group instance.
     *
     * @param {string} parameters.readWriteEndpoint.failoverPolicy Failover policy
     * of the read-write endpoint for the failover group. If failoverPolicy is
     * Automatic then failoverWithDataLossGracePeriodMinutes is required. Possible
     * values include: 'Manual', 'Automatic'
     *
     * @param {number}
     * [parameters.readWriteEndpoint.failoverWithDataLossGracePeriodMinutes] Grace
     * period before failover with data loss is attempted for the read-write
     * endpoint. If failoverPolicy is Automatic then
     * failoverWithDataLossGracePeriodMinutes is required.
     *
     * @param {object} [parameters.readOnlyEndpoint] Read-only endpoint of the
     * failover group instance.
     *
     * @param {string} [parameters.readOnlyEndpoint.failoverPolicy] Failover policy
     * of the read-only endpoint for the failover group. Possible values include:
     * 'Disabled', 'Enabled'
     *
     * @param {array} parameters.partnerRegions Partner region information for the
     * failover group.
     *
     * @param {array} parameters.managedInstancePairs List of managed instance
     * pairs in the failover group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {InstanceFailoverGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {InstanceFailoverGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link InstanceFailoverGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, locationName: string, failoverGroupName: string, parameters: models.InstanceFailoverGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.InstanceFailoverGroup>;
    createOrUpdate(resourceGroupName: string, locationName: string, failoverGroupName: string, parameters: models.InstanceFailoverGroup, callback: ServiceCallback<models.InstanceFailoverGroup>): void;
    createOrUpdate(resourceGroupName: string, locationName: string, failoverGroupName: string, parameters: models.InstanceFailoverGroup, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.InstanceFailoverGroup>): void;


    /**
     * Deletes a failover group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} locationName The name of the region where the resource is
     * located.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, locationName: string, failoverGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a failover group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} locationName The name of the region where the resource is
     * located.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, locationName: string, failoverGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, locationName: string, failoverGroupName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, locationName: string, failoverGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists the failover groups in a location.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} locationName The name of the region where the resource is
     * located.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<InstanceFailoverGroupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByLocationWithHttpOperationResponse(resourceGroupName: string, locationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.InstanceFailoverGroupListResult>>;

    /**
     * Lists the failover groups in a location.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} locationName The name of the region where the resource is
     * located.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {InstanceFailoverGroupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {InstanceFailoverGroupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link InstanceFailoverGroupListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByLocation(resourceGroupName: string, locationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.InstanceFailoverGroupListResult>;
    listByLocation(resourceGroupName: string, locationName: string, callback: ServiceCallback<models.InstanceFailoverGroupListResult>): void;
    listByLocation(resourceGroupName: string, locationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.InstanceFailoverGroupListResult>): void;


    /**
     * Fails over from the current primary managed instance to this managed
     * instance.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} locationName The name of the region where the resource is
     * located.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<InstanceFailoverGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    failoverWithHttpOperationResponse(resourceGroupName: string, locationName: string, failoverGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.InstanceFailoverGroup>>;

    /**
     * Fails over from the current primary managed instance to this managed
     * instance.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} locationName The name of the region where the resource is
     * located.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {InstanceFailoverGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {InstanceFailoverGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link InstanceFailoverGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    failover(resourceGroupName: string, locationName: string, failoverGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.InstanceFailoverGroup>;
    failover(resourceGroupName: string, locationName: string, failoverGroupName: string, callback: ServiceCallback<models.InstanceFailoverGroup>): void;
    failover(resourceGroupName: string, locationName: string, failoverGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.InstanceFailoverGroup>): void;


    /**
     * Fails over from the current primary managed instance to this managed
     * instance. This operation might result in data loss.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} locationName The name of the region where the resource is
     * located.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<InstanceFailoverGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    forceFailoverAllowDataLossWithHttpOperationResponse(resourceGroupName: string, locationName: string, failoverGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.InstanceFailoverGroup>>;

    /**
     * Fails over from the current primary managed instance to this managed
     * instance. This operation might result in data loss.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} locationName The name of the region where the resource is
     * located.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {InstanceFailoverGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {InstanceFailoverGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link InstanceFailoverGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    forceFailoverAllowDataLoss(resourceGroupName: string, locationName: string, failoverGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.InstanceFailoverGroup>;
    forceFailoverAllowDataLoss(resourceGroupName: string, locationName: string, failoverGroupName: string, callback: ServiceCallback<models.InstanceFailoverGroup>): void;
    forceFailoverAllowDataLoss(resourceGroupName: string, locationName: string, failoverGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.InstanceFailoverGroup>): void;


    /**
     * Creates or updates a failover group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} locationName The name of the region where the resource is
     * located.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} parameters The failover group parameters.
     *
     * @param {object} parameters.readWriteEndpoint Read-write endpoint of the
     * failover group instance.
     *
     * @param {string} parameters.readWriteEndpoint.failoverPolicy Failover policy
     * of the read-write endpoint for the failover group. If failoverPolicy is
     * Automatic then failoverWithDataLossGracePeriodMinutes is required. Possible
     * values include: 'Manual', 'Automatic'
     *
     * @param {number}
     * [parameters.readWriteEndpoint.failoverWithDataLossGracePeriodMinutes] Grace
     * period before failover with data loss is attempted for the read-write
     * endpoint. If failoverPolicy is Automatic then
     * failoverWithDataLossGracePeriodMinutes is required.
     *
     * @param {object} [parameters.readOnlyEndpoint] Read-only endpoint of the
     * failover group instance.
     *
     * @param {string} [parameters.readOnlyEndpoint.failoverPolicy] Failover policy
     * of the read-only endpoint for the failover group. Possible values include:
     * 'Disabled', 'Enabled'
     *
     * @param {array} parameters.partnerRegions Partner region information for the
     * failover group.
     *
     * @param {array} parameters.managedInstancePairs List of managed instance
     * pairs in the failover group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<InstanceFailoverGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, locationName: string, failoverGroupName: string, parameters: models.InstanceFailoverGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.InstanceFailoverGroup>>;

    /**
     * Creates or updates a failover group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} locationName The name of the region where the resource is
     * located.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} parameters The failover group parameters.
     *
     * @param {object} parameters.readWriteEndpoint Read-write endpoint of the
     * failover group instance.
     *
     * @param {string} parameters.readWriteEndpoint.failoverPolicy Failover policy
     * of the read-write endpoint for the failover group. If failoverPolicy is
     * Automatic then failoverWithDataLossGracePeriodMinutes is required. Possible
     * values include: 'Manual', 'Automatic'
     *
     * @param {number}
     * [parameters.readWriteEndpoint.failoverWithDataLossGracePeriodMinutes] Grace
     * period before failover with data loss is attempted for the read-write
     * endpoint. If failoverPolicy is Automatic then
     * failoverWithDataLossGracePeriodMinutes is required.
     *
     * @param {object} [parameters.readOnlyEndpoint] Read-only endpoint of the
     * failover group instance.
     *
     * @param {string} [parameters.readOnlyEndpoint.failoverPolicy] Failover policy
     * of the read-only endpoint for the failover group. Possible values include:
     * 'Disabled', 'Enabled'
     *
     * @param {array} parameters.partnerRegions Partner region information for the
     * failover group.
     *
     * @param {array} parameters.managedInstancePairs List of managed instance
     * pairs in the failover group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {InstanceFailoverGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {InstanceFailoverGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link InstanceFailoverGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, locationName: string, failoverGroupName: string, parameters: models.InstanceFailoverGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.InstanceFailoverGroup>;
    beginCreateOrUpdate(resourceGroupName: string, locationName: string, failoverGroupName: string, parameters: models.InstanceFailoverGroup, callback: ServiceCallback<models.InstanceFailoverGroup>): void;
    beginCreateOrUpdate(resourceGroupName: string, locationName: string, failoverGroupName: string, parameters: models.InstanceFailoverGroup, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.InstanceFailoverGroup>): void;


    /**
     * Deletes a failover group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} locationName The name of the region where the resource is
     * located.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, locationName: string, failoverGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a failover group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} locationName The name of the region where the resource is
     * located.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, locationName: string, failoverGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, locationName: string, failoverGroupName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, locationName: string, failoverGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Fails over from the current primary managed instance to this managed
     * instance.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} locationName The name of the region where the resource is
     * located.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<InstanceFailoverGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginFailoverWithHttpOperationResponse(resourceGroupName: string, locationName: string, failoverGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.InstanceFailoverGroup>>;

    /**
     * Fails over from the current primary managed instance to this managed
     * instance.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} locationName The name of the region where the resource is
     * located.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {InstanceFailoverGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {InstanceFailoverGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link InstanceFailoverGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginFailover(resourceGroupName: string, locationName: string, failoverGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.InstanceFailoverGroup>;
    beginFailover(resourceGroupName: string, locationName: string, failoverGroupName: string, callback: ServiceCallback<models.InstanceFailoverGroup>): void;
    beginFailover(resourceGroupName: string, locationName: string, failoverGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.InstanceFailoverGroup>): void;


    /**
     * Fails over from the current primary managed instance to this managed
     * instance. This operation might result in data loss.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} locationName The name of the region where the resource is
     * located.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<InstanceFailoverGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginForceFailoverAllowDataLossWithHttpOperationResponse(resourceGroupName: string, locationName: string, failoverGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.InstanceFailoverGroup>>;

    /**
     * Fails over from the current primary managed instance to this managed
     * instance. This operation might result in data loss.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} locationName The name of the region where the resource is
     * located.
     *
     * @param {string} failoverGroupName The name of the failover group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {InstanceFailoverGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {InstanceFailoverGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link InstanceFailoverGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginForceFailoverAllowDataLoss(resourceGroupName: string, locationName: string, failoverGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.InstanceFailoverGroup>;
    beginForceFailoverAllowDataLoss(resourceGroupName: string, locationName: string, failoverGroupName: string, callback: ServiceCallback<models.InstanceFailoverGroup>): void;
    beginForceFailoverAllowDataLoss(resourceGroupName: string, locationName: string, failoverGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.InstanceFailoverGroup>): void;


    /**
     * Lists the failover groups in a location.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<InstanceFailoverGroupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByLocationNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.InstanceFailoverGroupListResult>>;

    /**
     * Lists the failover groups in a location.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {InstanceFailoverGroupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {InstanceFailoverGroupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link InstanceFailoverGroupListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByLocationNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.InstanceFailoverGroupListResult>;
    listByLocationNext(nextPageLink: string, callback: ServiceCallback<models.InstanceFailoverGroupListResult>): void;
    listByLocationNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.InstanceFailoverGroupListResult>): void;
}

/**
 * @class
 * BackupShortTermRetentionPolicies
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface BackupShortTermRetentionPolicies {


    /**
     * Gets a database's short term retention policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupShortTermRetentionPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupShortTermRetentionPolicy>>;

    /**
     * Gets a database's short term retention policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupShortTermRetentionPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupShortTermRetentionPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupShortTermRetentionPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupShortTermRetentionPolicy>;
    get(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.BackupShortTermRetentionPolicy>): void;
    get(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupShortTermRetentionPolicy>): void;


    /**
     * Updates a database's short term retention policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The short term retention policy info.
     *
     * @param {number} [parameters.retentionDays] The backup retention period in
     * days. This is how many days Point-in-Time Restore will be supported.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupShortTermRetentionPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.BackupShortTermRetentionPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupShortTermRetentionPolicy>>;

    /**
     * Updates a database's short term retention policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The short term retention policy info.
     *
     * @param {number} [parameters.retentionDays] The backup retention period in
     * days. This is how many days Point-in-Time Restore will be supported.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupShortTermRetentionPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupShortTermRetentionPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupShortTermRetentionPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.BackupShortTermRetentionPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupShortTermRetentionPolicy>;
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.BackupShortTermRetentionPolicy, callback: ServiceCallback<models.BackupShortTermRetentionPolicy>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.BackupShortTermRetentionPolicy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupShortTermRetentionPolicy>): void;


    /**
     * Updates a database's short term retention policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The short term retention policy info.
     *
     * @param {number} [parameters.retentionDays] The backup retention period in
     * days. This is how many days Point-in-Time Restore will be supported.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupShortTermRetentionPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.BackupShortTermRetentionPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupShortTermRetentionPolicy>>;

    /**
     * Updates a database's short term retention policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The short term retention policy info.
     *
     * @param {number} [parameters.retentionDays] The backup retention period in
     * days. This is how many days Point-in-Time Restore will be supported.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupShortTermRetentionPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupShortTermRetentionPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupShortTermRetentionPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.BackupShortTermRetentionPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupShortTermRetentionPolicy>;
    update(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.BackupShortTermRetentionPolicy, callback: ServiceCallback<models.BackupShortTermRetentionPolicy>): void;
    update(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.BackupShortTermRetentionPolicy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupShortTermRetentionPolicy>): void;


    /**
     * Gets a database's short term retention policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupShortTermRetentionPolicyListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDatabaseWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupShortTermRetentionPolicyListResult>>;

    /**
     * Gets a database's short term retention policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupShortTermRetentionPolicyListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupShortTermRetentionPolicyListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupShortTermRetentionPolicyListResult}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupShortTermRetentionPolicyListResult>;
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, callback: ServiceCallback<models.BackupShortTermRetentionPolicyListResult>): void;
    listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupShortTermRetentionPolicyListResult>): void;


    /**
     * Updates a database's short term retention policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The short term retention policy info.
     *
     * @param {number} [parameters.retentionDays] The backup retention period in
     * days. This is how many days Point-in-Time Restore will be supported.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupShortTermRetentionPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.BackupShortTermRetentionPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupShortTermRetentionPolicy>>;

    /**
     * Updates a database's short term retention policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The short term retention policy info.
     *
     * @param {number} [parameters.retentionDays] The backup retention period in
     * days. This is how many days Point-in-Time Restore will be supported.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupShortTermRetentionPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupShortTermRetentionPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupShortTermRetentionPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.BackupShortTermRetentionPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupShortTermRetentionPolicy>;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.BackupShortTermRetentionPolicy, callback: ServiceCallback<models.BackupShortTermRetentionPolicy>): void;
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.BackupShortTermRetentionPolicy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupShortTermRetentionPolicy>): void;


    /**
     * Updates a database's short term retention policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The short term retention policy info.
     *
     * @param {number} [parameters.retentionDays] The backup retention period in
     * days. This is how many days Point-in-Time Restore will be supported.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupShortTermRetentionPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.BackupShortTermRetentionPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupShortTermRetentionPolicy>>;

    /**
     * Updates a database's short term retention policy.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {string} databaseName The name of the database.
     *
     * @param {object} parameters The short term retention policy info.
     *
     * @param {number} [parameters.retentionDays] The backup retention period in
     * days. This is how many days Point-in-Time Restore will be supported.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupShortTermRetentionPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupShortTermRetentionPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupShortTermRetentionPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.BackupShortTermRetentionPolicy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupShortTermRetentionPolicy>;
    beginUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.BackupShortTermRetentionPolicy, callback: ServiceCallback<models.BackupShortTermRetentionPolicy>): void;
    beginUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: models.BackupShortTermRetentionPolicy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupShortTermRetentionPolicy>): void;


    /**
     * Gets a database's short term retention policy.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupShortTermRetentionPolicyListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByDatabaseNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupShortTermRetentionPolicyListResult>>;

    /**
     * Gets a database's short term retention policy.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupShortTermRetentionPolicyListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupShortTermRetentionPolicyListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupShortTermRetentionPolicyListResult}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByDatabaseNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupShortTermRetentionPolicyListResult>;
    listByDatabaseNext(nextPageLink: string, callback: ServiceCallback<models.BackupShortTermRetentionPolicyListResult>): void;
    listByDatabaseNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupShortTermRetentionPolicyListResult>): void;
}

/**
 * @class
 * TdeCertificates
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface TdeCertificates {


    /**
     * Creates a TDE certificate for a given server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The requested TDE certificate to be created or
     * updated.
     *
     * @param {string} parameters.privateBlob The base64 encoded certificate
     * private blob.
     *
     * @param {string} [parameters.certPassword] The certificate password.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, serverName: string, parameters: models.TdeCertificate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Creates a TDE certificate for a given server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The requested TDE certificate to be created or
     * updated.
     *
     * @param {string} parameters.privateBlob The base64 encoded certificate
     * private blob.
     *
     * @param {string} [parameters.certPassword] The certificate password.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, serverName: string, parameters: models.TdeCertificate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    create(resourceGroupName: string, serverName: string, parameters: models.TdeCertificate, callback: ServiceCallback<void>): void;
    create(resourceGroupName: string, serverName: string, parameters: models.TdeCertificate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates a TDE certificate for a given server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The requested TDE certificate to be created or
     * updated.
     *
     * @param {string} parameters.privateBlob The base64 encoded certificate
     * private blob.
     *
     * @param {string} [parameters.certPassword] The certificate password.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateWithHttpOperationResponse(resourceGroupName: string, serverName: string, parameters: models.TdeCertificate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Creates a TDE certificate for a given server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} parameters The requested TDE certificate to be created or
     * updated.
     *
     * @param {string} parameters.privateBlob The base64 encoded certificate
     * private blob.
     *
     * @param {string} [parameters.certPassword] The certificate password.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreate(resourceGroupName: string, serverName: string, parameters: models.TdeCertificate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginCreate(resourceGroupName: string, serverName: string, parameters: models.TdeCertificate, callback: ServiceCallback<void>): void;
    beginCreate(resourceGroupName: string, serverName: string, parameters: models.TdeCertificate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * ManagedInstanceTdeCertificates
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface ManagedInstanceTdeCertificates {


    /**
     * Creates a TDE certificate for a given server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} parameters The requested TDE certificate to be created or
     * updated.
     *
     * @param {string} parameters.privateBlob The base64 encoded certificate
     * private blob.
     *
     * @param {string} [parameters.certPassword] The certificate password.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, parameters: models.TdeCertificate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Creates a TDE certificate for a given server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} parameters The requested TDE certificate to be created or
     * updated.
     *
     * @param {string} parameters.privateBlob The base64 encoded certificate
     * private blob.
     *
     * @param {string} [parameters.certPassword] The certificate password.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, managedInstanceName: string, parameters: models.TdeCertificate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    create(resourceGroupName: string, managedInstanceName: string, parameters: models.TdeCertificate, callback: ServiceCallback<void>): void;
    create(resourceGroupName: string, managedInstanceName: string, parameters: models.TdeCertificate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates a TDE certificate for a given server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} parameters The requested TDE certificate to be created or
     * updated.
     *
     * @param {string} parameters.privateBlob The base64 encoded certificate
     * private blob.
     *
     * @param {string} [parameters.certPassword] The certificate password.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, parameters: models.TdeCertificate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Creates a TDE certificate for a given server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} parameters The requested TDE certificate to be created or
     * updated.
     *
     * @param {string} parameters.privateBlob The base64 encoded certificate
     * private blob.
     *
     * @param {string} [parameters.certPassword] The certificate password.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreate(resourceGroupName: string, managedInstanceName: string, parameters: models.TdeCertificate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginCreate(resourceGroupName: string, managedInstanceName: string, parameters: models.TdeCertificate, callback: ServiceCallback<void>): void;
    beginCreate(resourceGroupName: string, managedInstanceName: string, parameters: models.TdeCertificate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * ManagedInstanceKeys
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface ManagedInstanceKeys {


    /**
     * Gets a list of managed instance keys.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] An OData filter expression that filters
     * elements in the collection.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedInstanceKeyListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByInstanceWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedInstanceKeyListResult>>;

    /**
     * Gets a list of managed instance keys.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] An OData filter expression that filters
     * elements in the collection.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedInstanceKeyListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedInstanceKeyListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedInstanceKeyListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByInstance(resourceGroupName: string, managedInstanceName: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedInstanceKeyListResult>;
    listByInstance(resourceGroupName: string, managedInstanceName: string, callback: ServiceCallback<models.ManagedInstanceKeyListResult>): void;
    listByInstance(resourceGroupName: string, managedInstanceName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedInstanceKeyListResult>): void;


    /**
     * Gets a managed instance key.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} keyName The name of the managed instance key to be
     * retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedInstanceKey>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, keyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedInstanceKey>>;

    /**
     * Gets a managed instance key.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} keyName The name of the managed instance key to be
     * retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedInstanceKey} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedInstanceKey} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedInstanceKey} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, managedInstanceName: string, keyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedInstanceKey>;
    get(resourceGroupName: string, managedInstanceName: string, keyName: string, callback: ServiceCallback<models.ManagedInstanceKey>): void;
    get(resourceGroupName: string, managedInstanceName: string, keyName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedInstanceKey>): void;


    /**
     * Creates or updates a managed instance key.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} keyName The name of the managed instance key to be operated
     * on (updated or created).
     *
     * @param {object} parameters The requested managed instance key resource
     * state.
     *
     * @param {string} parameters.serverKeyType The key type like 'ServiceManaged',
     * 'AzureKeyVault'. Possible values include: 'ServiceManaged', 'AzureKeyVault'
     *
     * @param {string} [parameters.uri] The URI of the key. If the ServerKeyType is
     * AzureKeyVault, then the URI is required.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedInstanceKey>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, keyName: string, parameters: models.ManagedInstanceKey, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedInstanceKey>>;

    /**
     * Creates or updates a managed instance key.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} keyName The name of the managed instance key to be operated
     * on (updated or created).
     *
     * @param {object} parameters The requested managed instance key resource
     * state.
     *
     * @param {string} parameters.serverKeyType The key type like 'ServiceManaged',
     * 'AzureKeyVault'. Possible values include: 'ServiceManaged', 'AzureKeyVault'
     *
     * @param {string} [parameters.uri] The URI of the key. If the ServerKeyType is
     * AzureKeyVault, then the URI is required.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedInstanceKey} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedInstanceKey} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedInstanceKey} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, managedInstanceName: string, keyName: string, parameters: models.ManagedInstanceKey, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedInstanceKey>;
    createOrUpdate(resourceGroupName: string, managedInstanceName: string, keyName: string, parameters: models.ManagedInstanceKey, callback: ServiceCallback<models.ManagedInstanceKey>): void;
    createOrUpdate(resourceGroupName: string, managedInstanceName: string, keyName: string, parameters: models.ManagedInstanceKey, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedInstanceKey>): void;


    /**
     * Deletes the managed instance key with the given name.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} keyName The name of the managed instance key to be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, keyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the managed instance key with the given name.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} keyName The name of the managed instance key to be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, managedInstanceName: string, keyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, managedInstanceName: string, keyName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, managedInstanceName: string, keyName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates a managed instance key.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} keyName The name of the managed instance key to be operated
     * on (updated or created).
     *
     * @param {object} parameters The requested managed instance key resource
     * state.
     *
     * @param {string} parameters.serverKeyType The key type like 'ServiceManaged',
     * 'AzureKeyVault'. Possible values include: 'ServiceManaged', 'AzureKeyVault'
     *
     * @param {string} [parameters.uri] The URI of the key. If the ServerKeyType is
     * AzureKeyVault, then the URI is required.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedInstanceKey>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, keyName: string, parameters: models.ManagedInstanceKey, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedInstanceKey>>;

    /**
     * Creates or updates a managed instance key.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} keyName The name of the managed instance key to be operated
     * on (updated or created).
     *
     * @param {object} parameters The requested managed instance key resource
     * state.
     *
     * @param {string} parameters.serverKeyType The key type like 'ServiceManaged',
     * 'AzureKeyVault'. Possible values include: 'ServiceManaged', 'AzureKeyVault'
     *
     * @param {string} [parameters.uri] The URI of the key. If the ServerKeyType is
     * AzureKeyVault, then the URI is required.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedInstanceKey} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedInstanceKey} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedInstanceKey} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, managedInstanceName: string, keyName: string, parameters: models.ManagedInstanceKey, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedInstanceKey>;
    beginCreateOrUpdate(resourceGroupName: string, managedInstanceName: string, keyName: string, parameters: models.ManagedInstanceKey, callback: ServiceCallback<models.ManagedInstanceKey>): void;
    beginCreateOrUpdate(resourceGroupName: string, managedInstanceName: string, keyName: string, parameters: models.ManagedInstanceKey, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedInstanceKey>): void;


    /**
     * Deletes the managed instance key with the given name.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} keyName The name of the managed instance key to be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, keyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the managed instance key with the given name.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {string} keyName The name of the managed instance key to be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, managedInstanceName: string, keyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, managedInstanceName: string, keyName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, managedInstanceName: string, keyName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets a list of managed instance keys.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedInstanceKeyListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByInstanceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedInstanceKeyListResult>>;

    /**
     * Gets a list of managed instance keys.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedInstanceKeyListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedInstanceKeyListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedInstanceKeyListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByInstanceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedInstanceKeyListResult>;
    listByInstanceNext(nextPageLink: string, callback: ServiceCallback<models.ManagedInstanceKeyListResult>): void;
    listByInstanceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedInstanceKeyListResult>): void;
}

/**
 * @class
 * ManagedInstanceEncryptionProtectors
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface ManagedInstanceEncryptionProtectors {


    /**
     * Gets a list of managed instance encryption protectors
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedInstanceEncryptionProtectorListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByInstanceWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedInstanceEncryptionProtectorListResult>>;

    /**
     * Gets a list of managed instance encryption protectors
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedInstanceEncryptionProtectorListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedInstanceEncryptionProtectorListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link
     *                      ManagedInstanceEncryptionProtectorListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByInstance(resourceGroupName: string, managedInstanceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedInstanceEncryptionProtectorListResult>;
    listByInstance(resourceGroupName: string, managedInstanceName: string, callback: ServiceCallback<models.ManagedInstanceEncryptionProtectorListResult>): void;
    listByInstance(resourceGroupName: string, managedInstanceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedInstanceEncryptionProtectorListResult>): void;


    /**
     * Gets a managed instance encryption protector.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedInstanceEncryptionProtector>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedInstanceEncryptionProtector>>;

    /**
     * Gets a managed instance encryption protector.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedInstanceEncryptionProtector} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedInstanceEncryptionProtector} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedInstanceEncryptionProtector} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, managedInstanceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedInstanceEncryptionProtector>;
    get(resourceGroupName: string, managedInstanceName: string, callback: ServiceCallback<models.ManagedInstanceEncryptionProtector>): void;
    get(resourceGroupName: string, managedInstanceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedInstanceEncryptionProtector>): void;


    /**
     * Updates an existing encryption protector.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} parameters The requested encryption protector resource
     * state.
     *
     * @param {string} [parameters.serverKeyName] The name of the managed instance
     * key.
     *
     * @param {string} parameters.serverKeyType The encryption protector type like
     * 'ServiceManaged', 'AzureKeyVault'. Possible values include:
     * 'ServiceManaged', 'AzureKeyVault'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedInstanceEncryptionProtector>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedInstanceEncryptionProtector, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedInstanceEncryptionProtector>>;

    /**
     * Updates an existing encryption protector.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} parameters The requested encryption protector resource
     * state.
     *
     * @param {string} [parameters.serverKeyName] The name of the managed instance
     * key.
     *
     * @param {string} parameters.serverKeyType The encryption protector type like
     * 'ServiceManaged', 'AzureKeyVault'. Possible values include:
     * 'ServiceManaged', 'AzureKeyVault'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedInstanceEncryptionProtector} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedInstanceEncryptionProtector} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedInstanceEncryptionProtector} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedInstanceEncryptionProtector, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedInstanceEncryptionProtector>;
    createOrUpdate(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedInstanceEncryptionProtector, callback: ServiceCallback<models.ManagedInstanceEncryptionProtector>): void;
    createOrUpdate(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedInstanceEncryptionProtector, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedInstanceEncryptionProtector>): void;


    /**
     * Updates an existing encryption protector.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} parameters The requested encryption protector resource
     * state.
     *
     * @param {string} [parameters.serverKeyName] The name of the managed instance
     * key.
     *
     * @param {string} parameters.serverKeyType The encryption protector type like
     * 'ServiceManaged', 'AzureKeyVault'. Possible values include:
     * 'ServiceManaged', 'AzureKeyVault'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedInstanceEncryptionProtector>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedInstanceEncryptionProtector, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedInstanceEncryptionProtector>>;

    /**
     * Updates an existing encryption protector.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance.
     *
     * @param {object} parameters The requested encryption protector resource
     * state.
     *
     * @param {string} [parameters.serverKeyName] The name of the managed instance
     * key.
     *
     * @param {string} parameters.serverKeyType The encryption protector type like
     * 'ServiceManaged', 'AzureKeyVault'. Possible values include:
     * 'ServiceManaged', 'AzureKeyVault'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedInstanceEncryptionProtector} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedInstanceEncryptionProtector} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedInstanceEncryptionProtector} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedInstanceEncryptionProtector, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedInstanceEncryptionProtector>;
    beginCreateOrUpdate(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedInstanceEncryptionProtector, callback: ServiceCallback<models.ManagedInstanceEncryptionProtector>): void;
    beginCreateOrUpdate(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedInstanceEncryptionProtector, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedInstanceEncryptionProtector>): void;


    /**
     * Gets a list of managed instance encryption protectors
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedInstanceEncryptionProtectorListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByInstanceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedInstanceEncryptionProtectorListResult>>;

    /**
     * Gets a list of managed instance encryption protectors
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedInstanceEncryptionProtectorListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedInstanceEncryptionProtectorListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link
     *                      ManagedInstanceEncryptionProtectorListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByInstanceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedInstanceEncryptionProtectorListResult>;
    listByInstanceNext(nextPageLink: string, callback: ServiceCallback<models.ManagedInstanceEncryptionProtectorListResult>): void;
    listByInstanceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedInstanceEncryptionProtectorListResult>): void;
}

/**
 * @class
 * ManagedInstanceVulnerabilityAssessments
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface ManagedInstanceVulnerabilityAssessments {


    /**
     * Gets the managed instance's vulnerability assessment.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance for
     * which the vulnerability assessment is defined.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedInstanceVulnerabilityAssessment>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedInstanceVulnerabilityAssessment>>;

    /**
     * Gets the managed instance's vulnerability assessment.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance for
     * which the vulnerability assessment is defined.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedInstanceVulnerabilityAssessment} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedInstanceVulnerabilityAssessment} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedInstanceVulnerabilityAssessment} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, managedInstanceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedInstanceVulnerabilityAssessment>;
    get(resourceGroupName: string, managedInstanceName: string, callback: ServiceCallback<models.ManagedInstanceVulnerabilityAssessment>): void;
    get(resourceGroupName: string, managedInstanceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedInstanceVulnerabilityAssessment>): void;


    /**
     * Creates or updates the managed instance's vulnerability assessment.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance for
     * which the vulnerability assessment is defined.
     *
     * @param {object} parameters The requested resource.
     *
     * @param {string} parameters.storageContainerPath A blob storage container
     * path to hold the scan results (e.g.
     * https://myStorage.blob.core.windows.net/VaScans/).
     *
     * @param {string} [parameters.storageContainerSasKey] A shared access
     * signature (SAS Key) that has write access to the blob container specified in
     * 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't
     * specified, StorageContainerSasKey is required.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the storage account for vulnerability assessment scan
     * results. If 'StorageContainerSasKey' isn't specified,
     * storageAccountAccessKey is required.
     *
     * @param {object} [parameters.recurringScans] The recurring scans settings
     *
     * @param {boolean} [parameters.recurringScans.isEnabled] Recurring scans
     * state.
     *
     * @param {boolean} [parameters.recurringScans.emailSubscriptionAdmins]
     * Specifies that the schedule scan notification will be is sent to the
     * subscription administrators.
     *
     * @param {array} [parameters.recurringScans.emails] Specifies an array of
     * e-mail addresses to which the scan notification is sent.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedInstanceVulnerabilityAssessment>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedInstanceVulnerabilityAssessment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedInstanceVulnerabilityAssessment>>;

    /**
     * Creates or updates the managed instance's vulnerability assessment.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance for
     * which the vulnerability assessment is defined.
     *
     * @param {object} parameters The requested resource.
     *
     * @param {string} parameters.storageContainerPath A blob storage container
     * path to hold the scan results (e.g.
     * https://myStorage.blob.core.windows.net/VaScans/).
     *
     * @param {string} [parameters.storageContainerSasKey] A shared access
     * signature (SAS Key) that has write access to the blob container specified in
     * 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't
     * specified, StorageContainerSasKey is required.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the storage account for vulnerability assessment scan
     * results. If 'StorageContainerSasKey' isn't specified,
     * storageAccountAccessKey is required.
     *
     * @param {object} [parameters.recurringScans] The recurring scans settings
     *
     * @param {boolean} [parameters.recurringScans.isEnabled] Recurring scans
     * state.
     *
     * @param {boolean} [parameters.recurringScans.emailSubscriptionAdmins]
     * Specifies that the schedule scan notification will be is sent to the
     * subscription administrators.
     *
     * @param {array} [parameters.recurringScans.emails] Specifies an array of
     * e-mail addresses to which the scan notification is sent.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedInstanceVulnerabilityAssessment} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedInstanceVulnerabilityAssessment} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManagedInstanceVulnerabilityAssessment} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedInstanceVulnerabilityAssessment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedInstanceVulnerabilityAssessment>;
    createOrUpdate(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedInstanceVulnerabilityAssessment, callback: ServiceCallback<models.ManagedInstanceVulnerabilityAssessment>): void;
    createOrUpdate(resourceGroupName: string, managedInstanceName: string, parameters: models.ManagedInstanceVulnerabilityAssessment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedInstanceVulnerabilityAssessment>): void;


    /**
     * Removes the managed instance's vulnerability assessment.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance for
     * which the vulnerability assessment is defined.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Removes the managed instance's vulnerability assessment.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance for
     * which the vulnerability assessment is defined.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, managedInstanceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, managedInstanceName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, managedInstanceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets the managed instance's vulnerability assessment policies.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance for
     * which the vulnerability assessments is defined.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedInstanceVulnerabilityAssessmentListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByInstanceWithHttpOperationResponse(resourceGroupName: string, managedInstanceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedInstanceVulnerabilityAssessmentListResult>>;

    /**
     * Gets the managed instance's vulnerability assessment policies.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} managedInstanceName The name of the managed instance for
     * which the vulnerability assessments is defined.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedInstanceVulnerabilityAssessmentListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedInstanceVulnerabilityAssessmentListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link
     *                      ManagedInstanceVulnerabilityAssessmentListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByInstance(resourceGroupName: string, managedInstanceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedInstanceVulnerabilityAssessmentListResult>;
    listByInstance(resourceGroupName: string, managedInstanceName: string, callback: ServiceCallback<models.ManagedInstanceVulnerabilityAssessmentListResult>): void;
    listByInstance(resourceGroupName: string, managedInstanceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedInstanceVulnerabilityAssessmentListResult>): void;


    /**
     * Gets the managed instance's vulnerability assessment policies.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManagedInstanceVulnerabilityAssessmentListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByInstanceNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManagedInstanceVulnerabilityAssessmentListResult>>;

    /**
     * Gets the managed instance's vulnerability assessment policies.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManagedInstanceVulnerabilityAssessmentListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManagedInstanceVulnerabilityAssessmentListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link
     *                      ManagedInstanceVulnerabilityAssessmentListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByInstanceNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManagedInstanceVulnerabilityAssessmentListResult>;
    listByInstanceNext(nextPageLink: string, callback: ServiceCallback<models.ManagedInstanceVulnerabilityAssessmentListResult>): void;
    listByInstanceNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedInstanceVulnerabilityAssessmentListResult>): void;
}

/**
 * @class
 * ServerVulnerabilityAssessments
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SqlManagementClient.
 */
export interface ServerVulnerabilityAssessments {


    /**
     * Gets the server's vulnerability assessment.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server for which the
     * vulnerability assessment is defined.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerVulnerabilityAssessment>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerVulnerabilityAssessment>>;

    /**
     * Gets the server's vulnerability assessment.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server for which the
     * vulnerability assessment is defined.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerVulnerabilityAssessment} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerVulnerabilityAssessment} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerVulnerabilityAssessment} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerVulnerabilityAssessment>;
    get(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.ServerVulnerabilityAssessment>): void;
    get(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerVulnerabilityAssessment>): void;


    /**
     * Creates or updates the server's vulnerability assessment.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server for which the
     * vulnerability assessment is defined.
     *
     * @param {object} parameters The requested resource.
     *
     * @param {string} parameters.storageContainerPath A blob storage container
     * path to hold the scan results (e.g.
     * https://myStorage.blob.core.windows.net/VaScans/).
     *
     * @param {string} [parameters.storageContainerSasKey] A shared access
     * signature (SAS Key) that has write access to the blob container specified in
     * 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't
     * specified, StorageContainerSasKey is required.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the storage account for vulnerability assessment scan
     * results. If 'StorageContainerSasKey' isn't specified,
     * storageAccountAccessKey is required.
     *
     * @param {object} [parameters.recurringScans] The recurring scans settings
     *
     * @param {boolean} [parameters.recurringScans.isEnabled] Recurring scans
     * state.
     *
     * @param {boolean} [parameters.recurringScans.emailSubscriptionAdmins]
     * Specifies that the schedule scan notification will be is sent to the
     * subscription administrators.
     *
     * @param {array} [parameters.recurringScans.emails] Specifies an array of
     * e-mail addresses to which the scan notification is sent.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerVulnerabilityAssessment>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, serverName: string, parameters: models.ServerVulnerabilityAssessment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerVulnerabilityAssessment>>;

    /**
     * Creates or updates the server's vulnerability assessment.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server for which the
     * vulnerability assessment is defined.
     *
     * @param {object} parameters The requested resource.
     *
     * @param {string} parameters.storageContainerPath A blob storage container
     * path to hold the scan results (e.g.
     * https://myStorage.blob.core.windows.net/VaScans/).
     *
     * @param {string} [parameters.storageContainerSasKey] A shared access
     * signature (SAS Key) that has write access to the blob container specified in
     * 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't
     * specified, StorageContainerSasKey is required.
     *
     * @param {string} [parameters.storageAccountAccessKey] Specifies the
     * identifier key of the storage account for vulnerability assessment scan
     * results. If 'StorageContainerSasKey' isn't specified,
     * storageAccountAccessKey is required.
     *
     * @param {object} [parameters.recurringScans] The recurring scans settings
     *
     * @param {boolean} [parameters.recurringScans.isEnabled] Recurring scans
     * state.
     *
     * @param {boolean} [parameters.recurringScans.emailSubscriptionAdmins]
     * Specifies that the schedule scan notification will be is sent to the
     * subscription administrators.
     *
     * @param {array} [parameters.recurringScans.emails] Specifies an array of
     * e-mail addresses to which the scan notification is sent.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerVulnerabilityAssessment} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerVulnerabilityAssessment} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerVulnerabilityAssessment} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, serverName: string, parameters: models.ServerVulnerabilityAssessment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerVulnerabilityAssessment>;
    createOrUpdate(resourceGroupName: string, serverName: string, parameters: models.ServerVulnerabilityAssessment, callback: ServiceCallback<models.ServerVulnerabilityAssessment>): void;
    createOrUpdate(resourceGroupName: string, serverName: string, parameters: models.ServerVulnerabilityAssessment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerVulnerabilityAssessment>): void;


    /**
     * Removes the server's vulnerability assessment.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server for which the
     * vulnerability assessment is defined.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Removes the server's vulnerability assessment.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server for which the
     * vulnerability assessment is defined.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, serverName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists the vulnerability assessment policies associated with a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerVulnerabilityAssessmentListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerWithHttpOperationResponse(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerVulnerabilityAssessmentListResult>>;

    /**
     * Lists the vulnerability assessment policies associated with a server.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the resource. You can obtain this value from the Azure Resource
     * Manager API or the portal.
     *
     * @param {string} serverName The name of the server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerVulnerabilityAssessmentListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerVulnerabilityAssessmentListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerVulnerabilityAssessmentListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerVulnerabilityAssessmentListResult>;
    listByServer(resourceGroupName: string, serverName: string, callback: ServiceCallback<models.ServerVulnerabilityAssessmentListResult>): void;
    listByServer(resourceGroupName: string, serverName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerVulnerabilityAssessmentListResult>): void;


    /**
     * Lists the vulnerability assessment policies associated with a server.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServerVulnerabilityAssessmentListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByServerNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServerVulnerabilityAssessmentListResult>>;

    /**
     * Lists the vulnerability assessment policies associated with a server.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServerVulnerabilityAssessmentListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServerVulnerabilityAssessmentListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServerVulnerabilityAssessmentListResult} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByServerNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServerVulnerabilityAssessmentListResult>;
    listByServerNext(nextPageLink: string, callback: ServiceCallback<models.ServerVulnerabilityAssessmentListResult>): void;
    listByServerNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerVulnerabilityAssessmentListResult>): void;
}
