/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * A database operation.
 *
 * @extends models['ProxyResource']
 */
class DatabaseOperation extends models['ProxyResource'] {
  /**
   * Create a DatabaseOperation.
   * @member {string} [databaseName] The name of the database the operation is
   * being performed on.
   * @member {string} [operation] The name of operation.
   * @member {string} [operationFriendlyName] The friendly name of operation.
   * @member {number} [percentComplete] The percentage of the operation
   * completed.
   * @member {string} [serverName] The name of the server.
   * @member {date} [startTime] The operation start time.
   * @member {string} [state] The operation state. Possible values include:
   * 'Pending', 'InProgress', 'Succeeded', 'Failed', 'CancelInProgress',
   * 'Cancelled'
   * @member {number} [errorCode] The operation error code.
   * @member {string} [errorDescription] The operation error description.
   * @member {number} [errorSeverity] The operation error severity.
   * @member {boolean} [isUserError] Whether or not the error is a user error.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of DatabaseOperation
   *
   * @returns {object} metadata of DatabaseOperation
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DatabaseOperation',
      type: {
        name: 'Composite',
        className: 'DatabaseOperation',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          databaseName: {
            required: false,
            readOnly: true,
            serializedName: 'properties.databaseName',
            type: {
              name: 'String'
            }
          },
          operation: {
            required: false,
            readOnly: true,
            serializedName: 'properties.operation',
            type: {
              name: 'String'
            }
          },
          operationFriendlyName: {
            required: false,
            readOnly: true,
            serializedName: 'properties.operationFriendlyName',
            type: {
              name: 'String'
            }
          },
          percentComplete: {
            required: false,
            readOnly: true,
            serializedName: 'properties.percentComplete',
            type: {
              name: 'Number'
            }
          },
          serverName: {
            required: false,
            readOnly: true,
            serializedName: 'properties.serverName',
            type: {
              name: 'String'
            }
          },
          startTime: {
            required: false,
            readOnly: true,
            serializedName: 'properties.startTime',
            type: {
              name: 'DateTime'
            }
          },
          state: {
            required: false,
            readOnly: true,
            serializedName: 'properties.state',
            type: {
              name: 'String'
            }
          },
          errorCode: {
            required: false,
            readOnly: true,
            serializedName: 'properties.errorCode',
            type: {
              name: 'Number'
            }
          },
          errorDescription: {
            required: false,
            readOnly: true,
            serializedName: 'properties.errorDescription',
            type: {
              name: 'String'
            }
          },
          errorSeverity: {
            required: false,
            readOnly: true,
            serializedName: 'properties.errorSeverity',
            type: {
              name: 'Number'
            }
          },
          isUserError: {
            required: false,
            readOnly: true,
            serializedName: 'properties.isUserError',
            type: {
              name: 'Boolean'
            }
          }
        }
      }
    };
  }
}

module.exports = DatabaseOperation;
