/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * An instance failover group.
 *
 * @extends models['ProxyResource']
 */
class InstanceFailoverGroup extends models['ProxyResource'] {
  /**
   * Create a InstanceFailoverGroup.
   * @property {object} readWriteEndpoint Read-write endpoint of the failover
   * group instance.
   * @property {string} [readWriteEndpoint.failoverPolicy] Failover policy of
   * the read-write endpoint for the failover group. If failoverPolicy is
   * Automatic then failoverWithDataLossGracePeriodMinutes is required.
   * Possible values include: 'Manual', 'Automatic'
   * @property {number}
   * [readWriteEndpoint.failoverWithDataLossGracePeriodMinutes] Grace period
   * before failover with data loss is attempted for the read-write endpoint.
   * If failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes
   * is required.
   * @property {object} [readOnlyEndpoint] Read-only endpoint of the failover
   * group instance.
   * @property {string} [readOnlyEndpoint.failoverPolicy] Failover policy of
   * the read-only endpoint for the failover group. Possible values include:
   * 'Disabled', 'Enabled'
   * @property {string} [replicationRole] Local replication role of the
   * failover group instance. Possible values include: 'Primary', 'Secondary'
   * @property {string} [replicationState] Replication state of the failover
   * group instance.
   * @property {array} partnerRegions Partner region information for the
   * failover group.
   * @property {array} managedInstancePairs List of managed instance pairs in
   * the failover group.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of InstanceFailoverGroup
   *
   * @returns {object} metadata of InstanceFailoverGroup
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'InstanceFailoverGroup',
      type: {
        name: 'Composite',
        className: 'InstanceFailoverGroup',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          readWriteEndpoint: {
            required: true,
            serializedName: 'properties.readWriteEndpoint',
            type: {
              name: 'Composite',
              className: 'InstanceFailoverGroupReadWriteEndpoint'
            }
          },
          readOnlyEndpoint: {
            required: false,
            serializedName: 'properties.readOnlyEndpoint',
            type: {
              name: 'Composite',
              className: 'InstanceFailoverGroupReadOnlyEndpoint'
            }
          },
          replicationRole: {
            required: false,
            readOnly: true,
            serializedName: 'properties.replicationRole',
            type: {
              name: 'String'
            }
          },
          replicationState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.replicationState',
            type: {
              name: 'String'
            }
          },
          partnerRegions: {
            required: true,
            serializedName: 'properties.partnerRegions',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'PartnerRegionInfoElementType',
                  type: {
                    name: 'Composite',
                    className: 'PartnerRegionInfo'
                  }
              }
            }
          },
          managedInstancePairs: {
            required: true,
            serializedName: 'properties.managedInstancePairs',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ManagedInstancePairInfoElementType',
                  type: {
                    name: 'Composite',
                    className: 'ManagedInstancePairInfo'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = InstanceFailoverGroup;
