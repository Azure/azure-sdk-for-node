/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Response for Import/Export Get operation.
 *
 * @extends models['ProxyResource']
 */
class ImportExportResponse extends models['ProxyResource'] {
  /**
   * Create a ImportExportResponse.
   * @property {string} [requestType] The request type of the operation.
   * @property {uuid} [requestId] The request type of the operation.
   * @property {string} [serverName] The name of the server.
   * @property {string} [databaseName] The name of the database.
   * @property {string} [status] The status message returned from the server.
   * @property {string} [lastModifiedTime] The operation status last modified
   * time.
   * @property {string} [queuedTime] The operation queued time.
   * @property {string} [blobUri] The blob uri.
   * @property {string} [errorMessage] The error message returned from the
   * server.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ImportExportResponse
   *
   * @returns {object} metadata of ImportExportResponse
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ImportExportResponse',
      type: {
        name: 'Composite',
        className: 'ImportExportResponse',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          requestType: {
            required: false,
            readOnly: true,
            serializedName: 'properties.requestType',
            type: {
              name: 'String'
            }
          },
          requestId: {
            required: false,
            readOnly: true,
            serializedName: 'properties.requestId',
            type: {
              name: 'String'
            }
          },
          serverName: {
            required: false,
            readOnly: true,
            serializedName: 'properties.serverName',
            type: {
              name: 'String'
            }
          },
          databaseName: {
            required: false,
            readOnly: true,
            serializedName: 'properties.databaseName',
            type: {
              name: 'String'
            }
          },
          status: {
            required: false,
            readOnly: true,
            serializedName: 'properties.status',
            type: {
              name: 'String'
            }
          },
          lastModifiedTime: {
            required: false,
            readOnly: true,
            serializedName: 'properties.lastModifiedTime',
            type: {
              name: 'String'
            }
          },
          queuedTime: {
            required: false,
            readOnly: true,
            serializedName: 'properties.queuedTime',
            type: {
              name: 'String'
            }
          },
          blobUri: {
            required: false,
            readOnly: true,
            serializedName: 'properties.blobUri',
            type: {
              name: 'String'
            }
          },
          errorMessage: {
            required: false,
            readOnly: true,
            serializedName: 'properties.errorMessage',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ImportExportResponse;
