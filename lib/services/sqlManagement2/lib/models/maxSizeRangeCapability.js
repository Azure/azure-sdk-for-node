/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The maximum size range capability.
 *
 */
class MaxSizeRangeCapability {
  /**
   * Create a MaxSizeRangeCapability.
   * @member {object} [minValue] Minimum value.
   * @member {number} [minValue.limit] The maximum size limit (see 'unit' for
   * the units).
   * @member {string} [minValue.unit] The units that the limit is expressed in.
   * Possible values include: 'Megabytes', 'Gigabytes', 'Terabytes',
   * 'Petabytes'
   * @member {object} [maxValue] Maximum value.
   * @member {number} [maxValue.limit] The maximum size limit (see 'unit' for
   * the units).
   * @member {string} [maxValue.unit] The units that the limit is expressed in.
   * Possible values include: 'Megabytes', 'Gigabytes', 'Terabytes',
   * 'Petabytes'
   * @member {object} [scaleSize] Scale/step size for discrete values between
   * the minimum value and the maximum value.
   * @member {number} [scaleSize.limit] The maximum size limit (see 'unit' for
   * the units).
   * @member {string} [scaleSize.unit] The units that the limit is expressed
   * in. Possible values include: 'Megabytes', 'Gigabytes', 'Terabytes',
   * 'Petabytes'
   * @member {object} [logSize] Size of transaction log.
   * @member {number} [logSize.limit] The log size limit (see 'unit' for the
   * units).
   * @member {string} [logSize.unit] The units that the limit is expressed in.
   * Possible values include: 'Megabytes', 'Gigabytes', 'Terabytes',
   * 'Petabytes', 'Percent'
   * @member {string} [status] The status of the capability. Possible values
   * include: 'Visible', 'Available', 'Default', 'Disabled'
   * @member {string} [reason] The reason for the capability not being
   * available.
   */
  constructor() {
  }

  /**
   * Defines the metadata of MaxSizeRangeCapability
   *
   * @returns {object} metadata of MaxSizeRangeCapability
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'MaxSizeRangeCapability',
      type: {
        name: 'Composite',
        className: 'MaxSizeRangeCapability',
        modelProperties: {
          minValue: {
            required: false,
            readOnly: true,
            serializedName: 'minValue',
            type: {
              name: 'Composite',
              className: 'MaxSizeCapability'
            }
          },
          maxValue: {
            required: false,
            readOnly: true,
            serializedName: 'maxValue',
            type: {
              name: 'Composite',
              className: 'MaxSizeCapability'
            }
          },
          scaleSize: {
            required: false,
            readOnly: true,
            serializedName: 'scaleSize',
            type: {
              name: 'Composite',
              className: 'MaxSizeCapability'
            }
          },
          logSize: {
            required: false,
            readOnly: true,
            serializedName: 'logSize',
            type: {
              name: 'Composite',
              className: 'LogSizeCapability'
            }
          },
          status: {
            required: false,
            readOnly: true,
            serializedName: 'status',
            type: {
              name: 'Enum',
              allowedValues: [ 'Visible', 'Available', 'Default', 'Disabled' ]
            }
          },
          reason: {
            required: false,
            serializedName: 'reason',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = MaxSizeRangeCapability;
