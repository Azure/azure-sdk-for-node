/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * An elastic pool update.
 *
 */
class ElasticPoolUpdate {
  /**
   * Create a ElasticPoolUpdate.
   * @member {object} [sku]
   * @member {string} [sku.name] The name of the SKU. Ex - P3. It is typically
   * a letter+number code
   * @member {string} [sku.tier] This field is required to be implemented by
   * the Resource Provider if the service has more than one tier, but is not
   * required on a PUT.
   * @member {string} [sku.size] The SKU size. When the name field is the
   * combination of tier and some other value, this would be the standalone
   * code.
   * @member {string} [sku.family] If the service has different generations of
   * hardware, for the same SKU, then that can be captured here.
   * @member {number} [sku.capacity] If the SKU supports scale out/in then the
   * capacity integer should be included. If scale out/in is not possible for
   * the resource this may be omitted.
   * @member {number} [maxSizeBytes] The storage limit for the database elastic
   * pool in bytes.
   * @member {object} [perDatabaseSettings] The per database settings for the
   * elastic pool.
   * @member {number} [perDatabaseSettings.minCapacity] The minimum capacity
   * all databases are guaranteed.
   * @member {number} [perDatabaseSettings.maxCapacity] The maximum capacity
   * any one database can consume.
   * @member {boolean} [zoneRedundant] Whether or not this elastic pool is zone
   * redundant, which means the replicas of this elastic pool will be spread
   * across multiple availability zones.
   * @member {string} [licenseType] The license type to apply for this elastic
   * pool. Possible values include: 'LicenseIncluded', 'BasePrice'
   * @member {object} [tags] Resource tags.
   */
  constructor() {
  }

  /**
   * Defines the metadata of ElasticPoolUpdate
   *
   * @returns {object} metadata of ElasticPoolUpdate
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ElasticPoolUpdate',
      type: {
        name: 'Composite',
        className: 'ElasticPoolUpdate',
        modelProperties: {
          sku: {
            required: false,
            serializedName: 'sku',
            type: {
              name: 'Composite',
              className: 'Sku'
            }
          },
          maxSizeBytes: {
            required: false,
            serializedName: 'properties.maxSizeBytes',
            type: {
              name: 'Number'
            }
          },
          perDatabaseSettings: {
            required: false,
            serializedName: 'properties.perDatabaseSettings',
            type: {
              name: 'Composite',
              className: 'ElasticPoolPerDatabaseSettings'
            }
          },
          zoneRedundant: {
            required: false,
            serializedName: 'properties.zoneRedundant',
            type: {
              name: 'Boolean'
            }
          },
          licenseType: {
            required: false,
            serializedName: 'properties.licenseType',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = ElasticPoolUpdate;
