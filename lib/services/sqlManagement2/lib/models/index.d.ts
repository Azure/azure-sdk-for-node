/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError } from "ms-rest-azure";
import * as moment from "moment";

export {

  BaseResource,
  CloudError
};

/**
 * ARM resource.
 */
export interface Resource extends BaseResource {
  /**
   * Resource ID.
   */
  readonly id?: string;
  /**
   * Resource name.
   */
  readonly name?: string;
  /**
   * Resource type.
   */
  readonly type?: string;
}

/**
 * ARM proxy resource.
 */
export interface ProxyResource extends Resource {
}

/**
 * A recoverable database
 */
export interface RecoverableDatabase extends ProxyResource {
  /**
   * The edition of the database
   */
  readonly edition?: string;
  /**
   * The service level objective name of the database
   */
  readonly serviceLevelObjective?: string;
  /**
   * The elastic pool name of the database
   */
  readonly elasticPoolName?: string;
  /**
   * The last available backup date of the database (ISO8601 format)
   */
  readonly lastAvailableBackupDate?: Date;
}

/**
 * A restorable dropped database
 */
export interface RestorableDroppedDatabase extends ProxyResource {
  /**
   * The geo-location where the resource lives
   */
  readonly location?: string;
  /**
   * The name of the database
   */
  readonly databaseName?: string;
  /**
   * The edition of the database
   */
  readonly edition?: string;
  /**
   * The max size in bytes of the database
   */
  readonly maxSizeBytes?: string;
  /**
   * The service level objective name of the database
   */
  readonly serviceLevelObjective?: string;
  /**
   * The elastic pool name of the database
   */
  readonly elasticPoolName?: string;
  /**
   * The creation date of the database (ISO8601 format)
   */
  readonly creationDate?: Date;
  /**
   * The deletion date of the database (ISO8601 format)
   */
  readonly deletionDate?: Date;
  /**
   * The earliest restore date of the database (ISO8601 format)
   */
  readonly earliestRestoreDate?: Date;
}

/**
 * ARM tracked top level resource.
 */
export interface TrackedResource extends Resource {
  /**
   * Resource location.
   */
  location: string;
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * A request to check whether the specified name for a resource is available.
 */
export interface CheckNameAvailabilityRequest {
  /**
   * The name whose availability is to be checked.
   */
  name: string;
}

/**
 * A response indicating whether the specified name for a resource is available.
 */
export interface CheckNameAvailabilityResponse {
  /**
   * True if the name is available, otherwise false.
   */
  readonly available?: boolean;
  /**
   * A message explaining why the name is unavailable. Will be null if the name is available.
   */
  readonly message?: string;
  /**
   * The name whose availability was checked.
   */
  readonly name?: string;
  /**
   * The reason code explaining why the name is unavailable. Will be null if the name is available.
   * Possible values include: 'Invalid', 'AlreadyExists'
   */
  readonly reason?: string;
}

/**
 * A server secure connection policy.
 */
export interface ServerConnectionPolicy extends ProxyResource {
  /**
   * Metadata used for the Azure portal experience.
   */
  readonly kind?: string;
  /**
   * Resource location.
   */
  readonly location?: string;
  /**
   * The server connection type. Possible values include: 'Default', 'Proxy', 'Redirect'
   */
  connectionType: string;
}

/**
 * Contains information about a database Threat Detection policy.
 */
export interface DatabaseSecurityAlertPolicy extends ProxyResource {
  /**
   * The geo-location where the resource lives
   */
  location?: string;
  /**
   * Resource kind.
   */
  readonly kind?: string;
  /**
   * Specifies the state of the policy. If state is Enabled, storageEndpoint and
   * storageAccountAccessKey are required. Possible values include: 'New', 'Enabled', 'Disabled'
   */
  state: string;
  /**
   * Specifies the semicolon-separated list of alerts that are disabled, or empty string to disable
   * no alerts. Possible values: Sql_Injection; Sql_Injection_Vulnerability; Access_Anomaly;
   * Data_Exfiltration; Unsafe_Action.
   */
  disabledAlerts?: string;
  /**
   * Specifies the semicolon-separated list of e-mail addresses to which the alert is sent.
   */
  emailAddresses?: string;
  /**
   * Specifies that the alert is sent to the account administrators. Possible values include:
   * 'Enabled', 'Disabled'
   */
  emailAccountAdmins?: string;
  /**
   * Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob
   * storage will hold all Threat Detection audit logs. If state is Enabled, storageEndpoint is
   * required.
   */
  storageEndpoint?: string;
  /**
   * Specifies the identifier key of the Threat Detection audit storage account. If state is
   * Enabled, storageAccountAccessKey is required.
   */
  storageAccountAccessKey?: string;
  /**
   * Specifies the number of days to keep in the Threat Detection audit logs.
   */
  retentionDays?: number;
  /**
   * Specifies whether to use the default server policy. Possible values include: 'Enabled',
   * 'Disabled'
   */
  useServerDefault?: string;
}

/**
 * Represents a database data masking policy.
 */
export interface DataMaskingPolicy extends ProxyResource {
  /**
   * The state of the data masking policy. Possible values include: 'Disabled', 'Enabled'
   */
  dataMaskingState: string;
  /**
   * The list of the exempt principals. Specifies the semicolon-separated list of database users
   * for which the data masking policy does not apply. The specified users receive data results
   * without masking for all of the database queries.
   */
  exemptPrincipals?: string;
  /**
   * The list of the application principals. This is a legacy parameter and is no longer used.
   */
  readonly applicationPrincipals?: string;
  /**
   * The masking level. This is a legacy parameter and is no longer used.
   */
  readonly maskingLevel?: string;
  /**
   * The location of the data masking policy.
   */
  readonly location?: string;
  /**
   * The kind of data masking policy. Metadata, used for Azure portal.
   */
  readonly kind?: string;
}

/**
 * Represents a database data masking rule.
 */
export interface DataMaskingRule extends ProxyResource {
  /**
   * The rule Id.
   */
  readonly dataMaskingRuleId?: string;
  /**
   * The alias name. This is a legacy parameter and is no longer used.
   */
  aliasName?: string;
  /**
   * The rule state. Used to delete a rule. To delete an existing rule, specify the schemaName,
   * tableName, columnName, maskingFunction, and specify ruleState as disabled. However, if the
   * rule doesn't already exist, the rule will be created with ruleState set to enabled, regardless
   * of the provided value of ruleState. Possible values include: 'Disabled', 'Enabled'
   */
  ruleState?: string;
  /**
   * The schema name on which the data masking rule is applied.
   */
  schemaName: string;
  /**
   * The table name on which the data masking rule is applied.
   */
  tableName: string;
  /**
   * The column name on which the data masking rule is applied.
   */
  columnName: string;
  /**
   * The masking function that is used for the data masking rule. Possible values include:
   * 'Default', 'CCN', 'Email', 'Number', 'SSN', 'Text'
   */
  maskingFunction: string;
  /**
   * The numberFrom property of the masking rule. Required if maskingFunction is set to Number,
   * otherwise this parameter will be ignored.
   */
  numberFrom?: string;
  /**
   * The numberTo property of the data masking rule. Required if maskingFunction is set to Number,
   * otherwise this parameter will be ignored.
   */
  numberTo?: string;
  /**
   * If maskingFunction is set to Text, the number of characters to show unmasked in the beginning
   * of the string. Otherwise, this parameter will be ignored.
   */
  prefixSize?: string;
  /**
   * If maskingFunction is set to Text, the number of characters to show unmasked at the end of the
   * string. Otherwise, this parameter will be ignored.
   */
  suffixSize?: string;
  /**
   * If maskingFunction is set to Text, the character to use for masking the unexposed part of the
   * string. Otherwise, this parameter will be ignored.
   */
  replacementString?: string;
  /**
   * The location of the data masking rule.
   */
  readonly location?: string;
  /**
   * The kind of Data Masking Rule. Metadata, used for Azure portal.
   */
  readonly kind?: string;
}

/**
 * Represents a server firewall rule.
 */
export interface FirewallRule extends ProxyResource {
  /**
   * Kind of server that contains this firewall rule.
   */
  readonly kind?: string;
  /**
   * Location of the server that contains this firewall rule.
   */
  readonly location?: string;
  /**
   * The start IP address of the firewall rule. Must be IPv4 format. Use value '0.0.0.0' to
   * represent all Azure-internal IP addresses.
   */
  startIpAddress: string;
  /**
   * The end IP address of the firewall rule. Must be IPv4 format. Must be greater than or equal to
   * startIpAddress. Use value '0.0.0.0' to represent all Azure-internal IP addresses.
   */
  endIpAddress: string;
}

/**
 * A database geo backup policy.
 */
export interface GeoBackupPolicy extends ProxyResource {
  /**
   * The state of the geo backup policy. Possible values include: 'Disabled', 'Enabled'
   */
  state: string;
  /**
   * The storage type of the geo backup policy.
   */
  readonly storageType?: string;
  /**
   * Kind of geo backup policy.  This is metadata used for the Azure portal experience.
   */
  readonly kind?: string;
  /**
   * Backup policy location.
   */
  readonly location?: string;
}

/**
 * Import database parameters.
 */
export interface ImportExtensionRequest {
  /**
   * The name of the extension.
   */
  name?: string;
  /**
   * The type of the extension.
   */
  type?: string;
  /**
   * The type of the storage key to use. Possible values include: 'StorageAccessKey',
   * 'SharedAccessKey'
   */
  storageKeyType: string;
  /**
   * The storage key to use.  If storage key type is SharedAccessKey, it must be preceded with a
   * "?."
   */
  storageKey: string;
  /**
   * The storage uri to use.
   */
  storageUri: string;
  /**
   * The name of the SQL administrator.
   */
  administratorLogin: string;
  /**
   * The password of the SQL administrator.
   */
  administratorLoginPassword: string;
  /**
   * The authentication type. Possible values include: 'SQL', 'ADPassword'
   */
  authenticationType?: string;
}

/**
 * Response for Import/Export Get operation.
 */
export interface ImportExportResponse extends ProxyResource {
  /**
   * The request type of the operation.
   */
  readonly requestType?: string;
  /**
   * The request type of the operation.
   */
  readonly requestId?: string;
  /**
   * The name of the server.
   */
  readonly serverName?: string;
  /**
   * The name of the database.
   */
  readonly databaseName?: string;
  /**
   * The status message returned from the server.
   */
  readonly status?: string;
  /**
   * The operation status last modified time.
   */
  readonly lastModifiedTime?: string;
  /**
   * The operation queued time.
   */
  readonly queuedTime?: string;
  /**
   * The blob uri.
   */
  readonly blobUri?: string;
  /**
   * The error message returned from the server.
   */
  readonly errorMessage?: string;
}

/**
 * Export database parameters.
 */
export interface ExportRequest {
  /**
   * The type of the storage key to use. Possible values include: 'StorageAccessKey',
   * 'SharedAccessKey'
   */
  storageKeyType: string;
  /**
   * The storage key to use.  If storage key type is SharedAccessKey, it must be preceded with a
   * "?."
   */
  storageKey: string;
  /**
   * The storage uri to use.
   */
  storageUri: string;
  /**
   * The name of the SQL administrator.
   */
  administratorLogin: string;
  /**
   * The password of the SQL administrator.
   */
  administratorLoginPassword: string;
  /**
   * The authentication type. Possible values include: 'SQL', 'ADPassword'
   */
  authenticationType?: string;
}

/**
 * Import database parameters.
 */
export interface ImportRequest extends ExportRequest {
  /**
   * The name of the database to import.
   */
  databaseName: string;
  /**
   * The edition for the database being created. Possible values include: 'Web', 'Business',
   * 'Basic', 'Standard', 'Premium', 'PremiumRS', 'Free', 'Stretch', 'DataWarehouse', 'System',
   * 'System2'
   */
  edition: string;
  /**
   * The name of the service objective to assign to the database. Possible values include:
   * 'System', 'System0', 'System1', 'System2', 'System3', 'System4', 'System2L', 'System3L',
   * 'System4L', 'Free', 'Basic', 'S0', 'S1', 'S2', 'S3', 'S4', 'S6', 'S7', 'S9', 'S12', 'P1',
   * 'P2', 'P3', 'P4', 'P6', 'P11', 'P15', 'PRS1', 'PRS2', 'PRS4', 'PRS6', 'DW100', 'DW200',
   * 'DW300', 'DW400', 'DW500', 'DW600', 'DW1000', 'DW1200', 'DW1000c', 'DW1500', 'DW1500c',
   * 'DW2000', 'DW2000c', 'DW3000', 'DW2500c', 'DW3000c', 'DW6000', 'DW5000c', 'DW6000c',
   * 'DW7500c', 'DW10000c', 'DW15000c', 'DW30000c', 'DS100', 'DS200', 'DS300', 'DS400', 'DS500',
   * 'DS600', 'DS1000', 'DS1200', 'DS1500', 'DS2000', 'ElasticPool'
   */
  serviceObjectiveName: string;
  /**
   * The maximum size for the newly imported database.
   */
  maxSizeBytes: string;
}

/**
 * Represents database metrics.
 */
export interface MetricValue {
  /**
   * The number of values for the metric.
   */
  readonly count?: number;
  /**
   * The average value of the metric.
   */
  readonly average?: number;
  /**
   * The max value of the metric.
   */
  readonly maximum?: number;
  /**
   * The min value of the metric.
   */
  readonly minimum?: number;
  /**
   * The metric timestamp (ISO-8601 format).
   */
  readonly timestamp?: Date;
  /**
   * The total value of the metric.
   */
  readonly total?: number;
}

/**
 * A database metric name.
 */
export interface MetricName {
  /**
   * The name of the database metric.
   */
  readonly value?: string;
  /**
   * The friendly name of the database metric.
   */
  readonly localizedValue?: string;
}

/**
 * Database metrics.
 */
export interface Metric {
  /**
   * The start time for the metric (ISO-8601 format).
   */
  readonly startTime?: Date;
  /**
   * The end time for the metric (ISO-8601 format).
   */
  readonly endTime?: Date;
  /**
   * The time step to be used to summarize the metric values.
   */
  readonly timeGrain?: string;
  /**
   * The unit of the metric. Possible values include: 'count', 'bytes', 'seconds', 'percent',
   * 'countPerSecond', 'bytesPerSecond'
   */
  readonly unit?: string;
  /**
   * The name information for the metric.
   */
  readonly name?: MetricName;
  /**
   * The metric values for the specified time window and timestep.
   */
  readonly metricValues?: MetricValue[];
}

/**
 * A metric availability value.
 */
export interface MetricAvailability {
  /**
   * The length of retention for the database metric.
   */
  readonly retention?: string;
  /**
   * The granularity of the database metric.
   */
  readonly timeGrain?: string;
}

/**
 * A database metric definition.
 */
export interface MetricDefinition {
  /**
   * The name information for the metric.
   */
  readonly name?: MetricName;
  /**
   * The primary aggregation type defining how metric values are displayed. Possible values
   * include: 'None', 'Average', 'Count', 'Minimum', 'Maximum', 'Total'
   */
  readonly primaryAggregationType?: string;
  /**
   * The resource uri of the database.
   */
  readonly resourceUri?: string;
  /**
   * The unit of the metric. Possible values include: 'Count', 'Bytes', 'Seconds', 'Percent',
   * 'CountPerSecond', 'BytesPerSecond'
   */
  readonly unit?: string;
  /**
   * The list of database metric availabilities for the metric.
   */
  readonly metricAvailabilities?: MetricAvailability[];
}

/**
 * Represents recommended elastic pool metric.
 */
export interface RecommendedElasticPoolMetric {
  /**
   * The time of metric (ISO8601 format).
   */
  dateTime?: Date;
  /**
   * Gets or sets the DTUs (Database Transaction Units). See
   * https://azure.microsoft.com/documentation/articles/sql-database-what-is-a-dtu/
   */
  dtu?: number;
  /**
   * Gets or sets size in gigabytes.
   */
  sizeGB?: number;
}

/**
 * Represents a recommended elastic pool.
 */
export interface RecommendedElasticPool extends ProxyResource {
  /**
   * The edition of the recommended elastic pool. The ElasticPoolEdition enumeration contains all
   * the valid editions. Possible values include: 'Basic', 'Standard', 'Premium'
   */
  readonly databaseEdition?: string;
  /**
   * The DTU for the recommended elastic pool.
   */
  dtu?: number;
  /**
   * The minimum DTU for the database.
   */
  databaseDtuMin?: number;
  /**
   * The maximum DTU for the database.
   */
  databaseDtuMax?: number;
  /**
   * Gets storage size in megabytes.
   */
  storageMB?: number;
  /**
   * The observation period start (ISO8601 format).
   */
  readonly observationPeriodStart?: Date;
  /**
   * The observation period start (ISO8601 format).
   */
  readonly observationPeriodEnd?: Date;
  /**
   * Gets maximum observed DTU.
   */
  readonly maxObservedDtu?: number;
  /**
   * Gets maximum observed storage in megabytes.
   */
  readonly maxObservedStorageMB?: number;
  /**
   * The list of databases in this pool. Expanded property
   */
  readonly databases?: TrackedResource[];
  /**
   * The list of databases housed in the server. Expanded property
   */
  readonly metrics?: RecommendedElasticPoolMetric[];
}

/**
 * Represents a database replication link.
 */
export interface ReplicationLink extends ProxyResource {
  /**
   * Location of the server that contains this firewall rule.
   */
  readonly location?: string;
  /**
   * Legacy value indicating whether termination is allowed.  Currently always returns true.
   */
  readonly isTerminationAllowed?: boolean;
  /**
   * Replication mode of this replication link.
   */
  readonly replicationMode?: string;
  /**
   * The name of the server hosting the partner database.
   */
  readonly partnerServer?: string;
  /**
   * The name of the partner database.
   */
  readonly partnerDatabase?: string;
  /**
   * The Azure Region of the partner database.
   */
  readonly partnerLocation?: string;
  /**
   * The role of the database in the replication link. Possible values include: 'Primary',
   * 'Secondary', 'NonReadableSecondary', 'Source', 'Copy'
   */
  readonly role?: string;
  /**
   * The role of the partner database in the replication link. Possible values include: 'Primary',
   * 'Secondary', 'NonReadableSecondary', 'Source', 'Copy'
   */
  readonly partnerRole?: string;
  /**
   * The start time for the replication link.
   */
  readonly startTime?: Date;
  /**
   * The percentage of seeding complete for the replication link.
   */
  readonly percentComplete?: number;
  /**
   * The replication state for the replication link. Possible values include: 'PENDING', 'SEEDING',
   * 'CATCH_UP', 'SUSPENDED'
   */
  readonly replicationState?: string;
}

/**
 * An server Active Directory Administrator.
 */
export interface ServerAzureADAdministrator extends ProxyResource {
  /**
   * The server administrator login value.
   */
  login: string;
  /**
   * The server administrator Sid (Secure ID).
   */
  sid: string;
  /**
   * The server Active Directory Administrator tenant id.
   */
  tenantId: string;
}

/**
 * Server communication link.
 */
export interface ServerCommunicationLink extends ProxyResource {
  /**
   * The state.
   */
  readonly state?: string;
  /**
   * The name of the partner server.
   */
  partnerServer: string;
  /**
   * Communication link location.
   */
  readonly location?: string;
  /**
   * Communication link kind.  This property is used for Azure Portal metadata.
   */
  readonly kind?: string;
}

/**
 * Represents a database service objective.
 */
export interface ServiceObjective extends ProxyResource {
  /**
   * The name for the service objective.
   */
  readonly serviceObjectiveName?: string;
  /**
   * Gets whether the service level objective is the default service objective.
   */
  readonly isDefault?: boolean;
  /**
   * Gets whether the service level objective is a system service objective.
   */
  readonly isSystem?: boolean;
  /**
   * The description for the service level objective.
   */
  readonly description?: string;
  /**
   * Gets whether the service level objective is enabled.
   */
  readonly enabled?: boolean;
}

/**
 * Represents the activity on an elastic pool.
 */
export interface ElasticPoolActivity extends ProxyResource {
  /**
   * The geo-location where the resource lives
   */
  location?: string;
  /**
   * The time the operation finished (ISO8601 format).
   */
  readonly endTime?: Date;
  /**
   * The error code if available.
   */
  readonly errorCode?: number;
  /**
   * The error message if available.
   */
  readonly errorMessage?: string;
  /**
   * The error severity if available.
   */
  readonly errorSeverity?: number;
  /**
   * The operation name.
   */
  readonly operation?: string;
  /**
   * The unique operation ID.
   */
  readonly operationId?: string;
  /**
   * The percentage complete if available.
   */
  readonly percentComplete?: number;
  /**
   * The requested max DTU per database if available.
   */
  readonly requestedDatabaseDtuMax?: number;
  /**
   * The requested min DTU per database if available.
   */
  readonly requestedDatabaseDtuMin?: number;
  /**
   * The requested DTU for the pool if available.
   */
  readonly requestedDtu?: number;
  /**
   * The requested name for the elastic pool if available.
   */
  readonly requestedElasticPoolName?: string;
  /**
   * The requested storage limit for the pool in GB if available.
   */
  readonly requestedStorageLimitInGB?: number;
  /**
   * The name of the elastic pool.
   */
  readonly elasticPoolName?: string;
  /**
   * The name of the server the elastic pool is in.
   */
  readonly serverName?: string;
  /**
   * The time the operation started (ISO8601 format).
   */
  readonly startTime?: Date;
  /**
   * The current state of the operation.
   */
  readonly state?: string;
  /**
   * The requested storage limit in MB.
   */
  readonly requestedStorageLimitInMB?: number;
  /**
   * The requested per database DTU guarantee.
   */
  readonly requestedDatabaseDtuGuarantee?: number;
  /**
   * The requested per database DTU cap.
   */
  readonly requestedDatabaseDtuCap?: number;
  /**
   * The requested DTU guarantee.
   */
  readonly requestedDtuGuarantee?: number;
}

/**
 * Represents the activity on an elastic pool.
 */
export interface ElasticPoolDatabaseActivity extends ProxyResource {
  /**
   * The geo-location where the resource lives
   */
  location?: string;
  /**
   * The database name.
   */
  readonly databaseName?: string;
  /**
   * The time the operation finished (ISO8601 format).
   */
  readonly endTime?: Date;
  /**
   * The error code if available.
   */
  readonly errorCode?: number;
  /**
   * The error message if available.
   */
  readonly errorMessage?: string;
  /**
   * The error severity if available.
   */
  readonly errorSeverity?: number;
  /**
   * The operation name.
   */
  readonly operation?: string;
  /**
   * The unique operation ID.
   */
  readonly operationId?: string;
  /**
   * The percentage complete if available.
   */
  readonly percentComplete?: number;
  /**
   * The name for the elastic pool the database is moving into if available.
   */
  readonly requestedElasticPoolName?: string;
  /**
   * The name of the current elastic pool the database is in if available.
   */
  readonly currentElasticPoolName?: string;
  /**
   * The name of the current service objective if available.
   */
  readonly currentServiceObjective?: string;
  /**
   * The name of the requested service objective if available.
   */
  readonly requestedServiceObjective?: string;
  /**
   * The name of the server the elastic pool is in.
   */
  readonly serverName?: string;
  /**
   * The time the operation started (ISO8601 format).
   */
  readonly startTime?: Date;
  /**
   * The current state of the operation.
   */
  readonly state?: string;
}

/**
 * The impact of an operation, both in absolute and relative terms.
 */
export interface OperationImpact {
  /**
   * The name of the impact dimension.
   */
  readonly name?: string;
  /**
   * The unit in which estimated impact to dimension is measured.
   */
  readonly unit?: string;
  /**
   * The absolute impact to dimension.
   */
  readonly changeValueAbsolute?: number;
  /**
   * The relative impact to dimension (null if not applicable)
   */
  readonly changeValueRelative?: number;
}

/**
 * Represents a database recommended index.
 */
export interface RecommendedIndex extends ProxyResource {
  /**
   * The proposed index action. You can create a missing index, drop an unused index, or rebuild an
   * existing index to improve its performance. Possible values include: 'Create', 'Drop',
   * 'Rebuild'
   */
  readonly action?: string;
  /**
   * The current recommendation state. Possible values include: 'Active', 'Pending', 'Executing',
   * 'Verifying', 'Pending Revert', 'Reverting', 'Reverted', 'Ignored', 'Expired', 'Blocked',
   * 'Success'
   */
  readonly state?: string;
  /**
   * The UTC datetime showing when this resource was created (ISO8601 format).
   */
  readonly created?: Date;
  /**
   * The UTC datetime of when was this resource last changed (ISO8601 format).
   */
  readonly lastModified?: Date;
  /**
   * The type of index (CLUSTERED, NONCLUSTERED, COLUMNSTORE, CLUSTERED COLUMNSTORE). Possible
   * values include: 'CLUSTERED', 'NONCLUSTERED', 'COLUMNSTORE', 'CLUSTERED COLUMNSTORE'
   */
  readonly indexType?: string;
  /**
   * The schema where table to build index over resides
   */
  readonly schema?: string;
  /**
   * The table on which to build index.
   */
  readonly table?: string;
  /**
   * Columns over which to build index
   */
  readonly columns?: string[];
  /**
   * The list of column names to be included in the index
   */
  readonly includedColumns?: string[];
  /**
   * The full build index script
   */
  readonly indexScript?: string;
  /**
   * The estimated impact of doing recommended index action.
   */
  readonly estimatedImpact?: OperationImpact[];
  /**
   * The values reported after index action is complete.
   */
  readonly reportedImpact?: OperationImpact[];
}

/**
 * Represents a database transparent data encryption configuration.
 */
export interface TransparentDataEncryption extends ProxyResource {
  /**
   * Resource location.
   */
  readonly location?: string;
  /**
   * The status of the database transparent data encryption. Possible values include: 'Enabled',
   * 'Disabled'
   */
  status?: string;
}

/**
 * A Slo Usage Metric.
 */
export interface SloUsageMetric {
  /**
   * The serviceLevelObjective for SLO usage metric. Possible values include: 'System', 'System0',
   * 'System1', 'System2', 'System3', 'System4', 'System2L', 'System3L', 'System4L', 'Free',
   * 'Basic', 'S0', 'S1', 'S2', 'S3', 'S4', 'S6', 'S7', 'S9', 'S12', 'P1', 'P2', 'P3', 'P4', 'P6',
   * 'P11', 'P15', 'PRS1', 'PRS2', 'PRS4', 'PRS6', 'DW100', 'DW200', 'DW300', 'DW400', 'DW500',
   * 'DW600', 'DW1000', 'DW1200', 'DW1000c', 'DW1500', 'DW1500c', 'DW2000', 'DW2000c', 'DW3000',
   * 'DW2500c', 'DW3000c', 'DW6000', 'DW5000c', 'DW6000c', 'DW7500c', 'DW10000c', 'DW15000c',
   * 'DW30000c', 'DS100', 'DS200', 'DS300', 'DS400', 'DS500', 'DS600', 'DS1000', 'DS1200',
   * 'DS1500', 'DS2000', 'ElasticPool'
   */
  readonly serviceLevelObjective?: string;
  /**
   * The serviceLevelObjectiveId for SLO usage metric.
   */
  readonly serviceLevelObjectiveId?: string;
  /**
   * Gets or sets inRangeTimeRatio for SLO usage metric.
   */
  readonly inRangeTimeRatio?: number;
}

/**
 * Represents a Service Tier Advisor.
 */
export interface ServiceTierAdvisor extends ProxyResource {
  /**
   * The observation period start (ISO8601 format).
   */
  readonly observationPeriodStart?: Date;
  /**
   * The observation period start (ISO8601 format).
   */
  readonly observationPeriodEnd?: Date;
  /**
   * The activeTimeRatio for service tier advisor.
   */
  readonly activeTimeRatio?: number;
  /**
   * Gets or sets minDtu for service tier advisor.
   */
  readonly minDtu?: number;
  /**
   * Gets or sets avgDtu for service tier advisor.
   */
  readonly avgDtu?: number;
  /**
   * Gets or sets maxDtu for service tier advisor.
   */
  readonly maxDtu?: number;
  /**
   * Gets or sets maxSizeInGB for service tier advisor.
   */
  readonly maxSizeInGB?: number;
  /**
   * Gets or sets serviceLevelObjectiveUsageMetrics for the service tier advisor.
   */
  readonly serviceLevelObjectiveUsageMetrics?: SloUsageMetric[];
  /**
   * Gets or sets currentServiceLevelObjective for service tier advisor.
   */
  readonly currentServiceLevelObjective?: string;
  /**
   * Gets or sets currentServiceLevelObjectiveId for service tier advisor.
   */
  readonly currentServiceLevelObjectiveId?: string;
  /**
   * Gets or sets usageBasedRecommendationServiceLevelObjective for service tier advisor.
   */
  readonly usageBasedRecommendationServiceLevelObjective?: string;
  /**
   * Gets or sets usageBasedRecommendationServiceLevelObjectiveId for service tier advisor.
   */
  readonly usageBasedRecommendationServiceLevelObjectiveId?: string;
  /**
   * Gets or sets databaseSizeBasedRecommendationServiceLevelObjective for service tier advisor.
   */
  readonly databaseSizeBasedRecommendationServiceLevelObjective?: string;
  /**
   * Gets or sets databaseSizeBasedRecommendationServiceLevelObjectiveId for service tier advisor.
   */
  readonly databaseSizeBasedRecommendationServiceLevelObjectiveId?: string;
  /**
   * Gets or sets disasterPlanBasedRecommendationServiceLevelObjective for service tier advisor.
   */
  readonly disasterPlanBasedRecommendationServiceLevelObjective?: string;
  /**
   * Gets or sets disasterPlanBasedRecommendationServiceLevelObjectiveId for service tier advisor.
   */
  readonly disasterPlanBasedRecommendationServiceLevelObjectiveId?: string;
  /**
   * Gets or sets overallRecommendationServiceLevelObjective for service tier advisor.
   */
  readonly overallRecommendationServiceLevelObjective?: string;
  /**
   * Gets or sets overallRecommendationServiceLevelObjectiveId for service tier advisor.
   */
  readonly overallRecommendationServiceLevelObjectiveId?: string;
  /**
   * Gets or sets confidence for service tier advisor.
   */
  readonly confidence?: number;
}

/**
 * Represents a database transparent data encryption Scan.
 */
export interface TransparentDataEncryptionActivity extends ProxyResource {
  /**
   * Resource location.
   */
  readonly location?: string;
  /**
   * The status of the database. Possible values include: 'Encrypting', 'Decrypting'
   */
  readonly status?: string;
  /**
   * The percent complete of the transparent data encryption scan for a database.
   */
  readonly percentComplete?: number;
}

/**
 * Represents server metrics.
 */
export interface ServerUsage {
  /**
   * Name of the server usage metric.
   */
  readonly name?: string;
  /**
   * The name of the resource.
   */
  readonly resourceName?: string;
  /**
   * The metric display name.
   */
  readonly displayName?: string;
  /**
   * The current value of the metric.
   */
  readonly currentValue?: number;
  /**
   * The current limit of the metric.
   */
  readonly limit?: number;
  /**
   * The units of the metric.
   */
  readonly unit?: string;
  /**
   * The next reset time for the metric (ISO8601 format).
   */
  readonly nextResetTime?: Date;
}

/**
 * The database usages.
 */
export interface DatabaseUsage {
  /**
   * The name of the usage metric.
   */
  readonly name?: string;
  /**
   * The name of the resource.
   */
  readonly resourceName?: string;
  /**
   * The usage metric display name.
   */
  readonly displayName?: string;
  /**
   * The current value of the usage metric.
   */
  readonly currentValue?: number;
  /**
   * The current limit of the usage metric.
   */
  readonly limit?: number;
  /**
   * The units of the usage metric.
   */
  readonly unit?: string;
  /**
   * The next reset time for the usage metric (ISO8601 format).
   */
  readonly nextResetTime?: Date;
}

/**
 * Automatic tuning properties for individual advisors.
 */
export interface AutomaticTuningOptions {
  /**
   * Automatic tuning option desired state. Possible values include: 'Off', 'On', 'Default'
   */
  desiredState?: string;
  /**
   * Automatic tuning option actual state. Possible values include: 'Off', 'On'
   */
  readonly actualState?: string;
  /**
   * Reason code if desired and actual state are different.
   */
  readonly reasonCode?: number;
  /**
   * Reason description if desired and actual state are different. Possible values include:
   * 'Default', 'Disabled', 'AutoConfigured', 'InheritedFromServer', 'QueryStoreOff',
   * 'QueryStoreReadOnly', 'NotSupported'
   */
  readonly reasonDesc?: string;
}

/**
 * Database-level Automatic Tuning.
 */
export interface DatabaseAutomaticTuning extends ProxyResource {
  /**
   * Automatic tuning desired state. Possible values include: 'Inherit', 'Custom', 'Auto',
   * 'Unspecified'
   */
  desiredState?: string;
  /**
   * Automatic tuning actual state. Possible values include: 'Inherit', 'Custom', 'Auto',
   * 'Unspecified'
   */
  readonly actualState?: string;
  /**
   * Automatic tuning options definition.
   */
  options?: { [propertyName: string]: AutomaticTuningOptions };
}

/**
 * The server encryption protector.
 */
export interface EncryptionProtector extends ProxyResource {
  /**
   * Kind of encryption protector. This is metadata used for the Azure portal experience.
   */
  kind?: string;
  /**
   * Resource location.
   */
  readonly location?: string;
  /**
   * Subregion of the encryption protector.
   */
  readonly subregion?: string;
  /**
   * The name of the server key.
   */
  serverKeyName?: string;
  /**
   * The encryption protector type like 'ServiceManaged', 'AzureKeyVault'. Possible values include:
   * 'ServiceManaged', 'AzureKeyVault'
   */
  serverKeyType: string;
  /**
   * The URI of the server key.
   */
  readonly uri?: string;
  /**
   * Thumbprint of the server key.
   */
  readonly thumbprint?: string;
}

/**
 * Read-write endpoint of the failover group instance.
 */
export interface FailoverGroupReadWriteEndpoint {
  /**
   * Failover policy of the read-write endpoint for the failover group. If failoverPolicy is
   * Automatic then failoverWithDataLossGracePeriodMinutes is required. Possible values include:
   * 'Manual', 'Automatic'
   */
  failoverPolicy: string;
  /**
   * Grace period before failover with data loss is attempted for the read-write endpoint. If
   * failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required.
   */
  failoverWithDataLossGracePeriodMinutes?: number;
}

/**
 * Read-only endpoint of the failover group instance.
 */
export interface FailoverGroupReadOnlyEndpoint {
  /**
   * Failover policy of the read-only endpoint for the failover group. Possible values include:
   * 'Disabled', 'Enabled'
   */
  failoverPolicy?: string;
}

/**
 * Partner server information for the failover group.
 */
export interface PartnerInfo {
  /**
   * Resource identifier of the partner server.
   */
  id: string;
  /**
   * Geo location of the partner server.
   */
  readonly location?: string;
  /**
   * Replication role of the partner server. Possible values include: 'Primary', 'Secondary'
   */
  readonly replicationRole?: string;
}

/**
 * A failover group.
 */
export interface FailoverGroup extends ProxyResource {
  /**
   * Resource location.
   */
  readonly location?: string;
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Read-write endpoint of the failover group instance.
   */
  readWriteEndpoint: FailoverGroupReadWriteEndpoint;
  /**
   * Read-only endpoint of the failover group instance.
   */
  readOnlyEndpoint?: FailoverGroupReadOnlyEndpoint;
  /**
   * Local replication role of the failover group instance. Possible values include: 'Primary',
   * 'Secondary'
   */
  readonly replicationRole?: string;
  /**
   * Replication state of the failover group instance.
   */
  readonly replicationState?: string;
  /**
   * List of partner server information for the failover group.
   */
  partnerServers: PartnerInfo[];
  /**
   * List of databases in the failover group.
   */
  databases?: string[];
}

/**
 * A failover group update request.
 */
export interface FailoverGroupUpdate {
  /**
   * Read-write endpoint of the failover group instance.
   */
  readWriteEndpoint?: FailoverGroupReadWriteEndpoint;
  /**
   * Read-only endpoint of the failover group instance.
   */
  readOnlyEndpoint?: FailoverGroupReadOnlyEndpoint;
  /**
   * List of databases in the failover group.
   */
  databases?: string[];
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Azure Active Directory identity configuration for a resource.
 */
export interface ResourceIdentity {
  /**
   * The Azure Active Directory principal id.
   */
  readonly principalId?: string;
  /**
   * The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an
   * Azure Active Directory principal for the resource. Possible values include: 'SystemAssigned'
   */
  type?: string;
  /**
   * The Azure Active Directory tenant id.
   */
  readonly tenantId?: string;
}

/**
 * The resource model definition representing SKU
 */
export interface Sku {
  /**
   * The name of the SKU. Ex - P3. It is typically a letter+number code
   */
  name: string;
  /**
   * This field is required to be implemented by the Resource Provider if the service has more than
   * one tier, but is not required on a PUT.
   */
  tier?: string;
  /**
   * The SKU size. When the name field is the combination of tier and some other value, this would
   * be the standalone code.
   */
  size?: string;
  /**
   * If the service has different generations of hardware, for the same SKU, then that can be
   * captured here.
   */
  family?: string;
  /**
   * If the SKU supports scale out/in then the capacity integer should be included. If scale out/in
   * is not possible for the resource this may be omitted.
   */
  capacity?: number;
}

/**
 * An Azure SQL managed instance.
 */
export interface ManagedInstance extends TrackedResource {
  /**
   * The Azure Active Directory identity of the managed instance.
   */
  identity?: ResourceIdentity;
  /**
   * Managed instance sku
   */
  sku?: Sku;
  /**
   * The fully qualified domain name of the managed instance.
   */
  readonly fullyQualifiedDomainName?: string;
  /**
   * Administrator username for the managed instance. Can only be specified when the managed
   * instance is being created (and is required for creation).
   */
  administratorLogin?: string;
  /**
   * The administrator login password (required for managed instance creation).
   */
  administratorLoginPassword?: string;
  /**
   * Subnet resource ID for the managed instance.
   */
  subnetId?: string;
  /**
   * The state of the managed instance.
   */
  readonly state?: string;
  /**
   * The license type. Possible values are 'LicenseIncluded' and 'BasePrice'.
   */
  licenseType?: string;
  /**
   * The number of VCores.
   */
  vCores?: number;
  /**
   * The maximum storage size in GB.
   */
  storageSizeInGB?: number;
  /**
   * Collation of the managed instance.
   */
  collation?: string;
  /**
   * The Dns Zone that the managed instance is in.
   */
  readonly dnsZone?: string;
  /**
   * The resource id of another managed instance whose DNS zone this managed instance will share
   * after creation.
   */
  dnsZonePartner?: string;
  /**
   * Whether or not the public data endpoint is enabled.
   */
  publicDataEndpointEnabled?: boolean;
  /**
   * Connection type used for connecting to the instance. Possible values include: 'Proxy',
   * 'Redirect', 'Default'
   */
  proxyOverride?: string;
  /**
   * Id of the timezone. Allowed values are timezones supported by Windows.
   * Winodws keeps details on supported timezones, including the id, in registry under
   * KEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones.
   * You can get those registry values via SQL Server by querying SELECT name AS timezone_id FROM
   * sys.time_zone_info.
   * List of Ids can also be obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones() in
   * PowerShell.
   * An example of valid timezone id is "Pacific Standard Time" or "W. Europe Standard Time".
   */
  timezoneId?: string;
}

/**
 * An update request for an Azure SQL Database managed instance.
 */
export interface ManagedInstanceUpdate {
  /**
   * Managed instance sku
   */
  sku?: Sku;
  /**
   * The fully qualified domain name of the managed instance.
   */
  readonly fullyQualifiedDomainName?: string;
  /**
   * Administrator username for the managed instance. Can only be specified when the managed
   * instance is being created (and is required for creation).
   */
  administratorLogin?: string;
  /**
   * The administrator login password (required for managed instance creation).
   */
  administratorLoginPassword?: string;
  /**
   * Subnet resource ID for the managed instance.
   */
  subnetId?: string;
  /**
   * The state of the managed instance.
   */
  readonly state?: string;
  /**
   * The license type. Possible values are 'LicenseIncluded' and 'BasePrice'.
   */
  licenseType?: string;
  /**
   * The number of VCores.
   */
  vCores?: number;
  /**
   * The maximum storage size in GB.
   */
  storageSizeInGB?: number;
  /**
   * Collation of the managed instance.
   */
  collation?: string;
  /**
   * The Dns Zone that the managed instance is in.
   */
  readonly dnsZone?: string;
  /**
   * The resource id of another managed instance whose DNS zone this managed instance will share
   * after creation.
   */
  dnsZonePartner?: string;
  /**
   * Whether or not the public data endpoint is enabled.
   */
  publicDataEndpointEnabled?: boolean;
  /**
   * Connection type used for connecting to the instance. Possible values include: 'Proxy',
   * 'Redirect', 'Default'
   */
  proxyOverride?: string;
  /**
   * Id of the timezone. Allowed values are timezones supported by Windows.
   * Winodws keeps details on supported timezones, including the id, in registry under
   * KEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones.
   * You can get those registry values via SQL Server by querying SELECT name AS timezone_id FROM
   * sys.time_zone_info.
   * List of Ids can also be obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones() in
   * PowerShell.
   * An example of valid timezone id is "Pacific Standard Time" or "W. Europe Standard Time".
   */
  timezoneId?: string;
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Display metadata associated with the operation.
 */
export interface OperationDisplay {
  /**
   * The localized friendly form of the resource provider name.
   */
  readonly provider?: string;
  /**
   * The localized friendly form of the resource type related to this action/operation.
   */
  readonly resource?: string;
  /**
   * The localized friendly name for the operation.
   */
  readonly operation?: string;
  /**
   * The localized friendly description for the operation.
   */
  readonly description?: string;
}

/**
 * SQL REST API operation definition.
 */
export interface Operation {
  /**
   * The name of the operation being performed on this particular object.
   */
  readonly name?: string;
  /**
   * The localized display information for this particular operation / action.
   */
  readonly display?: OperationDisplay;
  /**
   * The intended executor of the operation. Possible values include: 'user', 'system'
   */
  readonly origin?: string;
  /**
   * Additional descriptions for the operation.
   */
  readonly properties?: { [propertyName: string]: any };
}

/**
 * A server key.
 */
export interface ServerKey extends ProxyResource {
  /**
   * Kind of encryption protector. This is metadata used for the Azure portal experience.
   */
  kind?: string;
  /**
   * Resource location.
   */
  readonly location?: string;
  /**
   * Subregion of the server key.
   */
  readonly subregion?: string;
  /**
   * The server key type like 'ServiceManaged', 'AzureKeyVault'. Possible values include:
   * 'ServiceManaged', 'AzureKeyVault'
   */
  serverKeyType: string;
  /**
   * The URI of the server key.
   */
  uri?: string;
  /**
   * Thumbprint of the server key.
   */
  thumbprint?: string;
  /**
   * The server key creation date.
   */
  creationDate?: Date;
}

/**
 * An Azure SQL Database server.
 */
export interface Server extends TrackedResource {
  /**
   * The Azure Active Directory identity of the server.
   */
  identity?: ResourceIdentity;
  /**
   * Kind of sql server. This is metadata used for the Azure portal experience.
   */
  readonly kind?: string;
  /**
   * Administrator username for the server. Once created it cannot be changed.
   */
  administratorLogin?: string;
  /**
   * The administrator login password (required for server creation).
   */
  administratorLoginPassword?: string;
  /**
   * The version of the server.
   */
  version?: string;
  /**
   * The state of the server.
   */
  readonly state?: string;
  /**
   * The fully qualified domain name of the server.
   */
  readonly fullyQualifiedDomainName?: string;
}

/**
 * An update request for an Azure SQL Database server.
 */
export interface ServerUpdate {
  /**
   * Administrator username for the server. Once created it cannot be changed.
   */
  administratorLogin?: string;
  /**
   * The administrator login password (required for server creation).
   */
  administratorLoginPassword?: string;
  /**
   * The version of the server.
   */
  version?: string;
  /**
   * The state of the server.
   */
  readonly state?: string;
  /**
   * The fully qualified domain name of the server.
   */
  readonly fullyQualifiedDomainName?: string;
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * An Azure SQL Database sync agent.
 */
export interface SyncAgent extends ProxyResource {
  /**
   * Name of the sync agent.
   */
  readonly syncAgentName?: string;
  /**
   * ARM resource id of the sync database in the sync agent.
   */
  syncDatabaseId?: string;
  /**
   * Last alive time of the sync agent.
   */
  readonly lastAliveTime?: Date;
  /**
   * State of the sync agent. Possible values include: 'Online', 'Offline', 'NeverConnected'
   */
  readonly state?: string;
  /**
   * If the sync agent version is up to date.
   */
  readonly isUpToDate?: boolean;
  /**
   * Expiration time of the sync agent version.
   */
  readonly expiryTime?: Date;
  /**
   * Version of the sync agent.
   */
  readonly version?: string;
}

/**
 * Properties of an Azure SQL Database sync agent key.
 */
export interface SyncAgentKeyProperties {
  /**
   * Key of sync agent.
   */
  readonly syncAgentKey?: string;
}

/**
 * An Azure SQL Database sync agent linked database.
 */
export interface SyncAgentLinkedDatabase extends ProxyResource {
  /**
   * Type of the sync agent linked database. Possible values include: 'AzureSqlDatabase',
   * 'SqlServerDatabase'
   */
  readonly databaseType?: string;
  /**
   * Id of the sync agent linked database.
   */
  readonly databaseId?: string;
  /**
   * Description of the sync agent linked database.
   */
  readonly description?: string;
  /**
   * Server name of the sync agent linked database.
   */
  readonly serverName?: string;
  /**
   * Database name of the sync agent linked database.
   */
  readonly databaseName?: string;
  /**
   * User name of the sync agent linked database.
   */
  readonly userName?: string;
}

/**
 * Properties of the sync database id.
 */
export interface SyncDatabaseIdProperties {
  /**
   * ARM resource id of sync database.
   */
  readonly id?: string;
}

/**
 * Properties of the column in the table of database full schema.
 */
export interface SyncFullSchemaTableColumn {
  /**
   * Data size of the column.
   */
  readonly dataSize?: string;
  /**
   * Data type of the column.
   */
  readonly dataType?: string;
  /**
   * Error id of the column.
   */
  readonly errorId?: string;
  /**
   * If there is error in the table.
   */
  readonly hasError?: boolean;
  /**
   * If it is the primary key of the table.
   */
  readonly isPrimaryKey?: boolean;
  /**
   * Name of the column.
   */
  readonly name?: string;
  /**
   * Quoted name of the column.
   */
  readonly quotedName?: string;
}

/**
 * Properties of the table in the database full schema.
 */
export interface SyncFullSchemaTable {
  /**
   * List of columns in the table of database full schema.
   */
  readonly columns?: SyncFullSchemaTableColumn[];
  /**
   * Error id of the table.
   */
  readonly errorId?: string;
  /**
   * If there is error in the table.
   */
  readonly hasError?: boolean;
  /**
   * Name of the table.
   */
  readonly name?: string;
  /**
   * Quoted name of the table.
   */
  readonly quotedName?: string;
}

/**
 * Properties of the database full schema.
 */
export interface SyncFullSchemaProperties {
  /**
   * List of tables in the database full schema.
   */
  readonly tables?: SyncFullSchemaTable[];
  /**
   * Last update time of the database schema.
   */
  readonly lastUpdateTime?: Date;
}

/**
 * Properties of an Azure SQL Database sync group log.
 */
export interface SyncGroupLogProperties {
  /**
   * Timestamp of the sync group log.
   */
  readonly timestamp?: Date;
  /**
   * Type of the sync group log. Possible values include: 'All', 'Error', 'Warning', 'Success'
   */
  readonly type?: string;
  /**
   * Source of the sync group log.
   */
  readonly source?: string;
  /**
   * Details of the sync group log.
   */
  readonly details?: string;
  /**
   * TracingId of the sync group log.
   */
  readonly tracingId?: string;
  /**
   * OperationStatus of the sync group log.
   */
  readonly operationStatus?: string;
}

/**
 * Properties of column in sync group table.
 */
export interface SyncGroupSchemaTableColumn {
  /**
   * Quoted name of sync group table column.
   */
  quotedName?: string;
  /**
   * Data size of the column.
   */
  dataSize?: string;
  /**
   * Data type of the column.
   */
  dataType?: string;
}

/**
 * Properties of table in sync group schema.
 */
export interface SyncGroupSchemaTable {
  /**
   * List of columns in sync group schema.
   */
  columns?: SyncGroupSchemaTableColumn[];
  /**
   * Quoted name of sync group schema table.
   */
  quotedName?: string;
}

/**
 * Properties of sync group schema.
 */
export interface SyncGroupSchema {
  /**
   * List of tables in sync group schema.
   */
  tables?: SyncGroupSchemaTable[];
  /**
   * Name of master sync member where the schema is from.
   */
  masterSyncMemberName?: string;
}

/**
 * An Azure SQL Database sync group.
 */
export interface SyncGroup extends ProxyResource {
  /**
   * Sync interval of the sync group.
   */
  interval?: number;
  /**
   * Last sync time of the sync group.
   */
  readonly lastSyncTime?: Date;
  /**
   * Conflict resolution policy of the sync group. Possible values include: 'HubWin', 'MemberWin'
   */
  conflictResolutionPolicy?: string;
  /**
   * ARM resource id of the sync database in the sync group.
   */
  syncDatabaseId?: string;
  /**
   * User name for the sync group hub database credential.
   */
  hubDatabaseUserName?: string;
  /**
   * Password for the sync group hub database credential.
   */
  hubDatabasePassword?: string;
  /**
   * Sync state of the sync group. Possible values include: 'NotReady', 'Error', 'Warning',
   * 'Progressing', 'Good'
   */
  readonly syncState?: string;
  /**
   * Sync schema of the sync group.
   */
  schema?: SyncGroupSchema;
}

/**
 * An Azure SQL Database sync member.
 */
export interface SyncMember extends ProxyResource {
  /**
   * Database type of the sync member. Possible values include: 'AzureSqlDatabase',
   * 'SqlServerDatabase'
   */
  databaseType?: string;
  /**
   * ARM resource id of the sync agent in the sync member.
   */
  syncAgentId?: string;
  /**
   * SQL Server database id of the sync member.
   */
  sqlServerDatabaseId?: string;
  /**
   * Server name of the member database in the sync member
   */
  serverName?: string;
  /**
   * Database name of the member database in the sync member.
   */
  databaseName?: string;
  /**
   * User name of the member database in the sync member.
   */
  userName?: string;
  /**
   * Password of the member database in the sync member.
   */
  password?: string;
  /**
   * Sync direction of the sync member. Possible values include: 'Bidirectional',
   * 'OneWayMemberToHub', 'OneWayHubToMember'
   */
  syncDirection?: string;
  /**
   * Sync state of the sync member. Possible values include: 'SyncInProgress', 'SyncSucceeded',
   * 'SyncFailed', 'DisabledTombstoneCleanup', 'DisabledBackupRestore',
   * 'SyncSucceededWithWarnings', 'SyncCancelling', 'SyncCancelled', 'UnProvisioned',
   * 'Provisioning', 'Provisioned', 'ProvisionFailed', 'DeProvisioning', 'DeProvisioned',
   * 'DeProvisionFailed', 'Reprovisioning', 'ReprovisionFailed', 'UnReprovisioned'
   */
  readonly syncState?: string;
}

/**
 * Usage Metric of a Subscription in a Location.
 */
export interface SubscriptionUsage extends ProxyResource {
  /**
   * User-readable name of the metric.
   */
  readonly displayName?: string;
  /**
   * Current value of the metric.
   */
  readonly currentValue?: number;
  /**
   * Boundary value of the metric.
   */
  readonly limit?: number;
  /**
   * Unit of the metric.
   */
  readonly unit?: string;
}

/**
 * An Azure SQL virtual cluster.
 */
export interface VirtualCluster extends TrackedResource {
  /**
   * Subnet resource ID for the virtual cluster.
   */
  readonly subnetId?: string;
  /**
   * If the service has different generations of hardware, for the same SKU, then that can be
   * captured here.
   */
  family?: string;
  /**
   * List of resources in this virtual cluster.
   */
  readonly childResources?: string[];
}

/**
 * An update request for an Azure SQL Database virtual cluster.
 */
export interface VirtualClusterUpdate {
  /**
   * Subnet resource ID for the virtual cluster.
   */
  readonly subnetId?: string;
  /**
   * If the service has different generations of hardware, for the same SKU, then that can be
   * captured here.
   */
  family?: string;
  /**
   * List of resources in this virtual cluster.
   */
  readonly childResources?: string[];
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * A virtual network rule.
 */
export interface VirtualNetworkRule extends ProxyResource {
  /**
   * The ARM resource id of the virtual network subnet.
   */
  virtualNetworkSubnetId: string;
  /**
   * Create firewall rule before the virtual network has vnet service endpoint enabled.
   */
  ignoreMissingVnetServiceEndpoint?: boolean;
  /**
   * Virtual Network Rule State. Possible values include: 'Initializing', 'InProgress', 'Ready',
   * 'Deleting', 'Unknown'
   */
  readonly state?: string;
}

/**
 * An extended database blob auditing policy.
 */
export interface ExtendedDatabaseBlobAuditingPolicy extends ProxyResource {
  /**
   * Specifies condition of where clause when creating an audit.
   */
  predicateExpression?: string;
  /**
   * Specifies the state of the policy. If state is Enabled, storageEndpoint or
   * isAzureMonitorTargetEnabled are required. Possible values include: 'Enabled', 'Disabled'
   */
  state: string;
  /**
   * Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state
   * is Enabled, storageEndpoint is required.
   */
  storageEndpoint?: string;
  /**
   * Specifies the identifier key of the auditing storage account. If state is Enabled and
   * storageEndpoint is specified, storageAccountAccessKey is required.
   */
  storageAccountAccessKey?: string;
  /**
   * Specifies the number of days to keep in the audit logs in the storage account.
   */
  retentionDays?: number;
  /**
   * Specifies the Actions-Groups and Actions to audit.
   *
   * The recommended set of action groups to use is the following combination - this will audit all
   * the queries and stored procedures executed against the database, as well as successful and
   * failed logins:
   *
   * BATCH_COMPLETED_GROUP,
   * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
   * FAILED_DATABASE_AUTHENTICATION_GROUP.
   *
   * This above combination is also the set that is configured by default when enabling auditing
   * from the Azure portal.
   *
   * The supported action groups to audit are (note: choose only specific groups that cover your
   * auditing needs. Using unnecessary groups could lead to very large quantities of audit
   * records):
   *
   * APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
   * BACKUP_RESTORE_GROUP
   * DATABASE_LOGOUT_GROUP
   * DATABASE_OBJECT_CHANGE_GROUP
   * DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
   * DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
   * DATABASE_OPERATION_GROUP
   * DATABASE_PERMISSION_CHANGE_GROUP
   * DATABASE_PRINCIPAL_CHANGE_GROUP
   * DATABASE_PRINCIPAL_IMPERSONATION_GROUP
   * DATABASE_ROLE_MEMBER_CHANGE_GROUP
   * FAILED_DATABASE_AUTHENTICATION_GROUP
   * SCHEMA_OBJECT_ACCESS_GROUP
   * SCHEMA_OBJECT_CHANGE_GROUP
   * SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
   * SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
   * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
   * USER_CHANGE_PASSWORD_GROUP
   * BATCH_STARTED_GROUP
   * BATCH_COMPLETED_GROUP
   *
   * These are groups that cover all sql statements and stored procedures executed against the
   * database, and should not be used in combination with other groups as this will result in
   * duplicate audit logs.
   *
   * For more information, see [Database-Level Audit Action
   * Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
   *
   * For Database auditing policy, specific Actions can also be specified (note that Actions cannot
   * be specified for Server auditing policy). The supported actions to audit are:
   * SELECT
   * UPDATE
   * INSERT
   * DELETE
   * EXECUTE
   * RECEIVE
   * REFERENCES
   *
   * The general form for defining an action to be audited is:
   * {action} ON {object} BY {principal}
   *
   * Note that <object> in the above format can refer to an object like a table, view, or stored
   * procedure, or an entire database or schema. For the latter cases, the forms
   * DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.
   *
   * For example:
   * SELECT on dbo.myTable by public
   * SELECT on DATABASE::myDatabase by public
   * SELECT on SCHEMA::mySchema by public
   *
   * For more information, see [Database-Level Audit
   * Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
   */
  auditActionsAndGroups?: string[];
  /**
   * Specifies the blob storage subscription Id.
   */
  storageAccountSubscriptionId?: string;
  /**
   * Specifies whether storageAccountAccessKey value is the storage's secondary key.
   */
  isStorageSecondaryKeyInUse?: boolean;
  /**
   * Specifies whether audit events are sent to Azure Monitor.
   * In order to send the events to Azure Monitor, specify 'State' as 'Enabled' and
   * 'IsAzureMonitorTargetEnabled' as true.
   *
   * When using REST API to configure auditing, Diagnostic Settings with 'SQLSecurityAuditEvents'
   * diagnostic logs category on the database should be also created.
   * Note that for server level audit you should use the 'master' database as {databaseName}.
   *
   * Diagnostic Settings URI format:
   * PUT
   * https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
   *
   * For more information, see [Diagnostic Settings REST
   * API](https://go.microsoft.com/fwlink/?linkid=2033207)
   * or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)

   */
  isAzureMonitorTargetEnabled?: boolean;
}

/**
 * An extended server blob auditing policy.
 */
export interface ExtendedServerBlobAuditingPolicy extends ProxyResource {
  /**
   * Specifies condition of where clause when creating an audit.
   */
  predicateExpression?: string;
  /**
   * Specifies the state of the policy. If state is Enabled, storageEndpoint or
   * isAzureMonitorTargetEnabled are required. Possible values include: 'Enabled', 'Disabled'
   */
  state: string;
  /**
   * Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state
   * is Enabled, storageEndpoint is required.
   */
  storageEndpoint?: string;
  /**
   * Specifies the identifier key of the auditing storage account. If state is Enabled and
   * storageEndpoint is specified, storageAccountAccessKey is required.
   */
  storageAccountAccessKey?: string;
  /**
   * Specifies the number of days to keep in the audit logs in the storage account.
   */
  retentionDays?: number;
  /**
   * Specifies the Actions-Groups and Actions to audit.
   *
   * The recommended set of action groups to use is the following combination - this will audit all
   * the queries and stored procedures executed against the database, as well as successful and
   * failed logins:
   *
   * BATCH_COMPLETED_GROUP,
   * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
   * FAILED_DATABASE_AUTHENTICATION_GROUP.
   *
   * This above combination is also the set that is configured by default when enabling auditing
   * from the Azure portal.
   *
   * The supported action groups to audit are (note: choose only specific groups that cover your
   * auditing needs. Using unnecessary groups could lead to very large quantities of audit
   * records):
   *
   * APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
   * BACKUP_RESTORE_GROUP
   * DATABASE_LOGOUT_GROUP
   * DATABASE_OBJECT_CHANGE_GROUP
   * DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
   * DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
   * DATABASE_OPERATION_GROUP
   * DATABASE_PERMISSION_CHANGE_GROUP
   * DATABASE_PRINCIPAL_CHANGE_GROUP
   * DATABASE_PRINCIPAL_IMPERSONATION_GROUP
   * DATABASE_ROLE_MEMBER_CHANGE_GROUP
   * FAILED_DATABASE_AUTHENTICATION_GROUP
   * SCHEMA_OBJECT_ACCESS_GROUP
   * SCHEMA_OBJECT_CHANGE_GROUP
   * SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
   * SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
   * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
   * USER_CHANGE_PASSWORD_GROUP
   * BATCH_STARTED_GROUP
   * BATCH_COMPLETED_GROUP
   *
   * These are groups that cover all sql statements and stored procedures executed against the
   * database, and should not be used in combination with other groups as this will result in
   * duplicate audit logs.
   *
   * For more information, see [Database-Level Audit Action
   * Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
   *
   * For Database auditing policy, specific Actions can also be specified (note that Actions cannot
   * be specified for Server auditing policy). The supported actions to audit are:
   * SELECT
   * UPDATE
   * INSERT
   * DELETE
   * EXECUTE
   * RECEIVE
   * REFERENCES
   *
   * The general form for defining an action to be audited is:
   * {action} ON {object} BY {principal}
   *
   * Note that <object> in the above format can refer to an object like a table, view, or stored
   * procedure, or an entire database or schema. For the latter cases, the forms
   * DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.
   *
   * For example:
   * SELECT on dbo.myTable by public
   * SELECT on DATABASE::myDatabase by public
   * SELECT on SCHEMA::mySchema by public
   *
   * For more information, see [Database-Level Audit
   * Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
   */
  auditActionsAndGroups?: string[];
  /**
   * Specifies the blob storage subscription Id.
   */
  storageAccountSubscriptionId?: string;
  /**
   * Specifies whether storageAccountAccessKey value is the storage's secondary key.
   */
  isStorageSecondaryKeyInUse?: boolean;
  /**
   * Specifies whether audit events are sent to Azure Monitor.
   * In order to send the events to Azure Monitor, specify 'State' as 'Enabled' and
   * 'IsAzureMonitorTargetEnabled' as true.
   *
   * When using REST API to configure auditing, Diagnostic Settings with 'SQLSecurityAuditEvents'
   * diagnostic logs category on the database should be also created.
   * Note that for server level audit you should use the 'master' database as {databaseName}.
   *
   * Diagnostic Settings URI format:
   * PUT
   * https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
   *
   * For more information, see [Diagnostic Settings REST
   * API](https://go.microsoft.com/fwlink/?linkid=2033207)
   * or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)

   */
  isAzureMonitorTargetEnabled?: boolean;
}

/**
 * A server blob auditing policy.
 */
export interface ServerBlobAuditingPolicy extends ProxyResource {
  /**
   * Specifies the state of the policy. If state is Enabled, storageEndpoint or
   * isAzureMonitorTargetEnabled are required. Possible values include: 'Enabled', 'Disabled'
   */
  state: string;
  /**
   * Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state
   * is Enabled, storageEndpoint is required.
   */
  storageEndpoint?: string;
  /**
   * Specifies the identifier key of the auditing storage account. If state is Enabled and
   * storageEndpoint is specified, storageAccountAccessKey is required.
   */
  storageAccountAccessKey?: string;
  /**
   * Specifies the number of days to keep in the audit logs in the storage account.
   */
  retentionDays?: number;
  /**
   * Specifies the Actions-Groups and Actions to audit.
   *
   * The recommended set of action groups to use is the following combination - this will audit all
   * the queries and stored procedures executed against the database, as well as successful and
   * failed logins:
   *
   * BATCH_COMPLETED_GROUP,
   * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
   * FAILED_DATABASE_AUTHENTICATION_GROUP.
   *
   * This above combination is also the set that is configured by default when enabling auditing
   * from the Azure portal.
   *
   * The supported action groups to audit are (note: choose only specific groups that cover your
   * auditing needs. Using unnecessary groups could lead to very large quantities of audit
   * records):
   *
   * APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
   * BACKUP_RESTORE_GROUP
   * DATABASE_LOGOUT_GROUP
   * DATABASE_OBJECT_CHANGE_GROUP
   * DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
   * DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
   * DATABASE_OPERATION_GROUP
   * DATABASE_PERMISSION_CHANGE_GROUP
   * DATABASE_PRINCIPAL_CHANGE_GROUP
   * DATABASE_PRINCIPAL_IMPERSONATION_GROUP
   * DATABASE_ROLE_MEMBER_CHANGE_GROUP
   * FAILED_DATABASE_AUTHENTICATION_GROUP
   * SCHEMA_OBJECT_ACCESS_GROUP
   * SCHEMA_OBJECT_CHANGE_GROUP
   * SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
   * SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
   * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
   * USER_CHANGE_PASSWORD_GROUP
   * BATCH_STARTED_GROUP
   * BATCH_COMPLETED_GROUP
   *
   * These are groups that cover all sql statements and stored procedures executed against the
   * database, and should not be used in combination with other groups as this will result in
   * duplicate audit logs.
   *
   * For more information, see [Database-Level Audit Action
   * Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
   *
   * For Database auditing policy, specific Actions can also be specified (note that Actions cannot
   * be specified for Server auditing policy). The supported actions to audit are:
   * SELECT
   * UPDATE
   * INSERT
   * DELETE
   * EXECUTE
   * RECEIVE
   * REFERENCES
   *
   * The general form for defining an action to be audited is:
   * {action} ON {object} BY {principal}
   *
   * Note that <object> in the above format can refer to an object like a table, view, or stored
   * procedure, or an entire database or schema. For the latter cases, the forms
   * DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.
   *
   * For example:
   * SELECT on dbo.myTable by public
   * SELECT on DATABASE::myDatabase by public
   * SELECT on SCHEMA::mySchema by public
   *
   * For more information, see [Database-Level Audit
   * Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
   */
  auditActionsAndGroups?: string[];
  /**
   * Specifies the blob storage subscription Id.
   */
  storageAccountSubscriptionId?: string;
  /**
   * Specifies whether storageAccountAccessKey value is the storage's secondary key.
   */
  isStorageSecondaryKeyInUse?: boolean;
  /**
   * Specifies whether audit events are sent to Azure Monitor.
   * In order to send the events to Azure Monitor, specify 'State' as 'Enabled' and
   * 'IsAzureMonitorTargetEnabled' as true.
   *
   * When using REST API to configure auditing, Diagnostic Settings with 'SQLSecurityAuditEvents'
   * diagnostic logs category on the database should be also created.
   * Note that for server level audit you should use the 'master' database as {databaseName}.
   *
   * Diagnostic Settings URI format:
   * PUT
   * https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
   *
   * For more information, see [Diagnostic Settings REST
   * API](https://go.microsoft.com/fwlink/?linkid=2033207)
   * or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)

   */
  isAzureMonitorTargetEnabled?: boolean;
}

/**
 * A database blob auditing policy.
 */
export interface DatabaseBlobAuditingPolicy extends ProxyResource {
  /**
   * Resource kind.
   */
  readonly kind?: string;
  /**
   * Specifies the state of the policy. If state is Enabled, storageEndpoint or
   * isAzureMonitorTargetEnabled are required. Possible values include: 'Enabled', 'Disabled'
   */
  state: string;
  /**
   * Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state
   * is Enabled, storageEndpoint is required.
   */
  storageEndpoint?: string;
  /**
   * Specifies the identifier key of the auditing storage account. If state is Enabled and
   * storageEndpoint is specified, storageAccountAccessKey is required.
   */
  storageAccountAccessKey?: string;
  /**
   * Specifies the number of days to keep in the audit logs in the storage account.
   */
  retentionDays?: number;
  /**
   * Specifies the Actions-Groups and Actions to audit.
   *
   * The recommended set of action groups to use is the following combination - this will audit all
   * the queries and stored procedures executed against the database, as well as successful and
   * failed logins:
   *
   * BATCH_COMPLETED_GROUP,
   * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
   * FAILED_DATABASE_AUTHENTICATION_GROUP.
   *
   * This above combination is also the set that is configured by default when enabling auditing
   * from the Azure portal.
   *
   * The supported action groups to audit are (note: choose only specific groups that cover your
   * auditing needs. Using unnecessary groups could lead to very large quantities of audit
   * records):
   *
   * APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
   * BACKUP_RESTORE_GROUP
   * DATABASE_LOGOUT_GROUP
   * DATABASE_OBJECT_CHANGE_GROUP
   * DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
   * DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
   * DATABASE_OPERATION_GROUP
   * DATABASE_PERMISSION_CHANGE_GROUP
   * DATABASE_PRINCIPAL_CHANGE_GROUP
   * DATABASE_PRINCIPAL_IMPERSONATION_GROUP
   * DATABASE_ROLE_MEMBER_CHANGE_GROUP
   * FAILED_DATABASE_AUTHENTICATION_GROUP
   * SCHEMA_OBJECT_ACCESS_GROUP
   * SCHEMA_OBJECT_CHANGE_GROUP
   * SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
   * SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
   * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
   * USER_CHANGE_PASSWORD_GROUP
   * BATCH_STARTED_GROUP
   * BATCH_COMPLETED_GROUP
   *
   * These are groups that cover all sql statements and stored procedures executed against the
   * database, and should not be used in combination with other groups as this will result in
   * duplicate audit logs.
   *
   * For more information, see [Database-Level Audit Action
   * Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
   *
   * For Database auditing policy, specific Actions can also be specified (note that Actions cannot
   * be specified for Server auditing policy). The supported actions to audit are:
   * SELECT
   * UPDATE
   * INSERT
   * DELETE
   * EXECUTE
   * RECEIVE
   * REFERENCES
   *
   * The general form for defining an action to be audited is:
   * {action} ON {object} BY {principal}
   *
   * Note that <object> in the above format can refer to an object like a table, view, or stored
   * procedure, or an entire database or schema. For the latter cases, the forms
   * DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.
   *
   * For example:
   * SELECT on dbo.myTable by public
   * SELECT on DATABASE::myDatabase by public
   * SELECT on SCHEMA::mySchema by public
   *
   * For more information, see [Database-Level Audit
   * Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
   */
  auditActionsAndGroups?: string[];
  /**
   * Specifies the blob storage subscription Id.
   */
  storageAccountSubscriptionId?: string;
  /**
   * Specifies whether storageAccountAccessKey value is the storage's secondary key.
   */
  isStorageSecondaryKeyInUse?: boolean;
  /**
   * Specifies whether audit events are sent to Azure Monitor.
   * In order to send the events to Azure Monitor, specify 'State' as 'Enabled' and
   * 'IsAzureMonitorTargetEnabled' as true.
   *
   * When using REST API to configure auditing, Diagnostic Settings with 'SQLSecurityAuditEvents'
   * diagnostic logs category on the database should be also created.
   * Note that for server level audit you should use the 'master' database as {databaseName}.
   *
   * Diagnostic Settings URI format:
   * PUT
   * https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
   *
   * For more information, see [Diagnostic Settings REST
   * API](https://go.microsoft.com/fwlink/?linkid=2033207)
   * or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)

   */
  isAzureMonitorTargetEnabled?: boolean;
}

/**
 * Properties for an Azure SQL Database Vulnerability Assessment rule baseline's result.
 */
export interface DatabaseVulnerabilityAssessmentRuleBaselineItem {
  /**
   * The rule baseline result
   */
  result: string[];
}

/**
 * A database vulnerability assessment rule baseline.
 */
export interface DatabaseVulnerabilityAssessmentRuleBaseline extends ProxyResource {
  /**
   * The rule baseline result
   */
  baselineResults: DatabaseVulnerabilityAssessmentRuleBaselineItem[];
}

/**
 * Properties of a Vulnerability Assessment recurring scans.
 */
export interface VulnerabilityAssessmentRecurringScansProperties {
  /**
   * Recurring scans state.
   */
  isEnabled?: boolean;
  /**
   * Specifies that the schedule scan notification will be is sent to the subscription
   * administrators.
   */
  emailSubscriptionAdmins?: boolean;
  /**
   * Specifies an array of e-mail addresses to which the scan notification is sent.
   */
  emails?: string[];
}

/**
 * A database vulnerability assessment.
 */
export interface DatabaseVulnerabilityAssessment extends ProxyResource {
  /**
   * A blob storage container path to hold the scan results (e.g.
   * https://myStorage.blob.core.windows.net/VaScans/).  It is required if server level
   * vulnerability assessment policy doesn't set
   */
  storageContainerPath?: string;
  /**
   * A shared access signature (SAS Key) that has write access to the blob container specified in
   * 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't specified,
   * StorageContainerSasKey is required.
   */
  storageContainerSasKey?: string;
  /**
   * Specifies the identifier key of the storage account for vulnerability assessment scan results.
   * If 'StorageContainerSasKey' isn't specified, storageAccountAccessKey is required.
   */
  storageAccountAccessKey?: string;
  /**
   * The recurring scans settings
   */
  recurringScans?: VulnerabilityAssessmentRecurringScansProperties;
}

/**
 * An Azure SQL job agent.
 */
export interface JobAgent extends TrackedResource {
  /**
   * The name and tier of the SKU.
   */
  sku?: Sku;
  /**
   * Resource ID of the database to store job metadata in.
   */
  databaseId: string;
  /**
   * The state of the job agent. Possible values include: 'Creating', 'Ready', 'Updating',
   * 'Deleting', 'Disabled'
   */
  readonly state?: string;
}

/**
 * An update to an Azure SQL job agent.
 */
export interface JobAgentUpdate {
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * A stored credential that can be used by a job to connect to target databases.
 */
export interface JobCredential extends ProxyResource {
  /**
   * The credential user name.
   */
  username: string;
  /**
   * The credential password.
   */
  password: string;
}

/**
 * The target that a job execution is executed on.
 */
export interface JobExecutionTarget {
  /**
   * The type of the target. Possible values include: 'TargetGroup', 'SqlDatabase',
   * 'SqlElasticPool', 'SqlShardMap', 'SqlServer'
   */
  readonly type?: string;
  /**
   * The server name.
   */
  readonly serverName?: string;
  /**
   * The database name.
   */
  readonly databaseName?: string;
}

/**
 * An execution of a job
 */
export interface JobExecution extends ProxyResource {
  /**
   * The job version number.
   */
  readonly jobVersion?: number;
  /**
   * The job step name.
   */
  readonly stepName?: string;
  /**
   * The job step id.
   */
  readonly stepId?: number;
  /**
   * The unique identifier of the job execution.
   */
  readonly jobExecutionId?: string;
  /**
   * The detailed state of the job execution. Possible values include: 'Created', 'InProgress',
   * 'WaitingForChildJobExecutions', 'WaitingForRetry', 'Succeeded', 'SucceededWithSkipped',
   * 'Failed', 'TimedOut', 'Canceled', 'Skipped'
   */
  readonly lifecycle?: string;
  /**
   * The ARM provisioning state of the job execution. Possible values include: 'Created',
   * 'InProgress', 'Succeeded', 'Failed', 'Canceled'
   */
  readonly provisioningState?: string;
  /**
   * The time that the job execution was created.
   */
  readonly createTime?: Date;
  /**
   * The time that the job execution started.
   */
  readonly startTime?: Date;
  /**
   * The time that the job execution completed.
   */
  readonly endTime?: Date;
  /**
   * Number of times the job execution has been attempted.
   */
  currentAttempts?: number;
  /**
   * Start time of the current attempt.
   */
  readonly currentAttemptStartTime?: Date;
  /**
   * The last status or error message.
   */
  readonly lastMessage?: string;
  /**
   * The target that this execution is executed on.
   */
  readonly target?: JobExecutionTarget;
}

/**
 * Scheduling properties of a job.
 */
export interface JobSchedule {
  /**
   * Schedule start time.
   */
  startTime?: Date;
  /**
   * Schedule end time.
   */
  endTime?: Date;
  /**
   * Schedule interval type. Possible values include: 'Once', 'Recurring'
   */
  type?: string;
  /**
   * Whether or not the schedule is enabled.
   */
  enabled?: boolean;
  /**
   * Value of the schedule's recurring interval, if the schedule type is recurring. ISO8601
   * duration format.
   */
  interval?: string;
}

/**
 * A job.
 */
export interface Job extends ProxyResource {
  /**
   * User-defined description of the job.
   */
  description?: string;
  /**
   * The job version number.
   */
  readonly version?: number;
  /**
   * Schedule properties of the job.
   */
  schedule?: JobSchedule;
}

/**
 * The action to be executed by a job step.
 */
export interface JobStepAction {
  /**
   * Type of action being executed by the job step. Possible values include: 'TSql'
   */
  type?: string;
  /**
   * The source of the action to execute. Possible values include: 'Inline'
   */
  source?: string;
  /**
   * The action value, for example the text of the T-SQL script to execute.
   */
  value: string;
}

/**
 * The output configuration of a job step.
 */
export interface JobStepOutput {
  /**
   * The output destination type. Possible values include: 'SqlDatabase'
   */
  type?: string;
  /**
   * The output destination subscription id.
   */
  subscriptionId?: string;
  /**
   * The output destination resource group.
   */
  resourceGroupName?: string;
  /**
   * The output destination server name.
   */
  serverName: string;
  /**
   * The output destination database.
   */
  databaseName: string;
  /**
   * The output destination schema.
   */
  schemaName?: string;
  /**
   * The output destination table.
   */
  tableName: string;
  /**
   * The resource ID of the credential to use to connect to the output destination.
   */
  credential: string;
}

/**
 * The execution options of a job step.
 */
export interface JobStepExecutionOptions {
  /**
   * Execution timeout for the job step.
   */
  timeoutSeconds?: number;
  /**
   * Maximum number of times the job step will be reattempted if the first attempt fails.
   */
  retryAttempts?: number;
  /**
   * Initial delay between retries for job step execution.
   */
  initialRetryIntervalSeconds?: number;
  /**
   * The maximum amount of time to wait between retries for job step execution.
   */
  maximumRetryIntervalSeconds?: number;
  /**
   * The backoff multiplier for the time between retries.
   */
  retryIntervalBackoffMultiplier?: number;
}

/**
 * A job step.
 */
export interface JobStep extends ProxyResource {
  /**
   * The job step's index within the job. If not specified when creating the job step, it will be
   * created as the last step. If not specified when updating the job step, the step id is not
   * modified.
   */
  stepId?: number;
  /**
   * The resource ID of the target group that the job step will be executed on.
   */
  targetGroup: string;
  /**
   * The resource ID of the job credential that will be used to connect to the targets.
   */
  credential: string;
  /**
   * The action payload of the job step.
   */
  action: JobStepAction;
  /**
   * Output destination properties of the job step.
   */
  output?: JobStepOutput;
  /**
   * Execution options for the job step.
   */
  executionOptions?: JobStepExecutionOptions;
}

/**
 * A job target, for example a specific database or a container of databases that is evaluated
 * during job execution.
 */
export interface JobTarget {
  /**
   * Whether the target is included or excluded from the group. Possible values include: 'Include',
   * 'Exclude'
   */
  membershipType?: string;
  /**
   * The target type. Possible values include: 'TargetGroup', 'SqlDatabase', 'SqlElasticPool',
   * 'SqlShardMap', 'SqlServer'
   */
  type: string;
  /**
   * The target server name.
   */
  serverName?: string;
  /**
   * The target database name.
   */
  databaseName?: string;
  /**
   * The target elastic pool name.
   */
  elasticPoolName?: string;
  /**
   * The target shard map.
   */
  shardMapName?: string;
  /**
   * The resource ID of the credential that is used during job execution to connect to the target
   * and determine the list of databases inside the target.
   */
  refreshCredential?: string;
}

/**
 * A group of job targets.
 */
export interface JobTargetGroup extends ProxyResource {
  /**
   * Members of the target group.
   */
  members: JobTarget[];
}

/**
 * A job version.
 */
export interface JobVersion extends ProxyResource {
}

/**
 * A long term retention backup.
 */
export interface LongTermRetentionBackup extends ProxyResource {
  /**
   * The server name that the backup database belong to.
   */
  readonly serverName?: string;
  /**
   * The create time of the server.
   */
  readonly serverCreateTime?: Date;
  /**
   * The name of the database the backup belong to
   */
  readonly databaseName?: string;
  /**
   * The delete time of the database
   */
  readonly databaseDeletionTime?: Date;
  /**
   * The time the backup was taken
   */
  readonly backupTime?: Date;
  /**
   * The time the long term retention backup will expire.
   */
  readonly backupExpirationTime?: Date;
}

/**
 * A long term retention policy.
 */
export interface BackupLongTermRetentionPolicy extends ProxyResource {
  /**
   * The weekly retention policy for an LTR backup in an ISO 8601 format.
   */
  weeklyRetention?: string;
  /**
   * The monthly retention policy for an LTR backup in an ISO 8601 format.
   */
  monthlyRetention?: string;
  /**
   * The yearly retention policy for an LTR backup in an ISO 8601 format.
   */
  yearlyRetention?: string;
  /**
   * The week of year to take the yearly backup in an ISO 8601 format.
   */
  weekOfYear?: number;
}

/**
 * A short term retention policy.
 */
export interface ManagedBackupShortTermRetentionPolicy extends ProxyResource {
  /**
   * The backup retention period in days. This is how many days Point-in-Time Restore will be
   * supported.
   */
  retentionDays?: number;
}

/**
 * Contains the information necessary to perform a complete database restore operation.
 */
export interface CompleteDatabaseRestoreDefinition {
  /**
   * The last backup name to apply
   */
  lastBackupName: string;
}

/**
 * A managed database resource.
 */
export interface ManagedDatabase extends TrackedResource {
  /**
   * Collation of the managed database.
   */
  collation?: string;
  /**
   * Status of the database. Possible values include: 'Online', 'Offline', 'Shutdown', 'Creating',
   * 'Inaccessible', 'Updating'
   */
  readonly status?: string;
  /**
   * Creation date of the database.
   */
  readonly creationDate?: Date;
  /**
   * Earliest restore point in time for point in time restore.
   */
  readonly earliestRestorePoint?: Date;
  /**
   * Conditional. If createMode is PointInTimeRestore, this value is required. Specifies the point
   * in time (ISO8601 format) of the source database that will be restored to create the new
   * database.
   */
  restorePointInTime?: Date;
  /**
   * Geo paired region.
   */
  readonly defaultSecondaryLocation?: string;
  /**
   * Collation of the metadata catalog. Possible values include: 'DATABASE_DEFAULT',
   * 'SQL_Latin1_General_CP1_CI_AS'
   */
  catalogCollation?: string;
  /**
   * Managed database create mode. PointInTimeRestore: Create a database by restoring a point in
   * time backup of an existing database. SourceDatabaseName, SourceManagedInstanceName and
   * PointInTime must be specified. RestoreExternalBackup: Create a database by restoring from
   * external backup files. Collation, StorageContainerUri and StorageContainerSasToken must be
   * specified. Recovery: Creates a database by restoring a geo-replicated backup.
   * RecoverableDatabaseId must be specified as the recoverable database resource ID to restore.
   * Possible values include: 'Default', 'RestoreExternalBackup', 'PointInTimeRestore', 'Recovery'
   */
  createMode?: string;
  /**
   * Conditional. If createMode is RestoreExternalBackup, this value is required. Specifies the uri
   * of the storage container where backups for this restore are stored.
   */
  storageContainerUri?: string;
  /**
   * The resource identifier of the source database associated with create operation of this
   * database.
   */
  sourceDatabaseId?: string;
  /**
   * The restorable dropped database resource id to restore when creating this database.
   */
  restorableDroppedDatabaseId?: string;
  /**
   * Conditional. If createMode is RestoreExternalBackup, this value is required. Specifies the
   * storage container sas token.
   */
  storageContainerSasToken?: string;
  /**
   * Instance Failover Group resource identifier that this managed database belongs to.
   */
  readonly failoverGroupId?: string;
  /**
   * The resource identifier of the recoverable database associated with create operation of this
   * database.
   */
  recoverableDatabaseId?: string;
}

/**
 * An managed database update.
 */
export interface ManagedDatabaseUpdate {
  /**
   * Collation of the managed database.
   */
  collation?: string;
  /**
   * Status of the database. Possible values include: 'Online', 'Offline', 'Shutdown', 'Creating',
   * 'Inaccessible', 'Updating'
   */
  readonly status?: string;
  /**
   * Creation date of the database.
   */
  readonly creationDate?: Date;
  /**
   * Earliest restore point in time for point in time restore.
   */
  readonly earliestRestorePoint?: Date;
  /**
   * Conditional. If createMode is PointInTimeRestore, this value is required. Specifies the point
   * in time (ISO8601 format) of the source database that will be restored to create the new
   * database.
   */
  restorePointInTime?: Date;
  /**
   * Geo paired region.
   */
  readonly defaultSecondaryLocation?: string;
  /**
   * Collation of the metadata catalog. Possible values include: 'DATABASE_DEFAULT',
   * 'SQL_Latin1_General_CP1_CI_AS'
   */
  catalogCollation?: string;
  /**
   * Managed database create mode. PointInTimeRestore: Create a database by restoring a point in
   * time backup of an existing database. SourceDatabaseName, SourceManagedInstanceName and
   * PointInTime must be specified. RestoreExternalBackup: Create a database by restoring from
   * external backup files. Collation, StorageContainerUri and StorageContainerSasToken must be
   * specified. Recovery: Creates a database by restoring a geo-replicated backup.
   * RecoverableDatabaseId must be specified as the recoverable database resource ID to restore.
   * Possible values include: 'Default', 'RestoreExternalBackup', 'PointInTimeRestore', 'Recovery'
   */
  createMode?: string;
  /**
   * Conditional. If createMode is RestoreExternalBackup, this value is required. Specifies the uri
   * of the storage container where backups for this restore are stored.
   */
  storageContainerUri?: string;
  /**
   * The resource identifier of the source database associated with create operation of this
   * database.
   */
  sourceDatabaseId?: string;
  /**
   * The restorable dropped database resource id to restore when creating this database.
   */
  restorableDroppedDatabaseId?: string;
  /**
   * Conditional. If createMode is RestoreExternalBackup, this value is required. Specifies the
   * storage container sas token.
   */
  storageContainerSasToken?: string;
  /**
   * Instance Failover Group resource identifier that this managed database belongs to.
   */
  readonly failoverGroupId?: string;
  /**
   * The resource identifier of the recoverable database associated with create operation of this
   * database.
   */
  recoverableDatabaseId?: string;
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Automatic tuning properties for individual advisors.
 */
export interface AutomaticTuningServerOptions {
  /**
   * Automatic tuning option desired state. Possible values include: 'Off', 'On', 'Default'
   */
  desiredState?: string;
  /**
   * Automatic tuning option actual state. Possible values include: 'Off', 'On'
   */
  readonly actualState?: string;
  /**
   * Reason code if desired and actual state are different.
   */
  readonly reasonCode?: number;
  /**
   * Reason description if desired and actual state are different. Possible values include:
   * 'Default', 'Disabled', 'AutoConfigured'
   */
  readonly reasonDesc?: string;
}

/**
 * Server-level Automatic Tuning.
 */
export interface ServerAutomaticTuning extends ProxyResource {
  /**
   * Automatic tuning desired state. Possible values include: 'Custom', 'Auto', 'Unspecified'
   */
  desiredState?: string;
  /**
   * Automatic tuning actual state. Possible values include: 'Custom', 'Auto', 'Unspecified'
   */
  readonly actualState?: string;
  /**
   * Automatic tuning options definition.
   */
  options?: { [propertyName: string]: AutomaticTuningServerOptions };
}

/**
 * A server DNS alias.
 */
export interface ServerDnsAlias extends ProxyResource {
  /**
   * The fully qualified DNS record for alias
   */
  readonly azureDnsRecord?: string;
}

/**
 * A server DNS alias acquisition request.
 */
export interface ServerDnsAliasAcquisition {
  /**
   * The id of the server alias that will be acquired to point to this server instead.
   */
  oldServerDnsAliasId?: string;
}

/**
 * A server security alert policy.
 */
export interface ServerSecurityAlertPolicy extends ProxyResource {
  /**
   * Specifies the state of the policy, whether it is enabled or disabled. Possible values include:
   * 'New', 'Enabled', 'Disabled'
   */
  state: string;
  /**
   * Specifies an array of alerts that are disabled. Allowed values are: Sql_Injection,
   * Sql_Injection_Vulnerability, Access_Anomaly, Data_Exfiltration, Unsafe_Action
   */
  disabledAlerts?: string[];
  /**
   * Specifies an array of e-mail addresses to which the alert is sent.
   */
  emailAddresses?: string[];
  /**
   * Specifies that the alert is sent to the account administrators.
   */
  emailAccountAdmins?: boolean;
  /**
   * Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob
   * storage will hold all Threat Detection audit logs.
   */
  storageEndpoint?: string;
  /**
   * Specifies the identifier key of the Threat Detection audit storage account.
   */
  storageAccountAccessKey?: string;
  /**
   * Specifies the number of days to keep in the Threat Detection audit logs.
   */
  retentionDays?: number;
  /**
   * Specifies the UTC creation time of the policy.
   */
  readonly creationTime?: Date;
}

/**
 * A restorable dropped managed database resource.
 */
export interface RestorableDroppedManagedDatabase extends TrackedResource {
  /**
   * The name of the database.
   */
  readonly databaseName?: string;
  /**
   * The creation date of the database (ISO8601 format).
   */
  readonly creationDate?: Date;
  /**
   * The deletion date of the database (ISO8601 format).
   */
  readonly deletionDate?: Date;
  /**
   * The earliest restore date of the database (ISO8601 format).
   */
  readonly earliestRestoreDate?: Date;
}

/**
 * Database restore points.
 */
export interface RestorePoint extends ProxyResource {
  /**
   * Resource location.
   */
  readonly location?: string;
  /**
   * The type of restore point. Possible values include: 'CONTINUOUS', 'DISCRETE'
   */
  readonly restorePointType?: string;
  /**
   * The earliest time to which this database can be restored
   */
  readonly earliestRestoreDate?: Date;
  /**
   * The time the backup was taken
   */
  readonly restorePointCreationDate?: Date;
  /**
   * The label of restore point for backup request by user
   */
  readonly restorePointLabel?: string;
}

/**
 * Contains the information necessary to perform a create database restore point operation.
 */
export interface CreateDatabaseRestorePointDefinition {
  /**
   * The restore point label to apply
   */
  restorePointLabel: string;
}

/**
 * A managed database security alert policy.
 */
export interface ManagedDatabaseSecurityAlertPolicy extends ProxyResource {
  /**
   * Specifies the state of the policy, whether it is enabled or disabled. Possible values include:
   * 'New', 'Enabled', 'Disabled'
   */
  state: string;
  /**
   * Specifies an array of alerts that are disabled. Allowed values are: Sql_Injection,
   * Sql_Injection_Vulnerability, Access_Anomaly, Data_Exfiltration, Unsafe_Action
   */
  disabledAlerts?: string[];
  /**
   * Specifies an array of e-mail addresses to which the alert is sent.
   */
  emailAddresses?: string[];
  /**
   * Specifies that the alert is sent to the account administrators.
   */
  emailAccountAdmins?: boolean;
  /**
   * Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob
   * storage will hold all Threat Detection audit logs.
   */
  storageEndpoint?: string;
  /**
   * Specifies the identifier key of the Threat Detection audit storage account.
   */
  storageAccountAccessKey?: string;
  /**
   * Specifies the number of days to keep in the Threat Detection audit logs.
   */
  retentionDays?: number;
  /**
   * Specifies the UTC creation time of the policy.
   */
  readonly creationTime?: Date;
}

/**
 * A managed server security alert policy.
 */
export interface ManagedServerSecurityAlertPolicy extends ProxyResource {
  /**
   * Specifies the state of the policy, whether it is enabled or disabled. Possible values include:
   * 'New', 'Enabled', 'Disabled'
   */
  state: string;
  /**
   * Specifies an array of alerts that are disabled. Allowed values are: Sql_Injection,
   * Sql_Injection_Vulnerability, Access_Anomaly, Data_Exfiltration, Unsafe_Action
   */
  disabledAlerts?: string[];
  /**
   * Specifies an array of e-mail addresses to which the alert is sent.
   */
  emailAddresses?: string[];
  /**
   * Specifies that the alert is sent to the account administrators.
   */
  emailAccountAdmins?: boolean;
  /**
   * Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob
   * storage will hold all Threat Detection audit logs.
   */
  storageEndpoint?: string;
  /**
   * Specifies the identifier key of the Threat Detection audit storage account.
   */
  storageAccountAccessKey?: string;
  /**
   * Specifies the number of days to keep in the Threat Detection audit logs.
   */
  retentionDays?: number;
  /**
   * Specifies the UTC creation time of the policy.
   */
  readonly creationTime?: Date;
}

/**
 * A sensitivity label.
 */
export interface SensitivityLabel extends ProxyResource {
  /**
   * The label name.
   */
  labelName?: string;
  /**
   * The label ID.
   */
  labelId?: string;
  /**
   * The information type.
   */
  informationType?: string;
  /**
   * The information type ID.
   */
  informationTypeId?: string;
}

/**
 * A database operation.
 */
export interface DatabaseOperation extends ProxyResource {
  /**
   * The name of the database the operation is being performed on.
   */
  readonly databaseName?: string;
  /**
   * The name of operation.
   */
  readonly operation?: string;
  /**
   * The friendly name of operation.
   */
  readonly operationFriendlyName?: string;
  /**
   * The percentage of the operation completed.
   */
  readonly percentComplete?: number;
  /**
   * The name of the server.
   */
  readonly serverName?: string;
  /**
   * The operation start time.
   */
  readonly startTime?: Date;
  /**
   * The operation state. Possible values include: 'Pending', 'InProgress', 'Succeeded', 'Failed',
   * 'CancelInProgress', 'Cancelled'
   */
  readonly state?: string;
  /**
   * The operation error code.
   */
  readonly errorCode?: number;
  /**
   * The operation error description.
   */
  readonly errorDescription?: string;
  /**
   * The operation error severity.
   */
  readonly errorSeverity?: number;
  /**
   * Whether or not the error is a user error.
   */
  readonly isUserError?: boolean;
  /**
   * The estimated completion time of the operation.
   */
  readonly estimatedCompletionTime?: Date;
  /**
   * The operation description.
   */
  readonly description?: string;
  /**
   * Whether the operation can be cancelled.
   */
  readonly isCancellable?: boolean;
}

/**
 * A elastic pool operation.
 */
export interface ElasticPoolOperation extends ProxyResource {
  /**
   * The name of the elastic pool the operation is being performed on.
   */
  readonly elasticPoolName?: string;
  /**
   * The name of operation.
   */
  readonly operation?: string;
  /**
   * The friendly name of operation.
   */
  readonly operationFriendlyName?: string;
  /**
   * The percentage of the operation completed.
   */
  readonly percentComplete?: number;
  /**
   * The name of the server.
   */
  readonly serverName?: string;
  /**
   * The operation start time.
   */
  readonly startTime?: Date;
  /**
   * The operation state.
   */
  readonly state?: string;
  /**
   * The operation error code.
   */
  readonly errorCode?: number;
  /**
   * The operation error description.
   */
  readonly errorDescription?: string;
  /**
   * The operation error severity.
   */
  readonly errorSeverity?: number;
  /**
   * Whether or not the error is a user error.
   */
  readonly isUserError?: boolean;
  /**
   * The estimated completion time of the operation.
   */
  readonly estimatedCompletionTime?: Date;
  /**
   * The operation description.
   */
  readonly description?: string;
  /**
   * Whether the operation can be cancelled.
   */
  readonly isCancellable?: boolean;
}

/**
 * The maximum size capability.
 */
export interface MaxSizeCapability {
  /**
   * The maximum size limit (see 'unit' for the units).
   */
  readonly limit?: number;
  /**
   * The units that the limit is expressed in. Possible values include: 'Megabytes', 'Gigabytes',
   * 'Terabytes', 'Petabytes'
   */
  readonly unit?: string;
}

/**
 * The log size capability.
 */
export interface LogSizeCapability {
  /**
   * The log size limit (see 'unit' for the units).
   */
  readonly limit?: number;
  /**
   * The units that the limit is expressed in. Possible values include: 'Megabytes', 'Gigabytes',
   * 'Terabytes', 'Petabytes', 'Percent'
   */
  readonly unit?: string;
}

/**
 * The maximum size range capability.
 */
export interface MaxSizeRangeCapability {
  /**
   * Minimum value.
   */
  readonly minValue?: MaxSizeCapability;
  /**
   * Maximum value.
   */
  readonly maxValue?: MaxSizeCapability;
  /**
   * Scale/step size for discrete values between the minimum value and the maximum value.
   */
  readonly scaleSize?: MaxSizeCapability;
  /**
   * Size of transaction log.
   */
  readonly logSize?: LogSizeCapability;
  /**
   * The status of the capability. Possible values include: 'Visible', 'Available', 'Default',
   * 'Disabled'
   */
  readonly status?: string;
  /**
   * The reason for the capability not being available.
   */
  reason?: string;
}

/**
 * The performance level capability.
 */
export interface PerformanceLevelCapability {
  /**
   * Performance level value.
   */
  readonly value?: number;
  /**
   * Unit type used to measure performance level. Possible values include: 'DTU', 'VCores'
   */
  readonly unit?: string;
}

/**
 * The license type capability
 */
export interface LicenseTypeCapability {
  /**
   * License type identifier.
   */
  readonly name?: string;
  /**
   * The status of the capability. Possible values include: 'Visible', 'Available', 'Default',
   * 'Disabled'
   */
  readonly status?: string;
  /**
   * The reason for the capability not being available.
   */
  reason?: string;
}

/**
 * The service objectives capability.
 */
export interface ServiceObjectiveCapability {
  /**
   * The unique ID of the service objective.
   */
  readonly id?: string;
  /**
   * The service objective name.
   */
  readonly name?: string;
  /**
   * The list of supported maximum database sizes.
   */
  readonly supportedMaxSizes?: MaxSizeRangeCapability[];
  /**
   * The performance level.
   */
  readonly performanceLevel?: PerformanceLevelCapability;
  /**
   * The sku.
   */
  readonly sku?: Sku;
  /**
   * List of supported license types.
   */
  readonly supportedLicenseTypes?: LicenseTypeCapability[];
  /**
   * The included (free) max size.
   */
  readonly includedMaxSize?: MaxSizeCapability;
  /**
   * The status of the capability. Possible values include: 'Visible', 'Available', 'Default',
   * 'Disabled'
   */
  readonly status?: string;
  /**
   * The reason for the capability not being available.
   */
  reason?: string;
}

/**
 * The edition capability.
 */
export interface EditionCapability {
  /**
   * The database edition name.
   */
  readonly name?: string;
  /**
   * The list of supported service objectives for the edition.
   */
  readonly supportedServiceLevelObjectives?: ServiceObjectiveCapability[];
  /**
   * Whether or not zone redundancy is supported for the edition.
   */
  readonly zoneRedundant?: boolean;
  /**
   * The status of the capability. Possible values include: 'Visible', 'Available', 'Default',
   * 'Disabled'
   */
  readonly status?: string;
  /**
   * The reason for the capability not being available.
   */
  reason?: string;
}

/**
 * The minimum per-database performance level capability.
 */
export interface ElasticPoolPerDatabaseMinPerformanceLevelCapability {
  /**
   * The minimum performance level per database.
   */
  readonly limit?: number;
  /**
   * Unit type used to measure performance level. Possible values include: 'DTU', 'VCores'
   */
  readonly unit?: string;
  /**
   * The status of the capability. Possible values include: 'Visible', 'Available', 'Default',
   * 'Disabled'
   */
  readonly status?: string;
  /**
   * The reason for the capability not being available.
   */
  reason?: string;
}

/**
 * The max per-database performance level capability.
 */
export interface ElasticPoolPerDatabaseMaxPerformanceLevelCapability {
  /**
   * The maximum performance level per database.
   */
  readonly limit?: number;
  /**
   * Unit type used to measure performance level. Possible values include: 'DTU', 'VCores'
   */
  readonly unit?: string;
  /**
   * The list of supported min database performance levels.
   */
  readonly supportedPerDatabaseMinPerformanceLevels?: ElasticPoolPerDatabaseMinPerformanceLevelCapability[];
  /**
   * The status of the capability. Possible values include: 'Visible', 'Available', 'Default',
   * 'Disabled'
   */
  readonly status?: string;
  /**
   * The reason for the capability not being available.
   */
  reason?: string;
}

/**
 * The Elastic Pool performance level capability.
 */
export interface ElasticPoolPerformanceLevelCapability {
  /**
   * The performance level for the pool.
   */
  readonly performanceLevel?: PerformanceLevelCapability;
  /**
   * The sku.
   */
  readonly sku?: Sku;
  /**
   * List of supported license types.
   */
  readonly supportedLicenseTypes?: LicenseTypeCapability[];
  /**
   * The maximum number of databases supported.
   */
  readonly maxDatabaseCount?: number;
  /**
   * The included (free) max size for this performance level.
   */
  readonly includedMaxSize?: MaxSizeCapability;
  /**
   * The list of supported max sizes.
   */
  readonly supportedMaxSizes?: MaxSizeRangeCapability[];
  /**
   * The list of supported per database max sizes.
   */
  readonly supportedPerDatabaseMaxSizes?: MaxSizeRangeCapability[];
  /**
   * The list of supported per database max performance levels.
   */
  readonly supportedPerDatabaseMaxPerformanceLevels?: ElasticPoolPerDatabaseMaxPerformanceLevelCapability[];
  /**
   * The status of the capability. Possible values include: 'Visible', 'Available', 'Default',
   * 'Disabled'
   */
  readonly status?: string;
  /**
   * The reason for the capability not being available.
   */
  reason?: string;
}

/**
 * The elastic pool edition capability.
 */
export interface ElasticPoolEditionCapability {
  /**
   * The elastic pool edition name.
   */
  readonly name?: string;
  /**
   * The list of supported elastic pool DTU levels for the edition.
   */
  readonly supportedElasticPoolPerformanceLevels?: ElasticPoolPerformanceLevelCapability[];
  /**
   * Whether or not zone redundancy is supported for the edition.
   */
  readonly zoneRedundant?: boolean;
  /**
   * The status of the capability. Possible values include: 'Visible', 'Available', 'Default',
   * 'Disabled'
   */
  readonly status?: string;
  /**
   * The reason for the capability not being available.
   */
  reason?: string;
}

/**
 * The server capability
 */
export interface ServerVersionCapability {
  /**
   * The server version name.
   */
  readonly name?: string;
  /**
   * The list of supported database editions.
   */
  readonly supportedEditions?: EditionCapability[];
  /**
   * The list of supported elastic pool editions.
   */
  readonly supportedElasticPoolEditions?: ElasticPoolEditionCapability[];
  /**
   * The status of the capability. Possible values include: 'Visible', 'Available', 'Default',
   * 'Disabled'
   */
  readonly status?: string;
  /**
   * The reason for the capability not being available.
   */
  reason?: string;
}

/**
 * The managed instance virtual cores capability.
 */
export interface ManagedInstanceVcoresCapability {
  /**
   * The virtual cores identifier.
   */
  readonly name?: string;
  /**
   * The virtual cores value.
   */
  readonly value?: number;
  /**
   * The status of the capability. Possible values include: 'Visible', 'Available', 'Default',
   * 'Disabled'
   */
  readonly status?: string;
  /**
   * The reason for the capability not being available.
   */
  reason?: string;
}

/**
 * The managed server family capability.
 */
export interface ManagedInstanceFamilyCapability {
  /**
   * Family name.
   */
  readonly name?: string;
  /**
   * SKU name.
   */
  readonly sku?: string;
  /**
   * List of supported license types.
   */
  readonly supportedLicenseTypes?: LicenseTypeCapability[];
  /**
   * List of supported virtual cores values.
   */
  readonly supportedVcoresValues?: ManagedInstanceVcoresCapability[];
  /**
   * Included size.
   */
  readonly includedMaxSize?: MaxSizeCapability;
  /**
   * Storage size ranges.
   */
  readonly supportedStorageSizes?: MaxSizeRangeCapability[];
  /**
   * The status of the capability. Possible values include: 'Visible', 'Available', 'Default',
   * 'Disabled'
   */
  readonly status?: string;
  /**
   * The reason for the capability not being available.
   */
  reason?: string;
}

/**
 * The managed server capability
 */
export interface ManagedInstanceEditionCapability {
  /**
   * The managed server version name.
   */
  readonly name?: string;
  /**
   * The supported families.
   */
  readonly supportedFamilies?: ManagedInstanceFamilyCapability[];
  /**
   * The status of the capability. Possible values include: 'Visible', 'Available', 'Default',
   * 'Disabled'
   */
  readonly status?: string;
  /**
   * The reason for the capability not being available.
   */
  reason?: string;
}

/**
 * The managed instance capability
 */
export interface ManagedInstanceVersionCapability {
  /**
   * The server version name.
   */
  readonly name?: string;
  /**
   * The list of supported managed instance editions.
   */
  readonly supportedEditions?: ManagedInstanceEditionCapability[];
  /**
   * The status of the capability. Possible values include: 'Visible', 'Available', 'Default',
   * 'Disabled'
   */
  readonly status?: string;
  /**
   * The reason for the capability not being available.
   */
  reason?: string;
}

/**
 * The location capability.
 */
export interface LocationCapabilities {
  /**
   * The location name.
   */
  readonly name?: string;
  /**
   * The list of supported server versions.
   */
  readonly supportedServerVersions?: ServerVersionCapability[];
  /**
   * The list of supported managed instance versions.
   */
  readonly supportedManagedInstanceVersions?: ManagedInstanceVersionCapability[];
  /**
   * The status of the capability. Possible values include: 'Visible', 'Available', 'Default',
   * 'Disabled'
   */
  readonly status?: string;
  /**
   * The reason for the capability not being available.
   */
  reason?: string;
}

/**
 * A database resource.
 */
export interface Database extends TrackedResource {
  /**
   * The name and tier of the SKU.
   */
  sku?: Sku;
  /**
   * Kind of database. This is metadata used for the Azure portal experience.
   */
  readonly kind?: string;
  /**
   * Resource that manages the database.
   */
  readonly managedBy?: string;
  /**
   * Specifies the mode of database creation.
   *
   * Default: regular database creation.
   *
   * Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified
   * as the resource ID of the source database.
   *
   * Secondary: creates a database as a secondary replica of an existing database. sourceDatabaseId
   * must be specified as the resource ID of the existing primary database.
   *
   * PointInTimeRestore: Creates a database by restoring a point in time backup of an existing
   * database. sourceDatabaseId must be specified as the resource ID of the existing database, and
   * restorePointInTime must be specified.
   *
   * Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be
   * specified as the recoverable database resource ID to restore.
   *
   * Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must
   * be specified. If sourceDatabaseId is the database's original resource ID, then
   * sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the
   * restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored.
   * restorePointInTime may also be specified to restore from an earlier point in time.
   *
   * RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention
   * vault. recoveryServicesRecoveryPointResourceId must be specified as the recovery point
   * resource ID.
   *
   * Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for DataWarehouse
   * edition. Possible values include: 'Default', 'Copy', 'Secondary', 'PointInTimeRestore',
   * 'Restore', 'Recovery', 'RestoreExternalBackup', 'RestoreExternalBackupSecondary',
   * 'RestoreLongTermRetentionBackup', 'OnlineSecondary'
   */
  createMode?: string;
  /**
   * The collation of the database.
   */
  collation?: string;
  /**
   * The max size of the database expressed in bytes.
   */
  maxSizeBytes?: number;
  /**
   * The name of the sample schema to apply when creating this database. Possible values include:
   * 'AdventureWorksLT', 'WideWorldImportersStd', 'WideWorldImportersFull'
   */
  sampleName?: string;
  /**
   * The resource identifier of the elastic pool containing this database.
   */
  elasticPoolId?: string;
  /**
   * The resource identifier of the source database associated with create operation of this
   * database.
   */
  sourceDatabaseId?: string;
  /**
   * The status of the database. Possible values include: 'Online', 'Restoring', 'RecoveryPending',
   * 'Recovering', 'Suspect', 'Offline', 'Standby', 'Shutdown', 'EmergencyMode', 'AutoClosed',
   * 'Copying', 'Creating', 'Inaccessible', 'OfflineSecondary', 'Pausing', 'Paused', 'Resuming',
   * 'Scaling'
   */
  readonly status?: string;
  /**
   * The ID of the database.
   */
  readonly databaseId?: string;
  /**
   * The creation date of the database (ISO8601 format).
   */
  readonly creationDate?: Date;
  /**
   * The current service level objective name of the database.
   */
  readonly currentServiceObjectiveName?: string;
  /**
   * The requested service level objective name of the database.
   */
  readonly requestedServiceObjectiveName?: string;
  /**
   * The default secondary region for this database.
   */
  readonly defaultSecondaryLocation?: string;
  /**
   * Failover Group resource identifier that this database belongs to.
   */
  readonly failoverGroupId?: string;
  /**
   * Specifies the point in time (ISO8601 format) of the source database that will be restored to
   * create the new database.
   */
  restorePointInTime?: Date;
  /**
   * Specifies the time that the database was deleted.
   */
  sourceDatabaseDeletionDate?: Date;
  /**
   * The resource identifier of the recovery point associated with create operation of this
   * database.
   */
  recoveryServicesRecoveryPointId?: string;
  /**
   * The resource identifier of the long term retention backup associated with create operation of
   * this database.
   */
  longTermRetentionBackupResourceId?: string;
  /**
   * The resource identifier of the recoverable database associated with create operation of this
   * database.
   */
  recoverableDatabaseId?: string;
  /**
   * The resource identifier of the restorable dropped database associated with create operation of
   * this database.
   */
  restorableDroppedDatabaseId?: string;
  /**
   * Collation of the metadata catalog. Possible values include: 'DATABASE_DEFAULT',
   * 'SQL_Latin1_General_CP1_CI_AS'
   */
  catalogCollation?: string;
  /**
   * Whether or not this database is zone redundant, which means the replicas of this database will
   * be spread across multiple availability zones.
   */
  zoneRedundant?: boolean;
  /**
   * The license type to apply for this database. Possible values include: 'LicenseIncluded',
   * 'BasePrice'
   */
  licenseType?: string;
  /**
   * The max log size for this database.
   */
  readonly maxLogSizeBytes?: number;
  /**
   * This records the earliest start date and time that restore is available for this database
   * (ISO8601 format).
   */
  readonly earliestRestoreDate?: Date;
  /**
   * The state of read-only routing. If enabled, connections that have application intent set to
   * readonly in their connection string may be routed to a readonly secondary replica in the same
   * region. Possible values include: 'Enabled', 'Disabled'
   */
  readScale?: string;
  /**
   * The name and tier of the SKU.
   */
  readonly currentSku?: Sku;
}

/**
 * A database resource.
 */
export interface DatabaseUpdate {
  /**
   * The name and tier of the SKU.
   */
  sku?: Sku;
  /**
   * Specifies the mode of database creation.
   *
   * Default: regular database creation.
   *
   * Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified
   * as the resource ID of the source database.
   *
   * Secondary: creates a database as a secondary replica of an existing database. sourceDatabaseId
   * must be specified as the resource ID of the existing primary database.
   *
   * PointInTimeRestore: Creates a database by restoring a point in time backup of an existing
   * database. sourceDatabaseId must be specified as the resource ID of the existing database, and
   * restorePointInTime must be specified.
   *
   * Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be
   * specified as the recoverable database resource ID to restore.
   *
   * Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must
   * be specified. If sourceDatabaseId is the database's original resource ID, then
   * sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the
   * restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored.
   * restorePointInTime may also be specified to restore from an earlier point in time.
   *
   * RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention
   * vault. recoveryServicesRecoveryPointResourceId must be specified as the recovery point
   * resource ID.
   *
   * Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for DataWarehouse
   * edition. Possible values include: 'Default', 'Copy', 'Secondary', 'PointInTimeRestore',
   * 'Restore', 'Recovery', 'RestoreExternalBackup', 'RestoreExternalBackupSecondary',
   * 'RestoreLongTermRetentionBackup', 'OnlineSecondary'
   */
  createMode?: string;
  /**
   * The collation of the database.
   */
  collation?: string;
  /**
   * The max size of the database expressed in bytes.
   */
  maxSizeBytes?: number;
  /**
   * The name of the sample schema to apply when creating this database. Possible values include:
   * 'AdventureWorksLT', 'WideWorldImportersStd', 'WideWorldImportersFull'
   */
  sampleName?: string;
  /**
   * The resource identifier of the elastic pool containing this database.
   */
  elasticPoolId?: string;
  /**
   * The resource identifier of the source database associated with create operation of this
   * database.
   */
  sourceDatabaseId?: string;
  /**
   * The status of the database. Possible values include: 'Online', 'Restoring', 'RecoveryPending',
   * 'Recovering', 'Suspect', 'Offline', 'Standby', 'Shutdown', 'EmergencyMode', 'AutoClosed',
   * 'Copying', 'Creating', 'Inaccessible', 'OfflineSecondary', 'Pausing', 'Paused', 'Resuming',
   * 'Scaling'
   */
  readonly status?: string;
  /**
   * The ID of the database.
   */
  readonly databaseId?: string;
  /**
   * The creation date of the database (ISO8601 format).
   */
  readonly creationDate?: Date;
  /**
   * The current service level objective name of the database.
   */
  readonly currentServiceObjectiveName?: string;
  /**
   * The requested service level objective name of the database.
   */
  readonly requestedServiceObjectiveName?: string;
  /**
   * The default secondary region for this database.
   */
  readonly defaultSecondaryLocation?: string;
  /**
   * Failover Group resource identifier that this database belongs to.
   */
  readonly failoverGroupId?: string;
  /**
   * Specifies the point in time (ISO8601 format) of the source database that will be restored to
   * create the new database.
   */
  restorePointInTime?: Date;
  /**
   * Specifies the time that the database was deleted.
   */
  sourceDatabaseDeletionDate?: Date;
  /**
   * The resource identifier of the recovery point associated with create operation of this
   * database.
   */
  recoveryServicesRecoveryPointId?: string;
  /**
   * The resource identifier of the long term retention backup associated with create operation of
   * this database.
   */
  longTermRetentionBackupResourceId?: string;
  /**
   * The resource identifier of the recoverable database associated with create operation of this
   * database.
   */
  recoverableDatabaseId?: string;
  /**
   * The resource identifier of the restorable dropped database associated with create operation of
   * this database.
   */
  restorableDroppedDatabaseId?: string;
  /**
   * Collation of the metadata catalog. Possible values include: 'DATABASE_DEFAULT',
   * 'SQL_Latin1_General_CP1_CI_AS'
   */
  catalogCollation?: string;
  /**
   * Whether or not this database is zone redundant, which means the replicas of this database will
   * be spread across multiple availability zones.
   */
  zoneRedundant?: boolean;
  /**
   * The license type to apply for this database. Possible values include: 'LicenseIncluded',
   * 'BasePrice'
   */
  licenseType?: string;
  /**
   * The max log size for this database.
   */
  readonly maxLogSizeBytes?: number;
  /**
   * This records the earliest start date and time that restore is available for this database
   * (ISO8601 format).
   */
  readonly earliestRestoreDate?: Date;
  /**
   * The state of read-only routing. If enabled, connections that have application intent set to
   * readonly in their connection string may be routed to a readonly secondary replica in the same
   * region. Possible values include: 'Enabled', 'Disabled'
   */
  readScale?: string;
  /**
   * The name and tier of the SKU.
   */
  readonly currentSku?: Sku;
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Contains the information necessary to perform a resource move (rename).
 */
export interface ResourceMoveDefinition {
  /**
   * The target ID for the resource
   */
  id: string;
}

/**
 * Per database settings of an elastic pool.
 */
export interface ElasticPoolPerDatabaseSettings {
  /**
   * The minimum capacity all databases are guaranteed.
   */
  minCapacity?: number;
  /**
   * The maximum capacity any one database can consume.
   */
  maxCapacity?: number;
}

/**
 * An elastic pool.
 */
export interface ElasticPool extends TrackedResource {
  sku?: Sku;
  /**
   * Kind of elastic pool. This is metadata used for the Azure portal experience.
  */
  readonly kind?: string;
  /**
   * The state of the elastic pool. Possible values include: 'Creating', 'Ready', 'Disabled'
  */
  readonly state?: string;
  /**
   * The creation date of the elastic pool (ISO8601 format).
  */
  readonly creationDate?: Date;
  /**
   * The storage limit for the database elastic pool in bytes.
  */
  maxSizeBytes?: number;
  /**
   * The per database settings for the elastic pool.
  */
  perDatabaseSettings?: ElasticPoolPerDatabaseSettings;
  /**
   * Whether or not this elastic pool is zone redundant, which means the replicas of this elastic
   * pool will be spread across multiple availability zones.
  */
  zoneRedundant?: boolean;
  /**
   * The license type to apply for this elastic pool. Possible values include: 'LicenseIncluded',
   * 'BasePrice'
  */
  licenseType?: string;
}

/**
 * An elastic pool update.
*/
export interface ElasticPoolUpdate {
  sku?: Sku;
  /**
   * The storage limit for the database elastic pool in bytes.
  */
  maxSizeBytes?: number;
  /**
   * The per database settings for the elastic pool.
  */
  perDatabaseSettings?: ElasticPoolPerDatabaseSettings;
  /**
   * Whether or not this elastic pool is zone redundant, which means the replicas of this elastic
   * pool will be spread across multiple availability zones.
  */
  zoneRedundant?: boolean;
  /**
   * The license type to apply for this elastic pool. Possible values include: 'LicenseIncluded',
   * 'BasePrice'
  */
  licenseType?: string;
  /**
   * Resource tags.
  */
  tags?: { [propertyName: string]: string };
}

/**
 * Properties of a vulnerability assessment scan error.
*/
export interface VulnerabilityAssessmentScanError {
  /**
   * The error code.
  */
  readonly code?: string;
  /**
   * The error message.
  */
  readonly message?: string;
}

/**
 * A vulnerability assessment scan record.
*/
export interface VulnerabilityAssessmentScanRecord extends ProxyResource {
  /**
   * The scan ID.
  */
  readonly scanId?: string;
  /**
   * The scan trigger type. Possible values include: 'OnDemand', 'Recurring'
  */
  readonly triggerType?: string;
  /**
   * The scan status. Possible values include: 'Passed', 'Failed', 'FailedToRun', 'InProgress'
  */
  readonly state?: string;
  /**
   * The scan start time (UTC).
  */
  readonly startTime?: Date;
  /**
   * The scan end time (UTC).
  */
  readonly endTime?: Date;
  /**
   * The scan errors.
  */
  readonly errors?: VulnerabilityAssessmentScanError[];
  /**
   * The scan results storage container path.
  */
  readonly storageContainerPath?: string;
  /**
   * The number of failed security checks.
  */
  readonly numberOfFailedSecurityChecks?: number;
}

/**
 * A database Vulnerability Assessment scan export resource.
*/
export interface DatabaseVulnerabilityAssessmentScansExport extends ProxyResource {
  /**
   * Location of the exported report (e.g.
   * https://myStorage.blob.core.windows.net/VaScans/scans/serverName/databaseName/scan_scanId.xlsx).
  */
  readonly exportedReportLocation?: string;
}

/**
 * Read-write endpoint of the failover group instance.
*/
export interface InstanceFailoverGroupReadWriteEndpoint {
  /**
   * Failover policy of the read-write endpoint for the failover group. If failoverPolicy is
   * Automatic then failoverWithDataLossGracePeriodMinutes is required. Possible values include:
   * 'Manual', 'Automatic'
  */
  failoverPolicy: string;
  /**
   * Grace period before failover with data loss is attempted for the read-write endpoint. If
   * failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required.
  */
  failoverWithDataLossGracePeriodMinutes?: number;
}

/**
 * Read-only endpoint of the failover group instance.
*/
export interface InstanceFailoverGroupReadOnlyEndpoint {
  /**
   * Failover policy of the read-only endpoint for the failover group. Possible values include:
   * 'Disabled', 'Enabled'
  */
  failoverPolicy?: string;
}

/**
 * Partner region information for the failover group.
*/
export interface PartnerRegionInfo {
  /**
   * Geo location of the partner managed instances.
  */
  location?: string;
  /**
   * Replication role of the partner managed instances. Possible values include: 'Primary',
   * 'Secondary'
  */
  readonly replicationRole?: string;
}

/**
 * Pairs of Managed Instances in the failover group.
*/
export interface ManagedInstancePairInfo {
  /**
   * Id of Primary Managed Instance in pair.
  */
  primaryManagedInstanceId?: string;
  /**
   * Id of Partner Managed Instance in pair.
  */
  partnerManagedInstanceId?: string;
}

/**
 * An instance failover group.
*/
export interface InstanceFailoverGroup extends ProxyResource {
  /**
   * Read-write endpoint of the failover group instance.
  */
  readWriteEndpoint: InstanceFailoverGroupReadWriteEndpoint;
  /**
   * Read-only endpoint of the failover group instance.
  */
  readOnlyEndpoint?: InstanceFailoverGroupReadOnlyEndpoint;
  /**
   * Local replication role of the failover group instance. Possible values include: 'Primary',
   * 'Secondary'
  */
  readonly replicationRole?: string;
  /**
   * Replication state of the failover group instance.
  */
  readonly replicationState?: string;
  /**
   * Partner region information for the failover group.
  */
  partnerRegions: PartnerRegionInfo[];
  /**
   * List of managed instance pairs in the failover group.
  */
  managedInstancePairs: ManagedInstancePairInfo[];
}

/**
 * A short term retention policy.
*/
export interface BackupShortTermRetentionPolicy extends ProxyResource {
  /**
   * The backup retention period in days. This is how many days Point-in-Time Restore will be
   * supported.
  */
  retentionDays?: number;
}

/**
 * A TDE certificate that can be uploaded into a server.
*/
export interface TdeCertificate extends ProxyResource {
  /**
   * The base64 encoded certificate private blob.
  */
  privateBlob: string;
  /**
   * The certificate password.
  */
  certPassword?: string;
}

/**
 * A managed instance key.
*/
export interface ManagedInstanceKey extends ProxyResource {
  /**
   * Kind of encryption protector. This is metadata used for the Azure portal experience.
  */
  readonly kind?: string;
  /**
   * The key type like 'ServiceManaged', 'AzureKeyVault'. Possible values include:
   * 'ServiceManaged', 'AzureKeyVault'
  */
  serverKeyType: string;
  /**
   * The URI of the key. If the ServerKeyType is AzureKeyVault, then the URI is required.
  */
  uri?: string;
  /**
   * Thumbprint of the key.
  */
  readonly thumbprint?: string;
  /**
   * The key creation date.
  */
  readonly creationDate?: Date;
}

/**
 * The managed instance encryption protector.
*/
export interface ManagedInstanceEncryptionProtector extends ProxyResource {
  /**
   * Kind of encryption protector. This is metadata used for the Azure portal experience.
  */
  readonly kind?: string;
  /**
   * The name of the managed instance key.
  */
  serverKeyName?: string;
  /**
   * The encryption protector type like 'ServiceManaged', 'AzureKeyVault'. Possible values include:
   * 'ServiceManaged', 'AzureKeyVault'
  */
  serverKeyType: string;
  /**
   * The URI of the server key.
  */
  readonly uri?: string;
  /**
   * Thumbprint of the server key.
  */
  readonly thumbprint?: string;
}

/**
 * A recoverable managed database resource.
*/
export interface RecoverableManagedDatabase extends ProxyResource {
  /**
   * The last available backup date.
  */
  readonly lastAvailableBackupDate?: string;
}

/**
 * A managed instance vulnerability assessment.
*/
export interface ManagedInstanceVulnerabilityAssessment extends ProxyResource {
  /**
   * A blob storage container path to hold the scan results (e.g.
   * https://myStorage.blob.core.windows.net/VaScans/).
  */
  storageContainerPath: string;
  /**
   * A shared access signature (SAS Key) that has write access to the blob container specified in
   * 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't specified,
   * StorageContainerSasKey is required.
  */
  storageContainerSasKey?: string;
  /**
   * Specifies the identifier key of the storage account for vulnerability assessment scan results.
   * If 'StorageContainerSasKey' isn't specified, storageAccountAccessKey is required.
  */
  storageAccountAccessKey?: string;
  /**
   * The recurring scans settings
  */
  recurringScans?: VulnerabilityAssessmentRecurringScansProperties;
}

/**
 * A server vulnerability assessment.
*/
export interface ServerVulnerabilityAssessment extends ProxyResource {
  /**
   * A blob storage container path to hold the scan results (e.g.
   * https://myStorage.blob.core.windows.net/VaScans/).
  */
  storageContainerPath: string;
  /**
   * A shared access signature (SAS Key) that has write access to the blob container specified in
   * 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't specified,
   * StorageContainerSasKey is required.
  */
  storageContainerSasKey?: string;
  /**
   * Specifies the identifier key of the storage account for vulnerability assessment scan results.
   * If 'StorageContainerSasKey' isn't specified, storageAccountAccessKey is required.
  */
  storageAccountAccessKey?: string;
  /**
   * The recurring scans settings
  */
  recurringScans?: VulnerabilityAssessmentRecurringScansProperties;
}

/**
 * The response to a list recoverable databases request
*/
export interface RecoverableDatabaseListResult extends Array<RecoverableDatabase> {
}

/**
 * The response to a list restorable dropped databases request
*/
export interface RestorableDroppedDatabaseListResult extends Array<RestorableDroppedDatabase> {
}

/**
 * A list of servers.
*/
export interface ServerListResult extends Array<Server> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * The response to a list data masking rules request.
*/
export interface DataMaskingRuleListResult extends Array<DataMaskingRule> {
}

/**
 * Represents the response to a List Firewall Rules request.
*/
export interface FirewallRuleListResult extends Array<FirewallRule> {
}

/**
 * The response to a list geo backup policies request.
*/
export interface GeoBackupPolicyListResult extends Array<GeoBackupPolicy> {
}

/**
 * The response to a list database metrics request.
*/
export interface MetricListResult extends Array<Metric> {
}

/**
 * The response to a list database metric definitions request.
*/
export interface MetricDefinitionListResult extends Array<MetricDefinition> {
}

/**
 * A list of databases.
*/
export interface DatabaseListResult extends Array<Database> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * The result of an elastic pool list request.
*/
export interface ElasticPoolListResult extends Array<ElasticPool> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * Represents the response to a list recommended elastic pool request.
*/
export interface RecommendedElasticPoolListResult extends Array<RecommendedElasticPool> {
}

/**
 * Represents the response to a list recommended elastic pool metrics request.
*/
export interface RecommendedElasticPoolListMetricsResult extends
Array<RecommendedElasticPoolMetric> {
}

/**
 * Represents the response to a List database replication link request.
*/
export interface ReplicationLinkListResult extends Array<ReplicationLink> {
}

/**
 * The response to a list Active Directory Administrators request.
*/
export interface ServerAdministratorListResult extends Array<ServerAzureADAdministrator> {
}

/**
 * A list of server communication links.
*/
export interface ServerCommunicationLinkListResult extends Array<ServerCommunicationLink> {
}

/**
 * Represents the response to a get database service objectives request.
*/
export interface ServiceObjectiveListResult extends Array<ServiceObjective> {
}

/**
 * Represents the response to a list elastic pool activity request.
*/
export interface ElasticPoolActivityListResult extends Array<ElasticPoolActivity> {
}

/**
 * Represents the response to a list elastic pool database activity request.
*/
export interface ElasticPoolDatabaseActivityListResult extends Array<ElasticPoolDatabaseActivity> {
}

/**
 * Represents the response to a list service tier advisor request.
*/
export interface ServiceTierAdvisorListResult extends Array<ServiceTierAdvisor> {
}

/**
 * Represents the response to a list database transparent data encryption activity request.
*/
export interface TransparentDataEncryptionActivityListResult extends
Array<TransparentDataEncryptionActivity> {
}

/**
 * Represents the response to a list server metrics request.
*/
export interface ServerUsageListResult extends Array<ServerUsage> {
}

/**
 * The response to a list database metrics request.
*/
export interface DatabaseUsageListResult extends Array<DatabaseUsage> {
}

/**
 * A list of server encryption protectors.
*/
export interface EncryptionProtectorListResult extends Array<EncryptionProtector> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of failover groups.
*/
export interface FailoverGroupListResult extends Array<FailoverGroup> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of managed instances.
*/
export interface ManagedInstanceListResult extends Array<ManagedInstance> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * Result of the request to list SQL operations.
*/
export interface OperationListResult extends Array<Operation> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of server keys.
*/
export interface ServerKeyListResult extends Array<ServerKey> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of sync agents.
*/
export interface SyncAgentListResult extends Array<SyncAgent> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of sync agent linked databases.
*/
export interface SyncAgentLinkedDatabaseListResult extends Array<SyncAgentLinkedDatabase> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of sync database ID properties.
*/
export interface SyncDatabaseIdListResult extends Array<SyncDatabaseIdProperties> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of sync schema properties.
*/
export interface SyncFullSchemaPropertiesListResult extends Array<SyncFullSchemaProperties> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of sync group log properties.
*/
export interface SyncGroupLogListResult extends Array<SyncGroupLogProperties> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of sync groups.
*/
export interface SyncGroupListResult extends Array<SyncGroup> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of Azure SQL Database sync members.
*/
export interface SyncMemberListResult extends Array<SyncMember> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of subscription usage metrics in a location.
*/
export interface SubscriptionUsageListResult extends Array<SubscriptionUsage> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of virtual clusters.
*/
export interface VirtualClusterListResult extends Array<VirtualCluster> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of virtual network rules.
*/
export interface VirtualNetworkRuleListResult extends Array<VirtualNetworkRule> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of the database's vulnerability assessments.
*/
export interface DatabaseVulnerabilityAssessmentListResult extends
Array<DatabaseVulnerabilityAssessment> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of Azure SQL job agents.
*/
export interface JobAgentListResult extends Array<JobAgent> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of job credentials.
*/
export interface JobCredentialListResult extends Array<JobCredential> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of job executions.
*/
export interface JobExecutionListResult extends Array<JobExecution> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of jobs.
*/
export interface JobListResult extends Array<Job> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of job steps.
*/
export interface JobStepListResult extends Array<JobStep> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of target groups.
*/
export interface JobTargetGroupListResult extends Array<JobTargetGroup> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of job versions.
*/
export interface JobVersionListResult extends Array<JobVersion> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of long term retention backups.
*/
export interface LongTermRetentionBackupListResult extends Array<LongTermRetentionBackup> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of short term retention policies.
*/
export interface ManagedBackupShortTermRetentionPolicyListResult extends
Array<ManagedBackupShortTermRetentionPolicy> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of managed databases.
*/
export interface ManagedDatabaseListResult extends Array<ManagedDatabase> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of server DNS aliases.
*/
export interface ServerDnsAliasListResult extends Array<ServerDnsAlias> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of restorable dropped managed databases.
*/
export interface RestorableDroppedManagedDatabaseListResult extends
Array<RestorableDroppedManagedDatabase> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of long term retention backups.
*/
export interface RestorePointListResult extends Array<RestorePoint> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of sensitivity labels.
*/
export interface SensitivityLabelListResult extends Array<SensitivityLabel> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * The response to a list database operations request
*/
export interface DatabaseOperationListResult extends Array<DatabaseOperation> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * The response to a list elastic pool operations request
*/
export interface ElasticPoolOperationListResult extends Array<ElasticPoolOperation> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of vulnerability assessment scan records.
*/
export interface VulnerabilityAssessmentScanRecordListResult extends
Array<VulnerabilityAssessmentScanRecord> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of instance failover groups.
*/
export interface InstanceFailoverGroupListResult extends Array<InstanceFailoverGroup> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of short term retention policies.
*/
export interface BackupShortTermRetentionPolicyListResult extends
Array<BackupShortTermRetentionPolicy> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of managed instance keys.
*/
export interface ManagedInstanceKeyListResult extends Array<ManagedInstanceKey> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of managed instance encryption protectors.
*/
export interface ManagedInstanceEncryptionProtectorListResult extends
Array<ManagedInstanceEncryptionProtector> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of recoverable managed databases.
*/
export interface RecoverableManagedDatabaseListResult extends Array<RecoverableManagedDatabase> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of the ManagedInstance's vulnerability assessments.
*/
export interface ManagedInstanceVulnerabilityAssessmentListResult extends
Array<ManagedInstanceVulnerabilityAssessment> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}

/**
 * A list of the server's vulnerability assessments.
*/
export interface ServerVulnerabilityAssessmentListResult extends
Array<ServerVulnerabilityAssessment> {
  /**
   * Link to retrieve next page of results.
  */
  readonly nextLink?: string;
}
