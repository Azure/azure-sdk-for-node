/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * A database blob auditing policy.
 *
 * @extends models['ProxyResource']
 */
class DatabaseBlobAuditingPolicy extends models['ProxyResource'] {
  /**
   * Create a DatabaseBlobAuditingPolicy.
   * @member {string} [kind] Resource kind.
   * @member {string} state Specifies the state of the policy. If state is
   * Enabled, storageEndpoint and storageAccountAccessKey are required.
   * Possible values include: 'Enabled', 'Disabled'
   * @member {string} [storageEndpoint] Specifies the blob storage endpoint
   * (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled,
   * storageEndpoint is required.
   * @member {string} [storageAccountAccessKey] Specifies the identifier key of
   * the auditing storage account. If state is Enabled, storageAccountAccessKey
   * is required.
   * @member {number} [retentionDays] Specifies the number of days to keep in
   * the audit logs.
   * @member {array} [auditActionsAndGroups] Specifies the Actions and
   * Actions-Groups to audit.
   * @member {uuid} [storageAccountSubscriptionId] Specifies the blob storage
   * subscription Id.
   * @member {boolean} [isStorageSecondaryKeyInUse] Specifies whether
   * storageAccountAccessKey value is the storageâ€™s secondary key.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of DatabaseBlobAuditingPolicy
   *
   * @returns {object} metadata of DatabaseBlobAuditingPolicy
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DatabaseBlobAuditingPolicy',
      type: {
        name: 'Composite',
        className: 'DatabaseBlobAuditingPolicy',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          kind: {
            required: false,
            readOnly: true,
            serializedName: 'kind',
            type: {
              name: 'String'
            }
          },
          state: {
            required: true,
            serializedName: 'properties.state',
            type: {
              name: 'Enum',
              allowedValues: [ 'Enabled', 'Disabled' ]
            }
          },
          storageEndpoint: {
            required: false,
            serializedName: 'properties.storageEndpoint',
            type: {
              name: 'String'
            }
          },
          storageAccountAccessKey: {
            required: false,
            serializedName: 'properties.storageAccountAccessKey',
            type: {
              name: 'String'
            }
          },
          retentionDays: {
            required: false,
            serializedName: 'properties.retentionDays',
            type: {
              name: 'Number'
            }
          },
          auditActionsAndGroups: {
            required: false,
            serializedName: 'properties.auditActionsAndGroups',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          storageAccountSubscriptionId: {
            required: false,
            serializedName: 'properties.storageAccountSubscriptionId',
            type: {
              name: 'String'
            }
          },
          isStorageSecondaryKeyInUse: {
            required: false,
            serializedName: 'properties.isStorageSecondaryKeyInUse',
            type: {
              name: 'Boolean'
            }
          }
        }
      }
    };
  }
}

module.exports = DatabaseBlobAuditingPolicy;
