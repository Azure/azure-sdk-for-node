/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Represents a database update.
 *
 * @extends models['Resource']
 */
class DatabaseUpdate extends models['Resource'] {
  /**
   * Create a DatabaseUpdate.
   * @member {object} [tags] Resource tags.
   * @member {string} [collation] The collation of the database. If createMode
   * is not Default, this value is ignored.
   * @member {date} [creationDate] The creation date of the database (ISO8601
   * format).
   * @member {number} [containmentState] The containment state of the database.
   * @member {uuid} [currentServiceObjectiveId] The current service level
   * objective ID of the database. This is the ID of the service level
   * objective that is currently active.
   * @member {uuid} [databaseId] The ID of the database.
   * @member {date} [earliestRestoreDate] This records the earliest start date
   * and time that restore is available for this database (ISO8601 format).
   * @member {string} [createMode] Specifies the mode of database creation.
   *
   * Default: regular database creation.
   *
   * Copy: creates a database as a copy of an existing database.
   * sourceDatabaseId must be specified as the resource ID of the source
   * database.
   *
   * OnlineSecondary/NonReadableSecondary: creates a database as a (readable or
   * nonreadable) secondary replica of an existing database. sourceDatabaseId
   * must be specified as the resource ID of the existing primary database.
   *
   * PointInTimeRestore: Creates a database by restoring a point in time backup
   * of an existing database. sourceDatabaseId must be specified as the
   * resource ID of the existing database, and restorePointInTime must be
   * specified.
   *
   * Recovery: Creates a database by restoring a geo-replicated backup.
   * sourceDatabaseId must be specified as the recoverable database resource ID
   * to restore.
   *
   * Restore: Creates a database by restoring a backup of a deleted database.
   * sourceDatabaseId must be specified. If sourceDatabaseId is the database's
   * original resource ID, then sourceDatabaseDeletionDate must be specified.
   * Otherwise sourceDatabaseId must be the restorable dropped database
   * resource ID and sourceDatabaseDeletionDate is ignored. restorePointInTime
   * may also be specified to restore from an earlier point in time.
   *
   * RestoreLongTermRetentionBackup: Creates a database by restoring from a
   * long term retention vault. recoveryServicesRecoveryPointResourceId must be
   * specified as the recovery point resource ID.
   *
   * Copy, NonReadableSecondary, OnlineSecondary and
   * RestoreLongTermRetentionBackup are not supported for DataWarehouse
   * edition. Possible values include: 'Copy', 'Default',
   * 'NonReadableSecondary', 'OnlineSecondary', 'PointInTimeRestore',
   * 'Recovery', 'Restore', 'RestoreLongTermRetentionBackup'
   * @member {string} [sourceDatabaseId] Conditional. If createMode is Copy,
   * NonReadableSecondary, OnlineSecondary, PointInTimeRestore, Recovery, or
   * Restore, then this value is required. Specifies the resource ID of the
   * source database. If createMode is NonReadableSecondary or OnlineSecondary,
   * the name of the source database must be the same as the new database being
   * created.
   * @member {date} [sourceDatabaseDeletionDate] Conditional. If createMode is
   * Restore and sourceDatabaseId is the deleted database's original resource
   * id when it existed (as opposed to its current restorable dropped database
   * id), then this value is required. Specifies the time that the database was
   * deleted.
   * @member {date} [restorePointInTime] Conditional. If createMode is
   * PointInTimeRestore, this value is required. If createMode is Restore, this
   * value is optional. Specifies the point in time (ISO8601 format) of the
   * source database that will be restored to create the new database. Must be
   * greater than or equal to the source database's earliestRestoreDate value.
   * @member {string} [recoveryServicesRecoveryPointResourceId] Conditional. If
   * createMode is RestoreLongTermRetentionBackup, then this value is required.
   * Specifies the resource ID of the recovery point to restore from.
   * @member {string} [edition] The edition of the database. The
   * DatabaseEditions enumeration contains all the valid editions. If
   * createMode is NonReadableSecondary or OnlineSecondary, this value is
   * ignored. To see possible values, query the capabilities API
   * (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities)
   * referred to by operationId: "Capabilities_ListByLocation.". Possible
   * values include: 'Web', 'Business', 'Basic', 'Standard', 'Premium', 'Free',
   * 'Stretch', 'DataWarehouse', 'System', 'System2'
   * @member {string} [maxSizeBytes] The max size of the database expressed in
   * bytes. If createMode is not Default, this value is ignored. To see
   * possible values, query the capabilities API
   * (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities)
   * referred to by operationId: "Capabilities_ListByLocation."
   * @member {uuid} [requestedServiceObjectiveId] The configured service level
   * objective ID of the database. This is the service level objective that is
   * in the process of being applied to the database. Once successfully
   * updated, it will match the value of currentServiceObjectiveId property. If
   * requestedServiceObjectiveId and requestedServiceObjectiveName are both
   * updated, the value of requestedServiceObjectiveId overrides the value of
   * requestedServiceObjectiveName. To see possible values, query the
   * capabilities API
   * (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities)
   * referred to by operationId: "Capabilities_ListByLocation."
   * @member {string} [requestedServiceObjectiveName] The name of the
   * configured service level objective of the database. This is the service
   * level objective that is in the process of being applied to the database.
   * Once successfully updated, it will match the value of
   * serviceLevelObjective property. To see possible values, query the
   * capabilities API
   * (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities)
   * referred to by operationId: "Capabilities_ListByLocation.". Possible
   * values include: 'Basic', 'S0', 'S1', 'S2', 'S3', 'P1', 'P2', 'P3', 'P4',
   * 'P6', 'P11', 'P15', 'System', 'System2', 'ElasticPool'
   * @member {string} [serviceLevelObjective] The current service level
   * objective of the database. Possible values include: 'Basic', 'S0', 'S1',
   * 'S2', 'S3', 'P1', 'P2', 'P3', 'P4', 'P6', 'P11', 'P15', 'System',
   * 'System2', 'ElasticPool'
   * @member {string} [status] The status of the database.
   * @member {string} [elasticPoolName] The name of the elastic pool the
   * database is in. If elasticPoolName and requestedServiceObjectiveName are
   * both updated, the value of requestedServiceObjectiveName is ignored. Not
   * supported for DataWarehouse edition.
   * @member {string} [defaultSecondaryLocation] The default secondary region
   * for this database.
   * @member {array} [serviceTierAdvisors] The list of service tier advisors
   * for this database. Expanded property
   * @member {array} [transparentDataEncryption] The transparent data
   * encryption info for this database.
   * @member {array} [recommendedIndex] The recommended indices for this
   * database.
   * @member {string} [failoverGroupId] The resource identifier of the failover
   * group containing this database.
   * @member {string} [readScale] Conditional. If the database is a
   * geo-secondary, readScale indicates whether read-only connections are
   * allowed to this database or not. Not supported for DataWarehouse edition.
   * Possible values include: 'Enabled', 'Disabled'
   * @member {string} [sampleName] Indicates the name of the sample schema to
   * apply when creating this database. If createMode is not Default, this
   * value is ignored. Not supported for DataWarehouse edition. Possible values
   * include: 'AdventureWorksLT'
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of DatabaseUpdate
   *
   * @returns {object} metadata of DatabaseUpdate
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DatabaseUpdate',
      type: {
        name: 'Composite',
        className: 'DatabaseUpdate',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          collation: {
            required: false,
            serializedName: 'properties.collation',
            type: {
              name: 'String'
            }
          },
          creationDate: {
            required: false,
            readOnly: true,
            serializedName: 'properties.creationDate',
            type: {
              name: 'DateTime'
            }
          },
          containmentState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.containmentState',
            type: {
              name: 'Number'
            }
          },
          currentServiceObjectiveId: {
            required: false,
            readOnly: true,
            serializedName: 'properties.currentServiceObjectiveId',
            type: {
              name: 'String'
            }
          },
          databaseId: {
            required: false,
            readOnly: true,
            serializedName: 'properties.databaseId',
            type: {
              name: 'String'
            }
          },
          earliestRestoreDate: {
            required: false,
            readOnly: true,
            serializedName: 'properties.earliestRestoreDate',
            type: {
              name: 'DateTime'
            }
          },
          createMode: {
            required: false,
            serializedName: 'properties.createMode',
            type: {
              name: 'String'
            }
          },
          sourceDatabaseId: {
            required: false,
            serializedName: 'properties.sourceDatabaseId',
            type: {
              name: 'String'
            }
          },
          sourceDatabaseDeletionDate: {
            required: false,
            serializedName: 'properties.sourceDatabaseDeletionDate',
            type: {
              name: 'DateTime'
            }
          },
          restorePointInTime: {
            required: false,
            serializedName: 'properties.restorePointInTime',
            type: {
              name: 'DateTime'
            }
          },
          recoveryServicesRecoveryPointResourceId: {
            required: false,
            serializedName: 'properties.recoveryServicesRecoveryPointResourceId',
            type: {
              name: 'String'
            }
          },
          edition: {
            required: false,
            serializedName: 'properties.edition',
            type: {
              name: 'String'
            }
          },
          maxSizeBytes: {
            required: false,
            serializedName: 'properties.maxSizeBytes',
            type: {
              name: 'String'
            }
          },
          requestedServiceObjectiveId: {
            required: false,
            serializedName: 'properties.requestedServiceObjectiveId',
            type: {
              name: 'String'
            }
          },
          requestedServiceObjectiveName: {
            required: false,
            serializedName: 'properties.requestedServiceObjectiveName',
            type: {
              name: 'String'
            }
          },
          serviceLevelObjective: {
            required: false,
            readOnly: true,
            serializedName: 'properties.serviceLevelObjective',
            type: {
              name: 'String'
            }
          },
          status: {
            required: false,
            readOnly: true,
            serializedName: 'properties.status',
            type: {
              name: 'String'
            }
          },
          elasticPoolName: {
            required: false,
            serializedName: 'properties.elasticPoolName',
            type: {
              name: 'String'
            }
          },
          defaultSecondaryLocation: {
            required: false,
            readOnly: true,
            serializedName: 'properties.defaultSecondaryLocation',
            type: {
              name: 'String'
            }
          },
          serviceTierAdvisors: {
            required: false,
            readOnly: true,
            serializedName: 'properties.serviceTierAdvisors',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ServiceTierAdvisorElementType',
                  type: {
                    name: 'Composite',
                    className: 'ServiceTierAdvisor'
                  }
              }
            }
          },
          transparentDataEncryption: {
            required: false,
            readOnly: true,
            serializedName: 'properties.transparentDataEncryption',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'TransparentDataEncryptionElementType',
                  type: {
                    name: 'Composite',
                    className: 'TransparentDataEncryption'
                  }
              }
            }
          },
          recommendedIndex: {
            required: false,
            readOnly: true,
            serializedName: 'properties.recommendedIndex',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'RecommendedIndexElementType',
                  type: {
                    name: 'Composite',
                    className: 'RecommendedIndex'
                  }
              }
            }
          },
          failoverGroupId: {
            required: false,
            readOnly: true,
            serializedName: 'properties.failoverGroupId',
            type: {
              name: 'String'
            }
          },
          readScale: {
            required: false,
            serializedName: 'properties.readScale',
            type: {
              name: 'Enum',
              allowedValues: [ 'Enabled', 'Disabled' ]
            }
          },
          sampleName: {
            required: false,
            serializedName: 'properties.sampleName',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = DatabaseUpdate;
