/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Implements the Event class.
 *
 * @extends models['Resource']
 */
class Event extends models['Resource'] {
  /**
   * Create a Event.
   * @member {object} [properties] Event related data.
   * @member {string} [properties.eventCode] The Id of the monitoring event.
   * @member {string} [properties.description] The event name.
   * @member {string} [properties.eventType] The type of the event. for
   * example: VM Health, Server Health, Job Failure etc.
   * @member {string} [properties.affectedObjectFriendlyName] The friendly name
   * of the source of the event on which it is raised (for example, VM, VMM
   * etc).
   * @member {string} [properties.severity] The severity of the event.
   * @member {date} [properties.timeOfOccurrence] The time of occurence of the
   * event.
   * @member {string} [properties.fabricId] The ARM ID of the fabric.
   * @member {object} [properties.providerSpecificDetails] The provider
   * specific settings.
   * @member {string} [properties.providerSpecificDetails.instanceType]
   * Polymorphic Discriminator
   * @member {object} [properties.eventSpecificDetails] The event specific
   * settings.
   * @member {string} [properties.eventSpecificDetails.instanceType]
   * Polymorphic Discriminator
   * @member {array} [properties.healthErrors] The list of errors / warnings
   * capturing details associated with the issue(s).
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Event
   *
   * @returns {object} metadata of Event
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Event',
      type: {
        name: 'Composite',
        className: 'Event',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: false,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          properties: {
            required: false,
            serializedName: 'properties',
            type: {
              name: 'Composite',
              className: 'EventProperties'
            }
          }
        }
      }
    };
  }
}

module.exports = Event;
