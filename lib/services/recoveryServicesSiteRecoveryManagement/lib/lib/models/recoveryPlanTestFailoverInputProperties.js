/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Recovery plan test failover input properties.
 *
 */
class RecoveryPlanTestFailoverInputProperties {
  /**
   * Create a RecoveryPlanTestFailoverInputProperties.
   * @member {string} failoverDirection The failover direction. Possible values
   * include: 'PrimaryToRecovery', 'RecoveryToPrimary'
   * @member {string} networkType The network type to be used for test
   * failover.
   * @member {string} [networkId] The Id of the network to be used for test
   * failover.
   * @member {string} [skipTestFailoverCleanup] A value indicating whether the
   * test failover cleanup is to be skipped.
   * @member {array} [providerSpecificDetails] The provider specific
   * properties.
   */
  constructor() {
  }

  /**
   * Defines the metadata of RecoveryPlanTestFailoverInputProperties
   *
   * @returns {object} metadata of RecoveryPlanTestFailoverInputProperties
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'RecoveryPlanTestFailoverInputProperties',
      type: {
        name: 'Composite',
        className: 'RecoveryPlanTestFailoverInputProperties',
        modelProperties: {
          failoverDirection: {
            required: true,
            serializedName: 'failoverDirection',
            type: {
              name: 'Enum',
              allowedValues: [ 'PrimaryToRecovery', 'RecoveryToPrimary' ]
            }
          },
          networkType: {
            required: true,
            serializedName: 'networkType',
            type: {
              name: 'String'
            }
          },
          networkId: {
            required: false,
            serializedName: 'networkId',
            type: {
              name: 'String'
            }
          },
          skipTestFailoverCleanup: {
            required: false,
            serializedName: 'skipTestFailoverCleanup',
            type: {
              name: 'String'
            }
          },
          providerSpecificDetails: {
            required: false,
            serializedName: 'providerSpecificDetails',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'RecoveryPlanProviderSpecificFailoverInputElementType',
                  type: {
                    name: 'Composite',
                    polymorphicDiscriminator: {
                      serializedName: 'instanceType',
                      clientName: 'instanceType'
                    },
                    uberParent: 'RecoveryPlanProviderSpecificFailoverInput',
                    className: 'RecoveryPlanProviderSpecificFailoverInput'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = RecoveryPlanTestFailoverInputProperties;
