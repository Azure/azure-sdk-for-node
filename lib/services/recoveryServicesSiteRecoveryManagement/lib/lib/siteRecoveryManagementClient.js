/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const ServiceClient = msRestAzure.AzureServiceClient;

const models = require('./models');
const operations = require('./operations');


/** Class representing a SiteRecoveryManagementClient. */
class SiteRecoveryManagementClient extends ServiceClient {
  /**
   * Create a SiteRecoveryManagementClient.
   * @param {credentials} credentials - Credentials needed for the client to connect to Azure.
   * @param {string} subscriptionId - The subscription Id.
   * @param {string} resourceGroupName - The name of the resource group where the recovery services vault is present.
   * @param {string} resourceName - The name of the recovery services vault.
   * @param {string} [baseUri] - The base URI of the service.
   * @param {object} [options] - The parameter options
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   * @param {object} [options.requestOptions] - Options for the underlying request object
   * {@link https://github.com/request/request#requestoptions-callback Options doc}
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   * @param {string} [options.acceptLanguage] - Gets or sets the preferred language for the response.
   * @param {number} [options.longRunningOperationRetryTimeout] - Gets or sets the retry timeout in seconds for Long Running Operations. Default value is 30.
   * @param {boolean} [options.generateClientRequestId] - When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
   */
  constructor(credentials, subscriptionId, resourceGroupName, resourceName, baseUri, options) {
    if (credentials === null || credentials === undefined) {
      throw new Error('\'credentials\' cannot be null.');
    }
    if (subscriptionId === null || subscriptionId === undefined) {
      throw new Error('\'subscriptionId\' cannot be null.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined) {
      throw new Error('\'resourceGroupName\' cannot be null.');
    }
    if (resourceName === null || resourceName === undefined) {
      throw new Error('\'resourceName\' cannot be null.');
    }

    if (!options) options = {};

    super(credentials, options);

    this.apiVersion = '2018-01-10';
    this.acceptLanguage = 'en-US';
    this.longRunningOperationRetryTimeout = 30;
    this.generateClientRequestId = true;
    this.baseUri = baseUri;
    if (!this.baseUri) {
      this.baseUri = 'https://management.azure.com';
    }
    this.credentials = credentials;
    this.subscriptionId = subscriptionId;
    this.resourceGroupName = resourceGroupName;
    this.resourceName = resourceName;

    let packageInfo = this.getPackageJsonInfo(__dirname);
    this.addUserAgentInfo(`${packageInfo.name}/${packageInfo.version}`);
    if(options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
      this.acceptLanguage = options.acceptLanguage;
    }
    if(options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
      this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
    }
    if(options.generateClientRequestId !== null && options.generateClientRequestId !== undefined) {
      this.generateClientRequestId = options.generateClientRequestId;
    }
    this.operations = new operations.Operations(this);
    this.replicationAlertSettings = new operations.ReplicationAlertSettings(this);
    this.replicationEvents = new operations.ReplicationEvents(this);
    this.replicationFabrics = new operations.ReplicationFabrics(this);
    this.replicationLogicalNetworks = new operations.ReplicationLogicalNetworks(this);
    this.replicationNetworks = new operations.ReplicationNetworks(this);
    this.replicationNetworkMappings = new operations.ReplicationNetworkMappings(this);
    this.replicationProtectionContainers = new operations.ReplicationProtectionContainers(this);
    this.replicationProtectableItems = new operations.ReplicationProtectableItems(this);
    this.replicationProtectedItems = new operations.ReplicationProtectedItems(this);
    this.recoveryPoints = new operations.RecoveryPoints(this);
    this.targetComputeSizes = new operations.TargetComputeSizes(this);
    this.replicationProtectionContainerMappings = new operations.ReplicationProtectionContainerMappings(this);
    this.replicationRecoveryServicesProviders = new operations.ReplicationRecoveryServicesProviders(this);
    this.replicationStorageClassifications = new operations.ReplicationStorageClassifications(this);
    this.replicationStorageClassificationMappings = new operations.ReplicationStorageClassificationMappings(this);
    this.replicationvCenters = new operations.ReplicationvCenters(this);
    this.replicationJobs = new operations.ReplicationJobs(this);
    this.replicationPolicies = new operations.ReplicationPolicies(this);
    this.replicationRecoveryPlans = new operations.ReplicationRecoveryPlans(this);
    this.replicationVaultHealth = new operations.ReplicationVaultHealth(this);
    this.models = models;
    msRest.addSerializationMixin(this);
  }

}

module.exports = SiteRecoveryManagementClient;
module.exports['default'] = SiteRecoveryManagementClient;
module.exports.SiteRecoveryManagementClient = SiteRecoveryManagementClient;
module.exports.SiteRecoveryManagementModels = models;
