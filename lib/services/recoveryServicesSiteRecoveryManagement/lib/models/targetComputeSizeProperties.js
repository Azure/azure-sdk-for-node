/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Represents applicable recovery vm sizes properties.
 *
 */
class TargetComputeSizeProperties {
  /**
   * Create a TargetComputeSizeProperties.
   * @property {string} [name] Target compute size name.
   * @property {string} [friendlyName] Target compute size display name.
   * @property {number} [cpuCoresCount] The maximum cpu cores count supported
   * by target compute size.
   * @property {number} [memoryInGB] The maximum memory in GB supported by
   * target compute size.
   * @property {number} [maxDataDiskCount] The maximum data disks count
   * supported by target compute size.
   * @property {number} [maxNicsCount] The maximum Nics count supported by
   * target compute size.
   * @property {array} [errors] The reasons why the target compute size is not
   * applicable for the protected item.
   * @property {string} [highIopsSupported] The value indicating whether the
   * target compute size supports high Iops.
   */
  constructor() {
  }

  /**
   * Defines the metadata of TargetComputeSizeProperties
   *
   * @returns {object} metadata of TargetComputeSizeProperties
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'TargetComputeSizeProperties',
      type: {
        name: 'Composite',
        className: 'TargetComputeSizeProperties',
        modelProperties: {
          name: {
            required: false,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          friendlyName: {
            required: false,
            serializedName: 'friendlyName',
            type: {
              name: 'String'
            }
          },
          cpuCoresCount: {
            required: false,
            serializedName: 'cpuCoresCount',
            type: {
              name: 'Number'
            }
          },
          memoryInGB: {
            required: false,
            serializedName: 'memoryInGB',
            type: {
              name: 'Number'
            }
          },
          maxDataDiskCount: {
            required: false,
            serializedName: 'maxDataDiskCount',
            type: {
              name: 'Number'
            }
          },
          maxNicsCount: {
            required: false,
            serializedName: 'maxNicsCount',
            type: {
              name: 'Number'
            }
          },
          errors: {
            required: false,
            serializedName: 'errors',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ComputeSizeErrorDetailsElementType',
                  type: {
                    name: 'Composite',
                    className: 'ComputeSizeErrorDetails'
                  }
              }
            }
          },
          highIopsSupported: {
            required: false,
            serializedName: 'highIopsSupported',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = TargetComputeSizeProperties;
