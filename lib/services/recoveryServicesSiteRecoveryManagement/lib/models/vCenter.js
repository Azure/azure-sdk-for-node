/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * vCenter definition.
 *
 * @extends models['Resource']
 */
class VCenter extends models['Resource'] {
  /**
   * Create a VCenter.
   * @member {object} [properties] VCenter related data.
   * @member {string} [properties.friendlyName] Friendly name of the vCenter.
   * @member {string} [properties.internalId] VCenter internal ID.
   * @member {date} [properties.lastHeartbeat] The time when the last heartbeat
   * was reveived by vCenter.
   * @member {string} [properties.discoveryStatus] The VCenter discovery
   * status.
   * @member {string} [properties.processServerId] The process server Id.
   * @member {string} [properties.ipAddress] The IP address of the vCenter.
   * @member {string} [properties.infrastructureId] The infrastructure Id of
   * vCenter.
   * @member {string} [properties.port] The port number for discovery.
   * @member {string} [properties.runAsAccountId] The account Id which has
   * privileges to discover the vCenter.
   * @member {string} [properties.fabricArmResourceName] The ARM resource name
   * of the fabric containing this VCenter.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of VCenter
   *
   * @returns {object} metadata of VCenter
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'VCenter',
      type: {
        name: 'Composite',
        className: 'VCenter',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: false,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          properties: {
            required: false,
            serializedName: 'properties',
            type: {
              name: 'Composite',
              className: 'VCenterProperties'
            }
          }
        }
      }
    };
  }
}

module.exports = VCenter;
