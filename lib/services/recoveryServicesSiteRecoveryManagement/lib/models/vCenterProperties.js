/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * vCenter properties.
 *
 */
class VCenterProperties {
  /**
   * Create a VCenterProperties.
   * @property {string} [friendlyName] Friendly name of the vCenter.
   * @property {string} [internalId] VCenter internal ID.
   * @property {date} [lastHeartbeat] The time when the last heartbeat was
   * received by vCenter.
   * @property {string} [discoveryStatus] The VCenter discovery status.
   * @property {string} [processServerId] The process server Id.
   * @property {string} [ipAddress] The IP address of the vCenter.
   * @property {string} [infrastructureId] The infrastructure Id of vCenter.
   * @property {string} [port] The port number for discovery.
   * @property {string} [runAsAccountId] The account Id which has privileges to
   * discover the vCenter.
   * @property {string} [fabricArmResourceName] The ARM resource name of the
   * fabric containing this VCenter.
   * @property {array} [healthErrors] The health errors for this VCenter.
   */
  constructor() {
  }

  /**
   * Defines the metadata of VCenterProperties
   *
   * @returns {object} metadata of VCenterProperties
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'VCenterProperties',
      type: {
        name: 'Composite',
        className: 'VCenterProperties',
        modelProperties: {
          friendlyName: {
            required: false,
            serializedName: 'friendlyName',
            type: {
              name: 'String'
            }
          },
          internalId: {
            required: false,
            serializedName: 'internalId',
            type: {
              name: 'String'
            }
          },
          lastHeartbeat: {
            required: false,
            serializedName: 'lastHeartbeat',
            type: {
              name: 'DateTime'
            }
          },
          discoveryStatus: {
            required: false,
            serializedName: 'discoveryStatus',
            type: {
              name: 'String'
            }
          },
          processServerId: {
            required: false,
            serializedName: 'processServerId',
            type: {
              name: 'String'
            }
          },
          ipAddress: {
            required: false,
            serializedName: 'ipAddress',
            type: {
              name: 'String'
            }
          },
          infrastructureId: {
            required: false,
            serializedName: 'infrastructureId',
            type: {
              name: 'String'
            }
          },
          port: {
            required: false,
            serializedName: 'port',
            type: {
              name: 'String'
            }
          },
          runAsAccountId: {
            required: false,
            serializedName: 'runAsAccountId',
            type: {
              name: 'String'
            }
          },
          fabricArmResourceName: {
            required: false,
            serializedName: 'fabricArmResourceName',
            type: {
              name: 'String'
            }
          },
          healthErrors: {
            required: false,
            serializedName: 'healthErrors',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'HealthErrorElementType',
                  type: {
                    name: 'Composite',
                    className: 'HealthError'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = VCenterProperties;
