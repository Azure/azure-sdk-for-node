/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Identity provider input.
 *
 */
class IdentityProviderInput {
  /**
   * Create a IdentityProviderInput.
   * @property {string} tenantId The tenant Id for the service principal with
   * which the on-premise management/data plane components would communicate
   * with our Azure services.
   * @property {string} applicationId The application/client Id for the service
   * principal with which the on-premise management/data plane components would
   * communicate with our Azure services.
   * @property {string} objectId The object Id of the service principal with
   * which the on-premise management/data plane components would communicate
   * with our Azure services.
   * @property {string} audience The intended Audience of the service principal
   * with which the on-premise management/data plane components would
   * communicate with our Azure services.
   * @property {string} aadAuthority The base authority for Azure Active
   * Directory authentication.
   */
  constructor() {
  }

  /**
   * Defines the metadata of IdentityProviderInput
   *
   * @returns {object} metadata of IdentityProviderInput
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'IdentityProviderInput',
      type: {
        name: 'Composite',
        className: 'IdentityProviderInput',
        modelProperties: {
          tenantId: {
            required: true,
            serializedName: 'tenantId',
            type: {
              name: 'String'
            }
          },
          applicationId: {
            required: true,
            serializedName: 'applicationId',
            type: {
              name: 'String'
            }
          },
          objectId: {
            required: true,
            serializedName: 'objectId',
            type: {
              name: 'String'
            }
          },
          audience: {
            required: true,
            serializedName: 'audience',
            type: {
              name: 'String'
            }
          },
          aadAuthority: {
            required: true,
            serializedName: 'aadAuthority',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = IdentityProviderInput;
