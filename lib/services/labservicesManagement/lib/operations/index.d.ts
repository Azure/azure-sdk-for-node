/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as moment from 'moment';
import * as models from '../models';


/**
 * @class
 * ProviderOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ManagedLabsClient.
 */
export interface ProviderOperations {


    /**
     * Result of the request to list REST API operations
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProviderOperationResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProviderOperationResult>>;

    /**
     * Result of the request to list REST API operations
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProviderOperationResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProviderOperationResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProviderOperationResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProviderOperationResult>;
    list(callback: ServiceCallback<models.ProviderOperationResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProviderOperationResult>): void;


    /**
     * Result of the request to list REST API operations
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProviderOperationResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProviderOperationResult>>;

    /**
     * Result of the request to list REST API operations
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProviderOperationResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProviderOperationResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProviderOperationResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProviderOperationResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ProviderOperationResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProviderOperationResult>): void;
}

/**
 * @class
 * GlobalUsers
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ManagedLabsClient.
 */
export interface GlobalUsers {


    /**
     * Gets the virtual machine details
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} environmentOperationsPayload Represents payload for any
     * Environment operations like get, start, stop, connect
     *
     * @param {string} environmentOperationsPayload.environmentId The resourceId of
     * the environment
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($expand=environment)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetEnvironmentResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEnvironmentWithHttpOperationResponse(userName: string, environmentOperationsPayload: models.EnvironmentOperationsPayload, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetEnvironmentResponse>>;

    /**
     * Gets the virtual machine details
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} environmentOperationsPayload Represents payload for any
     * Environment operations like get, start, stop, connect
     *
     * @param {string} environmentOperationsPayload.environmentId The resourceId of
     * the environment
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($expand=environment)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetEnvironmentResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetEnvironmentResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetEnvironmentResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEnvironment(userName: string, environmentOperationsPayload: models.EnvironmentOperationsPayload, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.GetEnvironmentResponse>;
    getEnvironment(userName: string, environmentOperationsPayload: models.EnvironmentOperationsPayload, callback: ServiceCallback<models.GetEnvironmentResponse>): void;
    getEnvironment(userName: string, environmentOperationsPayload: models.EnvironmentOperationsPayload, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetEnvironmentResponse>): void;


    /**
     * Get batch operation status
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} operationBatchStatusPayload Payload to get the status of an
     * operation
     *
     * @param {array} operationBatchStatusPayload.urls The operation url of long
     * running operation
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationBatchStatusResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getOperationBatchStatusWithHttpOperationResponse(userName: string, operationBatchStatusPayload: models.OperationBatchStatusPayload, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationBatchStatusResponse>>;

    /**
     * Get batch operation status
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} operationBatchStatusPayload Payload to get the status of an
     * operation
     *
     * @param {array} operationBatchStatusPayload.urls The operation url of long
     * running operation
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationBatchStatusResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationBatchStatusResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationBatchStatusResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getOperationBatchStatus(userName: string, operationBatchStatusPayload: models.OperationBatchStatusPayload, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationBatchStatusResponse>;
    getOperationBatchStatus(userName: string, operationBatchStatusPayload: models.OperationBatchStatusPayload, callback: ServiceCallback<models.OperationBatchStatusResponse>): void;
    getOperationBatchStatus(userName: string, operationBatchStatusPayload: models.OperationBatchStatusPayload, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationBatchStatusResponse>): void;


    /**
     * Gets the status of long running operation
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} operationStatusPayload Payload to get the status of an
     * operation
     *
     * @param {string} operationStatusPayload.operationUrl The operation url of
     * long running operation
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationStatusResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getOperationStatusWithHttpOperationResponse(userName: string, operationStatusPayload: models.OperationStatusPayload, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationStatusResponse>>;

    /**
     * Gets the status of long running operation
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} operationStatusPayload Payload to get the status of an
     * operation
     *
     * @param {string} operationStatusPayload.operationUrl The operation url of
     * long running operation
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationStatusResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationStatusResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationStatusResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getOperationStatus(userName: string, operationStatusPayload: models.OperationStatusPayload, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationStatusResponse>;
    getOperationStatus(userName: string, operationStatusPayload: models.OperationStatusPayload, callback: ServiceCallback<models.OperationStatusResponse>): void;
    getOperationStatus(userName: string, operationStatusPayload: models.OperationStatusPayload, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationStatusResponse>): void;


    /**
     * Get personal preferences for a user
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} personalPreferencesOperationsPayload Represents payload for
     * any Environment operations like get, start, stop, connect
     *
     * @param {string} [personalPreferencesOperationsPayload.labAccountResourceId]
     * Resource Id of the lab account
     *
     * @param {string} [personalPreferencesOperationsPayload.addRemove] Enum
     * indicating if user is adding or removing a favorite lab. Possible values
     * include: 'Add', 'Remove'
     *
     * @param {string} [personalPreferencesOperationsPayload.labResourceId]
     * Resource Id of the lab to add/remove from the favorites list
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetPersonalPreferencesResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getPersonalPreferencesWithHttpOperationResponse(userName: string, personalPreferencesOperationsPayload: models.PersonalPreferencesOperationsPayload, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetPersonalPreferencesResponse>>;

    /**
     * Get personal preferences for a user
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} personalPreferencesOperationsPayload Represents payload for
     * any Environment operations like get, start, stop, connect
     *
     * @param {string} [personalPreferencesOperationsPayload.labAccountResourceId]
     * Resource Id of the lab account
     *
     * @param {string} [personalPreferencesOperationsPayload.addRemove] Enum
     * indicating if user is adding or removing a favorite lab. Possible values
     * include: 'Add', 'Remove'
     *
     * @param {string} [personalPreferencesOperationsPayload.labResourceId]
     * Resource Id of the lab to add/remove from the favorites list
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetPersonalPreferencesResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetPersonalPreferencesResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetPersonalPreferencesResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getPersonalPreferences(userName: string, personalPreferencesOperationsPayload: models.PersonalPreferencesOperationsPayload, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetPersonalPreferencesResponse>;
    getPersonalPreferences(userName: string, personalPreferencesOperationsPayload: models.PersonalPreferencesOperationsPayload, callback: ServiceCallback<models.GetPersonalPreferencesResponse>): void;
    getPersonalPreferences(userName: string, personalPreferencesOperationsPayload: models.PersonalPreferencesOperationsPayload, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetPersonalPreferencesResponse>): void;


    /**
     * List Environments for the user
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} listEnvironmentsPayload Represents the payload to list
     * environments owned by a user
     *
     * @param {string} [listEnvironmentsPayload.labId] The resource Id of the lab
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ListEnvironmentsResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listEnvironmentsWithHttpOperationResponse(userName: string, listEnvironmentsPayload: models.ListEnvironmentsPayload, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListEnvironmentsResponse>>;

    /**
     * List Environments for the user
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} listEnvironmentsPayload Represents the payload to list
     * environments owned by a user
     *
     * @param {string} [listEnvironmentsPayload.labId] The resource Id of the lab
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ListEnvironmentsResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ListEnvironmentsResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ListEnvironmentsResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listEnvironments(userName: string, listEnvironmentsPayload: models.ListEnvironmentsPayload, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListEnvironmentsResponse>;
    listEnvironments(userName: string, listEnvironmentsPayload: models.ListEnvironmentsPayload, callback: ServiceCallback<models.ListEnvironmentsResponse>): void;
    listEnvironments(userName: string, listEnvironmentsPayload: models.ListEnvironmentsPayload, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListEnvironmentsResponse>): void;


    /**
     * List labs for the user.
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ListLabsResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listLabsWithHttpOperationResponse(userName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ListLabsResponse>>;

    /**
     * List labs for the user.
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ListLabsResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ListLabsResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ListLabsResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listLabs(userName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ListLabsResponse>;
    listLabs(userName: string, callback: ServiceCallback<models.ListLabsResponse>): void;
    listLabs(userName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ListLabsResponse>): void;


    /**
     * Register a user to a managed lab
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} registerPayload Represents payload for Register action.
     *
     * @param {string} [registerPayload.registrationCode] The registration code of
     * the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    registerWithHttpOperationResponse(userName: string, registerPayload: models.RegisterPayload, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Register a user to a managed lab
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} registerPayload Represents payload for Register action.
     *
     * @param {string} [registerPayload.registrationCode] The registration code of
     * the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    register(userName: string, registerPayload: models.RegisterPayload, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    register(userName: string, registerPayload: models.RegisterPayload, callback: ServiceCallback<void>): void;
    register(userName: string, registerPayload: models.RegisterPayload, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Resets the user password on an environment This operation can take a while
     * to complete
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} resetPasswordPayload Represents the payload for resetting
     * passwords.
     *
     * @param {string} resetPasswordPayload.environmentId The resourceId of the
     * environment
     *
     * @param {string} [resetPasswordPayload.username] The username for which the
     * password will be reset.
     *
     * @param {string} [resetPasswordPayload.password] The password to assign to
     * the user specified in
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    resetPasswordWithHttpOperationResponse(userName: string, resetPasswordPayload: models.ResetPasswordPayload, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Resets the user password on an environment This operation can take a while
     * to complete
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} resetPasswordPayload Represents the payload for resetting
     * passwords.
     *
     * @param {string} resetPasswordPayload.environmentId The resourceId of the
     * environment
     *
     * @param {string} [resetPasswordPayload.username] The username for which the
     * password will be reset.
     *
     * @param {string} [resetPasswordPayload.password] The password to assign to
     * the user specified in
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    resetPassword(userName: string, resetPasswordPayload: models.ResetPasswordPayload, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    resetPassword(userName: string, resetPasswordPayload: models.ResetPasswordPayload, callback: ServiceCallback<void>): void;
    resetPassword(userName: string, resetPasswordPayload: models.ResetPasswordPayload, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Starts an environment by starting all resources inside the environment. This
     * operation can take a while to complete
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} environmentOperationsPayload Represents payload for any
     * Environment operations like get, start, stop, connect
     *
     * @param {string} environmentOperationsPayload.environmentId The resourceId of
     * the environment
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    startEnvironmentWithHttpOperationResponse(userName: string, environmentOperationsPayload: models.EnvironmentOperationsPayload, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Starts an environment by starting all resources inside the environment. This
     * operation can take a while to complete
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} environmentOperationsPayload Represents payload for any
     * Environment operations like get, start, stop, connect
     *
     * @param {string} environmentOperationsPayload.environmentId The resourceId of
     * the environment
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    startEnvironment(userName: string, environmentOperationsPayload: models.EnvironmentOperationsPayload, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    startEnvironment(userName: string, environmentOperationsPayload: models.EnvironmentOperationsPayload, callback: ServiceCallback<void>): void;
    startEnvironment(userName: string, environmentOperationsPayload: models.EnvironmentOperationsPayload, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Stops an environment by stopping all resources inside the environment This
     * operation can take a while to complete
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} environmentOperationsPayload Represents payload for any
     * Environment operations like get, start, stop, connect
     *
     * @param {string} environmentOperationsPayload.environmentId The resourceId of
     * the environment
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    stopEnvironmentWithHttpOperationResponse(userName: string, environmentOperationsPayload: models.EnvironmentOperationsPayload, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Stops an environment by stopping all resources inside the environment This
     * operation can take a while to complete
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} environmentOperationsPayload Represents payload for any
     * Environment operations like get, start, stop, connect
     *
     * @param {string} environmentOperationsPayload.environmentId The resourceId of
     * the environment
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    stopEnvironment(userName: string, environmentOperationsPayload: models.EnvironmentOperationsPayload, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    stopEnvironment(userName: string, environmentOperationsPayload: models.EnvironmentOperationsPayload, callback: ServiceCallback<void>): void;
    stopEnvironment(userName: string, environmentOperationsPayload: models.EnvironmentOperationsPayload, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Resets the user password on an environment This operation can take a while
     * to complete
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} resetPasswordPayload Represents the payload for resetting
     * passwords.
     *
     * @param {string} resetPasswordPayload.environmentId The resourceId of the
     * environment
     *
     * @param {string} [resetPasswordPayload.username] The username for which the
     * password will be reset.
     *
     * @param {string} [resetPasswordPayload.password] The password to assign to
     * the user specified in
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginResetPasswordWithHttpOperationResponse(userName: string, resetPasswordPayload: models.ResetPasswordPayload, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Resets the user password on an environment This operation can take a while
     * to complete
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} resetPasswordPayload Represents the payload for resetting
     * passwords.
     *
     * @param {string} resetPasswordPayload.environmentId The resourceId of the
     * environment
     *
     * @param {string} [resetPasswordPayload.username] The username for which the
     * password will be reset.
     *
     * @param {string} [resetPasswordPayload.password] The password to assign to
     * the user specified in
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginResetPassword(userName: string, resetPasswordPayload: models.ResetPasswordPayload, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginResetPassword(userName: string, resetPasswordPayload: models.ResetPasswordPayload, callback: ServiceCallback<void>): void;
    beginResetPassword(userName: string, resetPasswordPayload: models.ResetPasswordPayload, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Starts an environment by starting all resources inside the environment. This
     * operation can take a while to complete
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} environmentOperationsPayload Represents payload for any
     * Environment operations like get, start, stop, connect
     *
     * @param {string} environmentOperationsPayload.environmentId The resourceId of
     * the environment
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginStartEnvironmentWithHttpOperationResponse(userName: string, environmentOperationsPayload: models.EnvironmentOperationsPayload, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Starts an environment by starting all resources inside the environment. This
     * operation can take a while to complete
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} environmentOperationsPayload Represents payload for any
     * Environment operations like get, start, stop, connect
     *
     * @param {string} environmentOperationsPayload.environmentId The resourceId of
     * the environment
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginStartEnvironment(userName: string, environmentOperationsPayload: models.EnvironmentOperationsPayload, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginStartEnvironment(userName: string, environmentOperationsPayload: models.EnvironmentOperationsPayload, callback: ServiceCallback<void>): void;
    beginStartEnvironment(userName: string, environmentOperationsPayload: models.EnvironmentOperationsPayload, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Stops an environment by stopping all resources inside the environment This
     * operation can take a while to complete
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} environmentOperationsPayload Represents payload for any
     * Environment operations like get, start, stop, connect
     *
     * @param {string} environmentOperationsPayload.environmentId The resourceId of
     * the environment
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginStopEnvironmentWithHttpOperationResponse(userName: string, environmentOperationsPayload: models.EnvironmentOperationsPayload, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Stops an environment by stopping all resources inside the environment This
     * operation can take a while to complete
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} environmentOperationsPayload Represents payload for any
     * Environment operations like get, start, stop, connect
     *
     * @param {string} environmentOperationsPayload.environmentId The resourceId of
     * the environment
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginStopEnvironment(userName: string, environmentOperationsPayload: models.EnvironmentOperationsPayload, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginStopEnvironment(userName: string, environmentOperationsPayload: models.EnvironmentOperationsPayload, callback: ServiceCallback<void>): void;
    beginStopEnvironment(userName: string, environmentOperationsPayload: models.EnvironmentOperationsPayload, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * LabAccounts
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ManagedLabsClient.
 */
export interface LabAccounts {


    /**
     * List lab accounts in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($expand=sizeConfiguration)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationLabAccount>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySubscriptionWithHttpOperationResponse(options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationLabAccount>>;

    /**
     * List lab accounts in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($expand=sizeConfiguration)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationLabAccount} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationLabAccount} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationLabAccount} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySubscription(options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationLabAccount>;
    listBySubscription(callback: ServiceCallback<models.ResponseWithContinuationLabAccount>): void;
    listBySubscription(options: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationLabAccount>): void;


    /**
     * List lab accounts in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($expand=sizeConfiguration)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationLabAccount>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationLabAccount>>;

    /**
     * List lab accounts in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($expand=sizeConfiguration)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationLabAccount} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationLabAccount} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationLabAccount} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationLabAccount>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.ResponseWithContinuationLabAccount>): void;
    listByResourceGroup(resourceGroupName: string, options: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationLabAccount>): void;


    /**
     * Get lab account
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($expand=sizeConfiguration)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LabAccount>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LabAccount>>;

    /**
     * Get lab account
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($expand=sizeConfiguration)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LabAccount} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LabAccount} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LabAccount} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, labAccountName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.LabAccount>;
    get(resourceGroupName: string, labAccountName: string, callback: ServiceCallback<models.LabAccount>): void;
    get(resourceGroupName: string, labAccountName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LabAccount>): void;


    /**
     * Create or replace an existing Lab Account.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {object} labAccount Represents a lab account.
     *
     * @param {boolean} [labAccount.enabledRegionSelection] Represents if region
     * selection is enabled
     *
     * @param {string} [labAccount.provisioningState] The provisioning status of
     * the resource.
     *
     * @param {string} [labAccount.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [labAccount.location] The location of the resource.
     *
     * @param {object} [labAccount.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LabAccount>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labAccount: models.LabAccount, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LabAccount>>;

    /**
     * Create or replace an existing Lab Account.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {object} labAccount Represents a lab account.
     *
     * @param {boolean} [labAccount.enabledRegionSelection] Represents if region
     * selection is enabled
     *
     * @param {string} [labAccount.provisioningState] The provisioning status of
     * the resource.
     *
     * @param {string} [labAccount.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [labAccount.location] The location of the resource.
     *
     * @param {object} [labAccount.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LabAccount} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LabAccount} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LabAccount} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, labAccountName: string, labAccount: models.LabAccount, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LabAccount>;
    createOrUpdate(resourceGroupName: string, labAccountName: string, labAccount: models.LabAccount, callback: ServiceCallback<models.LabAccount>): void;
    createOrUpdate(resourceGroupName: string, labAccountName: string, labAccount: models.LabAccount, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LabAccount>): void;


    /**
     * Delete lab account. This operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete lab account. This operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, labAccountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, labAccountName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, labAccountName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Modify properties of lab accounts.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {object} labAccount Represents a lab account.
     *
     * @param {boolean} [labAccount.enabledRegionSelection] Represents if region
     * selection is enabled
     *
     * @param {string} [labAccount.provisioningState] The provisioning status of
     * the resource.
     *
     * @param {string} [labAccount.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [labAccount.location] The location of the resource.
     *
     * @param {object} [labAccount.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LabAccount>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labAccount: models.LabAccountFragment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LabAccount>>;

    /**
     * Modify properties of lab accounts.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {object} labAccount Represents a lab account.
     *
     * @param {boolean} [labAccount.enabledRegionSelection] Represents if region
     * selection is enabled
     *
     * @param {string} [labAccount.provisioningState] The provisioning status of
     * the resource.
     *
     * @param {string} [labAccount.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [labAccount.location] The location of the resource.
     *
     * @param {object} [labAccount.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LabAccount} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LabAccount} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LabAccount} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, labAccountName: string, labAccount: models.LabAccountFragment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LabAccount>;
    update(resourceGroupName: string, labAccountName: string, labAccount: models.LabAccountFragment, callback: ServiceCallback<models.LabAccount>): void;
    update(resourceGroupName: string, labAccountName: string, labAccount: models.LabAccountFragment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LabAccount>): void;


    /**
     * Create a lab in a lab account.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {object} createLabProperties Properties for creating a managed lab
     * and a default environment setting
     *
     * @param {object} [createLabProperties.environmentSettingCreationParameters]
     * Settings related to creating an environment setting
     *
     * @param {object}
     * createLabProperties.environmentSettingCreationParameters.resourceSettingCreationParameters
     * The resource specific settings
     *
     * @param {string}
     * [createLabProperties.environmentSettingCreationParameters.resourceSettingCreationParameters.location]
     * The location where the virtual machine will live
     *
     * @param {string}
     * [createLabProperties.environmentSettingCreationParameters.resourceSettingCreationParameters.name]
     * The name of the resource setting
     *
     * @param {string}
     * createLabProperties.environmentSettingCreationParameters.resourceSettingCreationParameters.galleryImageResourceId
     * The resource id of the gallery image used for creating the virtual machine
     *
     * @param {string}
     * [createLabProperties.environmentSettingCreationParameters.resourceSettingCreationParameters.size]
     * The size of the virtual machine. Possible values include: 'Basic',
     * 'Standard', 'Performance'
     *
     * @param {object}
     * createLabProperties.environmentSettingCreationParameters.resourceSettingCreationParameters.referenceVmCreationParameters
     * Creation parameters for Reference Vm
     *
     * @param {string}
     * createLabProperties.environmentSettingCreationParameters.resourceSettingCreationParameters.referenceVmCreationParameters.userName
     * The username of the virtual machine
     *
     * @param {string}
     * createLabProperties.environmentSettingCreationParameters.resourceSettingCreationParameters.referenceVmCreationParameters.password
     * The password of the virtual machine.
     *
     * @param {object} createLabProperties.labCreationParameters Settings related
     * to creating a lab
     *
     * @param {number} [createLabProperties.labCreationParameters.maxUsersInLab]
     * Maximum number of users allowed in the lab.
     *
     * @param {string} createLabProperties.name The name of the resource
     *
     * @param {string} [createLabProperties.location] The location of the resource
     *
     * @param {object} [createLabProperties.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createLabWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, createLabProperties: models.CreateLabProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Create a lab in a lab account.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {object} createLabProperties Properties for creating a managed lab
     * and a default environment setting
     *
     * @param {object} [createLabProperties.environmentSettingCreationParameters]
     * Settings related to creating an environment setting
     *
     * @param {object}
     * createLabProperties.environmentSettingCreationParameters.resourceSettingCreationParameters
     * The resource specific settings
     *
     * @param {string}
     * [createLabProperties.environmentSettingCreationParameters.resourceSettingCreationParameters.location]
     * The location where the virtual machine will live
     *
     * @param {string}
     * [createLabProperties.environmentSettingCreationParameters.resourceSettingCreationParameters.name]
     * The name of the resource setting
     *
     * @param {string}
     * createLabProperties.environmentSettingCreationParameters.resourceSettingCreationParameters.galleryImageResourceId
     * The resource id of the gallery image used for creating the virtual machine
     *
     * @param {string}
     * [createLabProperties.environmentSettingCreationParameters.resourceSettingCreationParameters.size]
     * The size of the virtual machine. Possible values include: 'Basic',
     * 'Standard', 'Performance'
     *
     * @param {object}
     * createLabProperties.environmentSettingCreationParameters.resourceSettingCreationParameters.referenceVmCreationParameters
     * Creation parameters for Reference Vm
     *
     * @param {string}
     * createLabProperties.environmentSettingCreationParameters.resourceSettingCreationParameters.referenceVmCreationParameters.userName
     * The username of the virtual machine
     *
     * @param {string}
     * createLabProperties.environmentSettingCreationParameters.resourceSettingCreationParameters.referenceVmCreationParameters.password
     * The password of the virtual machine.
     *
     * @param {object} createLabProperties.labCreationParameters Settings related
     * to creating a lab
     *
     * @param {number} [createLabProperties.labCreationParameters.maxUsersInLab]
     * Maximum number of users allowed in the lab.
     *
     * @param {string} createLabProperties.name The name of the resource
     *
     * @param {string} [createLabProperties.location] The location of the resource
     *
     * @param {object} [createLabProperties.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createLab(resourceGroupName: string, labAccountName: string, createLabProperties: models.CreateLabProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    createLab(resourceGroupName: string, labAccountName: string, createLabProperties: models.CreateLabProperties, callback: ServiceCallback<void>): void;
    createLab(resourceGroupName: string, labAccountName: string, createLabProperties: models.CreateLabProperties, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Get regional availability information for each size category configured
     * under a lab account
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GetRegionalAvailabilityResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getRegionalAvailabilityWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GetRegionalAvailabilityResponse>>;

    /**
     * Get regional availability information for each size category configured
     * under a lab account
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GetRegionalAvailabilityResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GetRegionalAvailabilityResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GetRegionalAvailabilityResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getRegionalAvailability(resourceGroupName: string, labAccountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GetRegionalAvailabilityResponse>;
    getRegionalAvailability(resourceGroupName: string, labAccountName: string, callback: ServiceCallback<models.GetRegionalAvailabilityResponse>): void;
    getRegionalAvailability(resourceGroupName: string, labAccountName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GetRegionalAvailabilityResponse>): void;


    /**
     * Delete lab account. This operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete lab account. This operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, labAccountName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, labAccountName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, labAccountName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * List lab accounts in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationLabAccount>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySubscriptionNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationLabAccount>>;

    /**
     * List lab accounts in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationLabAccount} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationLabAccount} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationLabAccount} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySubscriptionNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationLabAccount>;
    listBySubscriptionNext(nextPageLink: string, callback: ServiceCallback<models.ResponseWithContinuationLabAccount>): void;
    listBySubscriptionNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationLabAccount>): void;


    /**
     * List lab accounts in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationLabAccount>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationLabAccount>>;

    /**
     * List lab accounts in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationLabAccount} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationLabAccount} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationLabAccount} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationLabAccount>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.ResponseWithContinuationLabAccount>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationLabAccount>): void;
}

/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ManagedLabsClient.
 */
export interface Operations {


    /**
     * Get operation
     *
     * @param {string} locationName The name of the location.
     *
     * @param {string} operationName The name of the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(locationName: string, operationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationResult>>;

    /**
     * Get operation
     *
     * @param {string} locationName The name of the location.
     *
     * @param {string} operationName The name of the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(locationName: string, operationName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationResult>;
    get(locationName: string, operationName: string, callback: ServiceCallback<models.OperationResult>): void;
    get(locationName: string, operationName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationResult>): void;
}

/**
 * @class
 * GalleryImages
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ManagedLabsClient.
 */
export interface GalleryImages {


    /**
     * List gallery images in a given lab account.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=author)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationGalleryImage>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationGalleryImage>>;

    /**
     * List gallery images in a given lab account.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=author)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationGalleryImage} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationGalleryImage} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationGalleryImage} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, labAccountName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationGalleryImage>;
    list(resourceGroupName: string, labAccountName: string, callback: ServiceCallback<models.ResponseWithContinuationGalleryImage>): void;
    list(resourceGroupName: string, labAccountName: string, options: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationGalleryImage>): void;


    /**
     * Get gallery image
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} galleryImageName The name of the gallery Image.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=author)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GalleryImage>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, galleryImageName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GalleryImage>>;

    /**
     * Get gallery image
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} galleryImageName The name of the gallery Image.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=author)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GalleryImage} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GalleryImage} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GalleryImage} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, labAccountName: string, galleryImageName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.GalleryImage>;
    get(resourceGroupName: string, labAccountName: string, galleryImageName: string, callback: ServiceCallback<models.GalleryImage>): void;
    get(resourceGroupName: string, labAccountName: string, galleryImageName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GalleryImage>): void;


    /**
     * Create or replace an existing Gallery Image.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} galleryImageName The name of the gallery Image.
     *
     * @param {object} galleryImage Represents an image from the Azure Marketplace
     *
     * @param {boolean} [galleryImage.isEnabled] Indicates whether this gallery
     * image is enabled.
     *
     * @param {boolean} [galleryImage.isOverride] Indicates whether this gallery
     * has been overridden for this lab account
     *
     * @param {boolean} [galleryImage.isPlanAuthorized] Indicates if the plan has
     * been authorized for programmatic deployment.
     *
     * @param {string} [galleryImage.provisioningState] The provisioning status of
     * the resource.
     *
     * @param {string} [galleryImage.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [galleryImage.location] The location of the resource.
     *
     * @param {object} [galleryImage.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GalleryImage>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, galleryImageName: string, galleryImage: models.GalleryImage, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GalleryImage>>;

    /**
     * Create or replace an existing Gallery Image.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} galleryImageName The name of the gallery Image.
     *
     * @param {object} galleryImage Represents an image from the Azure Marketplace
     *
     * @param {boolean} [galleryImage.isEnabled] Indicates whether this gallery
     * image is enabled.
     *
     * @param {boolean} [galleryImage.isOverride] Indicates whether this gallery
     * has been overridden for this lab account
     *
     * @param {boolean} [galleryImage.isPlanAuthorized] Indicates if the plan has
     * been authorized for programmatic deployment.
     *
     * @param {string} [galleryImage.provisioningState] The provisioning status of
     * the resource.
     *
     * @param {string} [galleryImage.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [galleryImage.location] The location of the resource.
     *
     * @param {object} [galleryImage.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GalleryImage} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GalleryImage} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GalleryImage} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, labAccountName: string, galleryImageName: string, galleryImage: models.GalleryImage, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GalleryImage>;
    createOrUpdate(resourceGroupName: string, labAccountName: string, galleryImageName: string, galleryImage: models.GalleryImage, callback: ServiceCallback<models.GalleryImage>): void;
    createOrUpdate(resourceGroupName: string, labAccountName: string, galleryImageName: string, galleryImage: models.GalleryImage, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GalleryImage>): void;


    /**
     * Delete gallery image.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} galleryImageName The name of the gallery Image.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, galleryImageName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete gallery image.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} galleryImageName The name of the gallery Image.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, labAccountName: string, galleryImageName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, labAccountName: string, galleryImageName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, labAccountName: string, galleryImageName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Modify properties of gallery images.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} galleryImageName The name of the gallery Image.
     *
     * @param {object} galleryImage Represents an image from the Azure Marketplace
     *
     * @param {boolean} [galleryImage.isEnabled] Indicates whether this gallery
     * image is enabled.
     *
     * @param {boolean} [galleryImage.isOverride] Indicates whether this gallery
     * has been overridden for this lab account
     *
     * @param {boolean} [galleryImage.isPlanAuthorized] Indicates if the plan has
     * been authorized for programmatic deployment.
     *
     * @param {string} [galleryImage.provisioningState] The provisioning status of
     * the resource.
     *
     * @param {string} [galleryImage.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [galleryImage.location] The location of the resource.
     *
     * @param {object} [galleryImage.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GalleryImage>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, galleryImageName: string, galleryImage: models.GalleryImageFragment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GalleryImage>>;

    /**
     * Modify properties of gallery images.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} galleryImageName The name of the gallery Image.
     *
     * @param {object} galleryImage Represents an image from the Azure Marketplace
     *
     * @param {boolean} [galleryImage.isEnabled] Indicates whether this gallery
     * image is enabled.
     *
     * @param {boolean} [galleryImage.isOverride] Indicates whether this gallery
     * has been overridden for this lab account
     *
     * @param {boolean} [galleryImage.isPlanAuthorized] Indicates if the plan has
     * been authorized for programmatic deployment.
     *
     * @param {string} [galleryImage.provisioningState] The provisioning status of
     * the resource.
     *
     * @param {string} [galleryImage.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [galleryImage.location] The location of the resource.
     *
     * @param {object} [galleryImage.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GalleryImage} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GalleryImage} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GalleryImage} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, labAccountName: string, galleryImageName: string, galleryImage: models.GalleryImageFragment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GalleryImage>;
    update(resourceGroupName: string, labAccountName: string, galleryImageName: string, galleryImage: models.GalleryImageFragment, callback: ServiceCallback<models.GalleryImage>): void;
    update(resourceGroupName: string, labAccountName: string, galleryImageName: string, galleryImage: models.GalleryImageFragment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GalleryImage>): void;


    /**
     * List gallery images in a given lab account.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationGalleryImage>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationGalleryImage>>;

    /**
     * List gallery images in a given lab account.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationGalleryImage} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationGalleryImage} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationGalleryImage} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationGalleryImage>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ResponseWithContinuationGalleryImage>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationGalleryImage>): void;
}

/**
 * @class
 * Labs
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ManagedLabsClient.
 */
export interface Labs {


    /**
     * List labs in a given lab account.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=maxUsersInLab)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationLab>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationLab>>;

    /**
     * List labs in a given lab account.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=maxUsersInLab)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationLab} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationLab} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationLab} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, labAccountName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationLab>;
    list(resourceGroupName: string, labAccountName: string, callback: ServiceCallback<models.ResponseWithContinuationLab>): void;
    list(resourceGroupName: string, labAccountName: string, options: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationLab>): void;


    /**
     * Get lab
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=maxUsersInLab)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Lab>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Lab>>;

    /**
     * Get lab
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=maxUsersInLab)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Lab} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Lab} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Lab} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, labAccountName: string, labName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Lab>;
    get(resourceGroupName: string, labAccountName: string, labName: string, callback: ServiceCallback<models.Lab>): void;
    get(resourceGroupName: string, labAccountName: string, labName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Lab>): void;


    /**
     * Create or replace an existing Lab.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} lab Represents a lab.
     *
     * @param {number} [lab.maxUsersInLab] Maximum number of users allowed in the
     * lab.
     *
     * @param {moment.duration} [lab.usageQuota] Maximum duration a user can use an
     * environment for in the lab.
     *
     * @param {string} [lab.userAccessMode] Lab user access mode (open to all vs.
     * restricted to those listed on the lab). Possible values include:
     * 'Restricted', 'Open'
     *
     * @param {string} [lab.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [lab.uniqueIdentifier] The unique immutable identifier of a
     * resource (Guid).
     *
     * @param {string} [lab.location] The location of the resource.
     *
     * @param {object} [lab.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Lab>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, lab: models.Lab, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Lab>>;

    /**
     * Create or replace an existing Lab.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} lab Represents a lab.
     *
     * @param {number} [lab.maxUsersInLab] Maximum number of users allowed in the
     * lab.
     *
     * @param {moment.duration} [lab.usageQuota] Maximum duration a user can use an
     * environment for in the lab.
     *
     * @param {string} [lab.userAccessMode] Lab user access mode (open to all vs.
     * restricted to those listed on the lab). Possible values include:
     * 'Restricted', 'Open'
     *
     * @param {string} [lab.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [lab.uniqueIdentifier] The unique immutable identifier of a
     * resource (Guid).
     *
     * @param {string} [lab.location] The location of the resource.
     *
     * @param {object} [lab.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Lab} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Lab} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Lab} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, labAccountName: string, labName: string, lab: models.Lab, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Lab>;
    createOrUpdate(resourceGroupName: string, labAccountName: string, labName: string, lab: models.Lab, callback: ServiceCallback<models.Lab>): void;
    createOrUpdate(resourceGroupName: string, labAccountName: string, labName: string, lab: models.Lab, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Lab>): void;


    /**
     * Delete lab. This operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete lab. This operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, labAccountName: string, labName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, labAccountName: string, labName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, labAccountName: string, labName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Modify properties of labs.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} lab Represents a lab.
     *
     * @param {number} [lab.maxUsersInLab] Maximum number of users allowed in the
     * lab.
     *
     * @param {moment.duration} [lab.usageQuota] Maximum duration a user can use an
     * environment for in the lab.
     *
     * @param {string} [lab.userAccessMode] Lab user access mode (open to all vs.
     * restricted to those listed on the lab). Possible values include:
     * 'Restricted', 'Open'
     *
     * @param {string} [lab.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [lab.uniqueIdentifier] The unique immutable identifier of a
     * resource (Guid).
     *
     * @param {string} [lab.location] The location of the resource.
     *
     * @param {object} [lab.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Lab>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, lab: models.LabFragment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Lab>>;

    /**
     * Modify properties of labs.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} lab Represents a lab.
     *
     * @param {number} [lab.maxUsersInLab] Maximum number of users allowed in the
     * lab.
     *
     * @param {moment.duration} [lab.usageQuota] Maximum duration a user can use an
     * environment for in the lab.
     *
     * @param {string} [lab.userAccessMode] Lab user access mode (open to all vs.
     * restricted to those listed on the lab). Possible values include:
     * 'Restricted', 'Open'
     *
     * @param {string} [lab.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [lab.uniqueIdentifier] The unique immutable identifier of a
     * resource (Guid).
     *
     * @param {string} [lab.location] The location of the resource.
     *
     * @param {object} [lab.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Lab} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Lab} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Lab} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, labAccountName: string, labName: string, lab: models.LabFragment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Lab>;
    update(resourceGroupName: string, labAccountName: string, labName: string, lab: models.LabFragment, callback: ServiceCallback<models.Lab>): void;
    update(resourceGroupName: string, labAccountName: string, labName: string, lab: models.LabFragment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Lab>): void;


    /**
     * Add users to a lab
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} addUsersPayload Payload for Add Users operation on a Lab.
     *
     * @param {array} addUsersPayload.emailAddresses List of user emails addresses
     * to add to the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addUsersWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, addUsersPayload: models.AddUsersPayload, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Add users to a lab
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} addUsersPayload Payload for Add Users operation on a Lab.
     *
     * @param {array} addUsersPayload.emailAddresses List of user emails addresses
     * to add to the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addUsers(resourceGroupName: string, labAccountName: string, labName: string, addUsersPayload: models.AddUsersPayload, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    addUsers(resourceGroupName: string, labAccountName: string, labName: string, addUsersPayload: models.AddUsersPayload, callback: ServiceCallback<void>): void;
    addUsers(resourceGroupName: string, labAccountName: string, labName: string, addUsersPayload: models.AddUsersPayload, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Register to managed lab.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    registerWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Register to managed lab.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    register(resourceGroupName: string, labAccountName: string, labName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    register(resourceGroupName: string, labAccountName: string, labName: string, callback: ServiceCallback<void>): void;
    register(resourceGroupName: string, labAccountName: string, labName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Delete lab. This operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete lab. This operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, labAccountName: string, labName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, labAccountName: string, labName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, labAccountName: string, labName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * List labs in a given lab account.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationLab>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationLab>>;

    /**
     * List labs in a given lab account.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationLab} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationLab} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationLab} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationLab>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ResponseWithContinuationLab>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationLab>): void;
}

/**
 * @class
 * EnvironmentSettings
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ManagedLabsClient.
 */
export interface EnvironmentSettings {


    /**
     * List environment setting in a given lab.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=publishingState)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationEnvironmentSetting>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationEnvironmentSetting>>;

    /**
     * List environment setting in a given lab.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=publishingState)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationEnvironmentSetting} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationEnvironmentSetting} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationEnvironmentSetting}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, labAccountName: string, labName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationEnvironmentSetting>;
    list(resourceGroupName: string, labAccountName: string, labName: string, callback: ServiceCallback<models.ResponseWithContinuationEnvironmentSetting>): void;
    list(resourceGroupName: string, labAccountName: string, labName: string, options: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationEnvironmentSetting>): void;


    /**
     * Get environment setting
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=publishingState)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EnvironmentSetting>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EnvironmentSetting>>;

    /**
     * Get environment setting
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=publishingState)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EnvironmentSetting} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EnvironmentSetting} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EnvironmentSetting} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.EnvironmentSetting>;
    get(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, callback: ServiceCallback<models.EnvironmentSetting>): void;
    get(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EnvironmentSetting>): void;


    /**
     * Create or replace an existing Environment Setting. This operation can take a
     * while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {object} environmentSetting Represents settings of an environment,
     * from which environment instances would be created
     *
     * @param {string} [environmentSetting.configurationState] Describes the user's
     * progress in configuring their environment setting. Possible values include:
     * 'NotApplicable', 'Completed'
     *
     * @param {string} [environmentSetting.description] Describes the environment
     * and its resource settings
     *
     * @param {string} [environmentSetting.title] Brief title describing the
     * environment and its resource settings
     *
     * @param {object} environmentSetting.resourceSettings The resource specific
     * settings
     *
     * @param {string} [environmentSetting.resourceSettings.galleryImageResourceId]
     * The resource id of the gallery image used for creating the virtual machine
     *
     * @param {string} [environmentSetting.resourceSettings.size] The size of the
     * virtual machine. Possible values include: 'Basic', 'Standard', 'Performance'
     *
     * @param {object} environmentSetting.resourceSettings.referenceVm Details
     * specific to Reference Vm
     *
     * @param {string} environmentSetting.resourceSettings.referenceVm.userName The
     * username of the virtual machine
     *
     * @param {string} [environmentSetting.resourceSettings.referenceVm.password]
     * The password of the virtual machine. This will be set to null in GET
     * resource API
     *
     * @param {string} [environmentSetting.provisioningState] The provisioning
     * status of the resource.
     *
     * @param {string} [environmentSetting.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [environmentSetting.location] The location of the resource.
     *
     * @param {object} [environmentSetting.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EnvironmentSetting>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentSetting: models.EnvironmentSetting, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EnvironmentSetting>>;

    /**
     * Create or replace an existing Environment Setting. This operation can take a
     * while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {object} environmentSetting Represents settings of an environment,
     * from which environment instances would be created
     *
     * @param {string} [environmentSetting.configurationState] Describes the user's
     * progress in configuring their environment setting. Possible values include:
     * 'NotApplicable', 'Completed'
     *
     * @param {string} [environmentSetting.description] Describes the environment
     * and its resource settings
     *
     * @param {string} [environmentSetting.title] Brief title describing the
     * environment and its resource settings
     *
     * @param {object} environmentSetting.resourceSettings The resource specific
     * settings
     *
     * @param {string} [environmentSetting.resourceSettings.galleryImageResourceId]
     * The resource id of the gallery image used for creating the virtual machine
     *
     * @param {string} [environmentSetting.resourceSettings.size] The size of the
     * virtual machine. Possible values include: 'Basic', 'Standard', 'Performance'
     *
     * @param {object} environmentSetting.resourceSettings.referenceVm Details
     * specific to Reference Vm
     *
     * @param {string} environmentSetting.resourceSettings.referenceVm.userName The
     * username of the virtual machine
     *
     * @param {string} [environmentSetting.resourceSettings.referenceVm.password]
     * The password of the virtual machine. This will be set to null in GET
     * resource API
     *
     * @param {string} [environmentSetting.provisioningState] The provisioning
     * status of the resource.
     *
     * @param {string} [environmentSetting.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [environmentSetting.location] The location of the resource.
     *
     * @param {object} [environmentSetting.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EnvironmentSetting} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EnvironmentSetting} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EnvironmentSetting} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentSetting: models.EnvironmentSetting, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EnvironmentSetting>;
    createOrUpdate(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentSetting: models.EnvironmentSetting, callback: ServiceCallback<models.EnvironmentSetting>): void;
    createOrUpdate(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentSetting: models.EnvironmentSetting, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EnvironmentSetting>): void;


    /**
     * Delete environment setting. This operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete environment setting. This operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Modify properties of environment setting.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {object} environmentSetting Represents settings of an environment,
     * from which environment instances would be created
     *
     * @param {string} [environmentSetting.configurationState] Describes the user's
     * progress in configuring their environment setting. Possible values include:
     * 'NotApplicable', 'Completed'
     *
     * @param {string} [environmentSetting.description] Describes the environment
     * and its resource settings
     *
     * @param {string} [environmentSetting.title] Brief title describing the
     * environment and its resource settings
     *
     * @param {object} [environmentSetting.resourceSettings] The resource specific
     * settings
     *
     * @param {string} [environmentSetting.resourceSettings.galleryImageResourceId]
     * The resource id of the gallery image used for creating the virtual machine
     *
     * @param {string} [environmentSetting.resourceSettings.size] The size of the
     * virtual machine. Possible values include: 'Basic', 'Standard', 'Performance'
     *
     * @param {object} [environmentSetting.resourceSettings.referenceVm] Details
     * specific to Reference Vm
     *
     * @param {string} [environmentSetting.resourceSettings.referenceVm.userName]
     * The username of the virtual machine
     *
     * @param {string} [environmentSetting.resourceSettings.referenceVm.password]
     * The password of the virtual machine. This will be set to null in GET
     * resource API
     *
     * @param {string} [environmentSetting.provisioningState] The provisioning
     * status of the resource.
     *
     * @param {string} [environmentSetting.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [environmentSetting.location] The location of the resource.
     *
     * @param {object} [environmentSetting.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EnvironmentSetting>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentSetting: models.EnvironmentSettingFragment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EnvironmentSetting>>;

    /**
     * Modify properties of environment setting.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {object} environmentSetting Represents settings of an environment,
     * from which environment instances would be created
     *
     * @param {string} [environmentSetting.configurationState] Describes the user's
     * progress in configuring their environment setting. Possible values include:
     * 'NotApplicable', 'Completed'
     *
     * @param {string} [environmentSetting.description] Describes the environment
     * and its resource settings
     *
     * @param {string} [environmentSetting.title] Brief title describing the
     * environment and its resource settings
     *
     * @param {object} [environmentSetting.resourceSettings] The resource specific
     * settings
     *
     * @param {string} [environmentSetting.resourceSettings.galleryImageResourceId]
     * The resource id of the gallery image used for creating the virtual machine
     *
     * @param {string} [environmentSetting.resourceSettings.size] The size of the
     * virtual machine. Possible values include: 'Basic', 'Standard', 'Performance'
     *
     * @param {object} [environmentSetting.resourceSettings.referenceVm] Details
     * specific to Reference Vm
     *
     * @param {string} [environmentSetting.resourceSettings.referenceVm.userName]
     * The username of the virtual machine
     *
     * @param {string} [environmentSetting.resourceSettings.referenceVm.password]
     * The password of the virtual machine. This will be set to null in GET
     * resource API
     *
     * @param {string} [environmentSetting.provisioningState] The provisioning
     * status of the resource.
     *
     * @param {string} [environmentSetting.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [environmentSetting.location] The location of the resource.
     *
     * @param {object} [environmentSetting.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EnvironmentSetting} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EnvironmentSetting} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EnvironmentSetting} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentSetting: models.EnvironmentSettingFragment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EnvironmentSetting>;
    update(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentSetting: models.EnvironmentSettingFragment, callback: ServiceCallback<models.EnvironmentSetting>): void;
    update(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentSetting: models.EnvironmentSettingFragment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EnvironmentSetting>): void;


    /**
     * Claims a random environment for a user in an environment settings
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    claimAnyWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Claims a random environment for a user in an environment settings
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    claimAny(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    claimAny(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, callback: ServiceCallback<void>): void;
    claimAny(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Provisions/deprovisions required resources for an environment setting based
     * on current state of the lab/environment setting.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {object} publishPayload Payload for Publish operation on
     * EnvironmentSetting.
     *
     * @param {boolean} [publishPayload.useExistingImage] Whether to use existing
     * VM custom image when publishing.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    publishWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, publishPayload: models.PublishPayload, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Provisions/deprovisions required resources for an environment setting based
     * on current state of the lab/environment setting.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {object} publishPayload Payload for Publish operation on
     * EnvironmentSetting.
     *
     * @param {boolean} [publishPayload.useExistingImage] Whether to use existing
     * VM custom image when publishing.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    publish(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, publishPayload: models.PublishPayload, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    publish(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, publishPayload: models.PublishPayload, callback: ServiceCallback<void>): void;
    publish(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, publishPayload: models.PublishPayload, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Starts a template by starting all resources inside the template. This
     * operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    startWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Starts a template by starting all resources inside the template. This
     * operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    start(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    start(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, callback: ServiceCallback<void>): void;
    start(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Starts a template by starting all resources inside the template. This
     * operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    stopWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Starts a template by starting all resources inside the template. This
     * operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    stop(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    stop(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, callback: ServiceCallback<void>): void;
    stop(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Create or replace an existing Environment Setting. This operation can take a
     * while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {object} environmentSetting Represents settings of an environment,
     * from which environment instances would be created
     *
     * @param {string} [environmentSetting.configurationState] Describes the user's
     * progress in configuring their environment setting. Possible values include:
     * 'NotApplicable', 'Completed'
     *
     * @param {string} [environmentSetting.description] Describes the environment
     * and its resource settings
     *
     * @param {string} [environmentSetting.title] Brief title describing the
     * environment and its resource settings
     *
     * @param {object} environmentSetting.resourceSettings The resource specific
     * settings
     *
     * @param {string} [environmentSetting.resourceSettings.galleryImageResourceId]
     * The resource id of the gallery image used for creating the virtual machine
     *
     * @param {string} [environmentSetting.resourceSettings.size] The size of the
     * virtual machine. Possible values include: 'Basic', 'Standard', 'Performance'
     *
     * @param {object} environmentSetting.resourceSettings.referenceVm Details
     * specific to Reference Vm
     *
     * @param {string} environmentSetting.resourceSettings.referenceVm.userName The
     * username of the virtual machine
     *
     * @param {string} [environmentSetting.resourceSettings.referenceVm.password]
     * The password of the virtual machine. This will be set to null in GET
     * resource API
     *
     * @param {string} [environmentSetting.provisioningState] The provisioning
     * status of the resource.
     *
     * @param {string} [environmentSetting.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [environmentSetting.location] The location of the resource.
     *
     * @param {object} [environmentSetting.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EnvironmentSetting>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentSetting: models.EnvironmentSetting, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EnvironmentSetting>>;

    /**
     * Create or replace an existing Environment Setting. This operation can take a
     * while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {object} environmentSetting Represents settings of an environment,
     * from which environment instances would be created
     *
     * @param {string} [environmentSetting.configurationState] Describes the user's
     * progress in configuring their environment setting. Possible values include:
     * 'NotApplicable', 'Completed'
     *
     * @param {string} [environmentSetting.description] Describes the environment
     * and its resource settings
     *
     * @param {string} [environmentSetting.title] Brief title describing the
     * environment and its resource settings
     *
     * @param {object} environmentSetting.resourceSettings The resource specific
     * settings
     *
     * @param {string} [environmentSetting.resourceSettings.galleryImageResourceId]
     * The resource id of the gallery image used for creating the virtual machine
     *
     * @param {string} [environmentSetting.resourceSettings.size] The size of the
     * virtual machine. Possible values include: 'Basic', 'Standard', 'Performance'
     *
     * @param {object} environmentSetting.resourceSettings.referenceVm Details
     * specific to Reference Vm
     *
     * @param {string} environmentSetting.resourceSettings.referenceVm.userName The
     * username of the virtual machine
     *
     * @param {string} [environmentSetting.resourceSettings.referenceVm.password]
     * The password of the virtual machine. This will be set to null in GET
     * resource API
     *
     * @param {string} [environmentSetting.provisioningState] The provisioning
     * status of the resource.
     *
     * @param {string} [environmentSetting.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [environmentSetting.location] The location of the resource.
     *
     * @param {object} [environmentSetting.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EnvironmentSetting} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EnvironmentSetting} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EnvironmentSetting} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentSetting: models.EnvironmentSetting, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EnvironmentSetting>;
    beginCreateOrUpdate(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentSetting: models.EnvironmentSetting, callback: ServiceCallback<models.EnvironmentSetting>): void;
    beginCreateOrUpdate(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentSetting: models.EnvironmentSetting, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EnvironmentSetting>): void;


    /**
     * Delete environment setting. This operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete environment setting. This operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Starts a template by starting all resources inside the template. This
     * operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginStartWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Starts a template by starting all resources inside the template. This
     * operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginStart(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginStart(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, callback: ServiceCallback<void>): void;
    beginStart(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Starts a template by starting all resources inside the template. This
     * operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginStopWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Starts a template by starting all resources inside the template. This
     * operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginStop(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginStop(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, callback: ServiceCallback<void>): void;
    beginStop(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * List environment setting in a given lab.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationEnvironmentSetting>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationEnvironmentSetting>>;

    /**
     * List environment setting in a given lab.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationEnvironmentSetting} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationEnvironmentSetting} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationEnvironmentSetting}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationEnvironmentSetting>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ResponseWithContinuationEnvironmentSetting>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationEnvironmentSetting>): void;
}

/**
 * @class
 * Environments
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ManagedLabsClient.
 */
export interface Environments {


    /**
     * List environments in a given environment setting.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($expand=networkInterface)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationEnvironment>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationEnvironment>>;

    /**
     * List environments in a given environment setting.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($expand=networkInterface)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationEnvironment} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationEnvironment} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationEnvironment} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationEnvironment>;
    list(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, callback: ServiceCallback<models.ResponseWithContinuationEnvironment>): void;
    list(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, options: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationEnvironment>): void;


    /**
     * Get environment
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {string} environmentName The name of the environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($expand=networkInterface)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Environment>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Environment>>;

    /**
     * Get environment
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {string} environmentName The name of the environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($expand=networkInterface)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Environment} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Environment} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Environment} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Environment>;
    get(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, callback: ServiceCallback<models.Environment>): void;
    get(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Environment>): void;


    /**
     * Create or replace an existing Environment.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {string} environmentName The name of the environment.
     *
     * @param {object} environment Represents an environment instance
     *
     * @param {object} [environment.resourceSets] The set of a VM and the setting
     * id it was created for
     *
     * @param {string} [environment.resourceSets.vmResourceId] VM resource Id for
     * the environment
     *
     * @param {string} [environment.resourceSets.resourceSettingId]
     * resourceSettingId for the environment
     *
     * @param {string} [environment.provisioningState] The provisioning status of
     * the resource.
     *
     * @param {string} [environment.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [environment.location] The location of the resource.
     *
     * @param {object} [environment.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Environment>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, environment: models.Environment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Environment>>;

    /**
     * Create or replace an existing Environment.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {string} environmentName The name of the environment.
     *
     * @param {object} environment Represents an environment instance
     *
     * @param {object} [environment.resourceSets] The set of a VM and the setting
     * id it was created for
     *
     * @param {string} [environment.resourceSets.vmResourceId] VM resource Id for
     * the environment
     *
     * @param {string} [environment.resourceSets.resourceSettingId]
     * resourceSettingId for the environment
     *
     * @param {string} [environment.provisioningState] The provisioning status of
     * the resource.
     *
     * @param {string} [environment.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [environment.location] The location of the resource.
     *
     * @param {object} [environment.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Environment} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Environment} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Environment} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, environment: models.Environment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Environment>;
    createOrUpdate(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, environment: models.Environment, callback: ServiceCallback<models.Environment>): void;
    createOrUpdate(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, environment: models.Environment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Environment>): void;


    /**
     * Delete environment. This operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {string} environmentName The name of the environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete environment. This operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {string} environmentName The name of the environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Modify properties of environments.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {string} environmentName The name of the environment.
     *
     * @param {object} environment Represents an environment instance
     *
     * @param {object} [environment.resourceSets] The set of a VM and the setting
     * id it was created for
     *
     * @param {string} [environment.resourceSets.vmResourceId] VM resource Id for
     * the environment
     *
     * @param {string} [environment.resourceSets.resourceSettingId]
     * resourceSettingId for the environment
     *
     * @param {string} [environment.provisioningState] The provisioning status of
     * the resource.
     *
     * @param {string} [environment.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [environment.location] The location of the resource.
     *
     * @param {object} [environment.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Environment>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, environment: models.EnvironmentFragment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Environment>>;

    /**
     * Modify properties of environments.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {string} environmentName The name of the environment.
     *
     * @param {object} environment Represents an environment instance
     *
     * @param {object} [environment.resourceSets] The set of a VM and the setting
     * id it was created for
     *
     * @param {string} [environment.resourceSets.vmResourceId] VM resource Id for
     * the environment
     *
     * @param {string} [environment.resourceSets.resourceSettingId]
     * resourceSettingId for the environment
     *
     * @param {string} [environment.provisioningState] The provisioning status of
     * the resource.
     *
     * @param {string} [environment.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [environment.location] The location of the resource.
     *
     * @param {object} [environment.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Environment} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Environment} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Environment} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, environment: models.EnvironmentFragment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Environment>;
    update(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, environment: models.EnvironmentFragment, callback: ServiceCallback<models.Environment>): void;
    update(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, environment: models.EnvironmentFragment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Environment>): void;


    /**
     * Claims the environment and assigns it to the user
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {string} environmentName The name of the environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    claimWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Claims the environment and assigns it to the user
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {string} environmentName The name of the environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    claim(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    claim(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, callback: ServiceCallback<void>): void;
    claim(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Resets the user password on an environment This operation can take a while
     * to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {string} environmentName The name of the environment.
     *
     * @param {object} resetPasswordPayload Represents the payload for resetting
     * passwords.
     *
     * @param {string} resetPasswordPayload.environmentId The resourceId of the
     * environment
     *
     * @param {string} [resetPasswordPayload.username] The username for which the
     * password will be reset.
     *
     * @param {string} [resetPasswordPayload.password] The password to assign to
     * the user specified in
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    resetPasswordWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, resetPasswordPayload: models.ResetPasswordPayload, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Resets the user password on an environment This operation can take a while
     * to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {string} environmentName The name of the environment.
     *
     * @param {object} resetPasswordPayload Represents the payload for resetting
     * passwords.
     *
     * @param {string} resetPasswordPayload.environmentId The resourceId of the
     * environment
     *
     * @param {string} [resetPasswordPayload.username] The username for which the
     * password will be reset.
     *
     * @param {string} [resetPasswordPayload.password] The password to assign to
     * the user specified in
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    resetPassword(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, resetPasswordPayload: models.ResetPasswordPayload, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    resetPassword(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, resetPasswordPayload: models.ResetPasswordPayload, callback: ServiceCallback<void>): void;
    resetPassword(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, resetPasswordPayload: models.ResetPasswordPayload, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Starts an environment by starting all resources inside the environment. This
     * operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {string} environmentName The name of the environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    startWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Starts an environment by starting all resources inside the environment. This
     * operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {string} environmentName The name of the environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    start(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    start(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, callback: ServiceCallback<void>): void;
    start(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Stops an environment by stopping all resources inside the environment This
     * operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {string} environmentName The name of the environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    stopWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Stops an environment by stopping all resources inside the environment This
     * operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {string} environmentName The name of the environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    stop(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    stop(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, callback: ServiceCallback<void>): void;
    stop(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Delete environment. This operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {string} environmentName The name of the environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete environment. This operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {string} environmentName The name of the environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Resets the user password on an environment This operation can take a while
     * to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {string} environmentName The name of the environment.
     *
     * @param {object} resetPasswordPayload Represents the payload for resetting
     * passwords.
     *
     * @param {string} resetPasswordPayload.environmentId The resourceId of the
     * environment
     *
     * @param {string} [resetPasswordPayload.username] The username for which the
     * password will be reset.
     *
     * @param {string} [resetPasswordPayload.password] The password to assign to
     * the user specified in
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginResetPasswordWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, resetPasswordPayload: models.ResetPasswordPayload, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Resets the user password on an environment This operation can take a while
     * to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {string} environmentName The name of the environment.
     *
     * @param {object} resetPasswordPayload Represents the payload for resetting
     * passwords.
     *
     * @param {string} resetPasswordPayload.environmentId The resourceId of the
     * environment
     *
     * @param {string} [resetPasswordPayload.username] The username for which the
     * password will be reset.
     *
     * @param {string} [resetPasswordPayload.password] The password to assign to
     * the user specified in
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginResetPassword(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, resetPasswordPayload: models.ResetPasswordPayload, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginResetPassword(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, resetPasswordPayload: models.ResetPasswordPayload, callback: ServiceCallback<void>): void;
    beginResetPassword(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, resetPasswordPayload: models.ResetPasswordPayload, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Starts an environment by starting all resources inside the environment. This
     * operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {string} environmentName The name of the environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginStartWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Starts an environment by starting all resources inside the environment. This
     * operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {string} environmentName The name of the environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginStart(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginStart(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, callback: ServiceCallback<void>): void;
    beginStart(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Stops an environment by stopping all resources inside the environment This
     * operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {string} environmentName The name of the environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginStopWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Stops an environment by stopping all resources inside the environment This
     * operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} environmentSettingName The name of the environment Setting.
     *
     * @param {string} environmentName The name of the environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginStop(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginStop(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, callback: ServiceCallback<void>): void;
    beginStop(resourceGroupName: string, labAccountName: string, labName: string, environmentSettingName: string, environmentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * List environments in a given environment setting.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationEnvironment>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationEnvironment>>;

    /**
     * List environments in a given environment setting.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationEnvironment} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationEnvironment} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationEnvironment} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationEnvironment>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ResponseWithContinuationEnvironment>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationEnvironment>): void;
}

/**
 * @class
 * Users
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ManagedLabsClient.
 */
export interface Users {


    /**
     * List users in a given lab.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=email)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationUser>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationUser>>;

    /**
     * List users in a given lab.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=email)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationUser} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationUser} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationUser} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, labAccountName: string, labName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationUser>;
    list(resourceGroupName: string, labAccountName: string, labName: string, callback: ServiceCallback<models.ResponseWithContinuationUser>): void;
    list(resourceGroupName: string, labAccountName: string, labName: string, options: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationUser>): void;


    /**
     * Get user
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=email)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<User>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, userName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.User>>;

    /**
     * Get user
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=email)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {User} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {User} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link User} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, labAccountName: string, labName: string, userName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.User>;
    get(resourceGroupName: string, labAccountName: string, labName: string, userName: string, callback: ServiceCallback<models.User>): void;
    get(resourceGroupName: string, labAccountName: string, labName: string, userName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.User>): void;


    /**
     * Create or replace an existing User.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} user The User registered to a lab
     *
     * @param {string} [user.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [user.uniqueIdentifier] The unique immutable identifier of a
     * resource (Guid).
     *
     * @param {string} [user.location] The location of the resource.
     *
     * @param {object} [user.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<User>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, userName: string, user: models.User, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.User>>;

    /**
     * Create or replace an existing User.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} user The User registered to a lab
     *
     * @param {string} [user.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [user.uniqueIdentifier] The unique immutable identifier of a
     * resource (Guid).
     *
     * @param {string} [user.location] The location of the resource.
     *
     * @param {object} [user.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {User} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {User} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link User} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, labAccountName: string, labName: string, userName: string, user: models.User, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.User>;
    createOrUpdate(resourceGroupName: string, labAccountName: string, labName: string, userName: string, user: models.User, callback: ServiceCallback<models.User>): void;
    createOrUpdate(resourceGroupName: string, labAccountName: string, labName: string, userName: string, user: models.User, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.User>): void;


    /**
     * Delete user. This operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, userName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete user. This operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, labAccountName: string, labName: string, userName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, labAccountName: string, labName: string, userName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, labAccountName: string, labName: string, userName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Modify properties of users.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} user The User registered to a lab
     *
     * @param {string} [user.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [user.uniqueIdentifier] The unique immutable identifier of a
     * resource (Guid).
     *
     * @param {string} [user.location] The location of the resource.
     *
     * @param {object} [user.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<User>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, userName: string, user: models.UserFragment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.User>>;

    /**
     * Modify properties of users.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} user The User registered to a lab
     *
     * @param {string} [user.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [user.uniqueIdentifier] The unique immutable identifier of a
     * resource (Guid).
     *
     * @param {string} [user.location] The location of the resource.
     *
     * @param {object} [user.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {User} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {User} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link User} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, labAccountName: string, labName: string, userName: string, user: models.UserFragment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.User>;
    update(resourceGroupName: string, labAccountName: string, labName: string, userName: string, user: models.UserFragment, callback: ServiceCallback<models.User>): void;
    update(resourceGroupName: string, labAccountName: string, labName: string, userName: string, user: models.UserFragment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.User>): void;


    /**
     * Delete user. This operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, labAccountName: string, labName: string, userName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete user. This operation can take a while to complete
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labAccountName The name of the lab Account.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, labAccountName: string, labName: string, userName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, labAccountName: string, labName: string, userName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, labAccountName: string, labName: string, userName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * List users in a given lab.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationUser>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationUser>>;

    /**
     * List users in a given lab.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationUser} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationUser} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationUser} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationUser>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ResponseWithContinuationUser>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationUser>): void;
}
