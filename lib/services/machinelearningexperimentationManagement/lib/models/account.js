/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * An object that represents a machine learning team account.
 *
 * @extends models['Resource']
 */
class Account extends models['Resource'] {
  /**
   * Create a Account.
   * @member {string} vsoAccountId The fully qualified arm id of the vso
   * account to be used for this team account.
   * @member {string} [accountId] The immutable id associated with this team
   * account.
   * @member {string} [description] The description of this workspace.
   * @member {string} [friendlyName] The friendly name for this workspace. This
   * will be the workspace name in the arm id when the workspace object gets
   * created
   * @member {string} keyVaultId The fully qualified arm id of the user key
   * vault.
   * @member {string} [seats] The no of users/seats who can access this team
   * account. This property defines the charge on the team account.
   * @member {string} [discoveryUri] The uri for this machine learning team
   * account.
   * @member {date} [creationDate] The creation date of the machine learning
   * team account in ISO8601 format.
   * @member {object} storageAccount The properties of the storage account for
   * the machine learning team account.
   * @member {string} [storageAccount.storageAccountId] The fully qualified arm
   * Id of the storage account.
   * @member {string} [storageAccount.accessKey] The access key to the storage
   * account.
   * @member {string} [provisioningState] The current deployment state of team
   * account resource. The provisioningState is to indicate states for resource
   * provisioning. Possible values include: 'Creating', 'Succeeded',
   * 'Updating', 'Deleting', 'Failed'
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Account
   *
   * @returns {object} metadata of Account
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Account',
      type: {
        name: 'Composite',
        className: 'Account',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          vsoAccountId: {
            required: true,
            serializedName: 'properties.vsoAccountId',
            type: {
              name: 'String'
            }
          },
          accountId: {
            required: false,
            readOnly: true,
            serializedName: 'properties.accountId',
            type: {
              name: 'String'
            }
          },
          description: {
            required: false,
            serializedName: 'properties.description',
            type: {
              name: 'String'
            }
          },
          friendlyName: {
            required: false,
            serializedName: 'properties.friendlyName',
            type: {
              name: 'String'
            }
          },
          keyVaultId: {
            required: true,
            serializedName: 'properties.keyVaultId',
            type: {
              name: 'String'
            }
          },
          seats: {
            required: false,
            serializedName: 'properties.seats',
            type: {
              name: 'String'
            }
          },
          discoveryUri: {
            required: false,
            readOnly: true,
            serializedName: 'properties.discoveryUri',
            type: {
              name: 'String'
            }
          },
          creationDate: {
            required: false,
            readOnly: true,
            serializedName: 'properties.creationDate',
            type: {
              name: 'DateTime'
            }
          },
          storageAccount: {
            required: true,
            serializedName: 'properties.storageAccount',
            type: {
              name: 'Composite',
              className: 'StorageAccountProperties'
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'Enum',
              allowedValues: [ 'Creating', 'Succeeded', 'Updating', 'Deleting', 'Failed' ]
            }
          }
        }
      }
    };
  }
}

module.exports = Account;
