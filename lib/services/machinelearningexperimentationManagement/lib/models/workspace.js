/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * An object that represents a machine learning team account workspace.
 *
 * @extends models['Resource']
 */
class Workspace extends models['Resource'] {
  /**
   * Create a Workspace.
   * @member {string} [description] The description of this workspace.
   * @member {string} [accountId] The immutable id of the team account which
   * contains this workspace.
   * @member {string} [workspaceId] The immutable id of this workspace.
   * @member {string} friendlyName The friendly name for this workspace. This
   * will be the workspace name in the arm id when the workspace object gets
   * created
   * @member {date} [creationDate] The creation date of the machine learning
   * workspace in ISO8601 format.
   * @member {string} [provisioningState] The current deployment state of team
   * account workspace resource. The provisioningState is to indicate states
   * for resource provisioning. Possible values include: 'Creating',
   * 'Succeeded', 'Updating', 'Deleting', 'Failed'
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Workspace
   *
   * @returns {object} metadata of Workspace
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Workspace',
      type: {
        name: 'Composite',
        className: 'Workspace',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          description: {
            required: false,
            serializedName: 'properties.description',
            type: {
              name: 'String'
            }
          },
          accountId: {
            required: false,
            readOnly: true,
            serializedName: 'properties.accountId',
            type: {
              name: 'String'
            }
          },
          workspaceId: {
            required: false,
            readOnly: true,
            serializedName: 'properties.workspaceId',
            type: {
              name: 'String'
            }
          },
          friendlyName: {
            required: true,
            serializedName: 'properties.friendlyName',
            type: {
              name: 'String'
            }
          },
          creationDate: {
            required: false,
            readOnly: true,
            serializedName: 'properties.creationDate',
            type: {
              name: 'DateTime'
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'Enum',
              allowedValues: [ 'Creating', 'Succeeded', 'Updating', 'Deleting', 'Failed' ]
            }
          }
        }
      }
    };
  }
}

module.exports = Workspace;
