/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Network rule set
 *
 */
class NetworkRuleSet {
  /**
   * Create a NetworkRuleSet.
   * @member {string} [bypass] Specifies whether traffic is bypassed for
   * Logging/Metrics/AzureServices. Possible values are any combination of
   * Logging|Metrics|AzureServices (For example, "Logging, Metrics"), or None
   * to bypass none of those traffics. Possible values include: 'None',
   * 'Logging', 'Metrics', 'AzureServices'. Default value: 'AzureServices' .
   * @member {array} [virtualNetworkRules] Sets the virtual network rules
   * @member {array} [ipRules] Sets the IP ACL rules
   * @member {string} defaultAction Specifies the default action of allow or
   * deny when no other rules match. Possible values include: 'Allow', 'Deny'.
   * Default value: 'Allow' .
   */
  constructor() {
  }

  /**
   * Defines the metadata of NetworkRuleSet
   *
   * @returns {object} metadata of NetworkRuleSet
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'NetworkRuleSet',
      type: {
        name: 'Composite',
        className: 'NetworkRuleSet',
        modelProperties: {
          bypass: {
            required: false,
            serializedName: 'bypass',
            defaultValue: 'AzureServices',
            type: {
              name: 'String'
            }
          },
          virtualNetworkRules: {
            required: false,
            serializedName: 'virtualNetworkRules',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'VirtualNetworkRuleElementType',
                  type: {
                    name: 'Composite',
                    className: 'VirtualNetworkRule'
                  }
              }
            }
          },
          ipRules: {
            required: false,
            serializedName: 'ipRules',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'IPRuleElementType',
                  type: {
                    name: 'Composite',
                    className: 'IPRule'
                  }
              }
            }
          },
          defaultAction: {
            required: true,
            serializedName: 'defaultAction',
            defaultValue: 'Allow',
            type: {
              name: 'Enum',
              allowedValues: [ 'Allow', 'Deny' ]
            }
          }
        }
      }
    };
  }
}

module.exports = NetworkRuleSet;
