/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Properties of the blob container, including Id, resource name, resource
 * type, Etag.
 *
 * @extends models['AzureEntityResource']
 */
class BlobContainer extends models['AzureEntityResource'] {
  /**
   * Create a BlobContainer.
   * @property {string} [publicAccess] Specifies whether data in the container
   * may be accessed publicly and the level of access. Possible values include:
   * 'Container', 'Blob', 'None'
   * @property {date} [lastModifiedTime] Returns the date and time the
   * container was last modified.
   * @property {string} [leaseStatus] The lease status of the container.
   * Possible values include: 'Locked', 'Unlocked'
   * @property {string} [leaseState] Lease state of the container. Possible
   * values include: 'Available', 'Leased', 'Expired', 'Breaking', 'Broken'
   * @property {string} [leaseDuration] Specifies whether the lease on a
   * container is of infinite or fixed duration, only when the container is
   * leased. Possible values include: 'Infinite', 'Fixed'
   * @property {object} [metadata] A name-value pair to associate with the
   * container as metadata.
   * @property {object} [immutabilityPolicy] The ImmutabilityPolicy property of
   * the container.
   * @property {number}
   * [immutabilityPolicy.immutabilityPeriodSinceCreationInDays] The
   * immutability period for the blobs in the container since the policy
   * creation, in days.
   * @property {string} [immutabilityPolicy.state] The ImmutabilityPolicy state
   * of a blob container, possible values include: Locked and Unlocked.
   * Possible values include: 'Locked', 'Unlocked'
   * @property {string} [immutabilityPolicy.etag] ImmutabilityPolicy Etag.
   * @property {array} [immutabilityPolicy.updateHistory] The
   * ImmutabilityPolicy update history of the blob container.
   * @property {object} [legalHold] The LegalHold property of the container.
   * @property {boolean} [legalHold.hasLegalHold] The hasLegalHold public
   * property is set to true by SRP if there are at least one existing tag. The
   * hasLegalHold public property is set to false by SRP if all existing legal
   * hold tags are cleared out. There can be a maximum of 1000 blob containers
   * with hasLegalHold=true for a given account.
   * @property {array} [legalHold.tags] The list of LegalHold tags of a blob
   * container.
   * @property {boolean} [hasLegalHold] The hasLegalHold public property is set
   * to true by SRP if there are at least one existing tag. The hasLegalHold
   * public property is set to false by SRP if all existing legal hold tags are
   * cleared out. There can be a maximum of 1000 blob containers with
   * hasLegalHold=true for a given account.
   * @property {boolean} [hasImmutabilityPolicy] The hasImmutabilityPolicy
   * public property is set to true by SRP if ImmutabilityPolicy has been
   * created for this container. The hasImmutabilityPolicy public property is
   * set to false by SRP if ImmutabilityPolicy has not been created for this
   * container.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of BlobContainer
   *
   * @returns {object} metadata of BlobContainer
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'BlobContainer',
      type: {
        name: 'Composite',
        className: 'BlobContainer',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          etag: {
            required: false,
            readOnly: true,
            serializedName: 'etag',
            type: {
              name: 'String'
            }
          },
          publicAccess: {
            required: false,
            serializedName: 'properties.publicAccess',
            type: {
              name: 'Enum',
              allowedValues: [ 'Container', 'Blob', 'None' ]
            }
          },
          lastModifiedTime: {
            required: false,
            readOnly: true,
            serializedName: 'properties.lastModifiedTime',
            type: {
              name: 'DateTime'
            }
          },
          leaseStatus: {
            required: false,
            readOnly: true,
            serializedName: 'properties.leaseStatus',
            type: {
              name: 'String'
            }
          },
          leaseState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.leaseState',
            type: {
              name: 'String'
            }
          },
          leaseDuration: {
            required: false,
            readOnly: true,
            serializedName: 'properties.leaseDuration',
            type: {
              name: 'String'
            }
          },
          metadata: {
            required: false,
            serializedName: 'properties.metadata',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          immutabilityPolicy: {
            required: false,
            readOnly: true,
            serializedName: 'properties.immutabilityPolicy',
            type: {
              name: 'Composite',
              className: 'ImmutabilityPolicyProperties'
            }
          },
          legalHold: {
            required: false,
            readOnly: true,
            serializedName: 'properties.legalHold',
            type: {
              name: 'Composite',
              className: 'LegalHoldProperties'
            }
          },
          hasLegalHold: {
            required: false,
            readOnly: true,
            serializedName: 'properties.hasLegalHold',
            type: {
              name: 'Boolean'
            }
          },
          hasImmutabilityPolicy: {
            required: false,
            readOnly: true,
            serializedName: 'properties.hasImmutabilityPolicy',
            type: {
              name: 'Boolean'
            }
          }
        }
      }
    };
  }
}

module.exports = BlobContainer;
