/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The parameters that can be provided when updating the storage account
 * properties.
 *
 */
class StorageAccountUpdateParameters {
  /**
   * Create a StorageAccountUpdateParameters.
   * @member {object} [sku] Gets or sets the SKU name. Note that the SKU name
   * cannot be updated to Standard_ZRS or Premium_LRS, nor can accounts of
   * those sku names be updated to any other value.
   * @member {string} [sku.name] Gets or sets the sku name. Required for
   * account creation; optional for update. Note that in older versions, sku
   * name was called accountType. Possible values include: 'Standard_LRS',
   * 'Standard_GRS', 'Standard_RAGRS', 'Standard_ZRS', 'Premium_LRS'
   * @member {string} [sku.tier] Gets the sku tier. This is based on the SKU
   * name. Possible values include: 'Standard', 'Premium'
   * @member {string} [sku.resourceType] The type of the resource, usually it
   * is 'storageAccounts'.
   * @member {string} [sku.kind] Indicates the type of storage account.
   * Possible values include: 'Storage', 'StorageV2', 'BlobStorage'
   * @member {array} [sku.locations] The set of locations that the SKU is
   * available. This will be supported and registered Azure Geo Regions (e.g.
   * West US, East US, Southeast Asia, etc.).
   * @member {array} [sku.capabilities] The capability information in the
   * specified sku, including file encryption, network acls, change
   * notification, etc.
   * @member {array} [sku.restrictions] The restrictions because of which SKU
   * cannot be used. This is empty if there are no restrictions.
   * @member {object} [tags] Gets or sets a list of key value pairs that
   * describe the resource. These tags can be used in viewing and grouping this
   * resource (across resource groups). A maximum of 15 tags can be provided
   * for a resource. Each tag must have a key no greater in length than 128
   * characters and a value no greater in length than 256 characters.
   * @member {object} [identity] The identity of the resource.
   * @member {string} [identity.principalId] The principal ID of resource
   * identity.
   * @member {string} [identity.tenantId] The tenant ID of resource.
   * @member {object} [customDomain] Custom domain assigned to the storage
   * account by the user. Name is the CNAME source. Only one custom domain is
   * supported per storage account at this time. To clear the existing custom
   * domain, use an empty string for the custom domain name property.
   * @member {string} [customDomain.name] Gets or sets the custom domain name
   * assigned to the storage account. Name is the CNAME source.
   * @member {boolean} [customDomain.useSubDomain] Indicates whether indirect
   * CName validation is enabled. Default value is false. This should only be
   * set on updates.
   * @member {object} [encryption] Provides the encryption settings on the
   * account. The default setting is unencrypted.
   * @member {object} [encryption.services] List of services which support
   * encryption.
   * @member {object} [encryption.services.blob] The encryption function of the
   * blob storage service.
   * @member {boolean} [encryption.services.blob.enabled] A boolean indicating
   * whether or not the service encrypts the data as it is stored.
   * @member {date} [encryption.services.blob.lastEnabledTime] Gets a rough
   * estimate of the date/time when the encryption was last enabled by the
   * user. Only returned when encryption is enabled. There might be some
   * unencrypted blobs which were written after this time, as it is just a
   * rough estimate.
   * @member {object} [encryption.services.file] The encryption function of the
   * file storage service.
   * @member {boolean} [encryption.services.file.enabled] A boolean indicating
   * whether or not the service encrypts the data as it is stored.
   * @member {date} [encryption.services.file.lastEnabledTime] Gets a rough
   * estimate of the date/time when the encryption was last enabled by the
   * user. Only returned when encryption is enabled. There might be some
   * unencrypted blobs which were written after this time, as it is just a
   * rough estimate.
   * @member {object} [encryption.services.table] The encryption function of
   * the table storage service.
   * @member {boolean} [encryption.services.table.enabled] A boolean indicating
   * whether or not the service encrypts the data as it is stored.
   * @member {date} [encryption.services.table.lastEnabledTime] Gets a rough
   * estimate of the date/time when the encryption was last enabled by the
   * user. Only returned when encryption is enabled. There might be some
   * unencrypted blobs which were written after this time, as it is just a
   * rough estimate.
   * @member {object} [encryption.services.queue] The encryption function of
   * the queue storage service.
   * @member {boolean} [encryption.services.queue.enabled] A boolean indicating
   * whether or not the service encrypts the data as it is stored.
   * @member {date} [encryption.services.queue.lastEnabledTime] Gets a rough
   * estimate of the date/time when the encryption was last enabled by the
   * user. Only returned when encryption is enabled. There might be some
   * unencrypted blobs which were written after this time, as it is just a
   * rough estimate.
   * @member {string} [encryption.keySource] The encryption keySource
   * (provider). Possible values (case-insensitive):  Microsoft.Storage,
   * Microsoft.Keyvault. Possible values include: 'Microsoft.Storage',
   * 'Microsoft.Keyvault'
   * @member {object} [encryption.keyVaultProperties] Properties provided by
   * key vault.
   * @member {string} [encryption.keyVaultProperties.keyName] The name of
   * KeyVault key.
   * @member {string} [encryption.keyVaultProperties.keyVersion] The version of
   * KeyVault key.
   * @member {string} [encryption.keyVaultProperties.keyVaultUri] The Uri of
   * KeyVault.
   * @member {string} [accessTier] Required for storage accounts where kind =
   * BlobStorage. The access tier used for billing. Possible values include:
   * 'Hot', 'Cool'
   * @member {boolean} [enableHttpsTrafficOnly] Allows https traffic only to
   * storage service if sets to true. Default value: false .
   * @member {object} [networkRuleSet] Network rule set
   * @member {string} [networkRuleSet.bypass] Specifies whether traffic is
   * bypassed for Logging/Metrics/AzureServices. Possible values are any
   * combination of Logging|Metrics|AzureServices (For example, "Logging,
   * Metrics"), or None to bypass none of those traffics. Possible values
   * include: 'None', 'Logging', 'Metrics', 'AzureServices'
   * @member {array} [networkRuleSet.virtualNetworkRules] Sets the virtual
   * network rules
   * @member {array} [networkRuleSet.ipRules] Sets the IP ACL rules
   * @member {string} [networkRuleSet.defaultAction] Specifies the default
   * action of allow or deny when no other rules match. Possible values
   * include: 'Allow', 'Deny'
   * @member {string} [kind] Optional. Indicates the type of storage account.
   * Currently only StorageV2 value supported by server. Possible values
   * include: 'Storage', 'StorageV2', 'BlobStorage'
   */
  constructor() {
  }

  /**
   * Defines the metadata of StorageAccountUpdateParameters
   *
   * @returns {object} metadata of StorageAccountUpdateParameters
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'StorageAccountUpdateParameters',
      type: {
        name: 'Composite',
        className: 'StorageAccountUpdateParameters',
        modelProperties: {
          sku: {
            required: false,
            serializedName: 'sku',
            type: {
              name: 'Composite',
              className: 'Sku'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          identity: {
            required: false,
            serializedName: 'identity',
            type: {
              name: 'Composite',
              className: 'Identity'
            }
          },
          customDomain: {
            required: false,
            serializedName: 'properties.customDomain',
            type: {
              name: 'Composite',
              className: 'CustomDomain'
            }
          },
          encryption: {
            required: false,
            serializedName: 'properties.encryption',
            type: {
              name: 'Composite',
              className: 'Encryption'
            }
          },
          accessTier: {
            required: false,
            serializedName: 'properties.accessTier',
            type: {
              name: 'Enum',
              allowedValues: [ 'Hot', 'Cool' ]
            }
          },
          enableHttpsTrafficOnly: {
            required: false,
            serializedName: 'properties.supportsHttpsTrafficOnly',
            defaultValue: false,
            type: {
              name: 'Boolean'
            }
          },
          networkRuleSet: {
            required: false,
            serializedName: 'properties.networkAcls',
            type: {
              name: 'Composite',
              className: 'NetworkRuleSet'
            }
          },
          kind: {
            required: false,
            serializedName: 'kind',
            type: {
              name: 'Enum',
              allowedValues: [ 'Storage', 'StorageV2', 'BlobStorage' ]
            }
          }
        }
      }
    };
  }
}

module.exports = StorageAccountUpdateParameters;
