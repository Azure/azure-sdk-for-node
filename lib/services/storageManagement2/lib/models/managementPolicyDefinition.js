/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * An object that defines the Lifecycle rule. Each definition is made up with a
 * filters set and an actions set.
 *
 */
class ManagementPolicyDefinition {
  /**
   * Create a ManagementPolicyDefinition.
   * @property {object} actions An object that defines the action set.
   * @property {object} [actions.baseBlob] The management policy action for
   * base blob
   * @property {object} [actions.baseBlob.tierToCool] The function to tier
   * blobs to cool storage. Support blobs currently at Hot tier
   * @property {number}
   * [actions.baseBlob.tierToCool.daysAfterModificationGreaterThan] Integer
   * value indicating the age in days after last modification
   * @property {object} [actions.baseBlob.tierToArchive] The function to tier
   * blobs to archive storage. Support blobs currently at Hot or Cool tier
   * @property {number}
   * [actions.baseBlob.tierToArchive.daysAfterModificationGreaterThan] Integer
   * value indicating the age in days after last modification
   * @property {object} [actions.baseBlob.deleteProperty] The function to
   * delete the blob
   * @property {number}
   * [actions.baseBlob.deleteProperty.daysAfterModificationGreaterThan] Integer
   * value indicating the age in days after last modification
   * @property {object} [actions.snapshot] The management policy action for
   * snapshot
   * @property {object} [actions.snapshot.deleteProperty] The function to
   * delete the blob snapshot
   * @property {number}
   * [actions.snapshot.deleteProperty.daysAfterCreationGreaterThan] Integer
   * value indicating the age in days after creation
   * @property {object} [filters] An object that defines the filter set.
   * @property {array} [filters.prefixMatch] An array of strings for prefixes
   * to be match.
   * @property {array} [filters.blobTypes] An array of predefined enum values.
   * Only blockBlob is supported.
   */
  constructor() {
  }

  /**
   * Defines the metadata of ManagementPolicyDefinition
   *
   * @returns {object} metadata of ManagementPolicyDefinition
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ManagementPolicyDefinition',
      type: {
        name: 'Composite',
        className: 'ManagementPolicyDefinition',
        modelProperties: {
          actions: {
            required: true,
            serializedName: 'actions',
            type: {
              name: 'Composite',
              className: 'ManagementPolicyAction'
            }
          },
          filters: {
            required: false,
            serializedName: 'filters',
            type: {
              name: 'Composite',
              className: 'ManagementPolicyFilter'
            }
          }
        }
      }
    };
  }
}

module.exports = ManagementPolicyDefinition;
