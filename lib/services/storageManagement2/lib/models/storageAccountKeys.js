/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the StorageAccountKeys class.
 * @constructor
 * The access keys for the storage account.
 * @member {string} [key1] Gets the value of key 1.
 * 
 * @member {string} [key2] Gets the value of key 2.
 * 
 */
function StorageAccountKeys(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.key1 !== null && parameters.key1 !== undefined) {
      this.key1 = parameters.key1;
    }
    if (parameters.key2 !== null && parameters.key2 !== undefined) {
      this.key2 = parameters.key2;
    }
  }    
}


/**
 * Validate the payload against the StorageAccountKeys schema
 *
 * @param {JSON} payload
 *
 */
StorageAccountKeys.prototype.serialize = function () {
  var payload = {};
  if (this['key1'] !== null && this['key1'] !== undefined) {
    if (typeof this['key1'].valueOf() !== 'string') {
      throw new Error('this[\'key1\'] must be of type string.');
    }
    payload['key1'] = this['key1'];
  }

  if (this['key2'] !== null && this['key2'] !== undefined) {
    if (typeof this['key2'].valueOf() !== 'string') {
      throw new Error('this[\'key2\'] must be of type string.');
    }
    payload['key2'] = this['key2'];
  }

  return payload;
};

/**
 * Deserialize the instance to StorageAccountKeys schema
 *
 * @param {JSON} instance
 *
 */
StorageAccountKeys.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['key1'] !== null && instance['key1'] !== undefined) {
      this['key1'] = instance['key1'];
    }

    if (instance['key2'] !== null && instance['key2'] !== undefined) {
      this['key2'] = instance['key2'];
    }
  }

  return this;
};

module.exports = StorageAccountKeys;
