/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the StorageAccount class.
 * @constructor
 * The storage account.
 * @member {string} [provisioningState] Gets the status of the storage account
 * at the time the operation was called. Possible values for this property
 * include: 'Creating', 'ResolvingDNS', 'Succeeded'.
 * 
 * @member {string} [accountType] Gets the type of the storage account.
 * Possible values for this property include: 'Standard_LRS', 'Standard_ZRS',
 * 'Standard_GRS', 'Standard_RAGRS', 'Premium_LRS'.
 * 
 * @member {object} [primaryEndpoints] Gets the URLs that are used to perform
 * a retrieval of a public blob, queue or table object.Note that StandardZRS
 * and PremiumLRS accounts only return the blob endpoint.
 * 
 * @member {string} [primaryEndpoints.blob] Gets the blob endpoint.
 * 
 * @member {string} [primaryEndpoints.queue] Gets the queue endpoint.
 * 
 * @member {string} [primaryEndpoints.table] Gets the table endpoint.
 * 
 * @member {string} [primaryLocation] Gets the location of the primary for the
 * storage account.
 * 
 * @member {string} [statusOfPrimary] Gets the status indicating whether the
 * primary location of the storage account is available or unavailable.
 * Possible values for this property include: 'Available', 'Unavailable'.
 * 
 * @member {date} [lastGeoFailoverTime] Gets the timestamp of the most recent
 * instance of a failover to the secondary location. Only the most recent
 * timestamp is retained. This element is not returned if there has never
 * been a failover instance. Only available if the accountType is StandardGRS
 * or StandardRAGRS.
 * 
 * @member {string} [secondaryLocation] Gets the location of the geo
 * replicated secondary for the storage account. Only available if the
 * accountType is StandardGRS or StandardRAGRS.
 * 
 * @member {string} [statusOfSecondary] Gets the status indicating whether the
 * secondary location of the storage account is available or unavailable.
 * Only available if the accountType is StandardGRS or StandardRAGRS.
 * Possible values for this property include: 'Available', 'Unavailable'.
 * 
 * @member {date} [creationTime] Gets the creation date and time of the
 * storage account in UTC.
 * 
 * @member {object} [customDomain] Gets the user assigned custom domain
 * assigned to this storage account.
 * 
 * @member {string} [customDomain.name] Gets or sets the custom domain name.
 * Name is the CNAME source.
 * 
 * @member {boolean} [customDomain.useSubDomain] Indicates whether indirect
 * CName validation is enabled. Default value is false. This should only be
 * set on updates
 * 
 * @member {object} [secondaryEndpoints] Gets the URLs that are used to
 * perform a retrieval of a public blob, queue or table object from the
 * secondary location of the storage account. Only available if the
 * accountType is StandardRAGRS.
 * 
 * @member {string} [secondaryEndpoints.blob] Gets the blob endpoint.
 * 
 * @member {string} [secondaryEndpoints.queue] Gets the queue endpoint.
 * 
 * @member {string} [secondaryEndpoints.table] Gets the table endpoint.
 * 
 */
function StorageAccount(parameters) {
  StorageAccount['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.provisioningState !== null && parameters.provisioningState !== undefined) {
      this.provisioningState = parameters.provisioningState;
    }
    if (parameters.accountType !== null && parameters.accountType !== undefined) {
      this.accountType = parameters.accountType;
    }
    if (parameters.primaryEndpoints) {
      this.primaryEndpoints = new models['Endpoints'](parameters.primaryEndpoints);
    }
    if (parameters.primaryLocation !== null && parameters.primaryLocation !== undefined) {
      this.primaryLocation = parameters.primaryLocation;
    }
    if (parameters.statusOfPrimary !== null && parameters.statusOfPrimary !== undefined) {
      this.statusOfPrimary = parameters.statusOfPrimary;
    }
    if (parameters.lastGeoFailoverTime !== null && parameters.lastGeoFailoverTime !== undefined) {
      this.lastGeoFailoverTime = parameters.lastGeoFailoverTime;
    }
    if (parameters.secondaryLocation !== null && parameters.secondaryLocation !== undefined) {
      this.secondaryLocation = parameters.secondaryLocation;
    }
    if (parameters.statusOfSecondary !== null && parameters.statusOfSecondary !== undefined) {
      this.statusOfSecondary = parameters.statusOfSecondary;
    }
    if (parameters.creationTime !== null && parameters.creationTime !== undefined) {
      this.creationTime = parameters.creationTime;
    }
    if (parameters.customDomain) {
      this.customDomain = new models['CustomDomain'](parameters.customDomain);
    }
    if (parameters.secondaryEndpoints) {
      this.secondaryEndpoints = new models['Endpoints'](parameters.secondaryEndpoints);
    }
  }    
}

util.inherits(StorageAccount, models['Resource']);

/**
 * Validate the payload against the StorageAccount schema
 *
 * @param {JSON} payload
 *
 */
StorageAccount.prototype.serialize = function () {
  var payload = StorageAccount['super_'].prototype.serialize.call(this);
  if (this['provisioningState'] !== null && this['provisioningState'] !== undefined) {
    var allowedValues = [ 'Creating', 'ResolvingDNS', 'Succeeded' ];
    var thisprovisioningState = this['provisioningState'];
    if (!allowedValues.some( function(item) { return item === thisprovisioningState; })) {
      throw new Error(this['provisioningState'] + ' is not a valid value. The valid values are: ' + allowedValues);
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['provisioningState'] = this['provisioningState'];
  }

  if (this['accountType'] !== null && this['accountType'] !== undefined) {
    var allowedValues1 = [ 'Standard_LRS', 'Standard_ZRS', 'Standard_GRS', 'Standard_RAGRS', 'Premium_LRS' ];
    var thisaccountType = this['accountType'];
    if (!allowedValues1.some( function(item) { return item === thisaccountType; })) {
      throw new Error(this['accountType'] + ' is not a valid value. The valid values are: ' + allowedValues1);
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['accountType'] = this['accountType'];
  }

  if (this['primaryEndpoints']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['primaryEndpoints'] = this['primaryEndpoints'].serialize();
  }

  if (this['primaryLocation'] !== null && this['primaryLocation'] !== undefined) {
    if (typeof this['primaryLocation'].valueOf() !== 'string') {
      throw new Error('this[\'primaryLocation\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['primaryLocation'] = this['primaryLocation'];
  }

  if (this['statusOfPrimary'] !== null && this['statusOfPrimary'] !== undefined) {
    var allowedValues2 = [ 'Available', 'Unavailable' ];
    var thisstatusOfPrimary = this['statusOfPrimary'];
    if (!allowedValues2.some( function(item) { return item === thisstatusOfPrimary; })) {
      throw new Error(this['statusOfPrimary'] + ' is not a valid value. The valid values are: ' + allowedValues2);
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['statusOfPrimary'] = this['statusOfPrimary'];
  }

  if (this['lastGeoFailoverTime']) {
    if (!(this['lastGeoFailoverTime'] instanceof Date || typeof this['lastGeoFailoverTime'].valueOf() === 'string' && !isNaN(Date.parse(this['lastGeoFailoverTime'])))) {
      throw new Error('this[\'lastGeoFailoverTime\'] must be of type date.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['lastGeoFailoverTime'] = (this['lastGeoFailoverTime'] instanceof Date) ? this['lastGeoFailoverTime'].toISOString() : this['lastGeoFailoverTime'];
  }

  if (this['secondaryLocation'] !== null && this['secondaryLocation'] !== undefined) {
    if (typeof this['secondaryLocation'].valueOf() !== 'string') {
      throw new Error('this[\'secondaryLocation\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['secondaryLocation'] = this['secondaryLocation'];
  }

  if (this['statusOfSecondary'] !== null && this['statusOfSecondary'] !== undefined) {
    var allowedValues3 = [ 'Available', 'Unavailable' ];
    var thisstatusOfSecondary = this['statusOfSecondary'];
    if (!allowedValues3.some( function(item) { return item === thisstatusOfSecondary; })) {
      throw new Error(this['statusOfSecondary'] + ' is not a valid value. The valid values are: ' + allowedValues3);
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['statusOfSecondary'] = this['statusOfSecondary'];
  }

  if (this['creationTime']) {
    if (!(this['creationTime'] instanceof Date || typeof this['creationTime'].valueOf() === 'string' && !isNaN(Date.parse(this['creationTime'])))) {
      throw new Error('this[\'creationTime\'] must be of type date.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['creationTime'] = (this['creationTime'] instanceof Date) ? this['creationTime'].toISOString() : this['creationTime'];
  }

  if (this['customDomain']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['customDomain'] = this['customDomain'].serialize();
  }

  if (this['secondaryEndpoints']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['secondaryEndpoints'] = this['secondaryEndpoints'].serialize();
  }

  return payload;
};

/**
 * Deserialize the instance to StorageAccount schema
 *
 * @param {JSON} instance
 *
 */
StorageAccount.prototype.deserialize = function (instance) {
  StorageAccount['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['provisioningState'] !== null && instance['properties']['provisioningState'] !== undefined) {
        this['provisioningState'] = instance['properties']['provisioningState'];
      }
      else {
        this['provisioningState'] = instance['properties']['provisioningState'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['accountType'] !== null && instance['properties']['accountType'] !== undefined) {
        this['accountType'] = instance['properties']['accountType'];
      }
      else {
        this['accountType'] = instance['properties']['accountType'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['primaryEndpoints']) {
        this['primaryEndpoints'] = new models['Endpoints']().deserialize(instance['properties']['primaryEndpoints']);
      }
      else {
        this['primaryEndpoints'] = instance['properties']['primaryEndpoints'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['primaryLocation'] !== null && instance['properties']['primaryLocation'] !== undefined) {
        this['primaryLocation'] = instance['properties']['primaryLocation'];
      }
      else {
        this['primaryLocation'] = instance['properties']['primaryLocation'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['statusOfPrimary'] !== null && instance['properties']['statusOfPrimary'] !== undefined) {
        this['statusOfPrimary'] = instance['properties']['statusOfPrimary'];
      }
      else {
        this['statusOfPrimary'] = instance['properties']['statusOfPrimary'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['lastGeoFailoverTime'] !== null && instance['properties']['lastGeoFailoverTime'] !== undefined) {
        this['lastGeoFailoverTime'] = new Date(instance['properties']['lastGeoFailoverTime']);
      }
      else {
        this['lastGeoFailoverTime'] = instance['properties']['lastGeoFailoverTime'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['secondaryLocation'] !== null && instance['properties']['secondaryLocation'] !== undefined) {
        this['secondaryLocation'] = instance['properties']['secondaryLocation'];
      }
      else {
        this['secondaryLocation'] = instance['properties']['secondaryLocation'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['statusOfSecondary'] !== null && instance['properties']['statusOfSecondary'] !== undefined) {
        this['statusOfSecondary'] = instance['properties']['statusOfSecondary'];
      }
      else {
        this['statusOfSecondary'] = instance['properties']['statusOfSecondary'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['creationTime'] !== null && instance['properties']['creationTime'] !== undefined) {
        this['creationTime'] = new Date(instance['properties']['creationTime']);
      }
      else {
        this['creationTime'] = instance['properties']['creationTime'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['customDomain']) {
        this['customDomain'] = new models['CustomDomain']().deserialize(instance['properties']['customDomain']);
      }
      else {
        this['customDomain'] = instance['properties']['customDomain'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['secondaryEndpoints']) {
        this['secondaryEndpoints'] = new models['Endpoints']().deserialize(instance['properties']['secondaryEndpoints']);
      }
      else {
        this['secondaryEndpoints'] = instance['properties']['secondaryEndpoints'];
      }
    }
  }

  return this;
};

module.exports = StorageAccount;
