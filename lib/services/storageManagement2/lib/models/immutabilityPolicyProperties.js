/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * The properties of an ImmutabilityPolicy of a blob container.
 *
 */
class ImmutabilityPolicyProperties {
  /**
   * Create a ImmutabilityPolicyProperties.
   * @member {number} immutabilityPeriodSinceCreationInDays The immutability
   * period for the blobs in the container since the policy creation, in days.
   * @member {string} [state] The ImmutabilityPolicy state of a blob container,
   * possible values include: Locked and Unlocked. Possible values include:
   * 'Locked', 'Unlocked'
   * @member {string} [etag] ImmutabilityPolicy Etag.
   * @member {array} [updateHistory] The ImmutabilityPolicy update history of
   * the blob container.
   */
  constructor() {
  }

  /**
   * Defines the metadata of ImmutabilityPolicyProperties
   *
   * @returns {object} metadata of ImmutabilityPolicyProperties
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ImmutabilityPolicyProperties',
      type: {
        name: 'Composite',
        className: 'ImmutabilityPolicyProperties',
        modelProperties: {
          immutabilityPeriodSinceCreationInDays: {
            required: true,
            serializedName: 'properties.immutabilityPeriodSinceCreationInDays',
            type: {
              name: 'Number'
            }
          },
          state: {
            required: false,
            readOnly: true,
            serializedName: 'properties.state',
            type: {
              name: 'String'
            }
          },
          etag: {
            required: false,
            readOnly: true,
            serializedName: 'etag',
            type: {
              name: 'String'
            }
          },
          updateHistory: {
            required: false,
            readOnly: true,
            serializedName: 'updateHistory',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'UpdateHistoryPropertyElementType',
                  type: {
                    name: 'Composite',
                    className: 'UpdateHistoryProperty'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = ImmutabilityPolicyProperties;
