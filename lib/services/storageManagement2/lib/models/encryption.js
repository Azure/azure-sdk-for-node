/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the Encryption class.
 * @constructor
 * The encryption settings on the storage account.
 *
 * @member {object} [services] List of services which support encryption.
 * 
 * @member {object} [services.blob] The encryption function of the blob
 * storage service.
 * 
 * @member {boolean} [services.blob.enabled] A boolean indicating whether or
 * not the service encrypts the data as it is stored.
 * 
 * @member {date} [services.blob.lastEnabledTime] Gets a rough estimate of the
 * date/time when the encryption was last enabled by the user. Only returned
 * when encryption is enabled. There might be some unencrypted blobs which
 * were written after this time, as it is just a rough estimate.
 * 
 */
function Encryption() {
}

/**
 * Defines the metadata of Encryption
 *
 * @returns {object} metadata of Encryption
 *
 */
Encryption.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'Encryption',
    type: {
      name: 'Composite',
      className: 'Encryption',
      modelProperties: {
        services: {
          required: false,
          serializedName: 'services',
          type: {
            name: 'Composite',
            className: 'EncryptionServices'
          }
        },
        keySource: {
          required: true,
          isConstant: true,
          serializedName: 'keySource',
          defaultValue: 'Microsoft.Storage',
          type: {
            name: 'String'
          }
        }
      }
    }
  };
};

module.exports = Encryption;
