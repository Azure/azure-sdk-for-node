/// Code generated by Microsoft (R) AutoRest Code Generator 0.10.0.0
/// Changes may cause incorrect behavior and will be lost if the code is
/// regenerated.

'use strict';

var util = require('util');
var msRest = require('ms-rest');
var msRestAzure = require('ms-rest-azure');
var ServiceClient = msRest.ServiceClient;
var WebResource = msRest.WebResource;

    var models = require('../models');

/**
 * @class
 * StorageAccounts
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorageManagementClient.
 * Initializes a new instance of the StorageAccounts class.
 * @constructor
 *
 * @param {StorageManagementClient} client Reference to the service client.
 */
function StorageAccounts(client) {
  this.client = client;
}

    /**
     * Checks that account name is valid and is not in use.
     * @param {StorageAccountCheckNameAvailabilityParameters} [accountName] The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.  
     *
     * @param {String} [accountName.name] 
     *
     * @param {String} [accountName.type] 
     *
     * @param {function} callback
     *
     * @returns {Stream} The Response stream
     */
    StorageAccounts.prototype.checkNameAvailability = function (accountName, callback) {
      var client = this.client;
      if (!callback) {
        throw new Error('callback cannot be null.');
      }
      // Validate
      try {
        if (accountName === null || accountName === undefined) {
          throw new Error('\'accountName\' cannot be null');
        }
        if (accountName !== null && accountName !== undefined) {
          client._models['StorageAccountCheckNameAvailabilityParameters'].validate(accountName);
        }
      } catch (error) {
        return callback(error);
      }

      // Construct URL
      var requestUrl = this.client.baseUri + 
                       '//subscriptions/{subscriptionId}/providers/Microsoft.Storage/checkNameAvailability';
      requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.credentials.subscriptionId));
      var queryParameters = [];
      queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
      if (queryParameters.length > 0) {
        requestUrl += '?' + queryParameters.join('&');
      }
      // trim all duplicate forward slashes in the url
      var regex = /([^:]\/)\/+/gi;
      requestUrl = requestUrl.replace(regex, '$1');

      // Create HTTP transport objects
      var httpRequest = new WebResource();
      httpRequest.method = 'POST';
      httpRequest.headers = {};
      httpRequest.url = requestUrl;
      // Set Headers
      httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
      // Serialize Request
      var requestContent = null;
      requestContent = JSON.stringify(msRest.serializeObject(accountName));
      httpRequest.body = requestContent;
      httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
      // Send Request
      return client.pipeline(httpRequest, function (err, response, responseBody) {
        if (err) {
          return callback(err);
        }
        var statusCode = response.statusCode;
        if (statusCode !== 200) {
          var error = new Error(responseBody);
          error.statusCode = response.statusCode;
          error.request = httpRequest;
          error.response = response;
          if (responseBody === '') responseBody = null;
          var parsedErrorResponse;
          try {
            parsedErrorResponse = JSON.parse(responseBody);
            error.body = parsedErrorResponse;
              if (error.body !== null && error.body !== undefined) {
                error.body = client._models['CloudError'].deserialize(error.body);
              }
          } catch (defaultError) {
            error.message = util.format('Error "%s" occurred in deserializing the responseBody - "%s" for the default response.', defaultError, responseBody);
            return callback(error);
          }
          return callback(error);
        }
        // Create Result
        var result = new msRest.HttpOperationResponse();
        result.request = httpRequest;
        result.response = response;
        if (responseBody === '') responseBody = null;
        // Deserialize Response
        if (statusCode === 200) {
          var parsedResponse;
          try {
            parsedResponse = JSON.parse(responseBody);
            result.body = parsedResponse;
            if (result.body !== null && result.body !== undefined) {
              result.body = client._models['CheckNameAvailabilityResult'].deserialize(result.body);
            }
          } catch (error) {
            var deserializationError = new Error(util.format('Error "%s" occurred in deserializing the responseBody - "%s"', error, responseBody));
            deserializationError.request = httpRequest;
            deserializationError.response = response;
            return callback(deserializationError);
          }
        }

        return callback(null, result);
      });
    };

    /**
     *
     * Asynchronously creates a new storage account with the specified parameters.
     * Existing accounts cannot be updated with this API and should instead use
     * the Update Storage Account API. If an account is already created and
     * subsequent PUT request is issued with exact same set of properties, then
     * HTTP 200 would be returned.
        * @param {String} [accountName] The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.  
        *
        * @param {StorageAccountCreateParameters} [parameters] The parameters to provide for the created account.
        *
        * @param {StorageAccountPropertiesCreateParameters} [parameters.properties] 
        *
        * @param {AccountType} [parameters.properties.accountType] Gets or sets the account type. Possible values for this property include: 'Standard_LRS', 'Standard_ZRS', 'Standard_GRS', 'Standard_RAGRS', 'Premium_LRS'
        *
        * @param {String} [resourceGroupName] The name of the resource group within the userâ€™s subscription.
        *
     * @param {function} callback
     *
     * @returns {Stream} The Response stream
     */
    StorageAccounts.prototype.create = function (resourceGroupName, accountName, parameters, callback) {
      var client = this.client;
      var self = this;
      function getMethod() {
        var cb = function (callback) {
          return self.getProperties(resourceGroupName, accountName, callback);
        }
        return cb;
      };
      // Send request
      self.beginCreate(resourceGroupName, accountName, parameters, function (err, result){
        if (err) return callback(err);
        client.getPutOperationResult(result, getMethod(), callback);
      });
    }

    /**
     * Asynchronously creates a new storage account with the specified parameters.
     * Existing accounts cannot be updated with this API and should instead use
     * the Update Storage Account API. If an account is already created and
     * subsequent PUT request is issued with exact same set of properties, then
     * HTTP 200 would be returned.
     * @param {String} [accountName] The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.  
     *
     * @param {StorageAccountCreateParameters} [parameters] The parameters to provide for the created account.
     *
     * @param {StorageAccountPropertiesCreateParameters} [parameters.properties] 
     *
     * @param {AccountType} [parameters.properties.accountType] Gets or sets the account type. Possible values for this property include: 'Standard_LRS', 'Standard_ZRS', 'Standard_GRS', 'Standard_RAGRS', 'Premium_LRS'
     *
     * @param {String} [resourceGroupName] The name of the resource group within the userâ€™s subscription.
     *
     * @param {function} callback
     *
     * @returns {Stream} The Response stream
     */
    StorageAccounts.prototype.beginCreate = function (resourceGroupName, accountName, parameters, callback) {
      var client = this.client;
      if (!callback) {
        throw new Error('callback cannot be null.');
      }
      // Validate
      try {
        if (resourceGroupName === null || resourceGroupName === undefined) {
          throw new Error('\'resourceGroupName\' cannot be null');
        }
        if (resourceGroupName !== null && resourceGroupName !== undefined && typeof resourceGroupName !== 'string') {
          throw new Error('resourceGroupName must be of type string.');
        }
        if (accountName === null || accountName === undefined) {
          throw new Error('\'accountName\' cannot be null');
        }
        if (accountName !== null && accountName !== undefined && typeof accountName !== 'string') {
          throw new Error('accountName must be of type string.');
        }
        if (parameters === null || parameters === undefined) {
          throw new Error('\'parameters\' cannot be null');
        }
        if (parameters !== null && parameters !== undefined) {
          client._models['StorageAccountCreateParameters'].validate(parameters);
        }
      } catch (error) {
        return callback(error);
      }

      // Construct URL
      var requestUrl = this.client.baseUri + 
                       '//subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}';
      requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.credentials.subscriptionId));
      requestUrl = requestUrl.replace("{resourceGroupName}", encodeURIComponent(resourceGroupName));
      requestUrl = requestUrl.replace("{accountName}", encodeURIComponent(accountName));
      var queryParameters = [];
      queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
      if (queryParameters.length > 0) {
        requestUrl += '?' + queryParameters.join('&');
      }
      // trim all duplicate forward slashes in the url
      var regex = /([^:]\/)\/+/gi;
      requestUrl = requestUrl.replace(regex, '$1');

      // Create HTTP transport objects
      var httpRequest = new WebResource();
      httpRequest.method = 'PUT';
      httpRequest.headers = {};
      httpRequest.url = requestUrl;
      // Set Headers
      httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
      // Serialize Request
      var requestContent = null;
      requestContent = JSON.stringify(msRest.serializeObject(parameters));
      httpRequest.body = requestContent;
      httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
      // Send Request
      return client.pipeline(httpRequest, function (err, response, responseBody) {
        if (err) {
          return callback(err);
        }
        var statusCode = response.statusCode;
        if (statusCode !== 200 && statusCode !== 202) {
          var error = new Error(responseBody);
          error.statusCode = response.statusCode;
          error.request = httpRequest;
          error.response = response;
          if (responseBody === '') responseBody = null;
          var parsedErrorResponse;
          try {
            parsedErrorResponse = JSON.parse(responseBody);
            error.body = parsedErrorResponse;
              if (error.body !== null && error.body !== undefined) {
                error.body = client._models['CloudError'].deserialize(error.body);
              }
          } catch (defaultError) {
            error.message = util.format('Error "%s" occurred in deserializing the responseBody - "%s" for the default response.', defaultError, responseBody);
            return callback(error);
          }
          return callback(error);
        }
        // Create Result
        var result = new msRest.HttpOperationResponse();
        result.request = httpRequest;
        result.response = response;
        if (responseBody === '') responseBody = null;
        // Deserialize Response
        if (statusCode === 200) {
          var parsedResponse;
          try {
            parsedResponse = JSON.parse(responseBody);
            result.body = parsedResponse;
            if (result.body !== null && result.body !== undefined) {
              result.body = client._models['StorageAccount'].deserialize(result.body);
            }
          } catch (error) {
            var deserializationError = new Error(util.format('Error "%s" occurred in deserializing the responseBody - "%s"', error, responseBody));
            deserializationError.request = httpRequest;
            deserializationError.response = response;
            return callback(deserializationError);
          }
        }

        return callback(null, result);
      });
    };

    /**
     * Deletes a storage account in Microsoft Azure.
     * @param {String} [accountName] The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.  
     *
     * @param {String} [resourceGroupName] The name of the resource group within the userâ€™s subscription.
     *
     * @param {function} callback
     *
     * @returns {Stream} The Response stream
     */
    StorageAccounts.prototype.deleteMethod = function (resourceGroupName, accountName, callback) {
      var client = this.client;
      if (!callback) {
        throw new Error('callback cannot be null.');
      }
      // Validate
      try {
        if (resourceGroupName === null || resourceGroupName === undefined) {
          throw new Error('\'resourceGroupName\' cannot be null');
        }
        if (resourceGroupName !== null && resourceGroupName !== undefined && typeof resourceGroupName !== 'string') {
          throw new Error('resourceGroupName must be of type string.');
        }
        if (accountName === null || accountName === undefined) {
          throw new Error('\'accountName\' cannot be null');
        }
        if (accountName !== null && accountName !== undefined && typeof accountName !== 'string') {
          throw new Error('accountName must be of type string.');
        }
      } catch (error) {
        return callback(error);
      }

      // Construct URL
      var requestUrl = this.client.baseUri + 
                       '//subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}';
      requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.credentials.subscriptionId));
      requestUrl = requestUrl.replace("{resourceGroupName}", encodeURIComponent(resourceGroupName));
      requestUrl = requestUrl.replace("{accountName}", encodeURIComponent(accountName));
      var queryParameters = [];
      queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
      if (queryParameters.length > 0) {
        requestUrl += '?' + queryParameters.join('&');
      }
      // trim all duplicate forward slashes in the url
      var regex = /([^:]\/)\/+/gi;
      requestUrl = requestUrl.replace(regex, '$1');

      // Create HTTP transport objects
      var httpRequest = new WebResource();
      httpRequest.method = 'DELETE';
      httpRequest.headers = {};
      httpRequest.url = requestUrl;
      // Set Headers
      httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
      httpRequest.body = null;
      httpRequest.headers['Content-Length'] = 0;
      // Send Request
      return client.pipeline(httpRequest, function (err, response, responseBody) {
        if (err) {
          return callback(err);
        }
        var statusCode = response.statusCode;
        if (statusCode !== 200 && statusCode !== 204) {
          var error = new Error(responseBody);
          error.statusCode = response.statusCode;
          error.request = httpRequest;
          error.response = response;
          if (responseBody === '') responseBody = null;
          var parsedErrorResponse;
          try {
            parsedErrorResponse = JSON.parse(responseBody);
            error.body = parsedErrorResponse;
          } catch (defaultError) {
            error.message = util.format('Error "%s" occurred in deserializing the responseBody - "%s" for the default response.', defaultError, responseBody);
            return callback(error);
          }
          return callback(error);
        }
        // Create Result
        var result = new msRest.HttpOperationResponse();
        result.request = httpRequest;
        result.response = response;
        if (responseBody === '') responseBody = null;

        return callback(null, result);
      });
    };

    /**
     * Returns the properties for the specified storage account including but not
     * limited to name, account type, location, and account status. The ListKeys
     * operation should be used to retrieve storage keys.
     * @param {String} [accountName] The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.  
     *
     * @param {String} [resourceGroupName] The name of the resource group within the userâ€™s subscription.
     *
     * @param {function} callback
     *
     * @returns {Stream} The Response stream
     */
    StorageAccounts.prototype.getProperties = function (resourceGroupName, accountName, callback) {
      var client = this.client;
      if (!callback) {
        throw new Error('callback cannot be null.');
      }
      // Validate
      try {
        if (resourceGroupName === null || resourceGroupName === undefined) {
          throw new Error('\'resourceGroupName\' cannot be null');
        }
        if (resourceGroupName !== null && resourceGroupName !== undefined && typeof resourceGroupName !== 'string') {
          throw new Error('resourceGroupName must be of type string.');
        }
        if (accountName === null || accountName === undefined) {
          throw new Error('\'accountName\' cannot be null');
        }
        if (accountName !== null && accountName !== undefined && typeof accountName !== 'string') {
          throw new Error('accountName must be of type string.');
        }
      } catch (error) {
        return callback(error);
      }

      // Construct URL
      var requestUrl = this.client.baseUri + 
                       '//subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}';
      requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.credentials.subscriptionId));
      requestUrl = requestUrl.replace("{resourceGroupName}", encodeURIComponent(resourceGroupName));
      requestUrl = requestUrl.replace("{accountName}", encodeURIComponent(accountName));
      var queryParameters = [];
      queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
      if (queryParameters.length > 0) {
        requestUrl += '?' + queryParameters.join('&');
      }
      // trim all duplicate forward slashes in the url
      var regex = /([^:]\/)\/+/gi;
      requestUrl = requestUrl.replace(regex, '$1');

      // Create HTTP transport objects
      var httpRequest = new WebResource();
      httpRequest.method = 'GET';
      httpRequest.headers = {};
      httpRequest.url = requestUrl;
      // Set Headers
      httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
      httpRequest.body = null;
      httpRequest.headers['Content-Length'] = 0;
      // Send Request
      return client.pipeline(httpRequest, function (err, response, responseBody) {
        if (err) {
          return callback(err);
        }
        var statusCode = response.statusCode;
        if (statusCode !== 200) {
          var error = new Error(responseBody);
          error.statusCode = response.statusCode;
          error.request = httpRequest;
          error.response = response;
          if (responseBody === '') responseBody = null;
          var parsedErrorResponse;
          try {
            parsedErrorResponse = JSON.parse(responseBody);
            error.body = parsedErrorResponse;
              if (error.body !== null && error.body !== undefined) {
                error.body = client._models['CloudError'].deserialize(error.body);
              }
          } catch (defaultError) {
            error.message = util.format('Error "%s" occurred in deserializing the responseBody - "%s" for the default response.', defaultError, responseBody);
            return callback(error);
          }
          return callback(error);
        }
        // Create Result
        var result = new msRest.HttpOperationResponse();
        result.request = httpRequest;
        result.response = response;
        if (responseBody === '') responseBody = null;
        // Deserialize Response
        if (statusCode === 200) {
          var parsedResponse;
          try {
            parsedResponse = JSON.parse(responseBody);
            result.body = parsedResponse;
            if (result.body !== null && result.body !== undefined) {
              result.body = client._models['StorageAccount'].deserialize(result.body);
            }
          } catch (error) {
            var deserializationError = new Error(util.format('Error "%s" occurred in deserializing the responseBody - "%s"', error, responseBody));
            deserializationError.request = httpRequest;
            deserializationError.response = response;
            return callback(deserializationError);
          }
        }

        return callback(null, result);
      });
    };

    /**
     * Updates the account type or tags for a storage account. It can also be used
     * to add a custom domain (note that custom domains cannot be added via the
     * Create operation). Only one custom domain is supported per storage
     * account. This API can only be used to update one of tags, accountType, or
     * customDomain per call. To update multiple of these properties, call the
     * API multiple times with one change per call. This call does not change the
     * storage keys for the account. If you want to change storage account keys,
     * use the RegenerateKey operation. The location and name of the storage
     * account cannot be changed after creation.
     * @param {String} [accountName] The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.  
     *
     * @param {StorageAccountUpdateParameters} [parameters] The parameters to update on the account. Note that only one property can be changed at a time using this API. 
     *
     * @param {StorageAccountPropertiesUpdateParameters} [parameters.properties] 
     *
     * @param {AccountType} [parameters.properties.accountType] Gets or sets the account type. Note that StandardZRS and PremiumLRS accounts cannot be changed to other account types, and other account types cannot be changed to StandardZRS or PremiumLRS. Possible values for this property include: 'Standard_LRS', 'Standard_ZRS', 'Standard_GRS', 'Standard_RAGRS', 'Premium_LRS'
     *
     * @param {CustomDomain} [parameters.properties.customDomain] User domain assigned to the storage account. Name is the CNAME source. Only one custom domain is supported per storage account at this time. To clear the existing custom domain, use an empty string for the custom domain name property.
     *
     * @param {Boolean} [parameters.properties.customDomain.useSubDomain] Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates
     *
     * @param {String} [resourceGroupName] The name of the resource group within the userâ€™s subscription.
     *
     * @param {function} callback
     *
     * @returns {Stream} The Response stream
     */
    StorageAccounts.prototype.update = function (resourceGroupName, accountName, parameters, callback) {
      var client = this.client;
      if (!callback) {
        throw new Error('callback cannot be null.');
      }
      // Validate
      try {
        if (resourceGroupName === null || resourceGroupName === undefined) {
          throw new Error('\'resourceGroupName\' cannot be null');
        }
        if (resourceGroupName !== null && resourceGroupName !== undefined && typeof resourceGroupName !== 'string') {
          throw new Error('resourceGroupName must be of type string.');
        }
        if (accountName === null || accountName === undefined) {
          throw new Error('\'accountName\' cannot be null');
        }
        if (accountName !== null && accountName !== undefined && typeof accountName !== 'string') {
          throw new Error('accountName must be of type string.');
        }
        if (parameters === null || parameters === undefined) {
          throw new Error('\'parameters\' cannot be null');
        }
      } catch (error) {
        return callback(error);
      }

      // Construct URL
      var requestUrl = this.client.baseUri + 
                       '//subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}';
      requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.credentials.subscriptionId));
      requestUrl = requestUrl.replace("{resourceGroupName}", encodeURIComponent(resourceGroupName));
      requestUrl = requestUrl.replace("{accountName}", encodeURIComponent(accountName));
      var queryParameters = [];
      queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
      if (queryParameters.length > 0) {
        requestUrl += '?' + queryParameters.join('&');
      }
      // trim all duplicate forward slashes in the url
      var regex = /([^:]\/)\/+/gi;
      requestUrl = requestUrl.replace(regex, '$1');

      // Create HTTP transport objects
      var httpRequest = new WebResource();
      httpRequest.method = 'PATCH';
      httpRequest.headers = {};
      httpRequest.url = requestUrl;
      // Set Headers
      httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
      // Serialize Request
      var requestContent = null;
      requestContent = JSON.stringify(msRest.serializeObject(parameters));
      httpRequest.body = requestContent;
      httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
      // Send Request
      return client.pipeline(httpRequest, function (err, response, responseBody) {
        if (err) {
          return callback(err);
        }
        var statusCode = response.statusCode;
        if (statusCode !== 200) {
          var error = new Error(responseBody);
          error.statusCode = response.statusCode;
          error.request = httpRequest;
          error.response = response;
          if (responseBody === '') responseBody = null;
          var parsedErrorResponse;
          try {
            parsedErrorResponse = JSON.parse(responseBody);
            error.body = parsedErrorResponse;
              if (error.body !== null && error.body !== undefined) {
                error.body = client._models['CloudError'].deserialize(error.body);
              }
          } catch (defaultError) {
            error.message = util.format('Error "%s" occurred in deserializing the responseBody - "%s" for the default response.', defaultError, responseBody);
            return callback(error);
          }
          return callback(error);
        }
        // Create Result
        var result = new msRest.HttpOperationResponse();
        result.request = httpRequest;
        result.response = response;
        if (responseBody === '') responseBody = null;
        // Deserialize Response
        if (statusCode === 200) {
          var parsedResponse;
          try {
            parsedResponse = JSON.parse(responseBody);
            result.body = parsedResponse;
            if (result.body !== null && result.body !== undefined) {
              result.body = client._models['StorageAccount'].deserialize(result.body);
            }
          } catch (error) {
            var deserializationError = new Error(util.format('Error "%s" occurred in deserializing the responseBody - "%s"', error, responseBody));
            deserializationError.request = httpRequest;
            deserializationError.response = response;
            return callback(deserializationError);
          }
        }

        return callback(null, result);
      });
    };

    /**
     * Lists the access keys for the specified storage account.
     * @param {String} [accountName] The name of the storage account.
     *
     * @param {String} [resourceGroupName] The name of the resource group.
     *
     * @param {function} callback
     *
     * @returns {Stream} The Response stream
     */
    StorageAccounts.prototype.listKeys = function (resourceGroupName, accountName, callback) {
      var client = this.client;
      if (!callback) {
        throw new Error('callback cannot be null.');
      }
      // Validate
      try {
        if (resourceGroupName === null || resourceGroupName === undefined) {
          throw new Error('\'resourceGroupName\' cannot be null');
        }
        if (resourceGroupName !== null && resourceGroupName !== undefined && typeof resourceGroupName !== 'string') {
          throw new Error('resourceGroupName must be of type string.');
        }
        if (accountName === null || accountName === undefined) {
          throw new Error('\'accountName\' cannot be null');
        }
        if (accountName !== null && accountName !== undefined && typeof accountName !== 'string') {
          throw new Error('accountName must be of type string.');
        }
      } catch (error) {
        return callback(error);
      }

      // Construct URL
      var requestUrl = this.client.baseUri + 
                       '//subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/listKeys';
      requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.credentials.subscriptionId));
      requestUrl = requestUrl.replace("{resourceGroupName}", encodeURIComponent(resourceGroupName));
      requestUrl = requestUrl.replace("{accountName}", encodeURIComponent(accountName));
      var queryParameters = [];
      queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
      if (queryParameters.length > 0) {
        requestUrl += '?' + queryParameters.join('&');
      }
      // trim all duplicate forward slashes in the url
      var regex = /([^:]\/)\/+/gi;
      requestUrl = requestUrl.replace(regex, '$1');

      // Create HTTP transport objects
      var httpRequest = new WebResource();
      httpRequest.method = 'POST';
      httpRequest.headers = {};
      httpRequest.url = requestUrl;
      // Set Headers
      httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
      httpRequest.body = null;
      httpRequest.headers['Content-Length'] = 0;
      // Send Request
      return client.pipeline(httpRequest, function (err, response, responseBody) {
        if (err) {
          return callback(err);
        }
        var statusCode = response.statusCode;
        if (statusCode !== 200) {
          var error = new Error(responseBody);
          error.statusCode = response.statusCode;
          error.request = httpRequest;
          error.response = response;
          if (responseBody === '') responseBody = null;
          var parsedErrorResponse;
          try {
            parsedErrorResponse = JSON.parse(responseBody);
            error.body = parsedErrorResponse;
              if (error.body !== null && error.body !== undefined) {
                error.body = client._models['CloudError'].deserialize(error.body);
              }
          } catch (defaultError) {
            error.message = util.format('Error "%s" occurred in deserializing the responseBody - "%s" for the default response.', defaultError, responseBody);
            return callback(error);
          }
          return callback(error);
        }
        // Create Result
        var result = new msRest.HttpOperationResponse();
        result.request = httpRequest;
        result.response = response;
        if (responseBody === '') responseBody = null;
        // Deserialize Response
        if (statusCode === 200) {
          var parsedResponse;
          try {
            parsedResponse = JSON.parse(responseBody);
            result.body = parsedResponse;
            if (result.body !== null && result.body !== undefined) {
              result.body = client._models['StorageAccountKeys'].deserialize(result.body);
            }
          } catch (error) {
            var deserializationError = new Error(util.format('Error "%s" occurred in deserializing the responseBody - "%s"', error, responseBody));
            deserializationError.request = httpRequest;
            deserializationError.response = response;
            return callback(deserializationError);
          }
        }

        return callback(null, result);
      });
    };

    /**
     * Lists all the storage accounts available under the subscription. Note that
     * storage keys are not returned; use the ListKeys operation for this.
     * @param {function} callback
     *
     * @returns {Stream} The Response stream
     */
    StorageAccounts.prototype.list = function (callback) {
      var client = this.client;
      if (!callback) {
        throw new Error('callback cannot be null.');
      }

      // Construct URL
      var requestUrl = this.client.baseUri + 
                       '//subscriptions/{subscriptionId}/providers/Microsoft.Storage/storageAccounts';
      requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.credentials.subscriptionId));
      var queryParameters = [];
      queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
      if (queryParameters.length > 0) {
        requestUrl += '?' + queryParameters.join('&');
      }
      // trim all duplicate forward slashes in the url
      var regex = /([^:]\/)\/+/gi;
      requestUrl = requestUrl.replace(regex, '$1');

      // Create HTTP transport objects
      var httpRequest = new WebResource();
      httpRequest.method = 'GET';
      httpRequest.headers = {};
      httpRequest.url = requestUrl;
      // Set Headers
      httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
      httpRequest.body = null;
      httpRequest.headers['Content-Length'] = 0;
      // Send Request
      return client.pipeline(httpRequest, function (err, response, responseBody) {
        if (err) {
          return callback(err);
        }
        var statusCode = response.statusCode;
        if (statusCode !== 200) {
          var error = new Error(responseBody);
          error.statusCode = response.statusCode;
          error.request = httpRequest;
          error.response = response;
          if (responseBody === '') responseBody = null;
          var parsedErrorResponse;
          try {
            parsedErrorResponse = JSON.parse(responseBody);
            error.body = parsedErrorResponse;
              if (error.body !== null && error.body !== undefined) {
                error.body = client._models['CloudError'].deserialize(error.body);
              }
          } catch (defaultError) {
            error.message = util.format('Error "%s" occurred in deserializing the responseBody - "%s" for the default response.', defaultError, responseBody);
            return callback(error);
          }
          return callback(error);
        }
        // Create Result
        var result = new msRest.HttpOperationResponse();
        result.request = httpRequest;
        result.response = response;
        if (responseBody === '') responseBody = null;
        // Deserialize Response
        if (statusCode === 200) {
          var parsedResponse;
          try {
            parsedResponse = JSON.parse(responseBody);
            result.body = parsedResponse;
            if (result.body !== null && result.body !== undefined) {
              result.body = client._models['StorageAccountListResult'].deserialize(result.body);
            }
          } catch (error) {
            var deserializationError = new Error(util.format('Error "%s" occurred in deserializing the responseBody - "%s"', error, responseBody));
            deserializationError.request = httpRequest;
            deserializationError.response = response;
            return callback(deserializationError);
          }
        }

        return callback(null, result);
      });
    };

    /**
     * Lists all the storage accounts available under the given resource group.
     * Note that storage keys are not returned; use the ListKeys operation for
     * this.
     * @param {String} [resourceGroupName] The name of the resource group within the userâ€™s subscription.
     *
     * @param {function} callback
     *
     * @returns {Stream} The Response stream
     */
    StorageAccounts.prototype.listByResourceGroup = function (resourceGroupName, callback) {
      var client = this.client;
      if (!callback) {
        throw new Error('callback cannot be null.');
      }
      // Validate
      try {
        if (resourceGroupName === null || resourceGroupName === undefined) {
          throw new Error('\'resourceGroupName\' cannot be null');
        }
        if (resourceGroupName !== null && resourceGroupName !== undefined && typeof resourceGroupName !== 'string') {
          throw new Error('resourceGroupName must be of type string.');
        }
      } catch (error) {
        return callback(error);
      }

      // Construct URL
      var requestUrl = this.client.baseUri + 
                       '//subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts';
      requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.credentials.subscriptionId));
      requestUrl = requestUrl.replace("{resourceGroupName}", encodeURIComponent(resourceGroupName));
      var queryParameters = [];
      queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
      if (queryParameters.length > 0) {
        requestUrl += '?' + queryParameters.join('&');
      }
      // trim all duplicate forward slashes in the url
      var regex = /([^:]\/)\/+/gi;
      requestUrl = requestUrl.replace(regex, '$1');

      // Create HTTP transport objects
      var httpRequest = new WebResource();
      httpRequest.method = 'GET';
      httpRequest.headers = {};
      httpRequest.url = requestUrl;
      // Set Headers
      httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
      httpRequest.body = null;
      httpRequest.headers['Content-Length'] = 0;
      // Send Request
      return client.pipeline(httpRequest, function (err, response, responseBody) {
        if (err) {
          return callback(err);
        }
        var statusCode = response.statusCode;
        if (statusCode !== 200) {
          var error = new Error(responseBody);
          error.statusCode = response.statusCode;
          error.request = httpRequest;
          error.response = response;
          if (responseBody === '') responseBody = null;
          var parsedErrorResponse;
          try {
            parsedErrorResponse = JSON.parse(responseBody);
            error.body = parsedErrorResponse;
              if (error.body !== null && error.body !== undefined) {
                error.body = client._models['CloudError'].deserialize(error.body);
              }
          } catch (defaultError) {
            error.message = util.format('Error "%s" occurred in deserializing the responseBody - "%s" for the default response.', defaultError, responseBody);
            return callback(error);
          }
          return callback(error);
        }
        // Create Result
        var result = new msRest.HttpOperationResponse();
        result.request = httpRequest;
        result.response = response;
        if (responseBody === '') responseBody = null;
        // Deserialize Response
        if (statusCode === 200) {
          var parsedResponse;
          try {
            parsedResponse = JSON.parse(responseBody);
            result.body = parsedResponse;
            if (result.body !== null && result.body !== undefined) {
              result.body = client._models['StorageAccountListResult'].deserialize(result.body);
            }
          } catch (error) {
            var deserializationError = new Error(util.format('Error "%s" occurred in deserializing the responseBody - "%s"', error, responseBody));
            deserializationError.request = httpRequest;
            deserializationError.response = response;
            return callback(deserializationError);
          }
        }

        return callback(null, result);
      });
    };

    /**
     * Regenerates the access keys for the specified storage account.
     * @param {String} [accountName] The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.  
     *
     * @param {StorageAccountRegenerateKeyParameters} [regenerateKey] Specifies name of the key which should be regenerated.
     *
     * @param {KeyName} [regenerateKey.keyName] Possible values for this property include: 'key1', 'key2'
     *
     * @param {String} [resourceGroupName] The name of the resource group within the userâ€™s subscription.
     *
     * @param {function} callback
     *
     * @returns {Stream} The Response stream
     */
    StorageAccounts.prototype.regenerateKey = function (resourceGroupName, accountName, regenerateKey, callback) {
      var client = this.client;
      if (!callback) {
        throw new Error('callback cannot be null.');
      }
      // Validate
      try {
        if (resourceGroupName === null || resourceGroupName === undefined) {
          throw new Error('\'resourceGroupName\' cannot be null');
        }
        if (resourceGroupName !== null && resourceGroupName !== undefined && typeof resourceGroupName !== 'string') {
          throw new Error('resourceGroupName must be of type string.');
        }
        if (accountName === null || accountName === undefined) {
          throw new Error('\'accountName\' cannot be null');
        }
        if (accountName !== null && accountName !== undefined && typeof accountName !== 'string') {
          throw new Error('accountName must be of type string.');
        }
        if (regenerateKey === null || regenerateKey === undefined) {
          throw new Error('\'regenerateKey\' cannot be null');
        }
        if (regenerateKey !== null && regenerateKey !== undefined) {
          client._models['StorageAccountRegenerateKeyParameters'].validate(regenerateKey);
        }
      } catch (error) {
        return callback(error);
      }

      // Construct URL
      var requestUrl = this.client.baseUri + 
                       '//subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/regenerateKey';
      requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.credentials.subscriptionId));
      requestUrl = requestUrl.replace("{resourceGroupName}", encodeURIComponent(resourceGroupName));
      requestUrl = requestUrl.replace("{accountName}", encodeURIComponent(accountName));
      var queryParameters = [];
      queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
      if (queryParameters.length > 0) {
        requestUrl += '?' + queryParameters.join('&');
      }
      // trim all duplicate forward slashes in the url
      var regex = /([^:]\/)\/+/gi;
      requestUrl = requestUrl.replace(regex, '$1');

      // Create HTTP transport objects
      var httpRequest = new WebResource();
      httpRequest.method = 'POST';
      httpRequest.headers = {};
      httpRequest.url = requestUrl;
      // Set Headers
      httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
      // Serialize Request
      var requestContent = null;
      requestContent = JSON.stringify(msRest.serializeObject(regenerateKey));
      httpRequest.body = requestContent;
      httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
      // Send Request
      return client.pipeline(httpRequest, function (err, response, responseBody) {
        if (err) {
          return callback(err);
        }
        var statusCode = response.statusCode;
        if (statusCode !== 200) {
          var error = new Error(responseBody);
          error.statusCode = response.statusCode;
          error.request = httpRequest;
          error.response = response;
          if (responseBody === '') responseBody = null;
          var parsedErrorResponse;
          try {
            parsedErrorResponse = JSON.parse(responseBody);
            error.body = parsedErrorResponse;
              if (error.body !== null && error.body !== undefined) {
                error.body = client._models['CloudError'].deserialize(error.body);
              }
          } catch (defaultError) {
            error.message = util.format('Error "%s" occurred in deserializing the responseBody - "%s" for the default response.', defaultError, responseBody);
            return callback(error);
          }
          return callback(error);
        }
        // Create Result
        var result = new msRest.HttpOperationResponse();
        result.request = httpRequest;
        result.response = response;
        if (responseBody === '') responseBody = null;
        // Deserialize Response
        if (statusCode === 200) {
          var parsedResponse;
          try {
            parsedResponse = JSON.parse(responseBody);
            result.body = parsedResponse;
            if (result.body !== null && result.body !== undefined) {
              result.body = client._models['StorageAccountKeys'].deserialize(result.body);
            }
          } catch (error) {
            var deserializationError = new Error(util.format('Error "%s" occurred in deserializing the responseBody - "%s"', error, responseBody));
            deserializationError.request = httpRequest;
            deserializationError.response = response;
            return callback(deserializationError);
          }
        }

        return callback(null, result);
      });
    };

    /**
     * Lists all the storage accounts available under the subscription. Note that
     * storage keys are not returned; use the ListKeys operation for this.
     * @param {String} [nextLink] NextLink from the previous successful call to List operation.
     *
     * @param {function} callback
     *
     * @returns {Stream} The Response stream
     */
    StorageAccounts.prototype.listNext = function (nextLink, callback) {
      var client = this.client;
      if (!callback) {
        throw new Error('callback cannot be null.');
      }
      // Validate
      try {
        if (nextLink === null || nextLink === undefined) {
          throw new Error('\'nextLink\' cannot be null');
        }
        if (nextLink !== null && nextLink !== undefined && typeof nextLink !== 'string') {
          throw new Error('nextLink must be of type string.');
        }
      } catch (error) {
        return callback(error);
      }

      // Construct URL
      var requestUrl = '{nextLink}';
      requestUrl = requestUrl.replace("{nextLink}", nextLink);
      // trim all duplicate forward slashes in the url
      var regex = /([^:]\/)\/+/gi;
      requestUrl = requestUrl.replace(regex, '$1');

      // Create HTTP transport objects
      var httpRequest = new WebResource();
      httpRequest.method = 'GET';
      httpRequest.headers = {};
      httpRequest.url = requestUrl;
      // Set Headers
      httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
      httpRequest.body = null;
      httpRequest.headers['Content-Length'] = 0;
      // Send Request
      return client.pipeline(httpRequest, function (err, response, responseBody) {
        if (err) {
          return callback(err);
        }
        var statusCode = response.statusCode;
        if (statusCode !== 200) {
          var error = new Error(responseBody);
          error.statusCode = response.statusCode;
          error.request = httpRequest;
          error.response = response;
          if (responseBody === '') responseBody = null;
          var parsedErrorResponse;
          try {
            parsedErrorResponse = JSON.parse(responseBody);
            error.body = parsedErrorResponse;
              if (error.body !== null && error.body !== undefined) {
                error.body = client._models['CloudError'].deserialize(error.body);
              }
          } catch (defaultError) {
            error.message = util.format('Error "%s" occurred in deserializing the responseBody - "%s" for the default response.', defaultError, responseBody);
            return callback(error);
          }
          return callback(error);
        }
        // Create Result
        var result = new msRest.HttpOperationResponse();
        result.request = httpRequest;
        result.response = response;
        if (responseBody === '') responseBody = null;
        // Deserialize Response
        if (statusCode === 200) {
          var parsedResponse;
          try {
            parsedResponse = JSON.parse(responseBody);
            result.body = parsedResponse;
            if (result.body !== null && result.body !== undefined) {
              result.body = client._models['StorageAccountListResult'].deserialize(result.body);
            }
          } catch (error) {
            var deserializationError = new Error(util.format('Error "%s" occurred in deserializing the responseBody - "%s"', error, responseBody));
            deserializationError.request = httpRequest;
            deserializationError.response = response;
            return callback(deserializationError);
          }
        }

        return callback(null, result);
      });
    };

    /**
     * Lists all the storage accounts available under the given resource group.
     * Note that storage keys are not returned; use the ListKeys operation for
     * this.
     * @param {String} [nextLink] NextLink from the previous successful call to List operation.
     *
     * @param {function} callback
     *
     * @returns {Stream} The Response stream
     */
    StorageAccounts.prototype.listByResourceGroupNext = function (nextLink, callback) {
      var client = this.client;
      if (!callback) {
        throw new Error('callback cannot be null.');
      }
      // Validate
      try {
        if (nextLink === null || nextLink === undefined) {
          throw new Error('\'nextLink\' cannot be null');
        }
        if (nextLink !== null && nextLink !== undefined && typeof nextLink !== 'string') {
          throw new Error('nextLink must be of type string.');
        }
      } catch (error) {
        return callback(error);
      }

      // Construct URL
      var requestUrl = '{nextLink}';
      requestUrl = requestUrl.replace("{nextLink}", nextLink);
      // trim all duplicate forward slashes in the url
      var regex = /([^:]\/)\/+/gi;
      requestUrl = requestUrl.replace(regex, '$1');

      // Create HTTP transport objects
      var httpRequest = new WebResource();
      httpRequest.method = 'GET';
      httpRequest.headers = {};
      httpRequest.url = requestUrl;
      // Set Headers
      httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
      httpRequest.body = null;
      httpRequest.headers['Content-Length'] = 0;
      // Send Request
      return client.pipeline(httpRequest, function (err, response, responseBody) {
        if (err) {
          return callback(err);
        }
        var statusCode = response.statusCode;
        if (statusCode !== 200) {
          var error = new Error(responseBody);
          error.statusCode = response.statusCode;
          error.request = httpRequest;
          error.response = response;
          if (responseBody === '') responseBody = null;
          var parsedErrorResponse;
          try {
            parsedErrorResponse = JSON.parse(responseBody);
            error.body = parsedErrorResponse;
              if (error.body !== null && error.body !== undefined) {
                error.body = client._models['CloudError'].deserialize(error.body);
              }
          } catch (defaultError) {
            error.message = util.format('Error "%s" occurred in deserializing the responseBody - "%s" for the default response.', defaultError, responseBody);
            return callback(error);
          }
          return callback(error);
        }
        // Create Result
        var result = new msRest.HttpOperationResponse();
        result.request = httpRequest;
        result.response = response;
        if (responseBody === '') responseBody = null;
        // Deserialize Response
        if (statusCode === 200) {
          var parsedResponse;
          try {
            parsedResponse = JSON.parse(responseBody);
            result.body = parsedResponse;
            if (result.body !== null && result.body !== undefined) {
              result.body = client._models['StorageAccountListResult'].deserialize(result.body);
            }
          } catch (error) {
            var deserializationError = new Error(util.format('Error "%s" occurred in deserializing the responseBody - "%s"', error, responseBody));
            deserializationError.request = httpRequest;
            deserializationError.response = response;
            return callback(deserializationError);
          }
        }

        return callback(null, result);
      });
    };


module.exports = StorageAccounts;
