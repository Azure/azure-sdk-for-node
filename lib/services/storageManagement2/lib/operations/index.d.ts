/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * StorageAccounts
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorageManagementClient.
 */
export interface StorageAccounts {

    /**
     * Checks that account name is valid and is not in use.
     *
     * @param {string} name
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    checkNameAvailability(name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CheckNameAvailabilityResult>): void;
    checkNameAvailability(name: string, callback: ServiceCallback<models.CheckNameAvailabilityResult>): void;

    /**
     * Asynchronously creates a new storage account with the specified parameters.
     * If an account is already created and subsequent create request is issued
     * with different properties, the account properties will be updated. If an
     * account is already created and subsequent create or update request is
     * issued with exact same set of properties, the request will succeed.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     * 
     * @param {string} accountName The name of the storage account within the
     * specified resource group. Storage account names must be between 3 and 24
     * characters in length and use numbers and lower-case letters only.
     * 
     * @param {object} parameters The parameters to provide for the created
     * account.
     * 
     * @param {object} [parameters.sku] Required. Gets or sets the sku type.
     * 
     * @param {string} [parameters.sku.name] Gets or sets the sku name. Required
     * for account creation, optional for update. Note that in older versions,
     * sku name was called accountType. Possible values include: 'Standard_LRS',
     * 'Standard_GRS', 'Standard_RAGRS', 'Standard_ZRS', 'Premium_LRS'
     * 
     * @param {string} [parameters.kind] Required. Indicates the type of storage
     * account. Possible values include: 'Storage', 'BlobStorage'
     * 
     * @param {string} [parameters.location] Required. Gets or sets the location
     * of the resource. This will be one of the supported and registered Azure
     * Geo Regions (e.g. West US, East US, Southeast Asia, etc.). The geo region
     * of a resource cannot be changed once it is created, but if an identical
     * geo region is specified on update the request will succeed.
     * 
     * @param {object} [parameters.tags] Gets or sets a list of key value pairs
     * that describe the resource. These tags can be used in viewing and grouping
     * this resource (across resource groups). A maximum of 15 tags can be
     * provided for a resource. Each tag must have a key no greater than 128
     * characters and value no greater than 256 characters.
     * 
     * @param {object} [parameters.customDomain] User domain assigned to the
     * storage account. Name is the CNAME source. Only one custom domain is
     * supported per storage account at this time. To clear the existing custom
     * domain, use an empty string for the custom domain name property.
     * 
     * @param {string} [parameters.customDomain.name] Gets or sets the custom
     * domain name. Name is the CNAME source.
     * 
     * @param {boolean} [parameters.customDomain.useSubDomain] Indicates whether
     * indirect CName validation is enabled. Default value is false. This should
     * only be set on updates
     * 
     * @param {object} [parameters.encryption] Provides the encryption settings on
     * the account. If left unspecified the account encryption settings will
     * remain. The default setting is unencrypted.
     * 
     * @param {object} [parameters.encryption.services] Gets the services which
     * are encrypted.
     * 
     * @param {object} [parameters.encryption.services.blob] The blob service.
     * 
     * @param {boolean} [parameters.encryption.services.blob.enabled] A boolean
     * indicating whether or not the service is encrypted.
     * 
     * @param {string} [parameters.accessTier] Required for StandardBlob accounts.
     * The access tier used for billing. Access tier cannot be changed more than
     * once every 7 days (168 hours). Access tier cannot be set for StandardLRS,
     * StandardGRS, StandardRAGRS, or PremiumLRS account types. Possible values
     * include: 'Hot', 'Cool'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    create(resourceGroupName: string, accountName: string, parameters: models.StorageAccountCreateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageAccount>): void;
    create(resourceGroupName: string, accountName: string, parameters: models.StorageAccountCreateParameters, callback: ServiceCallback<models.StorageAccount>): void;

    /**
     * Asynchronously creates a new storage account with the specified parameters.
     * If an account is already created and subsequent create request is issued
     * with different properties, the account properties will be updated. If an
     * account is already created and subsequent create or update request is
     * issued with exact same set of properties, the request will succeed.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     * 
     * @param {string} accountName The name of the storage account within the
     * specified resource group. Storage account names must be between 3 and 24
     * characters in length and use numbers and lower-case letters only.
     * 
     * @param {object} parameters The parameters to provide for the created
     * account.
     * 
     * @param {object} [parameters.sku] Required. Gets or sets the sku type.
     * 
     * @param {string} [parameters.sku.name] Gets or sets the sku name. Required
     * for account creation, optional for update. Note that in older versions,
     * sku name was called accountType. Possible values include: 'Standard_LRS',
     * 'Standard_GRS', 'Standard_RAGRS', 'Standard_ZRS', 'Premium_LRS'
     * 
     * @param {string} [parameters.kind] Required. Indicates the type of storage
     * account. Possible values include: 'Storage', 'BlobStorage'
     * 
     * @param {string} [parameters.location] Required. Gets or sets the location
     * of the resource. This will be one of the supported and registered Azure
     * Geo Regions (e.g. West US, East US, Southeast Asia, etc.). The geo region
     * of a resource cannot be changed once it is created, but if an identical
     * geo region is specified on update the request will succeed.
     * 
     * @param {object} [parameters.tags] Gets or sets a list of key value pairs
     * that describe the resource. These tags can be used in viewing and grouping
     * this resource (across resource groups). A maximum of 15 tags can be
     * provided for a resource. Each tag must have a key no greater than 128
     * characters and value no greater than 256 characters.
     * 
     * @param {object} [parameters.customDomain] User domain assigned to the
     * storage account. Name is the CNAME source. Only one custom domain is
     * supported per storage account at this time. To clear the existing custom
     * domain, use an empty string for the custom domain name property.
     * 
     * @param {string} [parameters.customDomain.name] Gets or sets the custom
     * domain name. Name is the CNAME source.
     * 
     * @param {boolean} [parameters.customDomain.useSubDomain] Indicates whether
     * indirect CName validation is enabled. Default value is false. This should
     * only be set on updates
     * 
     * @param {object} [parameters.encryption] Provides the encryption settings on
     * the account. If left unspecified the account encryption settings will
     * remain. The default setting is unencrypted.
     * 
     * @param {object} [parameters.encryption.services] Gets the services which
     * are encrypted.
     * 
     * @param {object} [parameters.encryption.services.blob] The blob service.
     * 
     * @param {boolean} [parameters.encryption.services.blob.enabled] A boolean
     * indicating whether or not the service is encrypted.
     * 
     * @param {string} [parameters.accessTier] Required for StandardBlob accounts.
     * The access tier used for billing. Access tier cannot be changed more than
     * once every 7 days (168 hours). Access tier cannot be set for StandardLRS,
     * StandardGRS, StandardRAGRS, or PremiumLRS account types. Possible values
     * include: 'Hot', 'Cool'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreate(resourceGroupName: string, accountName: string, parameters: models.StorageAccountCreateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageAccount>): void;
    beginCreate(resourceGroupName: string, accountName: string, parameters: models.StorageAccountCreateParameters, callback: ServiceCallback<models.StorageAccount>): void;

    /**
     * Deletes a storage account in Microsoft Azure.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     * 
     * @param {string} accountName The name of the storage account within the
     * specified resource group. Storage account names must be between 3 and 24
     * characters in length and use numbers and lower-case letters only.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(resourceGroupName: string, accountName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, accountName: string, callback: ServiceCallback<void>): void;

    /**
     * Returns the properties for the specified storage account including but not
     * limited to name, account type, location, and account status. The ListKeys
     * operation should be used to retrieve storage keys.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     * 
     * @param {string} accountName The name of the storage account within the
     * specified resource group. Storage account names must be between 3 and 24
     * characters in length and use numbers and lower-case letters only.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getProperties(resourceGroupName: string, accountName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageAccount>): void;
    getProperties(resourceGroupName: string, accountName: string, callback: ServiceCallback<models.StorageAccount>): void;

    /**
     * The update operation can be used to update the account type, encryption, or
     * tags for a storage account. It can also be used to map the account to a
     * custom domain. Only one custom domain is supported per storage account
     * and. replacement/change of custom domain is not supported. In order to
     * replace an old custom domain, the old value must be cleared/unregistered
     * before a new value may be set. Update of multiple properties is supported.
     * This call does not change the storage keys for the account. If you want to
     * change storage account keys, use the regenerate keys operation.  The
     * location and name of the storage account cannot be changed after creation.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     * 
     * @param {string} accountName The name of the storage account within the
     * specified resource group. Storage account names must be between 3 and 24
     * characters in length and use numbers and lower-case letters only.
     * 
     * @param {object} parameters The parameters to provide for the updated
     * account.
     * 
     * @param {object} [parameters.sku] Gets or sets the sku type. Note that sku
     * cannot be updated to StandardZRS or ProvisionedLRS, nor can accounts of
     * that sku type be updated to any other value.
     * 
     * @param {string} [parameters.sku.name] Gets or sets the sku name. Required
     * for account creation, optional for update. Note that in older versions,
     * sku name was called accountType. Possible values include: 'Standard_LRS',
     * 'Standard_GRS', 'Standard_RAGRS', 'Standard_ZRS', 'Premium_LRS'
     * 
     * @param {object} [parameters.tags] Gets or sets a list of key value pairs
     * that describe the resource. These tags can be used in viewing and grouping
     * this resource (across resource groups). A maximum of 15 tags can be
     * provided for a resource. Each tag must have a key no greater than 128
     * characters and value no greater than 256 characters.
     * 
     * @param {object} [parameters.customDomain] User domain assigned to the
     * storage account. Name is the CNAME source. Only one custom domain is
     * supported per storage account at this time. To clear the existing custom
     * domain, use an empty string for the custom domain name property.
     * 
     * @param {string} [parameters.customDomain.name] Gets or sets the custom
     * domain name. Name is the CNAME source.
     * 
     * @param {boolean} [parameters.customDomain.useSubDomain] Indicates whether
     * indirect CName validation is enabled. Default value is false. This should
     * only be set on updates
     * 
     * @param {object} [parameters.encryption] Provides the encryption settings on
     * the account. The default setting is unencrypted.
     * 
     * @param {object} [parameters.encryption.services] Gets the services which
     * are encrypted.
     * 
     * @param {object} [parameters.encryption.services.blob] The blob service.
     * 
     * @param {boolean} [parameters.encryption.services.blob.enabled] A boolean
     * indicating whether or not the service is encrypted.
     * 
     * @param {string} [parameters.accessTier] The access tier used for billing.
     * Access tier cannot be changed more than once every 7 days (168 hours).
     * Access tier cannot be set for StandardLRS, StandardGRS, StandardRAGRS, or
     * PremiumLRS account types. Possible values include: 'Hot', 'Cool'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    update(resourceGroupName: string, accountName: string, parameters: models.StorageAccountUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageAccount>): void;
    update(resourceGroupName: string, accountName: string, parameters: models.StorageAccountUpdateParameters, callback: ServiceCallback<models.StorageAccount>): void;

    /**
     * Lists all the storage accounts available under the subscription. Note that
     * storage keys are not returned; use the ListKeys operation for this.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageAccountListResult>): void;
    list(callback: ServiceCallback<models.StorageAccountListResult>): void;

    /**
     * Lists all the storage accounts available under the given resource group.
     * Note that storage keys are not returned; use the ListKeys operation for
     * this.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageAccountListResult>): void;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.StorageAccountListResult>): void;

    /**
     * Lists the access keys for the specified storage account.
     *
     * @param {string} resourceGroupName The name of the resource group.
     * 
     * @param {string} accountName The name of the storage account.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listKeys(resourceGroupName: string, accountName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageAccountListKeysResult>): void;
    listKeys(resourceGroupName: string, accountName: string, callback: ServiceCallback<models.StorageAccountListKeysResult>): void;

    /**
     * Regenerates the access keys for the specified storage account.
     *
     * @param {string} resourceGroupName The name of the resource group within the
     * user's subscription.
     * 
     * @param {string} accountName The name of the storage account within the
     * specified resource group. Storage account names must be between 3 and 24
     * characters in length and use numbers and lower-case letters only.
     * 
     * @param {string} keyName
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    regenerateKey(resourceGroupName: string, accountName: string, keyName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageAccountListKeysResult>): void;
    regenerateKey(resourceGroupName: string, accountName: string, keyName: string, callback: ServiceCallback<models.StorageAccountListKeysResult>): void;
}

/**
 * @class
 * UsageOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the StorageManagementClient.
 */
export interface UsageOperations {

    /**
     * Gets the current usage count and the limit for the resources under the
     * subscription.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UsageListResult>): void;
    list(callback: ServiceCallback<models.UsageListResult>): void;
}
