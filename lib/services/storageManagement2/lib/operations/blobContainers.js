/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const WebResource = msRest.WebResource;

/**
 * Lists all containers and does not support a prefix like data plane. Also SRP
 * today does not return continuation token.
 *
 * @param {string} resourceGroupName The name of the resource group within the
 * user's subscription. The name is case insensitive.
 *
 * @param {string} accountName The name of the storage account within the
 * specified resource group. Storage account names must be between 3 and 24
 * characters in length and use numbers and lower-case letters only.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ListContainerItems} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _list(resourceGroupName, accountName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      if (resourceGroupName.length > 90)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MaxLength": 90');
      }
      if (resourceGroupName.length < 1)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MinLength": 1');
      }
      if (resourceGroupName.match(/^[-\w\._\(\)]+$/) === null)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
      }
    }
    if (accountName === null || accountName === undefined || typeof accountName.valueOf() !== 'string') {
      throw new Error('accountName cannot be null or undefined and it must be of type string.');
    }
    if (accountName !== null && accountName !== undefined) {
      if (accountName.length > 24)
      {
        throw new Error('"accountName" should satisfy the constraint - "MaxLength": 24');
      }
      if (accountName.length < 3)
      {
        throw new Error('"accountName" should satisfy the constraint - "MinLength": 3');
      }
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion !== null && this.client.apiVersion !== undefined) {
      if (this.client.apiVersion.length < 1)
      {
        throw new Error('"this.client.apiVersion" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId !== null && this.client.subscriptionId !== undefined) {
      if (this.client.subscriptionId.length < 1)
      {
        throw new Error('"this.client.subscriptionId" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{accountName}', encodeURIComponent(accountName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ListContainerItems']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Creates a new container under the specified account as described by request
 * body. The container resource includes metadata and properties for that
 * container. It does not include a list of the blobs contained by the
 * container.
 *
 * @param {string} resourceGroupName The name of the resource group within the
 * user's subscription. The name is case insensitive.
 *
 * @param {string} accountName The name of the storage account within the
 * specified resource group. Storage account names must be between 3 and 24
 * characters in length and use numbers and lower-case letters only.
 *
 * @param {string} containerName The name of the blob container within the
 * specified storage account. Blob container names must be between 3 and 63
 * characters in length and use numbers, lower-case letters and dash (-) only.
 * Every dash (-) character must be immediately preceded and followed by a
 * letter or number.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.publicAccess] Specifies whether data in the
 * container may be accessed publicly and the level of access. Possible values
 * include: 'Container', 'Blob', 'None'
 *
 * @param {object} [options.metadata] A name-value pair to associate with the
 * container as metadata.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link BlobContainer} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _create(resourceGroupName, accountName, containerName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let publicAccess = (options && options.publicAccess !== undefined) ? options.publicAccess : undefined;
  let metadata = (options && options.metadata !== undefined) ? options.metadata : undefined;
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      if (resourceGroupName.length > 90)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MaxLength": 90');
      }
      if (resourceGroupName.length < 1)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MinLength": 1');
      }
      if (resourceGroupName.match(/^[-\w\._\(\)]+$/) === null)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
      }
    }
    if (accountName === null || accountName === undefined || typeof accountName.valueOf() !== 'string') {
      throw new Error('accountName cannot be null or undefined and it must be of type string.');
    }
    if (accountName !== null && accountName !== undefined) {
      if (accountName.length > 24)
      {
        throw new Error('"accountName" should satisfy the constraint - "MaxLength": 24');
      }
      if (accountName.length < 3)
      {
        throw new Error('"accountName" should satisfy the constraint - "MinLength": 3');
      }
    }
    if (containerName === null || containerName === undefined || typeof containerName.valueOf() !== 'string') {
      throw new Error('containerName cannot be null or undefined and it must be of type string.');
    }
    if (containerName !== null && containerName !== undefined) {
      if (containerName.length > 63)
      {
        throw new Error('"containerName" should satisfy the constraint - "MaxLength": 63');
      }
      if (containerName.length < 3)
      {
        throw new Error('"containerName" should satisfy the constraint - "MinLength": 3');
      }
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion !== null && this.client.apiVersion !== undefined) {
      if (this.client.apiVersion.length < 1)
      {
        throw new Error('"this.client.apiVersion" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId !== null && this.client.subscriptionId !== undefined) {
      if (this.client.subscriptionId.length < 1)
      {
        throw new Error('"this.client.subscriptionId" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (publicAccess) {
      let allowedValues = [ 'Container', 'Blob', 'None' ];
      if (!allowedValues.some( function(item) { return item === publicAccess; })) {
        throw new Error(publicAccess + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    }
    if (metadata && typeof metadata === 'object') {
      for(let valueElement in metadata) {
        if (metadata[valueElement] !== null && metadata[valueElement] !== undefined && typeof metadata[valueElement].valueOf() !== 'string') {
          throw new Error('metadata[valueElement] must be of type string.');
        }
      }
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let blobContainer = new client.models['BlobContainer']();
  try {
    if ((publicAccess !== null && publicAccess !== undefined) || (metadata !== null && metadata !== undefined))
    {
      blobContainer.publicAccess = publicAccess;
      blobContainer.metadata = metadata;
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{accountName}', encodeURIComponent(accountName));
  requestUrl = requestUrl.replace('{containerName}', encodeURIComponent(containerName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (blobContainer !== null && blobContainer !== undefined) {
      let requestModelMapper = new client.models['BlobContainer']().mapper();
      requestModel = client.serialize(requestModelMapper, blobContainer, 'blobContainer');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(blobContainer, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['BlobContainer']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Updates container properties as specified in request body. Properties not
 * mentioned in the request will be unchanged. Update fails if the specified
 * container doesn't already exist.
 *
 * @param {string} resourceGroupName The name of the resource group within the
 * user's subscription. The name is case insensitive.
 *
 * @param {string} accountName The name of the storage account within the
 * specified resource group. Storage account names must be between 3 and 24
 * characters in length and use numbers and lower-case letters only.
 *
 * @param {string} containerName The name of the blob container within the
 * specified storage account. Blob container names must be between 3 and 63
 * characters in length and use numbers, lower-case letters and dash (-) only.
 * Every dash (-) character must be immediately preceded and followed by a
 * letter or number.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.publicAccess] Specifies whether data in the
 * container may be accessed publicly and the level of access. Possible values
 * include: 'Container', 'Blob', 'None'
 *
 * @param {object} [options.metadata] A name-value pair to associate with the
 * container as metadata.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link BlobContainer} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _update(resourceGroupName, accountName, containerName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let publicAccess = (options && options.publicAccess !== undefined) ? options.publicAccess : undefined;
  let metadata = (options && options.metadata !== undefined) ? options.metadata : undefined;
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      if (resourceGroupName.length > 90)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MaxLength": 90');
      }
      if (resourceGroupName.length < 1)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MinLength": 1');
      }
      if (resourceGroupName.match(/^[-\w\._\(\)]+$/) === null)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
      }
    }
    if (accountName === null || accountName === undefined || typeof accountName.valueOf() !== 'string') {
      throw new Error('accountName cannot be null or undefined and it must be of type string.');
    }
    if (accountName !== null && accountName !== undefined) {
      if (accountName.length > 24)
      {
        throw new Error('"accountName" should satisfy the constraint - "MaxLength": 24');
      }
      if (accountName.length < 3)
      {
        throw new Error('"accountName" should satisfy the constraint - "MinLength": 3');
      }
    }
    if (containerName === null || containerName === undefined || typeof containerName.valueOf() !== 'string') {
      throw new Error('containerName cannot be null or undefined and it must be of type string.');
    }
    if (containerName !== null && containerName !== undefined) {
      if (containerName.length > 63)
      {
        throw new Error('"containerName" should satisfy the constraint - "MaxLength": 63');
      }
      if (containerName.length < 3)
      {
        throw new Error('"containerName" should satisfy the constraint - "MinLength": 3');
      }
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion !== null && this.client.apiVersion !== undefined) {
      if (this.client.apiVersion.length < 1)
      {
        throw new Error('"this.client.apiVersion" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId !== null && this.client.subscriptionId !== undefined) {
      if (this.client.subscriptionId.length < 1)
      {
        throw new Error('"this.client.subscriptionId" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (publicAccess) {
      let allowedValues = [ 'Container', 'Blob', 'None' ];
      if (!allowedValues.some( function(item) { return item === publicAccess; })) {
        throw new Error(publicAccess + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    }
    if (metadata && typeof metadata === 'object') {
      for(let valueElement in metadata) {
        if (metadata[valueElement] !== null && metadata[valueElement] !== undefined && typeof metadata[valueElement].valueOf() !== 'string') {
          throw new Error('metadata[valueElement] must be of type string.');
        }
      }
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let blobContainer = new client.models['BlobContainer']();
  try {
    if ((publicAccess !== null && publicAccess !== undefined) || (metadata !== null && metadata !== undefined))
    {
      blobContainer.publicAccess = publicAccess;
      blobContainer.metadata = metadata;
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{accountName}', encodeURIComponent(accountName));
  requestUrl = requestUrl.replace('{containerName}', encodeURIComponent(containerName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (blobContainer !== null && blobContainer !== undefined) {
      let requestModelMapper = new client.models['BlobContainer']().mapper();
      requestModel = client.serialize(requestModelMapper, blobContainer, 'blobContainer');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(blobContainer, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['BlobContainer']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets properties of a specified container.
 *
 * @param {string} resourceGroupName The name of the resource group within the
 * user's subscription. The name is case insensitive.
 *
 * @param {string} accountName The name of the storage account within the
 * specified resource group. Storage account names must be between 3 and 24
 * characters in length and use numbers and lower-case letters only.
 *
 * @param {string} containerName The name of the blob container within the
 * specified storage account. Blob container names must be between 3 and 63
 * characters in length and use numbers, lower-case letters and dash (-) only.
 * Every dash (-) character must be immediately preceded and followed by a
 * letter or number.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link BlobContainer} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _get(resourceGroupName, accountName, containerName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      if (resourceGroupName.length > 90)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MaxLength": 90');
      }
      if (resourceGroupName.length < 1)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MinLength": 1');
      }
      if (resourceGroupName.match(/^[-\w\._\(\)]+$/) === null)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
      }
    }
    if (accountName === null || accountName === undefined || typeof accountName.valueOf() !== 'string') {
      throw new Error('accountName cannot be null or undefined and it must be of type string.');
    }
    if (accountName !== null && accountName !== undefined) {
      if (accountName.length > 24)
      {
        throw new Error('"accountName" should satisfy the constraint - "MaxLength": 24');
      }
      if (accountName.length < 3)
      {
        throw new Error('"accountName" should satisfy the constraint - "MinLength": 3');
      }
    }
    if (containerName === null || containerName === undefined || typeof containerName.valueOf() !== 'string') {
      throw new Error('containerName cannot be null or undefined and it must be of type string.');
    }
    if (containerName !== null && containerName !== undefined) {
      if (containerName.length > 63)
      {
        throw new Error('"containerName" should satisfy the constraint - "MaxLength": 63');
      }
      if (containerName.length < 3)
      {
        throw new Error('"containerName" should satisfy the constraint - "MinLength": 3');
      }
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion !== null && this.client.apiVersion !== undefined) {
      if (this.client.apiVersion.length < 1)
      {
        throw new Error('"this.client.apiVersion" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId !== null && this.client.subscriptionId !== undefined) {
      if (this.client.subscriptionId.length < 1)
      {
        throw new Error('"this.client.subscriptionId" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{accountName}', encodeURIComponent(accountName));
  requestUrl = requestUrl.replace('{containerName}', encodeURIComponent(containerName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['BlobContainer']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Deletes specified container under its account.
 *
 * @param {string} resourceGroupName The name of the resource group within the
 * user's subscription. The name is case insensitive.
 *
 * @param {string} accountName The name of the storage account within the
 * specified resource group. Storage account names must be between 3 and 24
 * characters in length and use numbers and lower-case letters only.
 *
 * @param {string} containerName The name of the blob container within the
 * specified storage account. Blob container names must be between 3 and 63
 * characters in length and use numbers, lower-case letters and dash (-) only.
 * Every dash (-) character must be immediately preceded and followed by a
 * letter or number.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteMethod(resourceGroupName, accountName, containerName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      if (resourceGroupName.length > 90)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MaxLength": 90');
      }
      if (resourceGroupName.length < 1)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MinLength": 1');
      }
      if (resourceGroupName.match(/^[-\w\._\(\)]+$/) === null)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
      }
    }
    if (accountName === null || accountName === undefined || typeof accountName.valueOf() !== 'string') {
      throw new Error('accountName cannot be null or undefined and it must be of type string.');
    }
    if (accountName !== null && accountName !== undefined) {
      if (accountName.length > 24)
      {
        throw new Error('"accountName" should satisfy the constraint - "MaxLength": 24');
      }
      if (accountName.length < 3)
      {
        throw new Error('"accountName" should satisfy the constraint - "MinLength": 3');
      }
    }
    if (containerName === null || containerName === undefined || typeof containerName.valueOf() !== 'string') {
      throw new Error('containerName cannot be null or undefined and it must be of type string.');
    }
    if (containerName !== null && containerName !== undefined) {
      if (containerName.length > 63)
      {
        throw new Error('"containerName" should satisfy the constraint - "MaxLength": 63');
      }
      if (containerName.length < 3)
      {
        throw new Error('"containerName" should satisfy the constraint - "MinLength": 3');
      }
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion !== null && this.client.apiVersion !== undefined) {
      if (this.client.apiVersion.length < 1)
      {
        throw new Error('"this.client.apiVersion" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId !== null && this.client.subscriptionId !== undefined) {
      if (this.client.subscriptionId.length < 1)
      {
        throw new Error('"this.client.subscriptionId" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{accountName}', encodeURIComponent(accountName));
  requestUrl = requestUrl.replace('{containerName}', encodeURIComponent(containerName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Sets legal hold tags. Setting the same tag results in an idempotent
 * operation. SetLegalHold follows an append pattern and does not clear out the
 * existing tags that are not specified in the request.
 *
 * @param {string} resourceGroupName The name of the resource group within the
 * user's subscription. The name is case insensitive.
 *
 * @param {string} accountName The name of the storage account within the
 * specified resource group. Storage account names must be between 3 and 24
 * characters in length and use numbers and lower-case letters only.
 *
 * @param {string} containerName The name of the blob container within the
 * specified storage account. Blob container names must be between 3 and 63
 * characters in length and use numbers, lower-case letters and dash (-) only.
 * Every dash (-) character must be immediately preceded and followed by a
 * letter or number.
 *
 * @param {array} tags Each tag should be 3 to 23 alphanumeric characters and
 * is normalized to lower case at SRP.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link LegalHold} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _setLegalHold(resourceGroupName, accountName, containerName, tags, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      if (resourceGroupName.length > 90)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MaxLength": 90');
      }
      if (resourceGroupName.length < 1)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MinLength": 1');
      }
      if (resourceGroupName.match(/^[-\w\._\(\)]+$/) === null)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
      }
    }
    if (accountName === null || accountName === undefined || typeof accountName.valueOf() !== 'string') {
      throw new Error('accountName cannot be null or undefined and it must be of type string.');
    }
    if (accountName !== null && accountName !== undefined) {
      if (accountName.length > 24)
      {
        throw new Error('"accountName" should satisfy the constraint - "MaxLength": 24');
      }
      if (accountName.length < 3)
      {
        throw new Error('"accountName" should satisfy the constraint - "MinLength": 3');
      }
    }
    if (containerName === null || containerName === undefined || typeof containerName.valueOf() !== 'string') {
      throw new Error('containerName cannot be null or undefined and it must be of type string.');
    }
    if (containerName !== null && containerName !== undefined) {
      if (containerName.length > 63)
      {
        throw new Error('"containerName" should satisfy the constraint - "MaxLength": 63');
      }
      if (containerName.length < 3)
      {
        throw new Error('"containerName" should satisfy the constraint - "MinLength": 3');
      }
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion !== null && this.client.apiVersion !== undefined) {
      if (this.client.apiVersion.length < 1)
      {
        throw new Error('"this.client.apiVersion" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId !== null && this.client.subscriptionId !== undefined) {
      if (this.client.subscriptionId.length < 1)
      {
        throw new Error('"this.client.subscriptionId" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (!Array.isArray(tags)) {
      throw new Error('tags cannot be null or undefined and it must be of type array.');
    }
    for (let i = 0; i < tags.length; i++) {
      if (tags[i] !== null && tags[i] !== undefined && typeof tags[i].valueOf() !== 'string') {
        throw new Error('tags[i] must be of type string.');
      }
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let legalHold = new client.models['LegalHold']();
  try {
    if (tags !== null && tags !== undefined)
    {
      legalHold.tags = tags;
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/setLegalHold';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{accountName}', encodeURIComponent(accountName));
  requestUrl = requestUrl.replace('{containerName}', encodeURIComponent(containerName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (legalHold !== null && legalHold !== undefined) {
      let requestModelMapper = new client.models['LegalHold']().mapper();
      requestModel = client.serialize(requestModelMapper, legalHold, 'legalHold');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(legalHold, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['LegalHold']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Clears legal hold tags. Clearing the same or non-existent tag results in an
 * idempotent operation. ClearLegalHold clears out only the specified tags in
 * the request.
 *
 * @param {string} resourceGroupName The name of the resource group within the
 * user's subscription. The name is case insensitive.
 *
 * @param {string} accountName The name of the storage account within the
 * specified resource group. Storage account names must be between 3 and 24
 * characters in length and use numbers and lower-case letters only.
 *
 * @param {string} containerName The name of the blob container within the
 * specified storage account. Blob container names must be between 3 and 63
 * characters in length and use numbers, lower-case letters and dash (-) only.
 * Every dash (-) character must be immediately preceded and followed by a
 * letter or number.
 *
 * @param {array} tags Each tag should be 3 to 23 alphanumeric characters and
 * is normalized to lower case at SRP.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link LegalHold} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _clearLegalHold(resourceGroupName, accountName, containerName, tags, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      if (resourceGroupName.length > 90)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MaxLength": 90');
      }
      if (resourceGroupName.length < 1)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MinLength": 1');
      }
      if (resourceGroupName.match(/^[-\w\._\(\)]+$/) === null)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
      }
    }
    if (accountName === null || accountName === undefined || typeof accountName.valueOf() !== 'string') {
      throw new Error('accountName cannot be null or undefined and it must be of type string.');
    }
    if (accountName !== null && accountName !== undefined) {
      if (accountName.length > 24)
      {
        throw new Error('"accountName" should satisfy the constraint - "MaxLength": 24');
      }
      if (accountName.length < 3)
      {
        throw new Error('"accountName" should satisfy the constraint - "MinLength": 3');
      }
    }
    if (containerName === null || containerName === undefined || typeof containerName.valueOf() !== 'string') {
      throw new Error('containerName cannot be null or undefined and it must be of type string.');
    }
    if (containerName !== null && containerName !== undefined) {
      if (containerName.length > 63)
      {
        throw new Error('"containerName" should satisfy the constraint - "MaxLength": 63');
      }
      if (containerName.length < 3)
      {
        throw new Error('"containerName" should satisfy the constraint - "MinLength": 3');
      }
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion !== null && this.client.apiVersion !== undefined) {
      if (this.client.apiVersion.length < 1)
      {
        throw new Error('"this.client.apiVersion" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId !== null && this.client.subscriptionId !== undefined) {
      if (this.client.subscriptionId.length < 1)
      {
        throw new Error('"this.client.subscriptionId" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (!Array.isArray(tags)) {
      throw new Error('tags cannot be null or undefined and it must be of type array.');
    }
    for (let i = 0; i < tags.length; i++) {
      if (tags[i] !== null && tags[i] !== undefined && typeof tags[i].valueOf() !== 'string') {
        throw new Error('tags[i] must be of type string.');
      }
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let legalHold = new client.models['LegalHold']();
  try {
    if (tags !== null && tags !== undefined)
    {
      legalHold.tags = tags;
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/clearLegalHold';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{accountName}', encodeURIComponent(accountName));
  requestUrl = requestUrl.replace('{containerName}', encodeURIComponent(containerName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (legalHold !== null && legalHold !== undefined) {
      let requestModelMapper = new client.models['LegalHold']().mapper();
      requestModel = client.serialize(requestModelMapper, legalHold, 'legalHold');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(legalHold, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['LegalHold']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Creates or updates an unlocked immutability policy. ETag in If-Match is
 * honored if given but not required for this operation.
 *
 * @param {string} resourceGroupName The name of the resource group within the
 * user's subscription. The name is case insensitive.
 *
 * @param {string} accountName The name of the storage account within the
 * specified resource group. Storage account names must be between 3 and 24
 * characters in length and use numbers and lower-case letters only.
 *
 * @param {string} containerName The name of the blob container within the
 * specified storage account. Blob container names must be between 3 and 63
 * characters in length and use numbers, lower-case letters and dash (-) only.
 * Every dash (-) character must be immediately preceded and followed by a
 * letter or number.
 *
 * @param {number} immutabilityPeriodSinceCreationInDays The immutability
 * period for the blobs in the container since the policy creation, in days.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.ifMatch] The entity state (ETag) version of the
 * immutability policy to update. A value of "*" can be used to apply the
 * operation only if the immutability policy already exists. If omitted, this
 * operation will always be applied.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ImmutabilityPolicy} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _createOrUpdateImmutabilityPolicy(resourceGroupName, accountName, containerName, immutabilityPeriodSinceCreationInDays, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let ifMatch = (options && options.ifMatch !== undefined) ? options.ifMatch : undefined;
  let immutabilityPolicyName = 'default';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      if (resourceGroupName.length > 90)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MaxLength": 90');
      }
      if (resourceGroupName.length < 1)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MinLength": 1');
      }
      if (resourceGroupName.match(/^[-\w\._\(\)]+$/) === null)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
      }
    }
    if (accountName === null || accountName === undefined || typeof accountName.valueOf() !== 'string') {
      throw new Error('accountName cannot be null or undefined and it must be of type string.');
    }
    if (accountName !== null && accountName !== undefined) {
      if (accountName.length > 24)
      {
        throw new Error('"accountName" should satisfy the constraint - "MaxLength": 24');
      }
      if (accountName.length < 3)
      {
        throw new Error('"accountName" should satisfy the constraint - "MinLength": 3');
      }
    }
    if (containerName === null || containerName === undefined || typeof containerName.valueOf() !== 'string') {
      throw new Error('containerName cannot be null or undefined and it must be of type string.');
    }
    if (containerName !== null && containerName !== undefined) {
      if (containerName.length > 63)
      {
        throw new Error('"containerName" should satisfy the constraint - "MaxLength": 63');
      }
      if (containerName.length < 3)
      {
        throw new Error('"containerName" should satisfy the constraint - "MinLength": 3');
      }
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion !== null && this.client.apiVersion !== undefined) {
      if (this.client.apiVersion.length < 1)
      {
        throw new Error('"this.client.apiVersion" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId !== null && this.client.subscriptionId !== undefined) {
      if (this.client.subscriptionId.length < 1)
      {
        throw new Error('"this.client.subscriptionId" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (ifMatch !== null && ifMatch !== undefined && typeof ifMatch.valueOf() !== 'string') {
      throw new Error('ifMatch must be of type string.');
    }
    if (immutabilityPeriodSinceCreationInDays === null || immutabilityPeriodSinceCreationInDays === undefined || typeof immutabilityPeriodSinceCreationInDays !== 'number') {
      throw new Error('immutabilityPeriodSinceCreationInDays cannot be null or undefined and it must be of type number.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let parameters;
  try {
    if (immutabilityPeriodSinceCreationInDays !== null && immutabilityPeriodSinceCreationInDays !== undefined)
    {
      parameters = new client.models['ImmutabilityPolicy']();
      parameters.immutabilityPeriodSinceCreationInDays = immutabilityPeriodSinceCreationInDays;
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{accountName}', encodeURIComponent(accountName));
  requestUrl = requestUrl.replace('{containerName}', encodeURIComponent(containerName));
  requestUrl = requestUrl.replace('{immutabilityPolicyName}', encodeURIComponent(immutabilityPolicyName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (ifMatch !== undefined && ifMatch !== null) {
    httpRequest.headers['If-Match'] = ifMatch;
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (parameters !== null && parameters !== undefined) {
      let requestModelMapper = new client.models['ImmutabilityPolicy']().mapper();
      requestModel = client.serialize(requestModelMapper, parameters, 'parameters');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(parameters, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ImmutabilityPolicy']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets the existing immutability policy along with the corresponding ETag in
 * response headers and body.
 *
 * @param {string} resourceGroupName The name of the resource group within the
 * user's subscription. The name is case insensitive.
 *
 * @param {string} accountName The name of the storage account within the
 * specified resource group. Storage account names must be between 3 and 24
 * characters in length and use numbers and lower-case letters only.
 *
 * @param {string} containerName The name of the blob container within the
 * specified storage account. Blob container names must be between 3 and 63
 * characters in length and use numbers, lower-case letters and dash (-) only.
 * Every dash (-) character must be immediately preceded and followed by a
 * letter or number.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.ifMatch] The entity state (ETag) version of the
 * immutability policy to update. A value of "*" can be used to apply the
 * operation only if the immutability policy already exists. If omitted, this
 * operation will always be applied.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ImmutabilityPolicy} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getImmutabilityPolicy(resourceGroupName, accountName, containerName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let ifMatch = (options && options.ifMatch !== undefined) ? options.ifMatch : undefined;
  let immutabilityPolicyName = 'default';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      if (resourceGroupName.length > 90)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MaxLength": 90');
      }
      if (resourceGroupName.length < 1)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MinLength": 1');
      }
      if (resourceGroupName.match(/^[-\w\._\(\)]+$/) === null)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
      }
    }
    if (accountName === null || accountName === undefined || typeof accountName.valueOf() !== 'string') {
      throw new Error('accountName cannot be null or undefined and it must be of type string.');
    }
    if (accountName !== null && accountName !== undefined) {
      if (accountName.length > 24)
      {
        throw new Error('"accountName" should satisfy the constraint - "MaxLength": 24');
      }
      if (accountName.length < 3)
      {
        throw new Error('"accountName" should satisfy the constraint - "MinLength": 3');
      }
    }
    if (containerName === null || containerName === undefined || typeof containerName.valueOf() !== 'string') {
      throw new Error('containerName cannot be null or undefined and it must be of type string.');
    }
    if (containerName !== null && containerName !== undefined) {
      if (containerName.length > 63)
      {
        throw new Error('"containerName" should satisfy the constraint - "MaxLength": 63');
      }
      if (containerName.length < 3)
      {
        throw new Error('"containerName" should satisfy the constraint - "MinLength": 3');
      }
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion !== null && this.client.apiVersion !== undefined) {
      if (this.client.apiVersion.length < 1)
      {
        throw new Error('"this.client.apiVersion" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId !== null && this.client.subscriptionId !== undefined) {
      if (this.client.subscriptionId.length < 1)
      {
        throw new Error('"this.client.subscriptionId" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (ifMatch !== null && ifMatch !== undefined && typeof ifMatch.valueOf() !== 'string') {
      throw new Error('ifMatch must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{accountName}', encodeURIComponent(accountName));
  requestUrl = requestUrl.replace('{containerName}', encodeURIComponent(containerName));
  requestUrl = requestUrl.replace('{immutabilityPolicyName}', encodeURIComponent(immutabilityPolicyName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (ifMatch !== undefined && ifMatch !== null) {
    httpRequest.headers['If-Match'] = ifMatch;
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ImmutabilityPolicy']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Aborts an unlocked immutability policy. The response of delete has
 * immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is required
 * for this operation. Deleting a locked immutability policy is not allowed,
 * only way is to delete the container after deleting all blobs inside the
 * container.
 *
 * @param {string} resourceGroupName The name of the resource group within the
 * user's subscription. The name is case insensitive.
 *
 * @param {string} accountName The name of the storage account within the
 * specified resource group. Storage account names must be between 3 and 24
 * characters in length and use numbers and lower-case letters only.
 *
 * @param {string} containerName The name of the blob container within the
 * specified storage account. Blob container names must be between 3 and 63
 * characters in length and use numbers, lower-case letters and dash (-) only.
 * Every dash (-) character must be immediately preceded and followed by a
 * letter or number.
 *
 * @param {string} ifMatch The entity state (ETag) version of the immutability
 * policy to update. A value of "*" can be used to apply the operation only if
 * the immutability policy already exists. If omitted, this operation will
 * always be applied.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ImmutabilityPolicy} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteImmutabilityPolicy(resourceGroupName, accountName, containerName, ifMatch, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let immutabilityPolicyName = 'default';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      if (resourceGroupName.length > 90)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MaxLength": 90');
      }
      if (resourceGroupName.length < 1)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MinLength": 1');
      }
      if (resourceGroupName.match(/^[-\w\._\(\)]+$/) === null)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
      }
    }
    if (accountName === null || accountName === undefined || typeof accountName.valueOf() !== 'string') {
      throw new Error('accountName cannot be null or undefined and it must be of type string.');
    }
    if (accountName !== null && accountName !== undefined) {
      if (accountName.length > 24)
      {
        throw new Error('"accountName" should satisfy the constraint - "MaxLength": 24');
      }
      if (accountName.length < 3)
      {
        throw new Error('"accountName" should satisfy the constraint - "MinLength": 3');
      }
    }
    if (containerName === null || containerName === undefined || typeof containerName.valueOf() !== 'string') {
      throw new Error('containerName cannot be null or undefined and it must be of type string.');
    }
    if (containerName !== null && containerName !== undefined) {
      if (containerName.length > 63)
      {
        throw new Error('"containerName" should satisfy the constraint - "MaxLength": 63');
      }
      if (containerName.length < 3)
      {
        throw new Error('"containerName" should satisfy the constraint - "MinLength": 3');
      }
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion !== null && this.client.apiVersion !== undefined) {
      if (this.client.apiVersion.length < 1)
      {
        throw new Error('"this.client.apiVersion" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId !== null && this.client.subscriptionId !== undefined) {
      if (this.client.subscriptionId.length < 1)
      {
        throw new Error('"this.client.subscriptionId" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (ifMatch === null || ifMatch === undefined || typeof ifMatch.valueOf() !== 'string') {
      throw new Error('ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{accountName}', encodeURIComponent(accountName));
  requestUrl = requestUrl.replace('{containerName}', encodeURIComponent(containerName));
  requestUrl = requestUrl.replace('{immutabilityPolicyName}', encodeURIComponent(immutabilityPolicyName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (ifMatch !== undefined && ifMatch !== null) {
    httpRequest.headers['If-Match'] = ifMatch;
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ImmutabilityPolicy']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Sets the ImmutabilityPolicy to Locked state. The only action allowed on a
 * Locked policy is ExtendImmutabilityPolicy action. ETag in If-Match is
 * required for this operation.
 *
 * @param {string} resourceGroupName The name of the resource group within the
 * user's subscription. The name is case insensitive.
 *
 * @param {string} accountName The name of the storage account within the
 * specified resource group. Storage account names must be between 3 and 24
 * characters in length and use numbers and lower-case letters only.
 *
 * @param {string} containerName The name of the blob container within the
 * specified storage account. Blob container names must be between 3 and 63
 * characters in length and use numbers, lower-case letters and dash (-) only.
 * Every dash (-) character must be immediately preceded and followed by a
 * letter or number.
 *
 * @param {string} ifMatch The entity state (ETag) version of the immutability
 * policy to update. A value of "*" can be used to apply the operation only if
 * the immutability policy already exists. If omitted, this operation will
 * always be applied.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ImmutabilityPolicy} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _lockImmutabilityPolicy(resourceGroupName, accountName, containerName, ifMatch, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      if (resourceGroupName.length > 90)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MaxLength": 90');
      }
      if (resourceGroupName.length < 1)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MinLength": 1');
      }
      if (resourceGroupName.match(/^[-\w\._\(\)]+$/) === null)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
      }
    }
    if (accountName === null || accountName === undefined || typeof accountName.valueOf() !== 'string') {
      throw new Error('accountName cannot be null or undefined and it must be of type string.');
    }
    if (accountName !== null && accountName !== undefined) {
      if (accountName.length > 24)
      {
        throw new Error('"accountName" should satisfy the constraint - "MaxLength": 24');
      }
      if (accountName.length < 3)
      {
        throw new Error('"accountName" should satisfy the constraint - "MinLength": 3');
      }
    }
    if (containerName === null || containerName === undefined || typeof containerName.valueOf() !== 'string') {
      throw new Error('containerName cannot be null or undefined and it must be of type string.');
    }
    if (containerName !== null && containerName !== undefined) {
      if (containerName.length > 63)
      {
        throw new Error('"containerName" should satisfy the constraint - "MaxLength": 63');
      }
      if (containerName.length < 3)
      {
        throw new Error('"containerName" should satisfy the constraint - "MinLength": 3');
      }
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion !== null && this.client.apiVersion !== undefined) {
      if (this.client.apiVersion.length < 1)
      {
        throw new Error('"this.client.apiVersion" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId !== null && this.client.subscriptionId !== undefined) {
      if (this.client.subscriptionId.length < 1)
      {
        throw new Error('"this.client.subscriptionId" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (ifMatch === null || ifMatch === undefined || typeof ifMatch.valueOf() !== 'string') {
      throw new Error('ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/default/lock';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{accountName}', encodeURIComponent(accountName));
  requestUrl = requestUrl.replace('{containerName}', encodeURIComponent(containerName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (ifMatch !== undefined && ifMatch !== null) {
    httpRequest.headers['If-Match'] = ifMatch;
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ImmutabilityPolicy']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Extends the immutabilityPeriodSinceCreationInDays of a locked
 * immutabilityPolicy. The only action allowed on a Locked policy will be this
 * action. ETag in If-Match is required for this operation.
 *
 * @param {string} resourceGroupName The name of the resource group within the
 * user's subscription. The name is case insensitive.
 *
 * @param {string} accountName The name of the storage account within the
 * specified resource group. Storage account names must be between 3 and 24
 * characters in length and use numbers and lower-case letters only.
 *
 * @param {string} containerName The name of the blob container within the
 * specified storage account. Blob container names must be between 3 and 63
 * characters in length and use numbers, lower-case letters and dash (-) only.
 * Every dash (-) character must be immediately preceded and followed by a
 * letter or number.
 *
 * @param {string} ifMatch The entity state (ETag) version of the immutability
 * policy to update. A value of "*" can be used to apply the operation only if
 * the immutability policy already exists. If omitted, this operation will
 * always be applied.
 *
 * @param {number} immutabilityPeriodSinceCreationInDays The immutability
 * period for the blobs in the container since the policy creation, in days.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ImmutabilityPolicy} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _extendImmutabilityPolicy(resourceGroupName, accountName, containerName, ifMatch, immutabilityPeriodSinceCreationInDays, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      if (resourceGroupName.length > 90)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MaxLength": 90');
      }
      if (resourceGroupName.length < 1)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MinLength": 1');
      }
      if (resourceGroupName.match(/^[-\w\._\(\)]+$/) === null)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "Pattern": /^[-\w\._\(\)]+$/');
      }
    }
    if (accountName === null || accountName === undefined || typeof accountName.valueOf() !== 'string') {
      throw new Error('accountName cannot be null or undefined and it must be of type string.');
    }
    if (accountName !== null && accountName !== undefined) {
      if (accountName.length > 24)
      {
        throw new Error('"accountName" should satisfy the constraint - "MaxLength": 24');
      }
      if (accountName.length < 3)
      {
        throw new Error('"accountName" should satisfy the constraint - "MinLength": 3');
      }
    }
    if (containerName === null || containerName === undefined || typeof containerName.valueOf() !== 'string') {
      throw new Error('containerName cannot be null or undefined and it must be of type string.');
    }
    if (containerName !== null && containerName !== undefined) {
      if (containerName.length > 63)
      {
        throw new Error('"containerName" should satisfy the constraint - "MaxLength": 63');
      }
      if (containerName.length < 3)
      {
        throw new Error('"containerName" should satisfy the constraint - "MinLength": 3');
      }
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion !== null && this.client.apiVersion !== undefined) {
      if (this.client.apiVersion.length < 1)
      {
        throw new Error('"this.client.apiVersion" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId !== null && this.client.subscriptionId !== undefined) {
      if (this.client.subscriptionId.length < 1)
      {
        throw new Error('"this.client.subscriptionId" should satisfy the constraint - "MinLength": 1');
      }
    }
    if (ifMatch === null || ifMatch === undefined || typeof ifMatch.valueOf() !== 'string') {
      throw new Error('ifMatch cannot be null or undefined and it must be of type string.');
    }
    if (immutabilityPeriodSinceCreationInDays === null || immutabilityPeriodSinceCreationInDays === undefined || typeof immutabilityPeriodSinceCreationInDays !== 'number') {
      throw new Error('immutabilityPeriodSinceCreationInDays cannot be null or undefined and it must be of type number.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }
  let parameters;
  try {
    if (immutabilityPeriodSinceCreationInDays !== null && immutabilityPeriodSinceCreationInDays !== undefined)
    {
      parameters = new client.models['ImmutabilityPolicy']();
      parameters.immutabilityPeriodSinceCreationInDays = immutabilityPeriodSinceCreationInDays;
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/default/extend';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{accountName}', encodeURIComponent(accountName));
  requestUrl = requestUrl.replace('{containerName}', encodeURIComponent(containerName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (ifMatch !== undefined && ifMatch !== null) {
    httpRequest.headers['If-Match'] = ifMatch;
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (parameters !== null && parameters !== undefined) {
      let requestModelMapper = new client.models['ImmutabilityPolicy']().mapper();
      requestModel = client.serialize(requestModelMapper, parameters, 'parameters');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(parameters, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ImmutabilityPolicy']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a BlobContainers. */
class BlobContainers {
  /**
   * Create a BlobContainers.
   * @param {StorageManagementClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._list = _list;
    this._create = _create;
    this._update = _update;
    this._get = _get;
    this._deleteMethod = _deleteMethod;
    this._setLegalHold = _setLegalHold;
    this._clearLegalHold = _clearLegalHold;
    this._createOrUpdateImmutabilityPolicy = _createOrUpdateImmutabilityPolicy;
    this._getImmutabilityPolicy = _getImmutabilityPolicy;
    this._deleteImmutabilityPolicy = _deleteImmutabilityPolicy;
    this._lockImmutabilityPolicy = _lockImmutabilityPolicy;
    this._extendImmutabilityPolicy = _extendImmutabilityPolicy;
  }

  /**
   * Lists all containers and does not support a prefix like data plane. Also SRP
   * today does not return continuation token.
   *
   * @param {string} resourceGroupName The name of the resource group within the
   * user's subscription. The name is case insensitive.
   *
   * @param {string} accountName The name of the storage account within the
   * specified resource group. Storage account names must be between 3 and 24
   * characters in length and use numbers and lower-case letters only.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ListContainerItems>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listWithHttpOperationResponse(resourceGroupName, accountName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._list(resourceGroupName, accountName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Lists all containers and does not support a prefix like data plane. Also SRP
   * today does not return continuation token.
   *
   * @param {string} resourceGroupName The name of the resource group within the
   * user's subscription. The name is case insensitive.
   *
   * @param {string} accountName The name of the storage account within the
   * specified resource group. Storage account names must be between 3 and 24
   * characters in length and use numbers and lower-case letters only.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ListContainerItems} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ListContainerItems} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  list(resourceGroupName, accountName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._list(resourceGroupName, accountName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._list(resourceGroupName, accountName, options, optionalCallback);
    }
  }

  /**
   * Creates a new container under the specified account as described by request
   * body. The container resource includes metadata and properties for that
   * container. It does not include a list of the blobs contained by the
   * container.
   *
   * @param {string} resourceGroupName The name of the resource group within the
   * user's subscription. The name is case insensitive.
   *
   * @param {string} accountName The name of the storage account within the
   * specified resource group. Storage account names must be between 3 and 24
   * characters in length and use numbers and lower-case letters only.
   *
   * @param {string} containerName The name of the blob container within the
   * specified storage account. Blob container names must be between 3 and 63
   * characters in length and use numbers, lower-case letters and dash (-) only.
   * Every dash (-) character must be immediately preceded and followed by a
   * letter or number.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.publicAccess] Specifies whether data in the
   * container may be accessed publicly and the level of access. Possible values
   * include: 'Container', 'Blob', 'None'
   *
   * @param {object} [options.metadata] A name-value pair to associate with the
   * container as metadata.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<BlobContainer>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createWithHttpOperationResponse(resourceGroupName, accountName, containerName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._create(resourceGroupName, accountName, containerName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Creates a new container under the specified account as described by request
   * body. The container resource includes metadata and properties for that
   * container. It does not include a list of the blobs contained by the
   * container.
   *
   * @param {string} resourceGroupName The name of the resource group within the
   * user's subscription. The name is case insensitive.
   *
   * @param {string} accountName The name of the storage account within the
   * specified resource group. Storage account names must be between 3 and 24
   * characters in length and use numbers and lower-case letters only.
   *
   * @param {string} containerName The name of the blob container within the
   * specified storage account. Blob container names must be between 3 and 63
   * characters in length and use numbers, lower-case letters and dash (-) only.
   * Every dash (-) character must be immediately preceded and followed by a
   * letter or number.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.publicAccess] Specifies whether data in the
   * container may be accessed publicly and the level of access. Possible values
   * include: 'Container', 'Blob', 'None'
   *
   * @param {object} [options.metadata] A name-value pair to associate with the
   * container as metadata.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {BlobContainer} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link BlobContainer} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  create(resourceGroupName, accountName, containerName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._create(resourceGroupName, accountName, containerName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._create(resourceGroupName, accountName, containerName, options, optionalCallback);
    }
  }

  /**
   * Updates container properties as specified in request body. Properties not
   * mentioned in the request will be unchanged. Update fails if the specified
   * container doesn't already exist.
   *
   * @param {string} resourceGroupName The name of the resource group within the
   * user's subscription. The name is case insensitive.
   *
   * @param {string} accountName The name of the storage account within the
   * specified resource group. Storage account names must be between 3 and 24
   * characters in length and use numbers and lower-case letters only.
   *
   * @param {string} containerName The name of the blob container within the
   * specified storage account. Blob container names must be between 3 and 63
   * characters in length and use numbers, lower-case letters and dash (-) only.
   * Every dash (-) character must be immediately preceded and followed by a
   * letter or number.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.publicAccess] Specifies whether data in the
   * container may be accessed publicly and the level of access. Possible values
   * include: 'Container', 'Blob', 'None'
   *
   * @param {object} [options.metadata] A name-value pair to associate with the
   * container as metadata.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<BlobContainer>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updateWithHttpOperationResponse(resourceGroupName, accountName, containerName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._update(resourceGroupName, accountName, containerName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Updates container properties as specified in request body. Properties not
   * mentioned in the request will be unchanged. Update fails if the specified
   * container doesn't already exist.
   *
   * @param {string} resourceGroupName The name of the resource group within the
   * user's subscription. The name is case insensitive.
   *
   * @param {string} accountName The name of the storage account within the
   * specified resource group. Storage account names must be between 3 and 24
   * characters in length and use numbers and lower-case letters only.
   *
   * @param {string} containerName The name of the blob container within the
   * specified storage account. Blob container names must be between 3 and 63
   * characters in length and use numbers, lower-case letters and dash (-) only.
   * Every dash (-) character must be immediately preceded and followed by a
   * letter or number.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.publicAccess] Specifies whether data in the
   * container may be accessed publicly and the level of access. Possible values
   * include: 'Container', 'Blob', 'None'
   *
   * @param {object} [options.metadata] A name-value pair to associate with the
   * container as metadata.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {BlobContainer} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link BlobContainer} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  update(resourceGroupName, accountName, containerName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._update(resourceGroupName, accountName, containerName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._update(resourceGroupName, accountName, containerName, options, optionalCallback);
    }
  }

  /**
   * Gets properties of a specified container.
   *
   * @param {string} resourceGroupName The name of the resource group within the
   * user's subscription. The name is case insensitive.
   *
   * @param {string} accountName The name of the storage account within the
   * specified resource group. Storage account names must be between 3 and 24
   * characters in length and use numbers and lower-case letters only.
   *
   * @param {string} containerName The name of the blob container within the
   * specified storage account. Blob container names must be between 3 and 63
   * characters in length and use numbers, lower-case letters and dash (-) only.
   * Every dash (-) character must be immediately preceded and followed by a
   * letter or number.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<BlobContainer>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWithHttpOperationResponse(resourceGroupName, accountName, containerName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._get(resourceGroupName, accountName, containerName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets properties of a specified container.
   *
   * @param {string} resourceGroupName The name of the resource group within the
   * user's subscription. The name is case insensitive.
   *
   * @param {string} accountName The name of the storage account within the
   * specified resource group. Storage account names must be between 3 and 24
   * characters in length and use numbers and lower-case letters only.
   *
   * @param {string} containerName The name of the blob container within the
   * specified storage account. Blob container names must be between 3 and 63
   * characters in length and use numbers, lower-case letters and dash (-) only.
   * Every dash (-) character must be immediately preceded and followed by a
   * letter or number.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {BlobContainer} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link BlobContainer} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  get(resourceGroupName, accountName, containerName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._get(resourceGroupName, accountName, containerName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._get(resourceGroupName, accountName, containerName, options, optionalCallback);
    }
  }

  /**
   * Deletes specified container under its account.
   *
   * @param {string} resourceGroupName The name of the resource group within the
   * user's subscription. The name is case insensitive.
   *
   * @param {string} accountName The name of the storage account within the
   * specified resource group. Storage account names must be between 3 and 24
   * characters in length and use numbers and lower-case letters only.
   *
   * @param {string} containerName The name of the blob container within the
   * specified storage account. Blob container names must be between 3 and 63
   * characters in length and use numbers, lower-case letters and dash (-) only.
   * Every dash (-) character must be immediately preceded and followed by a
   * letter or number.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteMethodWithHttpOperationResponse(resourceGroupName, accountName, containerName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteMethod(resourceGroupName, accountName, containerName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Deletes specified container under its account.
   *
   * @param {string} resourceGroupName The name of the resource group within the
   * user's subscription. The name is case insensitive.
   *
   * @param {string} accountName The name of the storage account within the
   * specified resource group. Storage account names must be between 3 and 24
   * characters in length and use numbers and lower-case letters only.
   *
   * @param {string} containerName The name of the blob container within the
   * specified storage account. Blob container names must be between 3 and 63
   * characters in length and use numbers, lower-case letters and dash (-) only.
   * Every dash (-) character must be immediately preceded and followed by a
   * letter or number.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(resourceGroupName, accountName, containerName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteMethod(resourceGroupName, accountName, containerName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteMethod(resourceGroupName, accountName, containerName, options, optionalCallback);
    }
  }

  /**
   * Sets legal hold tags. Setting the same tag results in an idempotent
   * operation. SetLegalHold follows an append pattern and does not clear out the
   * existing tags that are not specified in the request.
   *
   * @param {string} resourceGroupName The name of the resource group within the
   * user's subscription. The name is case insensitive.
   *
   * @param {string} accountName The name of the storage account within the
   * specified resource group. Storage account names must be between 3 and 24
   * characters in length and use numbers and lower-case letters only.
   *
   * @param {string} containerName The name of the blob container within the
   * specified storage account. Blob container names must be between 3 and 63
   * characters in length and use numbers, lower-case letters and dash (-) only.
   * Every dash (-) character must be immediately preceded and followed by a
   * letter or number.
   *
   * @param {array} tags Each tag should be 3 to 23 alphanumeric characters and
   * is normalized to lower case at SRP.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<LegalHold>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  setLegalHoldWithHttpOperationResponse(resourceGroupName, accountName, containerName, tags, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._setLegalHold(resourceGroupName, accountName, containerName, tags, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Sets legal hold tags. Setting the same tag results in an idempotent
   * operation. SetLegalHold follows an append pattern and does not clear out the
   * existing tags that are not specified in the request.
   *
   * @param {string} resourceGroupName The name of the resource group within the
   * user's subscription. The name is case insensitive.
   *
   * @param {string} accountName The name of the storage account within the
   * specified resource group. Storage account names must be between 3 and 24
   * characters in length and use numbers and lower-case letters only.
   *
   * @param {string} containerName The name of the blob container within the
   * specified storage account. Blob container names must be between 3 and 63
   * characters in length and use numbers, lower-case letters and dash (-) only.
   * Every dash (-) character must be immediately preceded and followed by a
   * letter or number.
   *
   * @param {array} tags Each tag should be 3 to 23 alphanumeric characters and
   * is normalized to lower case at SRP.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {LegalHold} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link LegalHold} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  setLegalHold(resourceGroupName, accountName, containerName, tags, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._setLegalHold(resourceGroupName, accountName, containerName, tags, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._setLegalHold(resourceGroupName, accountName, containerName, tags, options, optionalCallback);
    }
  }

  /**
   * Clears legal hold tags. Clearing the same or non-existent tag results in an
   * idempotent operation. ClearLegalHold clears out only the specified tags in
   * the request.
   *
   * @param {string} resourceGroupName The name of the resource group within the
   * user's subscription. The name is case insensitive.
   *
   * @param {string} accountName The name of the storage account within the
   * specified resource group. Storage account names must be between 3 and 24
   * characters in length and use numbers and lower-case letters only.
   *
   * @param {string} containerName The name of the blob container within the
   * specified storage account. Blob container names must be between 3 and 63
   * characters in length and use numbers, lower-case letters and dash (-) only.
   * Every dash (-) character must be immediately preceded and followed by a
   * letter or number.
   *
   * @param {array} tags Each tag should be 3 to 23 alphanumeric characters and
   * is normalized to lower case at SRP.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<LegalHold>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  clearLegalHoldWithHttpOperationResponse(resourceGroupName, accountName, containerName, tags, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._clearLegalHold(resourceGroupName, accountName, containerName, tags, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Clears legal hold tags. Clearing the same or non-existent tag results in an
   * idempotent operation. ClearLegalHold clears out only the specified tags in
   * the request.
   *
   * @param {string} resourceGroupName The name of the resource group within the
   * user's subscription. The name is case insensitive.
   *
   * @param {string} accountName The name of the storage account within the
   * specified resource group. Storage account names must be between 3 and 24
   * characters in length and use numbers and lower-case letters only.
   *
   * @param {string} containerName The name of the blob container within the
   * specified storage account. Blob container names must be between 3 and 63
   * characters in length and use numbers, lower-case letters and dash (-) only.
   * Every dash (-) character must be immediately preceded and followed by a
   * letter or number.
   *
   * @param {array} tags Each tag should be 3 to 23 alphanumeric characters and
   * is normalized to lower case at SRP.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {LegalHold} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link LegalHold} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  clearLegalHold(resourceGroupName, accountName, containerName, tags, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._clearLegalHold(resourceGroupName, accountName, containerName, tags, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._clearLegalHold(resourceGroupName, accountName, containerName, tags, options, optionalCallback);
    }
  }

  /**
   * Creates or updates an unlocked immutability policy. ETag in If-Match is
   * honored if given but not required for this operation.
   *
   * @param {string} resourceGroupName The name of the resource group within the
   * user's subscription. The name is case insensitive.
   *
   * @param {string} accountName The name of the storage account within the
   * specified resource group. Storage account names must be between 3 and 24
   * characters in length and use numbers and lower-case letters only.
   *
   * @param {string} containerName The name of the blob container within the
   * specified storage account. Blob container names must be between 3 and 63
   * characters in length and use numbers, lower-case letters and dash (-) only.
   * Every dash (-) character must be immediately preceded and followed by a
   * letter or number.
   *
   * @param {number} immutabilityPeriodSinceCreationInDays The immutability
   * period for the blobs in the container since the policy creation, in days.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.ifMatch] The entity state (ETag) version of the
   * immutability policy to update. A value of "*" can be used to apply the
   * operation only if the immutability policy already exists. If omitted, this
   * operation will always be applied.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ImmutabilityPolicy>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createOrUpdateImmutabilityPolicyWithHttpOperationResponse(resourceGroupName, accountName, containerName, immutabilityPeriodSinceCreationInDays, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._createOrUpdateImmutabilityPolicy(resourceGroupName, accountName, containerName, immutabilityPeriodSinceCreationInDays, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Creates or updates an unlocked immutability policy. ETag in If-Match is
   * honored if given but not required for this operation.
   *
   * @param {string} resourceGroupName The name of the resource group within the
   * user's subscription. The name is case insensitive.
   *
   * @param {string} accountName The name of the storage account within the
   * specified resource group. Storage account names must be between 3 and 24
   * characters in length and use numbers and lower-case letters only.
   *
   * @param {string} containerName The name of the blob container within the
   * specified storage account. Blob container names must be between 3 and 63
   * characters in length and use numbers, lower-case letters and dash (-) only.
   * Every dash (-) character must be immediately preceded and followed by a
   * letter or number.
   *
   * @param {number} immutabilityPeriodSinceCreationInDays The immutability
   * period for the blobs in the container since the policy creation, in days.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.ifMatch] The entity state (ETag) version of the
   * immutability policy to update. A value of "*" can be used to apply the
   * operation only if the immutability policy already exists. If omitted, this
   * operation will always be applied.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ImmutabilityPolicy} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ImmutabilityPolicy} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdateImmutabilityPolicy(resourceGroupName, accountName, containerName, immutabilityPeriodSinceCreationInDays, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._createOrUpdateImmutabilityPolicy(resourceGroupName, accountName, containerName, immutabilityPeriodSinceCreationInDays, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._createOrUpdateImmutabilityPolicy(resourceGroupName, accountName, containerName, immutabilityPeriodSinceCreationInDays, options, optionalCallback);
    }
  }

  /**
   * Gets the existing immutability policy along with the corresponding ETag in
   * response headers and body.
   *
   * @param {string} resourceGroupName The name of the resource group within the
   * user's subscription. The name is case insensitive.
   *
   * @param {string} accountName The name of the storage account within the
   * specified resource group. Storage account names must be between 3 and 24
   * characters in length and use numbers and lower-case letters only.
   *
   * @param {string} containerName The name of the blob container within the
   * specified storage account. Blob container names must be between 3 and 63
   * characters in length and use numbers, lower-case letters and dash (-) only.
   * Every dash (-) character must be immediately preceded and followed by a
   * letter or number.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.ifMatch] The entity state (ETag) version of the
   * immutability policy to update. A value of "*" can be used to apply the
   * operation only if the immutability policy already exists. If omitted, this
   * operation will always be applied.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ImmutabilityPolicy>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getImmutabilityPolicyWithHttpOperationResponse(resourceGroupName, accountName, containerName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getImmutabilityPolicy(resourceGroupName, accountName, containerName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets the existing immutability policy along with the corresponding ETag in
   * response headers and body.
   *
   * @param {string} resourceGroupName The name of the resource group within the
   * user's subscription. The name is case insensitive.
   *
   * @param {string} accountName The name of the storage account within the
   * specified resource group. Storage account names must be between 3 and 24
   * characters in length and use numbers and lower-case letters only.
   *
   * @param {string} containerName The name of the blob container within the
   * specified storage account. Blob container names must be between 3 and 63
   * characters in length and use numbers, lower-case letters and dash (-) only.
   * Every dash (-) character must be immediately preceded and followed by a
   * letter or number.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.ifMatch] The entity state (ETag) version of the
   * immutability policy to update. A value of "*" can be used to apply the
   * operation only if the immutability policy already exists. If omitted, this
   * operation will always be applied.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ImmutabilityPolicy} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ImmutabilityPolicy} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getImmutabilityPolicy(resourceGroupName, accountName, containerName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getImmutabilityPolicy(resourceGroupName, accountName, containerName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getImmutabilityPolicy(resourceGroupName, accountName, containerName, options, optionalCallback);
    }
  }

  /**
   * Aborts an unlocked immutability policy. The response of delete has
   * immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is required
   * for this operation. Deleting a locked immutability policy is not allowed,
   * only way is to delete the container after deleting all blobs inside the
   * container.
   *
   * @param {string} resourceGroupName The name of the resource group within the
   * user's subscription. The name is case insensitive.
   *
   * @param {string} accountName The name of the storage account within the
   * specified resource group. Storage account names must be between 3 and 24
   * characters in length and use numbers and lower-case letters only.
   *
   * @param {string} containerName The name of the blob container within the
   * specified storage account. Blob container names must be between 3 and 63
   * characters in length and use numbers, lower-case letters and dash (-) only.
   * Every dash (-) character must be immediately preceded and followed by a
   * letter or number.
   *
   * @param {string} ifMatch The entity state (ETag) version of the immutability
   * policy to update. A value of "*" can be used to apply the operation only if
   * the immutability policy already exists. If omitted, this operation will
   * always be applied.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ImmutabilityPolicy>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteImmutabilityPolicyWithHttpOperationResponse(resourceGroupName, accountName, containerName, ifMatch, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteImmutabilityPolicy(resourceGroupName, accountName, containerName, ifMatch, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Aborts an unlocked immutability policy. The response of delete has
   * immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is required
   * for this operation. Deleting a locked immutability policy is not allowed,
   * only way is to delete the container after deleting all blobs inside the
   * container.
   *
   * @param {string} resourceGroupName The name of the resource group within the
   * user's subscription. The name is case insensitive.
   *
   * @param {string} accountName The name of the storage account within the
   * specified resource group. Storage account names must be between 3 and 24
   * characters in length and use numbers and lower-case letters only.
   *
   * @param {string} containerName The name of the blob container within the
   * specified storage account. Blob container names must be between 3 and 63
   * characters in length and use numbers, lower-case letters and dash (-) only.
   * Every dash (-) character must be immediately preceded and followed by a
   * letter or number.
   *
   * @param {string} ifMatch The entity state (ETag) version of the immutability
   * policy to update. A value of "*" can be used to apply the operation only if
   * the immutability policy already exists. If omitted, this operation will
   * always be applied.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ImmutabilityPolicy} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ImmutabilityPolicy} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteImmutabilityPolicy(resourceGroupName, accountName, containerName, ifMatch, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteImmutabilityPolicy(resourceGroupName, accountName, containerName, ifMatch, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteImmutabilityPolicy(resourceGroupName, accountName, containerName, ifMatch, options, optionalCallback);
    }
  }

  /**
   * Sets the ImmutabilityPolicy to Locked state. The only action allowed on a
   * Locked policy is ExtendImmutabilityPolicy action. ETag in If-Match is
   * required for this operation.
   *
   * @param {string} resourceGroupName The name of the resource group within the
   * user's subscription. The name is case insensitive.
   *
   * @param {string} accountName The name of the storage account within the
   * specified resource group. Storage account names must be between 3 and 24
   * characters in length and use numbers and lower-case letters only.
   *
   * @param {string} containerName The name of the blob container within the
   * specified storage account. Blob container names must be between 3 and 63
   * characters in length and use numbers, lower-case letters and dash (-) only.
   * Every dash (-) character must be immediately preceded and followed by a
   * letter or number.
   *
   * @param {string} ifMatch The entity state (ETag) version of the immutability
   * policy to update. A value of "*" can be used to apply the operation only if
   * the immutability policy already exists. If omitted, this operation will
   * always be applied.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ImmutabilityPolicy>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  lockImmutabilityPolicyWithHttpOperationResponse(resourceGroupName, accountName, containerName, ifMatch, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._lockImmutabilityPolicy(resourceGroupName, accountName, containerName, ifMatch, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Sets the ImmutabilityPolicy to Locked state. The only action allowed on a
   * Locked policy is ExtendImmutabilityPolicy action. ETag in If-Match is
   * required for this operation.
   *
   * @param {string} resourceGroupName The name of the resource group within the
   * user's subscription. The name is case insensitive.
   *
   * @param {string} accountName The name of the storage account within the
   * specified resource group. Storage account names must be between 3 and 24
   * characters in length and use numbers and lower-case letters only.
   *
   * @param {string} containerName The name of the blob container within the
   * specified storage account. Blob container names must be between 3 and 63
   * characters in length and use numbers, lower-case letters and dash (-) only.
   * Every dash (-) character must be immediately preceded and followed by a
   * letter or number.
   *
   * @param {string} ifMatch The entity state (ETag) version of the immutability
   * policy to update. A value of "*" can be used to apply the operation only if
   * the immutability policy already exists. If omitted, this operation will
   * always be applied.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ImmutabilityPolicy} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ImmutabilityPolicy} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  lockImmutabilityPolicy(resourceGroupName, accountName, containerName, ifMatch, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._lockImmutabilityPolicy(resourceGroupName, accountName, containerName, ifMatch, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._lockImmutabilityPolicy(resourceGroupName, accountName, containerName, ifMatch, options, optionalCallback);
    }
  }

  /**
   * Extends the immutabilityPeriodSinceCreationInDays of a locked
   * immutabilityPolicy. The only action allowed on a Locked policy will be this
   * action. ETag in If-Match is required for this operation.
   *
   * @param {string} resourceGroupName The name of the resource group within the
   * user's subscription. The name is case insensitive.
   *
   * @param {string} accountName The name of the storage account within the
   * specified resource group. Storage account names must be between 3 and 24
   * characters in length and use numbers and lower-case letters only.
   *
   * @param {string} containerName The name of the blob container within the
   * specified storage account. Blob container names must be between 3 and 63
   * characters in length and use numbers, lower-case letters and dash (-) only.
   * Every dash (-) character must be immediately preceded and followed by a
   * letter or number.
   *
   * @param {string} ifMatch The entity state (ETag) version of the immutability
   * policy to update. A value of "*" can be used to apply the operation only if
   * the immutability policy already exists. If omitted, this operation will
   * always be applied.
   *
   * @param {number} immutabilityPeriodSinceCreationInDays The immutability
   * period for the blobs in the container since the policy creation, in days.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ImmutabilityPolicy>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  extendImmutabilityPolicyWithHttpOperationResponse(resourceGroupName, accountName, containerName, ifMatch, immutabilityPeriodSinceCreationInDays, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._extendImmutabilityPolicy(resourceGroupName, accountName, containerName, ifMatch, immutabilityPeriodSinceCreationInDays, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Extends the immutabilityPeriodSinceCreationInDays of a locked
   * immutabilityPolicy. The only action allowed on a Locked policy will be this
   * action. ETag in If-Match is required for this operation.
   *
   * @param {string} resourceGroupName The name of the resource group within the
   * user's subscription. The name is case insensitive.
   *
   * @param {string} accountName The name of the storage account within the
   * specified resource group. Storage account names must be between 3 and 24
   * characters in length and use numbers and lower-case letters only.
   *
   * @param {string} containerName The name of the blob container within the
   * specified storage account. Blob container names must be between 3 and 63
   * characters in length and use numbers, lower-case letters and dash (-) only.
   * Every dash (-) character must be immediately preceded and followed by a
   * letter or number.
   *
   * @param {string} ifMatch The entity state (ETag) version of the immutability
   * policy to update. A value of "*" can be used to apply the operation only if
   * the immutability policy already exists. If omitted, this operation will
   * always be applied.
   *
   * @param {number} immutabilityPeriodSinceCreationInDays The immutability
   * period for the blobs in the container since the policy creation, in days.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ImmutabilityPolicy} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ImmutabilityPolicy} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  extendImmutabilityPolicy(resourceGroupName, accountName, containerName, ifMatch, immutabilityPeriodSinceCreationInDays, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._extendImmutabilityPolicy(resourceGroupName, accountName, containerName, ifMatch, immutabilityPeriodSinceCreationInDays, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._extendImmutabilityPolicy(resourceGroupName, accountName, containerName, ifMatch, immutabilityPeriodSinceCreationInDays, options, optionalCallback);
    }
  }

}

module.exports = BlobContainers;
