/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { ServiceClient, ServiceClientOptions, ServiceCallback, HttpOperationResponse, ServiceClientCredentials } from 'ms-rest';
import { AzureServiceClient, AzureServiceClientOptions } from 'ms-rest-azure';
import * as models from "./models";
import * as operations from "./operations";

export default class WebSiteManagementClient extends AzureServiceClient {
  /**
   * Initializes a new instance of the WebSiteManagementClient class.
   * @constructor
   *
   * @class
   * @param {credentials} credentials - Credentials needed for the client to connect to Azure.
   *
   * @param {string} subscriptionId - Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
   *
   * @param {string} [baseUri] - The base URI of the service.
   *
   * @param {object} [options] - The parameter options
   *
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   *
   * @param {object} [options.requestOptions] - Options for the underlying request object
   * {@link https://github.com/request/request#requestoptions-callback Options doc}
   *
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   *
   * @param {string} [options.acceptLanguage] - The preferred language for the response.
   *
   * @param {number} [options.longRunningOperationRetryTimeout] - The retry timeout in seconds for Long Running Operations. Default value is 30.
   *
   * @param {boolean} [options.generateClientRequestId] - Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
   *
   */
  constructor(credentials: ServiceClientCredentials, subscriptionId: string, baseUri?: string, options?: AzureServiceClientOptions);

  credentials: ServiceClientCredentials;

  subscriptionId: string;

  apiVersion: string;

  acceptLanguage: string;

  longRunningOperationRetryTimeout: number;

  generateClientRequestId: boolean;

  // Operation groups
  appServiceCertificateOrders: operations.AppServiceCertificateOrders;
  certificateRegistrationProvider: operations.CertificateRegistrationProvider;
  domains: operations.Domains;
  topLevelDomains: operations.TopLevelDomains;
  domainRegistrationProvider: operations.DomainRegistrationProvider;
  certificates: operations.Certificates;
  deletedWebApps: operations.DeletedWebApps;
  diagnostics: operations.Diagnostics;
  provider: operations.Provider;
  recommendations: operations.Recommendations;
  webApps: operations.WebApps;
  appServiceEnvironments: operations.AppServiceEnvironments;
  appServicePlans: operations.AppServicePlans;
  resourceHealthMetadataOperations: operations.ResourceHealthMetadataOperations;


  /**
   * @summary Gets publishing user
   *
   * Gets publishing user
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<User>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getPublishingUserWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.User>>;

  /**
   * @summary Gets publishing user
   *
   * Gets publishing user
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {User} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {User} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link User} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getPublishingUser(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.User>;
  getPublishingUser(callback: ServiceCallback<models.User>): void;
  getPublishingUser(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.User>): void;


  /**
   * @summary Updates publishing user
   *
   * Updates publishing user
   *
   * @param {object} userDetails Details of publishing user
   *
   * @param {string} userDetails.publishingUserName Username used for publishing.
   *
   * @param {string} [userDetails.publishingPassword] Password used for
   * publishing.
   *
   * @param {string} [userDetails.publishingPasswordHash] Password hash used for
   * publishing.
   *
   * @param {string} [userDetails.publishingPasswordHashSalt] Password hash salt
   * used for publishing.
   *
   * @param {string} [userDetails.scmUri] Url of SCM site.
   *
   * @param {string} [userDetails.kind] Kind of resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<User>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updatePublishingUserWithHttpOperationResponse(userDetails: models.User, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.User>>;

  /**
   * @summary Updates publishing user
   *
   * Updates publishing user
   *
   * @param {object} userDetails Details of publishing user
   *
   * @param {string} userDetails.publishingUserName Username used for publishing.
   *
   * @param {string} [userDetails.publishingPassword] Password used for
   * publishing.
   *
   * @param {string} [userDetails.publishingPasswordHash] Password hash used for
   * publishing.
   *
   * @param {string} [userDetails.publishingPasswordHashSalt] Password hash salt
   * used for publishing.
   *
   * @param {string} [userDetails.scmUri] Url of SCM site.
   *
   * @param {string} [userDetails.kind] Kind of resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {User} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {User} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link User} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updatePublishingUser(userDetails: models.User, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.User>;
  updatePublishingUser(userDetails: models.User, callback: ServiceCallback<models.User>): void;
  updatePublishingUser(userDetails: models.User, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.User>): void;


  /**
   * @summary Gets the source controls available for Azure websites.
   *
   * Gets the source controls available for Azure websites.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SourceControlCollection>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  listSourceControlsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SourceControlCollection>>;

  /**
   * @summary Gets the source controls available for Azure websites.
   *
   * Gets the source controls available for Azure websites.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SourceControlCollection} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SourceControlCollection} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SourceControlCollection} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  listSourceControls(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SourceControlCollection>;
  listSourceControls(callback: ServiceCallback<models.SourceControlCollection>): void;
  listSourceControls(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SourceControlCollection>): void;


  /**
   * @summary Gets source control token
   *
   * Gets source control token
   *
   * @param {string} sourceControlType Type of source control
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SourceControl>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getSourceControlWithHttpOperationResponse(sourceControlType: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SourceControl>>;

  /**
   * @summary Gets source control token
   *
   * Gets source control token
   *
   * @param {string} sourceControlType Type of source control
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SourceControl} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SourceControl} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SourceControl} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getSourceControl(sourceControlType: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SourceControl>;
  getSourceControl(sourceControlType: string, callback: ServiceCallback<models.SourceControl>): void;
  getSourceControl(sourceControlType: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SourceControl>): void;


  /**
   * @summary Updates source control token
   *
   * Updates source control token
   *
   * @param {string} sourceControlType Type of source control
   *
   * @param {object} requestMessage Source control token information
   *
   * @param {string} [requestMessage.token] OAuth access token.
   *
   * @param {string} [requestMessage.tokenSecret] OAuth access token secret.
   *
   * @param {string} [requestMessage.refreshToken] OAuth refresh token.
   *
   * @param {date} [requestMessage.expirationTime] OAuth token expiration.
   *
   * @param {string} [requestMessage.kind] Kind of resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SourceControl>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateSourceControlWithHttpOperationResponse(sourceControlType: string, requestMessage: models.SourceControl, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SourceControl>>;

  /**
   * @summary Updates source control token
   *
   * Updates source control token
   *
   * @param {string} sourceControlType Type of source control
   *
   * @param {object} requestMessage Source control token information
   *
   * @param {string} [requestMessage.token] OAuth access token.
   *
   * @param {string} [requestMessage.tokenSecret] OAuth access token secret.
   *
   * @param {string} [requestMessage.refreshToken] OAuth refresh token.
   *
   * @param {date} [requestMessage.expirationTime] OAuth token expiration.
   *
   * @param {string} [requestMessage.kind] Kind of resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SourceControl} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SourceControl} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SourceControl} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateSourceControl(sourceControlType: string, requestMessage: models.SourceControl, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SourceControl>;
  updateSourceControl(sourceControlType: string, requestMessage: models.SourceControl, callback: ServiceCallback<models.SourceControl>): void;
  updateSourceControl(sourceControlType: string, requestMessage: models.SourceControl, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SourceControl>): void;


  /**
   * @summary Gets a list of meters for a given location.
   *
   * Gets a list of meters for a given location.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.billingLocation] Azure Location of billable
   * resource
   *
   * @param {string} [options.osType] App Service OS type meters used for
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<BillingMeterCollection>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  listBillingMetersWithHttpOperationResponse(options?: { billingLocation? : string, osType? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BillingMeterCollection>>;

  /**
   * @summary Gets a list of meters for a given location.
   *
   * Gets a list of meters for a given location.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.billingLocation] Azure Location of billable
   * resource
   *
   * @param {string} [options.osType] App Service OS type meters used for
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {BillingMeterCollection} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {BillingMeterCollection} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link BillingMeterCollection} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  listBillingMeters(options?: { billingLocation? : string, osType? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.BillingMeterCollection>;
  listBillingMeters(callback: ServiceCallback<models.BillingMeterCollection>): void;
  listBillingMeters(options: { billingLocation? : string, osType? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BillingMeterCollection>): void;


  /**
   * @summary Check if a resource name is available.
   *
   * Check if a resource name is available.
   *
   * @param {string} name Resource name to verify.
   *
   * @param {string} type Resource type used for verification. Possible values
   * include: 'Site', 'Slot', 'HostingEnvironment', 'PublishingUser',
   * 'Microsoft.Web/sites', 'Microsoft.Web/sites/slots',
   * 'Microsoft.Web/hostingEnvironments', 'Microsoft.Web/publishingUsers'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.isFqdn] Is fully qualified domain name.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ResourceNameAvailability>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  checkNameAvailabilityWithHttpOperationResponse(name: string, type: string, options?: { isFqdn? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceNameAvailability>>;

  /**
   * @summary Check if a resource name is available.
   *
   * Check if a resource name is available.
   *
   * @param {string} name Resource name to verify.
   *
   * @param {string} type Resource type used for verification. Possible values
   * include: 'Site', 'Slot', 'HostingEnvironment', 'PublishingUser',
   * 'Microsoft.Web/sites', 'Microsoft.Web/sites/slots',
   * 'Microsoft.Web/hostingEnvironments', 'Microsoft.Web/publishingUsers'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.isFqdn] Is fully qualified domain name.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ResourceNameAvailability} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ResourceNameAvailability} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ResourceNameAvailability} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  checkNameAvailability(name: string, type: string, options?: { isFqdn? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceNameAvailability>;
  checkNameAvailability(name: string, type: string, callback: ServiceCallback<models.ResourceNameAvailability>): void;
  checkNameAvailability(name: string, type: string, options: { isFqdn? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceNameAvailability>): void;


  /**
   * @summary Gets list of available geo regions plus ministamps
   *
   * Gets list of available geo regions plus ministamps
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DeploymentLocations>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getSubscriptionDeploymentLocationsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeploymentLocations>>;

  /**
   * @summary Gets list of available geo regions plus ministamps
   *
   * Gets list of available geo regions plus ministamps
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DeploymentLocations} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DeploymentLocations} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DeploymentLocations} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getSubscriptionDeploymentLocations(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeploymentLocations>;
  getSubscriptionDeploymentLocations(callback: ServiceCallback<models.DeploymentLocations>): void;
  getSubscriptionDeploymentLocations(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentLocations>): void;


  /**
   * @summary Get a list of available geographical regions.
   *
   * Get a list of available geographical regions.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.sku] Name of SKU used to filter the regions.
   * Possible values include: 'Free', 'Shared', 'Basic', 'Standard', 'Premium',
   * 'Dynamic', 'Isolated', 'PremiumV2', 'ElasticPremium', 'ElasticIsolated'
   *
   * @param {boolean} [options.linuxWorkersEnabled] Specify <code>true</code> if
   * you want to filter to only regions that support Linux workers.
   *
   * @param {boolean} [options.xenonWorkersEnabled] Specify <code>true</code> if
   * you want to filter to only regions that support Xenon workers.
   *
   * @param {boolean} [options.linuxDynamicWorkersEnabled] Specify
   * <code>true</code> if you want to filter to only regions that support Linux
   * Consumption Workers.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GeoRegionCollection>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  listGeoRegionsWithHttpOperationResponse(options?: { sku? : string, linuxWorkersEnabled? : boolean, xenonWorkersEnabled? : boolean, linuxDynamicWorkersEnabled? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GeoRegionCollection>>;

  /**
   * @summary Get a list of available geographical regions.
   *
   * Get a list of available geographical regions.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.sku] Name of SKU used to filter the regions.
   * Possible values include: 'Free', 'Shared', 'Basic', 'Standard', 'Premium',
   * 'Dynamic', 'Isolated', 'PremiumV2', 'ElasticPremium', 'ElasticIsolated'
   *
   * @param {boolean} [options.linuxWorkersEnabled] Specify <code>true</code> if
   * you want to filter to only regions that support Linux workers.
   *
   * @param {boolean} [options.xenonWorkersEnabled] Specify <code>true</code> if
   * you want to filter to only regions that support Xenon workers.
   *
   * @param {boolean} [options.linuxDynamicWorkersEnabled] Specify
   * <code>true</code> if you want to filter to only regions that support Linux
   * Consumption Workers.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {GeoRegionCollection} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {GeoRegionCollection} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GeoRegionCollection} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  listGeoRegions(options?: { sku? : string, linuxWorkersEnabled? : boolean, xenonWorkersEnabled? : boolean, linuxDynamicWorkersEnabled? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.GeoRegionCollection>;
  listGeoRegions(callback: ServiceCallback<models.GeoRegionCollection>): void;
  listGeoRegions(options: { sku? : string, linuxWorkersEnabled? : boolean, xenonWorkersEnabled? : boolean, linuxDynamicWorkersEnabled? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GeoRegionCollection>): void;


  /**
   * @summary List all apps that are assigned to a hostname.
   *
   * List all apps that are assigned to a hostname.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.name] Name of the object.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<IdentifierCollection>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  listSiteIdentifiersAssignedToHostNameWithHttpOperationResponse(options?: { name? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IdentifierCollection>>;

  /**
   * @summary List all apps that are assigned to a hostname.
   *
   * List all apps that are assigned to a hostname.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.name] Name of the object.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {IdentifierCollection} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {IdentifierCollection} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link IdentifierCollection} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  listSiteIdentifiersAssignedToHostName(options?: { name? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.IdentifierCollection>;
  listSiteIdentifiersAssignedToHostName(callback: ServiceCallback<models.IdentifierCollection>): void;
  listSiteIdentifiersAssignedToHostName(options: { name? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IdentifierCollection>): void;


  /**
   * @summary List all premier add-on offers.
   *
   * List all premier add-on offers.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PremierAddOnOfferCollection>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  listPremierAddOnOffersWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PremierAddOnOfferCollection>>;

  /**
   * @summary List all premier add-on offers.
   *
   * List all premier add-on offers.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {PremierAddOnOfferCollection} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {PremierAddOnOfferCollection} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PremierAddOnOfferCollection} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  listPremierAddOnOffers(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PremierAddOnOfferCollection>;
  listPremierAddOnOffers(callback: ServiceCallback<models.PremierAddOnOfferCollection>): void;
  listPremierAddOnOffers(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PremierAddOnOfferCollection>): void;


  /**
   * @summary List all SKUs.
   *
   * List all SKUs.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SkuInfos>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  listSkusWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SkuInfos>>;

  /**
   * @summary List all SKUs.
   *
   * List all SKUs.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SkuInfos} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SkuInfos} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SkuInfos} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  listSkus(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SkuInfos>;
  listSkus(callback: ServiceCallback<models.SkuInfos>): void;
  listSkus(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SkuInfos>): void;


  /**
   * @summary Verifies if this VNET is compatible with an App Service Environment
   * by analyzing the Network Security Group rules.
   *
   * Verifies if this VNET is compatible with an App Service Environment by
   * analyzing the Network Security Group rules.
   *
   * @param {object} parameters VNET information
   *
   * @param {string} [parameters.vnetResourceGroup] The Resource Group of the
   * VNET to be validated
   *
   * @param {string} [parameters.vnetName] The name of the VNET to be validated
   *
   * @param {string} [parameters.vnetSubnetName] The subnet name to be validated
   *
   * @param {string} [parameters.kind] Kind of resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<VnetValidationFailureDetails>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  verifyHostingEnvironmentVnetWithHttpOperationResponse(parameters: models.VnetParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VnetValidationFailureDetails>>;

  /**
   * @summary Verifies if this VNET is compatible with an App Service Environment
   * by analyzing the Network Security Group rules.
   *
   * Verifies if this VNET is compatible with an App Service Environment by
   * analyzing the Network Security Group rules.
   *
   * @param {object} parameters VNET information
   *
   * @param {string} [parameters.vnetResourceGroup] The Resource Group of the
   * VNET to be validated
   *
   * @param {string} [parameters.vnetName] The name of the VNET to be validated
   *
   * @param {string} [parameters.vnetSubnetName] The subnet name to be validated
   *
   * @param {string} [parameters.kind] Kind of resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {VnetValidationFailureDetails} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {VnetValidationFailureDetails} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link VnetValidationFailureDetails} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  verifyHostingEnvironmentVnet(parameters: models.VnetParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VnetValidationFailureDetails>;
  verifyHostingEnvironmentVnet(parameters: models.VnetParameters, callback: ServiceCallback<models.VnetValidationFailureDetails>): void;
  verifyHostingEnvironmentVnet(parameters: models.VnetParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetValidationFailureDetails>): void;


  /**
   * @summary Move resources between resource groups.
   *
   * Move resources between resource groups.
   *
   * @param {string} resourceGroupName Name of the resource group to which the
   * resource belongs.
   *
   * @param {object} moveResourceEnvelope Object that represents the resource to
   * move.
   *
   * @param {string} [moveResourceEnvelope.targetResourceGroup]
   *
   * @param {array} [moveResourceEnvelope.resources]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  moveWithHttpOperationResponse(resourceGroupName: string, moveResourceEnvelope: models.CsmMoveResourceEnvelope, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Move resources between resource groups.
   *
   * Move resources between resource groups.
   *
   * @param {string} resourceGroupName Name of the resource group to which the
   * resource belongs.
   *
   * @param {object} moveResourceEnvelope Object that represents the resource to
   * move.
   *
   * @param {string} [moveResourceEnvelope.targetResourceGroup]
   *
   * @param {array} [moveResourceEnvelope.resources]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  move(resourceGroupName: string, moveResourceEnvelope: models.CsmMoveResourceEnvelope, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  move(resourceGroupName: string, moveResourceEnvelope: models.CsmMoveResourceEnvelope, callback: ServiceCallback<void>): void;
  move(resourceGroupName: string, moveResourceEnvelope: models.CsmMoveResourceEnvelope, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Validate if a resource can be created.
   *
   * Validate if a resource can be created.
   *
   * @param {string} resourceGroupName Name of the resource group to which the
   * resource belongs.
   *
   * @param {object} validateRequest Request with the resources to validate.
   *
   * @param {string} validateRequest.name Resource name to verify.
   *
   * @param {string} validateRequest.type Resource type used for verification.
   * Possible values include: 'ServerFarm', 'Site'
   *
   * @param {string} validateRequest.location Expected location of the resource.
   *
   * @param {string} [validateRequest.serverFarmId] ARM resource ID of an App
   * Service plan that would host the app.
   *
   * @param {string} [validateRequest.skuName] Name of the target SKU for the App
   * Service plan.
   *
   * @param {boolean} [validateRequest.needLinuxWorkers] <code>true</code> if App
   * Service plan is for Linux workers; otherwise, <code>false</code>.
   *
   * @param {boolean} [validateRequest.isSpot] <code>true</code> if App Service
   * plan is for Spot instances; otherwise, <code>false</code>.
   *
   * @param {number} [validateRequest.capacity] Target capacity of the App
   * Service plan (number of VM's).
   *
   * @param {string} [validateRequest.hostingEnvironment] Name of App Service
   * Environment where app or App Service plan should be created.
   *
   * @param {boolean} [validateRequest.isXenon] <code>true</code> if App Service
   * plan is running as a windows container
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ValidateResponse>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  validateWithHttpOperationResponse(resourceGroupName: string, validateRequest: models.ValidateRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ValidateResponse>>;

  /**
   * @summary Validate if a resource can be created.
   *
   * Validate if a resource can be created.
   *
   * @param {string} resourceGroupName Name of the resource group to which the
   * resource belongs.
   *
   * @param {object} validateRequest Request with the resources to validate.
   *
   * @param {string} validateRequest.name Resource name to verify.
   *
   * @param {string} validateRequest.type Resource type used for verification.
   * Possible values include: 'ServerFarm', 'Site'
   *
   * @param {string} validateRequest.location Expected location of the resource.
   *
   * @param {string} [validateRequest.serverFarmId] ARM resource ID of an App
   * Service plan that would host the app.
   *
   * @param {string} [validateRequest.skuName] Name of the target SKU for the App
   * Service plan.
   *
   * @param {boolean} [validateRequest.needLinuxWorkers] <code>true</code> if App
   * Service plan is for Linux workers; otherwise, <code>false</code>.
   *
   * @param {boolean} [validateRequest.isSpot] <code>true</code> if App Service
   * plan is for Spot instances; otherwise, <code>false</code>.
   *
   * @param {number} [validateRequest.capacity] Target capacity of the App
   * Service plan (number of VM's).
   *
   * @param {string} [validateRequest.hostingEnvironment] Name of App Service
   * Environment where app or App Service plan should be created.
   *
   * @param {boolean} [validateRequest.isXenon] <code>true</code> if App Service
   * plan is running as a windows container
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ValidateResponse} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ValidateResponse} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ValidateResponse} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  validate(resourceGroupName: string, validateRequest: models.ValidateRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ValidateResponse>;
  validate(resourceGroupName: string, validateRequest: models.ValidateRequest, callback: ServiceCallback<models.ValidateResponse>): void;
  validate(resourceGroupName: string, validateRequest: models.ValidateRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ValidateResponse>): void;


  /**
   * @summary Validate whether a resource can be moved.
   *
   * Validate whether a resource can be moved.
   *
   * @param {string} resourceGroupName Name of the resource group to which the
   * resource belongs.
   *
   * @param {object} moveResourceEnvelope Object that represents the resource to
   * move.
   *
   * @param {string} [moveResourceEnvelope.targetResourceGroup]
   *
   * @param {array} [moveResourceEnvelope.resources]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  validateMoveWithHttpOperationResponse(resourceGroupName: string, moveResourceEnvelope: models.CsmMoveResourceEnvelope, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Validate whether a resource can be moved.
   *
   * Validate whether a resource can be moved.
   *
   * @param {string} resourceGroupName Name of the resource group to which the
   * resource belongs.
   *
   * @param {object} moveResourceEnvelope Object that represents the resource to
   * move.
   *
   * @param {string} [moveResourceEnvelope.targetResourceGroup]
   *
   * @param {array} [moveResourceEnvelope.resources]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  validateMove(resourceGroupName: string, moveResourceEnvelope: models.CsmMoveResourceEnvelope, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  validateMove(resourceGroupName: string, moveResourceEnvelope: models.CsmMoveResourceEnvelope, callback: ServiceCallback<void>): void;
  validateMove(resourceGroupName: string, moveResourceEnvelope: models.CsmMoveResourceEnvelope, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Gets the source controls available for Azure websites.
   *
   * Gets the source controls available for Azure websites.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SourceControlCollection>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  listSourceControlsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SourceControlCollection>>;

  /**
   * @summary Gets the source controls available for Azure websites.
   *
   * Gets the source controls available for Azure websites.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SourceControlCollection} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SourceControlCollection} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SourceControlCollection} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  listSourceControlsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SourceControlCollection>;
  listSourceControlsNext(nextPageLink: string, callback: ServiceCallback<models.SourceControlCollection>): void;
  listSourceControlsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SourceControlCollection>): void;


  /**
   * @summary Gets a list of meters for a given location.
   *
   * Gets a list of meters for a given location.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<BillingMeterCollection>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  listBillingMetersNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BillingMeterCollection>>;

  /**
   * @summary Gets a list of meters for a given location.
   *
   * Gets a list of meters for a given location.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {BillingMeterCollection} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {BillingMeterCollection} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link BillingMeterCollection} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  listBillingMetersNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BillingMeterCollection>;
  listBillingMetersNext(nextPageLink: string, callback: ServiceCallback<models.BillingMeterCollection>): void;
  listBillingMetersNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BillingMeterCollection>): void;


  /**
   * @summary Get a list of available geographical regions.
   *
   * Get a list of available geographical regions.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GeoRegionCollection>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  listGeoRegionsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GeoRegionCollection>>;

  /**
   * @summary Get a list of available geographical regions.
   *
   * Get a list of available geographical regions.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {GeoRegionCollection} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {GeoRegionCollection} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GeoRegionCollection} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  listGeoRegionsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GeoRegionCollection>;
  listGeoRegionsNext(nextPageLink: string, callback: ServiceCallback<models.GeoRegionCollection>): void;
  listGeoRegionsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GeoRegionCollection>): void;


  /**
   * @summary List all apps that are assigned to a hostname.
   *
   * List all apps that are assigned to a hostname.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<IdentifierCollection>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  listSiteIdentifiersAssignedToHostNameNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IdentifierCollection>>;

  /**
   * @summary List all apps that are assigned to a hostname.
   *
   * List all apps that are assigned to a hostname.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {IdentifierCollection} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {IdentifierCollection} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link IdentifierCollection} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  listSiteIdentifiersAssignedToHostNameNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IdentifierCollection>;
  listSiteIdentifiersAssignedToHostNameNext(nextPageLink: string, callback: ServiceCallback<models.IdentifierCollection>): void;
  listSiteIdentifiersAssignedToHostNameNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IdentifierCollection>): void;


  /**
   * @summary List all premier add-on offers.
   *
   * List all premier add-on offers.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PremierAddOnOfferCollection>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  listPremierAddOnOffersNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PremierAddOnOfferCollection>>;

  /**
   * @summary List all premier add-on offers.
   *
   * List all premier add-on offers.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {PremierAddOnOfferCollection} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {PremierAddOnOfferCollection} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PremierAddOnOfferCollection} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  listPremierAddOnOffersNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PremierAddOnOfferCollection>;
  listPremierAddOnOffersNext(nextPageLink: string, callback: ServiceCallback<models.PremierAddOnOfferCollection>): void;
  listPremierAddOnOffersNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PremierAddOnOfferCollection>): void;
}

export { WebSiteManagementClient, models as WebSiteManagementModels };
