/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as stream from 'stream';
import * as models from '../models';


/**
 * @class
 * AppServiceCertificateOrders
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the WebSiteManagementClient.
 */
export interface AppServiceCertificateOrders {


    /**
     * @summary List all certificate orders in a subscription.
     *
     * List all certificate orders in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppServiceCertificateOrderCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppServiceCertificateOrderCollection>>;

    /**
     * @summary List all certificate orders in a subscription.
     *
     * List all certificate orders in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppServiceCertificateOrderCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppServiceCertificateOrderCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppServiceCertificateOrderCollection} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppServiceCertificateOrderCollection>;
    list(callback: ServiceCallback<models.AppServiceCertificateOrderCollection>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppServiceCertificateOrderCollection>): void;


    /**
     * @summary Validate information for a certificate order.
     *
     * Validate information for a certificate order.
     *
     * @param {object} appServiceCertificateOrder Information for a certificate
     * order.
     *
     * @param {object} [appServiceCertificateOrder.certificates] State of the Key
     * Vault secret.
     *
     * @param {string} [appServiceCertificateOrder.distinguishedName] Certificate
     * distinguished name.
     *
     * @param {number} [appServiceCertificateOrder.validityInYears] Duration in
     * years (must be between 1 and 3).
     *
     * @param {number} [appServiceCertificateOrder.keySize] Certificate key size.
     *
     * @param {string} appServiceCertificateOrder.productType Certificate product
     * type. Possible values include: 'StandardDomainValidatedSsl',
     * 'StandardDomainValidatedWildCardSsl'
     *
     * @param {boolean} [appServiceCertificateOrder.autoRenew] <code>true</code> if
     * the certificate should be automatically renewed when it expires; otherwise,
     * <code>false</code>.
     *
     * @param {string} [appServiceCertificateOrder.csr] Last CSR that was created
     * for this order.
     *
     * @param {string} [appServiceCertificateOrder.kind] Kind of resource.
     *
     * @param {string} appServiceCertificateOrder.location Resource Location.
     *
     * @param {object} [appServiceCertificateOrder.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    validatePurchaseInformationWithHttpOperationResponse(appServiceCertificateOrder: models.AppServiceCertificateOrder, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Validate information for a certificate order.
     *
     * Validate information for a certificate order.
     *
     * @param {object} appServiceCertificateOrder Information for a certificate
     * order.
     *
     * @param {object} [appServiceCertificateOrder.certificates] State of the Key
     * Vault secret.
     *
     * @param {string} [appServiceCertificateOrder.distinguishedName] Certificate
     * distinguished name.
     *
     * @param {number} [appServiceCertificateOrder.validityInYears] Duration in
     * years (must be between 1 and 3).
     *
     * @param {number} [appServiceCertificateOrder.keySize] Certificate key size.
     *
     * @param {string} appServiceCertificateOrder.productType Certificate product
     * type. Possible values include: 'StandardDomainValidatedSsl',
     * 'StandardDomainValidatedWildCardSsl'
     *
     * @param {boolean} [appServiceCertificateOrder.autoRenew] <code>true</code> if
     * the certificate should be automatically renewed when it expires; otherwise,
     * <code>false</code>.
     *
     * @param {string} [appServiceCertificateOrder.csr] Last CSR that was created
     * for this order.
     *
     * @param {string} [appServiceCertificateOrder.kind] Kind of resource.
     *
     * @param {string} appServiceCertificateOrder.location Resource Location.
     *
     * @param {object} [appServiceCertificateOrder.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    validatePurchaseInformation(appServiceCertificateOrder: models.AppServiceCertificateOrder, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    validatePurchaseInformation(appServiceCertificateOrder: models.AppServiceCertificateOrder, callback: ServiceCallback<void>): void;
    validatePurchaseInformation(appServiceCertificateOrder: models.AppServiceCertificateOrder, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Get certificate orders in a resource group.
     *
     * Get certificate orders in a resource group.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppServiceCertificateOrderCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppServiceCertificateOrderCollection>>;

    /**
     * @summary Get certificate orders in a resource group.
     *
     * Get certificate orders in a resource group.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppServiceCertificateOrderCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppServiceCertificateOrderCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppServiceCertificateOrderCollection} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppServiceCertificateOrderCollection>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.AppServiceCertificateOrderCollection>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppServiceCertificateOrderCollection>): void;


    /**
     * @summary Get a certificate order.
     *
     * Get a certificate order.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} certificateOrderName Name of the certificate order..
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppServiceCertificateOrder>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, certificateOrderName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppServiceCertificateOrder>>;

    /**
     * @summary Get a certificate order.
     *
     * Get a certificate order.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} certificateOrderName Name of the certificate order..
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppServiceCertificateOrder} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppServiceCertificateOrder} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppServiceCertificateOrder} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, certificateOrderName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppServiceCertificateOrder>;
    get(resourceGroupName: string, certificateOrderName: string, callback: ServiceCallback<models.AppServiceCertificateOrder>): void;
    get(resourceGroupName: string, certificateOrderName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppServiceCertificateOrder>): void;


    /**
     * @summary Create or update a certificate purchase order.
     *
     * Create or update a certificate purchase order.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} certificateOrderName Name of the certificate order.
     *
     * @param {object} certificateDistinguishedName Distinguished name to to use
     * for the certificate order.
     *
     * @param {object} [certificateDistinguishedName.certificates] State of the Key
     * Vault secret.
     *
     * @param {string} [certificateDistinguishedName.distinguishedName] Certificate
     * distinguished name.
     *
     * @param {number} [certificateDistinguishedName.validityInYears] Duration in
     * years (must be between 1 and 3).
     *
     * @param {number} [certificateDistinguishedName.keySize] Certificate key size.
     *
     * @param {string} certificateDistinguishedName.productType Certificate product
     * type. Possible values include: 'StandardDomainValidatedSsl',
     * 'StandardDomainValidatedWildCardSsl'
     *
     * @param {boolean} [certificateDistinguishedName.autoRenew] <code>true</code>
     * if the certificate should be automatically renewed when it expires;
     * otherwise, <code>false</code>.
     *
     * @param {string} [certificateDistinguishedName.csr] Last CSR that was created
     * for this order.
     *
     * @param {string} [certificateDistinguishedName.kind] Kind of resource.
     *
     * @param {string} certificateDistinguishedName.location Resource Location.
     *
     * @param {object} [certificateDistinguishedName.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppServiceCertificateOrder>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, certificateOrderName: string, certificateDistinguishedName: models.AppServiceCertificateOrder, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppServiceCertificateOrder>>;

    /**
     * @summary Create or update a certificate purchase order.
     *
     * Create or update a certificate purchase order.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} certificateOrderName Name of the certificate order.
     *
     * @param {object} certificateDistinguishedName Distinguished name to to use
     * for the certificate order.
     *
     * @param {object} [certificateDistinguishedName.certificates] State of the Key
     * Vault secret.
     *
     * @param {string} [certificateDistinguishedName.distinguishedName] Certificate
     * distinguished name.
     *
     * @param {number} [certificateDistinguishedName.validityInYears] Duration in
     * years (must be between 1 and 3).
     *
     * @param {number} [certificateDistinguishedName.keySize] Certificate key size.
     *
     * @param {string} certificateDistinguishedName.productType Certificate product
     * type. Possible values include: 'StandardDomainValidatedSsl',
     * 'StandardDomainValidatedWildCardSsl'
     *
     * @param {boolean} [certificateDistinguishedName.autoRenew] <code>true</code>
     * if the certificate should be automatically renewed when it expires;
     * otherwise, <code>false</code>.
     *
     * @param {string} [certificateDistinguishedName.csr] Last CSR that was created
     * for this order.
     *
     * @param {string} [certificateDistinguishedName.kind] Kind of resource.
     *
     * @param {string} certificateDistinguishedName.location Resource Location.
     *
     * @param {object} [certificateDistinguishedName.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppServiceCertificateOrder} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppServiceCertificateOrder} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppServiceCertificateOrder} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, certificateOrderName: string, certificateDistinguishedName: models.AppServiceCertificateOrder, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppServiceCertificateOrder>;
    createOrUpdate(resourceGroupName: string, certificateOrderName: string, certificateDistinguishedName: models.AppServiceCertificateOrder, callback: ServiceCallback<models.AppServiceCertificateOrder>): void;
    createOrUpdate(resourceGroupName: string, certificateOrderName: string, certificateDistinguishedName: models.AppServiceCertificateOrder, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppServiceCertificateOrder>): void;


    /**
     * @summary Delete an existing certificate order.
     *
     * Delete an existing certificate order.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} certificateOrderName Name of the certificate order.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, certificateOrderName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete an existing certificate order.
     *
     * Delete an existing certificate order.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} certificateOrderName Name of the certificate order.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, certificateOrderName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, certificateOrderName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, certificateOrderName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Create or update a certificate purchase order.
     *
     * Create or update a certificate purchase order.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} certificateOrderName Name of the certificate order.
     *
     * @param {object} certificateDistinguishedName Distinguished name to to use
     * for the certificate order.
     *
     * @param {object} [certificateDistinguishedName.certificates] State of the Key
     * Vault secret.
     *
     * @param {string} [certificateDistinguishedName.distinguishedName] Certificate
     * distinguished name.
     *
     * @param {number} [certificateDistinguishedName.validityInYears] Duration in
     * years (must be between 1 and 3).
     *
     * @param {number} [certificateDistinguishedName.keySize] Certificate key size.
     *
     * @param {string} certificateDistinguishedName.productType Certificate product
     * type. Possible values include: 'StandardDomainValidatedSsl',
     * 'StandardDomainValidatedWildCardSsl'
     *
     * @param {boolean} [certificateDistinguishedName.autoRenew] <code>true</code>
     * if the certificate should be automatically renewed when it expires;
     * otherwise, <code>false</code>.
     *
     * @param {string} [certificateDistinguishedName.csr] Last CSR that was created
     * for this order.
     *
     * @param {string} [certificateDistinguishedName.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppServiceCertificateOrder>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, certificateOrderName: string, certificateDistinguishedName: models.AppServiceCertificateOrderPatchResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppServiceCertificateOrder>>;

    /**
     * @summary Create or update a certificate purchase order.
     *
     * Create or update a certificate purchase order.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} certificateOrderName Name of the certificate order.
     *
     * @param {object} certificateDistinguishedName Distinguished name to to use
     * for the certificate order.
     *
     * @param {object} [certificateDistinguishedName.certificates] State of the Key
     * Vault secret.
     *
     * @param {string} [certificateDistinguishedName.distinguishedName] Certificate
     * distinguished name.
     *
     * @param {number} [certificateDistinguishedName.validityInYears] Duration in
     * years (must be between 1 and 3).
     *
     * @param {number} [certificateDistinguishedName.keySize] Certificate key size.
     *
     * @param {string} certificateDistinguishedName.productType Certificate product
     * type. Possible values include: 'StandardDomainValidatedSsl',
     * 'StandardDomainValidatedWildCardSsl'
     *
     * @param {boolean} [certificateDistinguishedName.autoRenew] <code>true</code>
     * if the certificate should be automatically renewed when it expires;
     * otherwise, <code>false</code>.
     *
     * @param {string} [certificateDistinguishedName.csr] Last CSR that was created
     * for this order.
     *
     * @param {string} [certificateDistinguishedName.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppServiceCertificateOrder} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppServiceCertificateOrder} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppServiceCertificateOrder} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, certificateOrderName: string, certificateDistinguishedName: models.AppServiceCertificateOrderPatchResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppServiceCertificateOrder>;
    update(resourceGroupName: string, certificateOrderName: string, certificateDistinguishedName: models.AppServiceCertificateOrderPatchResource, callback: ServiceCallback<models.AppServiceCertificateOrder>): void;
    update(resourceGroupName: string, certificateOrderName: string, certificateDistinguishedName: models.AppServiceCertificateOrderPatchResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppServiceCertificateOrder>): void;


    /**
     * @summary List all certificates associated with a certificate order.
     *
     * List all certificates associated with a certificate order.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} certificateOrderName Name of the certificate order.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppServiceCertificateCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listCertificatesWithHttpOperationResponse(resourceGroupName: string, certificateOrderName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppServiceCertificateCollection>>;

    /**
     * @summary List all certificates associated with a certificate order.
     *
     * List all certificates associated with a certificate order.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} certificateOrderName Name of the certificate order.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppServiceCertificateCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppServiceCertificateCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppServiceCertificateCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listCertificates(resourceGroupName: string, certificateOrderName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppServiceCertificateCollection>;
    listCertificates(resourceGroupName: string, certificateOrderName: string, callback: ServiceCallback<models.AppServiceCertificateCollection>): void;
    listCertificates(resourceGroupName: string, certificateOrderName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppServiceCertificateCollection>): void;


    /**
     * @summary Get the certificate associated with a certificate order.
     *
     * Get the certificate associated with a certificate order.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} certificateOrderName Name of the certificate order.
     *
     * @param {string} name Name of the certificate.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppServiceCertificateResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getCertificateWithHttpOperationResponse(resourceGroupName: string, certificateOrderName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppServiceCertificateResource>>;

    /**
     * @summary Get the certificate associated with a certificate order.
     *
     * Get the certificate associated with a certificate order.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} certificateOrderName Name of the certificate order.
     *
     * @param {string} name Name of the certificate.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppServiceCertificateResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppServiceCertificateResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppServiceCertificateResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getCertificate(resourceGroupName: string, certificateOrderName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppServiceCertificateResource>;
    getCertificate(resourceGroupName: string, certificateOrderName: string, name: string, callback: ServiceCallback<models.AppServiceCertificateResource>): void;
    getCertificate(resourceGroupName: string, certificateOrderName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppServiceCertificateResource>): void;


    /**
     * @summary Creates or updates a certificate and associates with key vault
     * secret.
     *
     * Creates or updates a certificate and associates with key vault secret.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} certificateOrderName Name of the certificate order.
     *
     * @param {string} name Name of the certificate.
     *
     * @param {object} keyVaultCertificate Key vault certificate resource Id.
     *
     * @param {string} [keyVaultCertificate.keyVaultId] Key Vault resource Id.
     *
     * @param {string} [keyVaultCertificate.keyVaultSecretName] Key Vault secret
     * name.
     *
     * @param {string} [keyVaultCertificate.kind] Kind of resource.
     *
     * @param {string} keyVaultCertificate.location Resource Location.
     *
     * @param {object} [keyVaultCertificate.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppServiceCertificateResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateCertificateWithHttpOperationResponse(resourceGroupName: string, certificateOrderName: string, name: string, keyVaultCertificate: models.AppServiceCertificateResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppServiceCertificateResource>>;

    /**
     * @summary Creates or updates a certificate and associates with key vault
     * secret.
     *
     * Creates or updates a certificate and associates with key vault secret.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} certificateOrderName Name of the certificate order.
     *
     * @param {string} name Name of the certificate.
     *
     * @param {object} keyVaultCertificate Key vault certificate resource Id.
     *
     * @param {string} [keyVaultCertificate.keyVaultId] Key Vault resource Id.
     *
     * @param {string} [keyVaultCertificate.keyVaultSecretName] Key Vault secret
     * name.
     *
     * @param {string} [keyVaultCertificate.kind] Kind of resource.
     *
     * @param {string} keyVaultCertificate.location Resource Location.
     *
     * @param {object} [keyVaultCertificate.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppServiceCertificateResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppServiceCertificateResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppServiceCertificateResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateCertificate(resourceGroupName: string, certificateOrderName: string, name: string, keyVaultCertificate: models.AppServiceCertificateResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppServiceCertificateResource>;
    createOrUpdateCertificate(resourceGroupName: string, certificateOrderName: string, name: string, keyVaultCertificate: models.AppServiceCertificateResource, callback: ServiceCallback<models.AppServiceCertificateResource>): void;
    createOrUpdateCertificate(resourceGroupName: string, certificateOrderName: string, name: string, keyVaultCertificate: models.AppServiceCertificateResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppServiceCertificateResource>): void;


    /**
     * @summary Delete the certificate associated with a certificate order.
     *
     * Delete the certificate associated with a certificate order.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} certificateOrderName Name of the certificate order.
     *
     * @param {string} name Name of the certificate.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteCertificateWithHttpOperationResponse(resourceGroupName: string, certificateOrderName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete the certificate associated with a certificate order.
     *
     * Delete the certificate associated with a certificate order.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} certificateOrderName Name of the certificate order.
     *
     * @param {string} name Name of the certificate.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteCertificate(resourceGroupName: string, certificateOrderName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteCertificate(resourceGroupName: string, certificateOrderName: string, name: string, callback: ServiceCallback<void>): void;
    deleteCertificate(resourceGroupName: string, certificateOrderName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Creates or updates a certificate and associates with key vault
     * secret.
     *
     * Creates or updates a certificate and associates with key vault secret.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} certificateOrderName Name of the certificate order.
     *
     * @param {string} name Name of the certificate.
     *
     * @param {object} keyVaultCertificate Key vault certificate resource Id.
     *
     * @param {string} [keyVaultCertificate.keyVaultId] Key Vault resource Id.
     *
     * @param {string} [keyVaultCertificate.keyVaultSecretName] Key Vault secret
     * name.
     *
     * @param {string} [keyVaultCertificate.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppServiceCertificateResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateCertificateWithHttpOperationResponse(resourceGroupName: string, certificateOrderName: string, name: string, keyVaultCertificate: models.AppServiceCertificatePatchResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppServiceCertificateResource>>;

    /**
     * @summary Creates or updates a certificate and associates with key vault
     * secret.
     *
     * Creates or updates a certificate and associates with key vault secret.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} certificateOrderName Name of the certificate order.
     *
     * @param {string} name Name of the certificate.
     *
     * @param {object} keyVaultCertificate Key vault certificate resource Id.
     *
     * @param {string} [keyVaultCertificate.keyVaultId] Key Vault resource Id.
     *
     * @param {string} [keyVaultCertificate.keyVaultSecretName] Key Vault secret
     * name.
     *
     * @param {string} [keyVaultCertificate.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppServiceCertificateResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppServiceCertificateResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppServiceCertificateResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateCertificate(resourceGroupName: string, certificateOrderName: string, name: string, keyVaultCertificate: models.AppServiceCertificatePatchResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppServiceCertificateResource>;
    updateCertificate(resourceGroupName: string, certificateOrderName: string, name: string, keyVaultCertificate: models.AppServiceCertificatePatchResource, callback: ServiceCallback<models.AppServiceCertificateResource>): void;
    updateCertificate(resourceGroupName: string, certificateOrderName: string, name: string, keyVaultCertificate: models.AppServiceCertificatePatchResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppServiceCertificateResource>): void;


    /**
     * @summary Reissue an existing certificate order.
     *
     * Reissue an existing certificate order.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} certificateOrderName Name of the certificate order.
     *
     * @param {object} reissueCertificateOrderRequest Parameters for the reissue.
     *
     * @param {number} [reissueCertificateOrderRequest.keySize] Certificate Key
     * Size.
     *
     * @param {number} [reissueCertificateOrderRequest.delayExistingRevokeInHours]
     * Delay in hours to revoke existing certificate after the new certificate is
     * issued.
     *
     * @param {string} [reissueCertificateOrderRequest.csr] Csr to be used for
     * re-key operation.
     *
     * @param {boolean} [reissueCertificateOrderRequest.isPrivateKeyExternal]
     * Should we change the ASC type (from managed private key to external private
     * key and vice versa).
     *
     * @param {string} [reissueCertificateOrderRequest.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    reissueWithHttpOperationResponse(resourceGroupName: string, certificateOrderName: string, reissueCertificateOrderRequest: models.ReissueCertificateOrderRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Reissue an existing certificate order.
     *
     * Reissue an existing certificate order.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} certificateOrderName Name of the certificate order.
     *
     * @param {object} reissueCertificateOrderRequest Parameters for the reissue.
     *
     * @param {number} [reissueCertificateOrderRequest.keySize] Certificate Key
     * Size.
     *
     * @param {number} [reissueCertificateOrderRequest.delayExistingRevokeInHours]
     * Delay in hours to revoke existing certificate after the new certificate is
     * issued.
     *
     * @param {string} [reissueCertificateOrderRequest.csr] Csr to be used for
     * re-key operation.
     *
     * @param {boolean} [reissueCertificateOrderRequest.isPrivateKeyExternal]
     * Should we change the ASC type (from managed private key to external private
     * key and vice versa).
     *
     * @param {string} [reissueCertificateOrderRequest.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    reissue(resourceGroupName: string, certificateOrderName: string, reissueCertificateOrderRequest: models.ReissueCertificateOrderRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    reissue(resourceGroupName: string, certificateOrderName: string, reissueCertificateOrderRequest: models.ReissueCertificateOrderRequest, callback: ServiceCallback<void>): void;
    reissue(resourceGroupName: string, certificateOrderName: string, reissueCertificateOrderRequest: models.ReissueCertificateOrderRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Renew an existing certificate order.
     *
     * Renew an existing certificate order.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} certificateOrderName Name of the certificate order.
     *
     * @param {object} renewCertificateOrderRequest Renew parameters
     *
     * @param {number} [renewCertificateOrderRequest.keySize] Certificate Key Size.
     *
     * @param {string} [renewCertificateOrderRequest.csr] Csr to be used for re-key
     * operation.
     *
     * @param {boolean} [renewCertificateOrderRequest.isPrivateKeyExternal] Should
     * we change the ASC type (from managed private key to external private key and
     * vice versa).
     *
     * @param {string} [renewCertificateOrderRequest.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    renewWithHttpOperationResponse(resourceGroupName: string, certificateOrderName: string, renewCertificateOrderRequest: models.RenewCertificateOrderRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Renew an existing certificate order.
     *
     * Renew an existing certificate order.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} certificateOrderName Name of the certificate order.
     *
     * @param {object} renewCertificateOrderRequest Renew parameters
     *
     * @param {number} [renewCertificateOrderRequest.keySize] Certificate Key Size.
     *
     * @param {string} [renewCertificateOrderRequest.csr] Csr to be used for re-key
     * operation.
     *
     * @param {boolean} [renewCertificateOrderRequest.isPrivateKeyExternal] Should
     * we change the ASC type (from managed private key to external private key and
     * vice versa).
     *
     * @param {string} [renewCertificateOrderRequest.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    renew(resourceGroupName: string, certificateOrderName: string, renewCertificateOrderRequest: models.RenewCertificateOrderRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    renew(resourceGroupName: string, certificateOrderName: string, renewCertificateOrderRequest: models.RenewCertificateOrderRequest, callback: ServiceCallback<void>): void;
    renew(resourceGroupName: string, certificateOrderName: string, renewCertificateOrderRequest: models.RenewCertificateOrderRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Resend certificate email.
     *
     * Resend certificate email.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} certificateOrderName Name of the certificate order.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    resendEmailWithHttpOperationResponse(resourceGroupName: string, certificateOrderName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Resend certificate email.
     *
     * Resend certificate email.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} certificateOrderName Name of the certificate order.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    resendEmail(resourceGroupName: string, certificateOrderName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    resendEmail(resourceGroupName: string, certificateOrderName: string, callback: ServiceCallback<void>): void;
    resendEmail(resourceGroupName: string, certificateOrderName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Verify domain ownership for this certificate order.
     *
     * Verify domain ownership for this certificate order.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} certificateOrderName Name of the certificate order.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.name] Name of the object.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    resendRequestEmailsWithHttpOperationResponse(resourceGroupName: string, certificateOrderName: string, options?: { name? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Verify domain ownership for this certificate order.
     *
     * Verify domain ownership for this certificate order.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} certificateOrderName Name of the certificate order.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.name] Name of the object.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    resendRequestEmails(resourceGroupName: string, certificateOrderName: string, options?: { name? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    resendRequestEmails(resourceGroupName: string, certificateOrderName: string, callback: ServiceCallback<void>): void;
    resendRequestEmails(resourceGroupName: string, certificateOrderName: string, options: { name? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Verify domain ownership for this certificate order.
     *
     * Verify domain ownership for this certificate order.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} certificateOrderName Name of the certificate order.
     *
     * @param {object} siteSealRequest Site seal request.
     *
     * @param {boolean} [siteSealRequest.lightTheme] If <code>true</code> use the
     * light color theme for site seal; otherwise, use the default color theme.
     *
     * @param {string} [siteSealRequest.locale] Locale of site seal.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteSeal>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    retrieveSiteSealWithHttpOperationResponse(resourceGroupName: string, certificateOrderName: string, siteSealRequest: models.SiteSealRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteSeal>>;

    /**
     * @summary Verify domain ownership for this certificate order.
     *
     * Verify domain ownership for this certificate order.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} certificateOrderName Name of the certificate order.
     *
     * @param {object} siteSealRequest Site seal request.
     *
     * @param {boolean} [siteSealRequest.lightTheme] If <code>true</code> use the
     * light color theme for site seal; otherwise, use the default color theme.
     *
     * @param {string} [siteSealRequest.locale] Locale of site seal.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteSeal} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteSeal} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteSeal} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    retrieveSiteSeal(resourceGroupName: string, certificateOrderName: string, siteSealRequest: models.SiteSealRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteSeal>;
    retrieveSiteSeal(resourceGroupName: string, certificateOrderName: string, siteSealRequest: models.SiteSealRequest, callback: ServiceCallback<models.SiteSeal>): void;
    retrieveSiteSeal(resourceGroupName: string, certificateOrderName: string, siteSealRequest: models.SiteSealRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteSeal>): void;


    /**
     * @summary Verify domain ownership for this certificate order.
     *
     * Verify domain ownership for this certificate order.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} certificateOrderName Name of the certificate order.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    verifyDomainOwnershipWithHttpOperationResponse(resourceGroupName: string, certificateOrderName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Verify domain ownership for this certificate order.
     *
     * Verify domain ownership for this certificate order.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} certificateOrderName Name of the certificate order.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    verifyDomainOwnership(resourceGroupName: string, certificateOrderName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    verifyDomainOwnership(resourceGroupName: string, certificateOrderName: string, callback: ServiceCallback<void>): void;
    verifyDomainOwnership(resourceGroupName: string, certificateOrderName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Retrieve the list of certificate actions.
     *
     * Retrieve the list of certificate actions.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the certificate order.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    retrieveCertificateActionsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificateOrderAction[]>>;

    /**
     * @summary Retrieve the list of certificate actions.
     *
     * Retrieve the list of certificate actions.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the certificate order.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    retrieveCertificateActions(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificateOrderAction[]>;
    retrieveCertificateActions(resourceGroupName: string, name: string, callback: ServiceCallback<models.CertificateOrderAction[]>): void;
    retrieveCertificateActions(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateOrderAction[]>): void;


    /**
     * @summary Retrieve email history.
     *
     * Retrieve email history.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the certificate order.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    retrieveCertificateEmailHistoryWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificateEmail[]>>;

    /**
     * @summary Retrieve email history.
     *
     * Retrieve email history.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the certificate order.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    retrieveCertificateEmailHistory(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificateEmail[]>;
    retrieveCertificateEmailHistory(resourceGroupName: string, name: string, callback: ServiceCallback<models.CertificateEmail[]>): void;
    retrieveCertificateEmailHistory(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateEmail[]>): void;


    /**
     * @summary Create or update a certificate purchase order.
     *
     * Create or update a certificate purchase order.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} certificateOrderName Name of the certificate order.
     *
     * @param {object} certificateDistinguishedName Distinguished name to to use
     * for the certificate order.
     *
     * @param {object} [certificateDistinguishedName.certificates] State of the Key
     * Vault secret.
     *
     * @param {string} [certificateDistinguishedName.distinguishedName] Certificate
     * distinguished name.
     *
     * @param {number} [certificateDistinguishedName.validityInYears] Duration in
     * years (must be between 1 and 3).
     *
     * @param {number} [certificateDistinguishedName.keySize] Certificate key size.
     *
     * @param {string} certificateDistinguishedName.productType Certificate product
     * type. Possible values include: 'StandardDomainValidatedSsl',
     * 'StandardDomainValidatedWildCardSsl'
     *
     * @param {boolean} [certificateDistinguishedName.autoRenew] <code>true</code>
     * if the certificate should be automatically renewed when it expires;
     * otherwise, <code>false</code>.
     *
     * @param {string} [certificateDistinguishedName.csr] Last CSR that was created
     * for this order.
     *
     * @param {string} [certificateDistinguishedName.kind] Kind of resource.
     *
     * @param {string} certificateDistinguishedName.location Resource Location.
     *
     * @param {object} [certificateDistinguishedName.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppServiceCertificateOrder>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, certificateOrderName: string, certificateDistinguishedName: models.AppServiceCertificateOrder, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppServiceCertificateOrder>>;

    /**
     * @summary Create or update a certificate purchase order.
     *
     * Create or update a certificate purchase order.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} certificateOrderName Name of the certificate order.
     *
     * @param {object} certificateDistinguishedName Distinguished name to to use
     * for the certificate order.
     *
     * @param {object} [certificateDistinguishedName.certificates] State of the Key
     * Vault secret.
     *
     * @param {string} [certificateDistinguishedName.distinguishedName] Certificate
     * distinguished name.
     *
     * @param {number} [certificateDistinguishedName.validityInYears] Duration in
     * years (must be between 1 and 3).
     *
     * @param {number} [certificateDistinguishedName.keySize] Certificate key size.
     *
     * @param {string} certificateDistinguishedName.productType Certificate product
     * type. Possible values include: 'StandardDomainValidatedSsl',
     * 'StandardDomainValidatedWildCardSsl'
     *
     * @param {boolean} [certificateDistinguishedName.autoRenew] <code>true</code>
     * if the certificate should be automatically renewed when it expires;
     * otherwise, <code>false</code>.
     *
     * @param {string} [certificateDistinguishedName.csr] Last CSR that was created
     * for this order.
     *
     * @param {string} [certificateDistinguishedName.kind] Kind of resource.
     *
     * @param {string} certificateDistinguishedName.location Resource Location.
     *
     * @param {object} [certificateDistinguishedName.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppServiceCertificateOrder} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppServiceCertificateOrder} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppServiceCertificateOrder} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, certificateOrderName: string, certificateDistinguishedName: models.AppServiceCertificateOrder, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppServiceCertificateOrder>;
    beginCreateOrUpdate(resourceGroupName: string, certificateOrderName: string, certificateDistinguishedName: models.AppServiceCertificateOrder, callback: ServiceCallback<models.AppServiceCertificateOrder>): void;
    beginCreateOrUpdate(resourceGroupName: string, certificateOrderName: string, certificateDistinguishedName: models.AppServiceCertificateOrder, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppServiceCertificateOrder>): void;


    /**
     * @summary Creates or updates a certificate and associates with key vault
     * secret.
     *
     * Creates or updates a certificate and associates with key vault secret.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} certificateOrderName Name of the certificate order.
     *
     * @param {string} name Name of the certificate.
     *
     * @param {object} keyVaultCertificate Key vault certificate resource Id.
     *
     * @param {string} [keyVaultCertificate.keyVaultId] Key Vault resource Id.
     *
     * @param {string} [keyVaultCertificate.keyVaultSecretName] Key Vault secret
     * name.
     *
     * @param {string} [keyVaultCertificate.kind] Kind of resource.
     *
     * @param {string} keyVaultCertificate.location Resource Location.
     *
     * @param {object} [keyVaultCertificate.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppServiceCertificateResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateCertificateWithHttpOperationResponse(resourceGroupName: string, certificateOrderName: string, name: string, keyVaultCertificate: models.AppServiceCertificateResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppServiceCertificateResource>>;

    /**
     * @summary Creates or updates a certificate and associates with key vault
     * secret.
     *
     * Creates or updates a certificate and associates with key vault secret.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} certificateOrderName Name of the certificate order.
     *
     * @param {string} name Name of the certificate.
     *
     * @param {object} keyVaultCertificate Key vault certificate resource Id.
     *
     * @param {string} [keyVaultCertificate.keyVaultId] Key Vault resource Id.
     *
     * @param {string} [keyVaultCertificate.keyVaultSecretName] Key Vault secret
     * name.
     *
     * @param {string} [keyVaultCertificate.kind] Kind of resource.
     *
     * @param {string} keyVaultCertificate.location Resource Location.
     *
     * @param {object} [keyVaultCertificate.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppServiceCertificateResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppServiceCertificateResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppServiceCertificateResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdateCertificate(resourceGroupName: string, certificateOrderName: string, name: string, keyVaultCertificate: models.AppServiceCertificateResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppServiceCertificateResource>;
    beginCreateOrUpdateCertificate(resourceGroupName: string, certificateOrderName: string, name: string, keyVaultCertificate: models.AppServiceCertificateResource, callback: ServiceCallback<models.AppServiceCertificateResource>): void;
    beginCreateOrUpdateCertificate(resourceGroupName: string, certificateOrderName: string, name: string, keyVaultCertificate: models.AppServiceCertificateResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppServiceCertificateResource>): void;


    /**
     * @summary List all certificate orders in a subscription.
     *
     * List all certificate orders in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppServiceCertificateOrderCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppServiceCertificateOrderCollection>>;

    /**
     * @summary List all certificate orders in a subscription.
     *
     * List all certificate orders in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppServiceCertificateOrderCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppServiceCertificateOrderCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppServiceCertificateOrderCollection} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppServiceCertificateOrderCollection>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.AppServiceCertificateOrderCollection>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppServiceCertificateOrderCollection>): void;


    /**
     * @summary Get certificate orders in a resource group.
     *
     * Get certificate orders in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppServiceCertificateOrderCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppServiceCertificateOrderCollection>>;

    /**
     * @summary Get certificate orders in a resource group.
     *
     * Get certificate orders in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppServiceCertificateOrderCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppServiceCertificateOrderCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppServiceCertificateOrderCollection} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppServiceCertificateOrderCollection>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.AppServiceCertificateOrderCollection>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppServiceCertificateOrderCollection>): void;


    /**
     * @summary List all certificates associated with a certificate order.
     *
     * List all certificates associated with a certificate order.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppServiceCertificateCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listCertificatesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppServiceCertificateCollection>>;

    /**
     * @summary List all certificates associated with a certificate order.
     *
     * List all certificates associated with a certificate order.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppServiceCertificateCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppServiceCertificateCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppServiceCertificateCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listCertificatesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppServiceCertificateCollection>;
    listCertificatesNext(nextPageLink: string, callback: ServiceCallback<models.AppServiceCertificateCollection>): void;
    listCertificatesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppServiceCertificateCollection>): void;
}

/**
 * @class
 * CertificateRegistrationProvider
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the WebSiteManagementClient.
 */
export interface CertificateRegistrationProvider {


    /**
     * @summary Implements Csm operations Api to exposes the list of available Csm
     * Apis under the resource provider
     *
     * Implements Csm operations Api to exposes the list of available Csm Apis
     * under the resource provider
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CsmOperationCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listOperationsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CsmOperationCollection>>;

    /**
     * @summary Implements Csm operations Api to exposes the list of available Csm
     * Apis under the resource provider
     *
     * Implements Csm operations Api to exposes the list of available Csm Apis
     * under the resource provider
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CsmOperationCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CsmOperationCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CsmOperationCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listOperations(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CsmOperationCollection>;
    listOperations(callback: ServiceCallback<models.CsmOperationCollection>): void;
    listOperations(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CsmOperationCollection>): void;


    /**
     * @summary Implements Csm operations Api to exposes the list of available Csm
     * Apis under the resource provider
     *
     * Implements Csm operations Api to exposes the list of available Csm Apis
     * under the resource provider
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CsmOperationCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listOperationsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CsmOperationCollection>>;

    /**
     * @summary Implements Csm operations Api to exposes the list of available Csm
     * Apis under the resource provider
     *
     * Implements Csm operations Api to exposes the list of available Csm Apis
     * under the resource provider
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CsmOperationCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CsmOperationCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CsmOperationCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listOperationsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CsmOperationCollection>;
    listOperationsNext(nextPageLink: string, callback: ServiceCallback<models.CsmOperationCollection>): void;
    listOperationsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CsmOperationCollection>): void;
}

/**
 * @class
 * Domains
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the WebSiteManagementClient.
 */
export interface Domains {


    /**
     * @summary Check if a domain is available for registration.
     *
     * Check if a domain is available for registration.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.name] Name of the object.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DomainAvailablilityCheckResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkAvailabilityWithHttpOperationResponse(options?: { name? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DomainAvailablilityCheckResult>>;

    /**
     * @summary Check if a domain is available for registration.
     *
     * Check if a domain is available for registration.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.name] Name of the object.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DomainAvailablilityCheckResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DomainAvailablilityCheckResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DomainAvailablilityCheckResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkAvailability(options?: { name? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.DomainAvailablilityCheckResult>;
    checkAvailability(callback: ServiceCallback<models.DomainAvailablilityCheckResult>): void;
    checkAvailability(options: { name? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainAvailablilityCheckResult>): void;


    /**
     * @summary Get all domains in a subscription.
     *
     * Get all domains in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DomainCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DomainCollection>>;

    /**
     * @summary Get all domains in a subscription.
     *
     * Get all domains in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DomainCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DomainCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DomainCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DomainCollection>;
    list(callback: ServiceCallback<models.DomainCollection>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainCollection>): void;


    /**
     * @summary Generate a single sign-on request for the domain management portal.
     *
     * Generate a single sign-on request for the domain management portal.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DomainControlCenterSsoRequest>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getControlCenterSsoRequestWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DomainControlCenterSsoRequest>>;

    /**
     * @summary Generate a single sign-on request for the domain management portal.
     *
     * Generate a single sign-on request for the domain management portal.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DomainControlCenterSsoRequest} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DomainControlCenterSsoRequest} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DomainControlCenterSsoRequest} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getControlCenterSsoRequest(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DomainControlCenterSsoRequest>;
    getControlCenterSsoRequest(callback: ServiceCallback<models.DomainControlCenterSsoRequest>): void;
    getControlCenterSsoRequest(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainControlCenterSsoRequest>): void;


    /**
     * @summary Get domain name recommendations based on keywords.
     *
     * Get domain name recommendations based on keywords.
     *
     * @param {object} parameters Search parameters for domain name
     * recommendations.
     *
     * @param {string} [parameters.keywords] Keywords to be used for generating
     * domain recommendations.
     *
     * @param {number} [parameters.maxDomainRecommendations] Maximum number of
     * recommendations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NameIdentifierCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listRecommendationsWithHttpOperationResponse(parameters: models.DomainRecommendationSearchParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NameIdentifierCollection>>;

    /**
     * @summary Get domain name recommendations based on keywords.
     *
     * Get domain name recommendations based on keywords.
     *
     * @param {object} parameters Search parameters for domain name
     * recommendations.
     *
     * @param {string} [parameters.keywords] Keywords to be used for generating
     * domain recommendations.
     *
     * @param {number} [parameters.maxDomainRecommendations] Maximum number of
     * recommendations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NameIdentifierCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NameIdentifierCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NameIdentifierCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listRecommendations(parameters: models.DomainRecommendationSearchParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NameIdentifierCollection>;
    listRecommendations(parameters: models.DomainRecommendationSearchParameters, callback: ServiceCallback<models.NameIdentifierCollection>): void;
    listRecommendations(parameters: models.DomainRecommendationSearchParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NameIdentifierCollection>): void;


    /**
     * @summary Get all domains in a resource group.
     *
     * Get all domains in a resource group.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DomainCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DomainCollection>>;

    /**
     * @summary Get all domains in a resource group.
     *
     * Get all domains in a resource group.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DomainCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DomainCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DomainCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DomainCollection>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.DomainCollection>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainCollection>): void;


    /**
     * @summary Get a domain.
     *
     * Get a domain.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} domainName Name of the domain.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Domain>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, domainName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Domain>>;

    /**
     * @summary Get a domain.
     *
     * Get a domain.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} domainName Name of the domain.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Domain} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Domain} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Domain} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, domainName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Domain>;
    get(resourceGroupName: string, domainName: string, callback: ServiceCallback<models.Domain>): void;
    get(resourceGroupName: string, domainName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Domain>): void;


    /**
     * @summary Creates or updates a domain.
     *
     * Creates or updates a domain.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} domainName Name of the domain.
     *
     * @param {object} domain Domain registration information.
     *
     * @param {object} domain.contactAdmin Administrative contact.
     *
     * @param {object} domain.contactBilling Billing contact.
     *
     * @param {object} domain.contactRegistrant Registrant contact.
     *
     * @param {object} domain.contactTech Technical contact.
     *
     * @param {object} [domain.contactTech.addressMailing] Mailing address.
     *
     * @param {string} domain.contactTech.addressMailing.address1 First line of an
     * Address.
     *
     * @param {string} [domain.contactTech.addressMailing.address2] The second line
     * of the Address. Optional.
     *
     * @param {string} domain.contactTech.addressMailing.city The city for the
     * address.
     *
     * @param {string} domain.contactTech.addressMailing.country The country for
     * the address.
     *
     * @param {string} domain.contactTech.addressMailing.postalCode The postal code
     * for the address.
     *
     * @param {string} domain.contactTech.addressMailing.state The state or
     * province for the address.
     *
     * @param {string} domain.contactTech.email Email address.
     *
     * @param {string} [domain.contactTech.fax] Fax number.
     *
     * @param {string} [domain.contactTech.jobTitle] Job title.
     *
     * @param {string} domain.contactTech.nameFirst First name.
     *
     * @param {string} domain.contactTech.nameLast Last name.
     *
     * @param {string} [domain.contactTech.nameMiddle] Middle name.
     *
     * @param {string} [domain.contactTech.organization] Organization contact
     * belongs to.
     *
     * @param {string} domain.contactTech.phone Phone number.
     *
     * @param {boolean} [domain.privacy] <code>true</code> if domain privacy is
     * enabled for this domain; otherwise, <code>false</code>.
     *
     * @param {boolean} [domain.autoRenew] <code>true</code> if the domain should
     * be automatically renewed; otherwise, <code>false</code>.
     *
     * @param {object} domain.consent Legal agreement consent.
     *
     * @param {array} [domain.consent.agreementKeys] List of applicable legal
     * agreement keys. This list can be retrieved using ListLegalAgreements API
     * under <code>TopLevelDomain</code> resource.
     *
     * @param {string} [domain.consent.agreedBy] Client IP address.
     *
     * @param {date} [domain.consent.agreedAt] Timestamp when the agreements were
     * accepted.
     *
     * @param {string} [domain.dnsType] Current DNS type. Possible values include:
     * 'AzureDns', 'DefaultDomainRegistrarDns'
     *
     * @param {string} [domain.dnsZoneId] Azure DNS Zone to use
     *
     * @param {string} [domain.targetDnsType] Target DNS type (would be used for
     * migration). Possible values include: 'AzureDns', 'DefaultDomainRegistrarDns'
     *
     * @param {string} [domain.authCode]
     *
     * @param {string} [domain.kind] Kind of resource.
     *
     * @param {string} domain.location Resource Location.
     *
     * @param {object} [domain.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Domain>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, domainName: string, domain: models.Domain, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Domain>>;

    /**
     * @summary Creates or updates a domain.
     *
     * Creates or updates a domain.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} domainName Name of the domain.
     *
     * @param {object} domain Domain registration information.
     *
     * @param {object} domain.contactAdmin Administrative contact.
     *
     * @param {object} domain.contactBilling Billing contact.
     *
     * @param {object} domain.contactRegistrant Registrant contact.
     *
     * @param {object} domain.contactTech Technical contact.
     *
     * @param {object} [domain.contactTech.addressMailing] Mailing address.
     *
     * @param {string} domain.contactTech.addressMailing.address1 First line of an
     * Address.
     *
     * @param {string} [domain.contactTech.addressMailing.address2] The second line
     * of the Address. Optional.
     *
     * @param {string} domain.contactTech.addressMailing.city The city for the
     * address.
     *
     * @param {string} domain.contactTech.addressMailing.country The country for
     * the address.
     *
     * @param {string} domain.contactTech.addressMailing.postalCode The postal code
     * for the address.
     *
     * @param {string} domain.contactTech.addressMailing.state The state or
     * province for the address.
     *
     * @param {string} domain.contactTech.email Email address.
     *
     * @param {string} [domain.contactTech.fax] Fax number.
     *
     * @param {string} [domain.contactTech.jobTitle] Job title.
     *
     * @param {string} domain.contactTech.nameFirst First name.
     *
     * @param {string} domain.contactTech.nameLast Last name.
     *
     * @param {string} [domain.contactTech.nameMiddle] Middle name.
     *
     * @param {string} [domain.contactTech.organization] Organization contact
     * belongs to.
     *
     * @param {string} domain.contactTech.phone Phone number.
     *
     * @param {boolean} [domain.privacy] <code>true</code> if domain privacy is
     * enabled for this domain; otherwise, <code>false</code>.
     *
     * @param {boolean} [domain.autoRenew] <code>true</code> if the domain should
     * be automatically renewed; otherwise, <code>false</code>.
     *
     * @param {object} domain.consent Legal agreement consent.
     *
     * @param {array} [domain.consent.agreementKeys] List of applicable legal
     * agreement keys. This list can be retrieved using ListLegalAgreements API
     * under <code>TopLevelDomain</code> resource.
     *
     * @param {string} [domain.consent.agreedBy] Client IP address.
     *
     * @param {date} [domain.consent.agreedAt] Timestamp when the agreements were
     * accepted.
     *
     * @param {string} [domain.dnsType] Current DNS type. Possible values include:
     * 'AzureDns', 'DefaultDomainRegistrarDns'
     *
     * @param {string} [domain.dnsZoneId] Azure DNS Zone to use
     *
     * @param {string} [domain.targetDnsType] Target DNS type (would be used for
     * migration). Possible values include: 'AzureDns', 'DefaultDomainRegistrarDns'
     *
     * @param {string} [domain.authCode]
     *
     * @param {string} [domain.kind] Kind of resource.
     *
     * @param {string} domain.location Resource Location.
     *
     * @param {object} [domain.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Domain} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Domain} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Domain} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, domainName: string, domain: models.Domain, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Domain>;
    createOrUpdate(resourceGroupName: string, domainName: string, domain: models.Domain, callback: ServiceCallback<models.Domain>): void;
    createOrUpdate(resourceGroupName: string, domainName: string, domain: models.Domain, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Domain>): void;


    /**
     * @summary Delete a domain.
     *
     * Delete a domain.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} domainName Name of the domain.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.forceHardDeleteDomain] Specify <code>true</code>
     * to delete the domain immediately. The default is <code>false</code> which
     * deletes the domain after 24 hours.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, domainName: string, options?: { forceHardDeleteDomain? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete a domain.
     *
     * Delete a domain.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} domainName Name of the domain.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.forceHardDeleteDomain] Specify <code>true</code>
     * to delete the domain immediately. The default is <code>false</code> which
     * deletes the domain after 24 hours.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, domainName: string, options?: { forceHardDeleteDomain? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, domainName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, domainName: string, options: { forceHardDeleteDomain? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Creates or updates a domain.
     *
     * Creates or updates a domain.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} domainName Name of the domain.
     *
     * @param {object} domain Domain registration information.
     *
     * @param {object} domain.contactAdmin Administrative contact.
     *
     * @param {object} domain.contactBilling Billing contact.
     *
     * @param {object} domain.contactRegistrant Registrant contact.
     *
     * @param {object} domain.contactTech Technical contact.
     *
     * @param {object} [domain.contactTech.addressMailing] Mailing address.
     *
     * @param {string} domain.contactTech.addressMailing.address1 First line of an
     * Address.
     *
     * @param {string} [domain.contactTech.addressMailing.address2] The second line
     * of the Address. Optional.
     *
     * @param {string} domain.contactTech.addressMailing.city The city for the
     * address.
     *
     * @param {string} domain.contactTech.addressMailing.country The country for
     * the address.
     *
     * @param {string} domain.contactTech.addressMailing.postalCode The postal code
     * for the address.
     *
     * @param {string} domain.contactTech.addressMailing.state The state or
     * province for the address.
     *
     * @param {string} domain.contactTech.email Email address.
     *
     * @param {string} [domain.contactTech.fax] Fax number.
     *
     * @param {string} [domain.contactTech.jobTitle] Job title.
     *
     * @param {string} domain.contactTech.nameFirst First name.
     *
     * @param {string} domain.contactTech.nameLast Last name.
     *
     * @param {string} [domain.contactTech.nameMiddle] Middle name.
     *
     * @param {string} [domain.contactTech.organization] Organization contact
     * belongs to.
     *
     * @param {string} domain.contactTech.phone Phone number.
     *
     * @param {boolean} [domain.privacy] <code>true</code> if domain privacy is
     * enabled for this domain; otherwise, <code>false</code>.
     *
     * @param {boolean} [domain.autoRenew] <code>true</code> if the domain should
     * be automatically renewed; otherwise, <code>false</code>.
     *
     * @param {object} domain.consent Legal agreement consent.
     *
     * @param {array} [domain.consent.agreementKeys] List of applicable legal
     * agreement keys. This list can be retrieved using ListLegalAgreements API
     * under <code>TopLevelDomain</code> resource.
     *
     * @param {string} [domain.consent.agreedBy] Client IP address.
     *
     * @param {date} [domain.consent.agreedAt] Timestamp when the agreements were
     * accepted.
     *
     * @param {string} [domain.dnsType] Current DNS type. Possible values include:
     * 'AzureDns', 'DefaultDomainRegistrarDns'
     *
     * @param {string} [domain.dnsZoneId] Azure DNS Zone to use
     *
     * @param {string} [domain.targetDnsType] Target DNS type (would be used for
     * migration). Possible values include: 'AzureDns', 'DefaultDomainRegistrarDns'
     *
     * @param {string} [domain.authCode]
     *
     * @param {string} [domain.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Domain>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, domainName: string, domain: models.DomainPatchResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Domain>>;

    /**
     * @summary Creates or updates a domain.
     *
     * Creates or updates a domain.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} domainName Name of the domain.
     *
     * @param {object} domain Domain registration information.
     *
     * @param {object} domain.contactAdmin Administrative contact.
     *
     * @param {object} domain.contactBilling Billing contact.
     *
     * @param {object} domain.contactRegistrant Registrant contact.
     *
     * @param {object} domain.contactTech Technical contact.
     *
     * @param {object} [domain.contactTech.addressMailing] Mailing address.
     *
     * @param {string} domain.contactTech.addressMailing.address1 First line of an
     * Address.
     *
     * @param {string} [domain.contactTech.addressMailing.address2] The second line
     * of the Address. Optional.
     *
     * @param {string} domain.contactTech.addressMailing.city The city for the
     * address.
     *
     * @param {string} domain.contactTech.addressMailing.country The country for
     * the address.
     *
     * @param {string} domain.contactTech.addressMailing.postalCode The postal code
     * for the address.
     *
     * @param {string} domain.contactTech.addressMailing.state The state or
     * province for the address.
     *
     * @param {string} domain.contactTech.email Email address.
     *
     * @param {string} [domain.contactTech.fax] Fax number.
     *
     * @param {string} [domain.contactTech.jobTitle] Job title.
     *
     * @param {string} domain.contactTech.nameFirst First name.
     *
     * @param {string} domain.contactTech.nameLast Last name.
     *
     * @param {string} [domain.contactTech.nameMiddle] Middle name.
     *
     * @param {string} [domain.contactTech.organization] Organization contact
     * belongs to.
     *
     * @param {string} domain.contactTech.phone Phone number.
     *
     * @param {boolean} [domain.privacy] <code>true</code> if domain privacy is
     * enabled for this domain; otherwise, <code>false</code>.
     *
     * @param {boolean} [domain.autoRenew] <code>true</code> if the domain should
     * be automatically renewed; otherwise, <code>false</code>.
     *
     * @param {object} domain.consent Legal agreement consent.
     *
     * @param {array} [domain.consent.agreementKeys] List of applicable legal
     * agreement keys. This list can be retrieved using ListLegalAgreements API
     * under <code>TopLevelDomain</code> resource.
     *
     * @param {string} [domain.consent.agreedBy] Client IP address.
     *
     * @param {date} [domain.consent.agreedAt] Timestamp when the agreements were
     * accepted.
     *
     * @param {string} [domain.dnsType] Current DNS type. Possible values include:
     * 'AzureDns', 'DefaultDomainRegistrarDns'
     *
     * @param {string} [domain.dnsZoneId] Azure DNS Zone to use
     *
     * @param {string} [domain.targetDnsType] Target DNS type (would be used for
     * migration). Possible values include: 'AzureDns', 'DefaultDomainRegistrarDns'
     *
     * @param {string} [domain.authCode]
     *
     * @param {string} [domain.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Domain} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Domain} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Domain} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, domainName: string, domain: models.DomainPatchResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Domain>;
    update(resourceGroupName: string, domainName: string, domain: models.DomainPatchResource, callback: ServiceCallback<models.Domain>): void;
    update(resourceGroupName: string, domainName: string, domain: models.DomainPatchResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Domain>): void;


    /**
     * @summary Lists domain ownership identifiers.
     *
     * Lists domain ownership identifiers.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} domainName Name of domain.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DomainOwnershipIdentifierCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listOwnershipIdentifiersWithHttpOperationResponse(resourceGroupName: string, domainName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DomainOwnershipIdentifierCollection>>;

    /**
     * @summary Lists domain ownership identifiers.
     *
     * Lists domain ownership identifiers.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} domainName Name of domain.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DomainOwnershipIdentifierCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DomainOwnershipIdentifierCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DomainOwnershipIdentifierCollection} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listOwnershipIdentifiers(resourceGroupName: string, domainName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DomainOwnershipIdentifierCollection>;
    listOwnershipIdentifiers(resourceGroupName: string, domainName: string, callback: ServiceCallback<models.DomainOwnershipIdentifierCollection>): void;
    listOwnershipIdentifiers(resourceGroupName: string, domainName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainOwnershipIdentifierCollection>): void;


    /**
     * @summary Get ownership identifier for domain
     *
     * Get ownership identifier for domain
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} domainName Name of domain.
     *
     * @param {string} name Name of identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DomainOwnershipIdentifier>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getOwnershipIdentifierWithHttpOperationResponse(resourceGroupName: string, domainName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DomainOwnershipIdentifier>>;

    /**
     * @summary Get ownership identifier for domain
     *
     * Get ownership identifier for domain
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} domainName Name of domain.
     *
     * @param {string} name Name of identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DomainOwnershipIdentifier} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DomainOwnershipIdentifier} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DomainOwnershipIdentifier} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getOwnershipIdentifier(resourceGroupName: string, domainName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DomainOwnershipIdentifier>;
    getOwnershipIdentifier(resourceGroupName: string, domainName: string, name: string, callback: ServiceCallback<models.DomainOwnershipIdentifier>): void;
    getOwnershipIdentifier(resourceGroupName: string, domainName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainOwnershipIdentifier>): void;


    /**
     * @summary Creates an ownership identifier for a domain or updates identifier
     * details for an existing identifer
     *
     * Creates an ownership identifier for a domain or updates identifier details
     * for an existing identifer
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} domainName Name of domain.
     *
     * @param {string} name Name of identifier.
     *
     * @param {object} domainOwnershipIdentifier A JSON representation of the
     * domain ownership properties.
     *
     * @param {string} [domainOwnershipIdentifier.ownershipId] Ownership Id.
     *
     * @param {string} [domainOwnershipIdentifier.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DomainOwnershipIdentifier>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateOwnershipIdentifierWithHttpOperationResponse(resourceGroupName: string, domainName: string, name: string, domainOwnershipIdentifier: models.DomainOwnershipIdentifier, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DomainOwnershipIdentifier>>;

    /**
     * @summary Creates an ownership identifier for a domain or updates identifier
     * details for an existing identifer
     *
     * Creates an ownership identifier for a domain or updates identifier details
     * for an existing identifer
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} domainName Name of domain.
     *
     * @param {string} name Name of identifier.
     *
     * @param {object} domainOwnershipIdentifier A JSON representation of the
     * domain ownership properties.
     *
     * @param {string} [domainOwnershipIdentifier.ownershipId] Ownership Id.
     *
     * @param {string} [domainOwnershipIdentifier.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DomainOwnershipIdentifier} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DomainOwnershipIdentifier} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DomainOwnershipIdentifier} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateOwnershipIdentifier(resourceGroupName: string, domainName: string, name: string, domainOwnershipIdentifier: models.DomainOwnershipIdentifier, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DomainOwnershipIdentifier>;
    createOrUpdateOwnershipIdentifier(resourceGroupName: string, domainName: string, name: string, domainOwnershipIdentifier: models.DomainOwnershipIdentifier, callback: ServiceCallback<models.DomainOwnershipIdentifier>): void;
    createOrUpdateOwnershipIdentifier(resourceGroupName: string, domainName: string, name: string, domainOwnershipIdentifier: models.DomainOwnershipIdentifier, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainOwnershipIdentifier>): void;


    /**
     * @summary Delete ownership identifier for domain
     *
     * Delete ownership identifier for domain
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} domainName Name of domain.
     *
     * @param {string} name Name of identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteOwnershipIdentifierWithHttpOperationResponse(resourceGroupName: string, domainName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete ownership identifier for domain
     *
     * Delete ownership identifier for domain
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} domainName Name of domain.
     *
     * @param {string} name Name of identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteOwnershipIdentifier(resourceGroupName: string, domainName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteOwnershipIdentifier(resourceGroupName: string, domainName: string, name: string, callback: ServiceCallback<void>): void;
    deleteOwnershipIdentifier(resourceGroupName: string, domainName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Creates an ownership identifier for a domain or updates identifier
     * details for an existing identifer
     *
     * Creates an ownership identifier for a domain or updates identifier details
     * for an existing identifer
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} domainName Name of domain.
     *
     * @param {string} name Name of identifier.
     *
     * @param {object} domainOwnershipIdentifier A JSON representation of the
     * domain ownership properties.
     *
     * @param {string} [domainOwnershipIdentifier.ownershipId] Ownership Id.
     *
     * @param {string} [domainOwnershipIdentifier.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DomainOwnershipIdentifier>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateOwnershipIdentifierWithHttpOperationResponse(resourceGroupName: string, domainName: string, name: string, domainOwnershipIdentifier: models.DomainOwnershipIdentifier, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DomainOwnershipIdentifier>>;

    /**
     * @summary Creates an ownership identifier for a domain or updates identifier
     * details for an existing identifer
     *
     * Creates an ownership identifier for a domain or updates identifier details
     * for an existing identifer
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} domainName Name of domain.
     *
     * @param {string} name Name of identifier.
     *
     * @param {object} domainOwnershipIdentifier A JSON representation of the
     * domain ownership properties.
     *
     * @param {string} [domainOwnershipIdentifier.ownershipId] Ownership Id.
     *
     * @param {string} [domainOwnershipIdentifier.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DomainOwnershipIdentifier} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DomainOwnershipIdentifier} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DomainOwnershipIdentifier} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateOwnershipIdentifier(resourceGroupName: string, domainName: string, name: string, domainOwnershipIdentifier: models.DomainOwnershipIdentifier, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DomainOwnershipIdentifier>;
    updateOwnershipIdentifier(resourceGroupName: string, domainName: string, name: string, domainOwnershipIdentifier: models.DomainOwnershipIdentifier, callback: ServiceCallback<models.DomainOwnershipIdentifier>): void;
    updateOwnershipIdentifier(resourceGroupName: string, domainName: string, name: string, domainOwnershipIdentifier: models.DomainOwnershipIdentifier, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainOwnershipIdentifier>): void;


    /**
     * @summary Renew a domain.
     *
     * Renew a domain.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} domainName Name of the domain.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    renewWithHttpOperationResponse(resourceGroupName: string, domainName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Renew a domain.
     *
     * Renew a domain.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} domainName Name of the domain.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    renew(resourceGroupName: string, domainName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    renew(resourceGroupName: string, domainName: string, callback: ServiceCallback<void>): void;
    renew(resourceGroupName: string, domainName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Creates or updates a domain.
     *
     * Creates or updates a domain.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} domainName Name of the domain.
     *
     * @param {object} domain Domain registration information.
     *
     * @param {object} domain.contactAdmin Administrative contact.
     *
     * @param {object} domain.contactBilling Billing contact.
     *
     * @param {object} domain.contactRegistrant Registrant contact.
     *
     * @param {object} domain.contactTech Technical contact.
     *
     * @param {object} [domain.contactTech.addressMailing] Mailing address.
     *
     * @param {string} domain.contactTech.addressMailing.address1 First line of an
     * Address.
     *
     * @param {string} [domain.contactTech.addressMailing.address2] The second line
     * of the Address. Optional.
     *
     * @param {string} domain.contactTech.addressMailing.city The city for the
     * address.
     *
     * @param {string} domain.contactTech.addressMailing.country The country for
     * the address.
     *
     * @param {string} domain.contactTech.addressMailing.postalCode The postal code
     * for the address.
     *
     * @param {string} domain.contactTech.addressMailing.state The state or
     * province for the address.
     *
     * @param {string} domain.contactTech.email Email address.
     *
     * @param {string} [domain.contactTech.fax] Fax number.
     *
     * @param {string} [domain.contactTech.jobTitle] Job title.
     *
     * @param {string} domain.contactTech.nameFirst First name.
     *
     * @param {string} domain.contactTech.nameLast Last name.
     *
     * @param {string} [domain.contactTech.nameMiddle] Middle name.
     *
     * @param {string} [domain.contactTech.organization] Organization contact
     * belongs to.
     *
     * @param {string} domain.contactTech.phone Phone number.
     *
     * @param {boolean} [domain.privacy] <code>true</code> if domain privacy is
     * enabled for this domain; otherwise, <code>false</code>.
     *
     * @param {boolean} [domain.autoRenew] <code>true</code> if the domain should
     * be automatically renewed; otherwise, <code>false</code>.
     *
     * @param {object} domain.consent Legal agreement consent.
     *
     * @param {array} [domain.consent.agreementKeys] List of applicable legal
     * agreement keys. This list can be retrieved using ListLegalAgreements API
     * under <code>TopLevelDomain</code> resource.
     *
     * @param {string} [domain.consent.agreedBy] Client IP address.
     *
     * @param {date} [domain.consent.agreedAt] Timestamp when the agreements were
     * accepted.
     *
     * @param {string} [domain.dnsType] Current DNS type. Possible values include:
     * 'AzureDns', 'DefaultDomainRegistrarDns'
     *
     * @param {string} [domain.dnsZoneId] Azure DNS Zone to use
     *
     * @param {string} [domain.targetDnsType] Target DNS type (would be used for
     * migration). Possible values include: 'AzureDns', 'DefaultDomainRegistrarDns'
     *
     * @param {string} [domain.authCode]
     *
     * @param {string} [domain.kind] Kind of resource.
     *
     * @param {string} domain.location Resource Location.
     *
     * @param {object} [domain.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Domain>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, domainName: string, domain: models.Domain, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Domain>>;

    /**
     * @summary Creates or updates a domain.
     *
     * Creates or updates a domain.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} domainName Name of the domain.
     *
     * @param {object} domain Domain registration information.
     *
     * @param {object} domain.contactAdmin Administrative contact.
     *
     * @param {object} domain.contactBilling Billing contact.
     *
     * @param {object} domain.contactRegistrant Registrant contact.
     *
     * @param {object} domain.contactTech Technical contact.
     *
     * @param {object} [domain.contactTech.addressMailing] Mailing address.
     *
     * @param {string} domain.contactTech.addressMailing.address1 First line of an
     * Address.
     *
     * @param {string} [domain.contactTech.addressMailing.address2] The second line
     * of the Address. Optional.
     *
     * @param {string} domain.contactTech.addressMailing.city The city for the
     * address.
     *
     * @param {string} domain.contactTech.addressMailing.country The country for
     * the address.
     *
     * @param {string} domain.contactTech.addressMailing.postalCode The postal code
     * for the address.
     *
     * @param {string} domain.contactTech.addressMailing.state The state or
     * province for the address.
     *
     * @param {string} domain.contactTech.email Email address.
     *
     * @param {string} [domain.contactTech.fax] Fax number.
     *
     * @param {string} [domain.contactTech.jobTitle] Job title.
     *
     * @param {string} domain.contactTech.nameFirst First name.
     *
     * @param {string} domain.contactTech.nameLast Last name.
     *
     * @param {string} [domain.contactTech.nameMiddle] Middle name.
     *
     * @param {string} [domain.contactTech.organization] Organization contact
     * belongs to.
     *
     * @param {string} domain.contactTech.phone Phone number.
     *
     * @param {boolean} [domain.privacy] <code>true</code> if domain privacy is
     * enabled for this domain; otherwise, <code>false</code>.
     *
     * @param {boolean} [domain.autoRenew] <code>true</code> if the domain should
     * be automatically renewed; otherwise, <code>false</code>.
     *
     * @param {object} domain.consent Legal agreement consent.
     *
     * @param {array} [domain.consent.agreementKeys] List of applicable legal
     * agreement keys. This list can be retrieved using ListLegalAgreements API
     * under <code>TopLevelDomain</code> resource.
     *
     * @param {string} [domain.consent.agreedBy] Client IP address.
     *
     * @param {date} [domain.consent.agreedAt] Timestamp when the agreements were
     * accepted.
     *
     * @param {string} [domain.dnsType] Current DNS type. Possible values include:
     * 'AzureDns', 'DefaultDomainRegistrarDns'
     *
     * @param {string} [domain.dnsZoneId] Azure DNS Zone to use
     *
     * @param {string} [domain.targetDnsType] Target DNS type (would be used for
     * migration). Possible values include: 'AzureDns', 'DefaultDomainRegistrarDns'
     *
     * @param {string} [domain.authCode]
     *
     * @param {string} [domain.kind] Kind of resource.
     *
     * @param {string} domain.location Resource Location.
     *
     * @param {object} [domain.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Domain} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Domain} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Domain} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, domainName: string, domain: models.Domain, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Domain>;
    beginCreateOrUpdate(resourceGroupName: string, domainName: string, domain: models.Domain, callback: ServiceCallback<models.Domain>): void;
    beginCreateOrUpdate(resourceGroupName: string, domainName: string, domain: models.Domain, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Domain>): void;


    /**
     * @summary Get all domains in a subscription.
     *
     * Get all domains in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DomainCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DomainCollection>>;

    /**
     * @summary Get all domains in a subscription.
     *
     * Get all domains in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DomainCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DomainCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DomainCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DomainCollection>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.DomainCollection>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainCollection>): void;


    /**
     * @summary Get domain name recommendations based on keywords.
     *
     * Get domain name recommendations based on keywords.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NameIdentifierCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listRecommendationsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NameIdentifierCollection>>;

    /**
     * @summary Get domain name recommendations based on keywords.
     *
     * Get domain name recommendations based on keywords.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NameIdentifierCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NameIdentifierCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NameIdentifierCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listRecommendationsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NameIdentifierCollection>;
    listRecommendationsNext(nextPageLink: string, callback: ServiceCallback<models.NameIdentifierCollection>): void;
    listRecommendationsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NameIdentifierCollection>): void;


    /**
     * @summary Get all domains in a resource group.
     *
     * Get all domains in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DomainCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DomainCollection>>;

    /**
     * @summary Get all domains in a resource group.
     *
     * Get all domains in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DomainCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DomainCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DomainCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DomainCollection>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.DomainCollection>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainCollection>): void;


    /**
     * @summary Lists domain ownership identifiers.
     *
     * Lists domain ownership identifiers.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DomainOwnershipIdentifierCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listOwnershipIdentifiersNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DomainOwnershipIdentifierCollection>>;

    /**
     * @summary Lists domain ownership identifiers.
     *
     * Lists domain ownership identifiers.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DomainOwnershipIdentifierCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DomainOwnershipIdentifierCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DomainOwnershipIdentifierCollection} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listOwnershipIdentifiersNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DomainOwnershipIdentifierCollection>;
    listOwnershipIdentifiersNext(nextPageLink: string, callback: ServiceCallback<models.DomainOwnershipIdentifierCollection>): void;
    listOwnershipIdentifiersNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainOwnershipIdentifierCollection>): void;
}

/**
 * @class
 * TopLevelDomains
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the WebSiteManagementClient.
 */
export interface TopLevelDomains {


    /**
     * @summary Get all top-level domains supported for registration.
     *
     * Get all top-level domains supported for registration.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TopLevelDomainCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TopLevelDomainCollection>>;

    /**
     * @summary Get all top-level domains supported for registration.
     *
     * Get all top-level domains supported for registration.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TopLevelDomainCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TopLevelDomainCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TopLevelDomainCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TopLevelDomainCollection>;
    list(callback: ServiceCallback<models.TopLevelDomainCollection>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TopLevelDomainCollection>): void;


    /**
     * @summary Get details of a top-level domain.
     *
     * Get details of a top-level domain.
     *
     * @param {string} name Name of the top-level domain.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TopLevelDomain>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TopLevelDomain>>;

    /**
     * @summary Get details of a top-level domain.
     *
     * Get details of a top-level domain.
     *
     * @param {string} name Name of the top-level domain.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TopLevelDomain} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TopLevelDomain} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TopLevelDomain} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TopLevelDomain>;
    get(name: string, callback: ServiceCallback<models.TopLevelDomain>): void;
    get(name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TopLevelDomain>): void;


    /**
     * @summary Gets all legal agreements that user needs to accept before
     * purchasing a domain.
     *
     * Gets all legal agreements that user needs to accept before purchasing a
     * domain.
     *
     * @param {string} name Name of the top-level domain.
     *
     * @param {object} agreementOption Domain agreement options.
     *
     * @param {boolean} [agreementOption.includePrivacy] If <code>true</code>, then
     * the list of agreements will include agreements for domain privacy as well;
     * otherwise, <code>false</code>.
     *
     * @param {boolean} [agreementOption.forTransfer] If <code>true</code>, then
     * the list of agreements will include agreements for domain transfer as well;
     * otherwise, <code>false</code>.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TldLegalAgreementCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAgreementsWithHttpOperationResponse(name: string, agreementOption: models.TopLevelDomainAgreementOption, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TldLegalAgreementCollection>>;

    /**
     * @summary Gets all legal agreements that user needs to accept before
     * purchasing a domain.
     *
     * Gets all legal agreements that user needs to accept before purchasing a
     * domain.
     *
     * @param {string} name Name of the top-level domain.
     *
     * @param {object} agreementOption Domain agreement options.
     *
     * @param {boolean} [agreementOption.includePrivacy] If <code>true</code>, then
     * the list of agreements will include agreements for domain privacy as well;
     * otherwise, <code>false</code>.
     *
     * @param {boolean} [agreementOption.forTransfer] If <code>true</code>, then
     * the list of agreements will include agreements for domain transfer as well;
     * otherwise, <code>false</code>.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TldLegalAgreementCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TldLegalAgreementCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TldLegalAgreementCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAgreements(name: string, agreementOption: models.TopLevelDomainAgreementOption, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TldLegalAgreementCollection>;
    listAgreements(name: string, agreementOption: models.TopLevelDomainAgreementOption, callback: ServiceCallback<models.TldLegalAgreementCollection>): void;
    listAgreements(name: string, agreementOption: models.TopLevelDomainAgreementOption, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TldLegalAgreementCollection>): void;


    /**
     * @summary Get all top-level domains supported for registration.
     *
     * Get all top-level domains supported for registration.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TopLevelDomainCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TopLevelDomainCollection>>;

    /**
     * @summary Get all top-level domains supported for registration.
     *
     * Get all top-level domains supported for registration.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TopLevelDomainCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TopLevelDomainCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TopLevelDomainCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TopLevelDomainCollection>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.TopLevelDomainCollection>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TopLevelDomainCollection>): void;


    /**
     * @summary Gets all legal agreements that user needs to accept before
     * purchasing a domain.
     *
     * Gets all legal agreements that user needs to accept before purchasing a
     * domain.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TldLegalAgreementCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAgreementsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TldLegalAgreementCollection>>;

    /**
     * @summary Gets all legal agreements that user needs to accept before
     * purchasing a domain.
     *
     * Gets all legal agreements that user needs to accept before purchasing a
     * domain.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TldLegalAgreementCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TldLegalAgreementCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TldLegalAgreementCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAgreementsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TldLegalAgreementCollection>;
    listAgreementsNext(nextPageLink: string, callback: ServiceCallback<models.TldLegalAgreementCollection>): void;
    listAgreementsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TldLegalAgreementCollection>): void;
}

/**
 * @class
 * DomainRegistrationProvider
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the WebSiteManagementClient.
 */
export interface DomainRegistrationProvider {


    /**
     * @summary Implements Csm operations Api to exposes the list of available Csm
     * Apis under the resource provider
     *
     * Implements Csm operations Api to exposes the list of available Csm Apis
     * under the resource provider
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CsmOperationCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listOperationsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CsmOperationCollection>>;

    /**
     * @summary Implements Csm operations Api to exposes the list of available Csm
     * Apis under the resource provider
     *
     * Implements Csm operations Api to exposes the list of available Csm Apis
     * under the resource provider
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CsmOperationCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CsmOperationCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CsmOperationCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listOperations(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CsmOperationCollection>;
    listOperations(callback: ServiceCallback<models.CsmOperationCollection>): void;
    listOperations(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CsmOperationCollection>): void;


    /**
     * @summary Implements Csm operations Api to exposes the list of available Csm
     * Apis under the resource provider
     *
     * Implements Csm operations Api to exposes the list of available Csm Apis
     * under the resource provider
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CsmOperationCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listOperationsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CsmOperationCollection>>;

    /**
     * @summary Implements Csm operations Api to exposes the list of available Csm
     * Apis under the resource provider
     *
     * Implements Csm operations Api to exposes the list of available Csm Apis
     * under the resource provider
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CsmOperationCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CsmOperationCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CsmOperationCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listOperationsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CsmOperationCollection>;
    listOperationsNext(nextPageLink: string, callback: ServiceCallback<models.CsmOperationCollection>): void;
    listOperationsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CsmOperationCollection>): void;
}

/**
 * @class
 * Certificates
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the WebSiteManagementClient.
 */
export interface Certificates {


    /**
     * @summary Get all certificates for a subscription.
     *
     * Get all certificates for a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CertificateCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificateCollection>>;

    /**
     * @summary Get all certificates for a subscription.
     *
     * Get all certificates for a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CertificateCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CertificateCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CertificateCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificateCollection>;
    list(callback: ServiceCallback<models.CertificateCollection>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateCollection>): void;


    /**
     * @summary Get all certificates in a resource group.
     *
     * Get all certificates in a resource group.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CertificateCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificateCollection>>;

    /**
     * @summary Get all certificates in a resource group.
     *
     * Get all certificates in a resource group.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CertificateCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CertificateCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CertificateCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificateCollection>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.CertificateCollection>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateCollection>): void;


    /**
     * @summary Get a certificate.
     *
     * Get a certificate.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the certificate.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Certificate>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Certificate>>;

    /**
     * @summary Get a certificate.
     *
     * Get a certificate.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the certificate.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Certificate} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Certificate} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Certificate} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Certificate>;
    get(resourceGroupName: string, name: string, callback: ServiceCallback<models.Certificate>): void;
    get(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Certificate>): void;


    /**
     * @summary Create or update a certificate.
     *
     * Create or update a certificate.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the certificate.
     *
     * @param {object} certificateEnvelope Details of certificate, if it exists
     * already.
     *
     * @param {array} [certificateEnvelope.hostNames] Host names the certificate
     * applies to.
     *
     * @param {buffer} [certificateEnvelope.pfxBlob] Pfx blob.
     *
     * @param {string} certificateEnvelope.password Certificate password.
     *
     * @param {string} [certificateEnvelope.keyVaultId] Key Vault Csm resource Id.
     *
     * @param {string} [certificateEnvelope.keyVaultSecretName] Key Vault secret
     * name.
     *
     * @param {string} [certificateEnvelope.serverFarmId] Resource ID of the
     * associated App Service plan, formatted as:
     * "/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}".
     *
     * @param {string} [certificateEnvelope.kind] Kind of resource.
     *
     * @param {string} certificateEnvelope.location Resource Location.
     *
     * @param {object} [certificateEnvelope.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Certificate>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, name: string, certificateEnvelope: models.Certificate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Certificate>>;

    /**
     * @summary Create or update a certificate.
     *
     * Create or update a certificate.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the certificate.
     *
     * @param {object} certificateEnvelope Details of certificate, if it exists
     * already.
     *
     * @param {array} [certificateEnvelope.hostNames] Host names the certificate
     * applies to.
     *
     * @param {buffer} [certificateEnvelope.pfxBlob] Pfx blob.
     *
     * @param {string} certificateEnvelope.password Certificate password.
     *
     * @param {string} [certificateEnvelope.keyVaultId] Key Vault Csm resource Id.
     *
     * @param {string} [certificateEnvelope.keyVaultSecretName] Key Vault secret
     * name.
     *
     * @param {string} [certificateEnvelope.serverFarmId] Resource ID of the
     * associated App Service plan, formatted as:
     * "/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}".
     *
     * @param {string} [certificateEnvelope.kind] Kind of resource.
     *
     * @param {string} certificateEnvelope.location Resource Location.
     *
     * @param {object} [certificateEnvelope.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Certificate} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Certificate} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Certificate} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, name: string, certificateEnvelope: models.Certificate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Certificate>;
    createOrUpdate(resourceGroupName: string, name: string, certificateEnvelope: models.Certificate, callback: ServiceCallback<models.Certificate>): void;
    createOrUpdate(resourceGroupName: string, name: string, certificateEnvelope: models.Certificate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Certificate>): void;


    /**
     * @summary Delete a certificate.
     *
     * Delete a certificate.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the certificate.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete a certificate.
     *
     * Delete a certificate.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the certificate.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, name: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Create or update a certificate.
     *
     * Create or update a certificate.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the certificate.
     *
     * @param {object} certificateEnvelope Details of certificate, if it exists
     * already.
     *
     * @param {array} [certificateEnvelope.hostNames] Host names the certificate
     * applies to.
     *
     * @param {buffer} [certificateEnvelope.pfxBlob] Pfx blob.
     *
     * @param {string} certificateEnvelope.password Certificate password.
     *
     * @param {string} [certificateEnvelope.keyVaultId] Key Vault Csm resource Id.
     *
     * @param {string} [certificateEnvelope.keyVaultSecretName] Key Vault secret
     * name.
     *
     * @param {string} [certificateEnvelope.serverFarmId] Resource ID of the
     * associated App Service plan, formatted as:
     * "/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}".
     *
     * @param {string} [certificateEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Certificate>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, name: string, certificateEnvelope: models.CertificatePatchResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Certificate>>;

    /**
     * @summary Create or update a certificate.
     *
     * Create or update a certificate.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the certificate.
     *
     * @param {object} certificateEnvelope Details of certificate, if it exists
     * already.
     *
     * @param {array} [certificateEnvelope.hostNames] Host names the certificate
     * applies to.
     *
     * @param {buffer} [certificateEnvelope.pfxBlob] Pfx blob.
     *
     * @param {string} certificateEnvelope.password Certificate password.
     *
     * @param {string} [certificateEnvelope.keyVaultId] Key Vault Csm resource Id.
     *
     * @param {string} [certificateEnvelope.keyVaultSecretName] Key Vault secret
     * name.
     *
     * @param {string} [certificateEnvelope.serverFarmId] Resource ID of the
     * associated App Service plan, formatted as:
     * "/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}".
     *
     * @param {string} [certificateEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Certificate} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Certificate} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Certificate} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, name: string, certificateEnvelope: models.CertificatePatchResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Certificate>;
    update(resourceGroupName: string, name: string, certificateEnvelope: models.CertificatePatchResource, callback: ServiceCallback<models.Certificate>): void;
    update(resourceGroupName: string, name: string, certificateEnvelope: models.CertificatePatchResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Certificate>): void;


    /**
     * @summary Get all certificates for a subscription.
     *
     * Get all certificates for a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CertificateCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificateCollection>>;

    /**
     * @summary Get all certificates for a subscription.
     *
     * Get all certificates for a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CertificateCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CertificateCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CertificateCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificateCollection>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.CertificateCollection>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateCollection>): void;


    /**
     * @summary Get all certificates in a resource group.
     *
     * Get all certificates in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CertificateCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificateCollection>>;

    /**
     * @summary Get all certificates in a resource group.
     *
     * Get all certificates in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CertificateCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CertificateCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CertificateCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificateCollection>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.CertificateCollection>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateCollection>): void;
}

/**
 * @class
 * DeletedWebApps
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the WebSiteManagementClient.
 */
export interface DeletedWebApps {


    /**
     * @summary Get all deleted apps for a subscription.
     *
     * Get all deleted apps for a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeletedWebAppCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeletedWebAppCollection>>;

    /**
     * @summary Get all deleted apps for a subscription.
     *
     * Get all deleted apps for a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeletedWebAppCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeletedWebAppCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeletedWebAppCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeletedWebAppCollection>;
    list(callback: ServiceCallback<models.DeletedWebAppCollection>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeletedWebAppCollection>): void;


    /**
     * @summary Get all deleted apps for a subscription.
     *
     * Get all deleted apps for a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeletedWebAppCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeletedWebAppCollection>>;

    /**
     * @summary Get all deleted apps for a subscription.
     *
     * Get all deleted apps for a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeletedWebAppCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeletedWebAppCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeletedWebAppCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeletedWebAppCollection>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.DeletedWebAppCollection>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeletedWebAppCollection>): void;
}

/**
 * @class
 * Diagnostics
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the WebSiteManagementClient.
 */
export interface Diagnostics {


    /**
     * @summary List Hosting Environment Detector Responses
     *
     * List Hosting Environment Detector Responses
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DetectorResponseCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listHostingEnvironmentDetectorResponsesWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DetectorResponseCollection>>;

    /**
     * @summary List Hosting Environment Detector Responses
     *
     * List Hosting Environment Detector Responses
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DetectorResponseCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DetectorResponseCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DetectorResponseCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listHostingEnvironmentDetectorResponses(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DetectorResponseCollection>;
    listHostingEnvironmentDetectorResponses(resourceGroupName: string, name: string, callback: ServiceCallback<models.DetectorResponseCollection>): void;
    listHostingEnvironmentDetectorResponses(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DetectorResponseCollection>): void;


    /**
     * @summary Get Hosting Environment Detector Response
     *
     * Get Hosting Environment Detector Response
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name App Service Environment Name
     *
     * @param {string} detectorName Detector Resource Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] Start Time
     *
     * @param {date} [options.endTime] End Time
     *
     * @param {string} [options.timeGrain] Time Grain
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DetectorResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getHostingEnvironmentDetectorResponseWithHttpOperationResponse(resourceGroupName: string, name: string, detectorName: string, options?: { startTime? : Date, endTime? : Date, timeGrain? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DetectorResponse>>;

    /**
     * @summary Get Hosting Environment Detector Response
     *
     * Get Hosting Environment Detector Response
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name App Service Environment Name
     *
     * @param {string} detectorName Detector Resource Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] Start Time
     *
     * @param {date} [options.endTime] End Time
     *
     * @param {string} [options.timeGrain] Time Grain
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DetectorResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DetectorResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DetectorResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getHostingEnvironmentDetectorResponse(resourceGroupName: string, name: string, detectorName: string, options?: { startTime? : Date, endTime? : Date, timeGrain? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.DetectorResponse>;
    getHostingEnvironmentDetectorResponse(resourceGroupName: string, name: string, detectorName: string, callback: ServiceCallback<models.DetectorResponse>): void;
    getHostingEnvironmentDetectorResponse(resourceGroupName: string, name: string, detectorName: string, options: { startTime? : Date, endTime? : Date, timeGrain? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DetectorResponse>): void;


    /**
     * @summary List Site Detector Responses
     *
     * List Site Detector Responses
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DetectorResponseCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSiteDetectorResponsesWithHttpOperationResponse(resourceGroupName: string, siteName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DetectorResponseCollection>>;

    /**
     * @summary List Site Detector Responses
     *
     * List Site Detector Responses
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DetectorResponseCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DetectorResponseCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DetectorResponseCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSiteDetectorResponses(resourceGroupName: string, siteName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DetectorResponseCollection>;
    listSiteDetectorResponses(resourceGroupName: string, siteName: string, callback: ServiceCallback<models.DetectorResponseCollection>): void;
    listSiteDetectorResponses(resourceGroupName: string, siteName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DetectorResponseCollection>): void;


    /**
     * @summary Get site detector response
     *
     * Get site detector response
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} detectorName Detector Resource Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] Start Time
     *
     * @param {date} [options.endTime] End Time
     *
     * @param {string} [options.timeGrain] Time Grain
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DetectorResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSiteDetectorResponseWithHttpOperationResponse(resourceGroupName: string, siteName: string, detectorName: string, options?: { startTime? : Date, endTime? : Date, timeGrain? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DetectorResponse>>;

    /**
     * @summary Get site detector response
     *
     * Get site detector response
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} detectorName Detector Resource Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] Start Time
     *
     * @param {date} [options.endTime] End Time
     *
     * @param {string} [options.timeGrain] Time Grain
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DetectorResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DetectorResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DetectorResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSiteDetectorResponse(resourceGroupName: string, siteName: string, detectorName: string, options?: { startTime? : Date, endTime? : Date, timeGrain? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.DetectorResponse>;
    getSiteDetectorResponse(resourceGroupName: string, siteName: string, detectorName: string, callback: ServiceCallback<models.DetectorResponse>): void;
    getSiteDetectorResponse(resourceGroupName: string, siteName: string, detectorName: string, options: { startTime? : Date, endTime? : Date, timeGrain? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DetectorResponse>): void;


    /**
     * @summary Get Diagnostics Categories
     *
     * Get Diagnostics Categories
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticCategoryCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSiteDiagnosticCategoriesWithHttpOperationResponse(resourceGroupName: string, siteName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticCategoryCollection>>;

    /**
     * @summary Get Diagnostics Categories
     *
     * Get Diagnostics Categories
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticCategoryCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticCategoryCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticCategoryCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSiteDiagnosticCategories(resourceGroupName: string, siteName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticCategoryCollection>;
    listSiteDiagnosticCategories(resourceGroupName: string, siteName: string, callback: ServiceCallback<models.DiagnosticCategoryCollection>): void;
    listSiteDiagnosticCategories(resourceGroupName: string, siteName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticCategoryCollection>): void;


    /**
     * @summary Get Diagnostics Category
     *
     * Get Diagnostics Category
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} diagnosticCategory Diagnostic Category
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticCategory>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSiteDiagnosticCategoryWithHttpOperationResponse(resourceGroupName: string, siteName: string, diagnosticCategory: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticCategory>>;

    /**
     * @summary Get Diagnostics Category
     *
     * Get Diagnostics Category
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} diagnosticCategory Diagnostic Category
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticCategory} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticCategory} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticCategory} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSiteDiagnosticCategory(resourceGroupName: string, siteName: string, diagnosticCategory: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticCategory>;
    getSiteDiagnosticCategory(resourceGroupName: string, siteName: string, diagnosticCategory: string, callback: ServiceCallback<models.DiagnosticCategory>): void;
    getSiteDiagnosticCategory(resourceGroupName: string, siteName: string, diagnosticCategory: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticCategory>): void;


    /**
     * @summary Get Site Analyses
     *
     * Get Site Analyses
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} diagnosticCategory Diagnostic Category
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticAnalysisCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSiteAnalysesWithHttpOperationResponse(resourceGroupName: string, siteName: string, diagnosticCategory: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticAnalysisCollection>>;

    /**
     * @summary Get Site Analyses
     *
     * Get Site Analyses
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} diagnosticCategory Diagnostic Category
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticAnalysisCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticAnalysisCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticAnalysisCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSiteAnalyses(resourceGroupName: string, siteName: string, diagnosticCategory: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticAnalysisCollection>;
    listSiteAnalyses(resourceGroupName: string, siteName: string, diagnosticCategory: string, callback: ServiceCallback<models.DiagnosticAnalysisCollection>): void;
    listSiteAnalyses(resourceGroupName: string, siteName: string, diagnosticCategory: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticAnalysisCollection>): void;


    /**
     * @summary Get Site Analysis
     *
     * Get Site Analysis
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} diagnosticCategory Diagnostic Category
     *
     * @param {string} analysisName Analysis Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticAnalysis>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSiteAnalysisWithHttpOperationResponse(resourceGroupName: string, siteName: string, diagnosticCategory: string, analysisName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticAnalysis>>;

    /**
     * @summary Get Site Analysis
     *
     * Get Site Analysis
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} diagnosticCategory Diagnostic Category
     *
     * @param {string} analysisName Analysis Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticAnalysis} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticAnalysis} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticAnalysis} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSiteAnalysis(resourceGroupName: string, siteName: string, diagnosticCategory: string, analysisName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticAnalysis>;
    getSiteAnalysis(resourceGroupName: string, siteName: string, diagnosticCategory: string, analysisName: string, callback: ServiceCallback<models.DiagnosticAnalysis>): void;
    getSiteAnalysis(resourceGroupName: string, siteName: string, diagnosticCategory: string, analysisName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticAnalysis>): void;


    /**
     * @summary Execute Analysis
     *
     * Execute Analysis
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} diagnosticCategory Category Name
     *
     * @param {string} analysisName Analysis Resource Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] Start Time
     *
     * @param {date} [options.endTime] End Time
     *
     * @param {string} [options.timeGrain] Time Grain
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticAnalysis>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    executeSiteAnalysisWithHttpOperationResponse(resourceGroupName: string, siteName: string, diagnosticCategory: string, analysisName: string, options?: { startTime? : Date, endTime? : Date, timeGrain? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticAnalysis>>;

    /**
     * @summary Execute Analysis
     *
     * Execute Analysis
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} diagnosticCategory Category Name
     *
     * @param {string} analysisName Analysis Resource Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] Start Time
     *
     * @param {date} [options.endTime] End Time
     *
     * @param {string} [options.timeGrain] Time Grain
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticAnalysis} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticAnalysis} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticAnalysis} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    executeSiteAnalysis(resourceGroupName: string, siteName: string, diagnosticCategory: string, analysisName: string, options?: { startTime? : Date, endTime? : Date, timeGrain? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticAnalysis>;
    executeSiteAnalysis(resourceGroupName: string, siteName: string, diagnosticCategory: string, analysisName: string, callback: ServiceCallback<models.DiagnosticAnalysis>): void;
    executeSiteAnalysis(resourceGroupName: string, siteName: string, diagnosticCategory: string, analysisName: string, options: { startTime? : Date, endTime? : Date, timeGrain? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticAnalysis>): void;


    /**
     * @summary Get Detectors
     *
     * Get Detectors
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} diagnosticCategory Diagnostic Category
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticDetectorCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSiteDetectorsWithHttpOperationResponse(resourceGroupName: string, siteName: string, diagnosticCategory: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticDetectorCollection>>;

    /**
     * @summary Get Detectors
     *
     * Get Detectors
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} diagnosticCategory Diagnostic Category
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticDetectorCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticDetectorCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticDetectorCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSiteDetectors(resourceGroupName: string, siteName: string, diagnosticCategory: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticDetectorCollection>;
    listSiteDetectors(resourceGroupName: string, siteName: string, diagnosticCategory: string, callback: ServiceCallback<models.DiagnosticDetectorCollection>): void;
    listSiteDetectors(resourceGroupName: string, siteName: string, diagnosticCategory: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticDetectorCollection>): void;


    /**
     * @summary Get Detector
     *
     * Get Detector
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} diagnosticCategory Diagnostic Category
     *
     * @param {string} detectorName Detector Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticDetectorCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSiteDetectorWithHttpOperationResponse(resourceGroupName: string, siteName: string, diagnosticCategory: string, detectorName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticDetectorCollection>>;

    /**
     * @summary Get Detector
     *
     * Get Detector
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} diagnosticCategory Diagnostic Category
     *
     * @param {string} detectorName Detector Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticDetectorCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticDetectorCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticDetectorCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSiteDetector(resourceGroupName: string, siteName: string, diagnosticCategory: string, detectorName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticDetectorCollection>;
    getSiteDetector(resourceGroupName: string, siteName: string, diagnosticCategory: string, detectorName: string, callback: ServiceCallback<models.DiagnosticDetectorCollection>): void;
    getSiteDetector(resourceGroupName: string, siteName: string, diagnosticCategory: string, detectorName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticDetectorCollection>): void;


    /**
     * @summary Execute Detector
     *
     * Execute Detector
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} detectorName Detector Resource Name
     *
     * @param {string} diagnosticCategory Category Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] Start Time
     *
     * @param {date} [options.endTime] End Time
     *
     * @param {string} [options.timeGrain] Time Grain
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticDetectorResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    executeSiteDetectorWithHttpOperationResponse(resourceGroupName: string, siteName: string, detectorName: string, diagnosticCategory: string, options?: { startTime? : Date, endTime? : Date, timeGrain? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticDetectorResponse>>;

    /**
     * @summary Execute Detector
     *
     * Execute Detector
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} detectorName Detector Resource Name
     *
     * @param {string} diagnosticCategory Category Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] Start Time
     *
     * @param {date} [options.endTime] End Time
     *
     * @param {string} [options.timeGrain] Time Grain
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticDetectorResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticDetectorResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticDetectorResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    executeSiteDetector(resourceGroupName: string, siteName: string, detectorName: string, diagnosticCategory: string, options?: { startTime? : Date, endTime? : Date, timeGrain? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticDetectorResponse>;
    executeSiteDetector(resourceGroupName: string, siteName: string, detectorName: string, diagnosticCategory: string, callback: ServiceCallback<models.DiagnosticDetectorResponse>): void;
    executeSiteDetector(resourceGroupName: string, siteName: string, detectorName: string, diagnosticCategory: string, options: { startTime? : Date, endTime? : Date, timeGrain? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticDetectorResponse>): void;


    /**
     * @summary List Site Detector Responses
     *
     * List Site Detector Responses
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} slot Slot Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DetectorResponseCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSiteDetectorResponsesSlotWithHttpOperationResponse(resourceGroupName: string, siteName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DetectorResponseCollection>>;

    /**
     * @summary List Site Detector Responses
     *
     * List Site Detector Responses
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} slot Slot Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DetectorResponseCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DetectorResponseCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DetectorResponseCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSiteDetectorResponsesSlot(resourceGroupName: string, siteName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DetectorResponseCollection>;
    listSiteDetectorResponsesSlot(resourceGroupName: string, siteName: string, slot: string, callback: ServiceCallback<models.DetectorResponseCollection>): void;
    listSiteDetectorResponsesSlot(resourceGroupName: string, siteName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DetectorResponseCollection>): void;


    /**
     * @summary Get site detector response
     *
     * Get site detector response
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} detectorName Detector Resource Name
     *
     * @param {string} slot Slot Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] Start Time
     *
     * @param {date} [options.endTime] End Time
     *
     * @param {string} [options.timeGrain] Time Grain
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DetectorResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSiteDetectorResponseSlotWithHttpOperationResponse(resourceGroupName: string, siteName: string, detectorName: string, slot: string, options?: { startTime? : Date, endTime? : Date, timeGrain? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DetectorResponse>>;

    /**
     * @summary Get site detector response
     *
     * Get site detector response
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} detectorName Detector Resource Name
     *
     * @param {string} slot Slot Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] Start Time
     *
     * @param {date} [options.endTime] End Time
     *
     * @param {string} [options.timeGrain] Time Grain
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DetectorResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DetectorResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DetectorResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSiteDetectorResponseSlot(resourceGroupName: string, siteName: string, detectorName: string, slot: string, options?: { startTime? : Date, endTime? : Date, timeGrain? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.DetectorResponse>;
    getSiteDetectorResponseSlot(resourceGroupName: string, siteName: string, detectorName: string, slot: string, callback: ServiceCallback<models.DetectorResponse>): void;
    getSiteDetectorResponseSlot(resourceGroupName: string, siteName: string, detectorName: string, slot: string, options: { startTime? : Date, endTime? : Date, timeGrain? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DetectorResponse>): void;


    /**
     * @summary Get Diagnostics Categories
     *
     * Get Diagnostics Categories
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} slot Slot Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticCategoryCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSiteDiagnosticCategoriesSlotWithHttpOperationResponse(resourceGroupName: string, siteName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticCategoryCollection>>;

    /**
     * @summary Get Diagnostics Categories
     *
     * Get Diagnostics Categories
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} slot Slot Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticCategoryCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticCategoryCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticCategoryCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSiteDiagnosticCategoriesSlot(resourceGroupName: string, siteName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticCategoryCollection>;
    listSiteDiagnosticCategoriesSlot(resourceGroupName: string, siteName: string, slot: string, callback: ServiceCallback<models.DiagnosticCategoryCollection>): void;
    listSiteDiagnosticCategoriesSlot(resourceGroupName: string, siteName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticCategoryCollection>): void;


    /**
     * @summary Get Diagnostics Category
     *
     * Get Diagnostics Category
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} diagnosticCategory Diagnostic Category
     *
     * @param {string} slot Slot Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticCategory>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSiteDiagnosticCategorySlotWithHttpOperationResponse(resourceGroupName: string, siteName: string, diagnosticCategory: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticCategory>>;

    /**
     * @summary Get Diagnostics Category
     *
     * Get Diagnostics Category
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} diagnosticCategory Diagnostic Category
     *
     * @param {string} slot Slot Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticCategory} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticCategory} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticCategory} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSiteDiagnosticCategorySlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticCategory>;
    getSiteDiagnosticCategorySlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, slot: string, callback: ServiceCallback<models.DiagnosticCategory>): void;
    getSiteDiagnosticCategorySlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticCategory>): void;


    /**
     * @summary Get Site Analyses
     *
     * Get Site Analyses
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} diagnosticCategory Diagnostic Category
     *
     * @param {string} slot Slot Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticAnalysisCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSiteAnalysesSlotWithHttpOperationResponse(resourceGroupName: string, siteName: string, diagnosticCategory: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticAnalysisCollection>>;

    /**
     * @summary Get Site Analyses
     *
     * Get Site Analyses
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} diagnosticCategory Diagnostic Category
     *
     * @param {string} slot Slot Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticAnalysisCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticAnalysisCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticAnalysisCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSiteAnalysesSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticAnalysisCollection>;
    listSiteAnalysesSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, slot: string, callback: ServiceCallback<models.DiagnosticAnalysisCollection>): void;
    listSiteAnalysesSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticAnalysisCollection>): void;


    /**
     * @summary Get Site Analysis
     *
     * Get Site Analysis
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} diagnosticCategory Diagnostic Category
     *
     * @param {string} analysisName Analysis Name
     *
     * @param {string} slot Slot - optional
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticAnalysis>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSiteAnalysisSlotWithHttpOperationResponse(resourceGroupName: string, siteName: string, diagnosticCategory: string, analysisName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticAnalysis>>;

    /**
     * @summary Get Site Analysis
     *
     * Get Site Analysis
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} diagnosticCategory Diagnostic Category
     *
     * @param {string} analysisName Analysis Name
     *
     * @param {string} slot Slot - optional
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticAnalysis} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticAnalysis} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticAnalysis} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSiteAnalysisSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, analysisName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticAnalysis>;
    getSiteAnalysisSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, analysisName: string, slot: string, callback: ServiceCallback<models.DiagnosticAnalysis>): void;
    getSiteAnalysisSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, analysisName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticAnalysis>): void;


    /**
     * @summary Execute Analysis
     *
     * Execute Analysis
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} diagnosticCategory Category Name
     *
     * @param {string} analysisName Analysis Resource Name
     *
     * @param {string} slot Slot Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] Start Time
     *
     * @param {date} [options.endTime] End Time
     *
     * @param {string} [options.timeGrain] Time Grain
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticAnalysis>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    executeSiteAnalysisSlotWithHttpOperationResponse(resourceGroupName: string, siteName: string, diagnosticCategory: string, analysisName: string, slot: string, options?: { startTime? : Date, endTime? : Date, timeGrain? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticAnalysis>>;

    /**
     * @summary Execute Analysis
     *
     * Execute Analysis
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} diagnosticCategory Category Name
     *
     * @param {string} analysisName Analysis Resource Name
     *
     * @param {string} slot Slot Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] Start Time
     *
     * @param {date} [options.endTime] End Time
     *
     * @param {string} [options.timeGrain] Time Grain
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticAnalysis} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticAnalysis} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticAnalysis} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    executeSiteAnalysisSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, analysisName: string, slot: string, options?: { startTime? : Date, endTime? : Date, timeGrain? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticAnalysis>;
    executeSiteAnalysisSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, analysisName: string, slot: string, callback: ServiceCallback<models.DiagnosticAnalysis>): void;
    executeSiteAnalysisSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, analysisName: string, slot: string, options: { startTime? : Date, endTime? : Date, timeGrain? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticAnalysis>): void;


    /**
     * @summary Get Detectors
     *
     * Get Detectors
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} diagnosticCategory Diagnostic Category
     *
     * @param {string} slot Slot Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticDetectorCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSiteDetectorsSlotWithHttpOperationResponse(resourceGroupName: string, siteName: string, diagnosticCategory: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticDetectorCollection>>;

    /**
     * @summary Get Detectors
     *
     * Get Detectors
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} diagnosticCategory Diagnostic Category
     *
     * @param {string} slot Slot Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticDetectorCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticDetectorCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticDetectorCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSiteDetectorsSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticDetectorCollection>;
    listSiteDetectorsSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, slot: string, callback: ServiceCallback<models.DiagnosticDetectorCollection>): void;
    listSiteDetectorsSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticDetectorCollection>): void;


    /**
     * @summary Get Detector
     *
     * Get Detector
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} diagnosticCategory Diagnostic Category
     *
     * @param {string} detectorName Detector Name
     *
     * @param {string} slot Slot Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticDetectorCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSiteDetectorSlotWithHttpOperationResponse(resourceGroupName: string, siteName: string, diagnosticCategory: string, detectorName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticDetectorCollection>>;

    /**
     * @summary Get Detector
     *
     * Get Detector
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} diagnosticCategory Diagnostic Category
     *
     * @param {string} detectorName Detector Name
     *
     * @param {string} slot Slot Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticDetectorCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticDetectorCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticDetectorCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSiteDetectorSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, detectorName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticDetectorCollection>;
    getSiteDetectorSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, detectorName: string, slot: string, callback: ServiceCallback<models.DiagnosticDetectorCollection>): void;
    getSiteDetectorSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, detectorName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticDetectorCollection>): void;


    /**
     * @summary Execute Detector
     *
     * Execute Detector
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} detectorName Detector Resource Name
     *
     * @param {string} diagnosticCategory Category Name
     *
     * @param {string} slot Slot Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] Start Time
     *
     * @param {date} [options.endTime] End Time
     *
     * @param {string} [options.timeGrain] Time Grain
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticDetectorResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    executeSiteDetectorSlotWithHttpOperationResponse(resourceGroupName: string, siteName: string, detectorName: string, diagnosticCategory: string, slot: string, options?: { startTime? : Date, endTime? : Date, timeGrain? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticDetectorResponse>>;

    /**
     * @summary Execute Detector
     *
     * Execute Detector
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site Name
     *
     * @param {string} detectorName Detector Resource Name
     *
     * @param {string} diagnosticCategory Category Name
     *
     * @param {string} slot Slot Name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {date} [options.startTime] Start Time
     *
     * @param {date} [options.endTime] End Time
     *
     * @param {string} [options.timeGrain] Time Grain
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticDetectorResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticDetectorResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticDetectorResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    executeSiteDetectorSlot(resourceGroupName: string, siteName: string, detectorName: string, diagnosticCategory: string, slot: string, options?: { startTime? : Date, endTime? : Date, timeGrain? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticDetectorResponse>;
    executeSiteDetectorSlot(resourceGroupName: string, siteName: string, detectorName: string, diagnosticCategory: string, slot: string, callback: ServiceCallback<models.DiagnosticDetectorResponse>): void;
    executeSiteDetectorSlot(resourceGroupName: string, siteName: string, detectorName: string, diagnosticCategory: string, slot: string, options: { startTime? : Date, endTime? : Date, timeGrain? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticDetectorResponse>): void;


    /**
     * @summary List Hosting Environment Detector Responses
     *
     * List Hosting Environment Detector Responses
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DetectorResponseCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listHostingEnvironmentDetectorResponsesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DetectorResponseCollection>>;

    /**
     * @summary List Hosting Environment Detector Responses
     *
     * List Hosting Environment Detector Responses
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DetectorResponseCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DetectorResponseCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DetectorResponseCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listHostingEnvironmentDetectorResponsesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DetectorResponseCollection>;
    listHostingEnvironmentDetectorResponsesNext(nextPageLink: string, callback: ServiceCallback<models.DetectorResponseCollection>): void;
    listHostingEnvironmentDetectorResponsesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DetectorResponseCollection>): void;


    /**
     * @summary List Site Detector Responses
     *
     * List Site Detector Responses
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DetectorResponseCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSiteDetectorResponsesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DetectorResponseCollection>>;

    /**
     * @summary List Site Detector Responses
     *
     * List Site Detector Responses
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DetectorResponseCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DetectorResponseCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DetectorResponseCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSiteDetectorResponsesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DetectorResponseCollection>;
    listSiteDetectorResponsesNext(nextPageLink: string, callback: ServiceCallback<models.DetectorResponseCollection>): void;
    listSiteDetectorResponsesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DetectorResponseCollection>): void;


    /**
     * @summary Get Diagnostics Categories
     *
     * Get Diagnostics Categories
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticCategoryCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSiteDiagnosticCategoriesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticCategoryCollection>>;

    /**
     * @summary Get Diagnostics Categories
     *
     * Get Diagnostics Categories
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticCategoryCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticCategoryCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticCategoryCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSiteDiagnosticCategoriesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticCategoryCollection>;
    listSiteDiagnosticCategoriesNext(nextPageLink: string, callback: ServiceCallback<models.DiagnosticCategoryCollection>): void;
    listSiteDiagnosticCategoriesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticCategoryCollection>): void;


    /**
     * @summary Get Site Analyses
     *
     * Get Site Analyses
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticAnalysisCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSiteAnalysesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticAnalysisCollection>>;

    /**
     * @summary Get Site Analyses
     *
     * Get Site Analyses
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticAnalysisCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticAnalysisCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticAnalysisCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSiteAnalysesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticAnalysisCollection>;
    listSiteAnalysesNext(nextPageLink: string, callback: ServiceCallback<models.DiagnosticAnalysisCollection>): void;
    listSiteAnalysesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticAnalysisCollection>): void;


    /**
     * @summary Get Detectors
     *
     * Get Detectors
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticDetectorCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSiteDetectorsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticDetectorCollection>>;

    /**
     * @summary Get Detectors
     *
     * Get Detectors
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticDetectorCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticDetectorCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticDetectorCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSiteDetectorsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticDetectorCollection>;
    listSiteDetectorsNext(nextPageLink: string, callback: ServiceCallback<models.DiagnosticDetectorCollection>): void;
    listSiteDetectorsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticDetectorCollection>): void;


    /**
     * @summary Get Detector
     *
     * Get Detector
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticDetectorCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSiteDetectorNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticDetectorCollection>>;

    /**
     * @summary Get Detector
     *
     * Get Detector
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticDetectorCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticDetectorCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticDetectorCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSiteDetectorNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticDetectorCollection>;
    getSiteDetectorNext(nextPageLink: string, callback: ServiceCallback<models.DiagnosticDetectorCollection>): void;
    getSiteDetectorNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticDetectorCollection>): void;


    /**
     * @summary List Site Detector Responses
     *
     * List Site Detector Responses
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DetectorResponseCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSiteDetectorResponsesSlotNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DetectorResponseCollection>>;

    /**
     * @summary List Site Detector Responses
     *
     * List Site Detector Responses
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DetectorResponseCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DetectorResponseCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DetectorResponseCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSiteDetectorResponsesSlotNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DetectorResponseCollection>;
    listSiteDetectorResponsesSlotNext(nextPageLink: string, callback: ServiceCallback<models.DetectorResponseCollection>): void;
    listSiteDetectorResponsesSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DetectorResponseCollection>): void;


    /**
     * @summary Get Diagnostics Categories
     *
     * Get Diagnostics Categories
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticCategoryCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSiteDiagnosticCategoriesSlotNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticCategoryCollection>>;

    /**
     * @summary Get Diagnostics Categories
     *
     * Get Diagnostics Categories
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticCategoryCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticCategoryCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticCategoryCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSiteDiagnosticCategoriesSlotNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticCategoryCollection>;
    listSiteDiagnosticCategoriesSlotNext(nextPageLink: string, callback: ServiceCallback<models.DiagnosticCategoryCollection>): void;
    listSiteDiagnosticCategoriesSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticCategoryCollection>): void;


    /**
     * @summary Get Site Analyses
     *
     * Get Site Analyses
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticAnalysisCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSiteAnalysesSlotNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticAnalysisCollection>>;

    /**
     * @summary Get Site Analyses
     *
     * Get Site Analyses
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticAnalysisCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticAnalysisCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticAnalysisCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSiteAnalysesSlotNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticAnalysisCollection>;
    listSiteAnalysesSlotNext(nextPageLink: string, callback: ServiceCallback<models.DiagnosticAnalysisCollection>): void;
    listSiteAnalysesSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticAnalysisCollection>): void;


    /**
     * @summary Get Detectors
     *
     * Get Detectors
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticDetectorCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSiteDetectorsSlotNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticDetectorCollection>>;

    /**
     * @summary Get Detectors
     *
     * Get Detectors
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticDetectorCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticDetectorCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticDetectorCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSiteDetectorsSlotNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticDetectorCollection>;
    listSiteDetectorsSlotNext(nextPageLink: string, callback: ServiceCallback<models.DiagnosticDetectorCollection>): void;
    listSiteDetectorsSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticDetectorCollection>): void;


    /**
     * @summary Get Detector
     *
     * Get Detector
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DiagnosticDetectorCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSiteDetectorSlotNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiagnosticDetectorCollection>>;

    /**
     * @summary Get Detector
     *
     * Get Detector
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DiagnosticDetectorCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DiagnosticDetectorCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DiagnosticDetectorCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSiteDetectorSlotNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DiagnosticDetectorCollection>;
    getSiteDetectorSlotNext(nextPageLink: string, callback: ServiceCallback<models.DiagnosticDetectorCollection>): void;
    getSiteDetectorSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiagnosticDetectorCollection>): void;
}

/**
 * @class
 * Provider
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the WebSiteManagementClient.
 */
export interface Provider {


    /**
     * @summary Get available application frameworks and their versions
     *
     * Get available application frameworks and their versions
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.osTypeSelected] Possible values include: 'Windows',
     * 'Linux', 'WindowsFunctions', 'LinuxFunctions'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationStackCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAvailableStacksWithHttpOperationResponse(options?: { osTypeSelected? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationStackCollection>>;

    /**
     * @summary Get available application frameworks and their versions
     *
     * Get available application frameworks and their versions
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.osTypeSelected] Possible values include: 'Windows',
     * 'Linux', 'WindowsFunctions', 'LinuxFunctions'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationStackCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationStackCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationStackCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAvailableStacks(options?: { osTypeSelected? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationStackCollection>;
    getAvailableStacks(callback: ServiceCallback<models.ApplicationStackCollection>): void;
    getAvailableStacks(options: { osTypeSelected? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationStackCollection>): void;


    /**
     * @summary Gets all available operations for the Microsoft.Web resource
     * provider. Also exposes resource metric definitions
     *
     * Gets all available operations for the Microsoft.Web resource provider. Also
     * exposes resource metric definitions
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CsmOperationCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listOperationsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CsmOperationCollection>>;

    /**
     * @summary Gets all available operations for the Microsoft.Web resource
     * provider. Also exposes resource metric definitions
     *
     * Gets all available operations for the Microsoft.Web resource provider. Also
     * exposes resource metric definitions
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CsmOperationCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CsmOperationCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CsmOperationCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listOperations(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CsmOperationCollection>;
    listOperations(callback: ServiceCallback<models.CsmOperationCollection>): void;
    listOperations(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CsmOperationCollection>): void;


    /**
     * @summary Get available application frameworks and their versions
     *
     * Get available application frameworks and their versions
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.osTypeSelected] Possible values include: 'Windows',
     * 'Linux', 'WindowsFunctions', 'LinuxFunctions'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationStackCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAvailableStacksOnPremWithHttpOperationResponse(options?: { osTypeSelected? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationStackCollection>>;

    /**
     * @summary Get available application frameworks and their versions
     *
     * Get available application frameworks and their versions
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.osTypeSelected] Possible values include: 'Windows',
     * 'Linux', 'WindowsFunctions', 'LinuxFunctions'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationStackCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationStackCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationStackCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAvailableStacksOnPrem(options?: { osTypeSelected? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationStackCollection>;
    getAvailableStacksOnPrem(callback: ServiceCallback<models.ApplicationStackCollection>): void;
    getAvailableStacksOnPrem(options: { osTypeSelected? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationStackCollection>): void;


    /**
     * @summary Get available application frameworks and their versions
     *
     * Get available application frameworks and their versions
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationStackCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAvailableStacksNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationStackCollection>>;

    /**
     * @summary Get available application frameworks and their versions
     *
     * Get available application frameworks and their versions
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationStackCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationStackCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationStackCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAvailableStacksNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationStackCollection>;
    getAvailableStacksNext(nextPageLink: string, callback: ServiceCallback<models.ApplicationStackCollection>): void;
    getAvailableStacksNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationStackCollection>): void;


    /**
     * @summary Gets all available operations for the Microsoft.Web resource
     * provider. Also exposes resource metric definitions
     *
     * Gets all available operations for the Microsoft.Web resource provider. Also
     * exposes resource metric definitions
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CsmOperationCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listOperationsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CsmOperationCollection>>;

    /**
     * @summary Gets all available operations for the Microsoft.Web resource
     * provider. Also exposes resource metric definitions
     *
     * Gets all available operations for the Microsoft.Web resource provider. Also
     * exposes resource metric definitions
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CsmOperationCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CsmOperationCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CsmOperationCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listOperationsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CsmOperationCollection>;
    listOperationsNext(nextPageLink: string, callback: ServiceCallback<models.CsmOperationCollection>): void;
    listOperationsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CsmOperationCollection>): void;


    /**
     * @summary Get available application frameworks and their versions
     *
     * Get available application frameworks and their versions
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicationStackCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAvailableStacksOnPremNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationStackCollection>>;

    /**
     * @summary Get available application frameworks and their versions
     *
     * Get available application frameworks and their versions
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicationStackCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicationStackCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicationStackCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAvailableStacksOnPremNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationStackCollection>;
    getAvailableStacksOnPremNext(nextPageLink: string, callback: ServiceCallback<models.ApplicationStackCollection>): void;
    getAvailableStacksOnPremNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationStackCollection>): void;
}

/**
 * @class
 * Recommendations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the WebSiteManagementClient.
 */
export interface Recommendations {


    /**
     * @summary List all recommendations for a subscription.
     *
     * List all recommendations for a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.featured] Specify <code>true</code> to return only
     * the most critical recommendations. The default is <code>false</code>, which
     * returns all recommendations.
     *
     * @param {string} [options.filter] Filter is specified by using OData syntax.
     * Example: $filter=channel eq 'Api' or channel eq 'Notification' and startTime
     * eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq
     * duration'[PT1H|PT1M|P1D]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RecommendationCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { featured? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RecommendationCollection>>;

    /**
     * @summary List all recommendations for a subscription.
     *
     * List all recommendations for a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.featured] Specify <code>true</code> to return only
     * the most critical recommendations. The default is <code>false</code>, which
     * returns all recommendations.
     *
     * @param {string} [options.filter] Filter is specified by using OData syntax.
     * Example: $filter=channel eq 'Api' or channel eq 'Notification' and startTime
     * eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq
     * duration'[PT1H|PT1M|P1D]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RecommendationCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RecommendationCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RecommendationCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { featured? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.RecommendationCollection>;
    list(callback: ServiceCallback<models.RecommendationCollection>): void;
    list(options: { featured? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RecommendationCollection>): void;


    /**
     * @summary Reset all recommendation opt-out settings for a subscription.
     *
     * Reset all recommendation opt-out settings for a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    resetAllFiltersWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Reset all recommendation opt-out settings for a subscription.
     *
     * Reset all recommendation opt-out settings for a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    resetAllFilters(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    resetAllFilters(callback: ServiceCallback<void>): void;
    resetAllFilters(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Disables the specified rule so it will not apply to a subscription
     * in the future.
     *
     * Disables the specified rule so it will not apply to a subscription in the
     * future.
     *
     * @param {string} name Rule name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    disableRecommendationForSubscriptionWithHttpOperationResponse(name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Disables the specified rule so it will not apply to a subscription
     * in the future.
     *
     * Disables the specified rule so it will not apply to a subscription in the
     * future.
     *
     * @param {string} name Rule name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    disableRecommendationForSubscription(name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    disableRecommendationForSubscription(name: string, callback: ServiceCallback<void>): void;
    disableRecommendationForSubscription(name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Get past recommendations for an app, optionally specified by the
     * time range.
     *
     * Get past recommendations for an app, optionally specified by the time range.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.expiredOnly] Specify <code>false</code> to return
     * all recommendations. The default is <code>true</code>, which returns only
     * expired recommendations.
     *
     * @param {string} [options.filter] Filter is specified by using OData syntax.
     * Example: $filter=channel eq 'Api' or channel eq 'Notification' and startTime
     * eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq
     * duration'[PT1H|PT1M|P1D]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RecommendationCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listHistoryForWebAppWithHttpOperationResponse(resourceGroupName: string, siteName: string, options?: { expiredOnly? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RecommendationCollection>>;

    /**
     * @summary Get past recommendations for an app, optionally specified by the
     * time range.
     *
     * Get past recommendations for an app, optionally specified by the time range.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.expiredOnly] Specify <code>false</code> to return
     * all recommendations. The default is <code>true</code>, which returns only
     * expired recommendations.
     *
     * @param {string} [options.filter] Filter is specified by using OData syntax.
     * Example: $filter=channel eq 'Api' or channel eq 'Notification' and startTime
     * eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq
     * duration'[PT1H|PT1M|P1D]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RecommendationCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RecommendationCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RecommendationCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listHistoryForWebApp(resourceGroupName: string, siteName: string, options?: { expiredOnly? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.RecommendationCollection>;
    listHistoryForWebApp(resourceGroupName: string, siteName: string, callback: ServiceCallback<models.RecommendationCollection>): void;
    listHistoryForWebApp(resourceGroupName: string, siteName: string, options: { expiredOnly? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RecommendationCollection>): void;


    /**
     * @summary Get all recommendations for an app.
     *
     * Get all recommendations for an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.featured] Specify <code>true</code> to return only
     * the most critical recommendations. The default is <code>false</code>, which
     * returns all recommendations.
     *
     * @param {string} [options.filter] Return only channels specified in the
     * filter. Filter is specified by using OData syntax. Example: $filter=channel
     * eq 'Api' or channel eq 'Notification'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RecommendationCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listRecommendedRulesForWebAppWithHttpOperationResponse(resourceGroupName: string, siteName: string, options?: { featured? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RecommendationCollection>>;

    /**
     * @summary Get all recommendations for an app.
     *
     * Get all recommendations for an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.featured] Specify <code>true</code> to return only
     * the most critical recommendations. The default is <code>false</code>, which
     * returns all recommendations.
     *
     * @param {string} [options.filter] Return only channels specified in the
     * filter. Filter is specified by using OData syntax. Example: $filter=channel
     * eq 'Api' or channel eq 'Notification'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RecommendationCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RecommendationCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RecommendationCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listRecommendedRulesForWebApp(resourceGroupName: string, siteName: string, options?: { featured? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.RecommendationCollection>;
    listRecommendedRulesForWebApp(resourceGroupName: string, siteName: string, callback: ServiceCallback<models.RecommendationCollection>): void;
    listRecommendedRulesForWebApp(resourceGroupName: string, siteName: string, options: { featured? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RecommendationCollection>): void;


    /**
     * @summary Disable all recommendations for an app.
     *
     * Disable all recommendations for an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    disableAllForWebAppWithHttpOperationResponse(resourceGroupName: string, siteName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Disable all recommendations for an app.
     *
     * Disable all recommendations for an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    disableAllForWebApp(resourceGroupName: string, siteName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    disableAllForWebApp(resourceGroupName: string, siteName: string, callback: ServiceCallback<void>): void;
    disableAllForWebApp(resourceGroupName: string, siteName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Reset all recommendation opt-out settings for an app.
     *
     * Reset all recommendation opt-out settings for an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    resetAllFiltersForWebAppWithHttpOperationResponse(resourceGroupName: string, siteName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Reset all recommendation opt-out settings for an app.
     *
     * Reset all recommendation opt-out settings for an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    resetAllFiltersForWebApp(resourceGroupName: string, siteName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    resetAllFiltersForWebApp(resourceGroupName: string, siteName: string, callback: ServiceCallback<void>): void;
    resetAllFiltersForWebApp(resourceGroupName: string, siteName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Get a recommendation rule for an app.
     *
     * Get a recommendation rule for an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Name of the app.
     *
     * @param {string} name Name of the recommendation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.updateSeen] Specify <code>true</code> to update
     * the last-seen timestamp of the recommendation object.
     *
     * @param {string} [options.recommendationId] The GUID of the recommedation
     * object if you query an expired one. You don't need to specify it to query an
     * active entry.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RecommendationRule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getRuleDetailsByWebAppWithHttpOperationResponse(resourceGroupName: string, siteName: string, name: string, options?: { updateSeen? : boolean, recommendationId? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RecommendationRule>>;

    /**
     * @summary Get a recommendation rule for an app.
     *
     * Get a recommendation rule for an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Name of the app.
     *
     * @param {string} name Name of the recommendation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.updateSeen] Specify <code>true</code> to update
     * the last-seen timestamp of the recommendation object.
     *
     * @param {string} [options.recommendationId] The GUID of the recommedation
     * object if you query an expired one. You don't need to specify it to query an
     * active entry.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RecommendationRule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RecommendationRule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RecommendationRule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getRuleDetailsByWebApp(resourceGroupName: string, siteName: string, name: string, options?: { updateSeen? : boolean, recommendationId? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.RecommendationRule>;
    getRuleDetailsByWebApp(resourceGroupName: string, siteName: string, name: string, callback: ServiceCallback<models.RecommendationRule>): void;
    getRuleDetailsByWebApp(resourceGroupName: string, siteName: string, name: string, options: { updateSeen? : boolean, recommendationId? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RecommendationRule>): void;


    /**
     * @summary Disables the specific rule for a web site permanently.
     *
     * Disables the specific rule for a web site permanently.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site name
     *
     * @param {string} name Rule name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    disableRecommendationForSiteWithHttpOperationResponse(resourceGroupName: string, siteName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Disables the specific rule for a web site permanently.
     *
     * Disables the specific rule for a web site permanently.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} siteName Site name
     *
     * @param {string} name Rule name
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    disableRecommendationForSite(resourceGroupName: string, siteName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    disableRecommendationForSite(resourceGroupName: string, siteName: string, name: string, callback: ServiceCallback<void>): void;
    disableRecommendationForSite(resourceGroupName: string, siteName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary List all recommendations for a subscription.
     *
     * List all recommendations for a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RecommendationCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RecommendationCollection>>;

    /**
     * @summary List all recommendations for a subscription.
     *
     * List all recommendations for a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RecommendationCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RecommendationCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RecommendationCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RecommendationCollection>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.RecommendationCollection>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RecommendationCollection>): void;


    /**
     * @summary Get past recommendations for an app, optionally specified by the
     * time range.
     *
     * Get past recommendations for an app, optionally specified by the time range.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RecommendationCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listHistoryForWebAppNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RecommendationCollection>>;

    /**
     * @summary Get past recommendations for an app, optionally specified by the
     * time range.
     *
     * Get past recommendations for an app, optionally specified by the time range.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RecommendationCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RecommendationCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RecommendationCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listHistoryForWebAppNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RecommendationCollection>;
    listHistoryForWebAppNext(nextPageLink: string, callback: ServiceCallback<models.RecommendationCollection>): void;
    listHistoryForWebAppNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RecommendationCollection>): void;


    /**
     * @summary Get all recommendations for an app.
     *
     * Get all recommendations for an app.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RecommendationCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listRecommendedRulesForWebAppNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RecommendationCollection>>;

    /**
     * @summary Get all recommendations for an app.
     *
     * Get all recommendations for an app.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RecommendationCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RecommendationCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RecommendationCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listRecommendedRulesForWebAppNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RecommendationCollection>;
    listRecommendedRulesForWebAppNext(nextPageLink: string, callback: ServiceCallback<models.RecommendationCollection>): void;
    listRecommendedRulesForWebAppNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RecommendationCollection>): void;
}

/**
 * @class
 * WebApps
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the WebSiteManagementClient.
 */
export interface WebApps {


    /**
     * @summary Get all apps for a subscription.
     *
     * Get all apps for a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WebAppCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WebAppCollection>>;

    /**
     * @summary Get all apps for a subscription.
     *
     * Get all apps for a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WebAppCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WebAppCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WebAppCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WebAppCollection>;
    list(callback: ServiceCallback<models.WebAppCollection>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WebAppCollection>): void;


    /**
     * @summary Gets all web, mobile, and API apps in the specified resource group.
     *
     * Gets all web, mobile, and API apps in the specified resource group.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.includeSlots] Specify <strong>true</strong> to
     * include deployment slots in results. The default is false, which only gives
     * you the production slot of all apps.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WebAppCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { includeSlots? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WebAppCollection>>;

    /**
     * @summary Gets all web, mobile, and API apps in the specified resource group.
     *
     * Gets all web, mobile, and API apps in the specified resource group.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.includeSlots] Specify <strong>true</strong> to
     * include deployment slots in results. The default is false, which only gives
     * you the production slot of all apps.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WebAppCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WebAppCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WebAppCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { includeSlots? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.WebAppCollection>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.WebAppCollection>): void;
    listByResourceGroup(resourceGroupName: string, options: { includeSlots? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WebAppCollection>): void;


    /**
     * @summary Gets the details of a web, mobile, or API app.
     *
     * Gets the details of a web, mobile, or API app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Site>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Site>>;

    /**
     * @summary Gets the details of a web, mobile, or API app.
     *
     * Gets the details of a web, mobile, or API app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Site} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Site} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Site} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Site>;
    get(resourceGroupName: string, name: string, callback: ServiceCallback<models.Site>): void;
    get(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Site>): void;


    /**
     * @summary Creates a new web, mobile, or API app in an existing resource
     * group, or updates an existing app.
     *
     * Creates a new web, mobile, or API app in an existing resource group, or
     * updates an existing app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Unique name of the app to create or update. To create
     * or update a deployment slot, use the {slot} parameter.
     *
     * @param {object} siteEnvelope A JSON representation of the app properties.
     * See example.
     *
     * @param {boolean} [siteEnvelope.enabled] <code>true</code> if the app is
     * enabled; otherwise, <code>false</code>. Setting this value to false disables
     * the app (takes the app offline).
     *
     * @param {array} [siteEnvelope.hostNameSslStates] Hostname SSL states are used
     * to manage the SSL bindings for app's hostnames.
     *
     * @param {string} [siteEnvelope.serverFarmId] Resource ID of the associated
     * App Service plan, formatted as:
     * "/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}".
     *
     * @param {boolean} [siteEnvelope.reserved] <code>true</code> if reserved;
     * otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.isXenon] Obsolete: Hyper-V sandbox.
     *
     * @param {boolean} [siteEnvelope.hyperV] Hyper-V sandbox.
     *
     * @param {object} [siteEnvelope.siteConfig] Configuration of the app.
     *
     * @param {number} [siteEnvelope.siteConfig.numberOfWorkers] Number of workers.
     *
     * @param {array} [siteEnvelope.siteConfig.defaultDocuments] Default documents.
     *
     * @param {string} [siteEnvelope.siteConfig.netFrameworkVersion] .NET Framework
     * version.
     *
     * @param {string} [siteEnvelope.siteConfig.phpVersion] Version of PHP.
     *
     * @param {string} [siteEnvelope.siteConfig.pythonVersion] Version of Python.
     *
     * @param {string} [siteEnvelope.siteConfig.nodeVersion] Version of Node.js.
     *
     * @param {string} [siteEnvelope.siteConfig.linuxFxVersion] Linux App Framework
     * and version
     *
     * @param {string} [siteEnvelope.siteConfig.windowsFxVersion] Xenon App
     * Framework and version
     *
     * @param {boolean} [siteEnvelope.siteConfig.requestTracingEnabled]
     * <code>true</code> if request tracing is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {date} [siteEnvelope.siteConfig.requestTracingExpirationTime] Request
     * tracing expiration time.
     *
     * @param {boolean} [siteEnvelope.siteConfig.remoteDebuggingEnabled]
     * <code>true</code> if remote debugging is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.remoteDebuggingVersion] Remote
     * debugging version.
     *
     * @param {boolean} [siteEnvelope.siteConfig.httpLoggingEnabled]
     * <code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.
     *
     * @param {number} [siteEnvelope.siteConfig.logsDirectorySizeLimit] HTTP logs
     * directory size limit.
     *
     * @param {boolean} [siteEnvelope.siteConfig.detailedErrorLoggingEnabled]
     * <code>true</code> if detailed error logging is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.publishingUsername] Publishing user
     * name.
     *
     * @param {array} [siteEnvelope.siteConfig.appSettings] Application settings.
     *
     * @param {object} [siteEnvelope.siteConfig.azureStorageAccounts] User-provided
     * Azure storage accounts.
     *
     * @param {array} [siteEnvelope.siteConfig.connectionStrings] Connection
     * strings.
     *
     * @param {array} [siteEnvelope.siteConfig.handlerMappings] Handler mappings.
     *
     * @param {string} [siteEnvelope.siteConfig.documentRoot] Document root.
     *
     * @param {string} [siteEnvelope.siteConfig.scmType] SCM type. Possible values
     * include: 'None', 'Dropbox', 'Tfs', 'LocalGit', 'GitHub', 'CodePlexGit',
     * 'CodePlexHg', 'BitbucketGit', 'BitbucketHg', 'ExternalGit', 'ExternalHg',
     * 'OneDrive', 'VSO'
     *
     * @param {boolean} [siteEnvelope.siteConfig.use32BitWorkerProcess]
     * <code>true</code> to use 32-bit worker process; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.siteConfig.webSocketsEnabled]
     * <code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.siteConfig.alwaysOn] <code>true</code> if
     * Always On is enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.javaVersion] Java version.
     *
     * @param {string} [siteEnvelope.siteConfig.javaContainer] Java container.
     *
     * @param {string} [siteEnvelope.siteConfig.javaContainerVersion] Java
     * container version.
     *
     * @param {string} [siteEnvelope.siteConfig.appCommandLine] App command line to
     * launch.
     *
     * @param {string} [siteEnvelope.siteConfig.managedPipelineMode] Managed
     * pipeline mode. Possible values include: 'Integrated', 'Classic'
     *
     * @param {array} [siteEnvelope.siteConfig.virtualApplications] Virtual
     * applications.
     *
     * @param {string} [siteEnvelope.siteConfig.loadBalancing] Site load balancing.
     * Possible values include: 'WeightedRoundRobin', 'LeastRequests',
     * 'LeastResponseTime', 'WeightedTotalTraffic', 'RequestHash'
     *
     * @param {object} [siteEnvelope.siteConfig.experiments] This is work around
     * for polymophic types.
     *
     * @param {array} [siteEnvelope.siteConfig.experiments.rampUpRules] List of
     * ramp-up rules.
     *
     * @param {object} [siteEnvelope.siteConfig.limits] Site limits.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxPercentageCpu] Maximum
     * allowed CPU usage percentage.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxMemoryInMb] Maximum
     * allowed memory usage in MB.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxDiskSizeInMb] Maximum
     * allowed disk size usage in MB.
     *
     * @param {boolean} [siteEnvelope.siteConfig.autoHealEnabled] <code>true</code>
     * if Auto Heal is enabled; otherwise, <code>false</code>.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules] Auto Heal rules.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.triggers] Conditions
     * that describe when to execute the auto-heal actions.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.triggers.requests] A
     * rule based on total requests.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.requests.count] Request
     * Count.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.requests.timeInterval] Time
     * interval.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.privateBytesInKB] A rule
     * based on private bytes.
     *
     * @param {array} [siteEnvelope.siteConfig.autoHealRules.triggers.statusCodes]
     * A rule based on status codes.
     *
     * @param {object}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests] A rule based
     * on request execution time.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.timeTaken] Time
     * taken.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.count] Request
     * Count.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.timeInterval]
     * Time interval.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.actions] Actions to
     * be executed when a rule is triggered.
     *
     * @param {string} [siteEnvelope.siteConfig.autoHealRules.actions.actionType]
     * Predefined action to be taken. Possible values include: 'Recycle',
     * 'LogEvent', 'CustomAction'
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.actions.customAction]
     * Custom action to be taken.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction.exe] Executable
     * to be run.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction.parameters]
     * Parameters for the executable.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.minProcessExecutionTime]
     * Minimum time the process must execute
     * before taking the action
     *
     * @param {string} [siteEnvelope.siteConfig.tracingOptions] Tracing options.
     *
     * @param {string} [siteEnvelope.siteConfig.vnetName] Virtual Network name.
     *
     * @param {object} [siteEnvelope.siteConfig.cors] Cross-Origin Resource Sharing
     * (CORS) settings.
     *
     * @param {array} [siteEnvelope.siteConfig.cors.allowedOrigins] Gets or sets
     * the list of origins that should be allowed to make cross-origin
     * calls (for example: http://example.com:12345). Use "*" to allow all.
     *
     * @param {object} [siteEnvelope.siteConfig.push] Push endpoint settings.
     *
     * @param {boolean} siteEnvelope.siteConfig.push.isPushEnabled Gets or sets a
     * flag indicating whether the Push endpoint is enabled.
     *
     * @param {string} [siteEnvelope.siteConfig.push.tagWhitelistJson] Gets or sets
     * a JSON string containing a list of tags that are whitelisted for use by the
     * push registration endpoint.
     *
     * @param {string} [siteEnvelope.siteConfig.push.tagsRequiringAuth] Gets or
     * sets a JSON string containing a list of tags that require user
     * authentication to be used in the push registration endpoint.
     * Tags can consist of alphanumeric characters and the following:
     * '_', '@', '#', '.', ':', '-'.
     * Validation should be performed at the PushRequestHandler.
     *
     * @param {string} [siteEnvelope.siteConfig.push.dynamicTagsJson] Gets or sets
     * a JSON string containing a list of dynamic tags that will be evaluated from
     * user claims in the push registration endpoint.
     *
     * @param {string} [siteEnvelope.siteConfig.push.kind] Kind of resource.
     *
     * @param {object} [siteEnvelope.siteConfig.apiDefinition] Information about
     * the formal API definition for the app.
     *
     * @param {string} [siteEnvelope.siteConfig.apiDefinition.url] The URL of the
     * API definition.
     *
     * @param {string} [siteEnvelope.siteConfig.autoSwapSlotName] Auto-swap slot
     * name.
     *
     * @param {boolean} [siteEnvelope.siteConfig.localMySqlEnabled]
     * <code>true</code> to enable local MySQL; otherwise, <code>false</code>.
     *
     * @param {number} [siteEnvelope.siteConfig.managedServiceIdentityId] Managed
     * Service Identity Id
     *
     * @param {number} [siteEnvelope.siteConfig.xManagedServiceIdentityId] Explicit
     * Managed Service Identity Id
     *
     * @param {array} [siteEnvelope.siteConfig.ipSecurityRestrictions] IP security
     * restrictions.
     *
     * @param {boolean} [siteEnvelope.siteConfig.http20Enabled] Http20Enabled:
     * configures a web site to allow clients to connect over http2.0
     *
     * @param {string} [siteEnvelope.siteConfig.minTlsVersion] MinTlsVersion:
     * configures the minimum version of TLS required for SSL requests. Possible
     * values include: '1.0', '1.1', '1.2'
     *
     * @param {string} [siteEnvelope.siteConfig.ftpsState] State of FTP / FTPS
     * service. Possible values include: 'AllAllowed', 'FtpsOnly', 'Disabled'
     *
     * @param {number} [siteEnvelope.siteConfig.reservedInstanceCount] Number of
     * reserved instances.
     * This setting only applies to the Consumption Plan
     *
     * @param {boolean} [siteEnvelope.scmSiteAlsoStopped] <code>true</code> to stop
     * SCM (KUDU) site when the app is stopped; otherwise, <code>false</code>. The
     * default is <code>false</code>.
     *
     * @param {object} [siteEnvelope.hostingEnvironmentProfile] App Service
     * Environment to use for the app.
     *
     * @param {string} [siteEnvelope.hostingEnvironmentProfile.id] Resource ID of
     * the App Service Environment.
     *
     * @param {boolean} [siteEnvelope.clientAffinityEnabled] <code>true</code> to
     * enable client affinity; <code>false</code> to stop sending session affinity
     * cookies, which route client requests in the same session to the same
     * instance. Default is <code>true</code>.
     *
     * @param {boolean} [siteEnvelope.clientCertEnabled] <code>true</code> to
     * enable client certificate authentication (TLS mutual authentication);
     * otherwise, <code>false</code>. Default is <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.hostNamesDisabled] <code>true</code> to
     * disable the public hostnames of the app; otherwise, <code>false</code>.
     * If <code>true</code>, the app is only accessible via API management process.
     *
     * @param {number} [siteEnvelope.containerSize] Size of the function container.
     *
     * @param {number} [siteEnvelope.dailyMemoryTimeQuota] Maximum allowed daily
     * memory-time quota (applicable on dynamic apps only).
     *
     * @param {object} [siteEnvelope.cloningInfo] If specified during app creation,
     * the app is cloned from a source app.
     *
     * @param {uuid} [siteEnvelope.cloningInfo.correlationId] Correlation ID of
     * cloning operation. This ID ties multiple cloning operations
     * together to use the same snapshot.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.overwrite] <code>true</code> to
     * overwrite destination app; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.cloneCustomHostNames]
     * <code>true</code> to clone custom hostnames from source app; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.cloneSourceControl]
     * <code>true</code> to clone source control from source app; otherwise,
     * <code>false</code>.
     *
     * @param {string} siteEnvelope.cloningInfo.sourceWebAppId ARM resource ID of
     * the source app. App resource ID is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}
     * for production slots and
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName}
     * for other slots.
     *
     * @param {string} [siteEnvelope.cloningInfo.hostingEnvironment] App Service
     * Environment.
     *
     * @param {object} [siteEnvelope.cloningInfo.appSettingsOverrides] Application
     * setting overrides for cloned app. If specified, these settings override the
     * settings cloned
     * from source app. Otherwise, application settings from source app are
     * retained.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.configureLoadBalancing]
     * <code>true</code> to configure load balancing for source and destination
     * app.
     *
     * @param {string} [siteEnvelope.cloningInfo.trafficManagerProfileId] ARM
     * resource ID of the Traffic Manager profile to use, if it exists. Traffic
     * Manager resource ID is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}.
     *
     * @param {string} [siteEnvelope.cloningInfo.trafficManagerProfileName] Name of
     * Traffic Manager profile to create. This is only needed if Traffic Manager
     * profile does not already exist.
     *
     * @param {boolean} [siteEnvelope.httpsOnly] HttpsOnly: configures a web site
     * to accept only https requests. Issues redirect for
     * http requests
     *
     * @param {object} [siteEnvelope.identity]
     *
     * @param {string} [siteEnvelope.identity.type] Type of managed service
     * identity. Possible values include: 'SystemAssigned', 'UserAssigned'
     *
     * @param {array} [siteEnvelope.identity.identityIds] Array of UserAssigned
     * managed service identities.
     *
     * @param {string} [siteEnvelope.kind] Kind of resource.
     *
     * @param {string} siteEnvelope.location Resource Location.
     *
     * @param {object} [siteEnvelope.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Site>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, name: string, siteEnvelope: models.Site, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Site>>;

    /**
     * @summary Creates a new web, mobile, or API app in an existing resource
     * group, or updates an existing app.
     *
     * Creates a new web, mobile, or API app in an existing resource group, or
     * updates an existing app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Unique name of the app to create or update. To create
     * or update a deployment slot, use the {slot} parameter.
     *
     * @param {object} siteEnvelope A JSON representation of the app properties.
     * See example.
     *
     * @param {boolean} [siteEnvelope.enabled] <code>true</code> if the app is
     * enabled; otherwise, <code>false</code>. Setting this value to false disables
     * the app (takes the app offline).
     *
     * @param {array} [siteEnvelope.hostNameSslStates] Hostname SSL states are used
     * to manage the SSL bindings for app's hostnames.
     *
     * @param {string} [siteEnvelope.serverFarmId] Resource ID of the associated
     * App Service plan, formatted as:
     * "/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}".
     *
     * @param {boolean} [siteEnvelope.reserved] <code>true</code> if reserved;
     * otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.isXenon] Obsolete: Hyper-V sandbox.
     *
     * @param {boolean} [siteEnvelope.hyperV] Hyper-V sandbox.
     *
     * @param {object} [siteEnvelope.siteConfig] Configuration of the app.
     *
     * @param {number} [siteEnvelope.siteConfig.numberOfWorkers] Number of workers.
     *
     * @param {array} [siteEnvelope.siteConfig.defaultDocuments] Default documents.
     *
     * @param {string} [siteEnvelope.siteConfig.netFrameworkVersion] .NET Framework
     * version.
     *
     * @param {string} [siteEnvelope.siteConfig.phpVersion] Version of PHP.
     *
     * @param {string} [siteEnvelope.siteConfig.pythonVersion] Version of Python.
     *
     * @param {string} [siteEnvelope.siteConfig.nodeVersion] Version of Node.js.
     *
     * @param {string} [siteEnvelope.siteConfig.linuxFxVersion] Linux App Framework
     * and version
     *
     * @param {string} [siteEnvelope.siteConfig.windowsFxVersion] Xenon App
     * Framework and version
     *
     * @param {boolean} [siteEnvelope.siteConfig.requestTracingEnabled]
     * <code>true</code> if request tracing is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {date} [siteEnvelope.siteConfig.requestTracingExpirationTime] Request
     * tracing expiration time.
     *
     * @param {boolean} [siteEnvelope.siteConfig.remoteDebuggingEnabled]
     * <code>true</code> if remote debugging is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.remoteDebuggingVersion] Remote
     * debugging version.
     *
     * @param {boolean} [siteEnvelope.siteConfig.httpLoggingEnabled]
     * <code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.
     *
     * @param {number} [siteEnvelope.siteConfig.logsDirectorySizeLimit] HTTP logs
     * directory size limit.
     *
     * @param {boolean} [siteEnvelope.siteConfig.detailedErrorLoggingEnabled]
     * <code>true</code> if detailed error logging is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.publishingUsername] Publishing user
     * name.
     *
     * @param {array} [siteEnvelope.siteConfig.appSettings] Application settings.
     *
     * @param {object} [siteEnvelope.siteConfig.azureStorageAccounts] User-provided
     * Azure storage accounts.
     *
     * @param {array} [siteEnvelope.siteConfig.connectionStrings] Connection
     * strings.
     *
     * @param {array} [siteEnvelope.siteConfig.handlerMappings] Handler mappings.
     *
     * @param {string} [siteEnvelope.siteConfig.documentRoot] Document root.
     *
     * @param {string} [siteEnvelope.siteConfig.scmType] SCM type. Possible values
     * include: 'None', 'Dropbox', 'Tfs', 'LocalGit', 'GitHub', 'CodePlexGit',
     * 'CodePlexHg', 'BitbucketGit', 'BitbucketHg', 'ExternalGit', 'ExternalHg',
     * 'OneDrive', 'VSO'
     *
     * @param {boolean} [siteEnvelope.siteConfig.use32BitWorkerProcess]
     * <code>true</code> to use 32-bit worker process; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.siteConfig.webSocketsEnabled]
     * <code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.siteConfig.alwaysOn] <code>true</code> if
     * Always On is enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.javaVersion] Java version.
     *
     * @param {string} [siteEnvelope.siteConfig.javaContainer] Java container.
     *
     * @param {string} [siteEnvelope.siteConfig.javaContainerVersion] Java
     * container version.
     *
     * @param {string} [siteEnvelope.siteConfig.appCommandLine] App command line to
     * launch.
     *
     * @param {string} [siteEnvelope.siteConfig.managedPipelineMode] Managed
     * pipeline mode. Possible values include: 'Integrated', 'Classic'
     *
     * @param {array} [siteEnvelope.siteConfig.virtualApplications] Virtual
     * applications.
     *
     * @param {string} [siteEnvelope.siteConfig.loadBalancing] Site load balancing.
     * Possible values include: 'WeightedRoundRobin', 'LeastRequests',
     * 'LeastResponseTime', 'WeightedTotalTraffic', 'RequestHash'
     *
     * @param {object} [siteEnvelope.siteConfig.experiments] This is work around
     * for polymophic types.
     *
     * @param {array} [siteEnvelope.siteConfig.experiments.rampUpRules] List of
     * ramp-up rules.
     *
     * @param {object} [siteEnvelope.siteConfig.limits] Site limits.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxPercentageCpu] Maximum
     * allowed CPU usage percentage.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxMemoryInMb] Maximum
     * allowed memory usage in MB.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxDiskSizeInMb] Maximum
     * allowed disk size usage in MB.
     *
     * @param {boolean} [siteEnvelope.siteConfig.autoHealEnabled] <code>true</code>
     * if Auto Heal is enabled; otherwise, <code>false</code>.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules] Auto Heal rules.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.triggers] Conditions
     * that describe when to execute the auto-heal actions.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.triggers.requests] A
     * rule based on total requests.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.requests.count] Request
     * Count.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.requests.timeInterval] Time
     * interval.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.privateBytesInKB] A rule
     * based on private bytes.
     *
     * @param {array} [siteEnvelope.siteConfig.autoHealRules.triggers.statusCodes]
     * A rule based on status codes.
     *
     * @param {object}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests] A rule based
     * on request execution time.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.timeTaken] Time
     * taken.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.count] Request
     * Count.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.timeInterval]
     * Time interval.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.actions] Actions to
     * be executed when a rule is triggered.
     *
     * @param {string} [siteEnvelope.siteConfig.autoHealRules.actions.actionType]
     * Predefined action to be taken. Possible values include: 'Recycle',
     * 'LogEvent', 'CustomAction'
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.actions.customAction]
     * Custom action to be taken.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction.exe] Executable
     * to be run.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction.parameters]
     * Parameters for the executable.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.minProcessExecutionTime]
     * Minimum time the process must execute
     * before taking the action
     *
     * @param {string} [siteEnvelope.siteConfig.tracingOptions] Tracing options.
     *
     * @param {string} [siteEnvelope.siteConfig.vnetName] Virtual Network name.
     *
     * @param {object} [siteEnvelope.siteConfig.cors] Cross-Origin Resource Sharing
     * (CORS) settings.
     *
     * @param {array} [siteEnvelope.siteConfig.cors.allowedOrigins] Gets or sets
     * the list of origins that should be allowed to make cross-origin
     * calls (for example: http://example.com:12345). Use "*" to allow all.
     *
     * @param {object} [siteEnvelope.siteConfig.push] Push endpoint settings.
     *
     * @param {boolean} siteEnvelope.siteConfig.push.isPushEnabled Gets or sets a
     * flag indicating whether the Push endpoint is enabled.
     *
     * @param {string} [siteEnvelope.siteConfig.push.tagWhitelistJson] Gets or sets
     * a JSON string containing a list of tags that are whitelisted for use by the
     * push registration endpoint.
     *
     * @param {string} [siteEnvelope.siteConfig.push.tagsRequiringAuth] Gets or
     * sets a JSON string containing a list of tags that require user
     * authentication to be used in the push registration endpoint.
     * Tags can consist of alphanumeric characters and the following:
     * '_', '@', '#', '.', ':', '-'.
     * Validation should be performed at the PushRequestHandler.
     *
     * @param {string} [siteEnvelope.siteConfig.push.dynamicTagsJson] Gets or sets
     * a JSON string containing a list of dynamic tags that will be evaluated from
     * user claims in the push registration endpoint.
     *
     * @param {string} [siteEnvelope.siteConfig.push.kind] Kind of resource.
     *
     * @param {object} [siteEnvelope.siteConfig.apiDefinition] Information about
     * the formal API definition for the app.
     *
     * @param {string} [siteEnvelope.siteConfig.apiDefinition.url] The URL of the
     * API definition.
     *
     * @param {string} [siteEnvelope.siteConfig.autoSwapSlotName] Auto-swap slot
     * name.
     *
     * @param {boolean} [siteEnvelope.siteConfig.localMySqlEnabled]
     * <code>true</code> to enable local MySQL; otherwise, <code>false</code>.
     *
     * @param {number} [siteEnvelope.siteConfig.managedServiceIdentityId] Managed
     * Service Identity Id
     *
     * @param {number} [siteEnvelope.siteConfig.xManagedServiceIdentityId] Explicit
     * Managed Service Identity Id
     *
     * @param {array} [siteEnvelope.siteConfig.ipSecurityRestrictions] IP security
     * restrictions.
     *
     * @param {boolean} [siteEnvelope.siteConfig.http20Enabled] Http20Enabled:
     * configures a web site to allow clients to connect over http2.0
     *
     * @param {string} [siteEnvelope.siteConfig.minTlsVersion] MinTlsVersion:
     * configures the minimum version of TLS required for SSL requests. Possible
     * values include: '1.0', '1.1', '1.2'
     *
     * @param {string} [siteEnvelope.siteConfig.ftpsState] State of FTP / FTPS
     * service. Possible values include: 'AllAllowed', 'FtpsOnly', 'Disabled'
     *
     * @param {number} [siteEnvelope.siteConfig.reservedInstanceCount] Number of
     * reserved instances.
     * This setting only applies to the Consumption Plan
     *
     * @param {boolean} [siteEnvelope.scmSiteAlsoStopped] <code>true</code> to stop
     * SCM (KUDU) site when the app is stopped; otherwise, <code>false</code>. The
     * default is <code>false</code>.
     *
     * @param {object} [siteEnvelope.hostingEnvironmentProfile] App Service
     * Environment to use for the app.
     *
     * @param {string} [siteEnvelope.hostingEnvironmentProfile.id] Resource ID of
     * the App Service Environment.
     *
     * @param {boolean} [siteEnvelope.clientAffinityEnabled] <code>true</code> to
     * enable client affinity; <code>false</code> to stop sending session affinity
     * cookies, which route client requests in the same session to the same
     * instance. Default is <code>true</code>.
     *
     * @param {boolean} [siteEnvelope.clientCertEnabled] <code>true</code> to
     * enable client certificate authentication (TLS mutual authentication);
     * otherwise, <code>false</code>. Default is <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.hostNamesDisabled] <code>true</code> to
     * disable the public hostnames of the app; otherwise, <code>false</code>.
     * If <code>true</code>, the app is only accessible via API management process.
     *
     * @param {number} [siteEnvelope.containerSize] Size of the function container.
     *
     * @param {number} [siteEnvelope.dailyMemoryTimeQuota] Maximum allowed daily
     * memory-time quota (applicable on dynamic apps only).
     *
     * @param {object} [siteEnvelope.cloningInfo] If specified during app creation,
     * the app is cloned from a source app.
     *
     * @param {uuid} [siteEnvelope.cloningInfo.correlationId] Correlation ID of
     * cloning operation. This ID ties multiple cloning operations
     * together to use the same snapshot.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.overwrite] <code>true</code> to
     * overwrite destination app; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.cloneCustomHostNames]
     * <code>true</code> to clone custom hostnames from source app; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.cloneSourceControl]
     * <code>true</code> to clone source control from source app; otherwise,
     * <code>false</code>.
     *
     * @param {string} siteEnvelope.cloningInfo.sourceWebAppId ARM resource ID of
     * the source app. App resource ID is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}
     * for production slots and
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName}
     * for other slots.
     *
     * @param {string} [siteEnvelope.cloningInfo.hostingEnvironment] App Service
     * Environment.
     *
     * @param {object} [siteEnvelope.cloningInfo.appSettingsOverrides] Application
     * setting overrides for cloned app. If specified, these settings override the
     * settings cloned
     * from source app. Otherwise, application settings from source app are
     * retained.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.configureLoadBalancing]
     * <code>true</code> to configure load balancing for source and destination
     * app.
     *
     * @param {string} [siteEnvelope.cloningInfo.trafficManagerProfileId] ARM
     * resource ID of the Traffic Manager profile to use, if it exists. Traffic
     * Manager resource ID is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}.
     *
     * @param {string} [siteEnvelope.cloningInfo.trafficManagerProfileName] Name of
     * Traffic Manager profile to create. This is only needed if Traffic Manager
     * profile does not already exist.
     *
     * @param {boolean} [siteEnvelope.httpsOnly] HttpsOnly: configures a web site
     * to accept only https requests. Issues redirect for
     * http requests
     *
     * @param {object} [siteEnvelope.identity]
     *
     * @param {string} [siteEnvelope.identity.type] Type of managed service
     * identity. Possible values include: 'SystemAssigned', 'UserAssigned'
     *
     * @param {array} [siteEnvelope.identity.identityIds] Array of UserAssigned
     * managed service identities.
     *
     * @param {string} [siteEnvelope.kind] Kind of resource.
     *
     * @param {string} siteEnvelope.location Resource Location.
     *
     * @param {object} [siteEnvelope.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Site} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Site} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Site} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, name: string, siteEnvelope: models.Site, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Site>;
    createOrUpdate(resourceGroupName: string, name: string, siteEnvelope: models.Site, callback: ServiceCallback<models.Site>): void;
    createOrUpdate(resourceGroupName: string, name: string, siteEnvelope: models.Site, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Site>): void;


    /**
     * @summary Deletes a web, mobile, or API app, or one of the deployment slots.
     *
     * Deletes a web, mobile, or API app, or one of the deployment slots.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.deleteMetrics] If true, web app metrics are also
     * deleted.
     *
     * @param {boolean} [options.deleteEmptyServerFarm] Specify true if the App
     * Service plan will be empty after app deletion and you want to delete the
     * empty App Service plan. By default, the empty App Service plan is not
     * deleted.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { deleteMetrics? : boolean, deleteEmptyServerFarm? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a web, mobile, or API app, or one of the deployment slots.
     *
     * Deletes a web, mobile, or API app, or one of the deployment slots.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app to delete.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.deleteMetrics] If true, web app metrics are also
     * deleted.
     *
     * @param {boolean} [options.deleteEmptyServerFarm] Specify true if the App
     * Service plan will be empty after app deletion and you want to delete the
     * empty App Service plan. By default, the empty App Service plan is not
     * deleted.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, name: string, options?: { deleteMetrics? : boolean, deleteEmptyServerFarm? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, name: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, name: string, options: { deleteMetrics? : boolean, deleteEmptyServerFarm? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Creates a new web, mobile, or API app in an existing resource
     * group, or updates an existing app.
     *
     * Creates a new web, mobile, or API app in an existing resource group, or
     * updates an existing app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Unique name of the app to create or update. To create
     * or update a deployment slot, use the {slot} parameter.
     *
     * @param {object} siteEnvelope A JSON representation of the app properties.
     * See example.
     *
     * @param {boolean} [siteEnvelope.enabled] <code>true</code> if the app is
     * enabled; otherwise, <code>false</code>. Setting this value to false disables
     * the app (takes the app offline).
     *
     * @param {array} [siteEnvelope.hostNameSslStates] Hostname SSL states are used
     * to manage the SSL bindings for app's hostnames.
     *
     * @param {string} [siteEnvelope.serverFarmId] Resource ID of the associated
     * App Service plan, formatted as:
     * "/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}".
     *
     * @param {boolean} [siteEnvelope.reserved] <code>true</code> if reserved;
     * otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.isXenon] Obsolete: Hyper-V sandbox.
     *
     * @param {boolean} [siteEnvelope.hyperV] Hyper-V sandbox.
     *
     * @param {object} [siteEnvelope.siteConfig] Configuration of the app.
     *
     * @param {number} [siteEnvelope.siteConfig.numberOfWorkers] Number of workers.
     *
     * @param {array} [siteEnvelope.siteConfig.defaultDocuments] Default documents.
     *
     * @param {string} [siteEnvelope.siteConfig.netFrameworkVersion] .NET Framework
     * version.
     *
     * @param {string} [siteEnvelope.siteConfig.phpVersion] Version of PHP.
     *
     * @param {string} [siteEnvelope.siteConfig.pythonVersion] Version of Python.
     *
     * @param {string} [siteEnvelope.siteConfig.nodeVersion] Version of Node.js.
     *
     * @param {string} [siteEnvelope.siteConfig.linuxFxVersion] Linux App Framework
     * and version
     *
     * @param {string} [siteEnvelope.siteConfig.windowsFxVersion] Xenon App
     * Framework and version
     *
     * @param {boolean} [siteEnvelope.siteConfig.requestTracingEnabled]
     * <code>true</code> if request tracing is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {date} [siteEnvelope.siteConfig.requestTracingExpirationTime] Request
     * tracing expiration time.
     *
     * @param {boolean} [siteEnvelope.siteConfig.remoteDebuggingEnabled]
     * <code>true</code> if remote debugging is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.remoteDebuggingVersion] Remote
     * debugging version.
     *
     * @param {boolean} [siteEnvelope.siteConfig.httpLoggingEnabled]
     * <code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.
     *
     * @param {number} [siteEnvelope.siteConfig.logsDirectorySizeLimit] HTTP logs
     * directory size limit.
     *
     * @param {boolean} [siteEnvelope.siteConfig.detailedErrorLoggingEnabled]
     * <code>true</code> if detailed error logging is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.publishingUsername] Publishing user
     * name.
     *
     * @param {array} [siteEnvelope.siteConfig.appSettings] Application settings.
     *
     * @param {object} [siteEnvelope.siteConfig.azureStorageAccounts] User-provided
     * Azure storage accounts.
     *
     * @param {array} [siteEnvelope.siteConfig.connectionStrings] Connection
     * strings.
     *
     * @param {array} [siteEnvelope.siteConfig.handlerMappings] Handler mappings.
     *
     * @param {string} [siteEnvelope.siteConfig.documentRoot] Document root.
     *
     * @param {string} [siteEnvelope.siteConfig.scmType] SCM type. Possible values
     * include: 'None', 'Dropbox', 'Tfs', 'LocalGit', 'GitHub', 'CodePlexGit',
     * 'CodePlexHg', 'BitbucketGit', 'BitbucketHg', 'ExternalGit', 'ExternalHg',
     * 'OneDrive', 'VSO'
     *
     * @param {boolean} [siteEnvelope.siteConfig.use32BitWorkerProcess]
     * <code>true</code> to use 32-bit worker process; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.siteConfig.webSocketsEnabled]
     * <code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.siteConfig.alwaysOn] <code>true</code> if
     * Always On is enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.javaVersion] Java version.
     *
     * @param {string} [siteEnvelope.siteConfig.javaContainer] Java container.
     *
     * @param {string} [siteEnvelope.siteConfig.javaContainerVersion] Java
     * container version.
     *
     * @param {string} [siteEnvelope.siteConfig.appCommandLine] App command line to
     * launch.
     *
     * @param {string} [siteEnvelope.siteConfig.managedPipelineMode] Managed
     * pipeline mode. Possible values include: 'Integrated', 'Classic'
     *
     * @param {array} [siteEnvelope.siteConfig.virtualApplications] Virtual
     * applications.
     *
     * @param {string} [siteEnvelope.siteConfig.loadBalancing] Site load balancing.
     * Possible values include: 'WeightedRoundRobin', 'LeastRequests',
     * 'LeastResponseTime', 'WeightedTotalTraffic', 'RequestHash'
     *
     * @param {object} [siteEnvelope.siteConfig.experiments] This is work around
     * for polymophic types.
     *
     * @param {array} [siteEnvelope.siteConfig.experiments.rampUpRules] List of
     * ramp-up rules.
     *
     * @param {object} [siteEnvelope.siteConfig.limits] Site limits.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxPercentageCpu] Maximum
     * allowed CPU usage percentage.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxMemoryInMb] Maximum
     * allowed memory usage in MB.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxDiskSizeInMb] Maximum
     * allowed disk size usage in MB.
     *
     * @param {boolean} [siteEnvelope.siteConfig.autoHealEnabled] <code>true</code>
     * if Auto Heal is enabled; otherwise, <code>false</code>.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules] Auto Heal rules.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.triggers] Conditions
     * that describe when to execute the auto-heal actions.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.triggers.requests] A
     * rule based on total requests.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.requests.count] Request
     * Count.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.requests.timeInterval] Time
     * interval.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.privateBytesInKB] A rule
     * based on private bytes.
     *
     * @param {array} [siteEnvelope.siteConfig.autoHealRules.triggers.statusCodes]
     * A rule based on status codes.
     *
     * @param {object}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests] A rule based
     * on request execution time.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.timeTaken] Time
     * taken.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.count] Request
     * Count.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.timeInterval]
     * Time interval.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.actions] Actions to
     * be executed when a rule is triggered.
     *
     * @param {string} [siteEnvelope.siteConfig.autoHealRules.actions.actionType]
     * Predefined action to be taken. Possible values include: 'Recycle',
     * 'LogEvent', 'CustomAction'
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.actions.customAction]
     * Custom action to be taken.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction.exe] Executable
     * to be run.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction.parameters]
     * Parameters for the executable.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.minProcessExecutionTime]
     * Minimum time the process must execute
     * before taking the action
     *
     * @param {string} [siteEnvelope.siteConfig.tracingOptions] Tracing options.
     *
     * @param {string} [siteEnvelope.siteConfig.vnetName] Virtual Network name.
     *
     * @param {object} [siteEnvelope.siteConfig.cors] Cross-Origin Resource Sharing
     * (CORS) settings.
     *
     * @param {array} [siteEnvelope.siteConfig.cors.allowedOrigins] Gets or sets
     * the list of origins that should be allowed to make cross-origin
     * calls (for example: http://example.com:12345). Use "*" to allow all.
     *
     * @param {object} [siteEnvelope.siteConfig.push] Push endpoint settings.
     *
     * @param {boolean} siteEnvelope.siteConfig.push.isPushEnabled Gets or sets a
     * flag indicating whether the Push endpoint is enabled.
     *
     * @param {string} [siteEnvelope.siteConfig.push.tagWhitelistJson] Gets or sets
     * a JSON string containing a list of tags that are whitelisted for use by the
     * push registration endpoint.
     *
     * @param {string} [siteEnvelope.siteConfig.push.tagsRequiringAuth] Gets or
     * sets a JSON string containing a list of tags that require user
     * authentication to be used in the push registration endpoint.
     * Tags can consist of alphanumeric characters and the following:
     * '_', '@', '#', '.', ':', '-'.
     * Validation should be performed at the PushRequestHandler.
     *
     * @param {string} [siteEnvelope.siteConfig.push.dynamicTagsJson] Gets or sets
     * a JSON string containing a list of dynamic tags that will be evaluated from
     * user claims in the push registration endpoint.
     *
     * @param {string} [siteEnvelope.siteConfig.push.kind] Kind of resource.
     *
     * @param {object} [siteEnvelope.siteConfig.apiDefinition] Information about
     * the formal API definition for the app.
     *
     * @param {string} [siteEnvelope.siteConfig.apiDefinition.url] The URL of the
     * API definition.
     *
     * @param {string} [siteEnvelope.siteConfig.autoSwapSlotName] Auto-swap slot
     * name.
     *
     * @param {boolean} [siteEnvelope.siteConfig.localMySqlEnabled]
     * <code>true</code> to enable local MySQL; otherwise, <code>false</code>.
     *
     * @param {number} [siteEnvelope.siteConfig.managedServiceIdentityId] Managed
     * Service Identity Id
     *
     * @param {number} [siteEnvelope.siteConfig.xManagedServiceIdentityId] Explicit
     * Managed Service Identity Id
     *
     * @param {array} [siteEnvelope.siteConfig.ipSecurityRestrictions] IP security
     * restrictions.
     *
     * @param {boolean} [siteEnvelope.siteConfig.http20Enabled] Http20Enabled:
     * configures a web site to allow clients to connect over http2.0
     *
     * @param {string} [siteEnvelope.siteConfig.minTlsVersion] MinTlsVersion:
     * configures the minimum version of TLS required for SSL requests. Possible
     * values include: '1.0', '1.1', '1.2'
     *
     * @param {string} [siteEnvelope.siteConfig.ftpsState] State of FTP / FTPS
     * service. Possible values include: 'AllAllowed', 'FtpsOnly', 'Disabled'
     *
     * @param {number} [siteEnvelope.siteConfig.reservedInstanceCount] Number of
     * reserved instances.
     * This setting only applies to the Consumption Plan
     *
     * @param {boolean} [siteEnvelope.scmSiteAlsoStopped] <code>true</code> to stop
     * SCM (KUDU) site when the app is stopped; otherwise, <code>false</code>. The
     * default is <code>false</code>.
     *
     * @param {object} [siteEnvelope.hostingEnvironmentProfile] App Service
     * Environment to use for the app.
     *
     * @param {string} [siteEnvelope.hostingEnvironmentProfile.id] Resource ID of
     * the App Service Environment.
     *
     * @param {boolean} [siteEnvelope.clientAffinityEnabled] <code>true</code> to
     * enable client affinity; <code>false</code> to stop sending session affinity
     * cookies, which route client requests in the same session to the same
     * instance. Default is <code>true</code>.
     *
     * @param {boolean} [siteEnvelope.clientCertEnabled] <code>true</code> to
     * enable client certificate authentication (TLS mutual authentication);
     * otherwise, <code>false</code>. Default is <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.hostNamesDisabled] <code>true</code> to
     * disable the public hostnames of the app; otherwise, <code>false</code>.
     * If <code>true</code>, the app is only accessible via API management process.
     *
     * @param {number} [siteEnvelope.containerSize] Size of the function container.
     *
     * @param {number} [siteEnvelope.dailyMemoryTimeQuota] Maximum allowed daily
     * memory-time quota (applicable on dynamic apps only).
     *
     * @param {object} [siteEnvelope.cloningInfo] If specified during app creation,
     * the app is cloned from a source app.
     *
     * @param {uuid} [siteEnvelope.cloningInfo.correlationId] Correlation ID of
     * cloning operation. This ID ties multiple cloning operations
     * together to use the same snapshot.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.overwrite] <code>true</code> to
     * overwrite destination app; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.cloneCustomHostNames]
     * <code>true</code> to clone custom hostnames from source app; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.cloneSourceControl]
     * <code>true</code> to clone source control from source app; otherwise,
     * <code>false</code>.
     *
     * @param {string} siteEnvelope.cloningInfo.sourceWebAppId ARM resource ID of
     * the source app. App resource ID is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}
     * for production slots and
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName}
     * for other slots.
     *
     * @param {string} [siteEnvelope.cloningInfo.hostingEnvironment] App Service
     * Environment.
     *
     * @param {object} [siteEnvelope.cloningInfo.appSettingsOverrides] Application
     * setting overrides for cloned app. If specified, these settings override the
     * settings cloned
     * from source app. Otherwise, application settings from source app are
     * retained.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.configureLoadBalancing]
     * <code>true</code> to configure load balancing for source and destination
     * app.
     *
     * @param {string} [siteEnvelope.cloningInfo.trafficManagerProfileId] ARM
     * resource ID of the Traffic Manager profile to use, if it exists. Traffic
     * Manager resource ID is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}.
     *
     * @param {string} [siteEnvelope.cloningInfo.trafficManagerProfileName] Name of
     * Traffic Manager profile to create. This is only needed if Traffic Manager
     * profile does not already exist.
     *
     * @param {boolean} [siteEnvelope.httpsOnly] HttpsOnly: configures a web site
     * to accept only https requests. Issues redirect for
     * http requests
     *
     * @param {string} [siteEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Site>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, name: string, siteEnvelope: models.SitePatchResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Site>>;

    /**
     * @summary Creates a new web, mobile, or API app in an existing resource
     * group, or updates an existing app.
     *
     * Creates a new web, mobile, or API app in an existing resource group, or
     * updates an existing app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Unique name of the app to create or update. To create
     * or update a deployment slot, use the {slot} parameter.
     *
     * @param {object} siteEnvelope A JSON representation of the app properties.
     * See example.
     *
     * @param {boolean} [siteEnvelope.enabled] <code>true</code> if the app is
     * enabled; otherwise, <code>false</code>. Setting this value to false disables
     * the app (takes the app offline).
     *
     * @param {array} [siteEnvelope.hostNameSslStates] Hostname SSL states are used
     * to manage the SSL bindings for app's hostnames.
     *
     * @param {string} [siteEnvelope.serverFarmId] Resource ID of the associated
     * App Service plan, formatted as:
     * "/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}".
     *
     * @param {boolean} [siteEnvelope.reserved] <code>true</code> if reserved;
     * otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.isXenon] Obsolete: Hyper-V sandbox.
     *
     * @param {boolean} [siteEnvelope.hyperV] Hyper-V sandbox.
     *
     * @param {object} [siteEnvelope.siteConfig] Configuration of the app.
     *
     * @param {number} [siteEnvelope.siteConfig.numberOfWorkers] Number of workers.
     *
     * @param {array} [siteEnvelope.siteConfig.defaultDocuments] Default documents.
     *
     * @param {string} [siteEnvelope.siteConfig.netFrameworkVersion] .NET Framework
     * version.
     *
     * @param {string} [siteEnvelope.siteConfig.phpVersion] Version of PHP.
     *
     * @param {string} [siteEnvelope.siteConfig.pythonVersion] Version of Python.
     *
     * @param {string} [siteEnvelope.siteConfig.nodeVersion] Version of Node.js.
     *
     * @param {string} [siteEnvelope.siteConfig.linuxFxVersion] Linux App Framework
     * and version
     *
     * @param {string} [siteEnvelope.siteConfig.windowsFxVersion] Xenon App
     * Framework and version
     *
     * @param {boolean} [siteEnvelope.siteConfig.requestTracingEnabled]
     * <code>true</code> if request tracing is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {date} [siteEnvelope.siteConfig.requestTracingExpirationTime] Request
     * tracing expiration time.
     *
     * @param {boolean} [siteEnvelope.siteConfig.remoteDebuggingEnabled]
     * <code>true</code> if remote debugging is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.remoteDebuggingVersion] Remote
     * debugging version.
     *
     * @param {boolean} [siteEnvelope.siteConfig.httpLoggingEnabled]
     * <code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.
     *
     * @param {number} [siteEnvelope.siteConfig.logsDirectorySizeLimit] HTTP logs
     * directory size limit.
     *
     * @param {boolean} [siteEnvelope.siteConfig.detailedErrorLoggingEnabled]
     * <code>true</code> if detailed error logging is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.publishingUsername] Publishing user
     * name.
     *
     * @param {array} [siteEnvelope.siteConfig.appSettings] Application settings.
     *
     * @param {object} [siteEnvelope.siteConfig.azureStorageAccounts] User-provided
     * Azure storage accounts.
     *
     * @param {array} [siteEnvelope.siteConfig.connectionStrings] Connection
     * strings.
     *
     * @param {array} [siteEnvelope.siteConfig.handlerMappings] Handler mappings.
     *
     * @param {string} [siteEnvelope.siteConfig.documentRoot] Document root.
     *
     * @param {string} [siteEnvelope.siteConfig.scmType] SCM type. Possible values
     * include: 'None', 'Dropbox', 'Tfs', 'LocalGit', 'GitHub', 'CodePlexGit',
     * 'CodePlexHg', 'BitbucketGit', 'BitbucketHg', 'ExternalGit', 'ExternalHg',
     * 'OneDrive', 'VSO'
     *
     * @param {boolean} [siteEnvelope.siteConfig.use32BitWorkerProcess]
     * <code>true</code> to use 32-bit worker process; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.siteConfig.webSocketsEnabled]
     * <code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.siteConfig.alwaysOn] <code>true</code> if
     * Always On is enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.javaVersion] Java version.
     *
     * @param {string} [siteEnvelope.siteConfig.javaContainer] Java container.
     *
     * @param {string} [siteEnvelope.siteConfig.javaContainerVersion] Java
     * container version.
     *
     * @param {string} [siteEnvelope.siteConfig.appCommandLine] App command line to
     * launch.
     *
     * @param {string} [siteEnvelope.siteConfig.managedPipelineMode] Managed
     * pipeline mode. Possible values include: 'Integrated', 'Classic'
     *
     * @param {array} [siteEnvelope.siteConfig.virtualApplications] Virtual
     * applications.
     *
     * @param {string} [siteEnvelope.siteConfig.loadBalancing] Site load balancing.
     * Possible values include: 'WeightedRoundRobin', 'LeastRequests',
     * 'LeastResponseTime', 'WeightedTotalTraffic', 'RequestHash'
     *
     * @param {object} [siteEnvelope.siteConfig.experiments] This is work around
     * for polymophic types.
     *
     * @param {array} [siteEnvelope.siteConfig.experiments.rampUpRules] List of
     * ramp-up rules.
     *
     * @param {object} [siteEnvelope.siteConfig.limits] Site limits.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxPercentageCpu] Maximum
     * allowed CPU usage percentage.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxMemoryInMb] Maximum
     * allowed memory usage in MB.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxDiskSizeInMb] Maximum
     * allowed disk size usage in MB.
     *
     * @param {boolean} [siteEnvelope.siteConfig.autoHealEnabled] <code>true</code>
     * if Auto Heal is enabled; otherwise, <code>false</code>.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules] Auto Heal rules.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.triggers] Conditions
     * that describe when to execute the auto-heal actions.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.triggers.requests] A
     * rule based on total requests.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.requests.count] Request
     * Count.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.requests.timeInterval] Time
     * interval.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.privateBytesInKB] A rule
     * based on private bytes.
     *
     * @param {array} [siteEnvelope.siteConfig.autoHealRules.triggers.statusCodes]
     * A rule based on status codes.
     *
     * @param {object}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests] A rule based
     * on request execution time.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.timeTaken] Time
     * taken.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.count] Request
     * Count.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.timeInterval]
     * Time interval.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.actions] Actions to
     * be executed when a rule is triggered.
     *
     * @param {string} [siteEnvelope.siteConfig.autoHealRules.actions.actionType]
     * Predefined action to be taken. Possible values include: 'Recycle',
     * 'LogEvent', 'CustomAction'
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.actions.customAction]
     * Custom action to be taken.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction.exe] Executable
     * to be run.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction.parameters]
     * Parameters for the executable.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.minProcessExecutionTime]
     * Minimum time the process must execute
     * before taking the action
     *
     * @param {string} [siteEnvelope.siteConfig.tracingOptions] Tracing options.
     *
     * @param {string} [siteEnvelope.siteConfig.vnetName] Virtual Network name.
     *
     * @param {object} [siteEnvelope.siteConfig.cors] Cross-Origin Resource Sharing
     * (CORS) settings.
     *
     * @param {array} [siteEnvelope.siteConfig.cors.allowedOrigins] Gets or sets
     * the list of origins that should be allowed to make cross-origin
     * calls (for example: http://example.com:12345). Use "*" to allow all.
     *
     * @param {object} [siteEnvelope.siteConfig.push] Push endpoint settings.
     *
     * @param {boolean} siteEnvelope.siteConfig.push.isPushEnabled Gets or sets a
     * flag indicating whether the Push endpoint is enabled.
     *
     * @param {string} [siteEnvelope.siteConfig.push.tagWhitelistJson] Gets or sets
     * a JSON string containing a list of tags that are whitelisted for use by the
     * push registration endpoint.
     *
     * @param {string} [siteEnvelope.siteConfig.push.tagsRequiringAuth] Gets or
     * sets a JSON string containing a list of tags that require user
     * authentication to be used in the push registration endpoint.
     * Tags can consist of alphanumeric characters and the following:
     * '_', '@', '#', '.', ':', '-'.
     * Validation should be performed at the PushRequestHandler.
     *
     * @param {string} [siteEnvelope.siteConfig.push.dynamicTagsJson] Gets or sets
     * a JSON string containing a list of dynamic tags that will be evaluated from
     * user claims in the push registration endpoint.
     *
     * @param {string} [siteEnvelope.siteConfig.push.kind] Kind of resource.
     *
     * @param {object} [siteEnvelope.siteConfig.apiDefinition] Information about
     * the formal API definition for the app.
     *
     * @param {string} [siteEnvelope.siteConfig.apiDefinition.url] The URL of the
     * API definition.
     *
     * @param {string} [siteEnvelope.siteConfig.autoSwapSlotName] Auto-swap slot
     * name.
     *
     * @param {boolean} [siteEnvelope.siteConfig.localMySqlEnabled]
     * <code>true</code> to enable local MySQL; otherwise, <code>false</code>.
     *
     * @param {number} [siteEnvelope.siteConfig.managedServiceIdentityId] Managed
     * Service Identity Id
     *
     * @param {number} [siteEnvelope.siteConfig.xManagedServiceIdentityId] Explicit
     * Managed Service Identity Id
     *
     * @param {array} [siteEnvelope.siteConfig.ipSecurityRestrictions] IP security
     * restrictions.
     *
     * @param {boolean} [siteEnvelope.siteConfig.http20Enabled] Http20Enabled:
     * configures a web site to allow clients to connect over http2.0
     *
     * @param {string} [siteEnvelope.siteConfig.minTlsVersion] MinTlsVersion:
     * configures the minimum version of TLS required for SSL requests. Possible
     * values include: '1.0', '1.1', '1.2'
     *
     * @param {string} [siteEnvelope.siteConfig.ftpsState] State of FTP / FTPS
     * service. Possible values include: 'AllAllowed', 'FtpsOnly', 'Disabled'
     *
     * @param {number} [siteEnvelope.siteConfig.reservedInstanceCount] Number of
     * reserved instances.
     * This setting only applies to the Consumption Plan
     *
     * @param {boolean} [siteEnvelope.scmSiteAlsoStopped] <code>true</code> to stop
     * SCM (KUDU) site when the app is stopped; otherwise, <code>false</code>. The
     * default is <code>false</code>.
     *
     * @param {object} [siteEnvelope.hostingEnvironmentProfile] App Service
     * Environment to use for the app.
     *
     * @param {string} [siteEnvelope.hostingEnvironmentProfile.id] Resource ID of
     * the App Service Environment.
     *
     * @param {boolean} [siteEnvelope.clientAffinityEnabled] <code>true</code> to
     * enable client affinity; <code>false</code> to stop sending session affinity
     * cookies, which route client requests in the same session to the same
     * instance. Default is <code>true</code>.
     *
     * @param {boolean} [siteEnvelope.clientCertEnabled] <code>true</code> to
     * enable client certificate authentication (TLS mutual authentication);
     * otherwise, <code>false</code>. Default is <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.hostNamesDisabled] <code>true</code> to
     * disable the public hostnames of the app; otherwise, <code>false</code>.
     * If <code>true</code>, the app is only accessible via API management process.
     *
     * @param {number} [siteEnvelope.containerSize] Size of the function container.
     *
     * @param {number} [siteEnvelope.dailyMemoryTimeQuota] Maximum allowed daily
     * memory-time quota (applicable on dynamic apps only).
     *
     * @param {object} [siteEnvelope.cloningInfo] If specified during app creation,
     * the app is cloned from a source app.
     *
     * @param {uuid} [siteEnvelope.cloningInfo.correlationId] Correlation ID of
     * cloning operation. This ID ties multiple cloning operations
     * together to use the same snapshot.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.overwrite] <code>true</code> to
     * overwrite destination app; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.cloneCustomHostNames]
     * <code>true</code> to clone custom hostnames from source app; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.cloneSourceControl]
     * <code>true</code> to clone source control from source app; otherwise,
     * <code>false</code>.
     *
     * @param {string} siteEnvelope.cloningInfo.sourceWebAppId ARM resource ID of
     * the source app. App resource ID is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}
     * for production slots and
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName}
     * for other slots.
     *
     * @param {string} [siteEnvelope.cloningInfo.hostingEnvironment] App Service
     * Environment.
     *
     * @param {object} [siteEnvelope.cloningInfo.appSettingsOverrides] Application
     * setting overrides for cloned app. If specified, these settings override the
     * settings cloned
     * from source app. Otherwise, application settings from source app are
     * retained.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.configureLoadBalancing]
     * <code>true</code> to configure load balancing for source and destination
     * app.
     *
     * @param {string} [siteEnvelope.cloningInfo.trafficManagerProfileId] ARM
     * resource ID of the Traffic Manager profile to use, if it exists. Traffic
     * Manager resource ID is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}.
     *
     * @param {string} [siteEnvelope.cloningInfo.trafficManagerProfileName] Name of
     * Traffic Manager profile to create. This is only needed if Traffic Manager
     * profile does not already exist.
     *
     * @param {boolean} [siteEnvelope.httpsOnly] HttpsOnly: configures a web site
     * to accept only https requests. Issues redirect for
     * http requests
     *
     * @param {string} [siteEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Site} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Site} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Site} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, name: string, siteEnvelope: models.SitePatchResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Site>;
    update(resourceGroupName: string, name: string, siteEnvelope: models.SitePatchResource, callback: ServiceCallback<models.Site>): void;
    update(resourceGroupName: string, name: string, siteEnvelope: models.SitePatchResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Site>): void;


    /**
     * @summary Analyze a custom hostname.
     *
     * Analyze a custom hostname.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.hostName] Custom hostname.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CustomHostnameAnalysisResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    analyzeCustomHostnameWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { hostName? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CustomHostnameAnalysisResult>>;

    /**
     * @summary Analyze a custom hostname.
     *
     * Analyze a custom hostname.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.hostName] Custom hostname.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CustomHostnameAnalysisResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CustomHostnameAnalysisResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CustomHostnameAnalysisResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    analyzeCustomHostname(resourceGroupName: string, name: string, options?: { hostName? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.CustomHostnameAnalysisResult>;
    analyzeCustomHostname(resourceGroupName: string, name: string, callback: ServiceCallback<models.CustomHostnameAnalysisResult>): void;
    analyzeCustomHostname(resourceGroupName: string, name: string, options: { hostName? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CustomHostnameAnalysisResult>): void;


    /**
     * @summary Applies the configuration settings from the target slot onto the
     * current slot.
     *
     * Applies the configuration settings from the target slot onto the current
     * slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} slotSwapEntity JSON object that contains the target slot
     * name. See example.
     *
     * @param {string} slotSwapEntity.targetSlot Destination deployment slot during
     * swap operation.
     *
     * @param {boolean} slotSwapEntity.preserveVnet <code>true</code> to preserve
     * Virtual Network to the slot during swap; otherwise, <code>false</code>.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    applySlotConfigToProductionWithHttpOperationResponse(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Applies the configuration settings from the target slot onto the
     * current slot.
     *
     * Applies the configuration settings from the target slot onto the current
     * slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} slotSwapEntity JSON object that contains the target slot
     * name. See example.
     *
     * @param {string} slotSwapEntity.targetSlot Destination deployment slot during
     * swap operation.
     *
     * @param {boolean} slotSwapEntity.preserveVnet <code>true</code> to preserve
     * Virtual Network to the slot during swap; otherwise, <code>false</code>.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    applySlotConfigToProduction(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    applySlotConfigToProduction(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, callback: ServiceCallback<void>): void;
    applySlotConfigToProduction(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Creates a backup of an app.
     *
     * Creates a backup of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} request Backup configuration. You can use the JSON response
     * from the POST action as input here.
     *
     * @param {string} [request.backupName] Name of the backup.
     *
     * @param {boolean} [request.enabled] True if the backup schedule is enabled
     * (must be included in that case), false if the backup schedule should be
     * disabled.
     *
     * @param {string} request.storageAccountUrl SAS URL to the container.
     *
     * @param {object} [request.backupSchedule] Schedule for the backup if it is
     * executed periodically.
     *
     * @param {number} request.backupSchedule.frequencyInterval How often the
     * backup should be executed (e.g. for weekly backup, this should be set to 7
     * and FrequencyUnit should be set to Day)
     *
     * @param {string} request.backupSchedule.frequencyUnit The unit of time for
     * how often the backup should be executed (e.g. for weekly backup, this should
     * be set to Day and FrequencyInterval should be set to 7). Possible values
     * include: 'Day', 'Hour'
     *
     * @param {boolean} request.backupSchedule.keepAtLeastOneBackup True if the
     * retention policy should always keep at least one backup in the storage
     * account, regardless how old it is; false otherwise.
     *
     * @param {number} request.backupSchedule.retentionPeriodInDays After how many
     * days backups should be deleted.
     *
     * @param {date} [request.backupSchedule.startTime] When the schedule should
     * start working.
     *
     * @param {array} [request.databases] Databases included in the backup.
     *
     * @param {string} [request.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupItem>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    backupWithHttpOperationResponse(resourceGroupName: string, name: string, request: models.BackupRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupItem>>;

    /**
     * @summary Creates a backup of an app.
     *
     * Creates a backup of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} request Backup configuration. You can use the JSON response
     * from the POST action as input here.
     *
     * @param {string} [request.backupName] Name of the backup.
     *
     * @param {boolean} [request.enabled] True if the backup schedule is enabled
     * (must be included in that case), false if the backup schedule should be
     * disabled.
     *
     * @param {string} request.storageAccountUrl SAS URL to the container.
     *
     * @param {object} [request.backupSchedule] Schedule for the backup if it is
     * executed periodically.
     *
     * @param {number} request.backupSchedule.frequencyInterval How often the
     * backup should be executed (e.g. for weekly backup, this should be set to 7
     * and FrequencyUnit should be set to Day)
     *
     * @param {string} request.backupSchedule.frequencyUnit The unit of time for
     * how often the backup should be executed (e.g. for weekly backup, this should
     * be set to Day and FrequencyInterval should be set to 7). Possible values
     * include: 'Day', 'Hour'
     *
     * @param {boolean} request.backupSchedule.keepAtLeastOneBackup True if the
     * retention policy should always keep at least one backup in the storage
     * account, regardless how old it is; false otherwise.
     *
     * @param {number} request.backupSchedule.retentionPeriodInDays After how many
     * days backups should be deleted.
     *
     * @param {date} [request.backupSchedule.startTime] When the schedule should
     * start working.
     *
     * @param {array} [request.databases] Databases included in the backup.
     *
     * @param {string} [request.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupItem} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupItem} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupItem} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    backup(resourceGroupName: string, name: string, request: models.BackupRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupItem>;
    backup(resourceGroupName: string, name: string, request: models.BackupRequest, callback: ServiceCallback<models.BackupItem>): void;
    backup(resourceGroupName: string, name: string, request: models.BackupRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupItem>): void;


    /**
     * @summary Gets existing backups of an app.
     *
     * Gets existing backups of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupItemCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBackupsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupItemCollection>>;

    /**
     * @summary Gets existing backups of an app.
     *
     * Gets existing backups of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupItemCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupItemCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupItemCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBackups(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupItemCollection>;
    listBackups(resourceGroupName: string, name: string, callback: ServiceCallback<models.BackupItemCollection>): void;
    listBackups(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupItemCollection>): void;


    /**
     * @summary Gets a backup of an app by its ID.
     *
     * Gets a backup of an app by its ID.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} backupId ID of the backup.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupItem>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getBackupStatusWithHttpOperationResponse(resourceGroupName: string, name: string, backupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupItem>>;

    /**
     * @summary Gets a backup of an app by its ID.
     *
     * Gets a backup of an app by its ID.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} backupId ID of the backup.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupItem} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupItem} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupItem} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getBackupStatus(resourceGroupName: string, name: string, backupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupItem>;
    getBackupStatus(resourceGroupName: string, name: string, backupId: string, callback: ServiceCallback<models.BackupItem>): void;
    getBackupStatus(resourceGroupName: string, name: string, backupId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupItem>): void;


    /**
     * @summary Deletes a backup of an app by its ID.
     *
     * Deletes a backup of an app by its ID.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} backupId ID of the backup.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteBackupWithHttpOperationResponse(resourceGroupName: string, name: string, backupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a backup of an app by its ID.
     *
     * Deletes a backup of an app by its ID.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} backupId ID of the backup.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteBackup(resourceGroupName: string, name: string, backupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteBackup(resourceGroupName: string, name: string, backupId: string, callback: ServiceCallback<void>): void;
    deleteBackup(resourceGroupName: string, name: string, backupId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Gets status of a web app backup that may be in progress, including
     * secrets associated with the backup, such as the Azure Storage SAS URL. Also
     * can be used to update the SAS URL for the backup if a new URL is passed in
     * the request body.
     *
     * Gets status of a web app backup that may be in progress, including secrets
     * associated with the backup, such as the Azure Storage SAS URL. Also can be
     * used to update the SAS URL for the backup if a new URL is passed in the
     * request body.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} backupId ID of backup.
     *
     * @param {object} request Information on backup request.
     *
     * @param {string} [request.backupName] Name of the backup.
     *
     * @param {boolean} [request.enabled] True if the backup schedule is enabled
     * (must be included in that case), false if the backup schedule should be
     * disabled.
     *
     * @param {string} request.storageAccountUrl SAS URL to the container.
     *
     * @param {object} [request.backupSchedule] Schedule for the backup if it is
     * executed periodically.
     *
     * @param {number} request.backupSchedule.frequencyInterval How often the
     * backup should be executed (e.g. for weekly backup, this should be set to 7
     * and FrequencyUnit should be set to Day)
     *
     * @param {string} request.backupSchedule.frequencyUnit The unit of time for
     * how often the backup should be executed (e.g. for weekly backup, this should
     * be set to Day and FrequencyInterval should be set to 7). Possible values
     * include: 'Day', 'Hour'
     *
     * @param {boolean} request.backupSchedule.keepAtLeastOneBackup True if the
     * retention policy should always keep at least one backup in the storage
     * account, regardless how old it is; false otherwise.
     *
     * @param {number} request.backupSchedule.retentionPeriodInDays After how many
     * days backups should be deleted.
     *
     * @param {date} [request.backupSchedule.startTime] When the schedule should
     * start working.
     *
     * @param {array} [request.databases] Databases included in the backup.
     *
     * @param {string} [request.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupItem>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBackupStatusSecretsWithHttpOperationResponse(resourceGroupName: string, name: string, backupId: string, request: models.BackupRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupItem>>;

    /**
     * @summary Gets status of a web app backup that may be in progress, including
     * secrets associated with the backup, such as the Azure Storage SAS URL. Also
     * can be used to update the SAS URL for the backup if a new URL is passed in
     * the request body.
     *
     * Gets status of a web app backup that may be in progress, including secrets
     * associated with the backup, such as the Azure Storage SAS URL. Also can be
     * used to update the SAS URL for the backup if a new URL is passed in the
     * request body.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} backupId ID of backup.
     *
     * @param {object} request Information on backup request.
     *
     * @param {string} [request.backupName] Name of the backup.
     *
     * @param {boolean} [request.enabled] True if the backup schedule is enabled
     * (must be included in that case), false if the backup schedule should be
     * disabled.
     *
     * @param {string} request.storageAccountUrl SAS URL to the container.
     *
     * @param {object} [request.backupSchedule] Schedule for the backup if it is
     * executed periodically.
     *
     * @param {number} request.backupSchedule.frequencyInterval How often the
     * backup should be executed (e.g. for weekly backup, this should be set to 7
     * and FrequencyUnit should be set to Day)
     *
     * @param {string} request.backupSchedule.frequencyUnit The unit of time for
     * how often the backup should be executed (e.g. for weekly backup, this should
     * be set to Day and FrequencyInterval should be set to 7). Possible values
     * include: 'Day', 'Hour'
     *
     * @param {boolean} request.backupSchedule.keepAtLeastOneBackup True if the
     * retention policy should always keep at least one backup in the storage
     * account, regardless how old it is; false otherwise.
     *
     * @param {number} request.backupSchedule.retentionPeriodInDays After how many
     * days backups should be deleted.
     *
     * @param {date} [request.backupSchedule.startTime] When the schedule should
     * start working.
     *
     * @param {array} [request.databases] Databases included in the backup.
     *
     * @param {string} [request.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupItem} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupItem} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupItem} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBackupStatusSecrets(resourceGroupName: string, name: string, backupId: string, request: models.BackupRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupItem>;
    listBackupStatusSecrets(resourceGroupName: string, name: string, backupId: string, request: models.BackupRequest, callback: ServiceCallback<models.BackupItem>): void;
    listBackupStatusSecrets(resourceGroupName: string, name: string, backupId: string, request: models.BackupRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupItem>): void;


    /**
     * @summary Restores a specific backup to another app (or deployment slot, if
     * specified).
     *
     * Restores a specific backup to another app (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} backupId ID of the backup.
     *
     * @param {object} request Information on restore request .
     *
     * @param {string} request.storageAccountUrl SAS URL to the container.
     *
     * @param {string} [request.blobName] Name of a blob which contains the backup.
     *
     * @param {boolean} request.overwrite <code>true</code> if the restore
     * operation can overwrite target app; otherwise, <code>false</code>.
     * <code>true</code> is needed if trying to restore over an existing app.
     *
     * @param {string} [request.siteName] Name of an app.
     *
     * @param {array} [request.databases] Collection of databases which should be
     * restored. This list has to match the list of databases included in the
     * backup.
     *
     * @param {boolean} [request.ignoreConflictingHostNames] Changes a logic when
     * restoring an app with custom domains. <code>true</code> to remove custom
     * domains automatically. If <code>false</code>, custom domains are added to
     * the app's object when it is being restored, but that might fail due to
     * conflicts during the operation.
     *
     * @param {boolean} [request.ignoreDatabases] Ignore the databases and only
     * restore the site content
     *
     * @param {string} [request.appServicePlan] Specify app service plan that will
     * own restored site.
     *
     * @param {string} [request.operationType] Operation type. Possible values
     * include: 'Default', 'Clone', 'Relocation', 'Snapshot', 'CloudFS'
     *
     * @param {boolean} [request.adjustConnectionStrings] <code>true</code> if
     * SiteConfig.ConnectionStrings should be set in new app; otherwise,
     * <code>false</code>.
     *
     * @param {string} [request.hostingEnvironment] App Service Environment name,
     * if needed (only when restoring an app to an App Service Environment).
     *
     * @param {string} [request.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    restoreWithHttpOperationResponse(resourceGroupName: string, name: string, backupId: string, request: models.RestoreRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Restores a specific backup to another app (or deployment slot, if
     * specified).
     *
     * Restores a specific backup to another app (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} backupId ID of the backup.
     *
     * @param {object} request Information on restore request .
     *
     * @param {string} request.storageAccountUrl SAS URL to the container.
     *
     * @param {string} [request.blobName] Name of a blob which contains the backup.
     *
     * @param {boolean} request.overwrite <code>true</code> if the restore
     * operation can overwrite target app; otherwise, <code>false</code>.
     * <code>true</code> is needed if trying to restore over an existing app.
     *
     * @param {string} [request.siteName] Name of an app.
     *
     * @param {array} [request.databases] Collection of databases which should be
     * restored. This list has to match the list of databases included in the
     * backup.
     *
     * @param {boolean} [request.ignoreConflictingHostNames] Changes a logic when
     * restoring an app with custom domains. <code>true</code> to remove custom
     * domains automatically. If <code>false</code>, custom domains are added to
     * the app's object when it is being restored, but that might fail due to
     * conflicts during the operation.
     *
     * @param {boolean} [request.ignoreDatabases] Ignore the databases and only
     * restore the site content
     *
     * @param {string} [request.appServicePlan] Specify app service plan that will
     * own restored site.
     *
     * @param {string} [request.operationType] Operation type. Possible values
     * include: 'Default', 'Clone', 'Relocation', 'Snapshot', 'CloudFS'
     *
     * @param {boolean} [request.adjustConnectionStrings] <code>true</code> if
     * SiteConfig.ConnectionStrings should be set in new app; otherwise,
     * <code>false</code>.
     *
     * @param {string} [request.hostingEnvironment] App Service Environment name,
     * if needed (only when restoring an app to an App Service Environment).
     *
     * @param {string} [request.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    restore(resourceGroupName: string, name: string, backupId: string, request: models.RestoreRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    restore(resourceGroupName: string, name: string, backupId: string, request: models.RestoreRequest, callback: ServiceCallback<void>): void;
    restore(resourceGroupName: string, name: string, backupId: string, request: models.RestoreRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary List the configurations of an app
     *
     * List the configurations of an app
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteConfigResourceCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listConfigurationsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteConfigResourceCollection>>;

    /**
     * @summary List the configurations of an app
     *
     * List the configurations of an app
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteConfigResourceCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteConfigResourceCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteConfigResourceCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listConfigurations(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteConfigResourceCollection>;
    listConfigurations(resourceGroupName: string, name: string, callback: ServiceCallback<models.SiteConfigResourceCollection>): void;
    listConfigurations(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteConfigResourceCollection>): void;


    /**
     * @summary Replaces the application settings of an app.
     *
     * Replaces the application settings of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} appSettings Application settings of the app.
     *
     * @param {object} [appSettings.properties] Settings.
     *
     * @param {string} [appSettings.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StringDictionary>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateApplicationSettingsWithHttpOperationResponse(resourceGroupName: string, name: string, appSettings: models.StringDictionary, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StringDictionary>>;

    /**
     * @summary Replaces the application settings of an app.
     *
     * Replaces the application settings of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} appSettings Application settings of the app.
     *
     * @param {object} [appSettings.properties] Settings.
     *
     * @param {string} [appSettings.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StringDictionary} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StringDictionary} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StringDictionary} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateApplicationSettings(resourceGroupName: string, name: string, appSettings: models.StringDictionary, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StringDictionary>;
    updateApplicationSettings(resourceGroupName: string, name: string, appSettings: models.StringDictionary, callback: ServiceCallback<models.StringDictionary>): void;
    updateApplicationSettings(resourceGroupName: string, name: string, appSettings: models.StringDictionary, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StringDictionary>): void;


    /**
     * @summary Gets the application settings of an app.
     *
     * Gets the application settings of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StringDictionary>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listApplicationSettingsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StringDictionary>>;

    /**
     * @summary Gets the application settings of an app.
     *
     * Gets the application settings of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StringDictionary} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StringDictionary} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StringDictionary} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listApplicationSettings(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StringDictionary>;
    listApplicationSettings(resourceGroupName: string, name: string, callback: ServiceCallback<models.StringDictionary>): void;
    listApplicationSettings(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StringDictionary>): void;


    /**
     * @summary Updates the Authentication / Authorization settings associated with
     * web app.
     *
     * Updates the Authentication / Authorization settings associated with web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} siteAuthSettings Auth settings associated with web app.
     *
     * @param {boolean} [siteAuthSettings.enabled] <code>true</code> if the
     * Authentication / Authorization feature is enabled for the current app;
     * otherwise, <code>false</code>.
     *
     * @param {string} [siteAuthSettings.runtimeVersion] The RuntimeVersion of the
     * Authentication / Authorization feature in use for the current app.
     * The setting in this value can control the behavior of certain features in
     * the Authentication / Authorization module.
     *
     * @param {string} [siteAuthSettings.unauthenticatedClientAction] The action to
     * take when an unauthenticated client attempts to access the app. Possible
     * values include: 'RedirectToLoginPage', 'AllowAnonymous'
     *
     * @param {boolean} [siteAuthSettings.tokenStoreEnabled] <code>true</code> to
     * durably store platform-specific security tokens that are obtained during
     * login flows; otherwise, <code>false</code>.
     * The default is <code>false</code>.
     *
     * @param {array} [siteAuthSettings.allowedExternalRedirectUrls] External URLs
     * that can be redirected to as part of logging in or logging out of the app.
     * Note that the query string part of the URL is ignored.
     * This is an advanced setting typically only needed by Windows Store
     * application backends.
     * Note that URLs within the current domain are always implicitly allowed.
     *
     * @param {string} [siteAuthSettings.defaultProvider] The default
     * authentication provider to use when multiple providers are configured.
     * This setting is only needed if multiple providers are configured and the
     * unauthenticated client
     * action is set to "RedirectToLoginPage". Possible values include:
     * 'AzureActiveDirectory', 'Facebook', 'Google', 'MicrosoftAccount', 'Twitter'
     *
     * @param {number} [siteAuthSettings.tokenRefreshExtensionHours] The number of
     * hours after session token expiration that a session token can be used to
     * call the token refresh API. The default is 72 hours.
     *
     * @param {string} [siteAuthSettings.clientId] The Client ID of this relying
     * party application, known as the client_id.
     * This setting is required for enabling OpenID Connection authentication with
     * Azure Active Directory or
     * other 3rd party OpenID Connect providers.
     * More information on OpenID Connect:
     * http://openid.net/specs/openid-connect-core-1_0.html
     *
     * @param {string} [siteAuthSettings.clientSecret] The Client Secret of this
     * relying party application (in Azure Active Directory, this is also referred
     * to as the Key).
     * This setting is optional. If no client secret is configured, the OpenID
     * Connect implicit auth flow is used to authenticate end users.
     * Otherwise, the OpenID Connect Authorization Code Flow is used to
     * authenticate end users.
     * More information on OpenID Connect:
     * http://openid.net/specs/openid-connect-core-1_0.html
     *
     * @param {string} [siteAuthSettings.issuer] The OpenID Connect Issuer URI that
     * represents the entity which issues access tokens for this application.
     * When using Azure Active Directory, this value is the URI of the directory
     * tenant, e.g. https://sts.windows.net/{tenant-guid}/.
     * This URI is a case-sensitive identifier for the token issuer.
     * More information on OpenID Connect Discovery:
     * http://openid.net/specs/openid-connect-discovery-1_0.html
     *
     * @param {boolean} [siteAuthSettings.validateIssuer] Gets a value indicating
     * whether the issuer should be a valid HTTPS url and be validated as such.
     *
     * @param {array} [siteAuthSettings.allowedAudiences] Allowed audience values
     * to consider when validating JWTs issued by
     * Azure Active Directory. Note that the <code>ClientID</code> value is always
     * considered an
     * allowed audience, regardless of this setting.
     *
     * @param {array} [siteAuthSettings.additionalLoginParams] Login parameters to
     * send to the OpenID Connect authorization endpoint when
     * a user logs in. Each parameter must be in the form "key=value".
     *
     * @param {string} [siteAuthSettings.googleClientId] The OpenID Connect Client
     * ID for the Google web application.
     * This setting is required for enabling Google Sign-In.
     * Google Sign-In documentation:
     * https://developers.google.com/identity/sign-in/web/
     *
     * @param {string} [siteAuthSettings.googleClientSecret] The client secret
     * associated with the Google web application.
     * This setting is required for enabling Google Sign-In.
     * Google Sign-In documentation:
     * https://developers.google.com/identity/sign-in/web/
     *
     * @param {array} [siteAuthSettings.googleOAuthScopes] The OAuth 2.0 scopes
     * that will be requested as part of Google Sign-In authentication.
     * This setting is optional. If not specified, "openid", "profile", and "email"
     * are used as default scopes.
     * Google Sign-In documentation:
     * https://developers.google.com/identity/sign-in/web/
     *
     * @param {string} [siteAuthSettings.facebookAppId] The App ID of the Facebook
     * app used for login.
     * This setting is required for enabling Facebook Login.
     * Facebook Login documentation:
     * https://developers.facebook.com/docs/facebook-login
     *
     * @param {string} [siteAuthSettings.facebookAppSecret] The App Secret of the
     * Facebook app used for Facebook Login.
     * This setting is required for enabling Facebook Login.
     * Facebook Login documentation:
     * https://developers.facebook.com/docs/facebook-login
     *
     * @param {array} [siteAuthSettings.facebookOAuthScopes] The OAuth 2.0 scopes
     * that will be requested as part of Facebook Login authentication.
     * This setting is optional.
     * Facebook Login documentation:
     * https://developers.facebook.com/docs/facebook-login
     *
     * @param {string} [siteAuthSettings.twitterConsumerKey] The OAuth 1.0a
     * consumer key of the Twitter application used for sign-in.
     * This setting is required for enabling Twitter Sign-In.
     * Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
     *
     * @param {string} [siteAuthSettings.twitterConsumerSecret] The OAuth 1.0a
     * consumer secret of the Twitter application used for sign-in.
     * This setting is required for enabling Twitter Sign-In.
     * Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
     *
     * @param {string} [siteAuthSettings.microsoftAccountClientId] The OAuth 2.0
     * client ID that was created for the app used for authentication.
     * This setting is required for enabling Microsoft Account authentication.
     * Microsoft Account OAuth documentation:
     * https://dev.onedrive.com/auth/msa_oauth.htm
     *
     * @param {string} [siteAuthSettings.microsoftAccountClientSecret] The OAuth
     * 2.0 client secret that was created for the app used for authentication.
     * This setting is required for enabling Microsoft Account authentication.
     * Microsoft Account OAuth documentation:
     * https://dev.onedrive.com/auth/msa_oauth.htm
     *
     * @param {array} [siteAuthSettings.microsoftAccountOAuthScopes] The OAuth 2.0
     * scopes that will be requested as part of Microsoft Account authentication.
     * This setting is optional. If not specified, "wl.basic" is used as the
     * default scope.
     * Microsoft Account Scopes and permissions documentation:
     * https://msdn.microsoft.com/en-us/library/dn631845.aspx
     *
     * @param {string} [siteAuthSettings.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteAuthSettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateAuthSettingsWithHttpOperationResponse(resourceGroupName: string, name: string, siteAuthSettings: models.SiteAuthSettings, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteAuthSettings>>;

    /**
     * @summary Updates the Authentication / Authorization settings associated with
     * web app.
     *
     * Updates the Authentication / Authorization settings associated with web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} siteAuthSettings Auth settings associated with web app.
     *
     * @param {boolean} [siteAuthSettings.enabled] <code>true</code> if the
     * Authentication / Authorization feature is enabled for the current app;
     * otherwise, <code>false</code>.
     *
     * @param {string} [siteAuthSettings.runtimeVersion] The RuntimeVersion of the
     * Authentication / Authorization feature in use for the current app.
     * The setting in this value can control the behavior of certain features in
     * the Authentication / Authorization module.
     *
     * @param {string} [siteAuthSettings.unauthenticatedClientAction] The action to
     * take when an unauthenticated client attempts to access the app. Possible
     * values include: 'RedirectToLoginPage', 'AllowAnonymous'
     *
     * @param {boolean} [siteAuthSettings.tokenStoreEnabled] <code>true</code> to
     * durably store platform-specific security tokens that are obtained during
     * login flows; otherwise, <code>false</code>.
     * The default is <code>false</code>.
     *
     * @param {array} [siteAuthSettings.allowedExternalRedirectUrls] External URLs
     * that can be redirected to as part of logging in or logging out of the app.
     * Note that the query string part of the URL is ignored.
     * This is an advanced setting typically only needed by Windows Store
     * application backends.
     * Note that URLs within the current domain are always implicitly allowed.
     *
     * @param {string} [siteAuthSettings.defaultProvider] The default
     * authentication provider to use when multiple providers are configured.
     * This setting is only needed if multiple providers are configured and the
     * unauthenticated client
     * action is set to "RedirectToLoginPage". Possible values include:
     * 'AzureActiveDirectory', 'Facebook', 'Google', 'MicrosoftAccount', 'Twitter'
     *
     * @param {number} [siteAuthSettings.tokenRefreshExtensionHours] The number of
     * hours after session token expiration that a session token can be used to
     * call the token refresh API. The default is 72 hours.
     *
     * @param {string} [siteAuthSettings.clientId] The Client ID of this relying
     * party application, known as the client_id.
     * This setting is required for enabling OpenID Connection authentication with
     * Azure Active Directory or
     * other 3rd party OpenID Connect providers.
     * More information on OpenID Connect:
     * http://openid.net/specs/openid-connect-core-1_0.html
     *
     * @param {string} [siteAuthSettings.clientSecret] The Client Secret of this
     * relying party application (in Azure Active Directory, this is also referred
     * to as the Key).
     * This setting is optional. If no client secret is configured, the OpenID
     * Connect implicit auth flow is used to authenticate end users.
     * Otherwise, the OpenID Connect Authorization Code Flow is used to
     * authenticate end users.
     * More information on OpenID Connect:
     * http://openid.net/specs/openid-connect-core-1_0.html
     *
     * @param {string} [siteAuthSettings.issuer] The OpenID Connect Issuer URI that
     * represents the entity which issues access tokens for this application.
     * When using Azure Active Directory, this value is the URI of the directory
     * tenant, e.g. https://sts.windows.net/{tenant-guid}/.
     * This URI is a case-sensitive identifier for the token issuer.
     * More information on OpenID Connect Discovery:
     * http://openid.net/specs/openid-connect-discovery-1_0.html
     *
     * @param {boolean} [siteAuthSettings.validateIssuer] Gets a value indicating
     * whether the issuer should be a valid HTTPS url and be validated as such.
     *
     * @param {array} [siteAuthSettings.allowedAudiences] Allowed audience values
     * to consider when validating JWTs issued by
     * Azure Active Directory. Note that the <code>ClientID</code> value is always
     * considered an
     * allowed audience, regardless of this setting.
     *
     * @param {array} [siteAuthSettings.additionalLoginParams] Login parameters to
     * send to the OpenID Connect authorization endpoint when
     * a user logs in. Each parameter must be in the form "key=value".
     *
     * @param {string} [siteAuthSettings.googleClientId] The OpenID Connect Client
     * ID for the Google web application.
     * This setting is required for enabling Google Sign-In.
     * Google Sign-In documentation:
     * https://developers.google.com/identity/sign-in/web/
     *
     * @param {string} [siteAuthSettings.googleClientSecret] The client secret
     * associated with the Google web application.
     * This setting is required for enabling Google Sign-In.
     * Google Sign-In documentation:
     * https://developers.google.com/identity/sign-in/web/
     *
     * @param {array} [siteAuthSettings.googleOAuthScopes] The OAuth 2.0 scopes
     * that will be requested as part of Google Sign-In authentication.
     * This setting is optional. If not specified, "openid", "profile", and "email"
     * are used as default scopes.
     * Google Sign-In documentation:
     * https://developers.google.com/identity/sign-in/web/
     *
     * @param {string} [siteAuthSettings.facebookAppId] The App ID of the Facebook
     * app used for login.
     * This setting is required for enabling Facebook Login.
     * Facebook Login documentation:
     * https://developers.facebook.com/docs/facebook-login
     *
     * @param {string} [siteAuthSettings.facebookAppSecret] The App Secret of the
     * Facebook app used for Facebook Login.
     * This setting is required for enabling Facebook Login.
     * Facebook Login documentation:
     * https://developers.facebook.com/docs/facebook-login
     *
     * @param {array} [siteAuthSettings.facebookOAuthScopes] The OAuth 2.0 scopes
     * that will be requested as part of Facebook Login authentication.
     * This setting is optional.
     * Facebook Login documentation:
     * https://developers.facebook.com/docs/facebook-login
     *
     * @param {string} [siteAuthSettings.twitterConsumerKey] The OAuth 1.0a
     * consumer key of the Twitter application used for sign-in.
     * This setting is required for enabling Twitter Sign-In.
     * Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
     *
     * @param {string} [siteAuthSettings.twitterConsumerSecret] The OAuth 1.0a
     * consumer secret of the Twitter application used for sign-in.
     * This setting is required for enabling Twitter Sign-In.
     * Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
     *
     * @param {string} [siteAuthSettings.microsoftAccountClientId] The OAuth 2.0
     * client ID that was created for the app used for authentication.
     * This setting is required for enabling Microsoft Account authentication.
     * Microsoft Account OAuth documentation:
     * https://dev.onedrive.com/auth/msa_oauth.htm
     *
     * @param {string} [siteAuthSettings.microsoftAccountClientSecret] The OAuth
     * 2.0 client secret that was created for the app used for authentication.
     * This setting is required for enabling Microsoft Account authentication.
     * Microsoft Account OAuth documentation:
     * https://dev.onedrive.com/auth/msa_oauth.htm
     *
     * @param {array} [siteAuthSettings.microsoftAccountOAuthScopes] The OAuth 2.0
     * scopes that will be requested as part of Microsoft Account authentication.
     * This setting is optional. If not specified, "wl.basic" is used as the
     * default scope.
     * Microsoft Account Scopes and permissions documentation:
     * https://msdn.microsoft.com/en-us/library/dn631845.aspx
     *
     * @param {string} [siteAuthSettings.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteAuthSettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteAuthSettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteAuthSettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateAuthSettings(resourceGroupName: string, name: string, siteAuthSettings: models.SiteAuthSettings, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteAuthSettings>;
    updateAuthSettings(resourceGroupName: string, name: string, siteAuthSettings: models.SiteAuthSettings, callback: ServiceCallback<models.SiteAuthSettings>): void;
    updateAuthSettings(resourceGroupName: string, name: string, siteAuthSettings: models.SiteAuthSettings, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteAuthSettings>): void;


    /**
     * @summary Gets the Authentication/Authorization settings of an app.
     *
     * Gets the Authentication/Authorization settings of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteAuthSettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAuthSettingsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteAuthSettings>>;

    /**
     * @summary Gets the Authentication/Authorization settings of an app.
     *
     * Gets the Authentication/Authorization settings of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteAuthSettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteAuthSettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteAuthSettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAuthSettings(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteAuthSettings>;
    getAuthSettings(resourceGroupName: string, name: string, callback: ServiceCallback<models.SiteAuthSettings>): void;
    getAuthSettings(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteAuthSettings>): void;


    /**
     * @summary Updates the Azure storage account configurations of an app.
     *
     * Updates the Azure storage account configurations of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} azureStorageAccounts Azure storage accounts of the app.
     *
     * @param {object} [azureStorageAccounts.properties] Azure storage accounts.
     *
     * @param {string} [azureStorageAccounts.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AzureStoragePropertyDictionaryResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateAzureStorageAccountsWithHttpOperationResponse(resourceGroupName: string, name: string, azureStorageAccounts: models.AzureStoragePropertyDictionaryResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AzureStoragePropertyDictionaryResource>>;

    /**
     * @summary Updates the Azure storage account configurations of an app.
     *
     * Updates the Azure storage account configurations of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} azureStorageAccounts Azure storage accounts of the app.
     *
     * @param {object} [azureStorageAccounts.properties] Azure storage accounts.
     *
     * @param {string} [azureStorageAccounts.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AzureStoragePropertyDictionaryResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AzureStoragePropertyDictionaryResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AzureStoragePropertyDictionaryResource} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateAzureStorageAccounts(resourceGroupName: string, name: string, azureStorageAccounts: models.AzureStoragePropertyDictionaryResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AzureStoragePropertyDictionaryResource>;
    updateAzureStorageAccounts(resourceGroupName: string, name: string, azureStorageAccounts: models.AzureStoragePropertyDictionaryResource, callback: ServiceCallback<models.AzureStoragePropertyDictionaryResource>): void;
    updateAzureStorageAccounts(resourceGroupName: string, name: string, azureStorageAccounts: models.AzureStoragePropertyDictionaryResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AzureStoragePropertyDictionaryResource>): void;


    /**
     * @summary Gets the Azure storage account configurations of an app.
     *
     * Gets the Azure storage account configurations of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AzureStoragePropertyDictionaryResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAzureStorageAccountsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AzureStoragePropertyDictionaryResource>>;

    /**
     * @summary Gets the Azure storage account configurations of an app.
     *
     * Gets the Azure storage account configurations of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AzureStoragePropertyDictionaryResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AzureStoragePropertyDictionaryResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AzureStoragePropertyDictionaryResource} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAzureStorageAccounts(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AzureStoragePropertyDictionaryResource>;
    listAzureStorageAccounts(resourceGroupName: string, name: string, callback: ServiceCallback<models.AzureStoragePropertyDictionaryResource>): void;
    listAzureStorageAccounts(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AzureStoragePropertyDictionaryResource>): void;


    /**
     * @summary Updates the backup configuration of an app.
     *
     * Updates the backup configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} request Edited backup configuration.
     *
     * @param {string} [request.backupName] Name of the backup.
     *
     * @param {boolean} [request.enabled] True if the backup schedule is enabled
     * (must be included in that case), false if the backup schedule should be
     * disabled.
     *
     * @param {string} request.storageAccountUrl SAS URL to the container.
     *
     * @param {object} [request.backupSchedule] Schedule for the backup if it is
     * executed periodically.
     *
     * @param {number} request.backupSchedule.frequencyInterval How often the
     * backup should be executed (e.g. for weekly backup, this should be set to 7
     * and FrequencyUnit should be set to Day)
     *
     * @param {string} request.backupSchedule.frequencyUnit The unit of time for
     * how often the backup should be executed (e.g. for weekly backup, this should
     * be set to Day and FrequencyInterval should be set to 7). Possible values
     * include: 'Day', 'Hour'
     *
     * @param {boolean} request.backupSchedule.keepAtLeastOneBackup True if the
     * retention policy should always keep at least one backup in the storage
     * account, regardless how old it is; false otherwise.
     *
     * @param {number} request.backupSchedule.retentionPeriodInDays After how many
     * days backups should be deleted.
     *
     * @param {date} [request.backupSchedule.startTime] When the schedule should
     * start working.
     *
     * @param {array} [request.databases] Databases included in the backup.
     *
     * @param {string} [request.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupRequest>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateBackupConfigurationWithHttpOperationResponse(resourceGroupName: string, name: string, request: models.BackupRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupRequest>>;

    /**
     * @summary Updates the backup configuration of an app.
     *
     * Updates the backup configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} request Edited backup configuration.
     *
     * @param {string} [request.backupName] Name of the backup.
     *
     * @param {boolean} [request.enabled] True if the backup schedule is enabled
     * (must be included in that case), false if the backup schedule should be
     * disabled.
     *
     * @param {string} request.storageAccountUrl SAS URL to the container.
     *
     * @param {object} [request.backupSchedule] Schedule for the backup if it is
     * executed periodically.
     *
     * @param {number} request.backupSchedule.frequencyInterval How often the
     * backup should be executed (e.g. for weekly backup, this should be set to 7
     * and FrequencyUnit should be set to Day)
     *
     * @param {string} request.backupSchedule.frequencyUnit The unit of time for
     * how often the backup should be executed (e.g. for weekly backup, this should
     * be set to Day and FrequencyInterval should be set to 7). Possible values
     * include: 'Day', 'Hour'
     *
     * @param {boolean} request.backupSchedule.keepAtLeastOneBackup True if the
     * retention policy should always keep at least one backup in the storage
     * account, regardless how old it is; false otherwise.
     *
     * @param {number} request.backupSchedule.retentionPeriodInDays After how many
     * days backups should be deleted.
     *
     * @param {date} [request.backupSchedule.startTime] When the schedule should
     * start working.
     *
     * @param {array} [request.databases] Databases included in the backup.
     *
     * @param {string} [request.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupRequest} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupRequest} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupRequest} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateBackupConfiguration(resourceGroupName: string, name: string, request: models.BackupRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupRequest>;
    updateBackupConfiguration(resourceGroupName: string, name: string, request: models.BackupRequest, callback: ServiceCallback<models.BackupRequest>): void;
    updateBackupConfiguration(resourceGroupName: string, name: string, request: models.BackupRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupRequest>): void;


    /**
     * @summary Deletes the backup configuration of an app.
     *
     * Deletes the backup configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteBackupConfigurationWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes the backup configuration of an app.
     *
     * Deletes the backup configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteBackupConfiguration(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteBackupConfiguration(resourceGroupName: string, name: string, callback: ServiceCallback<void>): void;
    deleteBackupConfiguration(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Gets the backup configuration of an app.
     *
     * Gets the backup configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupRequest>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getBackupConfigurationWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupRequest>>;

    /**
     * @summary Gets the backup configuration of an app.
     *
     * Gets the backup configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupRequest} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupRequest} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupRequest} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getBackupConfiguration(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupRequest>;
    getBackupConfiguration(resourceGroupName: string, name: string, callback: ServiceCallback<models.BackupRequest>): void;
    getBackupConfiguration(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupRequest>): void;


    /**
     * @summary Replaces the connection strings of an app.
     *
     * Replaces the connection strings of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} connectionStrings Connection strings of the app or
     * deployment slot. See example.
     *
     * @param {object} [connectionStrings.properties] Connection strings.
     *
     * @param {string} [connectionStrings.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectionStringDictionary>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateConnectionStringsWithHttpOperationResponse(resourceGroupName: string, name: string, connectionStrings: models.ConnectionStringDictionary, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectionStringDictionary>>;

    /**
     * @summary Replaces the connection strings of an app.
     *
     * Replaces the connection strings of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} connectionStrings Connection strings of the app or
     * deployment slot. See example.
     *
     * @param {object} [connectionStrings.properties] Connection strings.
     *
     * @param {string} [connectionStrings.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectionStringDictionary} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectionStringDictionary} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectionStringDictionary} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateConnectionStrings(resourceGroupName: string, name: string, connectionStrings: models.ConnectionStringDictionary, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectionStringDictionary>;
    updateConnectionStrings(resourceGroupName: string, name: string, connectionStrings: models.ConnectionStringDictionary, callback: ServiceCallback<models.ConnectionStringDictionary>): void;
    updateConnectionStrings(resourceGroupName: string, name: string, connectionStrings: models.ConnectionStringDictionary, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectionStringDictionary>): void;


    /**
     * @summary Gets the connection strings of an app.
     *
     * Gets the connection strings of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectionStringDictionary>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listConnectionStringsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectionStringDictionary>>;

    /**
     * @summary Gets the connection strings of an app.
     *
     * Gets the connection strings of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectionStringDictionary} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectionStringDictionary} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectionStringDictionary} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listConnectionStrings(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectionStringDictionary>;
    listConnectionStrings(resourceGroupName: string, name: string, callback: ServiceCallback<models.ConnectionStringDictionary>): void;
    listConnectionStrings(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectionStringDictionary>): void;


    /**
     * @summary Gets the logging configuration of an app.
     *
     * Gets the logging configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteLogsConfig>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getDiagnosticLogsConfigurationWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteLogsConfig>>;

    /**
     * @summary Gets the logging configuration of an app.
     *
     * Gets the logging configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteLogsConfig} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteLogsConfig} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteLogsConfig} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getDiagnosticLogsConfiguration(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteLogsConfig>;
    getDiagnosticLogsConfiguration(resourceGroupName: string, name: string, callback: ServiceCallback<models.SiteLogsConfig>): void;
    getDiagnosticLogsConfiguration(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteLogsConfig>): void;


    /**
     * @summary Updates the logging configuration of an app.
     *
     * Updates the logging configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} siteLogsConfig A SiteLogsConfig JSON object that contains
     * the logging configuration to change in the "properties" property.
     *
     * @param {object} [siteLogsConfig.applicationLogs] Application logs
     * configuration.
     *
     * @param {object} [siteLogsConfig.applicationLogs.fileSystem] Application logs
     * to file system configuration.
     *
     * @param {string} [siteLogsConfig.applicationLogs.fileSystem.level] Log level.
     * Possible values include: 'Off', 'Verbose', 'Information', 'Warning', 'Error'
     *
     * @param {object} [siteLogsConfig.applicationLogs.azureTableStorage]
     * Application logs to azure table storage configuration.
     *
     * @param {string} [siteLogsConfig.applicationLogs.azureTableStorage.level] Log
     * level. Possible values include: 'Off', 'Verbose', 'Information', 'Warning',
     * 'Error'
     *
     * @param {string} siteLogsConfig.applicationLogs.azureTableStorage.sasUrl SAS
     * URL to an Azure table with add/query/delete permissions.
     *
     * @param {object} [siteLogsConfig.applicationLogs.azureBlobStorage]
     * Application logs to blob storage configuration.
     *
     * @param {string} [siteLogsConfig.applicationLogs.azureBlobStorage.level] Log
     * level. Possible values include: 'Off', 'Verbose', 'Information', 'Warning',
     * 'Error'
     *
     * @param {string} [siteLogsConfig.applicationLogs.azureBlobStorage.sasUrl] SAS
     * url to a azure blob container with read/write/list/delete permissions.
     *
     * @param {number}
     * [siteLogsConfig.applicationLogs.azureBlobStorage.retentionInDays] Retention
     * in days.
     * Remove blobs older than X days.
     * 0 or lower means no retention.
     *
     * @param {object} [siteLogsConfig.httpLogs] HTTP logs configuration.
     *
     * @param {object} [siteLogsConfig.httpLogs.fileSystem] Http logs to file
     * system configuration.
     *
     * @param {number} [siteLogsConfig.httpLogs.fileSystem.retentionInMb] Maximum
     * size in megabytes that http log files can use.
     * When reached old log files will be removed to make space for new ones.
     * Value can range between 25 and 100.
     *
     * @param {number} [siteLogsConfig.httpLogs.fileSystem.retentionInDays]
     * Retention in days.
     * Remove files older than X days.
     * 0 or lower means no retention.
     *
     * @param {boolean} [siteLogsConfig.httpLogs.fileSystem.enabled] True if
     * configuration is enabled, false if it is disabled and null if configuration
     * is not set.
     *
     * @param {object} [siteLogsConfig.httpLogs.azureBlobStorage] Http logs to
     * azure blob storage configuration.
     *
     * @param {string} [siteLogsConfig.httpLogs.azureBlobStorage.sasUrl] SAS url to
     * a azure blob container with read/write/list/delete permissions.
     *
     * @param {number} [siteLogsConfig.httpLogs.azureBlobStorage.retentionInDays]
     * Retention in days.
     * Remove blobs older than X days.
     * 0 or lower means no retention.
     *
     * @param {boolean} [siteLogsConfig.httpLogs.azureBlobStorage.enabled] True if
     * configuration is enabled, false if it is disabled and null if configuration
     * is not set.
     *
     * @param {object} [siteLogsConfig.failedRequestsTracing] Failed requests
     * tracing configuration.
     *
     * @param {object} [siteLogsConfig.detailedErrorMessages] Detailed error
     * messages configuration.
     *
     * @param {boolean} [siteLogsConfig.detailedErrorMessages.enabled] True if
     * configuration is enabled, false if it is disabled and null if configuration
     * is not set.
     *
     * @param {string} [siteLogsConfig.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteLogsConfig>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateDiagnosticLogsConfigWithHttpOperationResponse(resourceGroupName: string, name: string, siteLogsConfig: models.SiteLogsConfig, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteLogsConfig>>;

    /**
     * @summary Updates the logging configuration of an app.
     *
     * Updates the logging configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} siteLogsConfig A SiteLogsConfig JSON object that contains
     * the logging configuration to change in the "properties" property.
     *
     * @param {object} [siteLogsConfig.applicationLogs] Application logs
     * configuration.
     *
     * @param {object} [siteLogsConfig.applicationLogs.fileSystem] Application logs
     * to file system configuration.
     *
     * @param {string} [siteLogsConfig.applicationLogs.fileSystem.level] Log level.
     * Possible values include: 'Off', 'Verbose', 'Information', 'Warning', 'Error'
     *
     * @param {object} [siteLogsConfig.applicationLogs.azureTableStorage]
     * Application logs to azure table storage configuration.
     *
     * @param {string} [siteLogsConfig.applicationLogs.azureTableStorage.level] Log
     * level. Possible values include: 'Off', 'Verbose', 'Information', 'Warning',
     * 'Error'
     *
     * @param {string} siteLogsConfig.applicationLogs.azureTableStorage.sasUrl SAS
     * URL to an Azure table with add/query/delete permissions.
     *
     * @param {object} [siteLogsConfig.applicationLogs.azureBlobStorage]
     * Application logs to blob storage configuration.
     *
     * @param {string} [siteLogsConfig.applicationLogs.azureBlobStorage.level] Log
     * level. Possible values include: 'Off', 'Verbose', 'Information', 'Warning',
     * 'Error'
     *
     * @param {string} [siteLogsConfig.applicationLogs.azureBlobStorage.sasUrl] SAS
     * url to a azure blob container with read/write/list/delete permissions.
     *
     * @param {number}
     * [siteLogsConfig.applicationLogs.azureBlobStorage.retentionInDays] Retention
     * in days.
     * Remove blobs older than X days.
     * 0 or lower means no retention.
     *
     * @param {object} [siteLogsConfig.httpLogs] HTTP logs configuration.
     *
     * @param {object} [siteLogsConfig.httpLogs.fileSystem] Http logs to file
     * system configuration.
     *
     * @param {number} [siteLogsConfig.httpLogs.fileSystem.retentionInMb] Maximum
     * size in megabytes that http log files can use.
     * When reached old log files will be removed to make space for new ones.
     * Value can range between 25 and 100.
     *
     * @param {number} [siteLogsConfig.httpLogs.fileSystem.retentionInDays]
     * Retention in days.
     * Remove files older than X days.
     * 0 or lower means no retention.
     *
     * @param {boolean} [siteLogsConfig.httpLogs.fileSystem.enabled] True if
     * configuration is enabled, false if it is disabled and null if configuration
     * is not set.
     *
     * @param {object} [siteLogsConfig.httpLogs.azureBlobStorage] Http logs to
     * azure blob storage configuration.
     *
     * @param {string} [siteLogsConfig.httpLogs.azureBlobStorage.sasUrl] SAS url to
     * a azure blob container with read/write/list/delete permissions.
     *
     * @param {number} [siteLogsConfig.httpLogs.azureBlobStorage.retentionInDays]
     * Retention in days.
     * Remove blobs older than X days.
     * 0 or lower means no retention.
     *
     * @param {boolean} [siteLogsConfig.httpLogs.azureBlobStorage.enabled] True if
     * configuration is enabled, false if it is disabled and null if configuration
     * is not set.
     *
     * @param {object} [siteLogsConfig.failedRequestsTracing] Failed requests
     * tracing configuration.
     *
     * @param {object} [siteLogsConfig.detailedErrorMessages] Detailed error
     * messages configuration.
     *
     * @param {boolean} [siteLogsConfig.detailedErrorMessages.enabled] True if
     * configuration is enabled, false if it is disabled and null if configuration
     * is not set.
     *
     * @param {string} [siteLogsConfig.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteLogsConfig} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteLogsConfig} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteLogsConfig} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateDiagnosticLogsConfig(resourceGroupName: string, name: string, siteLogsConfig: models.SiteLogsConfig, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteLogsConfig>;
    updateDiagnosticLogsConfig(resourceGroupName: string, name: string, siteLogsConfig: models.SiteLogsConfig, callback: ServiceCallback<models.SiteLogsConfig>): void;
    updateDiagnosticLogsConfig(resourceGroupName: string, name: string, siteLogsConfig: models.SiteLogsConfig, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteLogsConfig>): void;


    /**
     * @summary Replaces the metadata of an app.
     *
     * Replaces the metadata of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} metadata Edited metadata of the app or deployment slot. See
     * example.
     *
     * @param {object} [metadata.properties] Settings.
     *
     * @param {string} [metadata.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StringDictionary>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateMetadataWithHttpOperationResponse(resourceGroupName: string, name: string, metadata: models.StringDictionary, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StringDictionary>>;

    /**
     * @summary Replaces the metadata of an app.
     *
     * Replaces the metadata of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} metadata Edited metadata of the app or deployment slot. See
     * example.
     *
     * @param {object} [metadata.properties] Settings.
     *
     * @param {string} [metadata.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StringDictionary} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StringDictionary} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StringDictionary} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateMetadata(resourceGroupName: string, name: string, metadata: models.StringDictionary, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StringDictionary>;
    updateMetadata(resourceGroupName: string, name: string, metadata: models.StringDictionary, callback: ServiceCallback<models.StringDictionary>): void;
    updateMetadata(resourceGroupName: string, name: string, metadata: models.StringDictionary, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StringDictionary>): void;


    /**
     * @summary Gets the metadata of an app.
     *
     * Gets the metadata of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StringDictionary>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetadataWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StringDictionary>>;

    /**
     * @summary Gets the metadata of an app.
     *
     * Gets the metadata of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StringDictionary} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StringDictionary} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StringDictionary} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetadata(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StringDictionary>;
    listMetadata(resourceGroupName: string, name: string, callback: ServiceCallback<models.StringDictionary>): void;
    listMetadata(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StringDictionary>): void;


    /**
     * @summary Gets the Git/FTP publishing credentials of an app.
     *
     * Gets the Git/FTP publishing credentials of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<User>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listPublishingCredentialsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.User>>;

    /**
     * @summary Gets the Git/FTP publishing credentials of an app.
     *
     * Gets the Git/FTP publishing credentials of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {User} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {User} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link User} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listPublishingCredentials(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.User>;
    listPublishingCredentials(resourceGroupName: string, name: string, callback: ServiceCallback<models.User>): void;
    listPublishingCredentials(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.User>): void;


    /**
     * @summary Updates the Push settings associated with web app.
     *
     * Updates the Push settings associated with web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} pushSettings Push settings associated with web app.
     *
     * @param {boolean} pushSettings.isPushEnabled Gets or sets a flag indicating
     * whether the Push endpoint is enabled.
     *
     * @param {string} [pushSettings.tagWhitelistJson] Gets or sets a JSON string
     * containing a list of tags that are whitelisted for use by the push
     * registration endpoint.
     *
     * @param {string} [pushSettings.tagsRequiringAuth] Gets or sets a JSON string
     * containing a list of tags that require user authentication to be used in the
     * push registration endpoint.
     * Tags can consist of alphanumeric characters and the following:
     * '_', '@', '#', '.', ':', '-'.
     * Validation should be performed at the PushRequestHandler.
     *
     * @param {string} [pushSettings.dynamicTagsJson] Gets or sets a JSON string
     * containing a list of dynamic tags that will be evaluated from user claims in
     * the push registration endpoint.
     *
     * @param {string} [pushSettings.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PushSettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateSitePushSettingsWithHttpOperationResponse(resourceGroupName: string, name: string, pushSettings: models.PushSettings, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PushSettings>>;

    /**
     * @summary Updates the Push settings associated with web app.
     *
     * Updates the Push settings associated with web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} pushSettings Push settings associated with web app.
     *
     * @param {boolean} pushSettings.isPushEnabled Gets or sets a flag indicating
     * whether the Push endpoint is enabled.
     *
     * @param {string} [pushSettings.tagWhitelistJson] Gets or sets a JSON string
     * containing a list of tags that are whitelisted for use by the push
     * registration endpoint.
     *
     * @param {string} [pushSettings.tagsRequiringAuth] Gets or sets a JSON string
     * containing a list of tags that require user authentication to be used in the
     * push registration endpoint.
     * Tags can consist of alphanumeric characters and the following:
     * '_', '@', '#', '.', ':', '-'.
     * Validation should be performed at the PushRequestHandler.
     *
     * @param {string} [pushSettings.dynamicTagsJson] Gets or sets a JSON string
     * containing a list of dynamic tags that will be evaluated from user claims in
     * the push registration endpoint.
     *
     * @param {string} [pushSettings.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PushSettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PushSettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PushSettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateSitePushSettings(resourceGroupName: string, name: string, pushSettings: models.PushSettings, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PushSettings>;
    updateSitePushSettings(resourceGroupName: string, name: string, pushSettings: models.PushSettings, callback: ServiceCallback<models.PushSettings>): void;
    updateSitePushSettings(resourceGroupName: string, name: string, pushSettings: models.PushSettings, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PushSettings>): void;


    /**
     * @summary Gets the Push settings associated with web app.
     *
     * Gets the Push settings associated with web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PushSettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSitePushSettingsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PushSettings>>;

    /**
     * @summary Gets the Push settings associated with web app.
     *
     * Gets the Push settings associated with web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PushSettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PushSettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PushSettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSitePushSettings(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PushSettings>;
    listSitePushSettings(resourceGroupName: string, name: string, callback: ServiceCallback<models.PushSettings>): void;
    listSitePushSettings(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PushSettings>): void;


    /**
     * @summary Gets the names of app settings and connection strings that stick to
     * the slot (not swapped).
     *
     * Gets the names of app settings and connection strings that stick to the slot
     * (not swapped).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SlotConfigNamesResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSlotConfigurationNamesWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SlotConfigNamesResource>>;

    /**
     * @summary Gets the names of app settings and connection strings that stick to
     * the slot (not swapped).
     *
     * Gets the names of app settings and connection strings that stick to the slot
     * (not swapped).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SlotConfigNamesResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SlotConfigNamesResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SlotConfigNamesResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSlotConfigurationNames(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SlotConfigNamesResource>;
    listSlotConfigurationNames(resourceGroupName: string, name: string, callback: ServiceCallback<models.SlotConfigNamesResource>): void;
    listSlotConfigurationNames(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SlotConfigNamesResource>): void;


    /**
     * @summary Updates the names of application settings and connection string
     * that remain with the slot during swap operation.
     *
     * Updates the names of application settings and connection string that remain
     * with the slot during swap operation.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} slotConfigNames Names of application settings and connection
     * strings. See example.
     *
     * @param {array} [slotConfigNames.connectionStringNames] List of connection
     * string names.
     *
     * @param {array} [slotConfigNames.appSettingNames] List of application
     * settings names.
     *
     * @param {array} [slotConfigNames.azureStorageConfigNames] List of external
     * Azure storage account identifiers.
     *
     * @param {string} [slotConfigNames.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SlotConfigNamesResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateSlotConfigurationNamesWithHttpOperationResponse(resourceGroupName: string, name: string, slotConfigNames: models.SlotConfigNamesResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SlotConfigNamesResource>>;

    /**
     * @summary Updates the names of application settings and connection string
     * that remain with the slot during swap operation.
     *
     * Updates the names of application settings and connection string that remain
     * with the slot during swap operation.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} slotConfigNames Names of application settings and connection
     * strings. See example.
     *
     * @param {array} [slotConfigNames.connectionStringNames] List of connection
     * string names.
     *
     * @param {array} [slotConfigNames.appSettingNames] List of application
     * settings names.
     *
     * @param {array} [slotConfigNames.azureStorageConfigNames] List of external
     * Azure storage account identifiers.
     *
     * @param {string} [slotConfigNames.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SlotConfigNamesResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SlotConfigNamesResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SlotConfigNamesResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateSlotConfigurationNames(resourceGroupName: string, name: string, slotConfigNames: models.SlotConfigNamesResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SlotConfigNamesResource>;
    updateSlotConfigurationNames(resourceGroupName: string, name: string, slotConfigNames: models.SlotConfigNamesResource, callback: ServiceCallback<models.SlotConfigNamesResource>): void;
    updateSlotConfigurationNames(resourceGroupName: string, name: string, slotConfigNames: models.SlotConfigNamesResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SlotConfigNamesResource>): void;


    /**
     * @summary Gets a Swift Virtual Network connection.
     *
     * Gets a Swift Virtual Network connection.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SwiftVirtualNetwork>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSwiftVirtualNetworkConnectionWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SwiftVirtualNetwork>>;

    /**
     * @summary Gets a Swift Virtual Network connection.
     *
     * Gets a Swift Virtual Network connection.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SwiftVirtualNetwork} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SwiftVirtualNetwork} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SwiftVirtualNetwork} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSwiftVirtualNetworkConnection(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SwiftVirtualNetwork>;
    getSwiftVirtualNetworkConnection(resourceGroupName: string, name: string, callback: ServiceCallback<models.SwiftVirtualNetwork>): void;
    getSwiftVirtualNetworkConnection(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SwiftVirtualNetwork>): void;


    /**
     * @summary Integrates this Web App with a Virtual Network. This requires that
     * 1) "swiftSupported" is true when doing a GET against this resource, and 2)
     * that the target Subnet has already been delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     *
     * Integrates this Web App with a Virtual Network. This requires that 1)
     * "swiftSupported" is true when doing a GET against this resource, and 2) that
     * the target Subnet has already been delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} connectionEnvelope Properties of the Virtual Network
     * connection. See example.
     *
     * @param {string} [connectionEnvelope.subnetResourceId] The Virtual Network
     * subnet's resource ID. This is the subnet that this Web App will join. This
     * subnet must have a delegation to Microsoft.Web/serverFarms defined first.
     *
     * @param {boolean} [connectionEnvelope.swiftSupported] A flag that specifies
     * if the scale unit this Web App is on supports Swift integration.
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SwiftVirtualNetwork>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateSwiftVirtualNetworkConnectionWithHttpOperationResponse(resourceGroupName: string, name: string, connectionEnvelope: models.SwiftVirtualNetwork, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SwiftVirtualNetwork>>;

    /**
     * @summary Integrates this Web App with a Virtual Network. This requires that
     * 1) "swiftSupported" is true when doing a GET against this resource, and 2)
     * that the target Subnet has already been delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     *
     * Integrates this Web App with a Virtual Network. This requires that 1)
     * "swiftSupported" is true when doing a GET against this resource, and 2) that
     * the target Subnet has already been delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} connectionEnvelope Properties of the Virtual Network
     * connection. See example.
     *
     * @param {string} [connectionEnvelope.subnetResourceId] The Virtual Network
     * subnet's resource ID. This is the subnet that this Web App will join. This
     * subnet must have a delegation to Microsoft.Web/serverFarms defined first.
     *
     * @param {boolean} [connectionEnvelope.swiftSupported] A flag that specifies
     * if the scale unit this Web App is on supports Swift integration.
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SwiftVirtualNetwork} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SwiftVirtualNetwork} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SwiftVirtualNetwork} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateSwiftVirtualNetworkConnection(resourceGroupName: string, name: string, connectionEnvelope: models.SwiftVirtualNetwork, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SwiftVirtualNetwork>;
    createOrUpdateSwiftVirtualNetworkConnection(resourceGroupName: string, name: string, connectionEnvelope: models.SwiftVirtualNetwork, callback: ServiceCallback<models.SwiftVirtualNetwork>): void;
    createOrUpdateSwiftVirtualNetworkConnection(resourceGroupName: string, name: string, connectionEnvelope: models.SwiftVirtualNetwork, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SwiftVirtualNetwork>): void;


    /**
     * @summary Deletes a Swift Virtual Network connection from an app (or
     * deployment slot).
     *
     * Deletes a Swift Virtual Network connection from an app (or deployment slot).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteSwiftVirtualNetworkWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a Swift Virtual Network connection from an app (or
     * deployment slot).
     *
     * Deletes a Swift Virtual Network connection from an app (or deployment slot).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteSwiftVirtualNetwork(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteSwiftVirtualNetwork(resourceGroupName: string, name: string, callback: ServiceCallback<void>): void;
    deleteSwiftVirtualNetwork(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Integrates this Web App with a Virtual Network. This requires that
     * 1) "swiftSupported" is true when doing a GET against this resource, and 2)
     * that the target Subnet has already been delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     *
     * Integrates this Web App with a Virtual Network. This requires that 1)
     * "swiftSupported" is true when doing a GET against this resource, and 2) that
     * the target Subnet has already been delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} connectionEnvelope Properties of the Virtual Network
     * connection. See example.
     *
     * @param {string} [connectionEnvelope.subnetResourceId] The Virtual Network
     * subnet's resource ID. This is the subnet that this Web App will join. This
     * subnet must have a delegation to Microsoft.Web/serverFarms defined first.
     *
     * @param {boolean} [connectionEnvelope.swiftSupported] A flag that specifies
     * if the scale unit this Web App is on supports Swift integration.
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SwiftVirtualNetwork>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateSwiftVirtualNetworkConnectionWithHttpOperationResponse(resourceGroupName: string, name: string, connectionEnvelope: models.SwiftVirtualNetwork, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SwiftVirtualNetwork>>;

    /**
     * @summary Integrates this Web App with a Virtual Network. This requires that
     * 1) "swiftSupported" is true when doing a GET against this resource, and 2)
     * that the target Subnet has already been delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     *
     * Integrates this Web App with a Virtual Network. This requires that 1)
     * "swiftSupported" is true when doing a GET against this resource, and 2) that
     * the target Subnet has already been delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} connectionEnvelope Properties of the Virtual Network
     * connection. See example.
     *
     * @param {string} [connectionEnvelope.subnetResourceId] The Virtual Network
     * subnet's resource ID. This is the subnet that this Web App will join. This
     * subnet must have a delegation to Microsoft.Web/serverFarms defined first.
     *
     * @param {boolean} [connectionEnvelope.swiftSupported] A flag that specifies
     * if the scale unit this Web App is on supports Swift integration.
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SwiftVirtualNetwork} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SwiftVirtualNetwork} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SwiftVirtualNetwork} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateSwiftVirtualNetworkConnection(resourceGroupName: string, name: string, connectionEnvelope: models.SwiftVirtualNetwork, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SwiftVirtualNetwork>;
    updateSwiftVirtualNetworkConnection(resourceGroupName: string, name: string, connectionEnvelope: models.SwiftVirtualNetwork, callback: ServiceCallback<models.SwiftVirtualNetwork>): void;
    updateSwiftVirtualNetworkConnection(resourceGroupName: string, name: string, connectionEnvelope: models.SwiftVirtualNetwork, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SwiftVirtualNetwork>): void;


    /**
     * @summary Gets the configuration of an app, such as platform version and
     * bitness, default documents, virtual applications, Always On, etc.
     *
     * Gets the configuration of an app, such as platform version and bitness,
     * default documents, virtual applications, Always On, etc.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteConfigResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getConfigurationWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteConfigResource>>;

    /**
     * @summary Gets the configuration of an app, such as platform version and
     * bitness, default documents, virtual applications, Always On, etc.
     *
     * Gets the configuration of an app, such as platform version and bitness,
     * default documents, virtual applications, Always On, etc.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteConfigResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteConfigResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteConfigResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getConfiguration(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteConfigResource>;
    getConfiguration(resourceGroupName: string, name: string, callback: ServiceCallback<models.SiteConfigResource>): void;
    getConfiguration(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteConfigResource>): void;


    /**
     * @summary Updates the configuration of an app.
     *
     * Updates the configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} siteConfig JSON representation of a SiteConfig object. See
     * example.
     *
     * @param {number} [siteConfig.numberOfWorkers] Number of workers.
     *
     * @param {array} [siteConfig.defaultDocuments] Default documents.
     *
     * @param {string} [siteConfig.netFrameworkVersion] .NET Framework version.
     *
     * @param {string} [siteConfig.phpVersion] Version of PHP.
     *
     * @param {string} [siteConfig.pythonVersion] Version of Python.
     *
     * @param {string} [siteConfig.nodeVersion] Version of Node.js.
     *
     * @param {string} [siteConfig.linuxFxVersion] Linux App Framework and version
     *
     * @param {string} [siteConfig.windowsFxVersion] Xenon App Framework and
     * version
     *
     * @param {boolean} [siteConfig.requestTracingEnabled] <code>true</code> if
     * request tracing is enabled; otherwise, <code>false</code>.
     *
     * @param {date} [siteConfig.requestTracingExpirationTime] Request tracing
     * expiration time.
     *
     * @param {boolean} [siteConfig.remoteDebuggingEnabled] <code>true</code> if
     * remote debugging is enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteConfig.remoteDebuggingVersion] Remote debugging
     * version.
     *
     * @param {boolean} [siteConfig.httpLoggingEnabled] <code>true</code> if HTTP
     * logging is enabled; otherwise, <code>false</code>.
     *
     * @param {number} [siteConfig.logsDirectorySizeLimit] HTTP logs directory size
     * limit.
     *
     * @param {boolean} [siteConfig.detailedErrorLoggingEnabled] <code>true</code>
     * if detailed error logging is enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteConfig.publishingUsername] Publishing user name.
     *
     * @param {array} [siteConfig.appSettings] Application settings.
     *
     * @param {object} [siteConfig.azureStorageAccounts] User-provided Azure
     * storage accounts.
     *
     * @param {array} [siteConfig.connectionStrings] Connection strings.
     *
     * @param {array} [siteConfig.handlerMappings] Handler mappings.
     *
     * @param {string} [siteConfig.documentRoot] Document root.
     *
     * @param {string} [siteConfig.scmType] SCM type. Possible values include:
     * 'None', 'Dropbox', 'Tfs', 'LocalGit', 'GitHub', 'CodePlexGit', 'CodePlexHg',
     * 'BitbucketGit', 'BitbucketHg', 'ExternalGit', 'ExternalHg', 'OneDrive',
     * 'VSO'
     *
     * @param {boolean} [siteConfig.use32BitWorkerProcess] <code>true</code> to use
     * 32-bit worker process; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteConfig.webSocketsEnabled] <code>true</code> if
     * WebSocket is enabled; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteConfig.alwaysOn] <code>true</code> if Always On is
     * enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteConfig.javaVersion] Java version.
     *
     * @param {string} [siteConfig.javaContainer] Java container.
     *
     * @param {string} [siteConfig.javaContainerVersion] Java container version.
     *
     * @param {string} [siteConfig.appCommandLine] App command line to launch.
     *
     * @param {string} [siteConfig.managedPipelineMode] Managed pipeline mode.
     * Possible values include: 'Integrated', 'Classic'
     *
     * @param {array} [siteConfig.virtualApplications] Virtual applications.
     *
     * @param {string} [siteConfig.loadBalancing] Site load balancing. Possible
     * values include: 'WeightedRoundRobin', 'LeastRequests', 'LeastResponseTime',
     * 'WeightedTotalTraffic', 'RequestHash'
     *
     * @param {object} [siteConfig.experiments] This is work around for polymophic
     * types.
     *
     * @param {array} [siteConfig.experiments.rampUpRules] List of ramp-up rules.
     *
     * @param {object} [siteConfig.limits] Site limits.
     *
     * @param {number} [siteConfig.limits.maxPercentageCpu] Maximum allowed CPU
     * usage percentage.
     *
     * @param {number} [siteConfig.limits.maxMemoryInMb] Maximum allowed memory
     * usage in MB.
     *
     * @param {number} [siteConfig.limits.maxDiskSizeInMb] Maximum allowed disk
     * size usage in MB.
     *
     * @param {boolean} [siteConfig.autoHealEnabled] <code>true</code> if Auto Heal
     * is enabled; otherwise, <code>false</code>.
     *
     * @param {object} [siteConfig.autoHealRules] Auto Heal rules.
     *
     * @param {object} [siteConfig.autoHealRules.triggers] Conditions that describe
     * when to execute the auto-heal actions.
     *
     * @param {object} [siteConfig.autoHealRules.triggers.requests] A rule based on
     * total requests.
     *
     * @param {number} [siteConfig.autoHealRules.triggers.requests.count] Request
     * Count.
     *
     * @param {string} [siteConfig.autoHealRules.triggers.requests.timeInterval]
     * Time interval.
     *
     * @param {number} [siteConfig.autoHealRules.triggers.privateBytesInKB] A rule
     * based on private bytes.
     *
     * @param {array} [siteConfig.autoHealRules.triggers.statusCodes] A rule based
     * on status codes.
     *
     * @param {object} [siteConfig.autoHealRules.triggers.slowRequests] A rule
     * based on request execution time.
     *
     * @param {string} [siteConfig.autoHealRules.triggers.slowRequests.timeTaken]
     * Time taken.
     *
     * @param {number} [siteConfig.autoHealRules.triggers.slowRequests.count]
     * Request Count.
     *
     * @param {string}
     * [siteConfig.autoHealRules.triggers.slowRequests.timeInterval] Time interval.
     *
     * @param {object} [siteConfig.autoHealRules.actions] Actions to be executed
     * when a rule is triggered.
     *
     * @param {string} [siteConfig.autoHealRules.actions.actionType] Predefined
     * action to be taken. Possible values include: 'Recycle', 'LogEvent',
     * 'CustomAction'
     *
     * @param {object} [siteConfig.autoHealRules.actions.customAction] Custom
     * action to be taken.
     *
     * @param {string} [siteConfig.autoHealRules.actions.customAction.exe]
     * Executable to be run.
     *
     * @param {string} [siteConfig.autoHealRules.actions.customAction.parameters]
     * Parameters for the executable.
     *
     * @param {string} [siteConfig.autoHealRules.actions.minProcessExecutionTime]
     * Minimum time the process must execute
     * before taking the action
     *
     * @param {string} [siteConfig.tracingOptions] Tracing options.
     *
     * @param {string} [siteConfig.vnetName] Virtual Network name.
     *
     * @param {object} [siteConfig.cors] Cross-Origin Resource Sharing (CORS)
     * settings.
     *
     * @param {array} [siteConfig.cors.allowedOrigins] Gets or sets the list of
     * origins that should be allowed to make cross-origin
     * calls (for example: http://example.com:12345). Use "*" to allow all.
     *
     * @param {object} [siteConfig.push] Push endpoint settings.
     *
     * @param {boolean} siteConfig.push.isPushEnabled Gets or sets a flag
     * indicating whether the Push endpoint is enabled.
     *
     * @param {string} [siteConfig.push.tagWhitelistJson] Gets or sets a JSON
     * string containing a list of tags that are whitelisted for use by the push
     * registration endpoint.
     *
     * @param {string} [siteConfig.push.tagsRequiringAuth] Gets or sets a JSON
     * string containing a list of tags that require user authentication to be used
     * in the push registration endpoint.
     * Tags can consist of alphanumeric characters and the following:
     * '_', '@', '#', '.', ':', '-'.
     * Validation should be performed at the PushRequestHandler.
     *
     * @param {string} [siteConfig.push.dynamicTagsJson] Gets or sets a JSON string
     * containing a list of dynamic tags that will be evaluated from user claims in
     * the push registration endpoint.
     *
     * @param {string} [siteConfig.push.kind] Kind of resource.
     *
     * @param {object} [siteConfig.apiDefinition] Information about the formal API
     * definition for the app.
     *
     * @param {string} [siteConfig.apiDefinition.url] The URL of the API
     * definition.
     *
     * @param {string} [siteConfig.autoSwapSlotName] Auto-swap slot name.
     *
     * @param {boolean} [siteConfig.localMySqlEnabled] <code>true</code> to enable
     * local MySQL; otherwise, <code>false</code>.
     *
     * @param {number} [siteConfig.managedServiceIdentityId] Managed Service
     * Identity Id
     *
     * @param {number} [siteConfig.xManagedServiceIdentityId] Explicit Managed
     * Service Identity Id
     *
     * @param {array} [siteConfig.ipSecurityRestrictions] IP security restrictions.
     *
     * @param {boolean} [siteConfig.http20Enabled] Http20Enabled: configures a web
     * site to allow clients to connect over http2.0
     *
     * @param {string} [siteConfig.minTlsVersion] MinTlsVersion: configures the
     * minimum version of TLS required for SSL requests. Possible values include:
     * '1.0', '1.1', '1.2'
     *
     * @param {string} [siteConfig.ftpsState] State of FTP / FTPS service. Possible
     * values include: 'AllAllowed', 'FtpsOnly', 'Disabled'
     *
     * @param {number} [siteConfig.reservedInstanceCount] Number of reserved
     * instances.
     * This setting only applies to the Consumption Plan
     *
     * @param {string} [siteConfig.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteConfigResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateConfigurationWithHttpOperationResponse(resourceGroupName: string, name: string, siteConfig: models.SiteConfigResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteConfigResource>>;

    /**
     * @summary Updates the configuration of an app.
     *
     * Updates the configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} siteConfig JSON representation of a SiteConfig object. See
     * example.
     *
     * @param {number} [siteConfig.numberOfWorkers] Number of workers.
     *
     * @param {array} [siteConfig.defaultDocuments] Default documents.
     *
     * @param {string} [siteConfig.netFrameworkVersion] .NET Framework version.
     *
     * @param {string} [siteConfig.phpVersion] Version of PHP.
     *
     * @param {string} [siteConfig.pythonVersion] Version of Python.
     *
     * @param {string} [siteConfig.nodeVersion] Version of Node.js.
     *
     * @param {string} [siteConfig.linuxFxVersion] Linux App Framework and version
     *
     * @param {string} [siteConfig.windowsFxVersion] Xenon App Framework and
     * version
     *
     * @param {boolean} [siteConfig.requestTracingEnabled] <code>true</code> if
     * request tracing is enabled; otherwise, <code>false</code>.
     *
     * @param {date} [siteConfig.requestTracingExpirationTime] Request tracing
     * expiration time.
     *
     * @param {boolean} [siteConfig.remoteDebuggingEnabled] <code>true</code> if
     * remote debugging is enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteConfig.remoteDebuggingVersion] Remote debugging
     * version.
     *
     * @param {boolean} [siteConfig.httpLoggingEnabled] <code>true</code> if HTTP
     * logging is enabled; otherwise, <code>false</code>.
     *
     * @param {number} [siteConfig.logsDirectorySizeLimit] HTTP logs directory size
     * limit.
     *
     * @param {boolean} [siteConfig.detailedErrorLoggingEnabled] <code>true</code>
     * if detailed error logging is enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteConfig.publishingUsername] Publishing user name.
     *
     * @param {array} [siteConfig.appSettings] Application settings.
     *
     * @param {object} [siteConfig.azureStorageAccounts] User-provided Azure
     * storage accounts.
     *
     * @param {array} [siteConfig.connectionStrings] Connection strings.
     *
     * @param {array} [siteConfig.handlerMappings] Handler mappings.
     *
     * @param {string} [siteConfig.documentRoot] Document root.
     *
     * @param {string} [siteConfig.scmType] SCM type. Possible values include:
     * 'None', 'Dropbox', 'Tfs', 'LocalGit', 'GitHub', 'CodePlexGit', 'CodePlexHg',
     * 'BitbucketGit', 'BitbucketHg', 'ExternalGit', 'ExternalHg', 'OneDrive',
     * 'VSO'
     *
     * @param {boolean} [siteConfig.use32BitWorkerProcess] <code>true</code> to use
     * 32-bit worker process; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteConfig.webSocketsEnabled] <code>true</code> if
     * WebSocket is enabled; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteConfig.alwaysOn] <code>true</code> if Always On is
     * enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteConfig.javaVersion] Java version.
     *
     * @param {string} [siteConfig.javaContainer] Java container.
     *
     * @param {string} [siteConfig.javaContainerVersion] Java container version.
     *
     * @param {string} [siteConfig.appCommandLine] App command line to launch.
     *
     * @param {string} [siteConfig.managedPipelineMode] Managed pipeline mode.
     * Possible values include: 'Integrated', 'Classic'
     *
     * @param {array} [siteConfig.virtualApplications] Virtual applications.
     *
     * @param {string} [siteConfig.loadBalancing] Site load balancing. Possible
     * values include: 'WeightedRoundRobin', 'LeastRequests', 'LeastResponseTime',
     * 'WeightedTotalTraffic', 'RequestHash'
     *
     * @param {object} [siteConfig.experiments] This is work around for polymophic
     * types.
     *
     * @param {array} [siteConfig.experiments.rampUpRules] List of ramp-up rules.
     *
     * @param {object} [siteConfig.limits] Site limits.
     *
     * @param {number} [siteConfig.limits.maxPercentageCpu] Maximum allowed CPU
     * usage percentage.
     *
     * @param {number} [siteConfig.limits.maxMemoryInMb] Maximum allowed memory
     * usage in MB.
     *
     * @param {number} [siteConfig.limits.maxDiskSizeInMb] Maximum allowed disk
     * size usage in MB.
     *
     * @param {boolean} [siteConfig.autoHealEnabled] <code>true</code> if Auto Heal
     * is enabled; otherwise, <code>false</code>.
     *
     * @param {object} [siteConfig.autoHealRules] Auto Heal rules.
     *
     * @param {object} [siteConfig.autoHealRules.triggers] Conditions that describe
     * when to execute the auto-heal actions.
     *
     * @param {object} [siteConfig.autoHealRules.triggers.requests] A rule based on
     * total requests.
     *
     * @param {number} [siteConfig.autoHealRules.triggers.requests.count] Request
     * Count.
     *
     * @param {string} [siteConfig.autoHealRules.triggers.requests.timeInterval]
     * Time interval.
     *
     * @param {number} [siteConfig.autoHealRules.triggers.privateBytesInKB] A rule
     * based on private bytes.
     *
     * @param {array} [siteConfig.autoHealRules.triggers.statusCodes] A rule based
     * on status codes.
     *
     * @param {object} [siteConfig.autoHealRules.triggers.slowRequests] A rule
     * based on request execution time.
     *
     * @param {string} [siteConfig.autoHealRules.triggers.slowRequests.timeTaken]
     * Time taken.
     *
     * @param {number} [siteConfig.autoHealRules.triggers.slowRequests.count]
     * Request Count.
     *
     * @param {string}
     * [siteConfig.autoHealRules.triggers.slowRequests.timeInterval] Time interval.
     *
     * @param {object} [siteConfig.autoHealRules.actions] Actions to be executed
     * when a rule is triggered.
     *
     * @param {string} [siteConfig.autoHealRules.actions.actionType] Predefined
     * action to be taken. Possible values include: 'Recycle', 'LogEvent',
     * 'CustomAction'
     *
     * @param {object} [siteConfig.autoHealRules.actions.customAction] Custom
     * action to be taken.
     *
     * @param {string} [siteConfig.autoHealRules.actions.customAction.exe]
     * Executable to be run.
     *
     * @param {string} [siteConfig.autoHealRules.actions.customAction.parameters]
     * Parameters for the executable.
     *
     * @param {string} [siteConfig.autoHealRules.actions.minProcessExecutionTime]
     * Minimum time the process must execute
     * before taking the action
     *
     * @param {string} [siteConfig.tracingOptions] Tracing options.
     *
     * @param {string} [siteConfig.vnetName] Virtual Network name.
     *
     * @param {object} [siteConfig.cors] Cross-Origin Resource Sharing (CORS)
     * settings.
     *
     * @param {array} [siteConfig.cors.allowedOrigins] Gets or sets the list of
     * origins that should be allowed to make cross-origin
     * calls (for example: http://example.com:12345). Use "*" to allow all.
     *
     * @param {object} [siteConfig.push] Push endpoint settings.
     *
     * @param {boolean} siteConfig.push.isPushEnabled Gets or sets a flag
     * indicating whether the Push endpoint is enabled.
     *
     * @param {string} [siteConfig.push.tagWhitelistJson] Gets or sets a JSON
     * string containing a list of tags that are whitelisted for use by the push
     * registration endpoint.
     *
     * @param {string} [siteConfig.push.tagsRequiringAuth] Gets or sets a JSON
     * string containing a list of tags that require user authentication to be used
     * in the push registration endpoint.
     * Tags can consist of alphanumeric characters and the following:
     * '_', '@', '#', '.', ':', '-'.
     * Validation should be performed at the PushRequestHandler.
     *
     * @param {string} [siteConfig.push.dynamicTagsJson] Gets or sets a JSON string
     * containing a list of dynamic tags that will be evaluated from user claims in
     * the push registration endpoint.
     *
     * @param {string} [siteConfig.push.kind] Kind of resource.
     *
     * @param {object} [siteConfig.apiDefinition] Information about the formal API
     * definition for the app.
     *
     * @param {string} [siteConfig.apiDefinition.url] The URL of the API
     * definition.
     *
     * @param {string} [siteConfig.autoSwapSlotName] Auto-swap slot name.
     *
     * @param {boolean} [siteConfig.localMySqlEnabled] <code>true</code> to enable
     * local MySQL; otherwise, <code>false</code>.
     *
     * @param {number} [siteConfig.managedServiceIdentityId] Managed Service
     * Identity Id
     *
     * @param {number} [siteConfig.xManagedServiceIdentityId] Explicit Managed
     * Service Identity Id
     *
     * @param {array} [siteConfig.ipSecurityRestrictions] IP security restrictions.
     *
     * @param {boolean} [siteConfig.http20Enabled] Http20Enabled: configures a web
     * site to allow clients to connect over http2.0
     *
     * @param {string} [siteConfig.minTlsVersion] MinTlsVersion: configures the
     * minimum version of TLS required for SSL requests. Possible values include:
     * '1.0', '1.1', '1.2'
     *
     * @param {string} [siteConfig.ftpsState] State of FTP / FTPS service. Possible
     * values include: 'AllAllowed', 'FtpsOnly', 'Disabled'
     *
     * @param {number} [siteConfig.reservedInstanceCount] Number of reserved
     * instances.
     * This setting only applies to the Consumption Plan
     *
     * @param {string} [siteConfig.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteConfigResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteConfigResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteConfigResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateConfiguration(resourceGroupName: string, name: string, siteConfig: models.SiteConfigResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteConfigResource>;
    createOrUpdateConfiguration(resourceGroupName: string, name: string, siteConfig: models.SiteConfigResource, callback: ServiceCallback<models.SiteConfigResource>): void;
    createOrUpdateConfiguration(resourceGroupName: string, name: string, siteConfig: models.SiteConfigResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteConfigResource>): void;


    /**
     * @summary Updates the configuration of an app.
     *
     * Updates the configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} siteConfig JSON representation of a SiteConfig object. See
     * example.
     *
     * @param {number} [siteConfig.numberOfWorkers] Number of workers.
     *
     * @param {array} [siteConfig.defaultDocuments] Default documents.
     *
     * @param {string} [siteConfig.netFrameworkVersion] .NET Framework version.
     *
     * @param {string} [siteConfig.phpVersion] Version of PHP.
     *
     * @param {string} [siteConfig.pythonVersion] Version of Python.
     *
     * @param {string} [siteConfig.nodeVersion] Version of Node.js.
     *
     * @param {string} [siteConfig.linuxFxVersion] Linux App Framework and version
     *
     * @param {string} [siteConfig.windowsFxVersion] Xenon App Framework and
     * version
     *
     * @param {boolean} [siteConfig.requestTracingEnabled] <code>true</code> if
     * request tracing is enabled; otherwise, <code>false</code>.
     *
     * @param {date} [siteConfig.requestTracingExpirationTime] Request tracing
     * expiration time.
     *
     * @param {boolean} [siteConfig.remoteDebuggingEnabled] <code>true</code> if
     * remote debugging is enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteConfig.remoteDebuggingVersion] Remote debugging
     * version.
     *
     * @param {boolean} [siteConfig.httpLoggingEnabled] <code>true</code> if HTTP
     * logging is enabled; otherwise, <code>false</code>.
     *
     * @param {number} [siteConfig.logsDirectorySizeLimit] HTTP logs directory size
     * limit.
     *
     * @param {boolean} [siteConfig.detailedErrorLoggingEnabled] <code>true</code>
     * if detailed error logging is enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteConfig.publishingUsername] Publishing user name.
     *
     * @param {array} [siteConfig.appSettings] Application settings.
     *
     * @param {object} [siteConfig.azureStorageAccounts] User-provided Azure
     * storage accounts.
     *
     * @param {array} [siteConfig.connectionStrings] Connection strings.
     *
     * @param {array} [siteConfig.handlerMappings] Handler mappings.
     *
     * @param {string} [siteConfig.documentRoot] Document root.
     *
     * @param {string} [siteConfig.scmType] SCM type. Possible values include:
     * 'None', 'Dropbox', 'Tfs', 'LocalGit', 'GitHub', 'CodePlexGit', 'CodePlexHg',
     * 'BitbucketGit', 'BitbucketHg', 'ExternalGit', 'ExternalHg', 'OneDrive',
     * 'VSO'
     *
     * @param {boolean} [siteConfig.use32BitWorkerProcess] <code>true</code> to use
     * 32-bit worker process; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteConfig.webSocketsEnabled] <code>true</code> if
     * WebSocket is enabled; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteConfig.alwaysOn] <code>true</code> if Always On is
     * enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteConfig.javaVersion] Java version.
     *
     * @param {string} [siteConfig.javaContainer] Java container.
     *
     * @param {string} [siteConfig.javaContainerVersion] Java container version.
     *
     * @param {string} [siteConfig.appCommandLine] App command line to launch.
     *
     * @param {string} [siteConfig.managedPipelineMode] Managed pipeline mode.
     * Possible values include: 'Integrated', 'Classic'
     *
     * @param {array} [siteConfig.virtualApplications] Virtual applications.
     *
     * @param {string} [siteConfig.loadBalancing] Site load balancing. Possible
     * values include: 'WeightedRoundRobin', 'LeastRequests', 'LeastResponseTime',
     * 'WeightedTotalTraffic', 'RequestHash'
     *
     * @param {object} [siteConfig.experiments] This is work around for polymophic
     * types.
     *
     * @param {array} [siteConfig.experiments.rampUpRules] List of ramp-up rules.
     *
     * @param {object} [siteConfig.limits] Site limits.
     *
     * @param {number} [siteConfig.limits.maxPercentageCpu] Maximum allowed CPU
     * usage percentage.
     *
     * @param {number} [siteConfig.limits.maxMemoryInMb] Maximum allowed memory
     * usage in MB.
     *
     * @param {number} [siteConfig.limits.maxDiskSizeInMb] Maximum allowed disk
     * size usage in MB.
     *
     * @param {boolean} [siteConfig.autoHealEnabled] <code>true</code> if Auto Heal
     * is enabled; otherwise, <code>false</code>.
     *
     * @param {object} [siteConfig.autoHealRules] Auto Heal rules.
     *
     * @param {object} [siteConfig.autoHealRules.triggers] Conditions that describe
     * when to execute the auto-heal actions.
     *
     * @param {object} [siteConfig.autoHealRules.triggers.requests] A rule based on
     * total requests.
     *
     * @param {number} [siteConfig.autoHealRules.triggers.requests.count] Request
     * Count.
     *
     * @param {string} [siteConfig.autoHealRules.triggers.requests.timeInterval]
     * Time interval.
     *
     * @param {number} [siteConfig.autoHealRules.triggers.privateBytesInKB] A rule
     * based on private bytes.
     *
     * @param {array} [siteConfig.autoHealRules.triggers.statusCodes] A rule based
     * on status codes.
     *
     * @param {object} [siteConfig.autoHealRules.triggers.slowRequests] A rule
     * based on request execution time.
     *
     * @param {string} [siteConfig.autoHealRules.triggers.slowRequests.timeTaken]
     * Time taken.
     *
     * @param {number} [siteConfig.autoHealRules.triggers.slowRequests.count]
     * Request Count.
     *
     * @param {string}
     * [siteConfig.autoHealRules.triggers.slowRequests.timeInterval] Time interval.
     *
     * @param {object} [siteConfig.autoHealRules.actions] Actions to be executed
     * when a rule is triggered.
     *
     * @param {string} [siteConfig.autoHealRules.actions.actionType] Predefined
     * action to be taken. Possible values include: 'Recycle', 'LogEvent',
     * 'CustomAction'
     *
     * @param {object} [siteConfig.autoHealRules.actions.customAction] Custom
     * action to be taken.
     *
     * @param {string} [siteConfig.autoHealRules.actions.customAction.exe]
     * Executable to be run.
     *
     * @param {string} [siteConfig.autoHealRules.actions.customAction.parameters]
     * Parameters for the executable.
     *
     * @param {string} [siteConfig.autoHealRules.actions.minProcessExecutionTime]
     * Minimum time the process must execute
     * before taking the action
     *
     * @param {string} [siteConfig.tracingOptions] Tracing options.
     *
     * @param {string} [siteConfig.vnetName] Virtual Network name.
     *
     * @param {object} [siteConfig.cors] Cross-Origin Resource Sharing (CORS)
     * settings.
     *
     * @param {array} [siteConfig.cors.allowedOrigins] Gets or sets the list of
     * origins that should be allowed to make cross-origin
     * calls (for example: http://example.com:12345). Use "*" to allow all.
     *
     * @param {object} [siteConfig.push] Push endpoint settings.
     *
     * @param {boolean} siteConfig.push.isPushEnabled Gets or sets a flag
     * indicating whether the Push endpoint is enabled.
     *
     * @param {string} [siteConfig.push.tagWhitelistJson] Gets or sets a JSON
     * string containing a list of tags that are whitelisted for use by the push
     * registration endpoint.
     *
     * @param {string} [siteConfig.push.tagsRequiringAuth] Gets or sets a JSON
     * string containing a list of tags that require user authentication to be used
     * in the push registration endpoint.
     * Tags can consist of alphanumeric characters and the following:
     * '_', '@', '#', '.', ':', '-'.
     * Validation should be performed at the PushRequestHandler.
     *
     * @param {string} [siteConfig.push.dynamicTagsJson] Gets or sets a JSON string
     * containing a list of dynamic tags that will be evaluated from user claims in
     * the push registration endpoint.
     *
     * @param {string} [siteConfig.push.kind] Kind of resource.
     *
     * @param {object} [siteConfig.apiDefinition] Information about the formal API
     * definition for the app.
     *
     * @param {string} [siteConfig.apiDefinition.url] The URL of the API
     * definition.
     *
     * @param {string} [siteConfig.autoSwapSlotName] Auto-swap slot name.
     *
     * @param {boolean} [siteConfig.localMySqlEnabled] <code>true</code> to enable
     * local MySQL; otherwise, <code>false</code>.
     *
     * @param {number} [siteConfig.managedServiceIdentityId] Managed Service
     * Identity Id
     *
     * @param {number} [siteConfig.xManagedServiceIdentityId] Explicit Managed
     * Service Identity Id
     *
     * @param {array} [siteConfig.ipSecurityRestrictions] IP security restrictions.
     *
     * @param {boolean} [siteConfig.http20Enabled] Http20Enabled: configures a web
     * site to allow clients to connect over http2.0
     *
     * @param {string} [siteConfig.minTlsVersion] MinTlsVersion: configures the
     * minimum version of TLS required for SSL requests. Possible values include:
     * '1.0', '1.1', '1.2'
     *
     * @param {string} [siteConfig.ftpsState] State of FTP / FTPS service. Possible
     * values include: 'AllAllowed', 'FtpsOnly', 'Disabled'
     *
     * @param {number} [siteConfig.reservedInstanceCount] Number of reserved
     * instances.
     * This setting only applies to the Consumption Plan
     *
     * @param {string} [siteConfig.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteConfigResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateConfigurationWithHttpOperationResponse(resourceGroupName: string, name: string, siteConfig: models.SiteConfigResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteConfigResource>>;

    /**
     * @summary Updates the configuration of an app.
     *
     * Updates the configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} siteConfig JSON representation of a SiteConfig object. See
     * example.
     *
     * @param {number} [siteConfig.numberOfWorkers] Number of workers.
     *
     * @param {array} [siteConfig.defaultDocuments] Default documents.
     *
     * @param {string} [siteConfig.netFrameworkVersion] .NET Framework version.
     *
     * @param {string} [siteConfig.phpVersion] Version of PHP.
     *
     * @param {string} [siteConfig.pythonVersion] Version of Python.
     *
     * @param {string} [siteConfig.nodeVersion] Version of Node.js.
     *
     * @param {string} [siteConfig.linuxFxVersion] Linux App Framework and version
     *
     * @param {string} [siteConfig.windowsFxVersion] Xenon App Framework and
     * version
     *
     * @param {boolean} [siteConfig.requestTracingEnabled] <code>true</code> if
     * request tracing is enabled; otherwise, <code>false</code>.
     *
     * @param {date} [siteConfig.requestTracingExpirationTime] Request tracing
     * expiration time.
     *
     * @param {boolean} [siteConfig.remoteDebuggingEnabled] <code>true</code> if
     * remote debugging is enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteConfig.remoteDebuggingVersion] Remote debugging
     * version.
     *
     * @param {boolean} [siteConfig.httpLoggingEnabled] <code>true</code> if HTTP
     * logging is enabled; otherwise, <code>false</code>.
     *
     * @param {number} [siteConfig.logsDirectorySizeLimit] HTTP logs directory size
     * limit.
     *
     * @param {boolean} [siteConfig.detailedErrorLoggingEnabled] <code>true</code>
     * if detailed error logging is enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteConfig.publishingUsername] Publishing user name.
     *
     * @param {array} [siteConfig.appSettings] Application settings.
     *
     * @param {object} [siteConfig.azureStorageAccounts] User-provided Azure
     * storage accounts.
     *
     * @param {array} [siteConfig.connectionStrings] Connection strings.
     *
     * @param {array} [siteConfig.handlerMappings] Handler mappings.
     *
     * @param {string} [siteConfig.documentRoot] Document root.
     *
     * @param {string} [siteConfig.scmType] SCM type. Possible values include:
     * 'None', 'Dropbox', 'Tfs', 'LocalGit', 'GitHub', 'CodePlexGit', 'CodePlexHg',
     * 'BitbucketGit', 'BitbucketHg', 'ExternalGit', 'ExternalHg', 'OneDrive',
     * 'VSO'
     *
     * @param {boolean} [siteConfig.use32BitWorkerProcess] <code>true</code> to use
     * 32-bit worker process; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteConfig.webSocketsEnabled] <code>true</code> if
     * WebSocket is enabled; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteConfig.alwaysOn] <code>true</code> if Always On is
     * enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteConfig.javaVersion] Java version.
     *
     * @param {string} [siteConfig.javaContainer] Java container.
     *
     * @param {string} [siteConfig.javaContainerVersion] Java container version.
     *
     * @param {string} [siteConfig.appCommandLine] App command line to launch.
     *
     * @param {string} [siteConfig.managedPipelineMode] Managed pipeline mode.
     * Possible values include: 'Integrated', 'Classic'
     *
     * @param {array} [siteConfig.virtualApplications] Virtual applications.
     *
     * @param {string} [siteConfig.loadBalancing] Site load balancing. Possible
     * values include: 'WeightedRoundRobin', 'LeastRequests', 'LeastResponseTime',
     * 'WeightedTotalTraffic', 'RequestHash'
     *
     * @param {object} [siteConfig.experiments] This is work around for polymophic
     * types.
     *
     * @param {array} [siteConfig.experiments.rampUpRules] List of ramp-up rules.
     *
     * @param {object} [siteConfig.limits] Site limits.
     *
     * @param {number} [siteConfig.limits.maxPercentageCpu] Maximum allowed CPU
     * usage percentage.
     *
     * @param {number} [siteConfig.limits.maxMemoryInMb] Maximum allowed memory
     * usage in MB.
     *
     * @param {number} [siteConfig.limits.maxDiskSizeInMb] Maximum allowed disk
     * size usage in MB.
     *
     * @param {boolean} [siteConfig.autoHealEnabled] <code>true</code> if Auto Heal
     * is enabled; otherwise, <code>false</code>.
     *
     * @param {object} [siteConfig.autoHealRules] Auto Heal rules.
     *
     * @param {object} [siteConfig.autoHealRules.triggers] Conditions that describe
     * when to execute the auto-heal actions.
     *
     * @param {object} [siteConfig.autoHealRules.triggers.requests] A rule based on
     * total requests.
     *
     * @param {number} [siteConfig.autoHealRules.triggers.requests.count] Request
     * Count.
     *
     * @param {string} [siteConfig.autoHealRules.triggers.requests.timeInterval]
     * Time interval.
     *
     * @param {number} [siteConfig.autoHealRules.triggers.privateBytesInKB] A rule
     * based on private bytes.
     *
     * @param {array} [siteConfig.autoHealRules.triggers.statusCodes] A rule based
     * on status codes.
     *
     * @param {object} [siteConfig.autoHealRules.triggers.slowRequests] A rule
     * based on request execution time.
     *
     * @param {string} [siteConfig.autoHealRules.triggers.slowRequests.timeTaken]
     * Time taken.
     *
     * @param {number} [siteConfig.autoHealRules.triggers.slowRequests.count]
     * Request Count.
     *
     * @param {string}
     * [siteConfig.autoHealRules.triggers.slowRequests.timeInterval] Time interval.
     *
     * @param {object} [siteConfig.autoHealRules.actions] Actions to be executed
     * when a rule is triggered.
     *
     * @param {string} [siteConfig.autoHealRules.actions.actionType] Predefined
     * action to be taken. Possible values include: 'Recycle', 'LogEvent',
     * 'CustomAction'
     *
     * @param {object} [siteConfig.autoHealRules.actions.customAction] Custom
     * action to be taken.
     *
     * @param {string} [siteConfig.autoHealRules.actions.customAction.exe]
     * Executable to be run.
     *
     * @param {string} [siteConfig.autoHealRules.actions.customAction.parameters]
     * Parameters for the executable.
     *
     * @param {string} [siteConfig.autoHealRules.actions.minProcessExecutionTime]
     * Minimum time the process must execute
     * before taking the action
     *
     * @param {string} [siteConfig.tracingOptions] Tracing options.
     *
     * @param {string} [siteConfig.vnetName] Virtual Network name.
     *
     * @param {object} [siteConfig.cors] Cross-Origin Resource Sharing (CORS)
     * settings.
     *
     * @param {array} [siteConfig.cors.allowedOrigins] Gets or sets the list of
     * origins that should be allowed to make cross-origin
     * calls (for example: http://example.com:12345). Use "*" to allow all.
     *
     * @param {object} [siteConfig.push] Push endpoint settings.
     *
     * @param {boolean} siteConfig.push.isPushEnabled Gets or sets a flag
     * indicating whether the Push endpoint is enabled.
     *
     * @param {string} [siteConfig.push.tagWhitelistJson] Gets or sets a JSON
     * string containing a list of tags that are whitelisted for use by the push
     * registration endpoint.
     *
     * @param {string} [siteConfig.push.tagsRequiringAuth] Gets or sets a JSON
     * string containing a list of tags that require user authentication to be used
     * in the push registration endpoint.
     * Tags can consist of alphanumeric characters and the following:
     * '_', '@', '#', '.', ':', '-'.
     * Validation should be performed at the PushRequestHandler.
     *
     * @param {string} [siteConfig.push.dynamicTagsJson] Gets or sets a JSON string
     * containing a list of dynamic tags that will be evaluated from user claims in
     * the push registration endpoint.
     *
     * @param {string} [siteConfig.push.kind] Kind of resource.
     *
     * @param {object} [siteConfig.apiDefinition] Information about the formal API
     * definition for the app.
     *
     * @param {string} [siteConfig.apiDefinition.url] The URL of the API
     * definition.
     *
     * @param {string} [siteConfig.autoSwapSlotName] Auto-swap slot name.
     *
     * @param {boolean} [siteConfig.localMySqlEnabled] <code>true</code> to enable
     * local MySQL; otherwise, <code>false</code>.
     *
     * @param {number} [siteConfig.managedServiceIdentityId] Managed Service
     * Identity Id
     *
     * @param {number} [siteConfig.xManagedServiceIdentityId] Explicit Managed
     * Service Identity Id
     *
     * @param {array} [siteConfig.ipSecurityRestrictions] IP security restrictions.
     *
     * @param {boolean} [siteConfig.http20Enabled] Http20Enabled: configures a web
     * site to allow clients to connect over http2.0
     *
     * @param {string} [siteConfig.minTlsVersion] MinTlsVersion: configures the
     * minimum version of TLS required for SSL requests. Possible values include:
     * '1.0', '1.1', '1.2'
     *
     * @param {string} [siteConfig.ftpsState] State of FTP / FTPS service. Possible
     * values include: 'AllAllowed', 'FtpsOnly', 'Disabled'
     *
     * @param {number} [siteConfig.reservedInstanceCount] Number of reserved
     * instances.
     * This setting only applies to the Consumption Plan
     *
     * @param {string} [siteConfig.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteConfigResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteConfigResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteConfigResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateConfiguration(resourceGroupName: string, name: string, siteConfig: models.SiteConfigResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteConfigResource>;
    updateConfiguration(resourceGroupName: string, name: string, siteConfig: models.SiteConfigResource, callback: ServiceCallback<models.SiteConfigResource>): void;
    updateConfiguration(resourceGroupName: string, name: string, siteConfig: models.SiteConfigResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteConfigResource>): void;


    /**
     * @summary Gets a list of web app configuration snapshots identifiers. Each
     * element of the list contains a timestamp and the ID of the snapshot.
     *
     * Gets a list of web app configuration snapshots identifiers. Each element of
     * the list contains a timestamp and the ID of the snapshot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteConfigurationSnapshotInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listConfigurationSnapshotInfoWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteConfigurationSnapshotInfoCollection>>;

    /**
     * @summary Gets a list of web app configuration snapshots identifiers. Each
     * element of the list contains a timestamp and the ID of the snapshot.
     *
     * Gets a list of web app configuration snapshots identifiers. Each element of
     * the list contains a timestamp and the ID of the snapshot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteConfigurationSnapshotInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteConfigurationSnapshotInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteConfigurationSnapshotInfoCollection} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listConfigurationSnapshotInfo(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteConfigurationSnapshotInfoCollection>;
    listConfigurationSnapshotInfo(resourceGroupName: string, name: string, callback: ServiceCallback<models.SiteConfigurationSnapshotInfoCollection>): void;
    listConfigurationSnapshotInfo(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteConfigurationSnapshotInfoCollection>): void;


    /**
     * @summary Gets a snapshot of the configuration of an app at a previous point
     * in time.
     *
     * Gets a snapshot of the configuration of an app at a previous point in time.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} snapshotId The ID of the snapshot to read.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteConfigResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getConfigurationSnapshotWithHttpOperationResponse(resourceGroupName: string, name: string, snapshotId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteConfigResource>>;

    /**
     * @summary Gets a snapshot of the configuration of an app at a previous point
     * in time.
     *
     * Gets a snapshot of the configuration of an app at a previous point in time.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} snapshotId The ID of the snapshot to read.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteConfigResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteConfigResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteConfigResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getConfigurationSnapshot(resourceGroupName: string, name: string, snapshotId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteConfigResource>;
    getConfigurationSnapshot(resourceGroupName: string, name: string, snapshotId: string, callback: ServiceCallback<models.SiteConfigResource>): void;
    getConfigurationSnapshot(resourceGroupName: string, name: string, snapshotId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteConfigResource>): void;


    /**
     * @summary Reverts the configuration of an app to a previous snapshot.
     *
     * Reverts the configuration of an app to a previous snapshot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} snapshotId The ID of the snapshot to read.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    recoverSiteConfigurationSnapshotWithHttpOperationResponse(resourceGroupName: string, name: string, snapshotId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Reverts the configuration of an app to a previous snapshot.
     *
     * Reverts the configuration of an app to a previous snapshot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} snapshotId The ID of the snapshot to read.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    recoverSiteConfigurationSnapshot(resourceGroupName: string, name: string, snapshotId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    recoverSiteConfigurationSnapshot(resourceGroupName: string, name: string, snapshotId: string, callback: ServiceCallback<void>): void;
    recoverSiteConfigurationSnapshot(resourceGroupName: string, name: string, snapshotId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Gets the last lines of docker logs for the given site
     *
     * Gets the last lines of docker logs for the given site
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWebSiteContainerLogsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<stream.Readable>>;

    /**
     * @summary Gets the last lines of docker logs for the given site
     *
     * Gets the last lines of docker logs for the given site
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getWebSiteContainerLogs(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<stream.Readable>;
    getWebSiteContainerLogs(resourceGroupName: string, name: string, callback: ServiceCallback<stream.Readable>): void;
    getWebSiteContainerLogs(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<stream.Readable>): void;


    /**
     * @summary Gets the ZIP archived docker log files for the given site
     *
     * Gets the ZIP archived docker log files for the given site
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getContainerLogsZipWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<stream.Readable>>;

    /**
     * @summary Gets the ZIP archived docker log files for the given site
     *
     * Gets the ZIP archived docker log files for the given site
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getContainerLogsZip(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<stream.Readable>;
    getContainerLogsZip(resourceGroupName: string, name: string, callback: ServiceCallback<stream.Readable>): void;
    getContainerLogsZip(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<stream.Readable>): void;


    /**
     * @summary List continuous web jobs for an app, or a deployment slot.
     *
     * List continuous web jobs for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ContinuousWebJobCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listContinuousWebJobsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ContinuousWebJobCollection>>;

    /**
     * @summary List continuous web jobs for an app, or a deployment slot.
     *
     * List continuous web jobs for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ContinuousWebJobCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ContinuousWebJobCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ContinuousWebJobCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listContinuousWebJobs(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ContinuousWebJobCollection>;
    listContinuousWebJobs(resourceGroupName: string, name: string, callback: ServiceCallback<models.ContinuousWebJobCollection>): void;
    listContinuousWebJobs(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ContinuousWebJobCollection>): void;


    /**
     * @summary Gets a continuous web job by its ID for an app, or a deployment
     * slot.
     *
     * Gets a continuous web job by its ID for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ContinuousWebJob>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getContinuousWebJobWithHttpOperationResponse(resourceGroupName: string, name: string, webJobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ContinuousWebJob>>;

    /**
     * @summary Gets a continuous web job by its ID for an app, or a deployment
     * slot.
     *
     * Gets a continuous web job by its ID for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ContinuousWebJob} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ContinuousWebJob} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ContinuousWebJob} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ContinuousWebJob>;
    getContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, callback: ServiceCallback<models.ContinuousWebJob>): void;
    getContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ContinuousWebJob>): void;


    /**
     * @summary Delete a continuous web job by its ID for an app, or a deployment
     * slot.
     *
     * Delete a continuous web job by its ID for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteContinuousWebJobWithHttpOperationResponse(resourceGroupName: string, name: string, webJobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete a continuous web job by its ID for an app, or a deployment
     * slot.
     *
     * Delete a continuous web job by its ID for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, callback: ServiceCallback<void>): void;
    deleteContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Start a continuous web job for an app, or a deployment slot.
     *
     * Start a continuous web job for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    startContinuousWebJobWithHttpOperationResponse(resourceGroupName: string, name: string, webJobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Start a continuous web job for an app, or a deployment slot.
     *
     * Start a continuous web job for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    startContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    startContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, callback: ServiceCallback<void>): void;
    startContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Stop a continuous web job for an app, or a deployment slot.
     *
     * Stop a continuous web job for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    stopContinuousWebJobWithHttpOperationResponse(resourceGroupName: string, name: string, webJobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Stop a continuous web job for an app, or a deployment slot.
     *
     * Stop a continuous web job for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    stopContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    stopContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, callback: ServiceCallback<void>): void;
    stopContinuousWebJob(resourceGroupName: string, name: string, webJobName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary List deployments for an app, or a deployment slot.
     *
     * List deployments for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeploymentCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listDeploymentsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeploymentCollection>>;

    /**
     * @summary List deployments for an app, or a deployment slot.
     *
     * List deployments for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeploymentCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeploymentCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeploymentCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listDeployments(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeploymentCollection>;
    listDeployments(resourceGroupName: string, name: string, callback: ServiceCallback<models.DeploymentCollection>): void;
    listDeployments(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentCollection>): void;


    /**
     * @summary Get a deployment by its ID for an app, or a deployment slot.
     *
     * Get a deployment by its ID for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} id Deployment ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Deployment>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getDeploymentWithHttpOperationResponse(resourceGroupName: string, name: string, id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Deployment>>;

    /**
     * @summary Get a deployment by its ID for an app, or a deployment slot.
     *
     * Get a deployment by its ID for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} id Deployment ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Deployment} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Deployment} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Deployment} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getDeployment(resourceGroupName: string, name: string, id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Deployment>;
    getDeployment(resourceGroupName: string, name: string, id: string, callback: ServiceCallback<models.Deployment>): void;
    getDeployment(resourceGroupName: string, name: string, id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Deployment>): void;


    /**
     * @summary Create a deployment for an app, or a deployment slot.
     *
     * Create a deployment for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} id ID of an existing deployment.
     *
     * @param {object} deployment Deployment details.
     *
     * @param {number} [deployment.status] Deployment status.
     *
     * @param {string} [deployment.message] Details about deployment status.
     *
     * @param {string} [deployment.author] Who authored the deployment.
     *
     * @param {string} [deployment.deployer] Who performed the deployment.
     *
     * @param {string} [deployment.authorEmail] Author email.
     *
     * @param {date} [deployment.startTime] Start time.
     *
     * @param {date} [deployment.endTime] End time.
     *
     * @param {boolean} [deployment.active] True if deployment is currently active,
     * false if completed and null if not started.
     *
     * @param {string} [deployment.details] Details on deployment.
     *
     * @param {string} [deployment.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Deployment>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createDeploymentWithHttpOperationResponse(resourceGroupName: string, name: string, id: string, deployment: models.Deployment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Deployment>>;

    /**
     * @summary Create a deployment for an app, or a deployment slot.
     *
     * Create a deployment for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} id ID of an existing deployment.
     *
     * @param {object} deployment Deployment details.
     *
     * @param {number} [deployment.status] Deployment status.
     *
     * @param {string} [deployment.message] Details about deployment status.
     *
     * @param {string} [deployment.author] Who authored the deployment.
     *
     * @param {string} [deployment.deployer] Who performed the deployment.
     *
     * @param {string} [deployment.authorEmail] Author email.
     *
     * @param {date} [deployment.startTime] Start time.
     *
     * @param {date} [deployment.endTime] End time.
     *
     * @param {boolean} [deployment.active] True if deployment is currently active,
     * false if completed and null if not started.
     *
     * @param {string} [deployment.details] Details on deployment.
     *
     * @param {string} [deployment.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Deployment} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Deployment} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Deployment} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createDeployment(resourceGroupName: string, name: string, id: string, deployment: models.Deployment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Deployment>;
    createDeployment(resourceGroupName: string, name: string, id: string, deployment: models.Deployment, callback: ServiceCallback<models.Deployment>): void;
    createDeployment(resourceGroupName: string, name: string, id: string, deployment: models.Deployment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Deployment>): void;


    /**
     * @summary Delete a deployment by its ID for an app, or a deployment slot.
     *
     * Delete a deployment by its ID for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} id Deployment ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteDeploymentWithHttpOperationResponse(resourceGroupName: string, name: string, id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete a deployment by its ID for an app, or a deployment slot.
     *
     * Delete a deployment by its ID for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} id Deployment ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteDeployment(resourceGroupName: string, name: string, id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteDeployment(resourceGroupName: string, name: string, id: string, callback: ServiceCallback<void>): void;
    deleteDeployment(resourceGroupName: string, name: string, id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary List deployment log for specific deployment for an app, or a
     * deployment slot.
     *
     * List deployment log for specific deployment for an app, or a deployment
     * slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} id The ID of a specific deployment. This is the value of the
     * name property in the JSON response from "GET
     * /api/sites/{siteName}/deployments".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Deployment>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listDeploymentLogWithHttpOperationResponse(resourceGroupName: string, name: string, id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Deployment>>;

    /**
     * @summary List deployment log for specific deployment for an app, or a
     * deployment slot.
     *
     * List deployment log for specific deployment for an app, or a deployment
     * slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} id The ID of a specific deployment. This is the value of the
     * name property in the JSON response from "GET
     * /api/sites/{siteName}/deployments".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Deployment} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Deployment} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Deployment} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listDeploymentLog(resourceGroupName: string, name: string, id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Deployment>;
    listDeploymentLog(resourceGroupName: string, name: string, id: string, callback: ServiceCallback<models.Deployment>): void;
    listDeploymentLog(resourceGroupName: string, name: string, id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Deployment>): void;


    /**
     * @summary Discovers an existing app backup that can be restored from a blob
     * in Azure storage. Use this to get information about the databases stored in
     * a backup.
     *
     * Discovers an existing app backup that can be restored from a blob in Azure
     * storage. Use this to get information about the databases stored in a backup.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} request A RestoreRequest object that includes Azure storage
     * URL and blog name for discovery of backup.
     *
     * @param {string} request.storageAccountUrl SAS URL to the container.
     *
     * @param {string} [request.blobName] Name of a blob which contains the backup.
     *
     * @param {boolean} request.overwrite <code>true</code> if the restore
     * operation can overwrite target app; otherwise, <code>false</code>.
     * <code>true</code> is needed if trying to restore over an existing app.
     *
     * @param {string} [request.siteName] Name of an app.
     *
     * @param {array} [request.databases] Collection of databases which should be
     * restored. This list has to match the list of databases included in the
     * backup.
     *
     * @param {boolean} [request.ignoreConflictingHostNames] Changes a logic when
     * restoring an app with custom domains. <code>true</code> to remove custom
     * domains automatically. If <code>false</code>, custom domains are added to
     * the app's object when it is being restored, but that might fail due to
     * conflicts during the operation.
     *
     * @param {boolean} [request.ignoreDatabases] Ignore the databases and only
     * restore the site content
     *
     * @param {string} [request.appServicePlan] Specify app service plan that will
     * own restored site.
     *
     * @param {string} [request.operationType] Operation type. Possible values
     * include: 'Default', 'Clone', 'Relocation', 'Snapshot', 'CloudFS'
     *
     * @param {boolean} [request.adjustConnectionStrings] <code>true</code> if
     * SiteConfig.ConnectionStrings should be set in new app; otherwise,
     * <code>false</code>.
     *
     * @param {string} [request.hostingEnvironment] App Service Environment name,
     * if needed (only when restoring an app to an App Service Environment).
     *
     * @param {string} [request.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RestoreRequest>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    discoverBackupWithHttpOperationResponse(resourceGroupName: string, name: string, request: models.RestoreRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RestoreRequest>>;

    /**
     * @summary Discovers an existing app backup that can be restored from a blob
     * in Azure storage. Use this to get information about the databases stored in
     * a backup.
     *
     * Discovers an existing app backup that can be restored from a blob in Azure
     * storage. Use this to get information about the databases stored in a backup.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} request A RestoreRequest object that includes Azure storage
     * URL and blog name for discovery of backup.
     *
     * @param {string} request.storageAccountUrl SAS URL to the container.
     *
     * @param {string} [request.blobName] Name of a blob which contains the backup.
     *
     * @param {boolean} request.overwrite <code>true</code> if the restore
     * operation can overwrite target app; otherwise, <code>false</code>.
     * <code>true</code> is needed if trying to restore over an existing app.
     *
     * @param {string} [request.siteName] Name of an app.
     *
     * @param {array} [request.databases] Collection of databases which should be
     * restored. This list has to match the list of databases included in the
     * backup.
     *
     * @param {boolean} [request.ignoreConflictingHostNames] Changes a logic when
     * restoring an app with custom domains. <code>true</code> to remove custom
     * domains automatically. If <code>false</code>, custom domains are added to
     * the app's object when it is being restored, but that might fail due to
     * conflicts during the operation.
     *
     * @param {boolean} [request.ignoreDatabases] Ignore the databases and only
     * restore the site content
     *
     * @param {string} [request.appServicePlan] Specify app service plan that will
     * own restored site.
     *
     * @param {string} [request.operationType] Operation type. Possible values
     * include: 'Default', 'Clone', 'Relocation', 'Snapshot', 'CloudFS'
     *
     * @param {boolean} [request.adjustConnectionStrings] <code>true</code> if
     * SiteConfig.ConnectionStrings should be set in new app; otherwise,
     * <code>false</code>.
     *
     * @param {string} [request.hostingEnvironment] App Service Environment name,
     * if needed (only when restoring an app to an App Service Environment).
     *
     * @param {string} [request.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RestoreRequest} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RestoreRequest} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RestoreRequest} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    discoverBackup(resourceGroupName: string, name: string, request: models.RestoreRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RestoreRequest>;
    discoverBackup(resourceGroupName: string, name: string, request: models.RestoreRequest, callback: ServiceCallback<models.RestoreRequest>): void;
    discoverBackup(resourceGroupName: string, name: string, request: models.RestoreRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RestoreRequest>): void;


    /**
     * @summary Lists ownership identifiers for domain associated with web app.
     *
     * Lists ownership identifiers for domain associated with web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IdentifierCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listDomainOwnershipIdentifiersWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IdentifierCollection>>;

    /**
     * @summary Lists ownership identifiers for domain associated with web app.
     *
     * Lists ownership identifiers for domain associated with web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IdentifierCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IdentifierCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IdentifierCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listDomainOwnershipIdentifiers(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IdentifierCollection>;
    listDomainOwnershipIdentifiers(resourceGroupName: string, name: string, callback: ServiceCallback<models.IdentifierCollection>): void;
    listDomainOwnershipIdentifiers(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IdentifierCollection>): void;


    /**
     * @summary Get domain ownership identifier for web app.
     *
     * Get domain ownership identifier for web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} domainOwnershipIdentifierName Name of domain ownership
     * identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Identifier>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getDomainOwnershipIdentifierWithHttpOperationResponse(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Identifier>>;

    /**
     * @summary Get domain ownership identifier for web app.
     *
     * Get domain ownership identifier for web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} domainOwnershipIdentifierName Name of domain ownership
     * identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Identifier} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Identifier} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Identifier} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Identifier>;
    getDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, callback: ServiceCallback<models.Identifier>): void;
    getDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Identifier>): void;


    /**
     * @summary Creates a domain ownership identifier for web app, or updates an
     * existing ownership identifier.
     *
     * Creates a domain ownership identifier for web app, or updates an existing
     * ownership identifier.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} domainOwnershipIdentifierName Name of domain ownership
     * identifier.
     *
     * @param {object} domainOwnershipIdentifier A JSON representation of the
     * domain ownership properties.
     *
     * @param {string} [domainOwnershipIdentifier.identifierId] String
     * representation of the identity.
     *
     * @param {string} [domainOwnershipIdentifier.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Identifier>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateDomainOwnershipIdentifierWithHttpOperationResponse(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: models.Identifier, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Identifier>>;

    /**
     * @summary Creates a domain ownership identifier for web app, or updates an
     * existing ownership identifier.
     *
     * Creates a domain ownership identifier for web app, or updates an existing
     * ownership identifier.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} domainOwnershipIdentifierName Name of domain ownership
     * identifier.
     *
     * @param {object} domainOwnershipIdentifier A JSON representation of the
     * domain ownership properties.
     *
     * @param {string} [domainOwnershipIdentifier.identifierId] String
     * representation of the identity.
     *
     * @param {string} [domainOwnershipIdentifier.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Identifier} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Identifier} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Identifier} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: models.Identifier, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Identifier>;
    createOrUpdateDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: models.Identifier, callback: ServiceCallback<models.Identifier>): void;
    createOrUpdateDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: models.Identifier, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Identifier>): void;


    /**
     * @summary Deletes a domain ownership identifier for a web app.
     *
     * Deletes a domain ownership identifier for a web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} domainOwnershipIdentifierName Name of domain ownership
     * identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteDomainOwnershipIdentifierWithHttpOperationResponse(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a domain ownership identifier for a web app.
     *
     * Deletes a domain ownership identifier for a web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} domainOwnershipIdentifierName Name of domain ownership
     * identifier.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, callback: ServiceCallback<void>): void;
    deleteDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Creates a domain ownership identifier for web app, or updates an
     * existing ownership identifier.
     *
     * Creates a domain ownership identifier for web app, or updates an existing
     * ownership identifier.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} domainOwnershipIdentifierName Name of domain ownership
     * identifier.
     *
     * @param {object} domainOwnershipIdentifier A JSON representation of the
     * domain ownership properties.
     *
     * @param {string} [domainOwnershipIdentifier.identifierId] String
     * representation of the identity.
     *
     * @param {string} [domainOwnershipIdentifier.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Identifier>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateDomainOwnershipIdentifierWithHttpOperationResponse(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: models.Identifier, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Identifier>>;

    /**
     * @summary Creates a domain ownership identifier for web app, or updates an
     * existing ownership identifier.
     *
     * Creates a domain ownership identifier for web app, or updates an existing
     * ownership identifier.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} domainOwnershipIdentifierName Name of domain ownership
     * identifier.
     *
     * @param {object} domainOwnershipIdentifier A JSON representation of the
     * domain ownership properties.
     *
     * @param {string} [domainOwnershipIdentifier.identifierId] String
     * representation of the identity.
     *
     * @param {string} [domainOwnershipIdentifier.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Identifier} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Identifier} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Identifier} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: models.Identifier, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Identifier>;
    updateDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: models.Identifier, callback: ServiceCallback<models.Identifier>): void;
    updateDomainOwnershipIdentifier(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: models.Identifier, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Identifier>): void;


    /**
     * @summary Get the status of the last MSDeploy operation.
     *
     * Get the status of the last MSDeploy operation.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MSDeployStatus>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getMSDeployStatusWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MSDeployStatus>>;

    /**
     * @summary Get the status of the last MSDeploy operation.
     *
     * Get the status of the last MSDeploy operation.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MSDeployStatus} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MSDeployStatus} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MSDeployStatus} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getMSDeployStatus(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MSDeployStatus>;
    getMSDeployStatus(resourceGroupName: string, name: string, callback: ServiceCallback<models.MSDeployStatus>): void;
    getMSDeployStatus(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MSDeployStatus>): void;


    /**
     * @summary Invoke the MSDeploy web app extension.
     *
     * Invoke the MSDeploy web app extension.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} mSDeploy Details of MSDeploy operation
     *
     * @param {string} [mSDeploy.packageUri] Package URI
     *
     * @param {string} [mSDeploy.connectionString] SQL Connection String
     *
     * @param {string} [mSDeploy.dbType] Database Type
     *
     * @param {string} [mSDeploy.setParametersXmlFileUri] URI of MSDeploy
     * Parameters file. Must not be set if SetParameters is used.
     *
     * @param {object} [mSDeploy.setParameters] MSDeploy Parameters. Must not be
     * set if SetParametersXmlFileUri is used.
     *
     * @param {boolean} [mSDeploy.skipAppData] Controls whether the MSDeploy
     * operation skips the App_Data directory.
     * If set to <code>true</code>, the existing App_Data directory on the
     * destination
     * will not be deleted, and any App_Data directory in the source will be
     * ignored.
     * Setting is <code>false</code> by default.
     *
     * @param {boolean} [mSDeploy.appOffline] Sets the AppOffline rule while the
     * MSDeploy operation executes.
     * Setting is <code>false</code> by default.
     *
     * @param {string} [mSDeploy.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MSDeployStatus>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createMSDeployOperationWithHttpOperationResponse(resourceGroupName: string, name: string, mSDeploy: models.MSDeploy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MSDeployStatus>>;

    /**
     * @summary Invoke the MSDeploy web app extension.
     *
     * Invoke the MSDeploy web app extension.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} mSDeploy Details of MSDeploy operation
     *
     * @param {string} [mSDeploy.packageUri] Package URI
     *
     * @param {string} [mSDeploy.connectionString] SQL Connection String
     *
     * @param {string} [mSDeploy.dbType] Database Type
     *
     * @param {string} [mSDeploy.setParametersXmlFileUri] URI of MSDeploy
     * Parameters file. Must not be set if SetParameters is used.
     *
     * @param {object} [mSDeploy.setParameters] MSDeploy Parameters. Must not be
     * set if SetParametersXmlFileUri is used.
     *
     * @param {boolean} [mSDeploy.skipAppData] Controls whether the MSDeploy
     * operation skips the App_Data directory.
     * If set to <code>true</code>, the existing App_Data directory on the
     * destination
     * will not be deleted, and any App_Data directory in the source will be
     * ignored.
     * Setting is <code>false</code> by default.
     *
     * @param {boolean} [mSDeploy.appOffline] Sets the AppOffline rule while the
     * MSDeploy operation executes.
     * Setting is <code>false</code> by default.
     *
     * @param {string} [mSDeploy.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MSDeployStatus} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MSDeployStatus} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MSDeployStatus} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createMSDeployOperation(resourceGroupName: string, name: string, mSDeploy: models.MSDeploy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MSDeployStatus>;
    createMSDeployOperation(resourceGroupName: string, name: string, mSDeploy: models.MSDeploy, callback: ServiceCallback<models.MSDeployStatus>): void;
    createMSDeployOperation(resourceGroupName: string, name: string, mSDeploy: models.MSDeploy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MSDeployStatus>): void;


    /**
     * @summary Get the MSDeploy Log for the last MSDeploy operation.
     *
     * Get the MSDeploy Log for the last MSDeploy operation.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MSDeployLog>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getMSDeployLogWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MSDeployLog>>;

    /**
     * @summary Get the MSDeploy Log for the last MSDeploy operation.
     *
     * Get the MSDeploy Log for the last MSDeploy operation.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MSDeployLog} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MSDeployLog} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MSDeployLog} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getMSDeployLog(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MSDeployLog>;
    getMSDeployLog(resourceGroupName: string, name: string, callback: ServiceCallback<models.MSDeployLog>): void;
    getMSDeployLog(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MSDeployLog>): void;


    /**
     * @summary List the functions for a web site, or a deployment slot.
     *
     * List the functions for a web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FunctionEnvelopeCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listFunctionsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FunctionEnvelopeCollection>>;

    /**
     * @summary List the functions for a web site, or a deployment slot.
     *
     * List the functions for a web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FunctionEnvelopeCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FunctionEnvelopeCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FunctionEnvelopeCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listFunctions(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FunctionEnvelopeCollection>;
    listFunctions(resourceGroupName: string, name: string, callback: ServiceCallback<models.FunctionEnvelopeCollection>): void;
    listFunctions(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FunctionEnvelopeCollection>): void;


    /**
     * @summary Fetch a short lived token that can be exchanged for a master key.
     *
     * Fetch a short lived token that can be exchanged for a master key.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getFunctionsAdminTokenWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * @summary Fetch a short lived token that can be exchanged for a master key.
     *
     * Fetch a short lived token that can be exchanged for a master key.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getFunctionsAdminToken(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    getFunctionsAdminToken(resourceGroupName: string, name: string, callback: ServiceCallback<string>): void;
    getFunctionsAdminToken(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * @summary Get function information by its ID for web site, or a deployment
     * slot.
     *
     * Get function information by its ID for web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} functionName Function name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FunctionEnvelope>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getFunctionWithHttpOperationResponse(resourceGroupName: string, name: string, functionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FunctionEnvelope>>;

    /**
     * @summary Get function information by its ID for web site, or a deployment
     * slot.
     *
     * Get function information by its ID for web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} functionName Function name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FunctionEnvelope} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FunctionEnvelope} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FunctionEnvelope} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getFunction(resourceGroupName: string, name: string, functionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FunctionEnvelope>;
    getFunction(resourceGroupName: string, name: string, functionName: string, callback: ServiceCallback<models.FunctionEnvelope>): void;
    getFunction(resourceGroupName: string, name: string, functionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FunctionEnvelope>): void;


    /**
     * @summary Create function for web site, or a deployment slot.
     *
     * Create function for web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} functionName Function name.
     *
     * @param {object} functionEnvelope Function details.
     *
     * @param {string} [functionEnvelope.functionAppId] Function App ID.
     *
     * @param {string} [functionEnvelope.scriptRootPathHref] Script root path URI.
     *
     * @param {string} [functionEnvelope.scriptHref] Script URI.
     *
     * @param {string} [functionEnvelope.configHref] Config URI.
     *
     * @param {string} [functionEnvelope.secretsFileHref] Secrets file URI.
     *
     * @param {string} [functionEnvelope.href] Function URI.
     *
     * @param {object} [functionEnvelope.config] Config information.
     *
     * @param {object} [functionEnvelope.files] File list.
     *
     * @param {string} [functionEnvelope.testData] Test data used when testing via
     * the Azure Portal.
     *
     * @param {string} [functionEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FunctionEnvelope>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createFunctionWithHttpOperationResponse(resourceGroupName: string, name: string, functionName: string, functionEnvelope: models.FunctionEnvelope, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FunctionEnvelope>>;

    /**
     * @summary Create function for web site, or a deployment slot.
     *
     * Create function for web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} functionName Function name.
     *
     * @param {object} functionEnvelope Function details.
     *
     * @param {string} [functionEnvelope.functionAppId] Function App ID.
     *
     * @param {string} [functionEnvelope.scriptRootPathHref] Script root path URI.
     *
     * @param {string} [functionEnvelope.scriptHref] Script URI.
     *
     * @param {string} [functionEnvelope.configHref] Config URI.
     *
     * @param {string} [functionEnvelope.secretsFileHref] Secrets file URI.
     *
     * @param {string} [functionEnvelope.href] Function URI.
     *
     * @param {object} [functionEnvelope.config] Config information.
     *
     * @param {object} [functionEnvelope.files] File list.
     *
     * @param {string} [functionEnvelope.testData] Test data used when testing via
     * the Azure Portal.
     *
     * @param {string} [functionEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FunctionEnvelope} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FunctionEnvelope} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FunctionEnvelope} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createFunction(resourceGroupName: string, name: string, functionName: string, functionEnvelope: models.FunctionEnvelope, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FunctionEnvelope>;
    createFunction(resourceGroupName: string, name: string, functionName: string, functionEnvelope: models.FunctionEnvelope, callback: ServiceCallback<models.FunctionEnvelope>): void;
    createFunction(resourceGroupName: string, name: string, functionName: string, functionEnvelope: models.FunctionEnvelope, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FunctionEnvelope>): void;


    /**
     * @summary Delete a function for web site, or a deployment slot.
     *
     * Delete a function for web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} functionName Function name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteFunctionWithHttpOperationResponse(resourceGroupName: string, name: string, functionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete a function for web site, or a deployment slot.
     *
     * Delete a function for web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} functionName Function name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteFunction(resourceGroupName: string, name: string, functionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteFunction(resourceGroupName: string, name: string, functionName: string, callback: ServiceCallback<void>): void;
    deleteFunction(resourceGroupName: string, name: string, functionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Get function secrets for a function in a web site, or a deployment
     * slot.
     *
     * Get function secrets for a function in a web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} functionName Function name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FunctionSecrets>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listFunctionSecretsWithHttpOperationResponse(resourceGroupName: string, name: string, functionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FunctionSecrets>>;

    /**
     * @summary Get function secrets for a function in a web site, or a deployment
     * slot.
     *
     * Get function secrets for a function in a web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} functionName Function name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FunctionSecrets} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FunctionSecrets} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FunctionSecrets} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listFunctionSecrets(resourceGroupName: string, name: string, functionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FunctionSecrets>;
    listFunctionSecrets(resourceGroupName: string, name: string, functionName: string, callback: ServiceCallback<models.FunctionSecrets>): void;
    listFunctionSecrets(resourceGroupName: string, name: string, functionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FunctionSecrets>): void;


    /**
     * @summary Get hostname bindings for an app or a deployment slot.
     *
     * Get hostname bindings for an app or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HostNameBindingCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listHostNameBindingsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HostNameBindingCollection>>;

    /**
     * @summary Get hostname bindings for an app or a deployment slot.
     *
     * Get hostname bindings for an app or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HostNameBindingCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HostNameBindingCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HostNameBindingCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listHostNameBindings(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HostNameBindingCollection>;
    listHostNameBindings(resourceGroupName: string, name: string, callback: ServiceCallback<models.HostNameBindingCollection>): void;
    listHostNameBindings(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HostNameBindingCollection>): void;


    /**
     * @summary Get the named hostname binding for an app (or deployment slot, if
     * specified).
     *
     * Get the named hostname binding for an app (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} hostName Hostname in the hostname binding.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HostNameBinding>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getHostNameBindingWithHttpOperationResponse(resourceGroupName: string, name: string, hostName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HostNameBinding>>;

    /**
     * @summary Get the named hostname binding for an app (or deployment slot, if
     * specified).
     *
     * Get the named hostname binding for an app (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} hostName Hostname in the hostname binding.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HostNameBinding} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HostNameBinding} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HostNameBinding} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getHostNameBinding(resourceGroupName: string, name: string, hostName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HostNameBinding>;
    getHostNameBinding(resourceGroupName: string, name: string, hostName: string, callback: ServiceCallback<models.HostNameBinding>): void;
    getHostNameBinding(resourceGroupName: string, name: string, hostName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HostNameBinding>): void;


    /**
     * @summary Creates a hostname binding for an app.
     *
     * Creates a hostname binding for an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} hostName Hostname in the hostname binding.
     *
     * @param {object} hostNameBinding Binding details. This is the JSON
     * representation of a HostNameBinding object.
     *
     * @param {string} [hostNameBinding.siteName] App Service app name.
     *
     * @param {string} [hostNameBinding.domainId] Fully qualified ARM domain
     * resource URI.
     *
     * @param {string} [hostNameBinding.azureResourceName] Azure resource name.
     *
     * @param {string} [hostNameBinding.azureResourceType] Azure resource type.
     * Possible values include: 'Website', 'TrafficManager'
     *
     * @param {string} [hostNameBinding.customHostNameDnsRecordType] Custom DNS
     * record type. Possible values include: 'CName', 'A'
     *
     * @param {string} [hostNameBinding.hostNameType] Hostname type. Possible
     * values include: 'Verified', 'Managed'
     *
     * @param {string} [hostNameBinding.sslState] SSL type. Possible values
     * include: 'Disabled', 'SniEnabled', 'IpBasedEnabled'
     *
     * @param {string} [hostNameBinding.thumbprint] SSL certificate thumbprint
     *
     * @param {string} [hostNameBinding.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HostNameBinding>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateHostNameBindingWithHttpOperationResponse(resourceGroupName: string, name: string, hostName: string, hostNameBinding: models.HostNameBinding, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HostNameBinding>>;

    /**
     * @summary Creates a hostname binding for an app.
     *
     * Creates a hostname binding for an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} hostName Hostname in the hostname binding.
     *
     * @param {object} hostNameBinding Binding details. This is the JSON
     * representation of a HostNameBinding object.
     *
     * @param {string} [hostNameBinding.siteName] App Service app name.
     *
     * @param {string} [hostNameBinding.domainId] Fully qualified ARM domain
     * resource URI.
     *
     * @param {string} [hostNameBinding.azureResourceName] Azure resource name.
     *
     * @param {string} [hostNameBinding.azureResourceType] Azure resource type.
     * Possible values include: 'Website', 'TrafficManager'
     *
     * @param {string} [hostNameBinding.customHostNameDnsRecordType] Custom DNS
     * record type. Possible values include: 'CName', 'A'
     *
     * @param {string} [hostNameBinding.hostNameType] Hostname type. Possible
     * values include: 'Verified', 'Managed'
     *
     * @param {string} [hostNameBinding.sslState] SSL type. Possible values
     * include: 'Disabled', 'SniEnabled', 'IpBasedEnabled'
     *
     * @param {string} [hostNameBinding.thumbprint] SSL certificate thumbprint
     *
     * @param {string} [hostNameBinding.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HostNameBinding} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HostNameBinding} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HostNameBinding} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateHostNameBinding(resourceGroupName: string, name: string, hostName: string, hostNameBinding: models.HostNameBinding, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HostNameBinding>;
    createOrUpdateHostNameBinding(resourceGroupName: string, name: string, hostName: string, hostNameBinding: models.HostNameBinding, callback: ServiceCallback<models.HostNameBinding>): void;
    createOrUpdateHostNameBinding(resourceGroupName: string, name: string, hostName: string, hostNameBinding: models.HostNameBinding, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HostNameBinding>): void;


    /**
     * @summary Deletes a hostname binding for an app.
     *
     * Deletes a hostname binding for an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} hostName Hostname in the hostname binding.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteHostNameBindingWithHttpOperationResponse(resourceGroupName: string, name: string, hostName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a hostname binding for an app.
     *
     * Deletes a hostname binding for an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} hostName Hostname in the hostname binding.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteHostNameBinding(resourceGroupName: string, name: string, hostName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteHostNameBinding(resourceGroupName: string, name: string, hostName: string, callback: ServiceCallback<void>): void;
    deleteHostNameBinding(resourceGroupName: string, name: string, hostName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Retrieves a specific Service Bus Hybrid Connection used by this Web
     * App.
     *
     * Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} namespaceName The namespace for this hybrid connection.
     *
     * @param {string} relayName The relay name for this hybrid connection.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HybridConnection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getHybridConnectionWithHttpOperationResponse(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HybridConnection>>;

    /**
     * @summary Retrieves a specific Service Bus Hybrid Connection used by this Web
     * App.
     *
     * Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} namespaceName The namespace for this hybrid connection.
     *
     * @param {string} relayName The relay name for this hybrid connection.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HybridConnection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HybridConnection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HybridConnection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HybridConnection>;
    getHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, callback: ServiceCallback<models.HybridConnection>): void;
    getHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HybridConnection>): void;


    /**
     * @summary Creates a new Hybrid Connection using a Service Bus relay.
     *
     * Creates a new Hybrid Connection using a Service Bus relay.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} namespaceName The namespace for this hybrid connection.
     *
     * @param {string} relayName The relay name for this hybrid connection.
     *
     * @param {object} connectionEnvelope The details of the hybrid connection.
     *
     * @param {string} [connectionEnvelope.serviceBusNamespace] The name of the
     * Service Bus namespace.
     *
     * @param {string} [connectionEnvelope.relayName] The name of the Service Bus
     * relay.
     *
     * @param {string} [connectionEnvelope.relayArmUri] The ARM URI to the Service
     * Bus relay.
     *
     * @param {string} [connectionEnvelope.hostname] The hostname of the endpoint.
     *
     * @param {number} [connectionEnvelope.port] The port of the endpoint.
     *
     * @param {string} [connectionEnvelope.sendKeyName] The name of the Service Bus
     * key which has Send permissions. This is used to authenticate to Service Bus.
     *
     * @param {string} [connectionEnvelope.sendKeyValue] The value of the Service
     * Bus key. This is used to authenticate to Service Bus. In ARM this key will
     * not be returned
     * normally, use the POST /listKeys API instead.
     *
     * @param {string} [connectionEnvelope.serviceBusSuffix] The suffix for the
     * service bus endpoint. By default this is .servicebus.windows.net
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HybridConnection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateHybridConnectionWithHttpOperationResponse(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: models.HybridConnection, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HybridConnection>>;

    /**
     * @summary Creates a new Hybrid Connection using a Service Bus relay.
     *
     * Creates a new Hybrid Connection using a Service Bus relay.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} namespaceName The namespace for this hybrid connection.
     *
     * @param {string} relayName The relay name for this hybrid connection.
     *
     * @param {object} connectionEnvelope The details of the hybrid connection.
     *
     * @param {string} [connectionEnvelope.serviceBusNamespace] The name of the
     * Service Bus namespace.
     *
     * @param {string} [connectionEnvelope.relayName] The name of the Service Bus
     * relay.
     *
     * @param {string} [connectionEnvelope.relayArmUri] The ARM URI to the Service
     * Bus relay.
     *
     * @param {string} [connectionEnvelope.hostname] The hostname of the endpoint.
     *
     * @param {number} [connectionEnvelope.port] The port of the endpoint.
     *
     * @param {string} [connectionEnvelope.sendKeyName] The name of the Service Bus
     * key which has Send permissions. This is used to authenticate to Service Bus.
     *
     * @param {string} [connectionEnvelope.sendKeyValue] The value of the Service
     * Bus key. This is used to authenticate to Service Bus. In ARM this key will
     * not be returned
     * normally, use the POST /listKeys API instead.
     *
     * @param {string} [connectionEnvelope.serviceBusSuffix] The suffix for the
     * service bus endpoint. By default this is .servicebus.windows.net
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HybridConnection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HybridConnection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HybridConnection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: models.HybridConnection, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HybridConnection>;
    createOrUpdateHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: models.HybridConnection, callback: ServiceCallback<models.HybridConnection>): void;
    createOrUpdateHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: models.HybridConnection, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HybridConnection>): void;


    /**
     * @summary Removes a Hybrid Connection from this site.
     *
     * Removes a Hybrid Connection from this site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} namespaceName The namespace for this hybrid connection.
     *
     * @param {string} relayName The relay name for this hybrid connection.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteHybridConnectionWithHttpOperationResponse(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Removes a Hybrid Connection from this site.
     *
     * Removes a Hybrid Connection from this site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} namespaceName The namespace for this hybrid connection.
     *
     * @param {string} relayName The relay name for this hybrid connection.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, callback: ServiceCallback<void>): void;
    deleteHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Creates a new Hybrid Connection using a Service Bus relay.
     *
     * Creates a new Hybrid Connection using a Service Bus relay.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} namespaceName The namespace for this hybrid connection.
     *
     * @param {string} relayName The relay name for this hybrid connection.
     *
     * @param {object} connectionEnvelope The details of the hybrid connection.
     *
     * @param {string} [connectionEnvelope.serviceBusNamespace] The name of the
     * Service Bus namespace.
     *
     * @param {string} [connectionEnvelope.relayName] The name of the Service Bus
     * relay.
     *
     * @param {string} [connectionEnvelope.relayArmUri] The ARM URI to the Service
     * Bus relay.
     *
     * @param {string} [connectionEnvelope.hostname] The hostname of the endpoint.
     *
     * @param {number} [connectionEnvelope.port] The port of the endpoint.
     *
     * @param {string} [connectionEnvelope.sendKeyName] The name of the Service Bus
     * key which has Send permissions. This is used to authenticate to Service Bus.
     *
     * @param {string} [connectionEnvelope.sendKeyValue] The value of the Service
     * Bus key. This is used to authenticate to Service Bus. In ARM this key will
     * not be returned
     * normally, use the POST /listKeys API instead.
     *
     * @param {string} [connectionEnvelope.serviceBusSuffix] The suffix for the
     * service bus endpoint. By default this is .servicebus.windows.net
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HybridConnection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateHybridConnectionWithHttpOperationResponse(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: models.HybridConnection, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HybridConnection>>;

    /**
     * @summary Creates a new Hybrid Connection using a Service Bus relay.
     *
     * Creates a new Hybrid Connection using a Service Bus relay.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} namespaceName The namespace for this hybrid connection.
     *
     * @param {string} relayName The relay name for this hybrid connection.
     *
     * @param {object} connectionEnvelope The details of the hybrid connection.
     *
     * @param {string} [connectionEnvelope.serviceBusNamespace] The name of the
     * Service Bus namespace.
     *
     * @param {string} [connectionEnvelope.relayName] The name of the Service Bus
     * relay.
     *
     * @param {string} [connectionEnvelope.relayArmUri] The ARM URI to the Service
     * Bus relay.
     *
     * @param {string} [connectionEnvelope.hostname] The hostname of the endpoint.
     *
     * @param {number} [connectionEnvelope.port] The port of the endpoint.
     *
     * @param {string} [connectionEnvelope.sendKeyName] The name of the Service Bus
     * key which has Send permissions. This is used to authenticate to Service Bus.
     *
     * @param {string} [connectionEnvelope.sendKeyValue] The value of the Service
     * Bus key. This is used to authenticate to Service Bus. In ARM this key will
     * not be returned
     * normally, use the POST /listKeys API instead.
     *
     * @param {string} [connectionEnvelope.serviceBusSuffix] The suffix for the
     * service bus endpoint. By default this is .servicebus.windows.net
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HybridConnection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HybridConnection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HybridConnection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: models.HybridConnection, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HybridConnection>;
    updateHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: models.HybridConnection, callback: ServiceCallback<models.HybridConnection>): void;
    updateHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: models.HybridConnection, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HybridConnection>): void;


    /**
     * @summary Gets the send key name and value for a Hybrid Connection.
     *
     * Gets the send key name and value for a Hybrid Connection.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} namespaceName The namespace for this hybrid connection.
     *
     * @param {string} relayName The relay name for this hybrid connection.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HybridConnectionKey>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listHybridConnectionKeysWithHttpOperationResponse(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HybridConnectionKey>>;

    /**
     * @summary Gets the send key name and value for a Hybrid Connection.
     *
     * Gets the send key name and value for a Hybrid Connection.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} namespaceName The namespace for this hybrid connection.
     *
     * @param {string} relayName The relay name for this hybrid connection.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HybridConnectionKey} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HybridConnectionKey} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HybridConnectionKey} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listHybridConnectionKeys(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HybridConnectionKey>;
    listHybridConnectionKeys(resourceGroupName: string, name: string, namespaceName: string, relayName: string, callback: ServiceCallback<models.HybridConnectionKey>): void;
    listHybridConnectionKeys(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HybridConnectionKey>): void;


    /**
     * @summary Retrieves all Service Bus Hybrid Connections used by this Web App.
     *
     * Retrieves all Service Bus Hybrid Connections used by this Web App.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HybridConnection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listHybridConnectionsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HybridConnection>>;

    /**
     * @summary Retrieves all Service Bus Hybrid Connections used by this Web App.
     *
     * Retrieves all Service Bus Hybrid Connections used by this Web App.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HybridConnection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HybridConnection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HybridConnection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listHybridConnections(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HybridConnection>;
    listHybridConnections(resourceGroupName: string, name: string, callback: ServiceCallback<models.HybridConnection>): void;
    listHybridConnections(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HybridConnection>): void;


    /**
     * @summary Gets hybrid connections configured for an app (or deployment slot,
     * if specified).
     *
     * Gets hybrid connections configured for an app (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RelayServiceConnectionEntity>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listRelayServiceConnectionsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RelayServiceConnectionEntity>>;

    /**
     * @summary Gets hybrid connections configured for an app (or deployment slot,
     * if specified).
     *
     * Gets hybrid connections configured for an app (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RelayServiceConnectionEntity} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RelayServiceConnectionEntity} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RelayServiceConnectionEntity} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listRelayServiceConnections(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RelayServiceConnectionEntity>;
    listRelayServiceConnections(resourceGroupName: string, name: string, callback: ServiceCallback<models.RelayServiceConnectionEntity>): void;
    listRelayServiceConnections(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RelayServiceConnectionEntity>): void;


    /**
     * @summary Gets a hybrid connection configuration by its name.
     *
     * Gets a hybrid connection configuration by its name.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} entityName Name of the hybrid connection.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RelayServiceConnectionEntity>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getRelayServiceConnectionWithHttpOperationResponse(resourceGroupName: string, name: string, entityName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RelayServiceConnectionEntity>>;

    /**
     * @summary Gets a hybrid connection configuration by its name.
     *
     * Gets a hybrid connection configuration by its name.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} entityName Name of the hybrid connection.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RelayServiceConnectionEntity} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RelayServiceConnectionEntity} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RelayServiceConnectionEntity} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RelayServiceConnectionEntity>;
    getRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, callback: ServiceCallback<models.RelayServiceConnectionEntity>): void;
    getRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RelayServiceConnectionEntity>): void;


    /**
     * @summary Creates a new hybrid connection configuration (PUT), or updates an
     * existing one (PATCH).
     *
     * Creates a new hybrid connection configuration (PUT), or updates an existing
     * one (PATCH).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} entityName Name of the hybrid connection configuration.
     *
     * @param {object} connectionEnvelope Details of the hybrid connection
     * configuration.
     *
     * @param {string} [connectionEnvelope.entityName]
     *
     * @param {string} [connectionEnvelope.entityConnectionString]
     *
     * @param {string} [connectionEnvelope.resourceType]
     *
     * @param {string} [connectionEnvelope.resourceConnectionString]
     *
     * @param {string} [connectionEnvelope.hostname]
     *
     * @param {number} [connectionEnvelope.port]
     *
     * @param {string} [connectionEnvelope.biztalkUri]
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RelayServiceConnectionEntity>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateRelayServiceConnectionWithHttpOperationResponse(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: models.RelayServiceConnectionEntity, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RelayServiceConnectionEntity>>;

    /**
     * @summary Creates a new hybrid connection configuration (PUT), or updates an
     * existing one (PATCH).
     *
     * Creates a new hybrid connection configuration (PUT), or updates an existing
     * one (PATCH).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} entityName Name of the hybrid connection configuration.
     *
     * @param {object} connectionEnvelope Details of the hybrid connection
     * configuration.
     *
     * @param {string} [connectionEnvelope.entityName]
     *
     * @param {string} [connectionEnvelope.entityConnectionString]
     *
     * @param {string} [connectionEnvelope.resourceType]
     *
     * @param {string} [connectionEnvelope.resourceConnectionString]
     *
     * @param {string} [connectionEnvelope.hostname]
     *
     * @param {number} [connectionEnvelope.port]
     *
     * @param {string} [connectionEnvelope.biztalkUri]
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RelayServiceConnectionEntity} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RelayServiceConnectionEntity} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RelayServiceConnectionEntity} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: models.RelayServiceConnectionEntity, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RelayServiceConnectionEntity>;
    createOrUpdateRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: models.RelayServiceConnectionEntity, callback: ServiceCallback<models.RelayServiceConnectionEntity>): void;
    createOrUpdateRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: models.RelayServiceConnectionEntity, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RelayServiceConnectionEntity>): void;


    /**
     * @summary Deletes a relay service connection by its name.
     *
     * Deletes a relay service connection by its name.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} entityName Name of the hybrid connection configuration.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteRelayServiceConnectionWithHttpOperationResponse(resourceGroupName: string, name: string, entityName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a relay service connection by its name.
     *
     * Deletes a relay service connection by its name.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} entityName Name of the hybrid connection configuration.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, callback: ServiceCallback<void>): void;
    deleteRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Creates a new hybrid connection configuration (PUT), or updates an
     * existing one (PATCH).
     *
     * Creates a new hybrid connection configuration (PUT), or updates an existing
     * one (PATCH).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} entityName Name of the hybrid connection configuration.
     *
     * @param {object} connectionEnvelope Details of the hybrid connection
     * configuration.
     *
     * @param {string} [connectionEnvelope.entityName]
     *
     * @param {string} [connectionEnvelope.entityConnectionString]
     *
     * @param {string} [connectionEnvelope.resourceType]
     *
     * @param {string} [connectionEnvelope.resourceConnectionString]
     *
     * @param {string} [connectionEnvelope.hostname]
     *
     * @param {number} [connectionEnvelope.port]
     *
     * @param {string} [connectionEnvelope.biztalkUri]
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RelayServiceConnectionEntity>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateRelayServiceConnectionWithHttpOperationResponse(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: models.RelayServiceConnectionEntity, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RelayServiceConnectionEntity>>;

    /**
     * @summary Creates a new hybrid connection configuration (PUT), or updates an
     * existing one (PATCH).
     *
     * Creates a new hybrid connection configuration (PUT), or updates an existing
     * one (PATCH).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} entityName Name of the hybrid connection configuration.
     *
     * @param {object} connectionEnvelope Details of the hybrid connection
     * configuration.
     *
     * @param {string} [connectionEnvelope.entityName]
     *
     * @param {string} [connectionEnvelope.entityConnectionString]
     *
     * @param {string} [connectionEnvelope.resourceType]
     *
     * @param {string} [connectionEnvelope.resourceConnectionString]
     *
     * @param {string} [connectionEnvelope.hostname]
     *
     * @param {number} [connectionEnvelope.port]
     *
     * @param {string} [connectionEnvelope.biztalkUri]
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RelayServiceConnectionEntity} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RelayServiceConnectionEntity} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RelayServiceConnectionEntity} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: models.RelayServiceConnectionEntity, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RelayServiceConnectionEntity>;
    updateRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: models.RelayServiceConnectionEntity, callback: ServiceCallback<models.RelayServiceConnectionEntity>): void;
    updateRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: models.RelayServiceConnectionEntity, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RelayServiceConnectionEntity>): void;


    /**
     * @summary Gets all scale-out instances of an app.
     *
     * Gets all scale-out instances of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WebAppInstanceCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listInstanceIdentifiersWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WebAppInstanceCollection>>;

    /**
     * @summary Gets all scale-out instances of an app.
     *
     * Gets all scale-out instances of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WebAppInstanceCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WebAppInstanceCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WebAppInstanceCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listInstanceIdentifiers(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WebAppInstanceCollection>;
    listInstanceIdentifiers(resourceGroupName: string, name: string, callback: ServiceCallback<models.WebAppInstanceCollection>): void;
    listInstanceIdentifiers(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WebAppInstanceCollection>): void;


    /**
     * @summary Get the status of the last MSDeploy operation.
     *
     * Get the status of the last MSDeploy operation.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} instanceId ID of web app instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MSDeployStatus>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getInstanceMsDeployStatusWithHttpOperationResponse(resourceGroupName: string, name: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MSDeployStatus>>;

    /**
     * @summary Get the status of the last MSDeploy operation.
     *
     * Get the status of the last MSDeploy operation.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} instanceId ID of web app instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MSDeployStatus} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MSDeployStatus} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MSDeployStatus} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getInstanceMsDeployStatus(resourceGroupName: string, name: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MSDeployStatus>;
    getInstanceMsDeployStatus(resourceGroupName: string, name: string, instanceId: string, callback: ServiceCallback<models.MSDeployStatus>): void;
    getInstanceMsDeployStatus(resourceGroupName: string, name: string, instanceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MSDeployStatus>): void;


    /**
     * @summary Invoke the MSDeploy web app extension.
     *
     * Invoke the MSDeploy web app extension.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} instanceId ID of web app instance.
     *
     * @param {object} mSDeploy Details of MSDeploy operation
     *
     * @param {string} [mSDeploy.packageUri] Package URI
     *
     * @param {string} [mSDeploy.connectionString] SQL Connection String
     *
     * @param {string} [mSDeploy.dbType] Database Type
     *
     * @param {string} [mSDeploy.setParametersXmlFileUri] URI of MSDeploy
     * Parameters file. Must not be set if SetParameters is used.
     *
     * @param {object} [mSDeploy.setParameters] MSDeploy Parameters. Must not be
     * set if SetParametersXmlFileUri is used.
     *
     * @param {boolean} [mSDeploy.skipAppData] Controls whether the MSDeploy
     * operation skips the App_Data directory.
     * If set to <code>true</code>, the existing App_Data directory on the
     * destination
     * will not be deleted, and any App_Data directory in the source will be
     * ignored.
     * Setting is <code>false</code> by default.
     *
     * @param {boolean} [mSDeploy.appOffline] Sets the AppOffline rule while the
     * MSDeploy operation executes.
     * Setting is <code>false</code> by default.
     *
     * @param {string} [mSDeploy.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MSDeployStatus>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createInstanceMSDeployOperationWithHttpOperationResponse(resourceGroupName: string, name: string, instanceId: string, mSDeploy: models.MSDeploy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MSDeployStatus>>;

    /**
     * @summary Invoke the MSDeploy web app extension.
     *
     * Invoke the MSDeploy web app extension.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} instanceId ID of web app instance.
     *
     * @param {object} mSDeploy Details of MSDeploy operation
     *
     * @param {string} [mSDeploy.packageUri] Package URI
     *
     * @param {string} [mSDeploy.connectionString] SQL Connection String
     *
     * @param {string} [mSDeploy.dbType] Database Type
     *
     * @param {string} [mSDeploy.setParametersXmlFileUri] URI of MSDeploy
     * Parameters file. Must not be set if SetParameters is used.
     *
     * @param {object} [mSDeploy.setParameters] MSDeploy Parameters. Must not be
     * set if SetParametersXmlFileUri is used.
     *
     * @param {boolean} [mSDeploy.skipAppData] Controls whether the MSDeploy
     * operation skips the App_Data directory.
     * If set to <code>true</code>, the existing App_Data directory on the
     * destination
     * will not be deleted, and any App_Data directory in the source will be
     * ignored.
     * Setting is <code>false</code> by default.
     *
     * @param {boolean} [mSDeploy.appOffline] Sets the AppOffline rule while the
     * MSDeploy operation executes.
     * Setting is <code>false</code> by default.
     *
     * @param {string} [mSDeploy.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MSDeployStatus} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MSDeployStatus} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MSDeployStatus} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createInstanceMSDeployOperation(resourceGroupName: string, name: string, instanceId: string, mSDeploy: models.MSDeploy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MSDeployStatus>;
    createInstanceMSDeployOperation(resourceGroupName: string, name: string, instanceId: string, mSDeploy: models.MSDeploy, callback: ServiceCallback<models.MSDeployStatus>): void;
    createInstanceMSDeployOperation(resourceGroupName: string, name: string, instanceId: string, mSDeploy: models.MSDeploy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MSDeployStatus>): void;


    /**
     * @summary Get the MSDeploy Log for the last MSDeploy operation.
     *
     * Get the MSDeploy Log for the last MSDeploy operation.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} instanceId ID of web app instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MSDeployLog>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getInstanceMSDeployLogWithHttpOperationResponse(resourceGroupName: string, name: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MSDeployLog>>;

    /**
     * @summary Get the MSDeploy Log for the last MSDeploy operation.
     *
     * Get the MSDeploy Log for the last MSDeploy operation.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} instanceId ID of web app instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MSDeployLog} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MSDeployLog} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MSDeployLog} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getInstanceMSDeployLog(resourceGroupName: string, name: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MSDeployLog>;
    getInstanceMSDeployLog(resourceGroupName: string, name: string, instanceId: string, callback: ServiceCallback<models.MSDeployLog>): void;
    getInstanceMSDeployLog(resourceGroupName: string, name: string, instanceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MSDeployLog>): void;


    /**
     * @summary Get list of processes for a web site, or a deployment slot, or for
     * a specific scaled-out instance in a web site.
     *
     * Get list of processes for a web site, or a deployment slot, or for a
     * specific scaled-out instance in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} instanceId ID of a specific scaled-out instance. This is the
     * value of the name property in the JSON response from "GET
     * api/sites/{siteName}/instances".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listInstanceProcessesWithHttpOperationResponse(resourceGroupName: string, name: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessInfoCollection>>;

    /**
     * @summary Get list of processes for a web site, or a deployment slot, or for
     * a specific scaled-out instance in a web site.
     *
     * Get list of processes for a web site, or a deployment slot, or for a
     * specific scaled-out instance in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} instanceId ID of a specific scaled-out instance. This is the
     * value of the name property in the JSON response from "GET
     * api/sites/{siteName}/instances".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessInfoCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listInstanceProcesses(resourceGroupName: string, name: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessInfoCollection>;
    listInstanceProcesses(resourceGroupName: string, name: string, instanceId: string, callback: ServiceCallback<models.ProcessInfoCollection>): void;
    listInstanceProcesses(resourceGroupName: string, name: string, instanceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessInfoCollection>): void;


    /**
     * @summary Get process information by its ID for a specific scaled-out
     * instance in a web site.
     *
     * Get process information by its ID for a specific scaled-out instance in a
     * web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} instanceId ID of a specific scaled-out instance. This is the
     * value of the name property in the JSON response from "GET
     * api/sites/{siteName}/instances".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getInstanceProcessWithHttpOperationResponse(resourceGroupName: string, name: string, processId: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessInfo>>;

    /**
     * @summary Get process information by its ID for a specific scaled-out
     * instance in a web site.
     *
     * Get process information by its ID for a specific scaled-out instance in a
     * web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} instanceId ID of a specific scaled-out instance. This is the
     * value of the name property in the JSON response from "GET
     * api/sites/{siteName}/instances".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getInstanceProcess(resourceGroupName: string, name: string, processId: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessInfo>;
    getInstanceProcess(resourceGroupName: string, name: string, processId: string, instanceId: string, callback: ServiceCallback<models.ProcessInfo>): void;
    getInstanceProcess(resourceGroupName: string, name: string, processId: string, instanceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessInfo>): void;


    /**
     * @summary Terminate a process by its ID for a web site, or a deployment slot,
     * or specific scaled-out instance in a web site.
     *
     * Terminate a process by its ID for a web site, or a deployment slot, or
     * specific scaled-out instance in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} instanceId ID of a specific scaled-out instance. This is the
     * value of the name property in the JSON response from "GET
     * api/sites/{siteName}/instances".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteInstanceProcessWithHttpOperationResponse(resourceGroupName: string, name: string, processId: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Terminate a process by its ID for a web site, or a deployment slot,
     * or specific scaled-out instance in a web site.
     *
     * Terminate a process by its ID for a web site, or a deployment slot, or
     * specific scaled-out instance in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} instanceId ID of a specific scaled-out instance. This is the
     * value of the name property in the JSON response from "GET
     * api/sites/{siteName}/instances".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteInstanceProcess(resourceGroupName: string, name: string, processId: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteInstanceProcess(resourceGroupName: string, name: string, processId: string, instanceId: string, callback: ServiceCallback<void>): void;
    deleteInstanceProcess(resourceGroupName: string, name: string, processId: string, instanceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Get a memory dump of a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * Get a memory dump of a process by its ID for a specific scaled-out instance
     * in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} instanceId ID of a specific scaled-out instance. This is the
     * value of the name property in the JSON response from "GET
     * api/sites/{siteName}/instances".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getInstanceProcessDumpWithHttpOperationResponse(resourceGroupName: string, name: string, processId: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<stream.Readable>>;

    /**
     * @summary Get a memory dump of a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * Get a memory dump of a process by its ID for a specific scaled-out instance
     * in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} instanceId ID of a specific scaled-out instance. This is the
     * value of the name property in the JSON response from "GET
     * api/sites/{siteName}/instances".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getInstanceProcessDump(resourceGroupName: string, name: string, processId: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<stream.Readable>;
    getInstanceProcessDump(resourceGroupName: string, name: string, processId: string, instanceId: string, callback: ServiceCallback<stream.Readable>): void;
    getInstanceProcessDump(resourceGroupName: string, name: string, processId: string, instanceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<stream.Readable>): void;


    /**
     * @summary List module information for a process by its ID for a specific
     * scaled-out instance in a web site.
     *
     * List module information for a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} instanceId ID of a specific scaled-out instance. This is the
     * value of the name property in the JSON response from "GET
     * api/sites/{siteName}/instances".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessModuleInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listInstanceProcessModulesWithHttpOperationResponse(resourceGroupName: string, name: string, processId: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessModuleInfoCollection>>;

    /**
     * @summary List module information for a process by its ID for a specific
     * scaled-out instance in a web site.
     *
     * List module information for a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} instanceId ID of a specific scaled-out instance. This is the
     * value of the name property in the JSON response from "GET
     * api/sites/{siteName}/instances".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessModuleInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessModuleInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessModuleInfoCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listInstanceProcessModules(resourceGroupName: string, name: string, processId: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessModuleInfoCollection>;
    listInstanceProcessModules(resourceGroupName: string, name: string, processId: string, instanceId: string, callback: ServiceCallback<models.ProcessModuleInfoCollection>): void;
    listInstanceProcessModules(resourceGroupName: string, name: string, processId: string, instanceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessModuleInfoCollection>): void;


    /**
     * @summary Get process information by its ID for a specific scaled-out
     * instance in a web site.
     *
     * Get process information by its ID for a specific scaled-out instance in a
     * web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} baseAddress Module base address.
     *
     * @param {string} instanceId ID of a specific scaled-out instance. This is the
     * value of the name property in the JSON response from "GET
     * api/sites/{siteName}/instances".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessModuleInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getInstanceProcessModuleWithHttpOperationResponse(resourceGroupName: string, name: string, processId: string, baseAddress: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessModuleInfo>>;

    /**
     * @summary Get process information by its ID for a specific scaled-out
     * instance in a web site.
     *
     * Get process information by its ID for a specific scaled-out instance in a
     * web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} baseAddress Module base address.
     *
     * @param {string} instanceId ID of a specific scaled-out instance. This is the
     * value of the name property in the JSON response from "GET
     * api/sites/{siteName}/instances".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessModuleInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessModuleInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessModuleInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getInstanceProcessModule(resourceGroupName: string, name: string, processId: string, baseAddress: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessModuleInfo>;
    getInstanceProcessModule(resourceGroupName: string, name: string, processId: string, baseAddress: string, instanceId: string, callback: ServiceCallback<models.ProcessModuleInfo>): void;
    getInstanceProcessModule(resourceGroupName: string, name: string, processId: string, baseAddress: string, instanceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessModuleInfo>): void;


    /**
     * @summary List the threads in a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * List the threads in a process by its ID for a specific scaled-out instance
     * in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} instanceId ID of a specific scaled-out instance. This is the
     * value of the name property in the JSON response from "GET
     * api/sites/{siteName}/instances".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessThreadInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listInstanceProcessThreadsWithHttpOperationResponse(resourceGroupName: string, name: string, processId: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessThreadInfoCollection>>;

    /**
     * @summary List the threads in a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * List the threads in a process by its ID for a specific scaled-out instance
     * in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} instanceId ID of a specific scaled-out instance. This is the
     * value of the name property in the JSON response from "GET
     * api/sites/{siteName}/instances".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessThreadInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessThreadInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessThreadInfoCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listInstanceProcessThreads(resourceGroupName: string, name: string, processId: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessThreadInfoCollection>;
    listInstanceProcessThreads(resourceGroupName: string, name: string, processId: string, instanceId: string, callback: ServiceCallback<models.ProcessThreadInfoCollection>): void;
    listInstanceProcessThreads(resourceGroupName: string, name: string, processId: string, instanceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessThreadInfoCollection>): void;


    /**
     * @summary Get thread information by Thread ID for a specific process, in a
     * specific scaled-out instance in a web site.
     *
     * Get thread information by Thread ID for a specific process, in a specific
     * scaled-out instance in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} threadId TID.
     *
     * @param {string} instanceId ID of a specific scaled-out instance. This is the
     * value of the name property in the JSON response from "GET
     * api/sites/{siteName}/instances".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessThreadInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getInstanceProcessThreadWithHttpOperationResponse(resourceGroupName: string, name: string, processId: string, threadId: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessThreadInfo>>;

    /**
     * @summary Get thread information by Thread ID for a specific process, in a
     * specific scaled-out instance in a web site.
     *
     * Get thread information by Thread ID for a specific process, in a specific
     * scaled-out instance in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} threadId TID.
     *
     * @param {string} instanceId ID of a specific scaled-out instance. This is the
     * value of the name property in the JSON response from "GET
     * api/sites/{siteName}/instances".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessThreadInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessThreadInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessThreadInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getInstanceProcessThread(resourceGroupName: string, name: string, processId: string, threadId: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessThreadInfo>;
    getInstanceProcessThread(resourceGroupName: string, name: string, processId: string, threadId: string, instanceId: string, callback: ServiceCallback<models.ProcessThreadInfo>): void;
    getInstanceProcessThread(resourceGroupName: string, name: string, processId: string, threadId: string, instanceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessThreadInfo>): void;


    /**
     * @summary Shows whether an app can be cloned to another resource group or
     * subscription.
     *
     * Shows whether an app can be cloned to another resource group or
     * subscription.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteCloneability>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    isCloneableWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteCloneability>>;

    /**
     * @summary Shows whether an app can be cloned to another resource group or
     * subscription.
     *
     * Shows whether an app can be cloned to another resource group or
     * subscription.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteCloneability} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteCloneability} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteCloneability} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    isCloneable(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteCloneability>;
    isCloneable(resourceGroupName: string, name: string, callback: ServiceCallback<models.SiteCloneability>): void;
    isCloneable(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteCloneability>): void;


    /**
     * @summary This is to allow calling via powershell and ARM template.
     *
     * This is to allow calling via powershell and ARM template.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FunctionSecrets>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSyncFunctionTriggersWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FunctionSecrets>>;

    /**
     * @summary This is to allow calling via powershell and ARM template.
     *
     * This is to allow calling via powershell and ARM template.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FunctionSecrets} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FunctionSecrets} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FunctionSecrets} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSyncFunctionTriggers(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FunctionSecrets>;
    listSyncFunctionTriggers(resourceGroupName: string, name: string, callback: ServiceCallback<models.FunctionSecrets>): void;
    listSyncFunctionTriggers(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FunctionSecrets>): void;


    /**
     * @summary Gets all metric definitions of an app (or deployment slot, if
     * specified).
     *
     * Gets all metric definitions of an app (or deployment slot, if specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceMetricDefinitionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricDefinitionsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceMetricDefinitionCollection>>;

    /**
     * @summary Gets all metric definitions of an app (or deployment slot, if
     * specified).
     *
     * Gets all metric definitions of an app (or deployment slot, if specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceMetricDefinitionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceMetricDefinitionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceMetricDefinitionCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetricDefinitions(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceMetricDefinitionCollection>;
    listMetricDefinitions(resourceGroupName: string, name: string, callback: ServiceCallback<models.ResourceMetricDefinitionCollection>): void;
    listMetricDefinitions(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricDefinitionCollection>): void;


    /**
     * @summary Gets performance metrics of an app (or deployment slot, if
     * specified).
     *
     * Gets performance metrics of an app (or deployment slot, if specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.details] Specify "true" to include metric details
     * in the response. It is "false" by default.
     *
     * @param {string} [options.filter] Return only metrics specified in the filter
     * (using OData syntax). For example: $filter=(name.value eq 'Metric1' or
     * name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime
     * eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceMetricCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { details? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceMetricCollection>>;

    /**
     * @summary Gets performance metrics of an app (or deployment slot, if
     * specified).
     *
     * Gets performance metrics of an app (or deployment slot, if specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.details] Specify "true" to include metric details
     * in the response. It is "false" by default.
     *
     * @param {string} [options.filter] Return only metrics specified in the filter
     * (using OData syntax). For example: $filter=(name.value eq 'Metric1' or
     * name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime
     * eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceMetricCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceMetricCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceMetricCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetrics(resourceGroupName: string, name: string, options?: { details? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceMetricCollection>;
    listMetrics(resourceGroupName: string, name: string, callback: ServiceCallback<models.ResourceMetricCollection>): void;
    listMetrics(resourceGroupName: string, name: string, options: { details? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricCollection>): void;


    /**
     * @summary Restores a web app.
     *
     * Restores a web app.
     *
     * @param {string} subscriptionName Azure subscription.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} migrationOptions Migration migrationOptions.
     *
     * @param {string} migrationOptions.azurefilesConnectionString AzureFiles
     * connection string.
     *
     * @param {string} migrationOptions.azurefilesShare AzureFiles share.
     *
     * @param {boolean} [migrationOptions.switchSiteAfterMigration]
     * <code>true</code>if the app should be switched over; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [migrationOptions.blockWriteAccessToSite] <code>true</code>
     * if the app should be read only during copy operation; otherwise,
     * <code>false</code>.
     *
     * @param {string} [migrationOptions.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StorageMigrationResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    migrateStorageWithHttpOperationResponse(subscriptionName: string, resourceGroupName: string, name: string, migrationOptions: models.StorageMigrationOptions, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageMigrationResponse>>;

    /**
     * @summary Restores a web app.
     *
     * Restores a web app.
     *
     * @param {string} subscriptionName Azure subscription.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} migrationOptions Migration migrationOptions.
     *
     * @param {string} migrationOptions.azurefilesConnectionString AzureFiles
     * connection string.
     *
     * @param {string} migrationOptions.azurefilesShare AzureFiles share.
     *
     * @param {boolean} [migrationOptions.switchSiteAfterMigration]
     * <code>true</code>if the app should be switched over; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [migrationOptions.blockWriteAccessToSite] <code>true</code>
     * if the app should be read only during copy operation; otherwise,
     * <code>false</code>.
     *
     * @param {string} [migrationOptions.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StorageMigrationResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StorageMigrationResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StorageMigrationResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    migrateStorage(subscriptionName: string, resourceGroupName: string, name: string, migrationOptions: models.StorageMigrationOptions, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageMigrationResponse>;
    migrateStorage(subscriptionName: string, resourceGroupName: string, name: string, migrationOptions: models.StorageMigrationOptions, callback: ServiceCallback<models.StorageMigrationResponse>): void;
    migrateStorage(subscriptionName: string, resourceGroupName: string, name: string, migrationOptions: models.StorageMigrationOptions, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageMigrationResponse>): void;


    /**
     * @summary Migrates a local (in-app) MySql database to a remote MySql
     * database.
     *
     * Migrates a local (in-app) MySql database to a remote MySql database.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} migrationRequestEnvelope MySql migration options.
     *
     * @param {string} migrationRequestEnvelope.connectionString Connection string
     * to the remote MySQL database.
     *
     * @param {string} migrationRequestEnvelope.migrationType The type of migration
     * operation to be done. Possible values include: 'LocalToRemote',
     * 'RemoteToLocal'
     *
     * @param {string} [migrationRequestEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Operation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    migrateMySqlWithHttpOperationResponse(resourceGroupName: string, name: string, migrationRequestEnvelope: models.MigrateMySqlRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Operation>>;

    /**
     * @summary Migrates a local (in-app) MySql database to a remote MySql
     * database.
     *
     * Migrates a local (in-app) MySql database to a remote MySql database.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} migrationRequestEnvelope MySql migration options.
     *
     * @param {string} migrationRequestEnvelope.connectionString Connection string
     * to the remote MySQL database.
     *
     * @param {string} migrationRequestEnvelope.migrationType The type of migration
     * operation to be done. Possible values include: 'LocalToRemote',
     * 'RemoteToLocal'
     *
     * @param {string} [migrationRequestEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Operation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Operation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Operation} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    migrateMySql(resourceGroupName: string, name: string, migrationRequestEnvelope: models.MigrateMySqlRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Operation>;
    migrateMySql(resourceGroupName: string, name: string, migrationRequestEnvelope: models.MigrateMySqlRequest, callback: ServiceCallback<models.Operation>): void;
    migrateMySql(resourceGroupName: string, name: string, migrationRequestEnvelope: models.MigrateMySqlRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Operation>): void;


    /**
     * @summary Returns the status of MySql in app migration, if one is active, and
     * whether or not MySql in app is enabled
     *
     * Returns the status of MySql in app migration, if one is active, and whether
     * or not MySql in app is enabled
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MigrateMySqlStatus>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getMigrateMySqlStatusWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MigrateMySqlStatus>>;

    /**
     * @summary Returns the status of MySql in app migration, if one is active, and
     * whether or not MySql in app is enabled
     *
     * Returns the status of MySql in app migration, if one is active, and whether
     * or not MySql in app is enabled
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MigrateMySqlStatus} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MigrateMySqlStatus} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MigrateMySqlStatus} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getMigrateMySqlStatus(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MigrateMySqlStatus>;
    getMigrateMySqlStatus(resourceGroupName: string, name: string, callback: ServiceCallback<models.MigrateMySqlStatus>): void;
    getMigrateMySqlStatus(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MigrateMySqlStatus>): void;


    /**
     * @summary Gets all network features used by the app (or deployment slot, if
     * specified).
     *
     * Gets all network features used by the app (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} view The type of view. This can either be "summary" or
     * "detailed".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkFeatures>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNetworkFeaturesWithHttpOperationResponse(resourceGroupName: string, name: string, view: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkFeatures>>;

    /**
     * @summary Gets all network features used by the app (or deployment slot, if
     * specified).
     *
     * Gets all network features used by the app (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} view The type of view. This can either be "summary" or
     * "detailed".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkFeatures} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkFeatures} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkFeatures} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNetworkFeatures(resourceGroupName: string, name: string, view: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkFeatures>;
    listNetworkFeatures(resourceGroupName: string, name: string, view: string, callback: ServiceCallback<models.NetworkFeatures>): void;
    listNetworkFeatures(resourceGroupName: string, name: string, view: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkFeatures>): void;


    /**
     * @summary Gets a named operation for a network trace capturing (or deployment
     * slot, if specified).
     *
     * Gets a named operation for a network trace capturing (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} operationId GUID of the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getNetworkTraceOperationWithHttpOperationResponse(resourceGroupName: string, name: string, operationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkTrace[]>>;

    /**
     * @summary Gets a named operation for a network trace capturing (or deployment
     * slot, if specified).
     *
     * Gets a named operation for a network trace capturing (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} operationId GUID of the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getNetworkTraceOperation(resourceGroupName: string, name: string, operationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkTrace[]>;
    getNetworkTraceOperation(resourceGroupName: string, name: string, operationId: string, callback: ServiceCallback<models.NetworkTrace[]>): void;
    getNetworkTraceOperation(resourceGroupName: string, name: string, operationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkTrace[]>): void;


    /**
     * @summary Start capturing network packets for the site (To be deprecated).
     *
     * Start capturing network packets for the site (To be deprecated).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.durationInSeconds] The duration to keep capturing
     * in seconds.
     *
     * @param {number} [options.maxFrameLength] The maximum frame length in bytes
     * (Optional).
     *
     * @param {string} [options.sasUrl] The Blob URL to store capture file.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    startWebSiteNetworkTraceWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { durationInSeconds? : number, maxFrameLength? : number, sasUrl? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * @summary Start capturing network packets for the site (To be deprecated).
     *
     * Start capturing network packets for the site (To be deprecated).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.durationInSeconds] The duration to keep capturing
     * in seconds.
     *
     * @param {number} [options.maxFrameLength] The maximum frame length in bytes
     * (Optional).
     *
     * @param {string} [options.sasUrl] The Blob URL to store capture file.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    startWebSiteNetworkTrace(resourceGroupName: string, name: string, options?: { durationInSeconds? : number, maxFrameLength? : number, sasUrl? : string, customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    startWebSiteNetworkTrace(resourceGroupName: string, name: string, callback: ServiceCallback<string>): void;
    startWebSiteNetworkTrace(resourceGroupName: string, name: string, options: { durationInSeconds? : number, maxFrameLength? : number, sasUrl? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * @summary Start capturing network packets for the site.
     *
     * Start capturing network packets for the site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.durationInSeconds] The duration to keep capturing
     * in seconds.
     *
     * @param {number} [options.maxFrameLength] The maximum frame length in bytes
     * (Optional).
     *
     * @param {string} [options.sasUrl] The Blob URL to store capture file.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    startWebSiteNetworkTraceOperationWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { durationInSeconds? : number, maxFrameLength? : number, sasUrl? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkTrace[]>>;

    /**
     * @summary Start capturing network packets for the site.
     *
     * Start capturing network packets for the site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.durationInSeconds] The duration to keep capturing
     * in seconds.
     *
     * @param {number} [options.maxFrameLength] The maximum frame length in bytes
     * (Optional).
     *
     * @param {string} [options.sasUrl] The Blob URL to store capture file.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    startWebSiteNetworkTraceOperation(resourceGroupName: string, name: string, options?: { durationInSeconds? : number, maxFrameLength? : number, sasUrl? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkTrace[]>;
    startWebSiteNetworkTraceOperation(resourceGroupName: string, name: string, callback: ServiceCallback<models.NetworkTrace[]>): void;
    startWebSiteNetworkTraceOperation(resourceGroupName: string, name: string, options: { durationInSeconds? : number, maxFrameLength? : number, sasUrl? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkTrace[]>): void;


    /**
     * @summary Stop ongoing capturing network packets for the site.
     *
     * Stop ongoing capturing network packets for the site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    stopWebSiteNetworkTraceWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Stop ongoing capturing network packets for the site.
     *
     * Stop ongoing capturing network packets for the site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    stopWebSiteNetworkTrace(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    stopWebSiteNetworkTrace(resourceGroupName: string, name: string, callback: ServiceCallback<void>): void;
    stopWebSiteNetworkTrace(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Gets a named operation for a network trace capturing (or deployment
     * slot, if specified).
     *
     * Gets a named operation for a network trace capturing (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} operationId GUID of the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getNetworkTracesWithHttpOperationResponse(resourceGroupName: string, name: string, operationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkTrace[]>>;

    /**
     * @summary Gets a named operation for a network trace capturing (or deployment
     * slot, if specified).
     *
     * Gets a named operation for a network trace capturing (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} operationId GUID of the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getNetworkTraces(resourceGroupName: string, name: string, operationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkTrace[]>;
    getNetworkTraces(resourceGroupName: string, name: string, operationId: string, callback: ServiceCallback<models.NetworkTrace[]>): void;
    getNetworkTraces(resourceGroupName: string, name: string, operationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkTrace[]>): void;


    /**
     * @summary Gets a named operation for a network trace capturing (or deployment
     * slot, if specified).
     *
     * Gets a named operation for a network trace capturing (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} operationId GUID of the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getNetworkTraceOperationV2WithHttpOperationResponse(resourceGroupName: string, name: string, operationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkTrace[]>>;

    /**
     * @summary Gets a named operation for a network trace capturing (or deployment
     * slot, if specified).
     *
     * Gets a named operation for a network trace capturing (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} operationId GUID of the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getNetworkTraceOperationV2(resourceGroupName: string, name: string, operationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkTrace[]>;
    getNetworkTraceOperationV2(resourceGroupName: string, name: string, operationId: string, callback: ServiceCallback<models.NetworkTrace[]>): void;
    getNetworkTraceOperationV2(resourceGroupName: string, name: string, operationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkTrace[]>): void;


    /**
     * @summary Gets a named operation for a network trace capturing (or deployment
     * slot, if specified).
     *
     * Gets a named operation for a network trace capturing (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} operationId GUID of the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getNetworkTracesV2WithHttpOperationResponse(resourceGroupName: string, name: string, operationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkTrace[]>>;

    /**
     * @summary Gets a named operation for a network trace capturing (or deployment
     * slot, if specified).
     *
     * Gets a named operation for a network trace capturing (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} operationId GUID of the operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getNetworkTracesV2(resourceGroupName: string, name: string, operationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkTrace[]>;
    getNetworkTracesV2(resourceGroupName: string, name: string, operationId: string, callback: ServiceCallback<models.NetworkTrace[]>): void;
    getNetworkTracesV2(resourceGroupName: string, name: string, operationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkTrace[]>): void;


    /**
     * @summary Generates a new publishing password for an app (or deployment slot,
     * if specified).
     *
     * Generates a new publishing password for an app (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    generateNewSitePublishingPasswordWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Generates a new publishing password for an app (or deployment slot,
     * if specified).
     *
     * Generates a new publishing password for an app (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    generateNewSitePublishingPassword(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    generateNewSitePublishingPassword(resourceGroupName: string, name: string, callback: ServiceCallback<void>): void;
    generateNewSitePublishingPassword(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Gets perfmon counters for web app.
     *
     * Gets perfmon counters for web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] Return only usages/metrics specified in the
     * filter. Filter conforms to odata syntax. Example: $filter=(startTime eq
     * 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PerfMonCounterCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listPerfMonCountersWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PerfMonCounterCollection>>;

    /**
     * @summary Gets perfmon counters for web app.
     *
     * Gets perfmon counters for web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] Return only usages/metrics specified in the
     * filter. Filter conforms to odata syntax. Example: $filter=(startTime eq
     * 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PerfMonCounterCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PerfMonCounterCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PerfMonCounterCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listPerfMonCounters(resourceGroupName: string, name: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.PerfMonCounterCollection>;
    listPerfMonCounters(resourceGroupName: string, name: string, callback: ServiceCallback<models.PerfMonCounterCollection>): void;
    listPerfMonCounters(resourceGroupName: string, name: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PerfMonCounterCollection>): void;


    /**
     * @summary Gets web app's event logs.
     *
     * Gets web app's event logs.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SitePhpErrorLogFlag>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSitePhpErrorLogFlagWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SitePhpErrorLogFlag>>;

    /**
     * @summary Gets web app's event logs.
     *
     * Gets web app's event logs.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SitePhpErrorLogFlag} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SitePhpErrorLogFlag} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SitePhpErrorLogFlag} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSitePhpErrorLogFlag(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SitePhpErrorLogFlag>;
    getSitePhpErrorLogFlag(resourceGroupName: string, name: string, callback: ServiceCallback<models.SitePhpErrorLogFlag>): void;
    getSitePhpErrorLogFlag(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SitePhpErrorLogFlag>): void;


    /**
     * @summary Gets the premier add-ons of an app.
     *
     * Gets the premier add-ons of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PremierAddOn>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listPremierAddOnsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PremierAddOn>>;

    /**
     * @summary Gets the premier add-ons of an app.
     *
     * Gets the premier add-ons of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PremierAddOn} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PremierAddOn} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PremierAddOn} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listPremierAddOns(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PremierAddOn>;
    listPremierAddOns(resourceGroupName: string, name: string, callback: ServiceCallback<models.PremierAddOn>): void;
    listPremierAddOns(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PremierAddOn>): void;


    /**
     * @summary Gets a named add-on of an app.
     *
     * Gets a named add-on of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} premierAddOnName Add-on name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PremierAddOn>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getPremierAddOnWithHttpOperationResponse(resourceGroupName: string, name: string, premierAddOnName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PremierAddOn>>;

    /**
     * @summary Gets a named add-on of an app.
     *
     * Gets a named add-on of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} premierAddOnName Add-on name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PremierAddOn} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PremierAddOn} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PremierAddOn} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getPremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PremierAddOn>;
    getPremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, callback: ServiceCallback<models.PremierAddOn>): void;
    getPremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PremierAddOn>): void;


    /**
     * @summary Updates a named add-on of an app.
     *
     * Updates a named add-on of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} premierAddOnName Add-on name.
     *
     * @param {object} premierAddOn A JSON representation of the edited premier
     * add-on.
     *
     * @param {string} [premierAddOn.sku] Premier add on SKU.
     *
     * @param {string} [premierAddOn.product] Premier add on Product.
     *
     * @param {string} [premierAddOn.vendor] Premier add on Vendor.
     *
     * @param {string} [premierAddOn.marketplacePublisher] Premier add on
     * Marketplace publisher.
     *
     * @param {string} [premierAddOn.marketplaceOffer] Premier add on Marketplace
     * offer.
     *
     * @param {string} [premierAddOn.kind] Kind of resource.
     *
     * @param {string} premierAddOn.location Resource Location.
     *
     * @param {object} [premierAddOn.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PremierAddOn>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addPremierAddOnWithHttpOperationResponse(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: models.PremierAddOn, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PremierAddOn>>;

    /**
     * @summary Updates a named add-on of an app.
     *
     * Updates a named add-on of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} premierAddOnName Add-on name.
     *
     * @param {object} premierAddOn A JSON representation of the edited premier
     * add-on.
     *
     * @param {string} [premierAddOn.sku] Premier add on SKU.
     *
     * @param {string} [premierAddOn.product] Premier add on Product.
     *
     * @param {string} [premierAddOn.vendor] Premier add on Vendor.
     *
     * @param {string} [premierAddOn.marketplacePublisher] Premier add on
     * Marketplace publisher.
     *
     * @param {string} [premierAddOn.marketplaceOffer] Premier add on Marketplace
     * offer.
     *
     * @param {string} [premierAddOn.kind] Kind of resource.
     *
     * @param {string} premierAddOn.location Resource Location.
     *
     * @param {object} [premierAddOn.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PremierAddOn} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PremierAddOn} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PremierAddOn} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addPremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: models.PremierAddOn, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PremierAddOn>;
    addPremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: models.PremierAddOn, callback: ServiceCallback<models.PremierAddOn>): void;
    addPremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: models.PremierAddOn, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PremierAddOn>): void;


    /**
     * @summary Delete a premier add-on from an app.
     *
     * Delete a premier add-on from an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} premierAddOnName Add-on name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deletePremierAddOnWithHttpOperationResponse(resourceGroupName: string, name: string, premierAddOnName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete a premier add-on from an app.
     *
     * Delete a premier add-on from an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} premierAddOnName Add-on name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deletePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deletePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, callback: ServiceCallback<void>): void;
    deletePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Updates a named add-on of an app.
     *
     * Updates a named add-on of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} premierAddOnName Add-on name.
     *
     * @param {object} premierAddOn A JSON representation of the edited premier
     * add-on.
     *
     * @param {string} [premierAddOn.sku] Premier add on SKU.
     *
     * @param {string} [premierAddOn.product] Premier add on Product.
     *
     * @param {string} [premierAddOn.vendor] Premier add on Vendor.
     *
     * @param {string} [premierAddOn.marketplacePublisher] Premier add on
     * Marketplace publisher.
     *
     * @param {string} [premierAddOn.marketplaceOffer] Premier add on Marketplace
     * offer.
     *
     * @param {string} [premierAddOn.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PremierAddOn>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updatePremierAddOnWithHttpOperationResponse(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: models.PremierAddOnPatchResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PremierAddOn>>;

    /**
     * @summary Updates a named add-on of an app.
     *
     * Updates a named add-on of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} premierAddOnName Add-on name.
     *
     * @param {object} premierAddOn A JSON representation of the edited premier
     * add-on.
     *
     * @param {string} [premierAddOn.sku] Premier add on SKU.
     *
     * @param {string} [premierAddOn.product] Premier add on Product.
     *
     * @param {string} [premierAddOn.vendor] Premier add on Vendor.
     *
     * @param {string} [premierAddOn.marketplacePublisher] Premier add on
     * Marketplace publisher.
     *
     * @param {string} [premierAddOn.marketplaceOffer] Premier add on Marketplace
     * offer.
     *
     * @param {string} [premierAddOn.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PremierAddOn} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PremierAddOn} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PremierAddOn} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updatePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: models.PremierAddOnPatchResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PremierAddOn>;
    updatePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: models.PremierAddOnPatchResource, callback: ServiceCallback<models.PremierAddOn>): void;
    updatePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: models.PremierAddOnPatchResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PremierAddOn>): void;


    /**
     * @summary Gets data around private site access enablement and authorized
     * Virtual Networks that can access the site.
     *
     * Gets data around private site access enablement and authorized Virtual
     * Networks that can access the site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PrivateAccess>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getPrivateAccessWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PrivateAccess>>;

    /**
     * @summary Gets data around private site access enablement and authorized
     * Virtual Networks that can access the site.
     *
     * Gets data around private site access enablement and authorized Virtual
     * Networks that can access the site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PrivateAccess} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PrivateAccess} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PrivateAccess} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getPrivateAccess(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PrivateAccess>;
    getPrivateAccess(resourceGroupName: string, name: string, callback: ServiceCallback<models.PrivateAccess>): void;
    getPrivateAccess(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PrivateAccess>): void;


    /**
     * @summary Sets data around private site access enablement and authorized
     * Virtual Networks that can access the site.
     *
     * Sets data around private site access enablement and authorized Virtual
     * Networks that can access the site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {object} access The information for the private access
     *
     * @param {boolean} [access.enabled] Whether private access is enabled or not.
     *
     * @param {array} [access.virtualNetworks] The Virtual Networks (and subnets)
     * allowed to access the site privately.
     *
     * @param {string} [access.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PrivateAccess>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    putPrivateAccessVnetWithHttpOperationResponse(resourceGroupName: string, name: string, access: models.PrivateAccess, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PrivateAccess>>;

    /**
     * @summary Sets data around private site access enablement and authorized
     * Virtual Networks that can access the site.
     *
     * Sets data around private site access enablement and authorized Virtual
     * Networks that can access the site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {object} access The information for the private access
     *
     * @param {boolean} [access.enabled] Whether private access is enabled or not.
     *
     * @param {array} [access.virtualNetworks] The Virtual Networks (and subnets)
     * allowed to access the site privately.
     *
     * @param {string} [access.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PrivateAccess} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PrivateAccess} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PrivateAccess} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    putPrivateAccessVnet(resourceGroupName: string, name: string, access: models.PrivateAccess, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PrivateAccess>;
    putPrivateAccessVnet(resourceGroupName: string, name: string, access: models.PrivateAccess, callback: ServiceCallback<models.PrivateAccess>): void;
    putPrivateAccessVnet(resourceGroupName: string, name: string, access: models.PrivateAccess, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PrivateAccess>): void;


    /**
     * @summary Get list of processes for a web site, or a deployment slot, or for
     * a specific scaled-out instance in a web site.
     *
     * Get list of processes for a web site, or a deployment slot, or for a
     * specific scaled-out instance in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listProcessesWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessInfoCollection>>;

    /**
     * @summary Get list of processes for a web site, or a deployment slot, or for
     * a specific scaled-out instance in a web site.
     *
     * Get list of processes for a web site, or a deployment slot, or for a
     * specific scaled-out instance in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessInfoCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listProcesses(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessInfoCollection>;
    listProcesses(resourceGroupName: string, name: string, callback: ServiceCallback<models.ProcessInfoCollection>): void;
    listProcesses(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessInfoCollection>): void;


    /**
     * @summary Get process information by its ID for a specific scaled-out
     * instance in a web site.
     *
     * Get process information by its ID for a specific scaled-out instance in a
     * web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getProcessWithHttpOperationResponse(resourceGroupName: string, name: string, processId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessInfo>>;

    /**
     * @summary Get process information by its ID for a specific scaled-out
     * instance in a web site.
     *
     * Get process information by its ID for a specific scaled-out instance in a
     * web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getProcess(resourceGroupName: string, name: string, processId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessInfo>;
    getProcess(resourceGroupName: string, name: string, processId: string, callback: ServiceCallback<models.ProcessInfo>): void;
    getProcess(resourceGroupName: string, name: string, processId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessInfo>): void;


    /**
     * @summary Terminate a process by its ID for a web site, or a deployment slot,
     * or specific scaled-out instance in a web site.
     *
     * Terminate a process by its ID for a web site, or a deployment slot, or
     * specific scaled-out instance in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteProcessWithHttpOperationResponse(resourceGroupName: string, name: string, processId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Terminate a process by its ID for a web site, or a deployment slot,
     * or specific scaled-out instance in a web site.
     *
     * Terminate a process by its ID for a web site, or a deployment slot, or
     * specific scaled-out instance in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteProcess(resourceGroupName: string, name: string, processId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteProcess(resourceGroupName: string, name: string, processId: string, callback: ServiceCallback<void>): void;
    deleteProcess(resourceGroupName: string, name: string, processId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Get a memory dump of a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * Get a memory dump of a process by its ID for a specific scaled-out instance
     * in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getProcessDumpWithHttpOperationResponse(resourceGroupName: string, name: string, processId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<stream.Readable>>;

    /**
     * @summary Get a memory dump of a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * Get a memory dump of a process by its ID for a specific scaled-out instance
     * in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getProcessDump(resourceGroupName: string, name: string, processId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<stream.Readable>;
    getProcessDump(resourceGroupName: string, name: string, processId: string, callback: ServiceCallback<stream.Readable>): void;
    getProcessDump(resourceGroupName: string, name: string, processId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<stream.Readable>): void;


    /**
     * @summary List module information for a process by its ID for a specific
     * scaled-out instance in a web site.
     *
     * List module information for a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessModuleInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listProcessModulesWithHttpOperationResponse(resourceGroupName: string, name: string, processId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessModuleInfoCollection>>;

    /**
     * @summary List module information for a process by its ID for a specific
     * scaled-out instance in a web site.
     *
     * List module information for a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessModuleInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessModuleInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessModuleInfoCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listProcessModules(resourceGroupName: string, name: string, processId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessModuleInfoCollection>;
    listProcessModules(resourceGroupName: string, name: string, processId: string, callback: ServiceCallback<models.ProcessModuleInfoCollection>): void;
    listProcessModules(resourceGroupName: string, name: string, processId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessModuleInfoCollection>): void;


    /**
     * @summary Get process information by its ID for a specific scaled-out
     * instance in a web site.
     *
     * Get process information by its ID for a specific scaled-out instance in a
     * web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} baseAddress Module base address.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessModuleInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getProcessModuleWithHttpOperationResponse(resourceGroupName: string, name: string, processId: string, baseAddress: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessModuleInfo>>;

    /**
     * @summary Get process information by its ID for a specific scaled-out
     * instance in a web site.
     *
     * Get process information by its ID for a specific scaled-out instance in a
     * web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} baseAddress Module base address.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessModuleInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessModuleInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessModuleInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getProcessModule(resourceGroupName: string, name: string, processId: string, baseAddress: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessModuleInfo>;
    getProcessModule(resourceGroupName: string, name: string, processId: string, baseAddress: string, callback: ServiceCallback<models.ProcessModuleInfo>): void;
    getProcessModule(resourceGroupName: string, name: string, processId: string, baseAddress: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessModuleInfo>): void;


    /**
     * @summary List the threads in a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * List the threads in a process by its ID for a specific scaled-out instance
     * in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessThreadInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listProcessThreadsWithHttpOperationResponse(resourceGroupName: string, name: string, processId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessThreadInfoCollection>>;

    /**
     * @summary List the threads in a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * List the threads in a process by its ID for a specific scaled-out instance
     * in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessThreadInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessThreadInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessThreadInfoCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listProcessThreads(resourceGroupName: string, name: string, processId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessThreadInfoCollection>;
    listProcessThreads(resourceGroupName: string, name: string, processId: string, callback: ServiceCallback<models.ProcessThreadInfoCollection>): void;
    listProcessThreads(resourceGroupName: string, name: string, processId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessThreadInfoCollection>): void;


    /**
     * @summary Get thread information by Thread ID for a specific process, in a
     * specific scaled-out instance in a web site.
     *
     * Get thread information by Thread ID for a specific process, in a specific
     * scaled-out instance in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} threadId TID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessThreadInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getProcessThreadWithHttpOperationResponse(resourceGroupName: string, name: string, processId: string, threadId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessThreadInfo>>;

    /**
     * @summary Get thread information by Thread ID for a specific process, in a
     * specific scaled-out instance in a web site.
     *
     * Get thread information by Thread ID for a specific process, in a specific
     * scaled-out instance in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} threadId TID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessThreadInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessThreadInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessThreadInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getProcessThread(resourceGroupName: string, name: string, processId: string, threadId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessThreadInfo>;
    getProcessThread(resourceGroupName: string, name: string, processId: string, threadId: string, callback: ServiceCallback<models.ProcessThreadInfo>): void;
    getProcessThread(resourceGroupName: string, name: string, processId: string, threadId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessThreadInfo>): void;


    /**
     * @summary Get public certificates for an app or a deployment slot.
     *
     * Get public certificates for an app or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PublicCertificateCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listPublicCertificatesWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PublicCertificateCollection>>;

    /**
     * @summary Get public certificates for an app or a deployment slot.
     *
     * Get public certificates for an app or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PublicCertificateCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PublicCertificateCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PublicCertificateCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listPublicCertificates(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PublicCertificateCollection>;
    listPublicCertificates(resourceGroupName: string, name: string, callback: ServiceCallback<models.PublicCertificateCollection>): void;
    listPublicCertificates(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublicCertificateCollection>): void;


    /**
     * @summary Get the named public certificate for an app (or deployment slot, if
     * specified).
     *
     * Get the named public certificate for an app (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} publicCertificateName Public certificate name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PublicCertificate>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getPublicCertificateWithHttpOperationResponse(resourceGroupName: string, name: string, publicCertificateName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PublicCertificate>>;

    /**
     * @summary Get the named public certificate for an app (or deployment slot, if
     * specified).
     *
     * Get the named public certificate for an app (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} publicCertificateName Public certificate name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PublicCertificate} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PublicCertificate} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PublicCertificate} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getPublicCertificate(resourceGroupName: string, name: string, publicCertificateName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PublicCertificate>;
    getPublicCertificate(resourceGroupName: string, name: string, publicCertificateName: string, callback: ServiceCallback<models.PublicCertificate>): void;
    getPublicCertificate(resourceGroupName: string, name: string, publicCertificateName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublicCertificate>): void;


    /**
     * @summary Creates a hostname binding for an app.
     *
     * Creates a hostname binding for an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} publicCertificateName Public certificate name.
     *
     * @param {object} publicCertificate Public certificate details. This is the
     * JSON representation of a PublicCertificate object.
     *
     * @param {buffer} [publicCertificate.blob] Public Certificate byte array
     *
     * @param {string} [publicCertificate.publicCertificateLocation] Public
     * Certificate Location. Possible values include: 'CurrentUserMy',
     * 'LocalMachineMy', 'Unknown'
     *
     * @param {string} [publicCertificate.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PublicCertificate>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdatePublicCertificateWithHttpOperationResponse(resourceGroupName: string, name: string, publicCertificateName: string, publicCertificate: models.PublicCertificate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PublicCertificate>>;

    /**
     * @summary Creates a hostname binding for an app.
     *
     * Creates a hostname binding for an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} publicCertificateName Public certificate name.
     *
     * @param {object} publicCertificate Public certificate details. This is the
     * JSON representation of a PublicCertificate object.
     *
     * @param {buffer} [publicCertificate.blob] Public Certificate byte array
     *
     * @param {string} [publicCertificate.publicCertificateLocation] Public
     * Certificate Location. Possible values include: 'CurrentUserMy',
     * 'LocalMachineMy', 'Unknown'
     *
     * @param {string} [publicCertificate.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PublicCertificate} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PublicCertificate} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PublicCertificate} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdatePublicCertificate(resourceGroupName: string, name: string, publicCertificateName: string, publicCertificate: models.PublicCertificate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PublicCertificate>;
    createOrUpdatePublicCertificate(resourceGroupName: string, name: string, publicCertificateName: string, publicCertificate: models.PublicCertificate, callback: ServiceCallback<models.PublicCertificate>): void;
    createOrUpdatePublicCertificate(resourceGroupName: string, name: string, publicCertificateName: string, publicCertificate: models.PublicCertificate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublicCertificate>): void;


    /**
     * @summary Deletes a hostname binding for an app.
     *
     * Deletes a hostname binding for an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} publicCertificateName Public certificate name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deletePublicCertificateWithHttpOperationResponse(resourceGroupName: string, name: string, publicCertificateName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a hostname binding for an app.
     *
     * Deletes a hostname binding for an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} publicCertificateName Public certificate name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deletePublicCertificate(resourceGroupName: string, name: string, publicCertificateName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deletePublicCertificate(resourceGroupName: string, name: string, publicCertificateName: string, callback: ServiceCallback<void>): void;
    deletePublicCertificate(resourceGroupName: string, name: string, publicCertificateName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Gets the publishing profile for an app (or deployment slot, if
     * specified).
     *
     * Gets the publishing profile for an app (or deployment slot, if specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} publishingProfileOptions Specifies publishingProfileOptions
     * for publishing profile. For example, use {"format": "FileZilla3"} to get a
     * FileZilla publishing profile.
     *
     * @param {string} [publishingProfileOptions.format] Name of the format. Valid
     * values are:
     * FileZilla3
     * WebDeploy -- default
     * Ftp. Possible values include: 'FileZilla3', 'WebDeploy', 'Ftp'
     *
     * @param {boolean} [publishingProfileOptions.includeDisasterRecoveryEndpoints]
     * Include the DisasterRecover endpoint if true
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listPublishingProfileXmlWithSecretsWithHttpOperationResponse(resourceGroupName: string, name: string, publishingProfileOptions: models.CsmPublishingProfileOptions, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<stream.Readable>>;

    /**
     * @summary Gets the publishing profile for an app (or deployment slot, if
     * specified).
     *
     * Gets the publishing profile for an app (or deployment slot, if specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} publishingProfileOptions Specifies publishingProfileOptions
     * for publishing profile. For example, use {"format": "FileZilla3"} to get a
     * FileZilla publishing profile.
     *
     * @param {string} [publishingProfileOptions.format] Name of the format. Valid
     * values are:
     * FileZilla3
     * WebDeploy -- default
     * Ftp. Possible values include: 'FileZilla3', 'WebDeploy', 'Ftp'
     *
     * @param {boolean} [publishingProfileOptions.includeDisasterRecoveryEndpoints]
     * Include the DisasterRecover endpoint if true
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listPublishingProfileXmlWithSecrets(resourceGroupName: string, name: string, publishingProfileOptions: models.CsmPublishingProfileOptions, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<stream.Readable>;
    listPublishingProfileXmlWithSecrets(resourceGroupName: string, name: string, publishingProfileOptions: models.CsmPublishingProfileOptions, callback: ServiceCallback<stream.Readable>): void;
    listPublishingProfileXmlWithSecrets(resourceGroupName: string, name: string, publishingProfileOptions: models.CsmPublishingProfileOptions, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<stream.Readable>): void;


    /**
     * @summary Resets the configuration settings of the current slot if they were
     * previously modified by calling the API with POST.
     *
     * Resets the configuration settings of the current slot if they were
     * previously modified by calling the API with POST.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    resetProductionSlotConfigWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Resets the configuration settings of the current slot if they were
     * previously modified by calling the API with POST.
     *
     * Resets the configuration settings of the current slot if they were
     * previously modified by calling the API with POST.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    resetProductionSlotConfig(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    resetProductionSlotConfig(resourceGroupName: string, name: string, callback: ServiceCallback<void>): void;
    resetProductionSlotConfig(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Restarts an app (or deployment slot, if specified).
     *
     * Restarts an app (or deployment slot, if specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.softRestart] Specify true to apply the
     * configuration settings and restarts the app only if necessary. By default,
     * the API always restarts and reprovisions the app.
     *
     * @param {boolean} [options.synchronous] Specify true to block until the app
     * is restarted. By default, it is set to false, and the API responds
     * immediately (asynchronous).
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    restartWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { softRestart? : boolean, synchronous? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Restarts an app (or deployment slot, if specified).
     *
     * Restarts an app (or deployment slot, if specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.softRestart] Specify true to apply the
     * configuration settings and restarts the app only if necessary. By default,
     * the API always restarts and reprovisions the app.
     *
     * @param {boolean} [options.synchronous] Specify true to block until the app
     * is restarted. By default, it is set to false, and the API responds
     * immediately (asynchronous).
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    restart(resourceGroupName: string, name: string, options?: { softRestart? : boolean, synchronous? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    restart(resourceGroupName: string, name: string, callback: ServiceCallback<void>): void;
    restart(resourceGroupName: string, name: string, options: { softRestart? : boolean, synchronous? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Restores an app from a backup blob in Azure Storage.
     *
     * Restores an app from a backup blob in Azure Storage.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} request Information on restore request .
     *
     * @param {string} request.storageAccountUrl SAS URL to the container.
     *
     * @param {string} [request.blobName] Name of a blob which contains the backup.
     *
     * @param {boolean} request.overwrite <code>true</code> if the restore
     * operation can overwrite target app; otherwise, <code>false</code>.
     * <code>true</code> is needed if trying to restore over an existing app.
     *
     * @param {string} [request.siteName] Name of an app.
     *
     * @param {array} [request.databases] Collection of databases which should be
     * restored. This list has to match the list of databases included in the
     * backup.
     *
     * @param {boolean} [request.ignoreConflictingHostNames] Changes a logic when
     * restoring an app with custom domains. <code>true</code> to remove custom
     * domains automatically. If <code>false</code>, custom domains are added to
     * the app's object when it is being restored, but that might fail due to
     * conflicts during the operation.
     *
     * @param {boolean} [request.ignoreDatabases] Ignore the databases and only
     * restore the site content
     *
     * @param {string} [request.appServicePlan] Specify app service plan that will
     * own restored site.
     *
     * @param {string} [request.operationType] Operation type. Possible values
     * include: 'Default', 'Clone', 'Relocation', 'Snapshot', 'CloudFS'
     *
     * @param {boolean} [request.adjustConnectionStrings] <code>true</code> if
     * SiteConfig.ConnectionStrings should be set in new app; otherwise,
     * <code>false</code>.
     *
     * @param {string} [request.hostingEnvironment] App Service Environment name,
     * if needed (only when restoring an app to an App Service Environment).
     *
     * @param {string} [request.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    restoreFromBackupBlobWithHttpOperationResponse(resourceGroupName: string, name: string, request: models.RestoreRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Restores an app from a backup blob in Azure Storage.
     *
     * Restores an app from a backup blob in Azure Storage.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} request Information on restore request .
     *
     * @param {string} request.storageAccountUrl SAS URL to the container.
     *
     * @param {string} [request.blobName] Name of a blob which contains the backup.
     *
     * @param {boolean} request.overwrite <code>true</code> if the restore
     * operation can overwrite target app; otherwise, <code>false</code>.
     * <code>true</code> is needed if trying to restore over an existing app.
     *
     * @param {string} [request.siteName] Name of an app.
     *
     * @param {array} [request.databases] Collection of databases which should be
     * restored. This list has to match the list of databases included in the
     * backup.
     *
     * @param {boolean} [request.ignoreConflictingHostNames] Changes a logic when
     * restoring an app with custom domains. <code>true</code> to remove custom
     * domains automatically. If <code>false</code>, custom domains are added to
     * the app's object when it is being restored, but that might fail due to
     * conflicts during the operation.
     *
     * @param {boolean} [request.ignoreDatabases] Ignore the databases and only
     * restore the site content
     *
     * @param {string} [request.appServicePlan] Specify app service plan that will
     * own restored site.
     *
     * @param {string} [request.operationType] Operation type. Possible values
     * include: 'Default', 'Clone', 'Relocation', 'Snapshot', 'CloudFS'
     *
     * @param {boolean} [request.adjustConnectionStrings] <code>true</code> if
     * SiteConfig.ConnectionStrings should be set in new app; otherwise,
     * <code>false</code>.
     *
     * @param {string} [request.hostingEnvironment] App Service Environment name,
     * if needed (only when restoring an app to an App Service Environment).
     *
     * @param {string} [request.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    restoreFromBackupBlob(resourceGroupName: string, name: string, request: models.RestoreRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    restoreFromBackupBlob(resourceGroupName: string, name: string, request: models.RestoreRequest, callback: ServiceCallback<void>): void;
    restoreFromBackupBlob(resourceGroupName: string, name: string, request: models.RestoreRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Restores a deleted web app to this web app.
     *
     * Restores a deleted web app to this web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} restoreRequest Deleted web app restore information.
     *
     * @param {string} [restoreRequest.deletedSiteId] ARM resource ID of the
     * deleted app. Example:
     * /subscriptions/{subId}/providers/Microsoft.Web/deletedSites/{deletedSiteId}
     *
     * @param {boolean} [restoreRequest.recoverConfiguration] If true, deleted site
     * configuration, in addition to content, will be restored.
     *
     * @param {string} [restoreRequest.snapshotTime] Point in time to restore the
     * deleted app from, formatted as a DateTime string.
     * If unspecified, default value is the time that the app was deleted.
     *
     * @param {boolean} [restoreRequest.useDRSecondary] If true, the snapshot is
     * retrieved from DRSecondary endpoint.
     *
     * @param {string} [restoreRequest.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    restoreFromDeletedAppWithHttpOperationResponse(resourceGroupName: string, name: string, restoreRequest: models.DeletedAppRestoreRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Restores a deleted web app to this web app.
     *
     * Restores a deleted web app to this web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} restoreRequest Deleted web app restore information.
     *
     * @param {string} [restoreRequest.deletedSiteId] ARM resource ID of the
     * deleted app. Example:
     * /subscriptions/{subId}/providers/Microsoft.Web/deletedSites/{deletedSiteId}
     *
     * @param {boolean} [restoreRequest.recoverConfiguration] If true, deleted site
     * configuration, in addition to content, will be restored.
     *
     * @param {string} [restoreRequest.snapshotTime] Point in time to restore the
     * deleted app from, formatted as a DateTime string.
     * If unspecified, default value is the time that the app was deleted.
     *
     * @param {boolean} [restoreRequest.useDRSecondary] If true, the snapshot is
     * retrieved from DRSecondary endpoint.
     *
     * @param {string} [restoreRequest.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    restoreFromDeletedApp(resourceGroupName: string, name: string, restoreRequest: models.DeletedAppRestoreRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    restoreFromDeletedApp(resourceGroupName: string, name: string, restoreRequest: models.DeletedAppRestoreRequest, callback: ServiceCallback<void>): void;
    restoreFromDeletedApp(resourceGroupName: string, name: string, restoreRequest: models.DeletedAppRestoreRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Restores a web app from a snapshot.
     *
     * Restores a web app from a snapshot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} restoreRequest Snapshot restore settings. Snapshot
     * information can be obtained by calling GetDeletedSites or GetSiteSnapshots
     * API.
     *
     * @param {string} [restoreRequest.snapshotTime] Point in time in which the app
     * restore should be done, formatted as a DateTime string.
     *
     * @param {object} [restoreRequest.recoverySource] Optional. Specifies the web
     * app that snapshot contents will be retrieved from.
     * If empty, the targeted web app will be used as the source.
     *
     * @param {string} [restoreRequest.recoverySource.location] Geographical
     * location of the source web app, e.g. SouthEastAsia, SouthCentralUS
     *
     * @param {string} [restoreRequest.recoverySource.id] ARM resource ID of the
     * source app.
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}
     * for production slots and
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName}
     * for other slots.
     *
     * @param {boolean} restoreRequest.overwrite If <code>true</code> the restore
     * operation can overwrite source app; otherwise, <code>false</code>.
     *
     * @param {boolean} [restoreRequest.recoverConfiguration] If true, site
     * configuration, in addition to content, will be reverted.
     *
     * @param {boolean} [restoreRequest.ignoreConflictingHostNames] If true, custom
     * hostname conflicts will be ignored when recovering to a target web app.
     * This setting is only necessary when RecoverConfiguration is enabled.
     *
     * @param {boolean} [restoreRequest.useDRSecondary] If true, the snapshot is
     * retrieved from DRSecondary endpoint.
     *
     * @param {string} [restoreRequest.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    restoreSnapshotWithHttpOperationResponse(resourceGroupName: string, name: string, restoreRequest: models.SnapshotRestoreRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Restores a web app from a snapshot.
     *
     * Restores a web app from a snapshot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} restoreRequest Snapshot restore settings. Snapshot
     * information can be obtained by calling GetDeletedSites or GetSiteSnapshots
     * API.
     *
     * @param {string} [restoreRequest.snapshotTime] Point in time in which the app
     * restore should be done, formatted as a DateTime string.
     *
     * @param {object} [restoreRequest.recoverySource] Optional. Specifies the web
     * app that snapshot contents will be retrieved from.
     * If empty, the targeted web app will be used as the source.
     *
     * @param {string} [restoreRequest.recoverySource.location] Geographical
     * location of the source web app, e.g. SouthEastAsia, SouthCentralUS
     *
     * @param {string} [restoreRequest.recoverySource.id] ARM resource ID of the
     * source app.
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}
     * for production slots and
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName}
     * for other slots.
     *
     * @param {boolean} restoreRequest.overwrite If <code>true</code> the restore
     * operation can overwrite source app; otherwise, <code>false</code>.
     *
     * @param {boolean} [restoreRequest.recoverConfiguration] If true, site
     * configuration, in addition to content, will be reverted.
     *
     * @param {boolean} [restoreRequest.ignoreConflictingHostNames] If true, custom
     * hostname conflicts will be ignored when recovering to a target web app.
     * This setting is only necessary when RecoverConfiguration is enabled.
     *
     * @param {boolean} [restoreRequest.useDRSecondary] If true, the snapshot is
     * retrieved from DRSecondary endpoint.
     *
     * @param {string} [restoreRequest.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    restoreSnapshot(resourceGroupName: string, name: string, restoreRequest: models.SnapshotRestoreRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    restoreSnapshot(resourceGroupName: string, name: string, restoreRequest: models.SnapshotRestoreRequest, callback: ServiceCallback<void>): void;
    restoreSnapshot(resourceGroupName: string, name: string, restoreRequest: models.SnapshotRestoreRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Get list of siteextensions for a web site, or a deployment slot.
     *
     * Get list of siteextensions for a web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteExtensionInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSiteExtensionsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteExtensionInfoCollection>>;

    /**
     * @summary Get list of siteextensions for a web site, or a deployment slot.
     *
     * Get list of siteextensions for a web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteExtensionInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteExtensionInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteExtensionInfoCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSiteExtensions(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteExtensionInfoCollection>;
    listSiteExtensions(resourceGroupName: string, name: string, callback: ServiceCallback<models.SiteExtensionInfoCollection>): void;
    listSiteExtensions(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteExtensionInfoCollection>): void;


    /**
     * @summary Get site extension information by its ID for a web site, or a
     * deployment slot.
     *
     * Get site extension information by its ID for a web site, or a deployment
     * slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} siteExtensionId Site extension name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteExtensionInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSiteExtensionWithHttpOperationResponse(resourceGroupName: string, name: string, siteExtensionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteExtensionInfo>>;

    /**
     * @summary Get site extension information by its ID for a web site, or a
     * deployment slot.
     *
     * Get site extension information by its ID for a web site, or a deployment
     * slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} siteExtensionId Site extension name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteExtensionInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteExtensionInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteExtensionInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSiteExtension(resourceGroupName: string, name: string, siteExtensionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteExtensionInfo>;
    getSiteExtension(resourceGroupName: string, name: string, siteExtensionId: string, callback: ServiceCallback<models.SiteExtensionInfo>): void;
    getSiteExtension(resourceGroupName: string, name: string, siteExtensionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteExtensionInfo>): void;


    /**
     * @summary Install site extension on a web site, or a deployment slot.
     *
     * Install site extension on a web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} siteExtensionId Site extension name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteExtensionInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    installSiteExtensionWithHttpOperationResponse(resourceGroupName: string, name: string, siteExtensionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteExtensionInfo>>;

    /**
     * @summary Install site extension on a web site, or a deployment slot.
     *
     * Install site extension on a web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} siteExtensionId Site extension name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteExtensionInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteExtensionInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteExtensionInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    installSiteExtension(resourceGroupName: string, name: string, siteExtensionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteExtensionInfo>;
    installSiteExtension(resourceGroupName: string, name: string, siteExtensionId: string, callback: ServiceCallback<models.SiteExtensionInfo>): void;
    installSiteExtension(resourceGroupName: string, name: string, siteExtensionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteExtensionInfo>): void;


    /**
     * @summary Remove a site extension from a web site, or a deployment slot.
     *
     * Remove a site extension from a web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} siteExtensionId Site extension name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteSiteExtensionWithHttpOperationResponse(resourceGroupName: string, name: string, siteExtensionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Remove a site extension from a web site, or a deployment slot.
     *
     * Remove a site extension from a web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} siteExtensionId Site extension name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteSiteExtension(resourceGroupName: string, name: string, siteExtensionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteSiteExtension(resourceGroupName: string, name: string, siteExtensionId: string, callback: ServiceCallback<void>): void;
    deleteSiteExtension(resourceGroupName: string, name: string, siteExtensionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Gets an app's deployment slots.
     *
     * Gets an app's deployment slots.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WebAppCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSlotsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WebAppCollection>>;

    /**
     * @summary Gets an app's deployment slots.
     *
     * Gets an app's deployment slots.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WebAppCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WebAppCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WebAppCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSlots(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WebAppCollection>;
    listSlots(resourceGroupName: string, name: string, callback: ServiceCallback<models.WebAppCollection>): void;
    listSlots(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WebAppCollection>): void;


    /**
     * @summary Gets the details of a web, mobile, or API app.
     *
     * Gets the details of a web, mobile, or API app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. By default, this API
     * returns the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Site>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Site>>;

    /**
     * @summary Gets the details of a web, mobile, or API app.
     *
     * Gets the details of a web, mobile, or API app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. By default, this API
     * returns the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Site} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Site} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Site} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Site>;
    getSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.Site>): void;
    getSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Site>): void;


    /**
     * @summary Creates a new web, mobile, or API app in an existing resource
     * group, or updates an existing app.
     *
     * Creates a new web, mobile, or API app in an existing resource group, or
     * updates an existing app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Unique name of the app to create or update. To create
     * or update a deployment slot, use the {slot} parameter.
     *
     * @param {object} siteEnvelope A JSON representation of the app properties.
     * See example.
     *
     * @param {boolean} [siteEnvelope.enabled] <code>true</code> if the app is
     * enabled; otherwise, <code>false</code>. Setting this value to false disables
     * the app (takes the app offline).
     *
     * @param {array} [siteEnvelope.hostNameSslStates] Hostname SSL states are used
     * to manage the SSL bindings for app's hostnames.
     *
     * @param {string} [siteEnvelope.serverFarmId] Resource ID of the associated
     * App Service plan, formatted as:
     * "/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}".
     *
     * @param {boolean} [siteEnvelope.reserved] <code>true</code> if reserved;
     * otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.isXenon] Obsolete: Hyper-V sandbox.
     *
     * @param {boolean} [siteEnvelope.hyperV] Hyper-V sandbox.
     *
     * @param {object} [siteEnvelope.siteConfig] Configuration of the app.
     *
     * @param {number} [siteEnvelope.siteConfig.numberOfWorkers] Number of workers.
     *
     * @param {array} [siteEnvelope.siteConfig.defaultDocuments] Default documents.
     *
     * @param {string} [siteEnvelope.siteConfig.netFrameworkVersion] .NET Framework
     * version.
     *
     * @param {string} [siteEnvelope.siteConfig.phpVersion] Version of PHP.
     *
     * @param {string} [siteEnvelope.siteConfig.pythonVersion] Version of Python.
     *
     * @param {string} [siteEnvelope.siteConfig.nodeVersion] Version of Node.js.
     *
     * @param {string} [siteEnvelope.siteConfig.linuxFxVersion] Linux App Framework
     * and version
     *
     * @param {string} [siteEnvelope.siteConfig.windowsFxVersion] Xenon App
     * Framework and version
     *
     * @param {boolean} [siteEnvelope.siteConfig.requestTracingEnabled]
     * <code>true</code> if request tracing is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {date} [siteEnvelope.siteConfig.requestTracingExpirationTime] Request
     * tracing expiration time.
     *
     * @param {boolean} [siteEnvelope.siteConfig.remoteDebuggingEnabled]
     * <code>true</code> if remote debugging is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.remoteDebuggingVersion] Remote
     * debugging version.
     *
     * @param {boolean} [siteEnvelope.siteConfig.httpLoggingEnabled]
     * <code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.
     *
     * @param {number} [siteEnvelope.siteConfig.logsDirectorySizeLimit] HTTP logs
     * directory size limit.
     *
     * @param {boolean} [siteEnvelope.siteConfig.detailedErrorLoggingEnabled]
     * <code>true</code> if detailed error logging is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.publishingUsername] Publishing user
     * name.
     *
     * @param {array} [siteEnvelope.siteConfig.appSettings] Application settings.
     *
     * @param {object} [siteEnvelope.siteConfig.azureStorageAccounts] User-provided
     * Azure storage accounts.
     *
     * @param {array} [siteEnvelope.siteConfig.connectionStrings] Connection
     * strings.
     *
     * @param {array} [siteEnvelope.siteConfig.handlerMappings] Handler mappings.
     *
     * @param {string} [siteEnvelope.siteConfig.documentRoot] Document root.
     *
     * @param {string} [siteEnvelope.siteConfig.scmType] SCM type. Possible values
     * include: 'None', 'Dropbox', 'Tfs', 'LocalGit', 'GitHub', 'CodePlexGit',
     * 'CodePlexHg', 'BitbucketGit', 'BitbucketHg', 'ExternalGit', 'ExternalHg',
     * 'OneDrive', 'VSO'
     *
     * @param {boolean} [siteEnvelope.siteConfig.use32BitWorkerProcess]
     * <code>true</code> to use 32-bit worker process; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.siteConfig.webSocketsEnabled]
     * <code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.siteConfig.alwaysOn] <code>true</code> if
     * Always On is enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.javaVersion] Java version.
     *
     * @param {string} [siteEnvelope.siteConfig.javaContainer] Java container.
     *
     * @param {string} [siteEnvelope.siteConfig.javaContainerVersion] Java
     * container version.
     *
     * @param {string} [siteEnvelope.siteConfig.appCommandLine] App command line to
     * launch.
     *
     * @param {string} [siteEnvelope.siteConfig.managedPipelineMode] Managed
     * pipeline mode. Possible values include: 'Integrated', 'Classic'
     *
     * @param {array} [siteEnvelope.siteConfig.virtualApplications] Virtual
     * applications.
     *
     * @param {string} [siteEnvelope.siteConfig.loadBalancing] Site load balancing.
     * Possible values include: 'WeightedRoundRobin', 'LeastRequests',
     * 'LeastResponseTime', 'WeightedTotalTraffic', 'RequestHash'
     *
     * @param {object} [siteEnvelope.siteConfig.experiments] This is work around
     * for polymophic types.
     *
     * @param {array} [siteEnvelope.siteConfig.experiments.rampUpRules] List of
     * ramp-up rules.
     *
     * @param {object} [siteEnvelope.siteConfig.limits] Site limits.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxPercentageCpu] Maximum
     * allowed CPU usage percentage.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxMemoryInMb] Maximum
     * allowed memory usage in MB.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxDiskSizeInMb] Maximum
     * allowed disk size usage in MB.
     *
     * @param {boolean} [siteEnvelope.siteConfig.autoHealEnabled] <code>true</code>
     * if Auto Heal is enabled; otherwise, <code>false</code>.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules] Auto Heal rules.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.triggers] Conditions
     * that describe when to execute the auto-heal actions.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.triggers.requests] A
     * rule based on total requests.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.requests.count] Request
     * Count.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.requests.timeInterval] Time
     * interval.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.privateBytesInKB] A rule
     * based on private bytes.
     *
     * @param {array} [siteEnvelope.siteConfig.autoHealRules.triggers.statusCodes]
     * A rule based on status codes.
     *
     * @param {object}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests] A rule based
     * on request execution time.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.timeTaken] Time
     * taken.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.count] Request
     * Count.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.timeInterval]
     * Time interval.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.actions] Actions to
     * be executed when a rule is triggered.
     *
     * @param {string} [siteEnvelope.siteConfig.autoHealRules.actions.actionType]
     * Predefined action to be taken. Possible values include: 'Recycle',
     * 'LogEvent', 'CustomAction'
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.actions.customAction]
     * Custom action to be taken.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction.exe] Executable
     * to be run.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction.parameters]
     * Parameters for the executable.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.minProcessExecutionTime]
     * Minimum time the process must execute
     * before taking the action
     *
     * @param {string} [siteEnvelope.siteConfig.tracingOptions] Tracing options.
     *
     * @param {string} [siteEnvelope.siteConfig.vnetName] Virtual Network name.
     *
     * @param {object} [siteEnvelope.siteConfig.cors] Cross-Origin Resource Sharing
     * (CORS) settings.
     *
     * @param {array} [siteEnvelope.siteConfig.cors.allowedOrigins] Gets or sets
     * the list of origins that should be allowed to make cross-origin
     * calls (for example: http://example.com:12345). Use "*" to allow all.
     *
     * @param {object} [siteEnvelope.siteConfig.push] Push endpoint settings.
     *
     * @param {boolean} siteEnvelope.siteConfig.push.isPushEnabled Gets or sets a
     * flag indicating whether the Push endpoint is enabled.
     *
     * @param {string} [siteEnvelope.siteConfig.push.tagWhitelistJson] Gets or sets
     * a JSON string containing a list of tags that are whitelisted for use by the
     * push registration endpoint.
     *
     * @param {string} [siteEnvelope.siteConfig.push.tagsRequiringAuth] Gets or
     * sets a JSON string containing a list of tags that require user
     * authentication to be used in the push registration endpoint.
     * Tags can consist of alphanumeric characters and the following:
     * '_', '@', '#', '.', ':', '-'.
     * Validation should be performed at the PushRequestHandler.
     *
     * @param {string} [siteEnvelope.siteConfig.push.dynamicTagsJson] Gets or sets
     * a JSON string containing a list of dynamic tags that will be evaluated from
     * user claims in the push registration endpoint.
     *
     * @param {string} [siteEnvelope.siteConfig.push.kind] Kind of resource.
     *
     * @param {object} [siteEnvelope.siteConfig.apiDefinition] Information about
     * the formal API definition for the app.
     *
     * @param {string} [siteEnvelope.siteConfig.apiDefinition.url] The URL of the
     * API definition.
     *
     * @param {string} [siteEnvelope.siteConfig.autoSwapSlotName] Auto-swap slot
     * name.
     *
     * @param {boolean} [siteEnvelope.siteConfig.localMySqlEnabled]
     * <code>true</code> to enable local MySQL; otherwise, <code>false</code>.
     *
     * @param {number} [siteEnvelope.siteConfig.managedServiceIdentityId] Managed
     * Service Identity Id
     *
     * @param {number} [siteEnvelope.siteConfig.xManagedServiceIdentityId] Explicit
     * Managed Service Identity Id
     *
     * @param {array} [siteEnvelope.siteConfig.ipSecurityRestrictions] IP security
     * restrictions.
     *
     * @param {boolean} [siteEnvelope.siteConfig.http20Enabled] Http20Enabled:
     * configures a web site to allow clients to connect over http2.0
     *
     * @param {string} [siteEnvelope.siteConfig.minTlsVersion] MinTlsVersion:
     * configures the minimum version of TLS required for SSL requests. Possible
     * values include: '1.0', '1.1', '1.2'
     *
     * @param {string} [siteEnvelope.siteConfig.ftpsState] State of FTP / FTPS
     * service. Possible values include: 'AllAllowed', 'FtpsOnly', 'Disabled'
     *
     * @param {number} [siteEnvelope.siteConfig.reservedInstanceCount] Number of
     * reserved instances.
     * This setting only applies to the Consumption Plan
     *
     * @param {boolean} [siteEnvelope.scmSiteAlsoStopped] <code>true</code> to stop
     * SCM (KUDU) site when the app is stopped; otherwise, <code>false</code>. The
     * default is <code>false</code>.
     *
     * @param {object} [siteEnvelope.hostingEnvironmentProfile] App Service
     * Environment to use for the app.
     *
     * @param {string} [siteEnvelope.hostingEnvironmentProfile.id] Resource ID of
     * the App Service Environment.
     *
     * @param {boolean} [siteEnvelope.clientAffinityEnabled] <code>true</code> to
     * enable client affinity; <code>false</code> to stop sending session affinity
     * cookies, which route client requests in the same session to the same
     * instance. Default is <code>true</code>.
     *
     * @param {boolean} [siteEnvelope.clientCertEnabled] <code>true</code> to
     * enable client certificate authentication (TLS mutual authentication);
     * otherwise, <code>false</code>. Default is <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.hostNamesDisabled] <code>true</code> to
     * disable the public hostnames of the app; otherwise, <code>false</code>.
     * If <code>true</code>, the app is only accessible via API management process.
     *
     * @param {number} [siteEnvelope.containerSize] Size of the function container.
     *
     * @param {number} [siteEnvelope.dailyMemoryTimeQuota] Maximum allowed daily
     * memory-time quota (applicable on dynamic apps only).
     *
     * @param {object} [siteEnvelope.cloningInfo] If specified during app creation,
     * the app is cloned from a source app.
     *
     * @param {uuid} [siteEnvelope.cloningInfo.correlationId] Correlation ID of
     * cloning operation. This ID ties multiple cloning operations
     * together to use the same snapshot.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.overwrite] <code>true</code> to
     * overwrite destination app; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.cloneCustomHostNames]
     * <code>true</code> to clone custom hostnames from source app; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.cloneSourceControl]
     * <code>true</code> to clone source control from source app; otherwise,
     * <code>false</code>.
     *
     * @param {string} siteEnvelope.cloningInfo.sourceWebAppId ARM resource ID of
     * the source app. App resource ID is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}
     * for production slots and
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName}
     * for other slots.
     *
     * @param {string} [siteEnvelope.cloningInfo.hostingEnvironment] App Service
     * Environment.
     *
     * @param {object} [siteEnvelope.cloningInfo.appSettingsOverrides] Application
     * setting overrides for cloned app. If specified, these settings override the
     * settings cloned
     * from source app. Otherwise, application settings from source app are
     * retained.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.configureLoadBalancing]
     * <code>true</code> to configure load balancing for source and destination
     * app.
     *
     * @param {string} [siteEnvelope.cloningInfo.trafficManagerProfileId] ARM
     * resource ID of the Traffic Manager profile to use, if it exists. Traffic
     * Manager resource ID is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}.
     *
     * @param {string} [siteEnvelope.cloningInfo.trafficManagerProfileName] Name of
     * Traffic Manager profile to create. This is only needed if Traffic Manager
     * profile does not already exist.
     *
     * @param {boolean} [siteEnvelope.httpsOnly] HttpsOnly: configures a web site
     * to accept only https requests. Issues redirect for
     * http requests
     *
     * @param {object} [siteEnvelope.identity]
     *
     * @param {string} [siteEnvelope.identity.type] Type of managed service
     * identity. Possible values include: 'SystemAssigned', 'UserAssigned'
     *
     * @param {array} [siteEnvelope.identity.identityIds] Array of UserAssigned
     * managed service identities.
     *
     * @param {string} [siteEnvelope.kind] Kind of resource.
     *
     * @param {string} siteEnvelope.location Resource Location.
     *
     * @param {object} [siteEnvelope.tags] Resource tags.
     *
     * @param {string} slot Name of the deployment slot to create or update. By
     * default, this API attempts to create or modify the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Site>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateSlotWithHttpOperationResponse(resourceGroupName: string, name: string, siteEnvelope: models.Site, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Site>>;

    /**
     * @summary Creates a new web, mobile, or API app in an existing resource
     * group, or updates an existing app.
     *
     * Creates a new web, mobile, or API app in an existing resource group, or
     * updates an existing app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Unique name of the app to create or update. To create
     * or update a deployment slot, use the {slot} parameter.
     *
     * @param {object} siteEnvelope A JSON representation of the app properties.
     * See example.
     *
     * @param {boolean} [siteEnvelope.enabled] <code>true</code> if the app is
     * enabled; otherwise, <code>false</code>. Setting this value to false disables
     * the app (takes the app offline).
     *
     * @param {array} [siteEnvelope.hostNameSslStates] Hostname SSL states are used
     * to manage the SSL bindings for app's hostnames.
     *
     * @param {string} [siteEnvelope.serverFarmId] Resource ID of the associated
     * App Service plan, formatted as:
     * "/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}".
     *
     * @param {boolean} [siteEnvelope.reserved] <code>true</code> if reserved;
     * otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.isXenon] Obsolete: Hyper-V sandbox.
     *
     * @param {boolean} [siteEnvelope.hyperV] Hyper-V sandbox.
     *
     * @param {object} [siteEnvelope.siteConfig] Configuration of the app.
     *
     * @param {number} [siteEnvelope.siteConfig.numberOfWorkers] Number of workers.
     *
     * @param {array} [siteEnvelope.siteConfig.defaultDocuments] Default documents.
     *
     * @param {string} [siteEnvelope.siteConfig.netFrameworkVersion] .NET Framework
     * version.
     *
     * @param {string} [siteEnvelope.siteConfig.phpVersion] Version of PHP.
     *
     * @param {string} [siteEnvelope.siteConfig.pythonVersion] Version of Python.
     *
     * @param {string} [siteEnvelope.siteConfig.nodeVersion] Version of Node.js.
     *
     * @param {string} [siteEnvelope.siteConfig.linuxFxVersion] Linux App Framework
     * and version
     *
     * @param {string} [siteEnvelope.siteConfig.windowsFxVersion] Xenon App
     * Framework and version
     *
     * @param {boolean} [siteEnvelope.siteConfig.requestTracingEnabled]
     * <code>true</code> if request tracing is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {date} [siteEnvelope.siteConfig.requestTracingExpirationTime] Request
     * tracing expiration time.
     *
     * @param {boolean} [siteEnvelope.siteConfig.remoteDebuggingEnabled]
     * <code>true</code> if remote debugging is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.remoteDebuggingVersion] Remote
     * debugging version.
     *
     * @param {boolean} [siteEnvelope.siteConfig.httpLoggingEnabled]
     * <code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.
     *
     * @param {number} [siteEnvelope.siteConfig.logsDirectorySizeLimit] HTTP logs
     * directory size limit.
     *
     * @param {boolean} [siteEnvelope.siteConfig.detailedErrorLoggingEnabled]
     * <code>true</code> if detailed error logging is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.publishingUsername] Publishing user
     * name.
     *
     * @param {array} [siteEnvelope.siteConfig.appSettings] Application settings.
     *
     * @param {object} [siteEnvelope.siteConfig.azureStorageAccounts] User-provided
     * Azure storage accounts.
     *
     * @param {array} [siteEnvelope.siteConfig.connectionStrings] Connection
     * strings.
     *
     * @param {array} [siteEnvelope.siteConfig.handlerMappings] Handler mappings.
     *
     * @param {string} [siteEnvelope.siteConfig.documentRoot] Document root.
     *
     * @param {string} [siteEnvelope.siteConfig.scmType] SCM type. Possible values
     * include: 'None', 'Dropbox', 'Tfs', 'LocalGit', 'GitHub', 'CodePlexGit',
     * 'CodePlexHg', 'BitbucketGit', 'BitbucketHg', 'ExternalGit', 'ExternalHg',
     * 'OneDrive', 'VSO'
     *
     * @param {boolean} [siteEnvelope.siteConfig.use32BitWorkerProcess]
     * <code>true</code> to use 32-bit worker process; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.siteConfig.webSocketsEnabled]
     * <code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.siteConfig.alwaysOn] <code>true</code> if
     * Always On is enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.javaVersion] Java version.
     *
     * @param {string} [siteEnvelope.siteConfig.javaContainer] Java container.
     *
     * @param {string} [siteEnvelope.siteConfig.javaContainerVersion] Java
     * container version.
     *
     * @param {string} [siteEnvelope.siteConfig.appCommandLine] App command line to
     * launch.
     *
     * @param {string} [siteEnvelope.siteConfig.managedPipelineMode] Managed
     * pipeline mode. Possible values include: 'Integrated', 'Classic'
     *
     * @param {array} [siteEnvelope.siteConfig.virtualApplications] Virtual
     * applications.
     *
     * @param {string} [siteEnvelope.siteConfig.loadBalancing] Site load balancing.
     * Possible values include: 'WeightedRoundRobin', 'LeastRequests',
     * 'LeastResponseTime', 'WeightedTotalTraffic', 'RequestHash'
     *
     * @param {object} [siteEnvelope.siteConfig.experiments] This is work around
     * for polymophic types.
     *
     * @param {array} [siteEnvelope.siteConfig.experiments.rampUpRules] List of
     * ramp-up rules.
     *
     * @param {object} [siteEnvelope.siteConfig.limits] Site limits.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxPercentageCpu] Maximum
     * allowed CPU usage percentage.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxMemoryInMb] Maximum
     * allowed memory usage in MB.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxDiskSizeInMb] Maximum
     * allowed disk size usage in MB.
     *
     * @param {boolean} [siteEnvelope.siteConfig.autoHealEnabled] <code>true</code>
     * if Auto Heal is enabled; otherwise, <code>false</code>.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules] Auto Heal rules.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.triggers] Conditions
     * that describe when to execute the auto-heal actions.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.triggers.requests] A
     * rule based on total requests.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.requests.count] Request
     * Count.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.requests.timeInterval] Time
     * interval.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.privateBytesInKB] A rule
     * based on private bytes.
     *
     * @param {array} [siteEnvelope.siteConfig.autoHealRules.triggers.statusCodes]
     * A rule based on status codes.
     *
     * @param {object}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests] A rule based
     * on request execution time.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.timeTaken] Time
     * taken.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.count] Request
     * Count.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.timeInterval]
     * Time interval.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.actions] Actions to
     * be executed when a rule is triggered.
     *
     * @param {string} [siteEnvelope.siteConfig.autoHealRules.actions.actionType]
     * Predefined action to be taken. Possible values include: 'Recycle',
     * 'LogEvent', 'CustomAction'
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.actions.customAction]
     * Custom action to be taken.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction.exe] Executable
     * to be run.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction.parameters]
     * Parameters for the executable.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.minProcessExecutionTime]
     * Minimum time the process must execute
     * before taking the action
     *
     * @param {string} [siteEnvelope.siteConfig.tracingOptions] Tracing options.
     *
     * @param {string} [siteEnvelope.siteConfig.vnetName] Virtual Network name.
     *
     * @param {object} [siteEnvelope.siteConfig.cors] Cross-Origin Resource Sharing
     * (CORS) settings.
     *
     * @param {array} [siteEnvelope.siteConfig.cors.allowedOrigins] Gets or sets
     * the list of origins that should be allowed to make cross-origin
     * calls (for example: http://example.com:12345). Use "*" to allow all.
     *
     * @param {object} [siteEnvelope.siteConfig.push] Push endpoint settings.
     *
     * @param {boolean} siteEnvelope.siteConfig.push.isPushEnabled Gets or sets a
     * flag indicating whether the Push endpoint is enabled.
     *
     * @param {string} [siteEnvelope.siteConfig.push.tagWhitelistJson] Gets or sets
     * a JSON string containing a list of tags that are whitelisted for use by the
     * push registration endpoint.
     *
     * @param {string} [siteEnvelope.siteConfig.push.tagsRequiringAuth] Gets or
     * sets a JSON string containing a list of tags that require user
     * authentication to be used in the push registration endpoint.
     * Tags can consist of alphanumeric characters and the following:
     * '_', '@', '#', '.', ':', '-'.
     * Validation should be performed at the PushRequestHandler.
     *
     * @param {string} [siteEnvelope.siteConfig.push.dynamicTagsJson] Gets or sets
     * a JSON string containing a list of dynamic tags that will be evaluated from
     * user claims in the push registration endpoint.
     *
     * @param {string} [siteEnvelope.siteConfig.push.kind] Kind of resource.
     *
     * @param {object} [siteEnvelope.siteConfig.apiDefinition] Information about
     * the formal API definition for the app.
     *
     * @param {string} [siteEnvelope.siteConfig.apiDefinition.url] The URL of the
     * API definition.
     *
     * @param {string} [siteEnvelope.siteConfig.autoSwapSlotName] Auto-swap slot
     * name.
     *
     * @param {boolean} [siteEnvelope.siteConfig.localMySqlEnabled]
     * <code>true</code> to enable local MySQL; otherwise, <code>false</code>.
     *
     * @param {number} [siteEnvelope.siteConfig.managedServiceIdentityId] Managed
     * Service Identity Id
     *
     * @param {number} [siteEnvelope.siteConfig.xManagedServiceIdentityId] Explicit
     * Managed Service Identity Id
     *
     * @param {array} [siteEnvelope.siteConfig.ipSecurityRestrictions] IP security
     * restrictions.
     *
     * @param {boolean} [siteEnvelope.siteConfig.http20Enabled] Http20Enabled:
     * configures a web site to allow clients to connect over http2.0
     *
     * @param {string} [siteEnvelope.siteConfig.minTlsVersion] MinTlsVersion:
     * configures the minimum version of TLS required for SSL requests. Possible
     * values include: '1.0', '1.1', '1.2'
     *
     * @param {string} [siteEnvelope.siteConfig.ftpsState] State of FTP / FTPS
     * service. Possible values include: 'AllAllowed', 'FtpsOnly', 'Disabled'
     *
     * @param {number} [siteEnvelope.siteConfig.reservedInstanceCount] Number of
     * reserved instances.
     * This setting only applies to the Consumption Plan
     *
     * @param {boolean} [siteEnvelope.scmSiteAlsoStopped] <code>true</code> to stop
     * SCM (KUDU) site when the app is stopped; otherwise, <code>false</code>. The
     * default is <code>false</code>.
     *
     * @param {object} [siteEnvelope.hostingEnvironmentProfile] App Service
     * Environment to use for the app.
     *
     * @param {string} [siteEnvelope.hostingEnvironmentProfile.id] Resource ID of
     * the App Service Environment.
     *
     * @param {boolean} [siteEnvelope.clientAffinityEnabled] <code>true</code> to
     * enable client affinity; <code>false</code> to stop sending session affinity
     * cookies, which route client requests in the same session to the same
     * instance. Default is <code>true</code>.
     *
     * @param {boolean} [siteEnvelope.clientCertEnabled] <code>true</code> to
     * enable client certificate authentication (TLS mutual authentication);
     * otherwise, <code>false</code>. Default is <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.hostNamesDisabled] <code>true</code> to
     * disable the public hostnames of the app; otherwise, <code>false</code>.
     * If <code>true</code>, the app is only accessible via API management process.
     *
     * @param {number} [siteEnvelope.containerSize] Size of the function container.
     *
     * @param {number} [siteEnvelope.dailyMemoryTimeQuota] Maximum allowed daily
     * memory-time quota (applicable on dynamic apps only).
     *
     * @param {object} [siteEnvelope.cloningInfo] If specified during app creation,
     * the app is cloned from a source app.
     *
     * @param {uuid} [siteEnvelope.cloningInfo.correlationId] Correlation ID of
     * cloning operation. This ID ties multiple cloning operations
     * together to use the same snapshot.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.overwrite] <code>true</code> to
     * overwrite destination app; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.cloneCustomHostNames]
     * <code>true</code> to clone custom hostnames from source app; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.cloneSourceControl]
     * <code>true</code> to clone source control from source app; otherwise,
     * <code>false</code>.
     *
     * @param {string} siteEnvelope.cloningInfo.sourceWebAppId ARM resource ID of
     * the source app. App resource ID is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}
     * for production slots and
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName}
     * for other slots.
     *
     * @param {string} [siteEnvelope.cloningInfo.hostingEnvironment] App Service
     * Environment.
     *
     * @param {object} [siteEnvelope.cloningInfo.appSettingsOverrides] Application
     * setting overrides for cloned app. If specified, these settings override the
     * settings cloned
     * from source app. Otherwise, application settings from source app are
     * retained.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.configureLoadBalancing]
     * <code>true</code> to configure load balancing for source and destination
     * app.
     *
     * @param {string} [siteEnvelope.cloningInfo.trafficManagerProfileId] ARM
     * resource ID of the Traffic Manager profile to use, if it exists. Traffic
     * Manager resource ID is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}.
     *
     * @param {string} [siteEnvelope.cloningInfo.trafficManagerProfileName] Name of
     * Traffic Manager profile to create. This is only needed if Traffic Manager
     * profile does not already exist.
     *
     * @param {boolean} [siteEnvelope.httpsOnly] HttpsOnly: configures a web site
     * to accept only https requests. Issues redirect for
     * http requests
     *
     * @param {object} [siteEnvelope.identity]
     *
     * @param {string} [siteEnvelope.identity.type] Type of managed service
     * identity. Possible values include: 'SystemAssigned', 'UserAssigned'
     *
     * @param {array} [siteEnvelope.identity.identityIds] Array of UserAssigned
     * managed service identities.
     *
     * @param {string} [siteEnvelope.kind] Kind of resource.
     *
     * @param {string} siteEnvelope.location Resource Location.
     *
     * @param {object} [siteEnvelope.tags] Resource tags.
     *
     * @param {string} slot Name of the deployment slot to create or update. By
     * default, this API attempts to create or modify the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Site} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Site} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Site} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateSlot(resourceGroupName: string, name: string, siteEnvelope: models.Site, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Site>;
    createOrUpdateSlot(resourceGroupName: string, name: string, siteEnvelope: models.Site, slot: string, callback: ServiceCallback<models.Site>): void;
    createOrUpdateSlot(resourceGroupName: string, name: string, siteEnvelope: models.Site, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Site>): void;


    /**
     * @summary Deletes a web, mobile, or API app, or one of the deployment slots.
     *
     * Deletes a web, mobile, or API app, or one of the deployment slots.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app to delete.
     *
     * @param {string} slot Name of the deployment slot to delete. By default, the
     * API deletes the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.deleteMetrics] If true, web app metrics are also
     * deleted.
     *
     * @param {boolean} [options.deleteEmptyServerFarm] Specify true if the App
     * Service plan will be empty after app deletion and you want to delete the
     * empty App Service plan. By default, the empty App Service plan is not
     * deleted.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { deleteMetrics? : boolean, deleteEmptyServerFarm? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a web, mobile, or API app, or one of the deployment slots.
     *
     * Deletes a web, mobile, or API app, or one of the deployment slots.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app to delete.
     *
     * @param {string} slot Name of the deployment slot to delete. By default, the
     * API deletes the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.deleteMetrics] If true, web app metrics are also
     * deleted.
     *
     * @param {boolean} [options.deleteEmptyServerFarm] Specify true if the App
     * Service plan will be empty after app deletion and you want to delete the
     * empty App Service plan. By default, the empty App Service plan is not
     * deleted.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteSlot(resourceGroupName: string, name: string, slot: string, options?: { deleteMetrics? : boolean, deleteEmptyServerFarm? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<void>): void;
    deleteSlot(resourceGroupName: string, name: string, slot: string, options: { deleteMetrics? : boolean, deleteEmptyServerFarm? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Creates a new web, mobile, or API app in an existing resource
     * group, or updates an existing app.
     *
     * Creates a new web, mobile, or API app in an existing resource group, or
     * updates an existing app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Unique name of the app to create or update. To create
     * or update a deployment slot, use the {slot} parameter.
     *
     * @param {object} siteEnvelope A JSON representation of the app properties.
     * See example.
     *
     * @param {boolean} [siteEnvelope.enabled] <code>true</code> if the app is
     * enabled; otherwise, <code>false</code>. Setting this value to false disables
     * the app (takes the app offline).
     *
     * @param {array} [siteEnvelope.hostNameSslStates] Hostname SSL states are used
     * to manage the SSL bindings for app's hostnames.
     *
     * @param {string} [siteEnvelope.serverFarmId] Resource ID of the associated
     * App Service plan, formatted as:
     * "/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}".
     *
     * @param {boolean} [siteEnvelope.reserved] <code>true</code> if reserved;
     * otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.isXenon] Obsolete: Hyper-V sandbox.
     *
     * @param {boolean} [siteEnvelope.hyperV] Hyper-V sandbox.
     *
     * @param {object} [siteEnvelope.siteConfig] Configuration of the app.
     *
     * @param {number} [siteEnvelope.siteConfig.numberOfWorkers] Number of workers.
     *
     * @param {array} [siteEnvelope.siteConfig.defaultDocuments] Default documents.
     *
     * @param {string} [siteEnvelope.siteConfig.netFrameworkVersion] .NET Framework
     * version.
     *
     * @param {string} [siteEnvelope.siteConfig.phpVersion] Version of PHP.
     *
     * @param {string} [siteEnvelope.siteConfig.pythonVersion] Version of Python.
     *
     * @param {string} [siteEnvelope.siteConfig.nodeVersion] Version of Node.js.
     *
     * @param {string} [siteEnvelope.siteConfig.linuxFxVersion] Linux App Framework
     * and version
     *
     * @param {string} [siteEnvelope.siteConfig.windowsFxVersion] Xenon App
     * Framework and version
     *
     * @param {boolean} [siteEnvelope.siteConfig.requestTracingEnabled]
     * <code>true</code> if request tracing is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {date} [siteEnvelope.siteConfig.requestTracingExpirationTime] Request
     * tracing expiration time.
     *
     * @param {boolean} [siteEnvelope.siteConfig.remoteDebuggingEnabled]
     * <code>true</code> if remote debugging is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.remoteDebuggingVersion] Remote
     * debugging version.
     *
     * @param {boolean} [siteEnvelope.siteConfig.httpLoggingEnabled]
     * <code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.
     *
     * @param {number} [siteEnvelope.siteConfig.logsDirectorySizeLimit] HTTP logs
     * directory size limit.
     *
     * @param {boolean} [siteEnvelope.siteConfig.detailedErrorLoggingEnabled]
     * <code>true</code> if detailed error logging is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.publishingUsername] Publishing user
     * name.
     *
     * @param {array} [siteEnvelope.siteConfig.appSettings] Application settings.
     *
     * @param {object} [siteEnvelope.siteConfig.azureStorageAccounts] User-provided
     * Azure storage accounts.
     *
     * @param {array} [siteEnvelope.siteConfig.connectionStrings] Connection
     * strings.
     *
     * @param {array} [siteEnvelope.siteConfig.handlerMappings] Handler mappings.
     *
     * @param {string} [siteEnvelope.siteConfig.documentRoot] Document root.
     *
     * @param {string} [siteEnvelope.siteConfig.scmType] SCM type. Possible values
     * include: 'None', 'Dropbox', 'Tfs', 'LocalGit', 'GitHub', 'CodePlexGit',
     * 'CodePlexHg', 'BitbucketGit', 'BitbucketHg', 'ExternalGit', 'ExternalHg',
     * 'OneDrive', 'VSO'
     *
     * @param {boolean} [siteEnvelope.siteConfig.use32BitWorkerProcess]
     * <code>true</code> to use 32-bit worker process; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.siteConfig.webSocketsEnabled]
     * <code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.siteConfig.alwaysOn] <code>true</code> if
     * Always On is enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.javaVersion] Java version.
     *
     * @param {string} [siteEnvelope.siteConfig.javaContainer] Java container.
     *
     * @param {string} [siteEnvelope.siteConfig.javaContainerVersion] Java
     * container version.
     *
     * @param {string} [siteEnvelope.siteConfig.appCommandLine] App command line to
     * launch.
     *
     * @param {string} [siteEnvelope.siteConfig.managedPipelineMode] Managed
     * pipeline mode. Possible values include: 'Integrated', 'Classic'
     *
     * @param {array} [siteEnvelope.siteConfig.virtualApplications] Virtual
     * applications.
     *
     * @param {string} [siteEnvelope.siteConfig.loadBalancing] Site load balancing.
     * Possible values include: 'WeightedRoundRobin', 'LeastRequests',
     * 'LeastResponseTime', 'WeightedTotalTraffic', 'RequestHash'
     *
     * @param {object} [siteEnvelope.siteConfig.experiments] This is work around
     * for polymophic types.
     *
     * @param {array} [siteEnvelope.siteConfig.experiments.rampUpRules] List of
     * ramp-up rules.
     *
     * @param {object} [siteEnvelope.siteConfig.limits] Site limits.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxPercentageCpu] Maximum
     * allowed CPU usage percentage.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxMemoryInMb] Maximum
     * allowed memory usage in MB.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxDiskSizeInMb] Maximum
     * allowed disk size usage in MB.
     *
     * @param {boolean} [siteEnvelope.siteConfig.autoHealEnabled] <code>true</code>
     * if Auto Heal is enabled; otherwise, <code>false</code>.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules] Auto Heal rules.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.triggers] Conditions
     * that describe when to execute the auto-heal actions.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.triggers.requests] A
     * rule based on total requests.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.requests.count] Request
     * Count.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.requests.timeInterval] Time
     * interval.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.privateBytesInKB] A rule
     * based on private bytes.
     *
     * @param {array} [siteEnvelope.siteConfig.autoHealRules.triggers.statusCodes]
     * A rule based on status codes.
     *
     * @param {object}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests] A rule based
     * on request execution time.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.timeTaken] Time
     * taken.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.count] Request
     * Count.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.timeInterval]
     * Time interval.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.actions] Actions to
     * be executed when a rule is triggered.
     *
     * @param {string} [siteEnvelope.siteConfig.autoHealRules.actions.actionType]
     * Predefined action to be taken. Possible values include: 'Recycle',
     * 'LogEvent', 'CustomAction'
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.actions.customAction]
     * Custom action to be taken.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction.exe] Executable
     * to be run.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction.parameters]
     * Parameters for the executable.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.minProcessExecutionTime]
     * Minimum time the process must execute
     * before taking the action
     *
     * @param {string} [siteEnvelope.siteConfig.tracingOptions] Tracing options.
     *
     * @param {string} [siteEnvelope.siteConfig.vnetName] Virtual Network name.
     *
     * @param {object} [siteEnvelope.siteConfig.cors] Cross-Origin Resource Sharing
     * (CORS) settings.
     *
     * @param {array} [siteEnvelope.siteConfig.cors.allowedOrigins] Gets or sets
     * the list of origins that should be allowed to make cross-origin
     * calls (for example: http://example.com:12345). Use "*" to allow all.
     *
     * @param {object} [siteEnvelope.siteConfig.push] Push endpoint settings.
     *
     * @param {boolean} siteEnvelope.siteConfig.push.isPushEnabled Gets or sets a
     * flag indicating whether the Push endpoint is enabled.
     *
     * @param {string} [siteEnvelope.siteConfig.push.tagWhitelistJson] Gets or sets
     * a JSON string containing a list of tags that are whitelisted for use by the
     * push registration endpoint.
     *
     * @param {string} [siteEnvelope.siteConfig.push.tagsRequiringAuth] Gets or
     * sets a JSON string containing a list of tags that require user
     * authentication to be used in the push registration endpoint.
     * Tags can consist of alphanumeric characters and the following:
     * '_', '@', '#', '.', ':', '-'.
     * Validation should be performed at the PushRequestHandler.
     *
     * @param {string} [siteEnvelope.siteConfig.push.dynamicTagsJson] Gets or sets
     * a JSON string containing a list of dynamic tags that will be evaluated from
     * user claims in the push registration endpoint.
     *
     * @param {string} [siteEnvelope.siteConfig.push.kind] Kind of resource.
     *
     * @param {object} [siteEnvelope.siteConfig.apiDefinition] Information about
     * the formal API definition for the app.
     *
     * @param {string} [siteEnvelope.siteConfig.apiDefinition.url] The URL of the
     * API definition.
     *
     * @param {string} [siteEnvelope.siteConfig.autoSwapSlotName] Auto-swap slot
     * name.
     *
     * @param {boolean} [siteEnvelope.siteConfig.localMySqlEnabled]
     * <code>true</code> to enable local MySQL; otherwise, <code>false</code>.
     *
     * @param {number} [siteEnvelope.siteConfig.managedServiceIdentityId] Managed
     * Service Identity Id
     *
     * @param {number} [siteEnvelope.siteConfig.xManagedServiceIdentityId] Explicit
     * Managed Service Identity Id
     *
     * @param {array} [siteEnvelope.siteConfig.ipSecurityRestrictions] IP security
     * restrictions.
     *
     * @param {boolean} [siteEnvelope.siteConfig.http20Enabled] Http20Enabled:
     * configures a web site to allow clients to connect over http2.0
     *
     * @param {string} [siteEnvelope.siteConfig.minTlsVersion] MinTlsVersion:
     * configures the minimum version of TLS required for SSL requests. Possible
     * values include: '1.0', '1.1', '1.2'
     *
     * @param {string} [siteEnvelope.siteConfig.ftpsState] State of FTP / FTPS
     * service. Possible values include: 'AllAllowed', 'FtpsOnly', 'Disabled'
     *
     * @param {number} [siteEnvelope.siteConfig.reservedInstanceCount] Number of
     * reserved instances.
     * This setting only applies to the Consumption Plan
     *
     * @param {boolean} [siteEnvelope.scmSiteAlsoStopped] <code>true</code> to stop
     * SCM (KUDU) site when the app is stopped; otherwise, <code>false</code>. The
     * default is <code>false</code>.
     *
     * @param {object} [siteEnvelope.hostingEnvironmentProfile] App Service
     * Environment to use for the app.
     *
     * @param {string} [siteEnvelope.hostingEnvironmentProfile.id] Resource ID of
     * the App Service Environment.
     *
     * @param {boolean} [siteEnvelope.clientAffinityEnabled] <code>true</code> to
     * enable client affinity; <code>false</code> to stop sending session affinity
     * cookies, which route client requests in the same session to the same
     * instance. Default is <code>true</code>.
     *
     * @param {boolean} [siteEnvelope.clientCertEnabled] <code>true</code> to
     * enable client certificate authentication (TLS mutual authentication);
     * otherwise, <code>false</code>. Default is <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.hostNamesDisabled] <code>true</code> to
     * disable the public hostnames of the app; otherwise, <code>false</code>.
     * If <code>true</code>, the app is only accessible via API management process.
     *
     * @param {number} [siteEnvelope.containerSize] Size of the function container.
     *
     * @param {number} [siteEnvelope.dailyMemoryTimeQuota] Maximum allowed daily
     * memory-time quota (applicable on dynamic apps only).
     *
     * @param {object} [siteEnvelope.cloningInfo] If specified during app creation,
     * the app is cloned from a source app.
     *
     * @param {uuid} [siteEnvelope.cloningInfo.correlationId] Correlation ID of
     * cloning operation. This ID ties multiple cloning operations
     * together to use the same snapshot.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.overwrite] <code>true</code> to
     * overwrite destination app; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.cloneCustomHostNames]
     * <code>true</code> to clone custom hostnames from source app; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.cloneSourceControl]
     * <code>true</code> to clone source control from source app; otherwise,
     * <code>false</code>.
     *
     * @param {string} siteEnvelope.cloningInfo.sourceWebAppId ARM resource ID of
     * the source app. App resource ID is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}
     * for production slots and
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName}
     * for other slots.
     *
     * @param {string} [siteEnvelope.cloningInfo.hostingEnvironment] App Service
     * Environment.
     *
     * @param {object} [siteEnvelope.cloningInfo.appSettingsOverrides] Application
     * setting overrides for cloned app. If specified, these settings override the
     * settings cloned
     * from source app. Otherwise, application settings from source app are
     * retained.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.configureLoadBalancing]
     * <code>true</code> to configure load balancing for source and destination
     * app.
     *
     * @param {string} [siteEnvelope.cloningInfo.trafficManagerProfileId] ARM
     * resource ID of the Traffic Manager profile to use, if it exists. Traffic
     * Manager resource ID is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}.
     *
     * @param {string} [siteEnvelope.cloningInfo.trafficManagerProfileName] Name of
     * Traffic Manager profile to create. This is only needed if Traffic Manager
     * profile does not already exist.
     *
     * @param {boolean} [siteEnvelope.httpsOnly] HttpsOnly: configures a web site
     * to accept only https requests. Issues redirect for
     * http requests
     *
     * @param {string} [siteEnvelope.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot to create or update. By
     * default, this API attempts to create or modify the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Site>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateSlotWithHttpOperationResponse(resourceGroupName: string, name: string, siteEnvelope: models.SitePatchResource, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Site>>;

    /**
     * @summary Creates a new web, mobile, or API app in an existing resource
     * group, or updates an existing app.
     *
     * Creates a new web, mobile, or API app in an existing resource group, or
     * updates an existing app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Unique name of the app to create or update. To create
     * or update a deployment slot, use the {slot} parameter.
     *
     * @param {object} siteEnvelope A JSON representation of the app properties.
     * See example.
     *
     * @param {boolean} [siteEnvelope.enabled] <code>true</code> if the app is
     * enabled; otherwise, <code>false</code>. Setting this value to false disables
     * the app (takes the app offline).
     *
     * @param {array} [siteEnvelope.hostNameSslStates] Hostname SSL states are used
     * to manage the SSL bindings for app's hostnames.
     *
     * @param {string} [siteEnvelope.serverFarmId] Resource ID of the associated
     * App Service plan, formatted as:
     * "/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}".
     *
     * @param {boolean} [siteEnvelope.reserved] <code>true</code> if reserved;
     * otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.isXenon] Obsolete: Hyper-V sandbox.
     *
     * @param {boolean} [siteEnvelope.hyperV] Hyper-V sandbox.
     *
     * @param {object} [siteEnvelope.siteConfig] Configuration of the app.
     *
     * @param {number} [siteEnvelope.siteConfig.numberOfWorkers] Number of workers.
     *
     * @param {array} [siteEnvelope.siteConfig.defaultDocuments] Default documents.
     *
     * @param {string} [siteEnvelope.siteConfig.netFrameworkVersion] .NET Framework
     * version.
     *
     * @param {string} [siteEnvelope.siteConfig.phpVersion] Version of PHP.
     *
     * @param {string} [siteEnvelope.siteConfig.pythonVersion] Version of Python.
     *
     * @param {string} [siteEnvelope.siteConfig.nodeVersion] Version of Node.js.
     *
     * @param {string} [siteEnvelope.siteConfig.linuxFxVersion] Linux App Framework
     * and version
     *
     * @param {string} [siteEnvelope.siteConfig.windowsFxVersion] Xenon App
     * Framework and version
     *
     * @param {boolean} [siteEnvelope.siteConfig.requestTracingEnabled]
     * <code>true</code> if request tracing is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {date} [siteEnvelope.siteConfig.requestTracingExpirationTime] Request
     * tracing expiration time.
     *
     * @param {boolean} [siteEnvelope.siteConfig.remoteDebuggingEnabled]
     * <code>true</code> if remote debugging is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.remoteDebuggingVersion] Remote
     * debugging version.
     *
     * @param {boolean} [siteEnvelope.siteConfig.httpLoggingEnabled]
     * <code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.
     *
     * @param {number} [siteEnvelope.siteConfig.logsDirectorySizeLimit] HTTP logs
     * directory size limit.
     *
     * @param {boolean} [siteEnvelope.siteConfig.detailedErrorLoggingEnabled]
     * <code>true</code> if detailed error logging is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.publishingUsername] Publishing user
     * name.
     *
     * @param {array} [siteEnvelope.siteConfig.appSettings] Application settings.
     *
     * @param {object} [siteEnvelope.siteConfig.azureStorageAccounts] User-provided
     * Azure storage accounts.
     *
     * @param {array} [siteEnvelope.siteConfig.connectionStrings] Connection
     * strings.
     *
     * @param {array} [siteEnvelope.siteConfig.handlerMappings] Handler mappings.
     *
     * @param {string} [siteEnvelope.siteConfig.documentRoot] Document root.
     *
     * @param {string} [siteEnvelope.siteConfig.scmType] SCM type. Possible values
     * include: 'None', 'Dropbox', 'Tfs', 'LocalGit', 'GitHub', 'CodePlexGit',
     * 'CodePlexHg', 'BitbucketGit', 'BitbucketHg', 'ExternalGit', 'ExternalHg',
     * 'OneDrive', 'VSO'
     *
     * @param {boolean} [siteEnvelope.siteConfig.use32BitWorkerProcess]
     * <code>true</code> to use 32-bit worker process; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.siteConfig.webSocketsEnabled]
     * <code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.siteConfig.alwaysOn] <code>true</code> if
     * Always On is enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.javaVersion] Java version.
     *
     * @param {string} [siteEnvelope.siteConfig.javaContainer] Java container.
     *
     * @param {string} [siteEnvelope.siteConfig.javaContainerVersion] Java
     * container version.
     *
     * @param {string} [siteEnvelope.siteConfig.appCommandLine] App command line to
     * launch.
     *
     * @param {string} [siteEnvelope.siteConfig.managedPipelineMode] Managed
     * pipeline mode. Possible values include: 'Integrated', 'Classic'
     *
     * @param {array} [siteEnvelope.siteConfig.virtualApplications] Virtual
     * applications.
     *
     * @param {string} [siteEnvelope.siteConfig.loadBalancing] Site load balancing.
     * Possible values include: 'WeightedRoundRobin', 'LeastRequests',
     * 'LeastResponseTime', 'WeightedTotalTraffic', 'RequestHash'
     *
     * @param {object} [siteEnvelope.siteConfig.experiments] This is work around
     * for polymophic types.
     *
     * @param {array} [siteEnvelope.siteConfig.experiments.rampUpRules] List of
     * ramp-up rules.
     *
     * @param {object} [siteEnvelope.siteConfig.limits] Site limits.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxPercentageCpu] Maximum
     * allowed CPU usage percentage.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxMemoryInMb] Maximum
     * allowed memory usage in MB.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxDiskSizeInMb] Maximum
     * allowed disk size usage in MB.
     *
     * @param {boolean} [siteEnvelope.siteConfig.autoHealEnabled] <code>true</code>
     * if Auto Heal is enabled; otherwise, <code>false</code>.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules] Auto Heal rules.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.triggers] Conditions
     * that describe when to execute the auto-heal actions.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.triggers.requests] A
     * rule based on total requests.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.requests.count] Request
     * Count.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.requests.timeInterval] Time
     * interval.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.privateBytesInKB] A rule
     * based on private bytes.
     *
     * @param {array} [siteEnvelope.siteConfig.autoHealRules.triggers.statusCodes]
     * A rule based on status codes.
     *
     * @param {object}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests] A rule based
     * on request execution time.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.timeTaken] Time
     * taken.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.count] Request
     * Count.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.timeInterval]
     * Time interval.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.actions] Actions to
     * be executed when a rule is triggered.
     *
     * @param {string} [siteEnvelope.siteConfig.autoHealRules.actions.actionType]
     * Predefined action to be taken. Possible values include: 'Recycle',
     * 'LogEvent', 'CustomAction'
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.actions.customAction]
     * Custom action to be taken.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction.exe] Executable
     * to be run.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction.parameters]
     * Parameters for the executable.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.minProcessExecutionTime]
     * Minimum time the process must execute
     * before taking the action
     *
     * @param {string} [siteEnvelope.siteConfig.tracingOptions] Tracing options.
     *
     * @param {string} [siteEnvelope.siteConfig.vnetName] Virtual Network name.
     *
     * @param {object} [siteEnvelope.siteConfig.cors] Cross-Origin Resource Sharing
     * (CORS) settings.
     *
     * @param {array} [siteEnvelope.siteConfig.cors.allowedOrigins] Gets or sets
     * the list of origins that should be allowed to make cross-origin
     * calls (for example: http://example.com:12345). Use "*" to allow all.
     *
     * @param {object} [siteEnvelope.siteConfig.push] Push endpoint settings.
     *
     * @param {boolean} siteEnvelope.siteConfig.push.isPushEnabled Gets or sets a
     * flag indicating whether the Push endpoint is enabled.
     *
     * @param {string} [siteEnvelope.siteConfig.push.tagWhitelistJson] Gets or sets
     * a JSON string containing a list of tags that are whitelisted for use by the
     * push registration endpoint.
     *
     * @param {string} [siteEnvelope.siteConfig.push.tagsRequiringAuth] Gets or
     * sets a JSON string containing a list of tags that require user
     * authentication to be used in the push registration endpoint.
     * Tags can consist of alphanumeric characters and the following:
     * '_', '@', '#', '.', ':', '-'.
     * Validation should be performed at the PushRequestHandler.
     *
     * @param {string} [siteEnvelope.siteConfig.push.dynamicTagsJson] Gets or sets
     * a JSON string containing a list of dynamic tags that will be evaluated from
     * user claims in the push registration endpoint.
     *
     * @param {string} [siteEnvelope.siteConfig.push.kind] Kind of resource.
     *
     * @param {object} [siteEnvelope.siteConfig.apiDefinition] Information about
     * the formal API definition for the app.
     *
     * @param {string} [siteEnvelope.siteConfig.apiDefinition.url] The URL of the
     * API definition.
     *
     * @param {string} [siteEnvelope.siteConfig.autoSwapSlotName] Auto-swap slot
     * name.
     *
     * @param {boolean} [siteEnvelope.siteConfig.localMySqlEnabled]
     * <code>true</code> to enable local MySQL; otherwise, <code>false</code>.
     *
     * @param {number} [siteEnvelope.siteConfig.managedServiceIdentityId] Managed
     * Service Identity Id
     *
     * @param {number} [siteEnvelope.siteConfig.xManagedServiceIdentityId] Explicit
     * Managed Service Identity Id
     *
     * @param {array} [siteEnvelope.siteConfig.ipSecurityRestrictions] IP security
     * restrictions.
     *
     * @param {boolean} [siteEnvelope.siteConfig.http20Enabled] Http20Enabled:
     * configures a web site to allow clients to connect over http2.0
     *
     * @param {string} [siteEnvelope.siteConfig.minTlsVersion] MinTlsVersion:
     * configures the minimum version of TLS required for SSL requests. Possible
     * values include: '1.0', '1.1', '1.2'
     *
     * @param {string} [siteEnvelope.siteConfig.ftpsState] State of FTP / FTPS
     * service. Possible values include: 'AllAllowed', 'FtpsOnly', 'Disabled'
     *
     * @param {number} [siteEnvelope.siteConfig.reservedInstanceCount] Number of
     * reserved instances.
     * This setting only applies to the Consumption Plan
     *
     * @param {boolean} [siteEnvelope.scmSiteAlsoStopped] <code>true</code> to stop
     * SCM (KUDU) site when the app is stopped; otherwise, <code>false</code>. The
     * default is <code>false</code>.
     *
     * @param {object} [siteEnvelope.hostingEnvironmentProfile] App Service
     * Environment to use for the app.
     *
     * @param {string} [siteEnvelope.hostingEnvironmentProfile.id] Resource ID of
     * the App Service Environment.
     *
     * @param {boolean} [siteEnvelope.clientAffinityEnabled] <code>true</code> to
     * enable client affinity; <code>false</code> to stop sending session affinity
     * cookies, which route client requests in the same session to the same
     * instance. Default is <code>true</code>.
     *
     * @param {boolean} [siteEnvelope.clientCertEnabled] <code>true</code> to
     * enable client certificate authentication (TLS mutual authentication);
     * otherwise, <code>false</code>. Default is <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.hostNamesDisabled] <code>true</code> to
     * disable the public hostnames of the app; otherwise, <code>false</code>.
     * If <code>true</code>, the app is only accessible via API management process.
     *
     * @param {number} [siteEnvelope.containerSize] Size of the function container.
     *
     * @param {number} [siteEnvelope.dailyMemoryTimeQuota] Maximum allowed daily
     * memory-time quota (applicable on dynamic apps only).
     *
     * @param {object} [siteEnvelope.cloningInfo] If specified during app creation,
     * the app is cloned from a source app.
     *
     * @param {uuid} [siteEnvelope.cloningInfo.correlationId] Correlation ID of
     * cloning operation. This ID ties multiple cloning operations
     * together to use the same snapshot.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.overwrite] <code>true</code> to
     * overwrite destination app; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.cloneCustomHostNames]
     * <code>true</code> to clone custom hostnames from source app; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.cloneSourceControl]
     * <code>true</code> to clone source control from source app; otherwise,
     * <code>false</code>.
     *
     * @param {string} siteEnvelope.cloningInfo.sourceWebAppId ARM resource ID of
     * the source app. App resource ID is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}
     * for production slots and
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName}
     * for other slots.
     *
     * @param {string} [siteEnvelope.cloningInfo.hostingEnvironment] App Service
     * Environment.
     *
     * @param {object} [siteEnvelope.cloningInfo.appSettingsOverrides] Application
     * setting overrides for cloned app. If specified, these settings override the
     * settings cloned
     * from source app. Otherwise, application settings from source app are
     * retained.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.configureLoadBalancing]
     * <code>true</code> to configure load balancing for source and destination
     * app.
     *
     * @param {string} [siteEnvelope.cloningInfo.trafficManagerProfileId] ARM
     * resource ID of the Traffic Manager profile to use, if it exists. Traffic
     * Manager resource ID is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}.
     *
     * @param {string} [siteEnvelope.cloningInfo.trafficManagerProfileName] Name of
     * Traffic Manager profile to create. This is only needed if Traffic Manager
     * profile does not already exist.
     *
     * @param {boolean} [siteEnvelope.httpsOnly] HttpsOnly: configures a web site
     * to accept only https requests. Issues redirect for
     * http requests
     *
     * @param {string} [siteEnvelope.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot to create or update. By
     * default, this API attempts to create or modify the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Site} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Site} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Site} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateSlot(resourceGroupName: string, name: string, siteEnvelope: models.SitePatchResource, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Site>;
    updateSlot(resourceGroupName: string, name: string, siteEnvelope: models.SitePatchResource, slot: string, callback: ServiceCallback<models.Site>): void;
    updateSlot(resourceGroupName: string, name: string, siteEnvelope: models.SitePatchResource, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Site>): void;


    /**
     * @summary Analyze a custom hostname.
     *
     * Analyze a custom hostname.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.hostName] Custom hostname.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CustomHostnameAnalysisResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    analyzeCustomHostnameSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { hostName? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CustomHostnameAnalysisResult>>;

    /**
     * @summary Analyze a custom hostname.
     *
     * Analyze a custom hostname.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.hostName] Custom hostname.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CustomHostnameAnalysisResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CustomHostnameAnalysisResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CustomHostnameAnalysisResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    analyzeCustomHostnameSlot(resourceGroupName: string, name: string, slot: string, options?: { hostName? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.CustomHostnameAnalysisResult>;
    analyzeCustomHostnameSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.CustomHostnameAnalysisResult>): void;
    analyzeCustomHostnameSlot(resourceGroupName: string, name: string, slot: string, options: { hostName? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CustomHostnameAnalysisResult>): void;


    /**
     * @summary Applies the configuration settings from the target slot onto the
     * current slot.
     *
     * Applies the configuration settings from the target slot onto the current
     * slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} slotSwapEntity JSON object that contains the target slot
     * name. See example.
     *
     * @param {string} slotSwapEntity.targetSlot Destination deployment slot during
     * swap operation.
     *
     * @param {boolean} slotSwapEntity.preserveVnet <code>true</code> to preserve
     * Virtual Network to the slot during swap; otherwise, <code>false</code>.
     *
     * @param {string} slot Name of the source slot. If a slot is not specified,
     * the production slot is used as the source slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    applySlotConfigurationSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Applies the configuration settings from the target slot onto the
     * current slot.
     *
     * Applies the configuration settings from the target slot onto the current
     * slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} slotSwapEntity JSON object that contains the target slot
     * name. See example.
     *
     * @param {string} slotSwapEntity.targetSlot Destination deployment slot during
     * swap operation.
     *
     * @param {boolean} slotSwapEntity.preserveVnet <code>true</code> to preserve
     * Virtual Network to the slot during swap; otherwise, <code>false</code>.
     *
     * @param {string} slot Name of the source slot. If a slot is not specified,
     * the production slot is used as the source slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    applySlotConfigurationSlot(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    applySlotConfigurationSlot(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, slot: string, callback: ServiceCallback<void>): void;
    applySlotConfigurationSlot(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Creates a backup of an app.
     *
     * Creates a backup of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} request Backup configuration. You can use the JSON response
     * from the POST action as input here.
     *
     * @param {string} [request.backupName] Name of the backup.
     *
     * @param {boolean} [request.enabled] True if the backup schedule is enabled
     * (must be included in that case), false if the backup schedule should be
     * disabled.
     *
     * @param {string} request.storageAccountUrl SAS URL to the container.
     *
     * @param {object} [request.backupSchedule] Schedule for the backup if it is
     * executed periodically.
     *
     * @param {number} request.backupSchedule.frequencyInterval How often the
     * backup should be executed (e.g. for weekly backup, this should be set to 7
     * and FrequencyUnit should be set to Day)
     *
     * @param {string} request.backupSchedule.frequencyUnit The unit of time for
     * how often the backup should be executed (e.g. for weekly backup, this should
     * be set to Day and FrequencyInterval should be set to 7). Possible values
     * include: 'Day', 'Hour'
     *
     * @param {boolean} request.backupSchedule.keepAtLeastOneBackup True if the
     * retention policy should always keep at least one backup in the storage
     * account, regardless how old it is; false otherwise.
     *
     * @param {number} request.backupSchedule.retentionPeriodInDays After how many
     * days backups should be deleted.
     *
     * @param {date} [request.backupSchedule.startTime] When the schedule should
     * start working.
     *
     * @param {array} [request.databases] Databases included in the backup.
     *
     * @param {string} [request.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will create a backup for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupItem>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    backupSlotWithHttpOperationResponse(resourceGroupName: string, name: string, request: models.BackupRequest, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupItem>>;

    /**
     * @summary Creates a backup of an app.
     *
     * Creates a backup of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} request Backup configuration. You can use the JSON response
     * from the POST action as input here.
     *
     * @param {string} [request.backupName] Name of the backup.
     *
     * @param {boolean} [request.enabled] True if the backup schedule is enabled
     * (must be included in that case), false if the backup schedule should be
     * disabled.
     *
     * @param {string} request.storageAccountUrl SAS URL to the container.
     *
     * @param {object} [request.backupSchedule] Schedule for the backup if it is
     * executed periodically.
     *
     * @param {number} request.backupSchedule.frequencyInterval How often the
     * backup should be executed (e.g. for weekly backup, this should be set to 7
     * and FrequencyUnit should be set to Day)
     *
     * @param {string} request.backupSchedule.frequencyUnit The unit of time for
     * how often the backup should be executed (e.g. for weekly backup, this should
     * be set to Day and FrequencyInterval should be set to 7). Possible values
     * include: 'Day', 'Hour'
     *
     * @param {boolean} request.backupSchedule.keepAtLeastOneBackup True if the
     * retention policy should always keep at least one backup in the storage
     * account, regardless how old it is; false otherwise.
     *
     * @param {number} request.backupSchedule.retentionPeriodInDays After how many
     * days backups should be deleted.
     *
     * @param {date} [request.backupSchedule.startTime] When the schedule should
     * start working.
     *
     * @param {array} [request.databases] Databases included in the backup.
     *
     * @param {string} [request.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will create a backup for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupItem} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupItem} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupItem} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    backupSlot(resourceGroupName: string, name: string, request: models.BackupRequest, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupItem>;
    backupSlot(resourceGroupName: string, name: string, request: models.BackupRequest, slot: string, callback: ServiceCallback<models.BackupItem>): void;
    backupSlot(resourceGroupName: string, name: string, request: models.BackupRequest, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupItem>): void;


    /**
     * @summary Gets existing backups of an app.
     *
     * Gets existing backups of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get backups of the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupItemCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBackupsSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupItemCollection>>;

    /**
     * @summary Gets existing backups of an app.
     *
     * Gets existing backups of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get backups of the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupItemCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupItemCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupItemCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBackupsSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupItemCollection>;
    listBackupsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.BackupItemCollection>): void;
    listBackupsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupItemCollection>): void;


    /**
     * @summary Gets a backup of an app by its ID.
     *
     * Gets a backup of an app by its ID.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} backupId ID of the backup.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get a backup of the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupItem>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getBackupStatusSlotWithHttpOperationResponse(resourceGroupName: string, name: string, backupId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupItem>>;

    /**
     * @summary Gets a backup of an app by its ID.
     *
     * Gets a backup of an app by its ID.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} backupId ID of the backup.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get a backup of the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupItem} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupItem} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupItem} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getBackupStatusSlot(resourceGroupName: string, name: string, backupId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupItem>;
    getBackupStatusSlot(resourceGroupName: string, name: string, backupId: string, slot: string, callback: ServiceCallback<models.BackupItem>): void;
    getBackupStatusSlot(resourceGroupName: string, name: string, backupId: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupItem>): void;


    /**
     * @summary Deletes a backup of an app by its ID.
     *
     * Deletes a backup of an app by its ID.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} backupId ID of the backup.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will delete a backup of the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteBackupSlotWithHttpOperationResponse(resourceGroupName: string, name: string, backupId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a backup of an app by its ID.
     *
     * Deletes a backup of an app by its ID.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} backupId ID of the backup.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will delete a backup of the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteBackupSlot(resourceGroupName: string, name: string, backupId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteBackupSlot(resourceGroupName: string, name: string, backupId: string, slot: string, callback: ServiceCallback<void>): void;
    deleteBackupSlot(resourceGroupName: string, name: string, backupId: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Gets status of a web app backup that may be in progress, including
     * secrets associated with the backup, such as the Azure Storage SAS URL. Also
     * can be used to update the SAS URL for the backup if a new URL is passed in
     * the request body.
     *
     * Gets status of a web app backup that may be in progress, including secrets
     * associated with the backup, such as the Azure Storage SAS URL. Also can be
     * used to update the SAS URL for the backup if a new URL is passed in the
     * request body.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} backupId ID of backup.
     *
     * @param {object} request Information on backup request.
     *
     * @param {string} [request.backupName] Name of the backup.
     *
     * @param {boolean} [request.enabled] True if the backup schedule is enabled
     * (must be included in that case), false if the backup schedule should be
     * disabled.
     *
     * @param {string} request.storageAccountUrl SAS URL to the container.
     *
     * @param {object} [request.backupSchedule] Schedule for the backup if it is
     * executed periodically.
     *
     * @param {number} request.backupSchedule.frequencyInterval How often the
     * backup should be executed (e.g. for weekly backup, this should be set to 7
     * and FrequencyUnit should be set to Day)
     *
     * @param {string} request.backupSchedule.frequencyUnit The unit of time for
     * how often the backup should be executed (e.g. for weekly backup, this should
     * be set to Day and FrequencyInterval should be set to 7). Possible values
     * include: 'Day', 'Hour'
     *
     * @param {boolean} request.backupSchedule.keepAtLeastOneBackup True if the
     * retention policy should always keep at least one backup in the storage
     * account, regardless how old it is; false otherwise.
     *
     * @param {number} request.backupSchedule.retentionPeriodInDays After how many
     * days backups should be deleted.
     *
     * @param {date} [request.backupSchedule.startTime] When the schedule should
     * start working.
     *
     * @param {array} [request.databases] Databases included in the backup.
     *
     * @param {string} [request.kind] Kind of resource.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupItem>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBackupStatusSecretsSlotWithHttpOperationResponse(resourceGroupName: string, name: string, backupId: string, request: models.BackupRequest, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupItem>>;

    /**
     * @summary Gets status of a web app backup that may be in progress, including
     * secrets associated with the backup, such as the Azure Storage SAS URL. Also
     * can be used to update the SAS URL for the backup if a new URL is passed in
     * the request body.
     *
     * Gets status of a web app backup that may be in progress, including secrets
     * associated with the backup, such as the Azure Storage SAS URL. Also can be
     * used to update the SAS URL for the backup if a new URL is passed in the
     * request body.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} backupId ID of backup.
     *
     * @param {object} request Information on backup request.
     *
     * @param {string} [request.backupName] Name of the backup.
     *
     * @param {boolean} [request.enabled] True if the backup schedule is enabled
     * (must be included in that case), false if the backup schedule should be
     * disabled.
     *
     * @param {string} request.storageAccountUrl SAS URL to the container.
     *
     * @param {object} [request.backupSchedule] Schedule for the backup if it is
     * executed periodically.
     *
     * @param {number} request.backupSchedule.frequencyInterval How often the
     * backup should be executed (e.g. for weekly backup, this should be set to 7
     * and FrequencyUnit should be set to Day)
     *
     * @param {string} request.backupSchedule.frequencyUnit The unit of time for
     * how often the backup should be executed (e.g. for weekly backup, this should
     * be set to Day and FrequencyInterval should be set to 7). Possible values
     * include: 'Day', 'Hour'
     *
     * @param {boolean} request.backupSchedule.keepAtLeastOneBackup True if the
     * retention policy should always keep at least one backup in the storage
     * account, regardless how old it is; false otherwise.
     *
     * @param {number} request.backupSchedule.retentionPeriodInDays After how many
     * days backups should be deleted.
     *
     * @param {date} [request.backupSchedule.startTime] When the schedule should
     * start working.
     *
     * @param {array} [request.databases] Databases included in the backup.
     *
     * @param {string} [request.kind] Kind of resource.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupItem} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupItem} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupItem} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBackupStatusSecretsSlot(resourceGroupName: string, name: string, backupId: string, request: models.BackupRequest, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupItem>;
    listBackupStatusSecretsSlot(resourceGroupName: string, name: string, backupId: string, request: models.BackupRequest, slot: string, callback: ServiceCallback<models.BackupItem>): void;
    listBackupStatusSecretsSlot(resourceGroupName: string, name: string, backupId: string, request: models.BackupRequest, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupItem>): void;


    /**
     * @summary Restores a specific backup to another app (or deployment slot, if
     * specified).
     *
     * Restores a specific backup to another app (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} backupId ID of the backup.
     *
     * @param {object} request Information on restore request .
     *
     * @param {string} request.storageAccountUrl SAS URL to the container.
     *
     * @param {string} [request.blobName] Name of a blob which contains the backup.
     *
     * @param {boolean} request.overwrite <code>true</code> if the restore
     * operation can overwrite target app; otherwise, <code>false</code>.
     * <code>true</code> is needed if trying to restore over an existing app.
     *
     * @param {string} [request.siteName] Name of an app.
     *
     * @param {array} [request.databases] Collection of databases which should be
     * restored. This list has to match the list of databases included in the
     * backup.
     *
     * @param {boolean} [request.ignoreConflictingHostNames] Changes a logic when
     * restoring an app with custom domains. <code>true</code> to remove custom
     * domains automatically. If <code>false</code>, custom domains are added to
     * the app's object when it is being restored, but that might fail due to
     * conflicts during the operation.
     *
     * @param {boolean} [request.ignoreDatabases] Ignore the databases and only
     * restore the site content
     *
     * @param {string} [request.appServicePlan] Specify app service plan that will
     * own restored site.
     *
     * @param {string} [request.operationType] Operation type. Possible values
     * include: 'Default', 'Clone', 'Relocation', 'Snapshot', 'CloudFS'
     *
     * @param {boolean} [request.adjustConnectionStrings] <code>true</code> if
     * SiteConfig.ConnectionStrings should be set in new app; otherwise,
     * <code>false</code>.
     *
     * @param {string} [request.hostingEnvironment] App Service Environment name,
     * if needed (only when restoring an app to an App Service Environment).
     *
     * @param {string} [request.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will restore a backup of the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    restoreSlotWithHttpOperationResponse(resourceGroupName: string, name: string, backupId: string, request: models.RestoreRequest, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Restores a specific backup to another app (or deployment slot, if
     * specified).
     *
     * Restores a specific backup to another app (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} backupId ID of the backup.
     *
     * @param {object} request Information on restore request .
     *
     * @param {string} request.storageAccountUrl SAS URL to the container.
     *
     * @param {string} [request.blobName] Name of a blob which contains the backup.
     *
     * @param {boolean} request.overwrite <code>true</code> if the restore
     * operation can overwrite target app; otherwise, <code>false</code>.
     * <code>true</code> is needed if trying to restore over an existing app.
     *
     * @param {string} [request.siteName] Name of an app.
     *
     * @param {array} [request.databases] Collection of databases which should be
     * restored. This list has to match the list of databases included in the
     * backup.
     *
     * @param {boolean} [request.ignoreConflictingHostNames] Changes a logic when
     * restoring an app with custom domains. <code>true</code> to remove custom
     * domains automatically. If <code>false</code>, custom domains are added to
     * the app's object when it is being restored, but that might fail due to
     * conflicts during the operation.
     *
     * @param {boolean} [request.ignoreDatabases] Ignore the databases and only
     * restore the site content
     *
     * @param {string} [request.appServicePlan] Specify app service plan that will
     * own restored site.
     *
     * @param {string} [request.operationType] Operation type. Possible values
     * include: 'Default', 'Clone', 'Relocation', 'Snapshot', 'CloudFS'
     *
     * @param {boolean} [request.adjustConnectionStrings] <code>true</code> if
     * SiteConfig.ConnectionStrings should be set in new app; otherwise,
     * <code>false</code>.
     *
     * @param {string} [request.hostingEnvironment] App Service Environment name,
     * if needed (only when restoring an app to an App Service Environment).
     *
     * @param {string} [request.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will restore a backup of the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    restoreSlot(resourceGroupName: string, name: string, backupId: string, request: models.RestoreRequest, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    restoreSlot(resourceGroupName: string, name: string, backupId: string, request: models.RestoreRequest, slot: string, callback: ServiceCallback<void>): void;
    restoreSlot(resourceGroupName: string, name: string, backupId: string, request: models.RestoreRequest, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary List the configurations of an app
     *
     * List the configurations of an app
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will return configuration for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteConfigResourceCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listConfigurationsSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteConfigResourceCollection>>;

    /**
     * @summary List the configurations of an app
     *
     * List the configurations of an app
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will return configuration for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteConfigResourceCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteConfigResourceCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteConfigResourceCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listConfigurationsSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteConfigResourceCollection>;
    listConfigurationsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.SiteConfigResourceCollection>): void;
    listConfigurationsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteConfigResourceCollection>): void;


    /**
     * @summary Replaces the application settings of an app.
     *
     * Replaces the application settings of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} appSettings Application settings of the app.
     *
     * @param {object} [appSettings.properties] Settings.
     *
     * @param {string} [appSettings.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will update the application settings for the production
     * slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StringDictionary>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateApplicationSettingsSlotWithHttpOperationResponse(resourceGroupName: string, name: string, appSettings: models.StringDictionary, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StringDictionary>>;

    /**
     * @summary Replaces the application settings of an app.
     *
     * Replaces the application settings of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} appSettings Application settings of the app.
     *
     * @param {object} [appSettings.properties] Settings.
     *
     * @param {string} [appSettings.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will update the application settings for the production
     * slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StringDictionary} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StringDictionary} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StringDictionary} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateApplicationSettingsSlot(resourceGroupName: string, name: string, appSettings: models.StringDictionary, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StringDictionary>;
    updateApplicationSettingsSlot(resourceGroupName: string, name: string, appSettings: models.StringDictionary, slot: string, callback: ServiceCallback<models.StringDictionary>): void;
    updateApplicationSettingsSlot(resourceGroupName: string, name: string, appSettings: models.StringDictionary, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StringDictionary>): void;


    /**
     * @summary Gets the application settings of an app.
     *
     * Gets the application settings of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get the application settings for the production
     * slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StringDictionary>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listApplicationSettingsSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StringDictionary>>;

    /**
     * @summary Gets the application settings of an app.
     *
     * Gets the application settings of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get the application settings for the production
     * slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StringDictionary} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StringDictionary} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StringDictionary} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listApplicationSettingsSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StringDictionary>;
    listApplicationSettingsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.StringDictionary>): void;
    listApplicationSettingsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StringDictionary>): void;


    /**
     * @summary Updates the Authentication / Authorization settings associated with
     * web app.
     *
     * Updates the Authentication / Authorization settings associated with web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} siteAuthSettings Auth settings associated with web app.
     *
     * @param {boolean} [siteAuthSettings.enabled] <code>true</code> if the
     * Authentication / Authorization feature is enabled for the current app;
     * otherwise, <code>false</code>.
     *
     * @param {string} [siteAuthSettings.runtimeVersion] The RuntimeVersion of the
     * Authentication / Authorization feature in use for the current app.
     * The setting in this value can control the behavior of certain features in
     * the Authentication / Authorization module.
     *
     * @param {string} [siteAuthSettings.unauthenticatedClientAction] The action to
     * take when an unauthenticated client attempts to access the app. Possible
     * values include: 'RedirectToLoginPage', 'AllowAnonymous'
     *
     * @param {boolean} [siteAuthSettings.tokenStoreEnabled] <code>true</code> to
     * durably store platform-specific security tokens that are obtained during
     * login flows; otherwise, <code>false</code>.
     * The default is <code>false</code>.
     *
     * @param {array} [siteAuthSettings.allowedExternalRedirectUrls] External URLs
     * that can be redirected to as part of logging in or logging out of the app.
     * Note that the query string part of the URL is ignored.
     * This is an advanced setting typically only needed by Windows Store
     * application backends.
     * Note that URLs within the current domain are always implicitly allowed.
     *
     * @param {string} [siteAuthSettings.defaultProvider] The default
     * authentication provider to use when multiple providers are configured.
     * This setting is only needed if multiple providers are configured and the
     * unauthenticated client
     * action is set to "RedirectToLoginPage". Possible values include:
     * 'AzureActiveDirectory', 'Facebook', 'Google', 'MicrosoftAccount', 'Twitter'
     *
     * @param {number} [siteAuthSettings.tokenRefreshExtensionHours] The number of
     * hours after session token expiration that a session token can be used to
     * call the token refresh API. The default is 72 hours.
     *
     * @param {string} [siteAuthSettings.clientId] The Client ID of this relying
     * party application, known as the client_id.
     * This setting is required for enabling OpenID Connection authentication with
     * Azure Active Directory or
     * other 3rd party OpenID Connect providers.
     * More information on OpenID Connect:
     * http://openid.net/specs/openid-connect-core-1_0.html
     *
     * @param {string} [siteAuthSettings.clientSecret] The Client Secret of this
     * relying party application (in Azure Active Directory, this is also referred
     * to as the Key).
     * This setting is optional. If no client secret is configured, the OpenID
     * Connect implicit auth flow is used to authenticate end users.
     * Otherwise, the OpenID Connect Authorization Code Flow is used to
     * authenticate end users.
     * More information on OpenID Connect:
     * http://openid.net/specs/openid-connect-core-1_0.html
     *
     * @param {string} [siteAuthSettings.issuer] The OpenID Connect Issuer URI that
     * represents the entity which issues access tokens for this application.
     * When using Azure Active Directory, this value is the URI of the directory
     * tenant, e.g. https://sts.windows.net/{tenant-guid}/.
     * This URI is a case-sensitive identifier for the token issuer.
     * More information on OpenID Connect Discovery:
     * http://openid.net/specs/openid-connect-discovery-1_0.html
     *
     * @param {boolean} [siteAuthSettings.validateIssuer] Gets a value indicating
     * whether the issuer should be a valid HTTPS url and be validated as such.
     *
     * @param {array} [siteAuthSettings.allowedAudiences] Allowed audience values
     * to consider when validating JWTs issued by
     * Azure Active Directory. Note that the <code>ClientID</code> value is always
     * considered an
     * allowed audience, regardless of this setting.
     *
     * @param {array} [siteAuthSettings.additionalLoginParams] Login parameters to
     * send to the OpenID Connect authorization endpoint when
     * a user logs in. Each parameter must be in the form "key=value".
     *
     * @param {string} [siteAuthSettings.googleClientId] The OpenID Connect Client
     * ID for the Google web application.
     * This setting is required for enabling Google Sign-In.
     * Google Sign-In documentation:
     * https://developers.google.com/identity/sign-in/web/
     *
     * @param {string} [siteAuthSettings.googleClientSecret] The client secret
     * associated with the Google web application.
     * This setting is required for enabling Google Sign-In.
     * Google Sign-In documentation:
     * https://developers.google.com/identity/sign-in/web/
     *
     * @param {array} [siteAuthSettings.googleOAuthScopes] The OAuth 2.0 scopes
     * that will be requested as part of Google Sign-In authentication.
     * This setting is optional. If not specified, "openid", "profile", and "email"
     * are used as default scopes.
     * Google Sign-In documentation:
     * https://developers.google.com/identity/sign-in/web/
     *
     * @param {string} [siteAuthSettings.facebookAppId] The App ID of the Facebook
     * app used for login.
     * This setting is required for enabling Facebook Login.
     * Facebook Login documentation:
     * https://developers.facebook.com/docs/facebook-login
     *
     * @param {string} [siteAuthSettings.facebookAppSecret] The App Secret of the
     * Facebook app used for Facebook Login.
     * This setting is required for enabling Facebook Login.
     * Facebook Login documentation:
     * https://developers.facebook.com/docs/facebook-login
     *
     * @param {array} [siteAuthSettings.facebookOAuthScopes] The OAuth 2.0 scopes
     * that will be requested as part of Facebook Login authentication.
     * This setting is optional.
     * Facebook Login documentation:
     * https://developers.facebook.com/docs/facebook-login
     *
     * @param {string} [siteAuthSettings.twitterConsumerKey] The OAuth 1.0a
     * consumer key of the Twitter application used for sign-in.
     * This setting is required for enabling Twitter Sign-In.
     * Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
     *
     * @param {string} [siteAuthSettings.twitterConsumerSecret] The OAuth 1.0a
     * consumer secret of the Twitter application used for sign-in.
     * This setting is required for enabling Twitter Sign-In.
     * Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
     *
     * @param {string} [siteAuthSettings.microsoftAccountClientId] The OAuth 2.0
     * client ID that was created for the app used for authentication.
     * This setting is required for enabling Microsoft Account authentication.
     * Microsoft Account OAuth documentation:
     * https://dev.onedrive.com/auth/msa_oauth.htm
     *
     * @param {string} [siteAuthSettings.microsoftAccountClientSecret] The OAuth
     * 2.0 client secret that was created for the app used for authentication.
     * This setting is required for enabling Microsoft Account authentication.
     * Microsoft Account OAuth documentation:
     * https://dev.onedrive.com/auth/msa_oauth.htm
     *
     * @param {array} [siteAuthSettings.microsoftAccountOAuthScopes] The OAuth 2.0
     * scopes that will be requested as part of Microsoft Account authentication.
     * This setting is optional. If not specified, "wl.basic" is used as the
     * default scope.
     * Microsoft Account Scopes and permissions documentation:
     * https://msdn.microsoft.com/en-us/library/dn631845.aspx
     *
     * @param {string} [siteAuthSettings.kind] Kind of resource.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteAuthSettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateAuthSettingsSlotWithHttpOperationResponse(resourceGroupName: string, name: string, siteAuthSettings: models.SiteAuthSettings, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteAuthSettings>>;

    /**
     * @summary Updates the Authentication / Authorization settings associated with
     * web app.
     *
     * Updates the Authentication / Authorization settings associated with web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} siteAuthSettings Auth settings associated with web app.
     *
     * @param {boolean} [siteAuthSettings.enabled] <code>true</code> if the
     * Authentication / Authorization feature is enabled for the current app;
     * otherwise, <code>false</code>.
     *
     * @param {string} [siteAuthSettings.runtimeVersion] The RuntimeVersion of the
     * Authentication / Authorization feature in use for the current app.
     * The setting in this value can control the behavior of certain features in
     * the Authentication / Authorization module.
     *
     * @param {string} [siteAuthSettings.unauthenticatedClientAction] The action to
     * take when an unauthenticated client attempts to access the app. Possible
     * values include: 'RedirectToLoginPage', 'AllowAnonymous'
     *
     * @param {boolean} [siteAuthSettings.tokenStoreEnabled] <code>true</code> to
     * durably store platform-specific security tokens that are obtained during
     * login flows; otherwise, <code>false</code>.
     * The default is <code>false</code>.
     *
     * @param {array} [siteAuthSettings.allowedExternalRedirectUrls] External URLs
     * that can be redirected to as part of logging in or logging out of the app.
     * Note that the query string part of the URL is ignored.
     * This is an advanced setting typically only needed by Windows Store
     * application backends.
     * Note that URLs within the current domain are always implicitly allowed.
     *
     * @param {string} [siteAuthSettings.defaultProvider] The default
     * authentication provider to use when multiple providers are configured.
     * This setting is only needed if multiple providers are configured and the
     * unauthenticated client
     * action is set to "RedirectToLoginPage". Possible values include:
     * 'AzureActiveDirectory', 'Facebook', 'Google', 'MicrosoftAccount', 'Twitter'
     *
     * @param {number} [siteAuthSettings.tokenRefreshExtensionHours] The number of
     * hours after session token expiration that a session token can be used to
     * call the token refresh API. The default is 72 hours.
     *
     * @param {string} [siteAuthSettings.clientId] The Client ID of this relying
     * party application, known as the client_id.
     * This setting is required for enabling OpenID Connection authentication with
     * Azure Active Directory or
     * other 3rd party OpenID Connect providers.
     * More information on OpenID Connect:
     * http://openid.net/specs/openid-connect-core-1_0.html
     *
     * @param {string} [siteAuthSettings.clientSecret] The Client Secret of this
     * relying party application (in Azure Active Directory, this is also referred
     * to as the Key).
     * This setting is optional. If no client secret is configured, the OpenID
     * Connect implicit auth flow is used to authenticate end users.
     * Otherwise, the OpenID Connect Authorization Code Flow is used to
     * authenticate end users.
     * More information on OpenID Connect:
     * http://openid.net/specs/openid-connect-core-1_0.html
     *
     * @param {string} [siteAuthSettings.issuer] The OpenID Connect Issuer URI that
     * represents the entity which issues access tokens for this application.
     * When using Azure Active Directory, this value is the URI of the directory
     * tenant, e.g. https://sts.windows.net/{tenant-guid}/.
     * This URI is a case-sensitive identifier for the token issuer.
     * More information on OpenID Connect Discovery:
     * http://openid.net/specs/openid-connect-discovery-1_0.html
     *
     * @param {boolean} [siteAuthSettings.validateIssuer] Gets a value indicating
     * whether the issuer should be a valid HTTPS url and be validated as such.
     *
     * @param {array} [siteAuthSettings.allowedAudiences] Allowed audience values
     * to consider when validating JWTs issued by
     * Azure Active Directory. Note that the <code>ClientID</code> value is always
     * considered an
     * allowed audience, regardless of this setting.
     *
     * @param {array} [siteAuthSettings.additionalLoginParams] Login parameters to
     * send to the OpenID Connect authorization endpoint when
     * a user logs in. Each parameter must be in the form "key=value".
     *
     * @param {string} [siteAuthSettings.googleClientId] The OpenID Connect Client
     * ID for the Google web application.
     * This setting is required for enabling Google Sign-In.
     * Google Sign-In documentation:
     * https://developers.google.com/identity/sign-in/web/
     *
     * @param {string} [siteAuthSettings.googleClientSecret] The client secret
     * associated with the Google web application.
     * This setting is required for enabling Google Sign-In.
     * Google Sign-In documentation:
     * https://developers.google.com/identity/sign-in/web/
     *
     * @param {array} [siteAuthSettings.googleOAuthScopes] The OAuth 2.0 scopes
     * that will be requested as part of Google Sign-In authentication.
     * This setting is optional. If not specified, "openid", "profile", and "email"
     * are used as default scopes.
     * Google Sign-In documentation:
     * https://developers.google.com/identity/sign-in/web/
     *
     * @param {string} [siteAuthSettings.facebookAppId] The App ID of the Facebook
     * app used for login.
     * This setting is required for enabling Facebook Login.
     * Facebook Login documentation:
     * https://developers.facebook.com/docs/facebook-login
     *
     * @param {string} [siteAuthSettings.facebookAppSecret] The App Secret of the
     * Facebook app used for Facebook Login.
     * This setting is required for enabling Facebook Login.
     * Facebook Login documentation:
     * https://developers.facebook.com/docs/facebook-login
     *
     * @param {array} [siteAuthSettings.facebookOAuthScopes] The OAuth 2.0 scopes
     * that will be requested as part of Facebook Login authentication.
     * This setting is optional.
     * Facebook Login documentation:
     * https://developers.facebook.com/docs/facebook-login
     *
     * @param {string} [siteAuthSettings.twitterConsumerKey] The OAuth 1.0a
     * consumer key of the Twitter application used for sign-in.
     * This setting is required for enabling Twitter Sign-In.
     * Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
     *
     * @param {string} [siteAuthSettings.twitterConsumerSecret] The OAuth 1.0a
     * consumer secret of the Twitter application used for sign-in.
     * This setting is required for enabling Twitter Sign-In.
     * Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
     *
     * @param {string} [siteAuthSettings.microsoftAccountClientId] The OAuth 2.0
     * client ID that was created for the app used for authentication.
     * This setting is required for enabling Microsoft Account authentication.
     * Microsoft Account OAuth documentation:
     * https://dev.onedrive.com/auth/msa_oauth.htm
     *
     * @param {string} [siteAuthSettings.microsoftAccountClientSecret] The OAuth
     * 2.0 client secret that was created for the app used for authentication.
     * This setting is required for enabling Microsoft Account authentication.
     * Microsoft Account OAuth documentation:
     * https://dev.onedrive.com/auth/msa_oauth.htm
     *
     * @param {array} [siteAuthSettings.microsoftAccountOAuthScopes] The OAuth 2.0
     * scopes that will be requested as part of Microsoft Account authentication.
     * This setting is optional. If not specified, "wl.basic" is used as the
     * default scope.
     * Microsoft Account Scopes and permissions documentation:
     * https://msdn.microsoft.com/en-us/library/dn631845.aspx
     *
     * @param {string} [siteAuthSettings.kind] Kind of resource.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteAuthSettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteAuthSettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteAuthSettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateAuthSettingsSlot(resourceGroupName: string, name: string, siteAuthSettings: models.SiteAuthSettings, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteAuthSettings>;
    updateAuthSettingsSlot(resourceGroupName: string, name: string, siteAuthSettings: models.SiteAuthSettings, slot: string, callback: ServiceCallback<models.SiteAuthSettings>): void;
    updateAuthSettingsSlot(resourceGroupName: string, name: string, siteAuthSettings: models.SiteAuthSettings, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteAuthSettings>): void;


    /**
     * @summary Gets the Authentication/Authorization settings of an app.
     *
     * Gets the Authentication/Authorization settings of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get the settings for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteAuthSettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAuthSettingsSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteAuthSettings>>;

    /**
     * @summary Gets the Authentication/Authorization settings of an app.
     *
     * Gets the Authentication/Authorization settings of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get the settings for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteAuthSettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteAuthSettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteAuthSettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAuthSettingsSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteAuthSettings>;
    getAuthSettingsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.SiteAuthSettings>): void;
    getAuthSettingsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteAuthSettings>): void;


    /**
     * @summary Updates the Azure storage account configurations of an app.
     *
     * Updates the Azure storage account configurations of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} azureStorageAccounts Azure storage accounts of the app.
     *
     * @param {object} [azureStorageAccounts.properties] Azure storage accounts.
     *
     * @param {string} [azureStorageAccounts.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will update the Azure storage account configurations for
     * the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AzureStoragePropertyDictionaryResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateAzureStorageAccountsSlotWithHttpOperationResponse(resourceGroupName: string, name: string, azureStorageAccounts: models.AzureStoragePropertyDictionaryResource, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AzureStoragePropertyDictionaryResource>>;

    /**
     * @summary Updates the Azure storage account configurations of an app.
     *
     * Updates the Azure storage account configurations of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} azureStorageAccounts Azure storage accounts of the app.
     *
     * @param {object} [azureStorageAccounts.properties] Azure storage accounts.
     *
     * @param {string} [azureStorageAccounts.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will update the Azure storage account configurations for
     * the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AzureStoragePropertyDictionaryResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AzureStoragePropertyDictionaryResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AzureStoragePropertyDictionaryResource} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateAzureStorageAccountsSlot(resourceGroupName: string, name: string, azureStorageAccounts: models.AzureStoragePropertyDictionaryResource, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AzureStoragePropertyDictionaryResource>;
    updateAzureStorageAccountsSlot(resourceGroupName: string, name: string, azureStorageAccounts: models.AzureStoragePropertyDictionaryResource, slot: string, callback: ServiceCallback<models.AzureStoragePropertyDictionaryResource>): void;
    updateAzureStorageAccountsSlot(resourceGroupName: string, name: string, azureStorageAccounts: models.AzureStoragePropertyDictionaryResource, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AzureStoragePropertyDictionaryResource>): void;


    /**
     * @summary Gets the Azure storage account configurations of an app.
     *
     * Gets the Azure storage account configurations of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will update the Azure storage account configurations for
     * the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AzureStoragePropertyDictionaryResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAzureStorageAccountsSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AzureStoragePropertyDictionaryResource>>;

    /**
     * @summary Gets the Azure storage account configurations of an app.
     *
     * Gets the Azure storage account configurations of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will update the Azure storage account configurations for
     * the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AzureStoragePropertyDictionaryResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AzureStoragePropertyDictionaryResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AzureStoragePropertyDictionaryResource} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAzureStorageAccountsSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AzureStoragePropertyDictionaryResource>;
    listAzureStorageAccountsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.AzureStoragePropertyDictionaryResource>): void;
    listAzureStorageAccountsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AzureStoragePropertyDictionaryResource>): void;


    /**
     * @summary Updates the backup configuration of an app.
     *
     * Updates the backup configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} request Edited backup configuration.
     *
     * @param {string} [request.backupName] Name of the backup.
     *
     * @param {boolean} [request.enabled] True if the backup schedule is enabled
     * (must be included in that case), false if the backup schedule should be
     * disabled.
     *
     * @param {string} request.storageAccountUrl SAS URL to the container.
     *
     * @param {object} [request.backupSchedule] Schedule for the backup if it is
     * executed periodically.
     *
     * @param {number} request.backupSchedule.frequencyInterval How often the
     * backup should be executed (e.g. for weekly backup, this should be set to 7
     * and FrequencyUnit should be set to Day)
     *
     * @param {string} request.backupSchedule.frequencyUnit The unit of time for
     * how often the backup should be executed (e.g. for weekly backup, this should
     * be set to Day and FrequencyInterval should be set to 7). Possible values
     * include: 'Day', 'Hour'
     *
     * @param {boolean} request.backupSchedule.keepAtLeastOneBackup True if the
     * retention policy should always keep at least one backup in the storage
     * account, regardless how old it is; false otherwise.
     *
     * @param {number} request.backupSchedule.retentionPeriodInDays After how many
     * days backups should be deleted.
     *
     * @param {date} [request.backupSchedule.startTime] When the schedule should
     * start working.
     *
     * @param {array} [request.databases] Databases included in the backup.
     *
     * @param {string} [request.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will update the backup configuration for the production
     * slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupRequest>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateBackupConfigurationSlotWithHttpOperationResponse(resourceGroupName: string, name: string, request: models.BackupRequest, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupRequest>>;

    /**
     * @summary Updates the backup configuration of an app.
     *
     * Updates the backup configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} request Edited backup configuration.
     *
     * @param {string} [request.backupName] Name of the backup.
     *
     * @param {boolean} [request.enabled] True if the backup schedule is enabled
     * (must be included in that case), false if the backup schedule should be
     * disabled.
     *
     * @param {string} request.storageAccountUrl SAS URL to the container.
     *
     * @param {object} [request.backupSchedule] Schedule for the backup if it is
     * executed periodically.
     *
     * @param {number} request.backupSchedule.frequencyInterval How often the
     * backup should be executed (e.g. for weekly backup, this should be set to 7
     * and FrequencyUnit should be set to Day)
     *
     * @param {string} request.backupSchedule.frequencyUnit The unit of time for
     * how often the backup should be executed (e.g. for weekly backup, this should
     * be set to Day and FrequencyInterval should be set to 7). Possible values
     * include: 'Day', 'Hour'
     *
     * @param {boolean} request.backupSchedule.keepAtLeastOneBackup True if the
     * retention policy should always keep at least one backup in the storage
     * account, regardless how old it is; false otherwise.
     *
     * @param {number} request.backupSchedule.retentionPeriodInDays After how many
     * days backups should be deleted.
     *
     * @param {date} [request.backupSchedule.startTime] When the schedule should
     * start working.
     *
     * @param {array} [request.databases] Databases included in the backup.
     *
     * @param {string} [request.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will update the backup configuration for the production
     * slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupRequest} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupRequest} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupRequest} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateBackupConfigurationSlot(resourceGroupName: string, name: string, request: models.BackupRequest, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupRequest>;
    updateBackupConfigurationSlot(resourceGroupName: string, name: string, request: models.BackupRequest, slot: string, callback: ServiceCallback<models.BackupRequest>): void;
    updateBackupConfigurationSlot(resourceGroupName: string, name: string, request: models.BackupRequest, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupRequest>): void;


    /**
     * @summary Deletes the backup configuration of an app.
     *
     * Deletes the backup configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will delete the backup configuration for the production
     * slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteBackupConfigurationSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes the backup configuration of an app.
     *
     * Deletes the backup configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will delete the backup configuration for the production
     * slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteBackupConfigurationSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteBackupConfigurationSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<void>): void;
    deleteBackupConfigurationSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Gets the backup configuration of an app.
     *
     * Gets the backup configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get the backup configuration for the production
     * slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupRequest>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getBackupConfigurationSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupRequest>>;

    /**
     * @summary Gets the backup configuration of an app.
     *
     * Gets the backup configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get the backup configuration for the production
     * slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupRequest} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupRequest} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupRequest} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getBackupConfigurationSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupRequest>;
    getBackupConfigurationSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.BackupRequest>): void;
    getBackupConfigurationSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupRequest>): void;


    /**
     * @summary Replaces the connection strings of an app.
     *
     * Replaces the connection strings of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} connectionStrings Connection strings of the app or
     * deployment slot. See example.
     *
     * @param {object} [connectionStrings.properties] Connection strings.
     *
     * @param {string} [connectionStrings.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will update the connection settings for the production
     * slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectionStringDictionary>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateConnectionStringsSlotWithHttpOperationResponse(resourceGroupName: string, name: string, connectionStrings: models.ConnectionStringDictionary, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectionStringDictionary>>;

    /**
     * @summary Replaces the connection strings of an app.
     *
     * Replaces the connection strings of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} connectionStrings Connection strings of the app or
     * deployment slot. See example.
     *
     * @param {object} [connectionStrings.properties] Connection strings.
     *
     * @param {string} [connectionStrings.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will update the connection settings for the production
     * slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectionStringDictionary} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectionStringDictionary} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectionStringDictionary} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateConnectionStringsSlot(resourceGroupName: string, name: string, connectionStrings: models.ConnectionStringDictionary, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectionStringDictionary>;
    updateConnectionStringsSlot(resourceGroupName: string, name: string, connectionStrings: models.ConnectionStringDictionary, slot: string, callback: ServiceCallback<models.ConnectionStringDictionary>): void;
    updateConnectionStringsSlot(resourceGroupName: string, name: string, connectionStrings: models.ConnectionStringDictionary, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectionStringDictionary>): void;


    /**
     * @summary Gets the connection strings of an app.
     *
     * Gets the connection strings of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get the connection settings for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectionStringDictionary>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listConnectionStringsSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectionStringDictionary>>;

    /**
     * @summary Gets the connection strings of an app.
     *
     * Gets the connection strings of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get the connection settings for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectionStringDictionary} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectionStringDictionary} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectionStringDictionary} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listConnectionStringsSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectionStringDictionary>;
    listConnectionStringsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.ConnectionStringDictionary>): void;
    listConnectionStringsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectionStringDictionary>): void;


    /**
     * @summary Gets the logging configuration of an app.
     *
     * Gets the logging configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get the logging configuration for the production
     * slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteLogsConfig>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getDiagnosticLogsConfigurationSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteLogsConfig>>;

    /**
     * @summary Gets the logging configuration of an app.
     *
     * Gets the logging configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get the logging configuration for the production
     * slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteLogsConfig} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteLogsConfig} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteLogsConfig} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getDiagnosticLogsConfigurationSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteLogsConfig>;
    getDiagnosticLogsConfigurationSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.SiteLogsConfig>): void;
    getDiagnosticLogsConfigurationSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteLogsConfig>): void;


    /**
     * @summary Updates the logging configuration of an app.
     *
     * Updates the logging configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} siteLogsConfig A SiteLogsConfig JSON object that contains
     * the logging configuration to change in the "properties" property.
     *
     * @param {object} [siteLogsConfig.applicationLogs] Application logs
     * configuration.
     *
     * @param {object} [siteLogsConfig.applicationLogs.fileSystem] Application logs
     * to file system configuration.
     *
     * @param {string} [siteLogsConfig.applicationLogs.fileSystem.level] Log level.
     * Possible values include: 'Off', 'Verbose', 'Information', 'Warning', 'Error'
     *
     * @param {object} [siteLogsConfig.applicationLogs.azureTableStorage]
     * Application logs to azure table storage configuration.
     *
     * @param {string} [siteLogsConfig.applicationLogs.azureTableStorage.level] Log
     * level. Possible values include: 'Off', 'Verbose', 'Information', 'Warning',
     * 'Error'
     *
     * @param {string} siteLogsConfig.applicationLogs.azureTableStorage.sasUrl SAS
     * URL to an Azure table with add/query/delete permissions.
     *
     * @param {object} [siteLogsConfig.applicationLogs.azureBlobStorage]
     * Application logs to blob storage configuration.
     *
     * @param {string} [siteLogsConfig.applicationLogs.azureBlobStorage.level] Log
     * level. Possible values include: 'Off', 'Verbose', 'Information', 'Warning',
     * 'Error'
     *
     * @param {string} [siteLogsConfig.applicationLogs.azureBlobStorage.sasUrl] SAS
     * url to a azure blob container with read/write/list/delete permissions.
     *
     * @param {number}
     * [siteLogsConfig.applicationLogs.azureBlobStorage.retentionInDays] Retention
     * in days.
     * Remove blobs older than X days.
     * 0 or lower means no retention.
     *
     * @param {object} [siteLogsConfig.httpLogs] HTTP logs configuration.
     *
     * @param {object} [siteLogsConfig.httpLogs.fileSystem] Http logs to file
     * system configuration.
     *
     * @param {number} [siteLogsConfig.httpLogs.fileSystem.retentionInMb] Maximum
     * size in megabytes that http log files can use.
     * When reached old log files will be removed to make space for new ones.
     * Value can range between 25 and 100.
     *
     * @param {number} [siteLogsConfig.httpLogs.fileSystem.retentionInDays]
     * Retention in days.
     * Remove files older than X days.
     * 0 or lower means no retention.
     *
     * @param {boolean} [siteLogsConfig.httpLogs.fileSystem.enabled] True if
     * configuration is enabled, false if it is disabled and null if configuration
     * is not set.
     *
     * @param {object} [siteLogsConfig.httpLogs.azureBlobStorage] Http logs to
     * azure blob storage configuration.
     *
     * @param {string} [siteLogsConfig.httpLogs.azureBlobStorage.sasUrl] SAS url to
     * a azure blob container with read/write/list/delete permissions.
     *
     * @param {number} [siteLogsConfig.httpLogs.azureBlobStorage.retentionInDays]
     * Retention in days.
     * Remove blobs older than X days.
     * 0 or lower means no retention.
     *
     * @param {boolean} [siteLogsConfig.httpLogs.azureBlobStorage.enabled] True if
     * configuration is enabled, false if it is disabled and null if configuration
     * is not set.
     *
     * @param {object} [siteLogsConfig.failedRequestsTracing] Failed requests
     * tracing configuration.
     *
     * @param {object} [siteLogsConfig.detailedErrorMessages] Detailed error
     * messages configuration.
     *
     * @param {boolean} [siteLogsConfig.detailedErrorMessages.enabled] True if
     * configuration is enabled, false if it is disabled and null if configuration
     * is not set.
     *
     * @param {string} [siteLogsConfig.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will update the logging configuration for the production
     * slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteLogsConfig>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateDiagnosticLogsConfigSlotWithHttpOperationResponse(resourceGroupName: string, name: string, siteLogsConfig: models.SiteLogsConfig, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteLogsConfig>>;

    /**
     * @summary Updates the logging configuration of an app.
     *
     * Updates the logging configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} siteLogsConfig A SiteLogsConfig JSON object that contains
     * the logging configuration to change in the "properties" property.
     *
     * @param {object} [siteLogsConfig.applicationLogs] Application logs
     * configuration.
     *
     * @param {object} [siteLogsConfig.applicationLogs.fileSystem] Application logs
     * to file system configuration.
     *
     * @param {string} [siteLogsConfig.applicationLogs.fileSystem.level] Log level.
     * Possible values include: 'Off', 'Verbose', 'Information', 'Warning', 'Error'
     *
     * @param {object} [siteLogsConfig.applicationLogs.azureTableStorage]
     * Application logs to azure table storage configuration.
     *
     * @param {string} [siteLogsConfig.applicationLogs.azureTableStorage.level] Log
     * level. Possible values include: 'Off', 'Verbose', 'Information', 'Warning',
     * 'Error'
     *
     * @param {string} siteLogsConfig.applicationLogs.azureTableStorage.sasUrl SAS
     * URL to an Azure table with add/query/delete permissions.
     *
     * @param {object} [siteLogsConfig.applicationLogs.azureBlobStorage]
     * Application logs to blob storage configuration.
     *
     * @param {string} [siteLogsConfig.applicationLogs.azureBlobStorage.level] Log
     * level. Possible values include: 'Off', 'Verbose', 'Information', 'Warning',
     * 'Error'
     *
     * @param {string} [siteLogsConfig.applicationLogs.azureBlobStorage.sasUrl] SAS
     * url to a azure blob container with read/write/list/delete permissions.
     *
     * @param {number}
     * [siteLogsConfig.applicationLogs.azureBlobStorage.retentionInDays] Retention
     * in days.
     * Remove blobs older than X days.
     * 0 or lower means no retention.
     *
     * @param {object} [siteLogsConfig.httpLogs] HTTP logs configuration.
     *
     * @param {object} [siteLogsConfig.httpLogs.fileSystem] Http logs to file
     * system configuration.
     *
     * @param {number} [siteLogsConfig.httpLogs.fileSystem.retentionInMb] Maximum
     * size in megabytes that http log files can use.
     * When reached old log files will be removed to make space for new ones.
     * Value can range between 25 and 100.
     *
     * @param {number} [siteLogsConfig.httpLogs.fileSystem.retentionInDays]
     * Retention in days.
     * Remove files older than X days.
     * 0 or lower means no retention.
     *
     * @param {boolean} [siteLogsConfig.httpLogs.fileSystem.enabled] True if
     * configuration is enabled, false if it is disabled and null if configuration
     * is not set.
     *
     * @param {object} [siteLogsConfig.httpLogs.azureBlobStorage] Http logs to
     * azure blob storage configuration.
     *
     * @param {string} [siteLogsConfig.httpLogs.azureBlobStorage.sasUrl] SAS url to
     * a azure blob container with read/write/list/delete permissions.
     *
     * @param {number} [siteLogsConfig.httpLogs.azureBlobStorage.retentionInDays]
     * Retention in days.
     * Remove blobs older than X days.
     * 0 or lower means no retention.
     *
     * @param {boolean} [siteLogsConfig.httpLogs.azureBlobStorage.enabled] True if
     * configuration is enabled, false if it is disabled and null if configuration
     * is not set.
     *
     * @param {object} [siteLogsConfig.failedRequestsTracing] Failed requests
     * tracing configuration.
     *
     * @param {object} [siteLogsConfig.detailedErrorMessages] Detailed error
     * messages configuration.
     *
     * @param {boolean} [siteLogsConfig.detailedErrorMessages.enabled] True if
     * configuration is enabled, false if it is disabled and null if configuration
     * is not set.
     *
     * @param {string} [siteLogsConfig.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will update the logging configuration for the production
     * slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteLogsConfig} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteLogsConfig} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteLogsConfig} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateDiagnosticLogsConfigSlot(resourceGroupName: string, name: string, siteLogsConfig: models.SiteLogsConfig, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteLogsConfig>;
    updateDiagnosticLogsConfigSlot(resourceGroupName: string, name: string, siteLogsConfig: models.SiteLogsConfig, slot: string, callback: ServiceCallback<models.SiteLogsConfig>): void;
    updateDiagnosticLogsConfigSlot(resourceGroupName: string, name: string, siteLogsConfig: models.SiteLogsConfig, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteLogsConfig>): void;


    /**
     * @summary Replaces the metadata of an app.
     *
     * Replaces the metadata of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} metadata Edited metadata of the app or deployment slot. See
     * example.
     *
     * @param {object} [metadata.properties] Settings.
     *
     * @param {string} [metadata.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will update the metadata for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StringDictionary>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateMetadataSlotWithHttpOperationResponse(resourceGroupName: string, name: string, metadata: models.StringDictionary, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StringDictionary>>;

    /**
     * @summary Replaces the metadata of an app.
     *
     * Replaces the metadata of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} metadata Edited metadata of the app or deployment slot. See
     * example.
     *
     * @param {object} [metadata.properties] Settings.
     *
     * @param {string} [metadata.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will update the metadata for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StringDictionary} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StringDictionary} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StringDictionary} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateMetadataSlot(resourceGroupName: string, name: string, metadata: models.StringDictionary, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StringDictionary>;
    updateMetadataSlot(resourceGroupName: string, name: string, metadata: models.StringDictionary, slot: string, callback: ServiceCallback<models.StringDictionary>): void;
    updateMetadataSlot(resourceGroupName: string, name: string, metadata: models.StringDictionary, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StringDictionary>): void;


    /**
     * @summary Gets the metadata of an app.
     *
     * Gets the metadata of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get the metadata for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StringDictionary>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetadataSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StringDictionary>>;

    /**
     * @summary Gets the metadata of an app.
     *
     * Gets the metadata of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get the metadata for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StringDictionary} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StringDictionary} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StringDictionary} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetadataSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StringDictionary>;
    listMetadataSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.StringDictionary>): void;
    listMetadataSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StringDictionary>): void;


    /**
     * @summary Gets the Git/FTP publishing credentials of an app.
     *
     * Gets the Git/FTP publishing credentials of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get the publishing credentials for the production
     * slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<User>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listPublishingCredentialsSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.User>>;

    /**
     * @summary Gets the Git/FTP publishing credentials of an app.
     *
     * Gets the Git/FTP publishing credentials of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get the publishing credentials for the production
     * slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {User} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {User} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link User} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listPublishingCredentialsSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.User>;
    listPublishingCredentialsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.User>): void;
    listPublishingCredentialsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.User>): void;


    /**
     * @summary Updates the Push settings associated with web app.
     *
     * Updates the Push settings associated with web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} pushSettings Push settings associated with web app.
     *
     * @param {boolean} pushSettings.isPushEnabled Gets or sets a flag indicating
     * whether the Push endpoint is enabled.
     *
     * @param {string} [pushSettings.tagWhitelistJson] Gets or sets a JSON string
     * containing a list of tags that are whitelisted for use by the push
     * registration endpoint.
     *
     * @param {string} [pushSettings.tagsRequiringAuth] Gets or sets a JSON string
     * containing a list of tags that require user authentication to be used in the
     * push registration endpoint.
     * Tags can consist of alphanumeric characters and the following:
     * '_', '@', '#', '.', ':', '-'.
     * Validation should be performed at the PushRequestHandler.
     *
     * @param {string} [pushSettings.dynamicTagsJson] Gets or sets a JSON string
     * containing a list of dynamic tags that will be evaluated from user claims in
     * the push registration endpoint.
     *
     * @param {string} [pushSettings.kind] Kind of resource.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PushSettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateSitePushSettingsSlotWithHttpOperationResponse(resourceGroupName: string, name: string, pushSettings: models.PushSettings, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PushSettings>>;

    /**
     * @summary Updates the Push settings associated with web app.
     *
     * Updates the Push settings associated with web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} pushSettings Push settings associated with web app.
     *
     * @param {boolean} pushSettings.isPushEnabled Gets or sets a flag indicating
     * whether the Push endpoint is enabled.
     *
     * @param {string} [pushSettings.tagWhitelistJson] Gets or sets a JSON string
     * containing a list of tags that are whitelisted for use by the push
     * registration endpoint.
     *
     * @param {string} [pushSettings.tagsRequiringAuth] Gets or sets a JSON string
     * containing a list of tags that require user authentication to be used in the
     * push registration endpoint.
     * Tags can consist of alphanumeric characters and the following:
     * '_', '@', '#', '.', ':', '-'.
     * Validation should be performed at the PushRequestHandler.
     *
     * @param {string} [pushSettings.dynamicTagsJson] Gets or sets a JSON string
     * containing a list of dynamic tags that will be evaluated from user claims in
     * the push registration endpoint.
     *
     * @param {string} [pushSettings.kind] Kind of resource.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PushSettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PushSettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PushSettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateSitePushSettingsSlot(resourceGroupName: string, name: string, pushSettings: models.PushSettings, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PushSettings>;
    updateSitePushSettingsSlot(resourceGroupName: string, name: string, pushSettings: models.PushSettings, slot: string, callback: ServiceCallback<models.PushSettings>): void;
    updateSitePushSettingsSlot(resourceGroupName: string, name: string, pushSettings: models.PushSettings, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PushSettings>): void;


    /**
     * @summary Gets the Push settings associated with web app.
     *
     * Gets the Push settings associated with web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PushSettings>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSitePushSettingsSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PushSettings>>;

    /**
     * @summary Gets the Push settings associated with web app.
     *
     * Gets the Push settings associated with web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PushSettings} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PushSettings} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PushSettings} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSitePushSettingsSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PushSettings>;
    listSitePushSettingsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.PushSettings>): void;
    listSitePushSettingsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PushSettings>): void;


    /**
     * @summary Gets a Swift Virtual Network connection.
     *
     * Gets a Swift Virtual Network connection.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get a gateway for the production slot's Virtual
     * Network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SwiftVirtualNetwork>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSwiftVirtualNetworkConnectionSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SwiftVirtualNetwork>>;

    /**
     * @summary Gets a Swift Virtual Network connection.
     *
     * Gets a Swift Virtual Network connection.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get a gateway for the production slot's Virtual
     * Network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SwiftVirtualNetwork} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SwiftVirtualNetwork} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SwiftVirtualNetwork} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSwiftVirtualNetworkConnectionSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SwiftVirtualNetwork>;
    getSwiftVirtualNetworkConnectionSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.SwiftVirtualNetwork>): void;
    getSwiftVirtualNetworkConnectionSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SwiftVirtualNetwork>): void;


    /**
     * @summary Integrates this Web App with a Virtual Network. This requires that
     * 1) "swiftSupported" is true when doing a GET against this resource, and 2)
     * that the target Subnet has already been delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     *
     * Integrates this Web App with a Virtual Network. This requires that 1)
     * "swiftSupported" is true when doing a GET against this resource, and 2) that
     * the target Subnet has already been delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} connectionEnvelope Properties of the Virtual Network
     * connection. See example.
     *
     * @param {string} [connectionEnvelope.subnetResourceId] The Virtual Network
     * subnet's resource ID. This is the subnet that this Web App will join. This
     * subnet must have a delegation to Microsoft.Web/serverFarms defined first.
     *
     * @param {boolean} [connectionEnvelope.swiftSupported] A flag that specifies
     * if the scale unit this Web App is on supports Swift integration.
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will add or update connections for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SwiftVirtualNetwork>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateSwiftVirtualNetworkConnectionSlotWithHttpOperationResponse(resourceGroupName: string, name: string, connectionEnvelope: models.SwiftVirtualNetwork, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SwiftVirtualNetwork>>;

    /**
     * @summary Integrates this Web App with a Virtual Network. This requires that
     * 1) "swiftSupported" is true when doing a GET against this resource, and 2)
     * that the target Subnet has already been delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     *
     * Integrates this Web App with a Virtual Network. This requires that 1)
     * "swiftSupported" is true when doing a GET against this resource, and 2) that
     * the target Subnet has already been delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} connectionEnvelope Properties of the Virtual Network
     * connection. See example.
     *
     * @param {string} [connectionEnvelope.subnetResourceId] The Virtual Network
     * subnet's resource ID. This is the subnet that this Web App will join. This
     * subnet must have a delegation to Microsoft.Web/serverFarms defined first.
     *
     * @param {boolean} [connectionEnvelope.swiftSupported] A flag that specifies
     * if the scale unit this Web App is on supports Swift integration.
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will add or update connections for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SwiftVirtualNetwork} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SwiftVirtualNetwork} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SwiftVirtualNetwork} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateSwiftVirtualNetworkConnectionSlot(resourceGroupName: string, name: string, connectionEnvelope: models.SwiftVirtualNetwork, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SwiftVirtualNetwork>;
    createOrUpdateSwiftVirtualNetworkConnectionSlot(resourceGroupName: string, name: string, connectionEnvelope: models.SwiftVirtualNetwork, slot: string, callback: ServiceCallback<models.SwiftVirtualNetwork>): void;
    createOrUpdateSwiftVirtualNetworkConnectionSlot(resourceGroupName: string, name: string, connectionEnvelope: models.SwiftVirtualNetwork, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SwiftVirtualNetwork>): void;


    /**
     * @summary Deletes a Swift Virtual Network connection from an app (or
     * deployment slot).
     *
     * Deletes a Swift Virtual Network connection from an app (or deployment slot).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will delete the connection for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteSwiftVirtualNetworkSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a Swift Virtual Network connection from an app (or
     * deployment slot).
     *
     * Deletes a Swift Virtual Network connection from an app (or deployment slot).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will delete the connection for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteSwiftVirtualNetworkSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteSwiftVirtualNetworkSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<void>): void;
    deleteSwiftVirtualNetworkSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Integrates this Web App with a Virtual Network. This requires that
     * 1) "swiftSupported" is true when doing a GET against this resource, and 2)
     * that the target Subnet has already been delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     *
     * Integrates this Web App with a Virtual Network. This requires that 1)
     * "swiftSupported" is true when doing a GET against this resource, and 2) that
     * the target Subnet has already been delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} connectionEnvelope Properties of the Virtual Network
     * connection. See example.
     *
     * @param {string} [connectionEnvelope.subnetResourceId] The Virtual Network
     * subnet's resource ID. This is the subnet that this Web App will join. This
     * subnet must have a delegation to Microsoft.Web/serverFarms defined first.
     *
     * @param {boolean} [connectionEnvelope.swiftSupported] A flag that specifies
     * if the scale unit this Web App is on supports Swift integration.
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will add or update connections for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SwiftVirtualNetwork>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateSwiftVirtualNetworkConnectionSlotWithHttpOperationResponse(resourceGroupName: string, name: string, connectionEnvelope: models.SwiftVirtualNetwork, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SwiftVirtualNetwork>>;

    /**
     * @summary Integrates this Web App with a Virtual Network. This requires that
     * 1) "swiftSupported" is true when doing a GET against this resource, and 2)
     * that the target Subnet has already been delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     *
     * Integrates this Web App with a Virtual Network. This requires that 1)
     * "swiftSupported" is true when doing a GET against this resource, and 2) that
     * the target Subnet has already been delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} connectionEnvelope Properties of the Virtual Network
     * connection. See example.
     *
     * @param {string} [connectionEnvelope.subnetResourceId] The Virtual Network
     * subnet's resource ID. This is the subnet that this Web App will join. This
     * subnet must have a delegation to Microsoft.Web/serverFarms defined first.
     *
     * @param {boolean} [connectionEnvelope.swiftSupported] A flag that specifies
     * if the scale unit this Web App is on supports Swift integration.
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will add or update connections for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SwiftVirtualNetwork} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SwiftVirtualNetwork} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SwiftVirtualNetwork} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateSwiftVirtualNetworkConnectionSlot(resourceGroupName: string, name: string, connectionEnvelope: models.SwiftVirtualNetwork, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SwiftVirtualNetwork>;
    updateSwiftVirtualNetworkConnectionSlot(resourceGroupName: string, name: string, connectionEnvelope: models.SwiftVirtualNetwork, slot: string, callback: ServiceCallback<models.SwiftVirtualNetwork>): void;
    updateSwiftVirtualNetworkConnectionSlot(resourceGroupName: string, name: string, connectionEnvelope: models.SwiftVirtualNetwork, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SwiftVirtualNetwork>): void;


    /**
     * @summary Gets the configuration of an app, such as platform version and
     * bitness, default documents, virtual applications, Always On, etc.
     *
     * Gets the configuration of an app, such as platform version and bitness,
     * default documents, virtual applications, Always On, etc.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will return configuration for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteConfigResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getConfigurationSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteConfigResource>>;

    /**
     * @summary Gets the configuration of an app, such as platform version and
     * bitness, default documents, virtual applications, Always On, etc.
     *
     * Gets the configuration of an app, such as platform version and bitness,
     * default documents, virtual applications, Always On, etc.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will return configuration for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteConfigResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteConfigResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteConfigResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getConfigurationSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteConfigResource>;
    getConfigurationSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.SiteConfigResource>): void;
    getConfigurationSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteConfigResource>): void;


    /**
     * @summary Updates the configuration of an app.
     *
     * Updates the configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} siteConfig JSON representation of a SiteConfig object. See
     * example.
     *
     * @param {number} [siteConfig.numberOfWorkers] Number of workers.
     *
     * @param {array} [siteConfig.defaultDocuments] Default documents.
     *
     * @param {string} [siteConfig.netFrameworkVersion] .NET Framework version.
     *
     * @param {string} [siteConfig.phpVersion] Version of PHP.
     *
     * @param {string} [siteConfig.pythonVersion] Version of Python.
     *
     * @param {string} [siteConfig.nodeVersion] Version of Node.js.
     *
     * @param {string} [siteConfig.linuxFxVersion] Linux App Framework and version
     *
     * @param {string} [siteConfig.windowsFxVersion] Xenon App Framework and
     * version
     *
     * @param {boolean} [siteConfig.requestTracingEnabled] <code>true</code> if
     * request tracing is enabled; otherwise, <code>false</code>.
     *
     * @param {date} [siteConfig.requestTracingExpirationTime] Request tracing
     * expiration time.
     *
     * @param {boolean} [siteConfig.remoteDebuggingEnabled] <code>true</code> if
     * remote debugging is enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteConfig.remoteDebuggingVersion] Remote debugging
     * version.
     *
     * @param {boolean} [siteConfig.httpLoggingEnabled] <code>true</code> if HTTP
     * logging is enabled; otherwise, <code>false</code>.
     *
     * @param {number} [siteConfig.logsDirectorySizeLimit] HTTP logs directory size
     * limit.
     *
     * @param {boolean} [siteConfig.detailedErrorLoggingEnabled] <code>true</code>
     * if detailed error logging is enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteConfig.publishingUsername] Publishing user name.
     *
     * @param {array} [siteConfig.appSettings] Application settings.
     *
     * @param {object} [siteConfig.azureStorageAccounts] User-provided Azure
     * storage accounts.
     *
     * @param {array} [siteConfig.connectionStrings] Connection strings.
     *
     * @param {array} [siteConfig.handlerMappings] Handler mappings.
     *
     * @param {string} [siteConfig.documentRoot] Document root.
     *
     * @param {string} [siteConfig.scmType] SCM type. Possible values include:
     * 'None', 'Dropbox', 'Tfs', 'LocalGit', 'GitHub', 'CodePlexGit', 'CodePlexHg',
     * 'BitbucketGit', 'BitbucketHg', 'ExternalGit', 'ExternalHg', 'OneDrive',
     * 'VSO'
     *
     * @param {boolean} [siteConfig.use32BitWorkerProcess] <code>true</code> to use
     * 32-bit worker process; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteConfig.webSocketsEnabled] <code>true</code> if
     * WebSocket is enabled; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteConfig.alwaysOn] <code>true</code> if Always On is
     * enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteConfig.javaVersion] Java version.
     *
     * @param {string} [siteConfig.javaContainer] Java container.
     *
     * @param {string} [siteConfig.javaContainerVersion] Java container version.
     *
     * @param {string} [siteConfig.appCommandLine] App command line to launch.
     *
     * @param {string} [siteConfig.managedPipelineMode] Managed pipeline mode.
     * Possible values include: 'Integrated', 'Classic'
     *
     * @param {array} [siteConfig.virtualApplications] Virtual applications.
     *
     * @param {string} [siteConfig.loadBalancing] Site load balancing. Possible
     * values include: 'WeightedRoundRobin', 'LeastRequests', 'LeastResponseTime',
     * 'WeightedTotalTraffic', 'RequestHash'
     *
     * @param {object} [siteConfig.experiments] This is work around for polymophic
     * types.
     *
     * @param {array} [siteConfig.experiments.rampUpRules] List of ramp-up rules.
     *
     * @param {object} [siteConfig.limits] Site limits.
     *
     * @param {number} [siteConfig.limits.maxPercentageCpu] Maximum allowed CPU
     * usage percentage.
     *
     * @param {number} [siteConfig.limits.maxMemoryInMb] Maximum allowed memory
     * usage in MB.
     *
     * @param {number} [siteConfig.limits.maxDiskSizeInMb] Maximum allowed disk
     * size usage in MB.
     *
     * @param {boolean} [siteConfig.autoHealEnabled] <code>true</code> if Auto Heal
     * is enabled; otherwise, <code>false</code>.
     *
     * @param {object} [siteConfig.autoHealRules] Auto Heal rules.
     *
     * @param {object} [siteConfig.autoHealRules.triggers] Conditions that describe
     * when to execute the auto-heal actions.
     *
     * @param {object} [siteConfig.autoHealRules.triggers.requests] A rule based on
     * total requests.
     *
     * @param {number} [siteConfig.autoHealRules.triggers.requests.count] Request
     * Count.
     *
     * @param {string} [siteConfig.autoHealRules.triggers.requests.timeInterval]
     * Time interval.
     *
     * @param {number} [siteConfig.autoHealRules.triggers.privateBytesInKB] A rule
     * based on private bytes.
     *
     * @param {array} [siteConfig.autoHealRules.triggers.statusCodes] A rule based
     * on status codes.
     *
     * @param {object} [siteConfig.autoHealRules.triggers.slowRequests] A rule
     * based on request execution time.
     *
     * @param {string} [siteConfig.autoHealRules.triggers.slowRequests.timeTaken]
     * Time taken.
     *
     * @param {number} [siteConfig.autoHealRules.triggers.slowRequests.count]
     * Request Count.
     *
     * @param {string}
     * [siteConfig.autoHealRules.triggers.slowRequests.timeInterval] Time interval.
     *
     * @param {object} [siteConfig.autoHealRules.actions] Actions to be executed
     * when a rule is triggered.
     *
     * @param {string} [siteConfig.autoHealRules.actions.actionType] Predefined
     * action to be taken. Possible values include: 'Recycle', 'LogEvent',
     * 'CustomAction'
     *
     * @param {object} [siteConfig.autoHealRules.actions.customAction] Custom
     * action to be taken.
     *
     * @param {string} [siteConfig.autoHealRules.actions.customAction.exe]
     * Executable to be run.
     *
     * @param {string} [siteConfig.autoHealRules.actions.customAction.parameters]
     * Parameters for the executable.
     *
     * @param {string} [siteConfig.autoHealRules.actions.minProcessExecutionTime]
     * Minimum time the process must execute
     * before taking the action
     *
     * @param {string} [siteConfig.tracingOptions] Tracing options.
     *
     * @param {string} [siteConfig.vnetName] Virtual Network name.
     *
     * @param {object} [siteConfig.cors] Cross-Origin Resource Sharing (CORS)
     * settings.
     *
     * @param {array} [siteConfig.cors.allowedOrigins] Gets or sets the list of
     * origins that should be allowed to make cross-origin
     * calls (for example: http://example.com:12345). Use "*" to allow all.
     *
     * @param {object} [siteConfig.push] Push endpoint settings.
     *
     * @param {boolean} siteConfig.push.isPushEnabled Gets or sets a flag
     * indicating whether the Push endpoint is enabled.
     *
     * @param {string} [siteConfig.push.tagWhitelistJson] Gets or sets a JSON
     * string containing a list of tags that are whitelisted for use by the push
     * registration endpoint.
     *
     * @param {string} [siteConfig.push.tagsRequiringAuth] Gets or sets a JSON
     * string containing a list of tags that require user authentication to be used
     * in the push registration endpoint.
     * Tags can consist of alphanumeric characters and the following:
     * '_', '@', '#', '.', ':', '-'.
     * Validation should be performed at the PushRequestHandler.
     *
     * @param {string} [siteConfig.push.dynamicTagsJson] Gets or sets a JSON string
     * containing a list of dynamic tags that will be evaluated from user claims in
     * the push registration endpoint.
     *
     * @param {string} [siteConfig.push.kind] Kind of resource.
     *
     * @param {object} [siteConfig.apiDefinition] Information about the formal API
     * definition for the app.
     *
     * @param {string} [siteConfig.apiDefinition.url] The URL of the API
     * definition.
     *
     * @param {string} [siteConfig.autoSwapSlotName] Auto-swap slot name.
     *
     * @param {boolean} [siteConfig.localMySqlEnabled] <code>true</code> to enable
     * local MySQL; otherwise, <code>false</code>.
     *
     * @param {number} [siteConfig.managedServiceIdentityId] Managed Service
     * Identity Id
     *
     * @param {number} [siteConfig.xManagedServiceIdentityId] Explicit Managed
     * Service Identity Id
     *
     * @param {array} [siteConfig.ipSecurityRestrictions] IP security restrictions.
     *
     * @param {boolean} [siteConfig.http20Enabled] Http20Enabled: configures a web
     * site to allow clients to connect over http2.0
     *
     * @param {string} [siteConfig.minTlsVersion] MinTlsVersion: configures the
     * minimum version of TLS required for SSL requests. Possible values include:
     * '1.0', '1.1', '1.2'
     *
     * @param {string} [siteConfig.ftpsState] State of FTP / FTPS service. Possible
     * values include: 'AllAllowed', 'FtpsOnly', 'Disabled'
     *
     * @param {number} [siteConfig.reservedInstanceCount] Number of reserved
     * instances.
     * This setting only applies to the Consumption Plan
     *
     * @param {string} [siteConfig.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will update configuration for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteConfigResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateConfigurationSlotWithHttpOperationResponse(resourceGroupName: string, name: string, siteConfig: models.SiteConfigResource, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteConfigResource>>;

    /**
     * @summary Updates the configuration of an app.
     *
     * Updates the configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} siteConfig JSON representation of a SiteConfig object. See
     * example.
     *
     * @param {number} [siteConfig.numberOfWorkers] Number of workers.
     *
     * @param {array} [siteConfig.defaultDocuments] Default documents.
     *
     * @param {string} [siteConfig.netFrameworkVersion] .NET Framework version.
     *
     * @param {string} [siteConfig.phpVersion] Version of PHP.
     *
     * @param {string} [siteConfig.pythonVersion] Version of Python.
     *
     * @param {string} [siteConfig.nodeVersion] Version of Node.js.
     *
     * @param {string} [siteConfig.linuxFxVersion] Linux App Framework and version
     *
     * @param {string} [siteConfig.windowsFxVersion] Xenon App Framework and
     * version
     *
     * @param {boolean} [siteConfig.requestTracingEnabled] <code>true</code> if
     * request tracing is enabled; otherwise, <code>false</code>.
     *
     * @param {date} [siteConfig.requestTracingExpirationTime] Request tracing
     * expiration time.
     *
     * @param {boolean} [siteConfig.remoteDebuggingEnabled] <code>true</code> if
     * remote debugging is enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteConfig.remoteDebuggingVersion] Remote debugging
     * version.
     *
     * @param {boolean} [siteConfig.httpLoggingEnabled] <code>true</code> if HTTP
     * logging is enabled; otherwise, <code>false</code>.
     *
     * @param {number} [siteConfig.logsDirectorySizeLimit] HTTP logs directory size
     * limit.
     *
     * @param {boolean} [siteConfig.detailedErrorLoggingEnabled] <code>true</code>
     * if detailed error logging is enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteConfig.publishingUsername] Publishing user name.
     *
     * @param {array} [siteConfig.appSettings] Application settings.
     *
     * @param {object} [siteConfig.azureStorageAccounts] User-provided Azure
     * storage accounts.
     *
     * @param {array} [siteConfig.connectionStrings] Connection strings.
     *
     * @param {array} [siteConfig.handlerMappings] Handler mappings.
     *
     * @param {string} [siteConfig.documentRoot] Document root.
     *
     * @param {string} [siteConfig.scmType] SCM type. Possible values include:
     * 'None', 'Dropbox', 'Tfs', 'LocalGit', 'GitHub', 'CodePlexGit', 'CodePlexHg',
     * 'BitbucketGit', 'BitbucketHg', 'ExternalGit', 'ExternalHg', 'OneDrive',
     * 'VSO'
     *
     * @param {boolean} [siteConfig.use32BitWorkerProcess] <code>true</code> to use
     * 32-bit worker process; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteConfig.webSocketsEnabled] <code>true</code> if
     * WebSocket is enabled; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteConfig.alwaysOn] <code>true</code> if Always On is
     * enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteConfig.javaVersion] Java version.
     *
     * @param {string} [siteConfig.javaContainer] Java container.
     *
     * @param {string} [siteConfig.javaContainerVersion] Java container version.
     *
     * @param {string} [siteConfig.appCommandLine] App command line to launch.
     *
     * @param {string} [siteConfig.managedPipelineMode] Managed pipeline mode.
     * Possible values include: 'Integrated', 'Classic'
     *
     * @param {array} [siteConfig.virtualApplications] Virtual applications.
     *
     * @param {string} [siteConfig.loadBalancing] Site load balancing. Possible
     * values include: 'WeightedRoundRobin', 'LeastRequests', 'LeastResponseTime',
     * 'WeightedTotalTraffic', 'RequestHash'
     *
     * @param {object} [siteConfig.experiments] This is work around for polymophic
     * types.
     *
     * @param {array} [siteConfig.experiments.rampUpRules] List of ramp-up rules.
     *
     * @param {object} [siteConfig.limits] Site limits.
     *
     * @param {number} [siteConfig.limits.maxPercentageCpu] Maximum allowed CPU
     * usage percentage.
     *
     * @param {number} [siteConfig.limits.maxMemoryInMb] Maximum allowed memory
     * usage in MB.
     *
     * @param {number} [siteConfig.limits.maxDiskSizeInMb] Maximum allowed disk
     * size usage in MB.
     *
     * @param {boolean} [siteConfig.autoHealEnabled] <code>true</code> if Auto Heal
     * is enabled; otherwise, <code>false</code>.
     *
     * @param {object} [siteConfig.autoHealRules] Auto Heal rules.
     *
     * @param {object} [siteConfig.autoHealRules.triggers] Conditions that describe
     * when to execute the auto-heal actions.
     *
     * @param {object} [siteConfig.autoHealRules.triggers.requests] A rule based on
     * total requests.
     *
     * @param {number} [siteConfig.autoHealRules.triggers.requests.count] Request
     * Count.
     *
     * @param {string} [siteConfig.autoHealRules.triggers.requests.timeInterval]
     * Time interval.
     *
     * @param {number} [siteConfig.autoHealRules.triggers.privateBytesInKB] A rule
     * based on private bytes.
     *
     * @param {array} [siteConfig.autoHealRules.triggers.statusCodes] A rule based
     * on status codes.
     *
     * @param {object} [siteConfig.autoHealRules.triggers.slowRequests] A rule
     * based on request execution time.
     *
     * @param {string} [siteConfig.autoHealRules.triggers.slowRequests.timeTaken]
     * Time taken.
     *
     * @param {number} [siteConfig.autoHealRules.triggers.slowRequests.count]
     * Request Count.
     *
     * @param {string}
     * [siteConfig.autoHealRules.triggers.slowRequests.timeInterval] Time interval.
     *
     * @param {object} [siteConfig.autoHealRules.actions] Actions to be executed
     * when a rule is triggered.
     *
     * @param {string} [siteConfig.autoHealRules.actions.actionType] Predefined
     * action to be taken. Possible values include: 'Recycle', 'LogEvent',
     * 'CustomAction'
     *
     * @param {object} [siteConfig.autoHealRules.actions.customAction] Custom
     * action to be taken.
     *
     * @param {string} [siteConfig.autoHealRules.actions.customAction.exe]
     * Executable to be run.
     *
     * @param {string} [siteConfig.autoHealRules.actions.customAction.parameters]
     * Parameters for the executable.
     *
     * @param {string} [siteConfig.autoHealRules.actions.minProcessExecutionTime]
     * Minimum time the process must execute
     * before taking the action
     *
     * @param {string} [siteConfig.tracingOptions] Tracing options.
     *
     * @param {string} [siteConfig.vnetName] Virtual Network name.
     *
     * @param {object} [siteConfig.cors] Cross-Origin Resource Sharing (CORS)
     * settings.
     *
     * @param {array} [siteConfig.cors.allowedOrigins] Gets or sets the list of
     * origins that should be allowed to make cross-origin
     * calls (for example: http://example.com:12345). Use "*" to allow all.
     *
     * @param {object} [siteConfig.push] Push endpoint settings.
     *
     * @param {boolean} siteConfig.push.isPushEnabled Gets or sets a flag
     * indicating whether the Push endpoint is enabled.
     *
     * @param {string} [siteConfig.push.tagWhitelistJson] Gets or sets a JSON
     * string containing a list of tags that are whitelisted for use by the push
     * registration endpoint.
     *
     * @param {string} [siteConfig.push.tagsRequiringAuth] Gets or sets a JSON
     * string containing a list of tags that require user authentication to be used
     * in the push registration endpoint.
     * Tags can consist of alphanumeric characters and the following:
     * '_', '@', '#', '.', ':', '-'.
     * Validation should be performed at the PushRequestHandler.
     *
     * @param {string} [siteConfig.push.dynamicTagsJson] Gets or sets a JSON string
     * containing a list of dynamic tags that will be evaluated from user claims in
     * the push registration endpoint.
     *
     * @param {string} [siteConfig.push.kind] Kind of resource.
     *
     * @param {object} [siteConfig.apiDefinition] Information about the formal API
     * definition for the app.
     *
     * @param {string} [siteConfig.apiDefinition.url] The URL of the API
     * definition.
     *
     * @param {string} [siteConfig.autoSwapSlotName] Auto-swap slot name.
     *
     * @param {boolean} [siteConfig.localMySqlEnabled] <code>true</code> to enable
     * local MySQL; otherwise, <code>false</code>.
     *
     * @param {number} [siteConfig.managedServiceIdentityId] Managed Service
     * Identity Id
     *
     * @param {number} [siteConfig.xManagedServiceIdentityId] Explicit Managed
     * Service Identity Id
     *
     * @param {array} [siteConfig.ipSecurityRestrictions] IP security restrictions.
     *
     * @param {boolean} [siteConfig.http20Enabled] Http20Enabled: configures a web
     * site to allow clients to connect over http2.0
     *
     * @param {string} [siteConfig.minTlsVersion] MinTlsVersion: configures the
     * minimum version of TLS required for SSL requests. Possible values include:
     * '1.0', '1.1', '1.2'
     *
     * @param {string} [siteConfig.ftpsState] State of FTP / FTPS service. Possible
     * values include: 'AllAllowed', 'FtpsOnly', 'Disabled'
     *
     * @param {number} [siteConfig.reservedInstanceCount] Number of reserved
     * instances.
     * This setting only applies to the Consumption Plan
     *
     * @param {string} [siteConfig.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will update configuration for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteConfigResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteConfigResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteConfigResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateConfigurationSlot(resourceGroupName: string, name: string, siteConfig: models.SiteConfigResource, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteConfigResource>;
    createOrUpdateConfigurationSlot(resourceGroupName: string, name: string, siteConfig: models.SiteConfigResource, slot: string, callback: ServiceCallback<models.SiteConfigResource>): void;
    createOrUpdateConfigurationSlot(resourceGroupName: string, name: string, siteConfig: models.SiteConfigResource, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteConfigResource>): void;


    /**
     * @summary Updates the configuration of an app.
     *
     * Updates the configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} siteConfig JSON representation of a SiteConfig object. See
     * example.
     *
     * @param {number} [siteConfig.numberOfWorkers] Number of workers.
     *
     * @param {array} [siteConfig.defaultDocuments] Default documents.
     *
     * @param {string} [siteConfig.netFrameworkVersion] .NET Framework version.
     *
     * @param {string} [siteConfig.phpVersion] Version of PHP.
     *
     * @param {string} [siteConfig.pythonVersion] Version of Python.
     *
     * @param {string} [siteConfig.nodeVersion] Version of Node.js.
     *
     * @param {string} [siteConfig.linuxFxVersion] Linux App Framework and version
     *
     * @param {string} [siteConfig.windowsFxVersion] Xenon App Framework and
     * version
     *
     * @param {boolean} [siteConfig.requestTracingEnabled] <code>true</code> if
     * request tracing is enabled; otherwise, <code>false</code>.
     *
     * @param {date} [siteConfig.requestTracingExpirationTime] Request tracing
     * expiration time.
     *
     * @param {boolean} [siteConfig.remoteDebuggingEnabled] <code>true</code> if
     * remote debugging is enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteConfig.remoteDebuggingVersion] Remote debugging
     * version.
     *
     * @param {boolean} [siteConfig.httpLoggingEnabled] <code>true</code> if HTTP
     * logging is enabled; otherwise, <code>false</code>.
     *
     * @param {number} [siteConfig.logsDirectorySizeLimit] HTTP logs directory size
     * limit.
     *
     * @param {boolean} [siteConfig.detailedErrorLoggingEnabled] <code>true</code>
     * if detailed error logging is enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteConfig.publishingUsername] Publishing user name.
     *
     * @param {array} [siteConfig.appSettings] Application settings.
     *
     * @param {object} [siteConfig.azureStorageAccounts] User-provided Azure
     * storage accounts.
     *
     * @param {array} [siteConfig.connectionStrings] Connection strings.
     *
     * @param {array} [siteConfig.handlerMappings] Handler mappings.
     *
     * @param {string} [siteConfig.documentRoot] Document root.
     *
     * @param {string} [siteConfig.scmType] SCM type. Possible values include:
     * 'None', 'Dropbox', 'Tfs', 'LocalGit', 'GitHub', 'CodePlexGit', 'CodePlexHg',
     * 'BitbucketGit', 'BitbucketHg', 'ExternalGit', 'ExternalHg', 'OneDrive',
     * 'VSO'
     *
     * @param {boolean} [siteConfig.use32BitWorkerProcess] <code>true</code> to use
     * 32-bit worker process; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteConfig.webSocketsEnabled] <code>true</code> if
     * WebSocket is enabled; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteConfig.alwaysOn] <code>true</code> if Always On is
     * enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteConfig.javaVersion] Java version.
     *
     * @param {string} [siteConfig.javaContainer] Java container.
     *
     * @param {string} [siteConfig.javaContainerVersion] Java container version.
     *
     * @param {string} [siteConfig.appCommandLine] App command line to launch.
     *
     * @param {string} [siteConfig.managedPipelineMode] Managed pipeline mode.
     * Possible values include: 'Integrated', 'Classic'
     *
     * @param {array} [siteConfig.virtualApplications] Virtual applications.
     *
     * @param {string} [siteConfig.loadBalancing] Site load balancing. Possible
     * values include: 'WeightedRoundRobin', 'LeastRequests', 'LeastResponseTime',
     * 'WeightedTotalTraffic', 'RequestHash'
     *
     * @param {object} [siteConfig.experiments] This is work around for polymophic
     * types.
     *
     * @param {array} [siteConfig.experiments.rampUpRules] List of ramp-up rules.
     *
     * @param {object} [siteConfig.limits] Site limits.
     *
     * @param {number} [siteConfig.limits.maxPercentageCpu] Maximum allowed CPU
     * usage percentage.
     *
     * @param {number} [siteConfig.limits.maxMemoryInMb] Maximum allowed memory
     * usage in MB.
     *
     * @param {number} [siteConfig.limits.maxDiskSizeInMb] Maximum allowed disk
     * size usage in MB.
     *
     * @param {boolean} [siteConfig.autoHealEnabled] <code>true</code> if Auto Heal
     * is enabled; otherwise, <code>false</code>.
     *
     * @param {object} [siteConfig.autoHealRules] Auto Heal rules.
     *
     * @param {object} [siteConfig.autoHealRules.triggers] Conditions that describe
     * when to execute the auto-heal actions.
     *
     * @param {object} [siteConfig.autoHealRules.triggers.requests] A rule based on
     * total requests.
     *
     * @param {number} [siteConfig.autoHealRules.triggers.requests.count] Request
     * Count.
     *
     * @param {string} [siteConfig.autoHealRules.triggers.requests.timeInterval]
     * Time interval.
     *
     * @param {number} [siteConfig.autoHealRules.triggers.privateBytesInKB] A rule
     * based on private bytes.
     *
     * @param {array} [siteConfig.autoHealRules.triggers.statusCodes] A rule based
     * on status codes.
     *
     * @param {object} [siteConfig.autoHealRules.triggers.slowRequests] A rule
     * based on request execution time.
     *
     * @param {string} [siteConfig.autoHealRules.triggers.slowRequests.timeTaken]
     * Time taken.
     *
     * @param {number} [siteConfig.autoHealRules.triggers.slowRequests.count]
     * Request Count.
     *
     * @param {string}
     * [siteConfig.autoHealRules.triggers.slowRequests.timeInterval] Time interval.
     *
     * @param {object} [siteConfig.autoHealRules.actions] Actions to be executed
     * when a rule is triggered.
     *
     * @param {string} [siteConfig.autoHealRules.actions.actionType] Predefined
     * action to be taken. Possible values include: 'Recycle', 'LogEvent',
     * 'CustomAction'
     *
     * @param {object} [siteConfig.autoHealRules.actions.customAction] Custom
     * action to be taken.
     *
     * @param {string} [siteConfig.autoHealRules.actions.customAction.exe]
     * Executable to be run.
     *
     * @param {string} [siteConfig.autoHealRules.actions.customAction.parameters]
     * Parameters for the executable.
     *
     * @param {string} [siteConfig.autoHealRules.actions.minProcessExecutionTime]
     * Minimum time the process must execute
     * before taking the action
     *
     * @param {string} [siteConfig.tracingOptions] Tracing options.
     *
     * @param {string} [siteConfig.vnetName] Virtual Network name.
     *
     * @param {object} [siteConfig.cors] Cross-Origin Resource Sharing (CORS)
     * settings.
     *
     * @param {array} [siteConfig.cors.allowedOrigins] Gets or sets the list of
     * origins that should be allowed to make cross-origin
     * calls (for example: http://example.com:12345). Use "*" to allow all.
     *
     * @param {object} [siteConfig.push] Push endpoint settings.
     *
     * @param {boolean} siteConfig.push.isPushEnabled Gets or sets a flag
     * indicating whether the Push endpoint is enabled.
     *
     * @param {string} [siteConfig.push.tagWhitelistJson] Gets or sets a JSON
     * string containing a list of tags that are whitelisted for use by the push
     * registration endpoint.
     *
     * @param {string} [siteConfig.push.tagsRequiringAuth] Gets or sets a JSON
     * string containing a list of tags that require user authentication to be used
     * in the push registration endpoint.
     * Tags can consist of alphanumeric characters and the following:
     * '_', '@', '#', '.', ':', '-'.
     * Validation should be performed at the PushRequestHandler.
     *
     * @param {string} [siteConfig.push.dynamicTagsJson] Gets or sets a JSON string
     * containing a list of dynamic tags that will be evaluated from user claims in
     * the push registration endpoint.
     *
     * @param {string} [siteConfig.push.kind] Kind of resource.
     *
     * @param {object} [siteConfig.apiDefinition] Information about the formal API
     * definition for the app.
     *
     * @param {string} [siteConfig.apiDefinition.url] The URL of the API
     * definition.
     *
     * @param {string} [siteConfig.autoSwapSlotName] Auto-swap slot name.
     *
     * @param {boolean} [siteConfig.localMySqlEnabled] <code>true</code> to enable
     * local MySQL; otherwise, <code>false</code>.
     *
     * @param {number} [siteConfig.managedServiceIdentityId] Managed Service
     * Identity Id
     *
     * @param {number} [siteConfig.xManagedServiceIdentityId] Explicit Managed
     * Service Identity Id
     *
     * @param {array} [siteConfig.ipSecurityRestrictions] IP security restrictions.
     *
     * @param {boolean} [siteConfig.http20Enabled] Http20Enabled: configures a web
     * site to allow clients to connect over http2.0
     *
     * @param {string} [siteConfig.minTlsVersion] MinTlsVersion: configures the
     * minimum version of TLS required for SSL requests. Possible values include:
     * '1.0', '1.1', '1.2'
     *
     * @param {string} [siteConfig.ftpsState] State of FTP / FTPS service. Possible
     * values include: 'AllAllowed', 'FtpsOnly', 'Disabled'
     *
     * @param {number} [siteConfig.reservedInstanceCount] Number of reserved
     * instances.
     * This setting only applies to the Consumption Plan
     *
     * @param {string} [siteConfig.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will update configuration for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteConfigResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateConfigurationSlotWithHttpOperationResponse(resourceGroupName: string, name: string, siteConfig: models.SiteConfigResource, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteConfigResource>>;

    /**
     * @summary Updates the configuration of an app.
     *
     * Updates the configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} siteConfig JSON representation of a SiteConfig object. See
     * example.
     *
     * @param {number} [siteConfig.numberOfWorkers] Number of workers.
     *
     * @param {array} [siteConfig.defaultDocuments] Default documents.
     *
     * @param {string} [siteConfig.netFrameworkVersion] .NET Framework version.
     *
     * @param {string} [siteConfig.phpVersion] Version of PHP.
     *
     * @param {string} [siteConfig.pythonVersion] Version of Python.
     *
     * @param {string} [siteConfig.nodeVersion] Version of Node.js.
     *
     * @param {string} [siteConfig.linuxFxVersion] Linux App Framework and version
     *
     * @param {string} [siteConfig.windowsFxVersion] Xenon App Framework and
     * version
     *
     * @param {boolean} [siteConfig.requestTracingEnabled] <code>true</code> if
     * request tracing is enabled; otherwise, <code>false</code>.
     *
     * @param {date} [siteConfig.requestTracingExpirationTime] Request tracing
     * expiration time.
     *
     * @param {boolean} [siteConfig.remoteDebuggingEnabled] <code>true</code> if
     * remote debugging is enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteConfig.remoteDebuggingVersion] Remote debugging
     * version.
     *
     * @param {boolean} [siteConfig.httpLoggingEnabled] <code>true</code> if HTTP
     * logging is enabled; otherwise, <code>false</code>.
     *
     * @param {number} [siteConfig.logsDirectorySizeLimit] HTTP logs directory size
     * limit.
     *
     * @param {boolean} [siteConfig.detailedErrorLoggingEnabled] <code>true</code>
     * if detailed error logging is enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteConfig.publishingUsername] Publishing user name.
     *
     * @param {array} [siteConfig.appSettings] Application settings.
     *
     * @param {object} [siteConfig.azureStorageAccounts] User-provided Azure
     * storage accounts.
     *
     * @param {array} [siteConfig.connectionStrings] Connection strings.
     *
     * @param {array} [siteConfig.handlerMappings] Handler mappings.
     *
     * @param {string} [siteConfig.documentRoot] Document root.
     *
     * @param {string} [siteConfig.scmType] SCM type. Possible values include:
     * 'None', 'Dropbox', 'Tfs', 'LocalGit', 'GitHub', 'CodePlexGit', 'CodePlexHg',
     * 'BitbucketGit', 'BitbucketHg', 'ExternalGit', 'ExternalHg', 'OneDrive',
     * 'VSO'
     *
     * @param {boolean} [siteConfig.use32BitWorkerProcess] <code>true</code> to use
     * 32-bit worker process; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteConfig.webSocketsEnabled] <code>true</code> if
     * WebSocket is enabled; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteConfig.alwaysOn] <code>true</code> if Always On is
     * enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteConfig.javaVersion] Java version.
     *
     * @param {string} [siteConfig.javaContainer] Java container.
     *
     * @param {string} [siteConfig.javaContainerVersion] Java container version.
     *
     * @param {string} [siteConfig.appCommandLine] App command line to launch.
     *
     * @param {string} [siteConfig.managedPipelineMode] Managed pipeline mode.
     * Possible values include: 'Integrated', 'Classic'
     *
     * @param {array} [siteConfig.virtualApplications] Virtual applications.
     *
     * @param {string} [siteConfig.loadBalancing] Site load balancing. Possible
     * values include: 'WeightedRoundRobin', 'LeastRequests', 'LeastResponseTime',
     * 'WeightedTotalTraffic', 'RequestHash'
     *
     * @param {object} [siteConfig.experiments] This is work around for polymophic
     * types.
     *
     * @param {array} [siteConfig.experiments.rampUpRules] List of ramp-up rules.
     *
     * @param {object} [siteConfig.limits] Site limits.
     *
     * @param {number} [siteConfig.limits.maxPercentageCpu] Maximum allowed CPU
     * usage percentage.
     *
     * @param {number} [siteConfig.limits.maxMemoryInMb] Maximum allowed memory
     * usage in MB.
     *
     * @param {number} [siteConfig.limits.maxDiskSizeInMb] Maximum allowed disk
     * size usage in MB.
     *
     * @param {boolean} [siteConfig.autoHealEnabled] <code>true</code> if Auto Heal
     * is enabled; otherwise, <code>false</code>.
     *
     * @param {object} [siteConfig.autoHealRules] Auto Heal rules.
     *
     * @param {object} [siteConfig.autoHealRules.triggers] Conditions that describe
     * when to execute the auto-heal actions.
     *
     * @param {object} [siteConfig.autoHealRules.triggers.requests] A rule based on
     * total requests.
     *
     * @param {number} [siteConfig.autoHealRules.triggers.requests.count] Request
     * Count.
     *
     * @param {string} [siteConfig.autoHealRules.triggers.requests.timeInterval]
     * Time interval.
     *
     * @param {number} [siteConfig.autoHealRules.triggers.privateBytesInKB] A rule
     * based on private bytes.
     *
     * @param {array} [siteConfig.autoHealRules.triggers.statusCodes] A rule based
     * on status codes.
     *
     * @param {object} [siteConfig.autoHealRules.triggers.slowRequests] A rule
     * based on request execution time.
     *
     * @param {string} [siteConfig.autoHealRules.triggers.slowRequests.timeTaken]
     * Time taken.
     *
     * @param {number} [siteConfig.autoHealRules.triggers.slowRequests.count]
     * Request Count.
     *
     * @param {string}
     * [siteConfig.autoHealRules.triggers.slowRequests.timeInterval] Time interval.
     *
     * @param {object} [siteConfig.autoHealRules.actions] Actions to be executed
     * when a rule is triggered.
     *
     * @param {string} [siteConfig.autoHealRules.actions.actionType] Predefined
     * action to be taken. Possible values include: 'Recycle', 'LogEvent',
     * 'CustomAction'
     *
     * @param {object} [siteConfig.autoHealRules.actions.customAction] Custom
     * action to be taken.
     *
     * @param {string} [siteConfig.autoHealRules.actions.customAction.exe]
     * Executable to be run.
     *
     * @param {string} [siteConfig.autoHealRules.actions.customAction.parameters]
     * Parameters for the executable.
     *
     * @param {string} [siteConfig.autoHealRules.actions.minProcessExecutionTime]
     * Minimum time the process must execute
     * before taking the action
     *
     * @param {string} [siteConfig.tracingOptions] Tracing options.
     *
     * @param {string} [siteConfig.vnetName] Virtual Network name.
     *
     * @param {object} [siteConfig.cors] Cross-Origin Resource Sharing (CORS)
     * settings.
     *
     * @param {array} [siteConfig.cors.allowedOrigins] Gets or sets the list of
     * origins that should be allowed to make cross-origin
     * calls (for example: http://example.com:12345). Use "*" to allow all.
     *
     * @param {object} [siteConfig.push] Push endpoint settings.
     *
     * @param {boolean} siteConfig.push.isPushEnabled Gets or sets a flag
     * indicating whether the Push endpoint is enabled.
     *
     * @param {string} [siteConfig.push.tagWhitelistJson] Gets or sets a JSON
     * string containing a list of tags that are whitelisted for use by the push
     * registration endpoint.
     *
     * @param {string} [siteConfig.push.tagsRequiringAuth] Gets or sets a JSON
     * string containing a list of tags that require user authentication to be used
     * in the push registration endpoint.
     * Tags can consist of alphanumeric characters and the following:
     * '_', '@', '#', '.', ':', '-'.
     * Validation should be performed at the PushRequestHandler.
     *
     * @param {string} [siteConfig.push.dynamicTagsJson] Gets or sets a JSON string
     * containing a list of dynamic tags that will be evaluated from user claims in
     * the push registration endpoint.
     *
     * @param {string} [siteConfig.push.kind] Kind of resource.
     *
     * @param {object} [siteConfig.apiDefinition] Information about the formal API
     * definition for the app.
     *
     * @param {string} [siteConfig.apiDefinition.url] The URL of the API
     * definition.
     *
     * @param {string} [siteConfig.autoSwapSlotName] Auto-swap slot name.
     *
     * @param {boolean} [siteConfig.localMySqlEnabled] <code>true</code> to enable
     * local MySQL; otherwise, <code>false</code>.
     *
     * @param {number} [siteConfig.managedServiceIdentityId] Managed Service
     * Identity Id
     *
     * @param {number} [siteConfig.xManagedServiceIdentityId] Explicit Managed
     * Service Identity Id
     *
     * @param {array} [siteConfig.ipSecurityRestrictions] IP security restrictions.
     *
     * @param {boolean} [siteConfig.http20Enabled] Http20Enabled: configures a web
     * site to allow clients to connect over http2.0
     *
     * @param {string} [siteConfig.minTlsVersion] MinTlsVersion: configures the
     * minimum version of TLS required for SSL requests. Possible values include:
     * '1.0', '1.1', '1.2'
     *
     * @param {string} [siteConfig.ftpsState] State of FTP / FTPS service. Possible
     * values include: 'AllAllowed', 'FtpsOnly', 'Disabled'
     *
     * @param {number} [siteConfig.reservedInstanceCount] Number of reserved
     * instances.
     * This setting only applies to the Consumption Plan
     *
     * @param {string} [siteConfig.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will update configuration for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteConfigResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteConfigResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteConfigResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateConfigurationSlot(resourceGroupName: string, name: string, siteConfig: models.SiteConfigResource, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteConfigResource>;
    updateConfigurationSlot(resourceGroupName: string, name: string, siteConfig: models.SiteConfigResource, slot: string, callback: ServiceCallback<models.SiteConfigResource>): void;
    updateConfigurationSlot(resourceGroupName: string, name: string, siteConfig: models.SiteConfigResource, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteConfigResource>): void;


    /**
     * @summary Gets a list of web app configuration snapshots identifiers. Each
     * element of the list contains a timestamp and the ID of the snapshot.
     *
     * Gets a list of web app configuration snapshots identifiers. Each element of
     * the list contains a timestamp and the ID of the snapshot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will return configuration for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteConfigurationSnapshotInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listConfigurationSnapshotInfoSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteConfigurationSnapshotInfoCollection>>;

    /**
     * @summary Gets a list of web app configuration snapshots identifiers. Each
     * element of the list contains a timestamp and the ID of the snapshot.
     *
     * Gets a list of web app configuration snapshots identifiers. Each element of
     * the list contains a timestamp and the ID of the snapshot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will return configuration for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteConfigurationSnapshotInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteConfigurationSnapshotInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteConfigurationSnapshotInfoCollection} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listConfigurationSnapshotInfoSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteConfigurationSnapshotInfoCollection>;
    listConfigurationSnapshotInfoSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.SiteConfigurationSnapshotInfoCollection>): void;
    listConfigurationSnapshotInfoSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteConfigurationSnapshotInfoCollection>): void;


    /**
     * @summary Gets a snapshot of the configuration of an app at a previous point
     * in time.
     *
     * Gets a snapshot of the configuration of an app at a previous point in time.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} snapshotId The ID of the snapshot to read.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will return configuration for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteConfigResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getConfigurationSnapshotSlotWithHttpOperationResponse(resourceGroupName: string, name: string, snapshotId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteConfigResource>>;

    /**
     * @summary Gets a snapshot of the configuration of an app at a previous point
     * in time.
     *
     * Gets a snapshot of the configuration of an app at a previous point in time.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} snapshotId The ID of the snapshot to read.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will return configuration for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteConfigResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteConfigResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteConfigResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getConfigurationSnapshotSlot(resourceGroupName: string, name: string, snapshotId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteConfigResource>;
    getConfigurationSnapshotSlot(resourceGroupName: string, name: string, snapshotId: string, slot: string, callback: ServiceCallback<models.SiteConfigResource>): void;
    getConfigurationSnapshotSlot(resourceGroupName: string, name: string, snapshotId: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteConfigResource>): void;


    /**
     * @summary Reverts the configuration of an app to a previous snapshot.
     *
     * Reverts the configuration of an app to a previous snapshot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} snapshotId The ID of the snapshot to read.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will return configuration for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    recoverSiteConfigurationSnapshotSlotWithHttpOperationResponse(resourceGroupName: string, name: string, snapshotId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Reverts the configuration of an app to a previous snapshot.
     *
     * Reverts the configuration of an app to a previous snapshot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} snapshotId The ID of the snapshot to read.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will return configuration for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    recoverSiteConfigurationSnapshotSlot(resourceGroupName: string, name: string, snapshotId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    recoverSiteConfigurationSnapshotSlot(resourceGroupName: string, name: string, snapshotId: string, slot: string, callback: ServiceCallback<void>): void;
    recoverSiteConfigurationSnapshotSlot(resourceGroupName: string, name: string, snapshotId: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Gets the last lines of docker logs for the given site
     *
     * Gets the last lines of docker logs for the given site
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWebSiteContainerLogsSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<stream.Readable>>;

    /**
     * @summary Gets the last lines of docker logs for the given site
     *
     * Gets the last lines of docker logs for the given site
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getWebSiteContainerLogsSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<stream.Readable>;
    getWebSiteContainerLogsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<stream.Readable>): void;
    getWebSiteContainerLogsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<stream.Readable>): void;


    /**
     * @summary Gets the ZIP archived docker log files for the given site
     *
     * Gets the ZIP archived docker log files for the given site
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getContainerLogsZipSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<stream.Readable>>;

    /**
     * @summary Gets the ZIP archived docker log files for the given site
     *
     * Gets the ZIP archived docker log files for the given site
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getContainerLogsZipSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<stream.Readable>;
    getContainerLogsZipSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<stream.Readable>): void;
    getContainerLogsZipSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<stream.Readable>): void;


    /**
     * @summary List continuous web jobs for an app, or a deployment slot.
     *
     * List continuous web jobs for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ContinuousWebJobCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listContinuousWebJobsSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ContinuousWebJobCollection>>;

    /**
     * @summary List continuous web jobs for an app, or a deployment slot.
     *
     * List continuous web jobs for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ContinuousWebJobCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ContinuousWebJobCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ContinuousWebJobCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listContinuousWebJobsSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ContinuousWebJobCollection>;
    listContinuousWebJobsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.ContinuousWebJobCollection>): void;
    listContinuousWebJobsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ContinuousWebJobCollection>): void;


    /**
     * @summary Gets a continuous web job by its ID for an app, or a deployment
     * slot.
     *
     * Gets a continuous web job by its ID for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ContinuousWebJob>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getContinuousWebJobSlotWithHttpOperationResponse(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ContinuousWebJob>>;

    /**
     * @summary Gets a continuous web job by its ID for an app, or a deployment
     * slot.
     *
     * Gets a continuous web job by its ID for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ContinuousWebJob} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ContinuousWebJob} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ContinuousWebJob} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ContinuousWebJob>;
    getContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, callback: ServiceCallback<models.ContinuousWebJob>): void;
    getContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ContinuousWebJob>): void;


    /**
     * @summary Delete a continuous web job by its ID for an app, or a deployment
     * slot.
     *
     * Delete a continuous web job by its ID for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteContinuousWebJobSlotWithHttpOperationResponse(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete a continuous web job by its ID for an app, or a deployment
     * slot.
     *
     * Delete a continuous web job by its ID for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, callback: ServiceCallback<void>): void;
    deleteContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Start a continuous web job for an app, or a deployment slot.
     *
     * Start a continuous web job for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    startContinuousWebJobSlotWithHttpOperationResponse(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Start a continuous web job for an app, or a deployment slot.
     *
     * Start a continuous web job for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    startContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    startContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, callback: ServiceCallback<void>): void;
    startContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Stop a continuous web job for an app, or a deployment slot.
     *
     * Stop a continuous web job for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    stopContinuousWebJobSlotWithHttpOperationResponse(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Stop a continuous web job for an app, or a deployment slot.
     *
     * Stop a continuous web job for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    stopContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    stopContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, callback: ServiceCallback<void>): void;
    stopContinuousWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary List deployments for an app, or a deployment slot.
     *
     * List deployments for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeploymentCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listDeploymentsSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeploymentCollection>>;

    /**
     * @summary List deployments for an app, or a deployment slot.
     *
     * List deployments for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeploymentCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeploymentCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeploymentCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listDeploymentsSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeploymentCollection>;
    listDeploymentsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.DeploymentCollection>): void;
    listDeploymentsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentCollection>): void;


    /**
     * @summary Get a deployment by its ID for an app, or a deployment slot.
     *
     * Get a deployment by its ID for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} id Deployment ID.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API gets a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Deployment>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getDeploymentSlotWithHttpOperationResponse(resourceGroupName: string, name: string, id: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Deployment>>;

    /**
     * @summary Get a deployment by its ID for an app, or a deployment slot.
     *
     * Get a deployment by its ID for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} id Deployment ID.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API gets a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Deployment} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Deployment} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Deployment} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Deployment>;
    getDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, callback: ServiceCallback<models.Deployment>): void;
    getDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Deployment>): void;


    /**
     * @summary Create a deployment for an app, or a deployment slot.
     *
     * Create a deployment for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} id ID of an existing deployment.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API creates a deployment for the production slot.
     *
     * @param {object} deployment Deployment details.
     *
     * @param {number} [deployment.status] Deployment status.
     *
     * @param {string} [deployment.message] Details about deployment status.
     *
     * @param {string} [deployment.author] Who authored the deployment.
     *
     * @param {string} [deployment.deployer] Who performed the deployment.
     *
     * @param {string} [deployment.authorEmail] Author email.
     *
     * @param {date} [deployment.startTime] Start time.
     *
     * @param {date} [deployment.endTime] End time.
     *
     * @param {boolean} [deployment.active] True if deployment is currently active,
     * false if completed and null if not started.
     *
     * @param {string} [deployment.details] Details on deployment.
     *
     * @param {string} [deployment.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Deployment>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createDeploymentSlotWithHttpOperationResponse(resourceGroupName: string, name: string, id: string, slot: string, deployment: models.Deployment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Deployment>>;

    /**
     * @summary Create a deployment for an app, or a deployment slot.
     *
     * Create a deployment for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} id ID of an existing deployment.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API creates a deployment for the production slot.
     *
     * @param {object} deployment Deployment details.
     *
     * @param {number} [deployment.status] Deployment status.
     *
     * @param {string} [deployment.message] Details about deployment status.
     *
     * @param {string} [deployment.author] Who authored the deployment.
     *
     * @param {string} [deployment.deployer] Who performed the deployment.
     *
     * @param {string} [deployment.authorEmail] Author email.
     *
     * @param {date} [deployment.startTime] Start time.
     *
     * @param {date} [deployment.endTime] End time.
     *
     * @param {boolean} [deployment.active] True if deployment is currently active,
     * false if completed and null if not started.
     *
     * @param {string} [deployment.details] Details on deployment.
     *
     * @param {string} [deployment.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Deployment} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Deployment} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Deployment} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, deployment: models.Deployment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Deployment>;
    createDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, deployment: models.Deployment, callback: ServiceCallback<models.Deployment>): void;
    createDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, deployment: models.Deployment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Deployment>): void;


    /**
     * @summary Delete a deployment by its ID for an app, or a deployment slot.
     *
     * Delete a deployment by its ID for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} id Deployment ID.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteDeploymentSlotWithHttpOperationResponse(resourceGroupName: string, name: string, id: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete a deployment by its ID for an app, or a deployment slot.
     *
     * Delete a deployment by its ID for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} id Deployment ID.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, callback: ServiceCallback<void>): void;
    deleteDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary List deployment log for specific deployment for an app, or a
     * deployment slot.
     *
     * List deployment log for specific deployment for an app, or a deployment
     * slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} id The ID of a specific deployment. This is the value of the
     * name property in the JSON response from "GET
     * /api/sites/{siteName}/deployments".
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Deployment>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listDeploymentLogSlotWithHttpOperationResponse(resourceGroupName: string, name: string, id: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Deployment>>;

    /**
     * @summary List deployment log for specific deployment for an app, or a
     * deployment slot.
     *
     * List deployment log for specific deployment for an app, or a deployment
     * slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} id The ID of a specific deployment. This is the value of the
     * name property in the JSON response from "GET
     * /api/sites/{siteName}/deployments".
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Deployment} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Deployment} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Deployment} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listDeploymentLogSlot(resourceGroupName: string, name: string, id: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Deployment>;
    listDeploymentLogSlot(resourceGroupName: string, name: string, id: string, slot: string, callback: ServiceCallback<models.Deployment>): void;
    listDeploymentLogSlot(resourceGroupName: string, name: string, id: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Deployment>): void;


    /**
     * @summary Discovers an existing app backup that can be restored from a blob
     * in Azure storage. Use this to get information about the databases stored in
     * a backup.
     *
     * Discovers an existing app backup that can be restored from a blob in Azure
     * storage. Use this to get information about the databases stored in a backup.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} request A RestoreRequest object that includes Azure storage
     * URL and blog name for discovery of backup.
     *
     * @param {string} request.storageAccountUrl SAS URL to the container.
     *
     * @param {string} [request.blobName] Name of a blob which contains the backup.
     *
     * @param {boolean} request.overwrite <code>true</code> if the restore
     * operation can overwrite target app; otherwise, <code>false</code>.
     * <code>true</code> is needed if trying to restore over an existing app.
     *
     * @param {string} [request.siteName] Name of an app.
     *
     * @param {array} [request.databases] Collection of databases which should be
     * restored. This list has to match the list of databases included in the
     * backup.
     *
     * @param {boolean} [request.ignoreConflictingHostNames] Changes a logic when
     * restoring an app with custom domains. <code>true</code> to remove custom
     * domains automatically. If <code>false</code>, custom domains are added to
     * the app's object when it is being restored, but that might fail due to
     * conflicts during the operation.
     *
     * @param {boolean} [request.ignoreDatabases] Ignore the databases and only
     * restore the site content
     *
     * @param {string} [request.appServicePlan] Specify app service plan that will
     * own restored site.
     *
     * @param {string} [request.operationType] Operation type. Possible values
     * include: 'Default', 'Clone', 'Relocation', 'Snapshot', 'CloudFS'
     *
     * @param {boolean} [request.adjustConnectionStrings] <code>true</code> if
     * SiteConfig.ConnectionStrings should be set in new app; otherwise,
     * <code>false</code>.
     *
     * @param {string} [request.hostingEnvironment] App Service Environment name,
     * if needed (only when restoring an app to an App Service Environment).
     *
     * @param {string} [request.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will perform discovery for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RestoreRequest>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    discoverBackupSlotWithHttpOperationResponse(resourceGroupName: string, name: string, request: models.RestoreRequest, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RestoreRequest>>;

    /**
     * @summary Discovers an existing app backup that can be restored from a blob
     * in Azure storage. Use this to get information about the databases stored in
     * a backup.
     *
     * Discovers an existing app backup that can be restored from a blob in Azure
     * storage. Use this to get information about the databases stored in a backup.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} request A RestoreRequest object that includes Azure storage
     * URL and blog name for discovery of backup.
     *
     * @param {string} request.storageAccountUrl SAS URL to the container.
     *
     * @param {string} [request.blobName] Name of a blob which contains the backup.
     *
     * @param {boolean} request.overwrite <code>true</code> if the restore
     * operation can overwrite target app; otherwise, <code>false</code>.
     * <code>true</code> is needed if trying to restore over an existing app.
     *
     * @param {string} [request.siteName] Name of an app.
     *
     * @param {array} [request.databases] Collection of databases which should be
     * restored. This list has to match the list of databases included in the
     * backup.
     *
     * @param {boolean} [request.ignoreConflictingHostNames] Changes a logic when
     * restoring an app with custom domains. <code>true</code> to remove custom
     * domains automatically. If <code>false</code>, custom domains are added to
     * the app's object when it is being restored, but that might fail due to
     * conflicts during the operation.
     *
     * @param {boolean} [request.ignoreDatabases] Ignore the databases and only
     * restore the site content
     *
     * @param {string} [request.appServicePlan] Specify app service plan that will
     * own restored site.
     *
     * @param {string} [request.operationType] Operation type. Possible values
     * include: 'Default', 'Clone', 'Relocation', 'Snapshot', 'CloudFS'
     *
     * @param {boolean} [request.adjustConnectionStrings] <code>true</code> if
     * SiteConfig.ConnectionStrings should be set in new app; otherwise,
     * <code>false</code>.
     *
     * @param {string} [request.hostingEnvironment] App Service Environment name,
     * if needed (only when restoring an app to an App Service Environment).
     *
     * @param {string} [request.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will perform discovery for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RestoreRequest} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RestoreRequest} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RestoreRequest} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    discoverBackupSlot(resourceGroupName: string, name: string, request: models.RestoreRequest, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RestoreRequest>;
    discoverBackupSlot(resourceGroupName: string, name: string, request: models.RestoreRequest, slot: string, callback: ServiceCallback<models.RestoreRequest>): void;
    discoverBackupSlot(resourceGroupName: string, name: string, request: models.RestoreRequest, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RestoreRequest>): void;


    /**
     * @summary Lists ownership identifiers for domain associated with web app.
     *
     * Lists ownership identifiers for domain associated with web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will delete the binding for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IdentifierCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listDomainOwnershipIdentifiersSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IdentifierCollection>>;

    /**
     * @summary Lists ownership identifiers for domain associated with web app.
     *
     * Lists ownership identifiers for domain associated with web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will delete the binding for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IdentifierCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IdentifierCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IdentifierCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listDomainOwnershipIdentifiersSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IdentifierCollection>;
    listDomainOwnershipIdentifiersSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.IdentifierCollection>): void;
    listDomainOwnershipIdentifiersSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IdentifierCollection>): void;


    /**
     * @summary Get domain ownership identifier for web app.
     *
     * Get domain ownership identifier for web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} domainOwnershipIdentifierName Name of domain ownership
     * identifier.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will delete the binding for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Identifier>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getDomainOwnershipIdentifierSlotWithHttpOperationResponse(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Identifier>>;

    /**
     * @summary Get domain ownership identifier for web app.
     *
     * Get domain ownership identifier for web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} domainOwnershipIdentifierName Name of domain ownership
     * identifier.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will delete the binding for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Identifier} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Identifier} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Identifier} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Identifier>;
    getDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, slot: string, callback: ServiceCallback<models.Identifier>): void;
    getDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Identifier>): void;


    /**
     * @summary Creates a domain ownership identifier for web app, or updates an
     * existing ownership identifier.
     *
     * Creates a domain ownership identifier for web app, or updates an existing
     * ownership identifier.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} domainOwnershipIdentifierName Name of domain ownership
     * identifier.
     *
     * @param {object} domainOwnershipIdentifier A JSON representation of the
     * domain ownership properties.
     *
     * @param {string} [domainOwnershipIdentifier.identifierId] String
     * representation of the identity.
     *
     * @param {string} [domainOwnershipIdentifier.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will delete the binding for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Identifier>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateDomainOwnershipIdentifierSlotWithHttpOperationResponse(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: models.Identifier, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Identifier>>;

    /**
     * @summary Creates a domain ownership identifier for web app, or updates an
     * existing ownership identifier.
     *
     * Creates a domain ownership identifier for web app, or updates an existing
     * ownership identifier.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} domainOwnershipIdentifierName Name of domain ownership
     * identifier.
     *
     * @param {object} domainOwnershipIdentifier A JSON representation of the
     * domain ownership properties.
     *
     * @param {string} [domainOwnershipIdentifier.identifierId] String
     * representation of the identity.
     *
     * @param {string} [domainOwnershipIdentifier.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will delete the binding for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Identifier} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Identifier} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Identifier} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: models.Identifier, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Identifier>;
    createOrUpdateDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: models.Identifier, slot: string, callback: ServiceCallback<models.Identifier>): void;
    createOrUpdateDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: models.Identifier, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Identifier>): void;


    /**
     * @summary Deletes a domain ownership identifier for a web app.
     *
     * Deletes a domain ownership identifier for a web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} domainOwnershipIdentifierName Name of domain ownership
     * identifier.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will delete the binding for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteDomainOwnershipIdentifierSlotWithHttpOperationResponse(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a domain ownership identifier for a web app.
     *
     * Deletes a domain ownership identifier for a web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} domainOwnershipIdentifierName Name of domain ownership
     * identifier.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will delete the binding for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, slot: string, callback: ServiceCallback<void>): void;
    deleteDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Creates a domain ownership identifier for web app, or updates an
     * existing ownership identifier.
     *
     * Creates a domain ownership identifier for web app, or updates an existing
     * ownership identifier.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} domainOwnershipIdentifierName Name of domain ownership
     * identifier.
     *
     * @param {object} domainOwnershipIdentifier A JSON representation of the
     * domain ownership properties.
     *
     * @param {string} [domainOwnershipIdentifier.identifierId] String
     * representation of the identity.
     *
     * @param {string} [domainOwnershipIdentifier.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will delete the binding for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Identifier>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateDomainOwnershipIdentifierSlotWithHttpOperationResponse(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: models.Identifier, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Identifier>>;

    /**
     * @summary Creates a domain ownership identifier for web app, or updates an
     * existing ownership identifier.
     *
     * Creates a domain ownership identifier for web app, or updates an existing
     * ownership identifier.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} domainOwnershipIdentifierName Name of domain ownership
     * identifier.
     *
     * @param {object} domainOwnershipIdentifier A JSON representation of the
     * domain ownership properties.
     *
     * @param {string} [domainOwnershipIdentifier.identifierId] String
     * representation of the identity.
     *
     * @param {string} [domainOwnershipIdentifier.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will delete the binding for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Identifier} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Identifier} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Identifier} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: models.Identifier, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Identifier>;
    updateDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: models.Identifier, slot: string, callback: ServiceCallback<models.Identifier>): void;
    updateDomainOwnershipIdentifierSlot(resourceGroupName: string, name: string, domainOwnershipIdentifierName: string, domainOwnershipIdentifier: models.Identifier, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Identifier>): void;


    /**
     * @summary Get the status of the last MSDeploy operation.
     *
     * Get the status of the last MSDeploy operation.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MSDeployStatus>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getMSDeployStatusSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MSDeployStatus>>;

    /**
     * @summary Get the status of the last MSDeploy operation.
     *
     * Get the status of the last MSDeploy operation.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MSDeployStatus} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MSDeployStatus} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MSDeployStatus} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getMSDeployStatusSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MSDeployStatus>;
    getMSDeployStatusSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.MSDeployStatus>): void;
    getMSDeployStatusSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MSDeployStatus>): void;


    /**
     * @summary Invoke the MSDeploy web app extension.
     *
     * Invoke the MSDeploy web app extension.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} mSDeploy Details of MSDeploy operation
     *
     * @param {string} [mSDeploy.packageUri] Package URI
     *
     * @param {string} [mSDeploy.connectionString] SQL Connection String
     *
     * @param {string} [mSDeploy.dbType] Database Type
     *
     * @param {string} [mSDeploy.setParametersXmlFileUri] URI of MSDeploy
     * Parameters file. Must not be set if SetParameters is used.
     *
     * @param {object} [mSDeploy.setParameters] MSDeploy Parameters. Must not be
     * set if SetParametersXmlFileUri is used.
     *
     * @param {boolean} [mSDeploy.skipAppData] Controls whether the MSDeploy
     * operation skips the App_Data directory.
     * If set to <code>true</code>, the existing App_Data directory on the
     * destination
     * will not be deleted, and any App_Data directory in the source will be
     * ignored.
     * Setting is <code>false</code> by default.
     *
     * @param {boolean} [mSDeploy.appOffline] Sets the AppOffline rule while the
     * MSDeploy operation executes.
     * Setting is <code>false</code> by default.
     *
     * @param {string} [mSDeploy.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MSDeployStatus>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createMSDeployOperationSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, mSDeploy: models.MSDeploy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MSDeployStatus>>;

    /**
     * @summary Invoke the MSDeploy web app extension.
     *
     * Invoke the MSDeploy web app extension.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} mSDeploy Details of MSDeploy operation
     *
     * @param {string} [mSDeploy.packageUri] Package URI
     *
     * @param {string} [mSDeploy.connectionString] SQL Connection String
     *
     * @param {string} [mSDeploy.dbType] Database Type
     *
     * @param {string} [mSDeploy.setParametersXmlFileUri] URI of MSDeploy
     * Parameters file. Must not be set if SetParameters is used.
     *
     * @param {object} [mSDeploy.setParameters] MSDeploy Parameters. Must not be
     * set if SetParametersXmlFileUri is used.
     *
     * @param {boolean} [mSDeploy.skipAppData] Controls whether the MSDeploy
     * operation skips the App_Data directory.
     * If set to <code>true</code>, the existing App_Data directory on the
     * destination
     * will not be deleted, and any App_Data directory in the source will be
     * ignored.
     * Setting is <code>false</code> by default.
     *
     * @param {boolean} [mSDeploy.appOffline] Sets the AppOffline rule while the
     * MSDeploy operation executes.
     * Setting is <code>false</code> by default.
     *
     * @param {string} [mSDeploy.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MSDeployStatus} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MSDeployStatus} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MSDeployStatus} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createMSDeployOperationSlot(resourceGroupName: string, name: string, slot: string, mSDeploy: models.MSDeploy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MSDeployStatus>;
    createMSDeployOperationSlot(resourceGroupName: string, name: string, slot: string, mSDeploy: models.MSDeploy, callback: ServiceCallback<models.MSDeployStatus>): void;
    createMSDeployOperationSlot(resourceGroupName: string, name: string, slot: string, mSDeploy: models.MSDeploy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MSDeployStatus>): void;


    /**
     * @summary Get the MSDeploy Log for the last MSDeploy operation.
     *
     * Get the MSDeploy Log for the last MSDeploy operation.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MSDeployLog>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getMSDeployLogSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MSDeployLog>>;

    /**
     * @summary Get the MSDeploy Log for the last MSDeploy operation.
     *
     * Get the MSDeploy Log for the last MSDeploy operation.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MSDeployLog} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MSDeployLog} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MSDeployLog} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getMSDeployLogSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MSDeployLog>;
    getMSDeployLogSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.MSDeployLog>): void;
    getMSDeployLogSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MSDeployLog>): void;


    /**
     * @summary List the functions for a web site, or a deployment slot.
     *
     * List the functions for a web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FunctionEnvelopeCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listInstanceFunctionsSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FunctionEnvelopeCollection>>;

    /**
     * @summary List the functions for a web site, or a deployment slot.
     *
     * List the functions for a web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FunctionEnvelopeCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FunctionEnvelopeCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FunctionEnvelopeCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listInstanceFunctionsSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FunctionEnvelopeCollection>;
    listInstanceFunctionsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.FunctionEnvelopeCollection>): void;
    listInstanceFunctionsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FunctionEnvelopeCollection>): void;


    /**
     * @summary Fetch a short lived token that can be exchanged for a master key.
     *
     * Fetch a short lived token that can be exchanged for a master key.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getFunctionsAdminTokenSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * @summary Fetch a short lived token that can be exchanged for a master key.
     *
     * Fetch a short lived token that can be exchanged for a master key.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getFunctionsAdminTokenSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    getFunctionsAdminTokenSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<string>): void;
    getFunctionsAdminTokenSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * @summary Get function information by its ID for web site, or a deployment
     * slot.
     *
     * Get function information by its ID for web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} functionName Function name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FunctionEnvelope>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getInstanceFunctionSlotWithHttpOperationResponse(resourceGroupName: string, name: string, functionName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FunctionEnvelope>>;

    /**
     * @summary Get function information by its ID for web site, or a deployment
     * slot.
     *
     * Get function information by its ID for web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} functionName Function name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FunctionEnvelope} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FunctionEnvelope} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FunctionEnvelope} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getInstanceFunctionSlot(resourceGroupName: string, name: string, functionName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FunctionEnvelope>;
    getInstanceFunctionSlot(resourceGroupName: string, name: string, functionName: string, slot: string, callback: ServiceCallback<models.FunctionEnvelope>): void;
    getInstanceFunctionSlot(resourceGroupName: string, name: string, functionName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FunctionEnvelope>): void;


    /**
     * @summary Create function for web site, or a deployment slot.
     *
     * Create function for web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} functionName Function name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} functionEnvelope Function details.
     *
     * @param {string} [functionEnvelope.functionAppId] Function App ID.
     *
     * @param {string} [functionEnvelope.scriptRootPathHref] Script root path URI.
     *
     * @param {string} [functionEnvelope.scriptHref] Script URI.
     *
     * @param {string} [functionEnvelope.configHref] Config URI.
     *
     * @param {string} [functionEnvelope.secretsFileHref] Secrets file URI.
     *
     * @param {string} [functionEnvelope.href] Function URI.
     *
     * @param {object} [functionEnvelope.config] Config information.
     *
     * @param {object} [functionEnvelope.files] File list.
     *
     * @param {string} [functionEnvelope.testData] Test data used when testing via
     * the Azure Portal.
     *
     * @param {string} [functionEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FunctionEnvelope>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createInstanceFunctionSlotWithHttpOperationResponse(resourceGroupName: string, name: string, functionName: string, slot: string, functionEnvelope: models.FunctionEnvelope, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FunctionEnvelope>>;

    /**
     * @summary Create function for web site, or a deployment slot.
     *
     * Create function for web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} functionName Function name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} functionEnvelope Function details.
     *
     * @param {string} [functionEnvelope.functionAppId] Function App ID.
     *
     * @param {string} [functionEnvelope.scriptRootPathHref] Script root path URI.
     *
     * @param {string} [functionEnvelope.scriptHref] Script URI.
     *
     * @param {string} [functionEnvelope.configHref] Config URI.
     *
     * @param {string} [functionEnvelope.secretsFileHref] Secrets file URI.
     *
     * @param {string} [functionEnvelope.href] Function URI.
     *
     * @param {object} [functionEnvelope.config] Config information.
     *
     * @param {object} [functionEnvelope.files] File list.
     *
     * @param {string} [functionEnvelope.testData] Test data used when testing via
     * the Azure Portal.
     *
     * @param {string} [functionEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FunctionEnvelope} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FunctionEnvelope} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FunctionEnvelope} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createInstanceFunctionSlot(resourceGroupName: string, name: string, functionName: string, slot: string, functionEnvelope: models.FunctionEnvelope, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FunctionEnvelope>;
    createInstanceFunctionSlot(resourceGroupName: string, name: string, functionName: string, slot: string, functionEnvelope: models.FunctionEnvelope, callback: ServiceCallback<models.FunctionEnvelope>): void;
    createInstanceFunctionSlot(resourceGroupName: string, name: string, functionName: string, slot: string, functionEnvelope: models.FunctionEnvelope, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FunctionEnvelope>): void;


    /**
     * @summary Delete a function for web site, or a deployment slot.
     *
     * Delete a function for web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} functionName Function name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteInstanceFunctionSlotWithHttpOperationResponse(resourceGroupName: string, name: string, functionName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete a function for web site, or a deployment slot.
     *
     * Delete a function for web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} functionName Function name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteInstanceFunctionSlot(resourceGroupName: string, name: string, functionName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteInstanceFunctionSlot(resourceGroupName: string, name: string, functionName: string, slot: string, callback: ServiceCallback<void>): void;
    deleteInstanceFunctionSlot(resourceGroupName: string, name: string, functionName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Get function secrets for a function in a web site, or a deployment
     * slot.
     *
     * Get function secrets for a function in a web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} functionName Function name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FunctionSecrets>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listFunctionSecretsSlotWithHttpOperationResponse(resourceGroupName: string, name: string, functionName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FunctionSecrets>>;

    /**
     * @summary Get function secrets for a function in a web site, or a deployment
     * slot.
     *
     * Get function secrets for a function in a web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} functionName Function name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FunctionSecrets} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FunctionSecrets} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FunctionSecrets} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listFunctionSecretsSlot(resourceGroupName: string, name: string, functionName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FunctionSecrets>;
    listFunctionSecretsSlot(resourceGroupName: string, name: string, functionName: string, slot: string, callback: ServiceCallback<models.FunctionSecrets>): void;
    listFunctionSecretsSlot(resourceGroupName: string, name: string, functionName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FunctionSecrets>): void;


    /**
     * @summary Get hostname bindings for an app or a deployment slot.
     *
     * Get hostname bindings for an app or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API gets hostname bindings for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HostNameBindingCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listHostNameBindingsSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HostNameBindingCollection>>;

    /**
     * @summary Get hostname bindings for an app or a deployment slot.
     *
     * Get hostname bindings for an app or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API gets hostname bindings for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HostNameBindingCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HostNameBindingCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HostNameBindingCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listHostNameBindingsSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HostNameBindingCollection>;
    listHostNameBindingsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.HostNameBindingCollection>): void;
    listHostNameBindingsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HostNameBindingCollection>): void;


    /**
     * @summary Get the named hostname binding for an app (or deployment slot, if
     * specified).
     *
     * Get the named hostname binding for an app (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API the named binding for the production slot.
     *
     * @param {string} hostName Hostname in the hostname binding.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HostNameBinding>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getHostNameBindingSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, hostName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HostNameBinding>>;

    /**
     * @summary Get the named hostname binding for an app (or deployment slot, if
     * specified).
     *
     * Get the named hostname binding for an app (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API the named binding for the production slot.
     *
     * @param {string} hostName Hostname in the hostname binding.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HostNameBinding} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HostNameBinding} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HostNameBinding} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getHostNameBindingSlot(resourceGroupName: string, name: string, slot: string, hostName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HostNameBinding>;
    getHostNameBindingSlot(resourceGroupName: string, name: string, slot: string, hostName: string, callback: ServiceCallback<models.HostNameBinding>): void;
    getHostNameBindingSlot(resourceGroupName: string, name: string, slot: string, hostName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HostNameBinding>): void;


    /**
     * @summary Creates a hostname binding for an app.
     *
     * Creates a hostname binding for an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} hostName Hostname in the hostname binding.
     *
     * @param {object} hostNameBinding Binding details. This is the JSON
     * representation of a HostNameBinding object.
     *
     * @param {string} [hostNameBinding.siteName] App Service app name.
     *
     * @param {string} [hostNameBinding.domainId] Fully qualified ARM domain
     * resource URI.
     *
     * @param {string} [hostNameBinding.azureResourceName] Azure resource name.
     *
     * @param {string} [hostNameBinding.azureResourceType] Azure resource type.
     * Possible values include: 'Website', 'TrafficManager'
     *
     * @param {string} [hostNameBinding.customHostNameDnsRecordType] Custom DNS
     * record type. Possible values include: 'CName', 'A'
     *
     * @param {string} [hostNameBinding.hostNameType] Hostname type. Possible
     * values include: 'Verified', 'Managed'
     *
     * @param {string} [hostNameBinding.sslState] SSL type. Possible values
     * include: 'Disabled', 'SniEnabled', 'IpBasedEnabled'
     *
     * @param {string} [hostNameBinding.thumbprint] SSL certificate thumbprint
     *
     * @param {string} [hostNameBinding.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will create a binding for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HostNameBinding>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateHostNameBindingSlotWithHttpOperationResponse(resourceGroupName: string, name: string, hostName: string, hostNameBinding: models.HostNameBinding, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HostNameBinding>>;

    /**
     * @summary Creates a hostname binding for an app.
     *
     * Creates a hostname binding for an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} hostName Hostname in the hostname binding.
     *
     * @param {object} hostNameBinding Binding details. This is the JSON
     * representation of a HostNameBinding object.
     *
     * @param {string} [hostNameBinding.siteName] App Service app name.
     *
     * @param {string} [hostNameBinding.domainId] Fully qualified ARM domain
     * resource URI.
     *
     * @param {string} [hostNameBinding.azureResourceName] Azure resource name.
     *
     * @param {string} [hostNameBinding.azureResourceType] Azure resource type.
     * Possible values include: 'Website', 'TrafficManager'
     *
     * @param {string} [hostNameBinding.customHostNameDnsRecordType] Custom DNS
     * record type. Possible values include: 'CName', 'A'
     *
     * @param {string} [hostNameBinding.hostNameType] Hostname type. Possible
     * values include: 'Verified', 'Managed'
     *
     * @param {string} [hostNameBinding.sslState] SSL type. Possible values
     * include: 'Disabled', 'SniEnabled', 'IpBasedEnabled'
     *
     * @param {string} [hostNameBinding.thumbprint] SSL certificate thumbprint
     *
     * @param {string} [hostNameBinding.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will create a binding for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HostNameBinding} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HostNameBinding} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HostNameBinding} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateHostNameBindingSlot(resourceGroupName: string, name: string, hostName: string, hostNameBinding: models.HostNameBinding, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HostNameBinding>;
    createOrUpdateHostNameBindingSlot(resourceGroupName: string, name: string, hostName: string, hostNameBinding: models.HostNameBinding, slot: string, callback: ServiceCallback<models.HostNameBinding>): void;
    createOrUpdateHostNameBindingSlot(resourceGroupName: string, name: string, hostName: string, hostNameBinding: models.HostNameBinding, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HostNameBinding>): void;


    /**
     * @summary Deletes a hostname binding for an app.
     *
     * Deletes a hostname binding for an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will delete the binding for the production slot.
     *
     * @param {string} hostName Hostname in the hostname binding.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteHostNameBindingSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, hostName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a hostname binding for an app.
     *
     * Deletes a hostname binding for an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will delete the binding for the production slot.
     *
     * @param {string} hostName Hostname in the hostname binding.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteHostNameBindingSlot(resourceGroupName: string, name: string, slot: string, hostName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteHostNameBindingSlot(resourceGroupName: string, name: string, slot: string, hostName: string, callback: ServiceCallback<void>): void;
    deleteHostNameBindingSlot(resourceGroupName: string, name: string, slot: string, hostName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Retrieves a specific Service Bus Hybrid Connection used by this Web
     * App.
     *
     * Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} namespaceName The namespace for this hybrid connection.
     *
     * @param {string} relayName The relay name for this hybrid connection.
     *
     * @param {string} slot The name of the slot for the web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HybridConnection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getHybridConnectionSlotWithHttpOperationResponse(resourceGroupName: string, name: string, namespaceName: string, relayName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HybridConnection>>;

    /**
     * @summary Retrieves a specific Service Bus Hybrid Connection used by this Web
     * App.
     *
     * Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} namespaceName The namespace for this hybrid connection.
     *
     * @param {string} relayName The relay name for this hybrid connection.
     *
     * @param {string} slot The name of the slot for the web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HybridConnection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HybridConnection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HybridConnection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HybridConnection>;
    getHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, slot: string, callback: ServiceCallback<models.HybridConnection>): void;
    getHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HybridConnection>): void;


    /**
     * @summary Creates a new Hybrid Connection using a Service Bus relay.
     *
     * Creates a new Hybrid Connection using a Service Bus relay.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} namespaceName The namespace for this hybrid connection.
     *
     * @param {string} relayName The relay name for this hybrid connection.
     *
     * @param {object} connectionEnvelope The details of the hybrid connection.
     *
     * @param {string} [connectionEnvelope.serviceBusNamespace] The name of the
     * Service Bus namespace.
     *
     * @param {string} [connectionEnvelope.relayName] The name of the Service Bus
     * relay.
     *
     * @param {string} [connectionEnvelope.relayArmUri] The ARM URI to the Service
     * Bus relay.
     *
     * @param {string} [connectionEnvelope.hostname] The hostname of the endpoint.
     *
     * @param {number} [connectionEnvelope.port] The port of the endpoint.
     *
     * @param {string} [connectionEnvelope.sendKeyName] The name of the Service Bus
     * key which has Send permissions. This is used to authenticate to Service Bus.
     *
     * @param {string} [connectionEnvelope.sendKeyValue] The value of the Service
     * Bus key. This is used to authenticate to Service Bus. In ARM this key will
     * not be returned
     * normally, use the POST /listKeys API instead.
     *
     * @param {string} [connectionEnvelope.serviceBusSuffix] The suffix for the
     * service bus endpoint. By default this is .servicebus.windows.net
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {string} slot The name of the slot for the web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HybridConnection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateHybridConnectionSlotWithHttpOperationResponse(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: models.HybridConnection, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HybridConnection>>;

    /**
     * @summary Creates a new Hybrid Connection using a Service Bus relay.
     *
     * Creates a new Hybrid Connection using a Service Bus relay.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} namespaceName The namespace for this hybrid connection.
     *
     * @param {string} relayName The relay name for this hybrid connection.
     *
     * @param {object} connectionEnvelope The details of the hybrid connection.
     *
     * @param {string} [connectionEnvelope.serviceBusNamespace] The name of the
     * Service Bus namespace.
     *
     * @param {string} [connectionEnvelope.relayName] The name of the Service Bus
     * relay.
     *
     * @param {string} [connectionEnvelope.relayArmUri] The ARM URI to the Service
     * Bus relay.
     *
     * @param {string} [connectionEnvelope.hostname] The hostname of the endpoint.
     *
     * @param {number} [connectionEnvelope.port] The port of the endpoint.
     *
     * @param {string} [connectionEnvelope.sendKeyName] The name of the Service Bus
     * key which has Send permissions. This is used to authenticate to Service Bus.
     *
     * @param {string} [connectionEnvelope.sendKeyValue] The value of the Service
     * Bus key. This is used to authenticate to Service Bus. In ARM this key will
     * not be returned
     * normally, use the POST /listKeys API instead.
     *
     * @param {string} [connectionEnvelope.serviceBusSuffix] The suffix for the
     * service bus endpoint. By default this is .servicebus.windows.net
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {string} slot The name of the slot for the web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HybridConnection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HybridConnection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HybridConnection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: models.HybridConnection, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HybridConnection>;
    createOrUpdateHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: models.HybridConnection, slot: string, callback: ServiceCallback<models.HybridConnection>): void;
    createOrUpdateHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: models.HybridConnection, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HybridConnection>): void;


    /**
     * @summary Removes a Hybrid Connection from this site.
     *
     * Removes a Hybrid Connection from this site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} namespaceName The namespace for this hybrid connection.
     *
     * @param {string} relayName The relay name for this hybrid connection.
     *
     * @param {string} slot The name of the slot for the web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteHybridConnectionSlotWithHttpOperationResponse(resourceGroupName: string, name: string, namespaceName: string, relayName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Removes a Hybrid Connection from this site.
     *
     * Removes a Hybrid Connection from this site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} namespaceName The namespace for this hybrid connection.
     *
     * @param {string} relayName The relay name for this hybrid connection.
     *
     * @param {string} slot The name of the slot for the web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, slot: string, callback: ServiceCallback<void>): void;
    deleteHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Creates a new Hybrid Connection using a Service Bus relay.
     *
     * Creates a new Hybrid Connection using a Service Bus relay.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} namespaceName The namespace for this hybrid connection.
     *
     * @param {string} relayName The relay name for this hybrid connection.
     *
     * @param {object} connectionEnvelope The details of the hybrid connection.
     *
     * @param {string} [connectionEnvelope.serviceBusNamespace] The name of the
     * Service Bus namespace.
     *
     * @param {string} [connectionEnvelope.relayName] The name of the Service Bus
     * relay.
     *
     * @param {string} [connectionEnvelope.relayArmUri] The ARM URI to the Service
     * Bus relay.
     *
     * @param {string} [connectionEnvelope.hostname] The hostname of the endpoint.
     *
     * @param {number} [connectionEnvelope.port] The port of the endpoint.
     *
     * @param {string} [connectionEnvelope.sendKeyName] The name of the Service Bus
     * key which has Send permissions. This is used to authenticate to Service Bus.
     *
     * @param {string} [connectionEnvelope.sendKeyValue] The value of the Service
     * Bus key. This is used to authenticate to Service Bus. In ARM this key will
     * not be returned
     * normally, use the POST /listKeys API instead.
     *
     * @param {string} [connectionEnvelope.serviceBusSuffix] The suffix for the
     * service bus endpoint. By default this is .servicebus.windows.net
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {string} slot The name of the slot for the web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HybridConnection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateHybridConnectionSlotWithHttpOperationResponse(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: models.HybridConnection, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HybridConnection>>;

    /**
     * @summary Creates a new Hybrid Connection using a Service Bus relay.
     *
     * Creates a new Hybrid Connection using a Service Bus relay.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} namespaceName The namespace for this hybrid connection.
     *
     * @param {string} relayName The relay name for this hybrid connection.
     *
     * @param {object} connectionEnvelope The details of the hybrid connection.
     *
     * @param {string} [connectionEnvelope.serviceBusNamespace] The name of the
     * Service Bus namespace.
     *
     * @param {string} [connectionEnvelope.relayName] The name of the Service Bus
     * relay.
     *
     * @param {string} [connectionEnvelope.relayArmUri] The ARM URI to the Service
     * Bus relay.
     *
     * @param {string} [connectionEnvelope.hostname] The hostname of the endpoint.
     *
     * @param {number} [connectionEnvelope.port] The port of the endpoint.
     *
     * @param {string} [connectionEnvelope.sendKeyName] The name of the Service Bus
     * key which has Send permissions. This is used to authenticate to Service Bus.
     *
     * @param {string} [connectionEnvelope.sendKeyValue] The value of the Service
     * Bus key. This is used to authenticate to Service Bus. In ARM this key will
     * not be returned
     * normally, use the POST /listKeys API instead.
     *
     * @param {string} [connectionEnvelope.serviceBusSuffix] The suffix for the
     * service bus endpoint. By default this is .servicebus.windows.net
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {string} slot The name of the slot for the web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HybridConnection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HybridConnection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HybridConnection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: models.HybridConnection, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HybridConnection>;
    updateHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: models.HybridConnection, slot: string, callback: ServiceCallback<models.HybridConnection>): void;
    updateHybridConnectionSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, connectionEnvelope: models.HybridConnection, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HybridConnection>): void;


    /**
     * @summary Gets the send key name and value for a Hybrid Connection.
     *
     * Gets the send key name and value for a Hybrid Connection.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} namespaceName The namespace for this hybrid connection.
     *
     * @param {string} relayName The relay name for this hybrid connection.
     *
     * @param {string} slot The name of the slot for the web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HybridConnectionKey>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listHybridConnectionKeysSlotWithHttpOperationResponse(resourceGroupName: string, name: string, namespaceName: string, relayName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HybridConnectionKey>>;

    /**
     * @summary Gets the send key name and value for a Hybrid Connection.
     *
     * Gets the send key name and value for a Hybrid Connection.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} namespaceName The namespace for this hybrid connection.
     *
     * @param {string} relayName The relay name for this hybrid connection.
     *
     * @param {string} slot The name of the slot for the web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HybridConnectionKey} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HybridConnectionKey} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HybridConnectionKey} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listHybridConnectionKeysSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HybridConnectionKey>;
    listHybridConnectionKeysSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, slot: string, callback: ServiceCallback<models.HybridConnectionKey>): void;
    listHybridConnectionKeysSlot(resourceGroupName: string, name: string, namespaceName: string, relayName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HybridConnectionKey>): void;


    /**
     * @summary Retrieves all Service Bus Hybrid Connections used by this Web App.
     *
     * Retrieves all Service Bus Hybrid Connections used by this Web App.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} slot The name of the slot for the web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HybridConnection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listHybridConnectionsSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HybridConnection>>;

    /**
     * @summary Retrieves all Service Bus Hybrid Connections used by this Web App.
     *
     * Retrieves all Service Bus Hybrid Connections used by this Web App.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} slot The name of the slot for the web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HybridConnection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HybridConnection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HybridConnection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listHybridConnectionsSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HybridConnection>;
    listHybridConnectionsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.HybridConnection>): void;
    listHybridConnectionsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HybridConnection>): void;


    /**
     * @summary Gets hybrid connections configured for an app (or deployment slot,
     * if specified).
     *
     * Gets hybrid connections configured for an app (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get hybrid connections for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RelayServiceConnectionEntity>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listRelayServiceConnectionsSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RelayServiceConnectionEntity>>;

    /**
     * @summary Gets hybrid connections configured for an app (or deployment slot,
     * if specified).
     *
     * Gets hybrid connections configured for an app (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get hybrid connections for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RelayServiceConnectionEntity} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RelayServiceConnectionEntity} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RelayServiceConnectionEntity} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listRelayServiceConnectionsSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RelayServiceConnectionEntity>;
    listRelayServiceConnectionsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.RelayServiceConnectionEntity>): void;
    listRelayServiceConnectionsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RelayServiceConnectionEntity>): void;


    /**
     * @summary Gets a hybrid connection configuration by its name.
     *
     * Gets a hybrid connection configuration by its name.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} entityName Name of the hybrid connection.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get a hybrid connection for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RelayServiceConnectionEntity>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getRelayServiceConnectionSlotWithHttpOperationResponse(resourceGroupName: string, name: string, entityName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RelayServiceConnectionEntity>>;

    /**
     * @summary Gets a hybrid connection configuration by its name.
     *
     * Gets a hybrid connection configuration by its name.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} entityName Name of the hybrid connection.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get a hybrid connection for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RelayServiceConnectionEntity} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RelayServiceConnectionEntity} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RelayServiceConnectionEntity} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RelayServiceConnectionEntity>;
    getRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, slot: string, callback: ServiceCallback<models.RelayServiceConnectionEntity>): void;
    getRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RelayServiceConnectionEntity>): void;


    /**
     * @summary Creates a new hybrid connection configuration (PUT), or updates an
     * existing one (PATCH).
     *
     * Creates a new hybrid connection configuration (PUT), or updates an existing
     * one (PATCH).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} entityName Name of the hybrid connection configuration.
     *
     * @param {object} connectionEnvelope Details of the hybrid connection
     * configuration.
     *
     * @param {string} [connectionEnvelope.entityName]
     *
     * @param {string} [connectionEnvelope.entityConnectionString]
     *
     * @param {string} [connectionEnvelope.resourceType]
     *
     * @param {string} [connectionEnvelope.resourceConnectionString]
     *
     * @param {string} [connectionEnvelope.hostname]
     *
     * @param {number} [connectionEnvelope.port]
     *
     * @param {string} [connectionEnvelope.biztalkUri]
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will create or update a hybrid connection for the
     * production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RelayServiceConnectionEntity>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateRelayServiceConnectionSlotWithHttpOperationResponse(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: models.RelayServiceConnectionEntity, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RelayServiceConnectionEntity>>;

    /**
     * @summary Creates a new hybrid connection configuration (PUT), or updates an
     * existing one (PATCH).
     *
     * Creates a new hybrid connection configuration (PUT), or updates an existing
     * one (PATCH).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} entityName Name of the hybrid connection configuration.
     *
     * @param {object} connectionEnvelope Details of the hybrid connection
     * configuration.
     *
     * @param {string} [connectionEnvelope.entityName]
     *
     * @param {string} [connectionEnvelope.entityConnectionString]
     *
     * @param {string} [connectionEnvelope.resourceType]
     *
     * @param {string} [connectionEnvelope.resourceConnectionString]
     *
     * @param {string} [connectionEnvelope.hostname]
     *
     * @param {number} [connectionEnvelope.port]
     *
     * @param {string} [connectionEnvelope.biztalkUri]
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will create or update a hybrid connection for the
     * production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RelayServiceConnectionEntity} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RelayServiceConnectionEntity} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RelayServiceConnectionEntity} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: models.RelayServiceConnectionEntity, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RelayServiceConnectionEntity>;
    createOrUpdateRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: models.RelayServiceConnectionEntity, slot: string, callback: ServiceCallback<models.RelayServiceConnectionEntity>): void;
    createOrUpdateRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: models.RelayServiceConnectionEntity, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RelayServiceConnectionEntity>): void;


    /**
     * @summary Deletes a relay service connection by its name.
     *
     * Deletes a relay service connection by its name.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} entityName Name of the hybrid connection configuration.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will delete a hybrid connection for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteRelayServiceConnectionSlotWithHttpOperationResponse(resourceGroupName: string, name: string, entityName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a relay service connection by its name.
     *
     * Deletes a relay service connection by its name.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} entityName Name of the hybrid connection configuration.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will delete a hybrid connection for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, slot: string, callback: ServiceCallback<void>): void;
    deleteRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Creates a new hybrid connection configuration (PUT), or updates an
     * existing one (PATCH).
     *
     * Creates a new hybrid connection configuration (PUT), or updates an existing
     * one (PATCH).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} entityName Name of the hybrid connection configuration.
     *
     * @param {object} connectionEnvelope Details of the hybrid connection
     * configuration.
     *
     * @param {string} [connectionEnvelope.entityName]
     *
     * @param {string} [connectionEnvelope.entityConnectionString]
     *
     * @param {string} [connectionEnvelope.resourceType]
     *
     * @param {string} [connectionEnvelope.resourceConnectionString]
     *
     * @param {string} [connectionEnvelope.hostname]
     *
     * @param {number} [connectionEnvelope.port]
     *
     * @param {string} [connectionEnvelope.biztalkUri]
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will create or update a hybrid connection for the
     * production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RelayServiceConnectionEntity>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateRelayServiceConnectionSlotWithHttpOperationResponse(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: models.RelayServiceConnectionEntity, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RelayServiceConnectionEntity>>;

    /**
     * @summary Creates a new hybrid connection configuration (PUT), or updates an
     * existing one (PATCH).
     *
     * Creates a new hybrid connection configuration (PUT), or updates an existing
     * one (PATCH).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} entityName Name of the hybrid connection configuration.
     *
     * @param {object} connectionEnvelope Details of the hybrid connection
     * configuration.
     *
     * @param {string} [connectionEnvelope.entityName]
     *
     * @param {string} [connectionEnvelope.entityConnectionString]
     *
     * @param {string} [connectionEnvelope.resourceType]
     *
     * @param {string} [connectionEnvelope.resourceConnectionString]
     *
     * @param {string} [connectionEnvelope.hostname]
     *
     * @param {number} [connectionEnvelope.port]
     *
     * @param {string} [connectionEnvelope.biztalkUri]
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will create or update a hybrid connection for the
     * production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RelayServiceConnectionEntity} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RelayServiceConnectionEntity} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RelayServiceConnectionEntity} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: models.RelayServiceConnectionEntity, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RelayServiceConnectionEntity>;
    updateRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: models.RelayServiceConnectionEntity, slot: string, callback: ServiceCallback<models.RelayServiceConnectionEntity>): void;
    updateRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: models.RelayServiceConnectionEntity, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RelayServiceConnectionEntity>): void;


    /**
     * @summary Gets all scale-out instances of an app.
     *
     * Gets all scale-out instances of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API gets the production slot instances.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WebAppInstanceCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listInstanceIdentifiersSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WebAppInstanceCollection>>;

    /**
     * @summary Gets all scale-out instances of an app.
     *
     * Gets all scale-out instances of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API gets the production slot instances.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WebAppInstanceCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WebAppInstanceCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WebAppInstanceCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listInstanceIdentifiersSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WebAppInstanceCollection>;
    listInstanceIdentifiersSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.WebAppInstanceCollection>): void;
    listInstanceIdentifiersSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WebAppInstanceCollection>): void;


    /**
     * @summary Get the status of the last MSDeploy operation.
     *
     * Get the status of the last MSDeploy operation.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {string} instanceId ID of web app instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MSDeployStatus>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getInstanceMsDeployStatusSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MSDeployStatus>>;

    /**
     * @summary Get the status of the last MSDeploy operation.
     *
     * Get the status of the last MSDeploy operation.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {string} instanceId ID of web app instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MSDeployStatus} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MSDeployStatus} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MSDeployStatus} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getInstanceMsDeployStatusSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MSDeployStatus>;
    getInstanceMsDeployStatusSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, callback: ServiceCallback<models.MSDeployStatus>): void;
    getInstanceMsDeployStatusSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MSDeployStatus>): void;


    /**
     * @summary Invoke the MSDeploy web app extension.
     *
     * Invoke the MSDeploy web app extension.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {string} instanceId ID of web app instance.
     *
     * @param {object} mSDeploy Details of MSDeploy operation
     *
     * @param {string} [mSDeploy.packageUri] Package URI
     *
     * @param {string} [mSDeploy.connectionString] SQL Connection String
     *
     * @param {string} [mSDeploy.dbType] Database Type
     *
     * @param {string} [mSDeploy.setParametersXmlFileUri] URI of MSDeploy
     * Parameters file. Must not be set if SetParameters is used.
     *
     * @param {object} [mSDeploy.setParameters] MSDeploy Parameters. Must not be
     * set if SetParametersXmlFileUri is used.
     *
     * @param {boolean} [mSDeploy.skipAppData] Controls whether the MSDeploy
     * operation skips the App_Data directory.
     * If set to <code>true</code>, the existing App_Data directory on the
     * destination
     * will not be deleted, and any App_Data directory in the source will be
     * ignored.
     * Setting is <code>false</code> by default.
     *
     * @param {boolean} [mSDeploy.appOffline] Sets the AppOffline rule while the
     * MSDeploy operation executes.
     * Setting is <code>false</code> by default.
     *
     * @param {string} [mSDeploy.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MSDeployStatus>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createInstanceMSDeployOperationSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, instanceId: string, mSDeploy: models.MSDeploy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MSDeployStatus>>;

    /**
     * @summary Invoke the MSDeploy web app extension.
     *
     * Invoke the MSDeploy web app extension.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {string} instanceId ID of web app instance.
     *
     * @param {object} mSDeploy Details of MSDeploy operation
     *
     * @param {string} [mSDeploy.packageUri] Package URI
     *
     * @param {string} [mSDeploy.connectionString] SQL Connection String
     *
     * @param {string} [mSDeploy.dbType] Database Type
     *
     * @param {string} [mSDeploy.setParametersXmlFileUri] URI of MSDeploy
     * Parameters file. Must not be set if SetParameters is used.
     *
     * @param {object} [mSDeploy.setParameters] MSDeploy Parameters. Must not be
     * set if SetParametersXmlFileUri is used.
     *
     * @param {boolean} [mSDeploy.skipAppData] Controls whether the MSDeploy
     * operation skips the App_Data directory.
     * If set to <code>true</code>, the existing App_Data directory on the
     * destination
     * will not be deleted, and any App_Data directory in the source will be
     * ignored.
     * Setting is <code>false</code> by default.
     *
     * @param {boolean} [mSDeploy.appOffline] Sets the AppOffline rule while the
     * MSDeploy operation executes.
     * Setting is <code>false</code> by default.
     *
     * @param {string} [mSDeploy.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MSDeployStatus} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MSDeployStatus} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MSDeployStatus} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createInstanceMSDeployOperationSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, mSDeploy: models.MSDeploy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MSDeployStatus>;
    createInstanceMSDeployOperationSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, mSDeploy: models.MSDeploy, callback: ServiceCallback<models.MSDeployStatus>): void;
    createInstanceMSDeployOperationSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, mSDeploy: models.MSDeploy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MSDeployStatus>): void;


    /**
     * @summary Get the MSDeploy Log for the last MSDeploy operation.
     *
     * Get the MSDeploy Log for the last MSDeploy operation.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {string} instanceId ID of web app instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MSDeployLog>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getInstanceMSDeployLogSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MSDeployLog>>;

    /**
     * @summary Get the MSDeploy Log for the last MSDeploy operation.
     *
     * Get the MSDeploy Log for the last MSDeploy operation.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {string} instanceId ID of web app instance.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MSDeployLog} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MSDeployLog} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MSDeployLog} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getInstanceMSDeployLogSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MSDeployLog>;
    getInstanceMSDeployLogSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, callback: ServiceCallback<models.MSDeployLog>): void;
    getInstanceMSDeployLogSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MSDeployLog>): void;


    /**
     * @summary Get list of processes for a web site, or a deployment slot, or for
     * a specific scaled-out instance in a web site.
     *
     * Get list of processes for a web site, or a deployment slot, or for a
     * specific scaled-out instance in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {string} instanceId ID of a specific scaled-out instance. This is the
     * value of the name property in the JSON response from "GET
     * api/sites/{siteName}/instances".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listInstanceProcessesSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessInfoCollection>>;

    /**
     * @summary Get list of processes for a web site, or a deployment slot, or for
     * a specific scaled-out instance in a web site.
     *
     * Get list of processes for a web site, or a deployment slot, or for a
     * specific scaled-out instance in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {string} instanceId ID of a specific scaled-out instance. This is the
     * value of the name property in the JSON response from "GET
     * api/sites/{siteName}/instances".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessInfoCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listInstanceProcessesSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessInfoCollection>;
    listInstanceProcessesSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, callback: ServiceCallback<models.ProcessInfoCollection>): void;
    listInstanceProcessesSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessInfoCollection>): void;


    /**
     * @summary Get process information by its ID for a specific scaled-out
     * instance in a web site.
     *
     * Get process information by its ID for a specific scaled-out instance in a
     * web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {string} instanceId ID of a specific scaled-out instance. This is the
     * value of the name property in the JSON response from "GET
     * api/sites/{siteName}/instances".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getInstanceProcessSlotWithHttpOperationResponse(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessInfo>>;

    /**
     * @summary Get process information by its ID for a specific scaled-out
     * instance in a web site.
     *
     * Get process information by its ID for a specific scaled-out instance in a
     * web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {string} instanceId ID of a specific scaled-out instance. This is the
     * value of the name property in the JSON response from "GET
     * api/sites/{siteName}/instances".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getInstanceProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessInfo>;
    getInstanceProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, callback: ServiceCallback<models.ProcessInfo>): void;
    getInstanceProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessInfo>): void;


    /**
     * @summary Terminate a process by its ID for a web site, or a deployment slot,
     * or specific scaled-out instance in a web site.
     *
     * Terminate a process by its ID for a web site, or a deployment slot, or
     * specific scaled-out instance in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {string} instanceId ID of a specific scaled-out instance. This is the
     * value of the name property in the JSON response from "GET
     * api/sites/{siteName}/instances".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteInstanceProcessSlotWithHttpOperationResponse(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Terminate a process by its ID for a web site, or a deployment slot,
     * or specific scaled-out instance in a web site.
     *
     * Terminate a process by its ID for a web site, or a deployment slot, or
     * specific scaled-out instance in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {string} instanceId ID of a specific scaled-out instance. This is the
     * value of the name property in the JSON response from "GET
     * api/sites/{siteName}/instances".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteInstanceProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteInstanceProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, callback: ServiceCallback<void>): void;
    deleteInstanceProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Get a memory dump of a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * Get a memory dump of a process by its ID for a specific scaled-out instance
     * in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {string} instanceId ID of a specific scaled-out instance. This is the
     * value of the name property in the JSON response from "GET
     * api/sites/{siteName}/instances".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getInstanceProcessDumpSlotWithHttpOperationResponse(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<stream.Readable>>;

    /**
     * @summary Get a memory dump of a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * Get a memory dump of a process by its ID for a specific scaled-out instance
     * in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {string} instanceId ID of a specific scaled-out instance. This is the
     * value of the name property in the JSON response from "GET
     * api/sites/{siteName}/instances".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getInstanceProcessDumpSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<stream.Readable>;
    getInstanceProcessDumpSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, callback: ServiceCallback<stream.Readable>): void;
    getInstanceProcessDumpSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<stream.Readable>): void;


    /**
     * @summary List module information for a process by its ID for a specific
     * scaled-out instance in a web site.
     *
     * List module information for a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {string} instanceId ID of a specific scaled-out instance. This is the
     * value of the name property in the JSON response from "GET
     * api/sites/{siteName}/instances".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessModuleInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listInstanceProcessModulesSlotWithHttpOperationResponse(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessModuleInfoCollection>>;

    /**
     * @summary List module information for a process by its ID for a specific
     * scaled-out instance in a web site.
     *
     * List module information for a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {string} instanceId ID of a specific scaled-out instance. This is the
     * value of the name property in the JSON response from "GET
     * api/sites/{siteName}/instances".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessModuleInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessModuleInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessModuleInfoCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listInstanceProcessModulesSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessModuleInfoCollection>;
    listInstanceProcessModulesSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, callback: ServiceCallback<models.ProcessModuleInfoCollection>): void;
    listInstanceProcessModulesSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessModuleInfoCollection>): void;


    /**
     * @summary Get process information by its ID for a specific scaled-out
     * instance in a web site.
     *
     * Get process information by its ID for a specific scaled-out instance in a
     * web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} baseAddress Module base address.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {string} instanceId ID of a specific scaled-out instance. This is the
     * value of the name property in the JSON response from "GET
     * api/sites/{siteName}/instances".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessModuleInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getInstanceProcessModuleSlotWithHttpOperationResponse(resourceGroupName: string, name: string, processId: string, baseAddress: string, slot: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessModuleInfo>>;

    /**
     * @summary Get process information by its ID for a specific scaled-out
     * instance in a web site.
     *
     * Get process information by its ID for a specific scaled-out instance in a
     * web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} baseAddress Module base address.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {string} instanceId ID of a specific scaled-out instance. This is the
     * value of the name property in the JSON response from "GET
     * api/sites/{siteName}/instances".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessModuleInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessModuleInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessModuleInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getInstanceProcessModuleSlot(resourceGroupName: string, name: string, processId: string, baseAddress: string, slot: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessModuleInfo>;
    getInstanceProcessModuleSlot(resourceGroupName: string, name: string, processId: string, baseAddress: string, slot: string, instanceId: string, callback: ServiceCallback<models.ProcessModuleInfo>): void;
    getInstanceProcessModuleSlot(resourceGroupName: string, name: string, processId: string, baseAddress: string, slot: string, instanceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessModuleInfo>): void;


    /**
     * @summary List the threads in a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * List the threads in a process by its ID for a specific scaled-out instance
     * in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {string} instanceId ID of a specific scaled-out instance. This is the
     * value of the name property in the JSON response from "GET
     * api/sites/{siteName}/instances".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessThreadInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listInstanceProcessThreadsSlotWithHttpOperationResponse(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessThreadInfoCollection>>;

    /**
     * @summary List the threads in a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * List the threads in a process by its ID for a specific scaled-out instance
     * in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {string} instanceId ID of a specific scaled-out instance. This is the
     * value of the name property in the JSON response from "GET
     * api/sites/{siteName}/instances".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessThreadInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessThreadInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessThreadInfoCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listInstanceProcessThreadsSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessThreadInfoCollection>;
    listInstanceProcessThreadsSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, callback: ServiceCallback<models.ProcessThreadInfoCollection>): void;
    listInstanceProcessThreadsSlot(resourceGroupName: string, name: string, processId: string, slot: string, instanceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessThreadInfoCollection>): void;


    /**
     * @summary Get thread information by Thread ID for a specific process, in a
     * specific scaled-out instance in a web site.
     *
     * Get thread information by Thread ID for a specific process, in a specific
     * scaled-out instance in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} threadId TID.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {string} instanceId ID of a specific scaled-out instance. This is the
     * value of the name property in the JSON response from "GET
     * api/sites/{siteName}/instances".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessThreadInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getInstanceProcessThreadSlotWithHttpOperationResponse(resourceGroupName: string, name: string, processId: string, threadId: string, slot: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessThreadInfo>>;

    /**
     * @summary Get thread information by Thread ID for a specific process, in a
     * specific scaled-out instance in a web site.
     *
     * Get thread information by Thread ID for a specific process, in a specific
     * scaled-out instance in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} threadId TID.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {string} instanceId ID of a specific scaled-out instance. This is the
     * value of the name property in the JSON response from "GET
     * api/sites/{siteName}/instances".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessThreadInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessThreadInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessThreadInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getInstanceProcessThreadSlot(resourceGroupName: string, name: string, processId: string, threadId: string, slot: string, instanceId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessThreadInfo>;
    getInstanceProcessThreadSlot(resourceGroupName: string, name: string, processId: string, threadId: string, slot: string, instanceId: string, callback: ServiceCallback<models.ProcessThreadInfo>): void;
    getInstanceProcessThreadSlot(resourceGroupName: string, name: string, processId: string, threadId: string, slot: string, instanceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessThreadInfo>): void;


    /**
     * @summary Shows whether an app can be cloned to another resource group or
     * subscription.
     *
     * Shows whether an app can be cloned to another resource group or
     * subscription.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. By default, this API
     * returns information on the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteCloneability>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    isCloneableSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteCloneability>>;

    /**
     * @summary Shows whether an app can be cloned to another resource group or
     * subscription.
     *
     * Shows whether an app can be cloned to another resource group or
     * subscription.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. By default, this API
     * returns information on the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteCloneability} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteCloneability} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteCloneability} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    isCloneableSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteCloneability>;
    isCloneableSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.SiteCloneability>): void;
    isCloneableSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteCloneability>): void;


    /**
     * @summary This is to allow calling via powershell and ARM template.
     *
     * This is to allow calling via powershell and ARM template.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will restore a backup of the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FunctionSecrets>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSyncFunctionTriggersSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FunctionSecrets>>;

    /**
     * @summary This is to allow calling via powershell and ARM template.
     *
     * This is to allow calling via powershell and ARM template.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will restore a backup of the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FunctionSecrets} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FunctionSecrets} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FunctionSecrets} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSyncFunctionTriggersSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FunctionSecrets>;
    listSyncFunctionTriggersSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.FunctionSecrets>): void;
    listSyncFunctionTriggersSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FunctionSecrets>): void;


    /**
     * @summary Gets all metric definitions of an app (or deployment slot, if
     * specified).
     *
     * Gets all metric definitions of an app (or deployment slot, if specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get metric definitions of the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceMetricDefinitionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricDefinitionsSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceMetricDefinitionCollection>>;

    /**
     * @summary Gets all metric definitions of an app (or deployment slot, if
     * specified).
     *
     * Gets all metric definitions of an app (or deployment slot, if specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get metric definitions of the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceMetricDefinitionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceMetricDefinitionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceMetricDefinitionCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetricDefinitionsSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceMetricDefinitionCollection>;
    listMetricDefinitionsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.ResourceMetricDefinitionCollection>): void;
    listMetricDefinitionsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricDefinitionCollection>): void;


    /**
     * @summary Gets performance metrics of an app (or deployment slot, if
     * specified).
     *
     * Gets performance metrics of an app (or deployment slot, if specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get metrics of the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.details] Specify "true" to include metric details
     * in the response. It is "false" by default.
     *
     * @param {string} [options.filter] Return only metrics specified in the filter
     * (using OData syntax). For example: $filter=(name.value eq 'Metric1' or
     * name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime
     * eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceMetricCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricsSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { details? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceMetricCollection>>;

    /**
     * @summary Gets performance metrics of an app (or deployment slot, if
     * specified).
     *
     * Gets performance metrics of an app (or deployment slot, if specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get metrics of the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.details] Specify "true" to include metric details
     * in the response. It is "false" by default.
     *
     * @param {string} [options.filter] Return only metrics specified in the filter
     * (using OData syntax). For example: $filter=(name.value eq 'Metric1' or
     * name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime
     * eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceMetricCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceMetricCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceMetricCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetricsSlot(resourceGroupName: string, name: string, slot: string, options?: { details? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceMetricCollection>;
    listMetricsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.ResourceMetricCollection>): void;
    listMetricsSlot(resourceGroupName: string, name: string, slot: string, options: { details? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricCollection>): void;


    /**
     * @summary Returns the status of MySql in app migration, if one is active, and
     * whether or not MySql in app is enabled
     *
     * Returns the status of MySql in app migration, if one is active, and whether
     * or not MySql in app is enabled
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of the deployment slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MigrateMySqlStatus>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getMigrateMySqlStatusSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MigrateMySqlStatus>>;

    /**
     * @summary Returns the status of MySql in app migration, if one is active, and
     * whether or not MySql in app is enabled
     *
     * Returns the status of MySql in app migration, if one is active, and whether
     * or not MySql in app is enabled
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of the deployment slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MigrateMySqlStatus} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MigrateMySqlStatus} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MigrateMySqlStatus} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getMigrateMySqlStatusSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MigrateMySqlStatus>;
    getMigrateMySqlStatusSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.MigrateMySqlStatus>): void;
    getMigrateMySqlStatusSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MigrateMySqlStatus>): void;


    /**
     * @summary Gets all network features used by the app (or deployment slot, if
     * specified).
     *
     * Gets all network features used by the app (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} view The type of view. This can either be "summary" or
     * "detailed".
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get network features for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NetworkFeatures>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNetworkFeaturesSlotWithHttpOperationResponse(resourceGroupName: string, name: string, view: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkFeatures>>;

    /**
     * @summary Gets all network features used by the app (or deployment slot, if
     * specified).
     *
     * Gets all network features used by the app (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} view The type of view. This can either be "summary" or
     * "detailed".
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get network features for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NetworkFeatures} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NetworkFeatures} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NetworkFeatures} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNetworkFeaturesSlot(resourceGroupName: string, name: string, view: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkFeatures>;
    listNetworkFeaturesSlot(resourceGroupName: string, name: string, view: string, slot: string, callback: ServiceCallback<models.NetworkFeatures>): void;
    listNetworkFeaturesSlot(resourceGroupName: string, name: string, view: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkFeatures>): void;


    /**
     * @summary Gets a named operation for a network trace capturing (or deployment
     * slot, if specified).
     *
     * Gets a named operation for a network trace capturing (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} operationId GUID of the operation.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get an operation for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getNetworkTraceOperationSlotWithHttpOperationResponse(resourceGroupName: string, name: string, operationId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkTrace[]>>;

    /**
     * @summary Gets a named operation for a network trace capturing (or deployment
     * slot, if specified).
     *
     * Gets a named operation for a network trace capturing (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} operationId GUID of the operation.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get an operation for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getNetworkTraceOperationSlot(resourceGroupName: string, name: string, operationId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkTrace[]>;
    getNetworkTraceOperationSlot(resourceGroupName: string, name: string, operationId: string, slot: string, callback: ServiceCallback<models.NetworkTrace[]>): void;
    getNetworkTraceOperationSlot(resourceGroupName: string, name: string, operationId: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkTrace[]>): void;


    /**
     * @summary Start capturing network packets for the site (To be deprecated).
     *
     * Start capturing network packets for the site (To be deprecated).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} slot The name of the slot for this web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.durationInSeconds] The duration to keep capturing
     * in seconds.
     *
     * @param {number} [options.maxFrameLength] The maximum frame length in bytes
     * (Optional).
     *
     * @param {string} [options.sasUrl] The Blob URL to store capture file.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    startWebSiteNetworkTraceSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { durationInSeconds? : number, maxFrameLength? : number, sasUrl? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * @summary Start capturing network packets for the site (To be deprecated).
     *
     * Start capturing network packets for the site (To be deprecated).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} slot The name of the slot for this web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.durationInSeconds] The duration to keep capturing
     * in seconds.
     *
     * @param {number} [options.maxFrameLength] The maximum frame length in bytes
     * (Optional).
     *
     * @param {string} [options.sasUrl] The Blob URL to store capture file.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    startWebSiteNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, options?: { durationInSeconds? : number, maxFrameLength? : number, sasUrl? : string, customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    startWebSiteNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<string>): void;
    startWebSiteNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, options: { durationInSeconds? : number, maxFrameLength? : number, sasUrl? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * @summary Start capturing network packets for the site.
     *
     * Start capturing network packets for the site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} slot The name of the slot for this web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.durationInSeconds] The duration to keep capturing
     * in seconds.
     *
     * @param {number} [options.maxFrameLength] The maximum frame length in bytes
     * (Optional).
     *
     * @param {string} [options.sasUrl] The Blob URL to store capture file.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    startWebSiteNetworkTraceOperationSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { durationInSeconds? : number, maxFrameLength? : number, sasUrl? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkTrace[]>>;

    /**
     * @summary Start capturing network packets for the site.
     *
     * Start capturing network packets for the site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} slot The name of the slot for this web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.durationInSeconds] The duration to keep capturing
     * in seconds.
     *
     * @param {number} [options.maxFrameLength] The maximum frame length in bytes
     * (Optional).
     *
     * @param {string} [options.sasUrl] The Blob URL to store capture file.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    startWebSiteNetworkTraceOperationSlot(resourceGroupName: string, name: string, slot: string, options?: { durationInSeconds? : number, maxFrameLength? : number, sasUrl? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkTrace[]>;
    startWebSiteNetworkTraceOperationSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.NetworkTrace[]>): void;
    startWebSiteNetworkTraceOperationSlot(resourceGroupName: string, name: string, slot: string, options: { durationInSeconds? : number, maxFrameLength? : number, sasUrl? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkTrace[]>): void;


    /**
     * @summary Stop ongoing capturing network packets for the site.
     *
     * Stop ongoing capturing network packets for the site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} slot The name of the slot for this web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    stopWebSiteNetworkTraceSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Stop ongoing capturing network packets for the site.
     *
     * Stop ongoing capturing network packets for the site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} slot The name of the slot for this web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    stopWebSiteNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    stopWebSiteNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<void>): void;
    stopWebSiteNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Gets a named operation for a network trace capturing (or deployment
     * slot, if specified).
     *
     * Gets a named operation for a network trace capturing (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} operationId GUID of the operation.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get an operation for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getNetworkTracesSlotWithHttpOperationResponse(resourceGroupName: string, name: string, operationId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkTrace[]>>;

    /**
     * @summary Gets a named operation for a network trace capturing (or deployment
     * slot, if specified).
     *
     * Gets a named operation for a network trace capturing (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} operationId GUID of the operation.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get an operation for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getNetworkTracesSlot(resourceGroupName: string, name: string, operationId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkTrace[]>;
    getNetworkTracesSlot(resourceGroupName: string, name: string, operationId: string, slot: string, callback: ServiceCallback<models.NetworkTrace[]>): void;
    getNetworkTracesSlot(resourceGroupName: string, name: string, operationId: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkTrace[]>): void;


    /**
     * @summary Gets a named operation for a network trace capturing (or deployment
     * slot, if specified).
     *
     * Gets a named operation for a network trace capturing (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} operationId GUID of the operation.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get an operation for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getNetworkTraceOperationSlotV2WithHttpOperationResponse(resourceGroupName: string, name: string, operationId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkTrace[]>>;

    /**
     * @summary Gets a named operation for a network trace capturing (or deployment
     * slot, if specified).
     *
     * Gets a named operation for a network trace capturing (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} operationId GUID of the operation.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get an operation for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getNetworkTraceOperationSlotV2(resourceGroupName: string, name: string, operationId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkTrace[]>;
    getNetworkTraceOperationSlotV2(resourceGroupName: string, name: string, operationId: string, slot: string, callback: ServiceCallback<models.NetworkTrace[]>): void;
    getNetworkTraceOperationSlotV2(resourceGroupName: string, name: string, operationId: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkTrace[]>): void;


    /**
     * @summary Gets a named operation for a network trace capturing (or deployment
     * slot, if specified).
     *
     * Gets a named operation for a network trace capturing (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} operationId GUID of the operation.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get an operation for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getNetworkTracesSlotV2WithHttpOperationResponse(resourceGroupName: string, name: string, operationId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkTrace[]>>;

    /**
     * @summary Gets a named operation for a network trace capturing (or deployment
     * slot, if specified).
     *
     * Gets a named operation for a network trace capturing (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} operationId GUID of the operation.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get an operation for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getNetworkTracesSlotV2(resourceGroupName: string, name: string, operationId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkTrace[]>;
    getNetworkTracesSlotV2(resourceGroupName: string, name: string, operationId: string, slot: string, callback: ServiceCallback<models.NetworkTrace[]>): void;
    getNetworkTracesSlotV2(resourceGroupName: string, name: string, operationId: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkTrace[]>): void;


    /**
     * @summary Generates a new publishing password for an app (or deployment slot,
     * if specified).
     *
     * Generates a new publishing password for an app (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API generate a new publishing password for the production
     * slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    generateNewSitePublishingPasswordSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Generates a new publishing password for an app (or deployment slot,
     * if specified).
     *
     * Generates a new publishing password for an app (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API generate a new publishing password for the production
     * slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    generateNewSitePublishingPasswordSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    generateNewSitePublishingPasswordSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<void>): void;
    generateNewSitePublishingPasswordSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Gets perfmon counters for web app.
     *
     * Gets perfmon counters for web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] Return only usages/metrics specified in the
     * filter. Filter conforms to odata syntax. Example: $filter=(startTime eq
     * 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PerfMonCounterCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listPerfMonCountersSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PerfMonCounterCollection>>;

    /**
     * @summary Gets perfmon counters for web app.
     *
     * Gets perfmon counters for web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] Return only usages/metrics specified in the
     * filter. Filter conforms to odata syntax. Example: $filter=(startTime eq
     * 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PerfMonCounterCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PerfMonCounterCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PerfMonCounterCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listPerfMonCountersSlot(resourceGroupName: string, name: string, slot: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.PerfMonCounterCollection>;
    listPerfMonCountersSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.PerfMonCounterCollection>): void;
    listPerfMonCountersSlot(resourceGroupName: string, name: string, slot: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PerfMonCounterCollection>): void;


    /**
     * @summary Gets web app's event logs.
     *
     * Gets web app's event logs.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SitePhpErrorLogFlag>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSitePhpErrorLogFlagSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SitePhpErrorLogFlag>>;

    /**
     * @summary Gets web app's event logs.
     *
     * Gets web app's event logs.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SitePhpErrorLogFlag} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SitePhpErrorLogFlag} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SitePhpErrorLogFlag} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSitePhpErrorLogFlagSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SitePhpErrorLogFlag>;
    getSitePhpErrorLogFlagSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.SitePhpErrorLogFlag>): void;
    getSitePhpErrorLogFlagSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SitePhpErrorLogFlag>): void;


    /**
     * @summary Gets the premier add-ons of an app.
     *
     * Gets the premier add-ons of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get the premier add-ons for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PremierAddOn>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listPremierAddOnsSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PremierAddOn>>;

    /**
     * @summary Gets the premier add-ons of an app.
     *
     * Gets the premier add-ons of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get the premier add-ons for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PremierAddOn} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PremierAddOn} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PremierAddOn} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listPremierAddOnsSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PremierAddOn>;
    listPremierAddOnsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.PremierAddOn>): void;
    listPremierAddOnsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PremierAddOn>): void;


    /**
     * @summary Gets a named add-on of an app.
     *
     * Gets a named add-on of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} premierAddOnName Add-on name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get the named add-on for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PremierAddOn>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getPremierAddOnSlotWithHttpOperationResponse(resourceGroupName: string, name: string, premierAddOnName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PremierAddOn>>;

    /**
     * @summary Gets a named add-on of an app.
     *
     * Gets a named add-on of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} premierAddOnName Add-on name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get the named add-on for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PremierAddOn} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PremierAddOn} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PremierAddOn} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getPremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PremierAddOn>;
    getPremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, slot: string, callback: ServiceCallback<models.PremierAddOn>): void;
    getPremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PremierAddOn>): void;


    /**
     * @summary Updates a named add-on of an app.
     *
     * Updates a named add-on of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} premierAddOnName Add-on name.
     *
     * @param {object} premierAddOn A JSON representation of the edited premier
     * add-on.
     *
     * @param {string} [premierAddOn.sku] Premier add on SKU.
     *
     * @param {string} [premierAddOn.product] Premier add on Product.
     *
     * @param {string} [premierAddOn.vendor] Premier add on Vendor.
     *
     * @param {string} [premierAddOn.marketplacePublisher] Premier add on
     * Marketplace publisher.
     *
     * @param {string} [premierAddOn.marketplaceOffer] Premier add on Marketplace
     * offer.
     *
     * @param {string} [premierAddOn.kind] Kind of resource.
     *
     * @param {string} premierAddOn.location Resource Location.
     *
     * @param {object} [premierAddOn.tags] Resource tags.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will update the named add-on for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PremierAddOn>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addPremierAddOnSlotWithHttpOperationResponse(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: models.PremierAddOn, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PremierAddOn>>;

    /**
     * @summary Updates a named add-on of an app.
     *
     * Updates a named add-on of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} premierAddOnName Add-on name.
     *
     * @param {object} premierAddOn A JSON representation of the edited premier
     * add-on.
     *
     * @param {string} [premierAddOn.sku] Premier add on SKU.
     *
     * @param {string} [premierAddOn.product] Premier add on Product.
     *
     * @param {string} [premierAddOn.vendor] Premier add on Vendor.
     *
     * @param {string} [premierAddOn.marketplacePublisher] Premier add on
     * Marketplace publisher.
     *
     * @param {string} [premierAddOn.marketplaceOffer] Premier add on Marketplace
     * offer.
     *
     * @param {string} [premierAddOn.kind] Kind of resource.
     *
     * @param {string} premierAddOn.location Resource Location.
     *
     * @param {object} [premierAddOn.tags] Resource tags.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will update the named add-on for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PremierAddOn} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PremierAddOn} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PremierAddOn} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addPremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: models.PremierAddOn, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PremierAddOn>;
    addPremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: models.PremierAddOn, slot: string, callback: ServiceCallback<models.PremierAddOn>): void;
    addPremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: models.PremierAddOn, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PremierAddOn>): void;


    /**
     * @summary Delete a premier add-on from an app.
     *
     * Delete a premier add-on from an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} premierAddOnName Add-on name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will delete the named add-on for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deletePremierAddOnSlotWithHttpOperationResponse(resourceGroupName: string, name: string, premierAddOnName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete a premier add-on from an app.
     *
     * Delete a premier add-on from an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} premierAddOnName Add-on name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will delete the named add-on for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deletePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deletePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, slot: string, callback: ServiceCallback<void>): void;
    deletePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Updates a named add-on of an app.
     *
     * Updates a named add-on of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} premierAddOnName Add-on name.
     *
     * @param {object} premierAddOn A JSON representation of the edited premier
     * add-on.
     *
     * @param {string} [premierAddOn.sku] Premier add on SKU.
     *
     * @param {string} [premierAddOn.product] Premier add on Product.
     *
     * @param {string} [premierAddOn.vendor] Premier add on Vendor.
     *
     * @param {string} [premierAddOn.marketplacePublisher] Premier add on
     * Marketplace publisher.
     *
     * @param {string} [premierAddOn.marketplaceOffer] Premier add on Marketplace
     * offer.
     *
     * @param {string} [premierAddOn.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will update the named add-on for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PremierAddOn>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updatePremierAddOnSlotWithHttpOperationResponse(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: models.PremierAddOnPatchResource, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PremierAddOn>>;

    /**
     * @summary Updates a named add-on of an app.
     *
     * Updates a named add-on of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} premierAddOnName Add-on name.
     *
     * @param {object} premierAddOn A JSON representation of the edited premier
     * add-on.
     *
     * @param {string} [premierAddOn.sku] Premier add on SKU.
     *
     * @param {string} [premierAddOn.product] Premier add on Product.
     *
     * @param {string} [premierAddOn.vendor] Premier add on Vendor.
     *
     * @param {string} [premierAddOn.marketplacePublisher] Premier add on
     * Marketplace publisher.
     *
     * @param {string} [premierAddOn.marketplaceOffer] Premier add on Marketplace
     * offer.
     *
     * @param {string} [premierAddOn.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will update the named add-on for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PremierAddOn} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PremierAddOn} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PremierAddOn} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updatePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: models.PremierAddOnPatchResource, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PremierAddOn>;
    updatePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: models.PremierAddOnPatchResource, slot: string, callback: ServiceCallback<models.PremierAddOn>): void;
    updatePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: models.PremierAddOnPatchResource, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PremierAddOn>): void;


    /**
     * @summary Gets data around private site access enablement and authorized
     * Virtual Networks that can access the site.
     *
     * Gets data around private site access enablement and authorized Virtual
     * Networks that can access the site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} slot The name of the slot for the web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PrivateAccess>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getPrivateAccessSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PrivateAccess>>;

    /**
     * @summary Gets data around private site access enablement and authorized
     * Virtual Networks that can access the site.
     *
     * Gets data around private site access enablement and authorized Virtual
     * Networks that can access the site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} slot The name of the slot for the web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PrivateAccess} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PrivateAccess} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PrivateAccess} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getPrivateAccessSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PrivateAccess>;
    getPrivateAccessSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.PrivateAccess>): void;
    getPrivateAccessSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PrivateAccess>): void;


    /**
     * @summary Sets data around private site access enablement and authorized
     * Virtual Networks that can access the site.
     *
     * Sets data around private site access enablement and authorized Virtual
     * Networks that can access the site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {object} access The information for the private access
     *
     * @param {boolean} [access.enabled] Whether private access is enabled or not.
     *
     * @param {array} [access.virtualNetworks] The Virtual Networks (and subnets)
     * allowed to access the site privately.
     *
     * @param {string} [access.kind] Kind of resource.
     *
     * @param {string} slot The name of the slot for the web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PrivateAccess>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    putPrivateAccessVnetSlotWithHttpOperationResponse(resourceGroupName: string, name: string, access: models.PrivateAccess, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PrivateAccess>>;

    /**
     * @summary Sets data around private site access enablement and authorized
     * Virtual Networks that can access the site.
     *
     * Sets data around private site access enablement and authorized Virtual
     * Networks that can access the site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {object} access The information for the private access
     *
     * @param {boolean} [access.enabled] Whether private access is enabled or not.
     *
     * @param {array} [access.virtualNetworks] The Virtual Networks (and subnets)
     * allowed to access the site privately.
     *
     * @param {string} [access.kind] Kind of resource.
     *
     * @param {string} slot The name of the slot for the web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PrivateAccess} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PrivateAccess} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PrivateAccess} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    putPrivateAccessVnetSlot(resourceGroupName: string, name: string, access: models.PrivateAccess, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PrivateAccess>;
    putPrivateAccessVnetSlot(resourceGroupName: string, name: string, access: models.PrivateAccess, slot: string, callback: ServiceCallback<models.PrivateAccess>): void;
    putPrivateAccessVnetSlot(resourceGroupName: string, name: string, access: models.PrivateAccess, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PrivateAccess>): void;


    /**
     * @summary Get list of processes for a web site, or a deployment slot, or for
     * a specific scaled-out instance in a web site.
     *
     * Get list of processes for a web site, or a deployment slot, or for a
     * specific scaled-out instance in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listProcessesSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessInfoCollection>>;

    /**
     * @summary Get list of processes for a web site, or a deployment slot, or for
     * a specific scaled-out instance in a web site.
     *
     * Get list of processes for a web site, or a deployment slot, or for a
     * specific scaled-out instance in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessInfoCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listProcessesSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessInfoCollection>;
    listProcessesSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.ProcessInfoCollection>): void;
    listProcessesSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessInfoCollection>): void;


    /**
     * @summary Get process information by its ID for a specific scaled-out
     * instance in a web site.
     *
     * Get process information by its ID for a specific scaled-out instance in a
     * web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getProcessSlotWithHttpOperationResponse(resourceGroupName: string, name: string, processId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessInfo>>;

    /**
     * @summary Get process information by its ID for a specific scaled-out
     * instance in a web site.
     *
     * Get process information by its ID for a specific scaled-out instance in a
     * web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessInfo>;
    getProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, callback: ServiceCallback<models.ProcessInfo>): void;
    getProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessInfo>): void;


    /**
     * @summary Terminate a process by its ID for a web site, or a deployment slot,
     * or specific scaled-out instance in a web site.
     *
     * Terminate a process by its ID for a web site, or a deployment slot, or
     * specific scaled-out instance in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteProcessSlotWithHttpOperationResponse(resourceGroupName: string, name: string, processId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Terminate a process by its ID for a web site, or a deployment slot,
     * or specific scaled-out instance in a web site.
     *
     * Terminate a process by its ID for a web site, or a deployment slot, or
     * specific scaled-out instance in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, callback: ServiceCallback<void>): void;
    deleteProcessSlot(resourceGroupName: string, name: string, processId: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Get a memory dump of a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * Get a memory dump of a process by its ID for a specific scaled-out instance
     * in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getProcessDumpSlotWithHttpOperationResponse(resourceGroupName: string, name: string, processId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<stream.Readable>>;

    /**
     * @summary Get a memory dump of a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * Get a memory dump of a process by its ID for a specific scaled-out instance
     * in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getProcessDumpSlot(resourceGroupName: string, name: string, processId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<stream.Readable>;
    getProcessDumpSlot(resourceGroupName: string, name: string, processId: string, slot: string, callback: ServiceCallback<stream.Readable>): void;
    getProcessDumpSlot(resourceGroupName: string, name: string, processId: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<stream.Readable>): void;


    /**
     * @summary List module information for a process by its ID for a specific
     * scaled-out instance in a web site.
     *
     * List module information for a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessModuleInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listProcessModulesSlotWithHttpOperationResponse(resourceGroupName: string, name: string, processId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessModuleInfoCollection>>;

    /**
     * @summary List module information for a process by its ID for a specific
     * scaled-out instance in a web site.
     *
     * List module information for a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessModuleInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessModuleInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessModuleInfoCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listProcessModulesSlot(resourceGroupName: string, name: string, processId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessModuleInfoCollection>;
    listProcessModulesSlot(resourceGroupName: string, name: string, processId: string, slot: string, callback: ServiceCallback<models.ProcessModuleInfoCollection>): void;
    listProcessModulesSlot(resourceGroupName: string, name: string, processId: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessModuleInfoCollection>): void;


    /**
     * @summary Get process information by its ID for a specific scaled-out
     * instance in a web site.
     *
     * Get process information by its ID for a specific scaled-out instance in a
     * web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} baseAddress Module base address.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessModuleInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getProcessModuleSlotWithHttpOperationResponse(resourceGroupName: string, name: string, processId: string, baseAddress: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessModuleInfo>>;

    /**
     * @summary Get process information by its ID for a specific scaled-out
     * instance in a web site.
     *
     * Get process information by its ID for a specific scaled-out instance in a
     * web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} baseAddress Module base address.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessModuleInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessModuleInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessModuleInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getProcessModuleSlot(resourceGroupName: string, name: string, processId: string, baseAddress: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessModuleInfo>;
    getProcessModuleSlot(resourceGroupName: string, name: string, processId: string, baseAddress: string, slot: string, callback: ServiceCallback<models.ProcessModuleInfo>): void;
    getProcessModuleSlot(resourceGroupName: string, name: string, processId: string, baseAddress: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessModuleInfo>): void;


    /**
     * @summary List the threads in a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * List the threads in a process by its ID for a specific scaled-out instance
     * in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessThreadInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listProcessThreadsSlotWithHttpOperationResponse(resourceGroupName: string, name: string, processId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessThreadInfoCollection>>;

    /**
     * @summary List the threads in a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * List the threads in a process by its ID for a specific scaled-out instance
     * in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessThreadInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessThreadInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessThreadInfoCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listProcessThreadsSlot(resourceGroupName: string, name: string, processId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessThreadInfoCollection>;
    listProcessThreadsSlot(resourceGroupName: string, name: string, processId: string, slot: string, callback: ServiceCallback<models.ProcessThreadInfoCollection>): void;
    listProcessThreadsSlot(resourceGroupName: string, name: string, processId: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessThreadInfoCollection>): void;


    /**
     * @summary Get thread information by Thread ID for a specific process, in a
     * specific scaled-out instance in a web site.
     *
     * Get thread information by Thread ID for a specific process, in a specific
     * scaled-out instance in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} threadId TID.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessThreadInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getProcessThreadSlotWithHttpOperationResponse(resourceGroupName: string, name: string, processId: string, threadId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessThreadInfo>>;

    /**
     * @summary Get thread information by Thread ID for a specific process, in a
     * specific scaled-out instance in a web site.
     *
     * Get thread information by Thread ID for a specific process, in a specific
     * scaled-out instance in a web site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} processId PID.
     *
     * @param {string} threadId TID.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessThreadInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessThreadInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessThreadInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getProcessThreadSlot(resourceGroupName: string, name: string, processId: string, threadId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessThreadInfo>;
    getProcessThreadSlot(resourceGroupName: string, name: string, processId: string, threadId: string, slot: string, callback: ServiceCallback<models.ProcessThreadInfo>): void;
    getProcessThreadSlot(resourceGroupName: string, name: string, processId: string, threadId: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessThreadInfo>): void;


    /**
     * @summary Get public certificates for an app or a deployment slot.
     *
     * Get public certificates for an app or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API gets hostname bindings for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PublicCertificateCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listPublicCertificatesSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PublicCertificateCollection>>;

    /**
     * @summary Get public certificates for an app or a deployment slot.
     *
     * Get public certificates for an app or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API gets hostname bindings for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PublicCertificateCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PublicCertificateCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PublicCertificateCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listPublicCertificatesSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PublicCertificateCollection>;
    listPublicCertificatesSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.PublicCertificateCollection>): void;
    listPublicCertificatesSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublicCertificateCollection>): void;


    /**
     * @summary Get the named public certificate for an app (or deployment slot, if
     * specified).
     *
     * Get the named public certificate for an app (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API the named binding for the production slot.
     *
     * @param {string} publicCertificateName Public certificate name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PublicCertificate>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getPublicCertificateSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, publicCertificateName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PublicCertificate>>;

    /**
     * @summary Get the named public certificate for an app (or deployment slot, if
     * specified).
     *
     * Get the named public certificate for an app (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API the named binding for the production slot.
     *
     * @param {string} publicCertificateName Public certificate name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PublicCertificate} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PublicCertificate} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PublicCertificate} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getPublicCertificateSlot(resourceGroupName: string, name: string, slot: string, publicCertificateName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PublicCertificate>;
    getPublicCertificateSlot(resourceGroupName: string, name: string, slot: string, publicCertificateName: string, callback: ServiceCallback<models.PublicCertificate>): void;
    getPublicCertificateSlot(resourceGroupName: string, name: string, slot: string, publicCertificateName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublicCertificate>): void;


    /**
     * @summary Creates a hostname binding for an app.
     *
     * Creates a hostname binding for an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} publicCertificateName Public certificate name.
     *
     * @param {object} publicCertificate Public certificate details. This is the
     * JSON representation of a PublicCertificate object.
     *
     * @param {buffer} [publicCertificate.blob] Public Certificate byte array
     *
     * @param {string} [publicCertificate.publicCertificateLocation] Public
     * Certificate Location. Possible values include: 'CurrentUserMy',
     * 'LocalMachineMy', 'Unknown'
     *
     * @param {string} [publicCertificate.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will create a binding for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PublicCertificate>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdatePublicCertificateSlotWithHttpOperationResponse(resourceGroupName: string, name: string, publicCertificateName: string, publicCertificate: models.PublicCertificate, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PublicCertificate>>;

    /**
     * @summary Creates a hostname binding for an app.
     *
     * Creates a hostname binding for an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} publicCertificateName Public certificate name.
     *
     * @param {object} publicCertificate Public certificate details. This is the
     * JSON representation of a PublicCertificate object.
     *
     * @param {buffer} [publicCertificate.blob] Public Certificate byte array
     *
     * @param {string} [publicCertificate.publicCertificateLocation] Public
     * Certificate Location. Possible values include: 'CurrentUserMy',
     * 'LocalMachineMy', 'Unknown'
     *
     * @param {string} [publicCertificate.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will create a binding for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PublicCertificate} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PublicCertificate} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PublicCertificate} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdatePublicCertificateSlot(resourceGroupName: string, name: string, publicCertificateName: string, publicCertificate: models.PublicCertificate, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PublicCertificate>;
    createOrUpdatePublicCertificateSlot(resourceGroupName: string, name: string, publicCertificateName: string, publicCertificate: models.PublicCertificate, slot: string, callback: ServiceCallback<models.PublicCertificate>): void;
    createOrUpdatePublicCertificateSlot(resourceGroupName: string, name: string, publicCertificateName: string, publicCertificate: models.PublicCertificate, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublicCertificate>): void;


    /**
     * @summary Deletes a hostname binding for an app.
     *
     * Deletes a hostname binding for an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will delete the binding for the production slot.
     *
     * @param {string} publicCertificateName Public certificate name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deletePublicCertificateSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, publicCertificateName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a hostname binding for an app.
     *
     * Deletes a hostname binding for an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will delete the binding for the production slot.
     *
     * @param {string} publicCertificateName Public certificate name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deletePublicCertificateSlot(resourceGroupName: string, name: string, slot: string, publicCertificateName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deletePublicCertificateSlot(resourceGroupName: string, name: string, slot: string, publicCertificateName: string, callback: ServiceCallback<void>): void;
    deletePublicCertificateSlot(resourceGroupName: string, name: string, slot: string, publicCertificateName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Gets the publishing profile for an app (or deployment slot, if
     * specified).
     *
     * Gets the publishing profile for an app (or deployment slot, if specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} publishingProfileOptions Specifies publishingProfileOptions
     * for publishing profile. For example, use {"format": "FileZilla3"} to get a
     * FileZilla publishing profile.
     *
     * @param {string} [publishingProfileOptions.format] Name of the format. Valid
     * values are:
     * FileZilla3
     * WebDeploy -- default
     * Ftp. Possible values include: 'FileZilla3', 'WebDeploy', 'Ftp'
     *
     * @param {boolean} [publishingProfileOptions.includeDisasterRecoveryEndpoints]
     * Include the DisasterRecover endpoint if true
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get the publishing profile for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listPublishingProfileXmlWithSecretsSlotWithHttpOperationResponse(resourceGroupName: string, name: string, publishingProfileOptions: models.CsmPublishingProfileOptions, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<stream.Readable>>;

    /**
     * @summary Gets the publishing profile for an app (or deployment slot, if
     * specified).
     *
     * Gets the publishing profile for an app (or deployment slot, if specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} publishingProfileOptions Specifies publishingProfileOptions
     * for publishing profile. For example, use {"format": "FileZilla3"} to get a
     * FileZilla publishing profile.
     *
     * @param {string} [publishingProfileOptions.format] Name of the format. Valid
     * values are:
     * FileZilla3
     * WebDeploy -- default
     * Ftp. Possible values include: 'FileZilla3', 'WebDeploy', 'Ftp'
     *
     * @param {boolean} [publishingProfileOptions.includeDisasterRecoveryEndpoints]
     * Include the DisasterRecover endpoint if true
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get the publishing profile for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listPublishingProfileXmlWithSecretsSlot(resourceGroupName: string, name: string, publishingProfileOptions: models.CsmPublishingProfileOptions, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<stream.Readable>;
    listPublishingProfileXmlWithSecretsSlot(resourceGroupName: string, name: string, publishingProfileOptions: models.CsmPublishingProfileOptions, slot: string, callback: ServiceCallback<stream.Readable>): void;
    listPublishingProfileXmlWithSecretsSlot(resourceGroupName: string, name: string, publishingProfileOptions: models.CsmPublishingProfileOptions, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<stream.Readable>): void;


    /**
     * @summary Resets the configuration settings of the current slot if they were
     * previously modified by calling the API with POST.
     *
     * Resets the configuration settings of the current slot if they were
     * previously modified by calling the API with POST.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API resets configuration settings for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    resetSlotConfigurationSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Resets the configuration settings of the current slot if they were
     * previously modified by calling the API with POST.
     *
     * Resets the configuration settings of the current slot if they were
     * previously modified by calling the API with POST.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API resets configuration settings for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    resetSlotConfigurationSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    resetSlotConfigurationSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<void>): void;
    resetSlotConfigurationSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Restarts an app (or deployment slot, if specified).
     *
     * Restarts an app (or deployment slot, if specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will restart the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.softRestart] Specify true to apply the
     * configuration settings and restarts the app only if necessary. By default,
     * the API always restarts and reprovisions the app.
     *
     * @param {boolean} [options.synchronous] Specify true to block until the app
     * is restarted. By default, it is set to false, and the API responds
     * immediately (asynchronous).
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    restartSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { softRestart? : boolean, synchronous? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Restarts an app (or deployment slot, if specified).
     *
     * Restarts an app (or deployment slot, if specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will restart the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.softRestart] Specify true to apply the
     * configuration settings and restarts the app only if necessary. By default,
     * the API always restarts and reprovisions the app.
     *
     * @param {boolean} [options.synchronous] Specify true to block until the app
     * is restarted. By default, it is set to false, and the API responds
     * immediately (asynchronous).
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    restartSlot(resourceGroupName: string, name: string, slot: string, options?: { softRestart? : boolean, synchronous? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    restartSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<void>): void;
    restartSlot(resourceGroupName: string, name: string, slot: string, options: { softRestart? : boolean, synchronous? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Restores an app from a backup blob in Azure Storage.
     *
     * Restores an app from a backup blob in Azure Storage.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} request Information on restore request .
     *
     * @param {string} request.storageAccountUrl SAS URL to the container.
     *
     * @param {string} [request.blobName] Name of a blob which contains the backup.
     *
     * @param {boolean} request.overwrite <code>true</code> if the restore
     * operation can overwrite target app; otherwise, <code>false</code>.
     * <code>true</code> is needed if trying to restore over an existing app.
     *
     * @param {string} [request.siteName] Name of an app.
     *
     * @param {array} [request.databases] Collection of databases which should be
     * restored. This list has to match the list of databases included in the
     * backup.
     *
     * @param {boolean} [request.ignoreConflictingHostNames] Changes a logic when
     * restoring an app with custom domains. <code>true</code> to remove custom
     * domains automatically. If <code>false</code>, custom domains are added to
     * the app's object when it is being restored, but that might fail due to
     * conflicts during the operation.
     *
     * @param {boolean} [request.ignoreDatabases] Ignore the databases and only
     * restore the site content
     *
     * @param {string} [request.appServicePlan] Specify app service plan that will
     * own restored site.
     *
     * @param {string} [request.operationType] Operation type. Possible values
     * include: 'Default', 'Clone', 'Relocation', 'Snapshot', 'CloudFS'
     *
     * @param {boolean} [request.adjustConnectionStrings] <code>true</code> if
     * SiteConfig.ConnectionStrings should be set in new app; otherwise,
     * <code>false</code>.
     *
     * @param {string} [request.hostingEnvironment] App Service Environment name,
     * if needed (only when restoring an app to an App Service Environment).
     *
     * @param {string} [request.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will restore a backup of the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    restoreFromBackupBlobSlotWithHttpOperationResponse(resourceGroupName: string, name: string, request: models.RestoreRequest, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Restores an app from a backup blob in Azure Storage.
     *
     * Restores an app from a backup blob in Azure Storage.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} request Information on restore request .
     *
     * @param {string} request.storageAccountUrl SAS URL to the container.
     *
     * @param {string} [request.blobName] Name of a blob which contains the backup.
     *
     * @param {boolean} request.overwrite <code>true</code> if the restore
     * operation can overwrite target app; otherwise, <code>false</code>.
     * <code>true</code> is needed if trying to restore over an existing app.
     *
     * @param {string} [request.siteName] Name of an app.
     *
     * @param {array} [request.databases] Collection of databases which should be
     * restored. This list has to match the list of databases included in the
     * backup.
     *
     * @param {boolean} [request.ignoreConflictingHostNames] Changes a logic when
     * restoring an app with custom domains. <code>true</code> to remove custom
     * domains automatically. If <code>false</code>, custom domains are added to
     * the app's object when it is being restored, but that might fail due to
     * conflicts during the operation.
     *
     * @param {boolean} [request.ignoreDatabases] Ignore the databases and only
     * restore the site content
     *
     * @param {string} [request.appServicePlan] Specify app service plan that will
     * own restored site.
     *
     * @param {string} [request.operationType] Operation type. Possible values
     * include: 'Default', 'Clone', 'Relocation', 'Snapshot', 'CloudFS'
     *
     * @param {boolean} [request.adjustConnectionStrings] <code>true</code> if
     * SiteConfig.ConnectionStrings should be set in new app; otherwise,
     * <code>false</code>.
     *
     * @param {string} [request.hostingEnvironment] App Service Environment name,
     * if needed (only when restoring an app to an App Service Environment).
     *
     * @param {string} [request.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will restore a backup of the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    restoreFromBackupBlobSlot(resourceGroupName: string, name: string, request: models.RestoreRequest, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    restoreFromBackupBlobSlot(resourceGroupName: string, name: string, request: models.RestoreRequest, slot: string, callback: ServiceCallback<void>): void;
    restoreFromBackupBlobSlot(resourceGroupName: string, name: string, request: models.RestoreRequest, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Restores a deleted web app to this web app.
     *
     * Restores a deleted web app to this web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} restoreRequest Deleted web app restore information.
     *
     * @param {string} [restoreRequest.deletedSiteId] ARM resource ID of the
     * deleted app. Example:
     * /subscriptions/{subId}/providers/Microsoft.Web/deletedSites/{deletedSiteId}
     *
     * @param {boolean} [restoreRequest.recoverConfiguration] If true, deleted site
     * configuration, in addition to content, will be restored.
     *
     * @param {string} [restoreRequest.snapshotTime] Point in time to restore the
     * deleted app from, formatted as a DateTime string.
     * If unspecified, default value is the time that the app was deleted.
     *
     * @param {boolean} [restoreRequest.useDRSecondary] If true, the snapshot is
     * retrieved from DRSecondary endpoint.
     *
     * @param {string} [restoreRequest.kind] Kind of resource.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    restoreFromDeletedAppSlotWithHttpOperationResponse(resourceGroupName: string, name: string, restoreRequest: models.DeletedAppRestoreRequest, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Restores a deleted web app to this web app.
     *
     * Restores a deleted web app to this web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} restoreRequest Deleted web app restore information.
     *
     * @param {string} [restoreRequest.deletedSiteId] ARM resource ID of the
     * deleted app. Example:
     * /subscriptions/{subId}/providers/Microsoft.Web/deletedSites/{deletedSiteId}
     *
     * @param {boolean} [restoreRequest.recoverConfiguration] If true, deleted site
     * configuration, in addition to content, will be restored.
     *
     * @param {string} [restoreRequest.snapshotTime] Point in time to restore the
     * deleted app from, formatted as a DateTime string.
     * If unspecified, default value is the time that the app was deleted.
     *
     * @param {boolean} [restoreRequest.useDRSecondary] If true, the snapshot is
     * retrieved from DRSecondary endpoint.
     *
     * @param {string} [restoreRequest.kind] Kind of resource.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    restoreFromDeletedAppSlot(resourceGroupName: string, name: string, restoreRequest: models.DeletedAppRestoreRequest, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    restoreFromDeletedAppSlot(resourceGroupName: string, name: string, restoreRequest: models.DeletedAppRestoreRequest, slot: string, callback: ServiceCallback<void>): void;
    restoreFromDeletedAppSlot(resourceGroupName: string, name: string, restoreRequest: models.DeletedAppRestoreRequest, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Restores a web app from a snapshot.
     *
     * Restores a web app from a snapshot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} restoreRequest Snapshot restore settings. Snapshot
     * information can be obtained by calling GetDeletedSites or GetSiteSnapshots
     * API.
     *
     * @param {string} [restoreRequest.snapshotTime] Point in time in which the app
     * restore should be done, formatted as a DateTime string.
     *
     * @param {object} [restoreRequest.recoverySource] Optional. Specifies the web
     * app that snapshot contents will be retrieved from.
     * If empty, the targeted web app will be used as the source.
     *
     * @param {string} [restoreRequest.recoverySource.location] Geographical
     * location of the source web app, e.g. SouthEastAsia, SouthCentralUS
     *
     * @param {string} [restoreRequest.recoverySource.id] ARM resource ID of the
     * source app.
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}
     * for production slots and
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName}
     * for other slots.
     *
     * @param {boolean} restoreRequest.overwrite If <code>true</code> the restore
     * operation can overwrite source app; otherwise, <code>false</code>.
     *
     * @param {boolean} [restoreRequest.recoverConfiguration] If true, site
     * configuration, in addition to content, will be reverted.
     *
     * @param {boolean} [restoreRequest.ignoreConflictingHostNames] If true, custom
     * hostname conflicts will be ignored when recovering to a target web app.
     * This setting is only necessary when RecoverConfiguration is enabled.
     *
     * @param {boolean} [restoreRequest.useDRSecondary] If true, the snapshot is
     * retrieved from DRSecondary endpoint.
     *
     * @param {string} [restoreRequest.kind] Kind of resource.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    restoreSnapshotSlotWithHttpOperationResponse(resourceGroupName: string, name: string, restoreRequest: models.SnapshotRestoreRequest, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Restores a web app from a snapshot.
     *
     * Restores a web app from a snapshot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} restoreRequest Snapshot restore settings. Snapshot
     * information can be obtained by calling GetDeletedSites or GetSiteSnapshots
     * API.
     *
     * @param {string} [restoreRequest.snapshotTime] Point in time in which the app
     * restore should be done, formatted as a DateTime string.
     *
     * @param {object} [restoreRequest.recoverySource] Optional. Specifies the web
     * app that snapshot contents will be retrieved from.
     * If empty, the targeted web app will be used as the source.
     *
     * @param {string} [restoreRequest.recoverySource.location] Geographical
     * location of the source web app, e.g. SouthEastAsia, SouthCentralUS
     *
     * @param {string} [restoreRequest.recoverySource.id] ARM resource ID of the
     * source app.
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}
     * for production slots and
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName}
     * for other slots.
     *
     * @param {boolean} restoreRequest.overwrite If <code>true</code> the restore
     * operation can overwrite source app; otherwise, <code>false</code>.
     *
     * @param {boolean} [restoreRequest.recoverConfiguration] If true, site
     * configuration, in addition to content, will be reverted.
     *
     * @param {boolean} [restoreRequest.ignoreConflictingHostNames] If true, custom
     * hostname conflicts will be ignored when recovering to a target web app.
     * This setting is only necessary when RecoverConfiguration is enabled.
     *
     * @param {boolean} [restoreRequest.useDRSecondary] If true, the snapshot is
     * retrieved from DRSecondary endpoint.
     *
     * @param {string} [restoreRequest.kind] Kind of resource.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    restoreSnapshotSlot(resourceGroupName: string, name: string, restoreRequest: models.SnapshotRestoreRequest, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    restoreSnapshotSlot(resourceGroupName: string, name: string, restoreRequest: models.SnapshotRestoreRequest, slot: string, callback: ServiceCallback<void>): void;
    restoreSnapshotSlot(resourceGroupName: string, name: string, restoreRequest: models.SnapshotRestoreRequest, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Get list of siteextensions for a web site, or a deployment slot.
     *
     * Get list of siteextensions for a web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteExtensionInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSiteExtensionsSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteExtensionInfoCollection>>;

    /**
     * @summary Get list of siteextensions for a web site, or a deployment slot.
     *
     * Get list of siteextensions for a web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteExtensionInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteExtensionInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteExtensionInfoCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSiteExtensionsSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteExtensionInfoCollection>;
    listSiteExtensionsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.SiteExtensionInfoCollection>): void;
    listSiteExtensionsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteExtensionInfoCollection>): void;


    /**
     * @summary Get site extension information by its ID for a web site, or a
     * deployment slot.
     *
     * Get site extension information by its ID for a web site, or a deployment
     * slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} siteExtensionId Site extension name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteExtensionInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSiteExtensionSlotWithHttpOperationResponse(resourceGroupName: string, name: string, siteExtensionId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteExtensionInfo>>;

    /**
     * @summary Get site extension information by its ID for a web site, or a
     * deployment slot.
     *
     * Get site extension information by its ID for a web site, or a deployment
     * slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} siteExtensionId Site extension name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteExtensionInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteExtensionInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteExtensionInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSiteExtensionSlot(resourceGroupName: string, name: string, siteExtensionId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteExtensionInfo>;
    getSiteExtensionSlot(resourceGroupName: string, name: string, siteExtensionId: string, slot: string, callback: ServiceCallback<models.SiteExtensionInfo>): void;
    getSiteExtensionSlot(resourceGroupName: string, name: string, siteExtensionId: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteExtensionInfo>): void;


    /**
     * @summary Install site extension on a web site, or a deployment slot.
     *
     * Install site extension on a web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} siteExtensionId Site extension name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteExtensionInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    installSiteExtensionSlotWithHttpOperationResponse(resourceGroupName: string, name: string, siteExtensionId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteExtensionInfo>>;

    /**
     * @summary Install site extension on a web site, or a deployment slot.
     *
     * Install site extension on a web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} siteExtensionId Site extension name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteExtensionInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteExtensionInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteExtensionInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    installSiteExtensionSlot(resourceGroupName: string, name: string, siteExtensionId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteExtensionInfo>;
    installSiteExtensionSlot(resourceGroupName: string, name: string, siteExtensionId: string, slot: string, callback: ServiceCallback<models.SiteExtensionInfo>): void;
    installSiteExtensionSlot(resourceGroupName: string, name: string, siteExtensionId: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteExtensionInfo>): void;


    /**
     * @summary Remove a site extension from a web site, or a deployment slot.
     *
     * Remove a site extension from a web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} siteExtensionId Site extension name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteSiteExtensionSlotWithHttpOperationResponse(resourceGroupName: string, name: string, siteExtensionId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Remove a site extension from a web site, or a deployment slot.
     *
     * Remove a site extension from a web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} siteExtensionId Site extension name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteSiteExtensionSlot(resourceGroupName: string, name: string, siteExtensionId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteSiteExtensionSlot(resourceGroupName: string, name: string, siteExtensionId: string, slot: string, callback: ServiceCallback<void>): void;
    deleteSiteExtensionSlot(resourceGroupName: string, name: string, siteExtensionId: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Get the difference in configuration settings between two web app
     * slots.
     *
     * Get the difference in configuration settings between two web app slots.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} slotSwapEntity JSON object that contains the target slot
     * name. See example.
     *
     * @param {string} slotSwapEntity.targetSlot Destination deployment slot during
     * swap operation.
     *
     * @param {boolean} slotSwapEntity.preserveVnet <code>true</code> to preserve
     * Virtual Network to the slot during swap; otherwise, <code>false</code>.
     *
     * @param {string} slot Name of the source slot. If a slot is not specified,
     * the production slot is used as the source slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SlotDifferenceCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSlotDifferencesSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SlotDifferenceCollection>>;

    /**
     * @summary Get the difference in configuration settings between two web app
     * slots.
     *
     * Get the difference in configuration settings between two web app slots.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} slotSwapEntity JSON object that contains the target slot
     * name. See example.
     *
     * @param {string} slotSwapEntity.targetSlot Destination deployment slot during
     * swap operation.
     *
     * @param {boolean} slotSwapEntity.preserveVnet <code>true</code> to preserve
     * Virtual Network to the slot during swap; otherwise, <code>false</code>.
     *
     * @param {string} slot Name of the source slot. If a slot is not specified,
     * the production slot is used as the source slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SlotDifferenceCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SlotDifferenceCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SlotDifferenceCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSlotDifferencesSlot(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SlotDifferenceCollection>;
    listSlotDifferencesSlot(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, slot: string, callback: ServiceCallback<models.SlotDifferenceCollection>): void;
    listSlotDifferencesSlot(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SlotDifferenceCollection>): void;


    /**
     * @summary Swaps two deployment slots of an app.
     *
     * Swaps two deployment slots of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} slotSwapEntity JSON object that contains the target slot
     * name. See example.
     *
     * @param {string} slotSwapEntity.targetSlot Destination deployment slot during
     * swap operation.
     *
     * @param {boolean} slotSwapEntity.preserveVnet <code>true</code> to preserve
     * Virtual Network to the slot during swap; otherwise, <code>false</code>.
     *
     * @param {string} slot Name of the source slot. If a slot is not specified,
     * the production slot is used as the source slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    swapSlotSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Swaps two deployment slots of an app.
     *
     * Swaps two deployment slots of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} slotSwapEntity JSON object that contains the target slot
     * name. See example.
     *
     * @param {string} slotSwapEntity.targetSlot Destination deployment slot during
     * swap operation.
     *
     * @param {boolean} slotSwapEntity.preserveVnet <code>true</code> to preserve
     * Virtual Network to the slot during swap; otherwise, <code>false</code>.
     *
     * @param {string} slot Name of the source slot. If a slot is not specified,
     * the production slot is used as the source slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    swapSlotSlot(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    swapSlotSlot(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, slot: string, callback: ServiceCallback<void>): void;
    swapSlotSlot(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Returns all Snapshots to the user.
     *
     * Returns all Snapshots to the user.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Website Name.
     *
     * @param {string} slot Website Slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SnapshotCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSnapshotsSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SnapshotCollection>>;

    /**
     * @summary Returns all Snapshots to the user.
     *
     * Returns all Snapshots to the user.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Website Name.
     *
     * @param {string} slot Website Slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SnapshotCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SnapshotCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SnapshotCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSnapshotsSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SnapshotCollection>;
    listSnapshotsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.SnapshotCollection>): void;
    listSnapshotsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SnapshotCollection>): void;


    /**
     * @summary Returns all Snapshots to the user from DRSecondary endpoint.
     *
     * Returns all Snapshots to the user from DRSecondary endpoint.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Website Name.
     *
     * @param {string} slot Website Slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SnapshotCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSnapshotsFromDRSecondarySlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SnapshotCollection>>;

    /**
     * @summary Returns all Snapshots to the user from DRSecondary endpoint.
     *
     * Returns all Snapshots to the user from DRSecondary endpoint.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Website Name.
     *
     * @param {string} slot Website Slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SnapshotCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SnapshotCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SnapshotCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSnapshotsFromDRSecondarySlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SnapshotCollection>;
    listSnapshotsFromDRSecondarySlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.SnapshotCollection>): void;
    listSnapshotsFromDRSecondarySlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SnapshotCollection>): void;


    /**
     * @summary Gets the source control configuration of an app.
     *
     * Gets the source control configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get the source control configuration for the
     * production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteSourceControl>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSourceControlSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteSourceControl>>;

    /**
     * @summary Gets the source control configuration of an app.
     *
     * Gets the source control configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get the source control configuration for the
     * production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteSourceControl} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteSourceControl} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteSourceControl} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSourceControlSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteSourceControl>;
    getSourceControlSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.SiteSourceControl>): void;
    getSourceControlSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteSourceControl>): void;


    /**
     * @summary Updates the source control configuration of an app.
     *
     * Updates the source control configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} siteSourceControl JSON representation of a SiteSourceControl
     * object. See example.
     *
     * @param {string} [siteSourceControl.repoUrl] Repository or source control
     * URL.
     *
     * @param {string} [siteSourceControl.branch] Name of branch to use for
     * deployment.
     *
     * @param {boolean} [siteSourceControl.isManualIntegration] <code>true</code>
     * to limit to manual integration; <code>false</code> to enable continuous
     * integration (which configures webhooks into online repos like GitHub).
     *
     * @param {boolean} [siteSourceControl.deploymentRollbackEnabled]
     * <code>true</code> to enable deployment rollback; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteSourceControl.isMercurial] <code>true</code> for a
     * Mercurial repository; <code>false</code> for a Git repository.
     *
     * @param {string} [siteSourceControl.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will update the source control configuration for the
     * production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteSourceControl>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateSourceControlSlotWithHttpOperationResponse(resourceGroupName: string, name: string, siteSourceControl: models.SiteSourceControl, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteSourceControl>>;

    /**
     * @summary Updates the source control configuration of an app.
     *
     * Updates the source control configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} siteSourceControl JSON representation of a SiteSourceControl
     * object. See example.
     *
     * @param {string} [siteSourceControl.repoUrl] Repository or source control
     * URL.
     *
     * @param {string} [siteSourceControl.branch] Name of branch to use for
     * deployment.
     *
     * @param {boolean} [siteSourceControl.isManualIntegration] <code>true</code>
     * to limit to manual integration; <code>false</code> to enable continuous
     * integration (which configures webhooks into online repos like GitHub).
     *
     * @param {boolean} [siteSourceControl.deploymentRollbackEnabled]
     * <code>true</code> to enable deployment rollback; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteSourceControl.isMercurial] <code>true</code> for a
     * Mercurial repository; <code>false</code> for a Git repository.
     *
     * @param {string} [siteSourceControl.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will update the source control configuration for the
     * production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteSourceControl} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteSourceControl} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteSourceControl} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateSourceControlSlot(resourceGroupName: string, name: string, siteSourceControl: models.SiteSourceControl, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteSourceControl>;
    createOrUpdateSourceControlSlot(resourceGroupName: string, name: string, siteSourceControl: models.SiteSourceControl, slot: string, callback: ServiceCallback<models.SiteSourceControl>): void;
    createOrUpdateSourceControlSlot(resourceGroupName: string, name: string, siteSourceControl: models.SiteSourceControl, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteSourceControl>): void;


    /**
     * @summary Deletes the source control configuration of an app.
     *
     * Deletes the source control configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will delete the source control configuration for the
     * production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteSourceControlSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes the source control configuration of an app.
     *
     * Deletes the source control configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will delete the source control configuration for the
     * production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteSourceControlSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteSourceControlSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<void>): void;
    deleteSourceControlSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Updates the source control configuration of an app.
     *
     * Updates the source control configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} siteSourceControl JSON representation of a SiteSourceControl
     * object. See example.
     *
     * @param {string} [siteSourceControl.repoUrl] Repository or source control
     * URL.
     *
     * @param {string} [siteSourceControl.branch] Name of branch to use for
     * deployment.
     *
     * @param {boolean} [siteSourceControl.isManualIntegration] <code>true</code>
     * to limit to manual integration; <code>false</code> to enable continuous
     * integration (which configures webhooks into online repos like GitHub).
     *
     * @param {boolean} [siteSourceControl.deploymentRollbackEnabled]
     * <code>true</code> to enable deployment rollback; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteSourceControl.isMercurial] <code>true</code> for a
     * Mercurial repository; <code>false</code> for a Git repository.
     *
     * @param {string} [siteSourceControl.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will update the source control configuration for the
     * production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteSourceControl>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateSourceControlSlotWithHttpOperationResponse(resourceGroupName: string, name: string, siteSourceControl: models.SiteSourceControl, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteSourceControl>>;

    /**
     * @summary Updates the source control configuration of an app.
     *
     * Updates the source control configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} siteSourceControl JSON representation of a SiteSourceControl
     * object. See example.
     *
     * @param {string} [siteSourceControl.repoUrl] Repository or source control
     * URL.
     *
     * @param {string} [siteSourceControl.branch] Name of branch to use for
     * deployment.
     *
     * @param {boolean} [siteSourceControl.isManualIntegration] <code>true</code>
     * to limit to manual integration; <code>false</code> to enable continuous
     * integration (which configures webhooks into online repos like GitHub).
     *
     * @param {boolean} [siteSourceControl.deploymentRollbackEnabled]
     * <code>true</code> to enable deployment rollback; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteSourceControl.isMercurial] <code>true</code> for a
     * Mercurial repository; <code>false</code> for a Git repository.
     *
     * @param {string} [siteSourceControl.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will update the source control configuration for the
     * production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteSourceControl} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteSourceControl} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteSourceControl} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateSourceControlSlot(resourceGroupName: string, name: string, siteSourceControl: models.SiteSourceControl, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteSourceControl>;
    updateSourceControlSlot(resourceGroupName: string, name: string, siteSourceControl: models.SiteSourceControl, slot: string, callback: ServiceCallback<models.SiteSourceControl>): void;
    updateSourceControlSlot(resourceGroupName: string, name: string, siteSourceControl: models.SiteSourceControl, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteSourceControl>): void;


    /**
     * @summary Starts an app (or deployment slot, if specified).
     *
     * Starts an app (or deployment slot, if specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will start the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    startSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Starts an app (or deployment slot, if specified).
     *
     * Starts an app (or deployment slot, if specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will start the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    startSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    startSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<void>): void;
    startSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Start capturing network packets for the site.
     *
     * Start capturing network packets for the site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} slot The name of the slot for this web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.durationInSeconds] The duration to keep capturing
     * in seconds.
     *
     * @param {number} [options.maxFrameLength] The maximum frame length in bytes
     * (Optional).
     *
     * @param {string} [options.sasUrl] The Blob URL to store capture file.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    startNetworkTraceSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { durationInSeconds? : number, maxFrameLength? : number, sasUrl? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkTrace[]>>;

    /**
     * @summary Start capturing network packets for the site.
     *
     * Start capturing network packets for the site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} slot The name of the slot for this web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.durationInSeconds] The duration to keep capturing
     * in seconds.
     *
     * @param {number} [options.maxFrameLength] The maximum frame length in bytes
     * (Optional).
     *
     * @param {string} [options.sasUrl] The Blob URL to store capture file.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    startNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, options?: { durationInSeconds? : number, maxFrameLength? : number, sasUrl? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkTrace[]>;
    startNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.NetworkTrace[]>): void;
    startNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, options: { durationInSeconds? : number, maxFrameLength? : number, sasUrl? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkTrace[]>): void;


    /**
     * @summary Stops an app (or deployment slot, if specified).
     *
     * Stops an app (or deployment slot, if specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will stop the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    stopSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Stops an app (or deployment slot, if specified).
     *
     * Stops an app (or deployment slot, if specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will stop the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    stopSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    stopSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<void>): void;
    stopSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Stop ongoing capturing network packets for the site.
     *
     * Stop ongoing capturing network packets for the site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} slot The name of the slot for this web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    stopNetworkTraceSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Stop ongoing capturing network packets for the site.
     *
     * Stop ongoing capturing network packets for the site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} slot The name of the slot for this web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    stopNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    stopNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<void>): void;
    stopNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Sync web app repository.
     *
     * Sync web app repository.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    syncRepositorySlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Sync web app repository.
     *
     * Sync web app repository.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    syncRepositorySlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    syncRepositorySlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<void>): void;
    syncRepositorySlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Syncs function trigger metadata to the scale controller
     *
     * Syncs function trigger metadata to the scale controller
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will restore a backup of the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    syncFunctionTriggersSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Syncs function trigger metadata to the scale controller
     *
     * Syncs function trigger metadata to the scale controller
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will restore a backup of the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    syncFunctionTriggersSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    syncFunctionTriggersSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<void>): void;
    syncFunctionTriggersSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary List triggered web jobs for an app, or a deployment slot.
     *
     * List triggered web jobs for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TriggeredWebJobCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listTriggeredWebJobsSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TriggeredWebJobCollection>>;

    /**
     * @summary List triggered web jobs for an app, or a deployment slot.
     *
     * List triggered web jobs for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TriggeredWebJobCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TriggeredWebJobCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TriggeredWebJobCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listTriggeredWebJobsSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TriggeredWebJobCollection>;
    listTriggeredWebJobsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.TriggeredWebJobCollection>): void;
    listTriggeredWebJobsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TriggeredWebJobCollection>): void;


    /**
     * @summary Gets a triggered web job by its ID for an app, or a deployment
     * slot.
     *
     * Gets a triggered web job by its ID for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TriggeredWebJob>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getTriggeredWebJobSlotWithHttpOperationResponse(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TriggeredWebJob>>;

    /**
     * @summary Gets a triggered web job by its ID for an app, or a deployment
     * slot.
     *
     * Gets a triggered web job by its ID for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TriggeredWebJob} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TriggeredWebJob} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TriggeredWebJob} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getTriggeredWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TriggeredWebJob>;
    getTriggeredWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, callback: ServiceCallback<models.TriggeredWebJob>): void;
    getTriggeredWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TriggeredWebJob>): void;


    /**
     * @summary Delete a triggered web job by its ID for an app, or a deployment
     * slot.
     *
     * Delete a triggered web job by its ID for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteTriggeredWebJobSlotWithHttpOperationResponse(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete a triggered web job by its ID for an app, or a deployment
     * slot.
     *
     * Delete a triggered web job by its ID for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteTriggeredWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteTriggeredWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, callback: ServiceCallback<void>): void;
    deleteTriggeredWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary List a triggered web job's history for an app, or a deployment
     * slot.
     *
     * List a triggered web job's history for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TriggeredJobHistoryCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listTriggeredWebJobHistorySlotWithHttpOperationResponse(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TriggeredJobHistoryCollection>>;

    /**
     * @summary List a triggered web job's history for an app, or a deployment
     * slot.
     *
     * List a triggered web job's history for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TriggeredJobHistoryCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TriggeredJobHistoryCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TriggeredJobHistoryCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listTriggeredWebJobHistorySlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TriggeredJobHistoryCollection>;
    listTriggeredWebJobHistorySlot(resourceGroupName: string, name: string, webJobName: string, slot: string, callback: ServiceCallback<models.TriggeredJobHistoryCollection>): void;
    listTriggeredWebJobHistorySlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TriggeredJobHistoryCollection>): void;


    /**
     * @summary Gets a triggered web job's history by its ID for an app, , or a
     * deployment slot.
     *
     * Gets a triggered web job's history by its ID for an app, , or a deployment
     * slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {string} id History ID.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TriggeredJobHistory>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getTriggeredWebJobHistorySlotWithHttpOperationResponse(resourceGroupName: string, name: string, webJobName: string, id: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TriggeredJobHistory>>;

    /**
     * @summary Gets a triggered web job's history by its ID for an app, , or a
     * deployment slot.
     *
     * Gets a triggered web job's history by its ID for an app, , or a deployment
     * slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {string} id History ID.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TriggeredJobHistory} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TriggeredJobHistory} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TriggeredJobHistory} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getTriggeredWebJobHistorySlot(resourceGroupName: string, name: string, webJobName: string, id: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TriggeredJobHistory>;
    getTriggeredWebJobHistorySlot(resourceGroupName: string, name: string, webJobName: string, id: string, slot: string, callback: ServiceCallback<models.TriggeredJobHistory>): void;
    getTriggeredWebJobHistorySlot(resourceGroupName: string, name: string, webJobName: string, id: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TriggeredJobHistory>): void;


    /**
     * @summary Run a triggered web job for an app, or a deployment slot.
     *
     * Run a triggered web job for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    runTriggeredWebJobSlotWithHttpOperationResponse(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Run a triggered web job for an app, or a deployment slot.
     *
     * Run a triggered web job for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    runTriggeredWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    runTriggeredWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, callback: ServiceCallback<void>): void;
    runTriggeredWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Gets the quota usage information of an app (or deployment slot, if
     * specified).
     *
     * Gets the quota usage information of an app (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get quota information of the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] Return only information specified in the
     * filter (using OData syntax). For example: $filter=(name.value eq 'Metric1'
     * or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and
     * endTime eq 2014-12-31T23:59:59Z and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CsmUsageQuotaCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listUsagesSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CsmUsageQuotaCollection>>;

    /**
     * @summary Gets the quota usage information of an app (or deployment slot, if
     * specified).
     *
     * Gets the quota usage information of an app (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get quota information of the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] Return only information specified in the
     * filter (using OData syntax). For example: $filter=(name.value eq 'Metric1'
     * or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and
     * endTime eq 2014-12-31T23:59:59Z and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CsmUsageQuotaCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CsmUsageQuotaCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CsmUsageQuotaCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listUsagesSlot(resourceGroupName: string, name: string, slot: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.CsmUsageQuotaCollection>;
    listUsagesSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.CsmUsageQuotaCollection>): void;
    listUsagesSlot(resourceGroupName: string, name: string, slot: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CsmUsageQuotaCollection>): void;


    /**
     * @summary Gets the virtual networks the app (or deployment slot) is connected
     * to.
     *
     * Gets the virtual networks the app (or deployment slot) is connected to.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get virtual network connections for the production
     * slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listVnetConnectionsSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VnetInfo[]>>;

    /**
     * @summary Gets the virtual networks the app (or deployment slot) is connected
     * to.
     *
     * Gets the virtual networks the app (or deployment slot) is connected to.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get virtual network connections for the production
     * slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listVnetConnectionsSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VnetInfo[]>;
    listVnetConnectionsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.VnetInfo[]>): void;
    listVnetConnectionsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetInfo[]>): void;


    /**
     * @summary Gets a virtual network the app (or deployment slot) is connected to
     * by name.
     *
     * Gets a virtual network the app (or deployment slot) is connected to by name.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} vnetName Name of the virtual network.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get the named virtual network for the production
     * slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VnetInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getVnetConnectionSlotWithHttpOperationResponse(resourceGroupName: string, name: string, vnetName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VnetInfo>>;

    /**
     * @summary Gets a virtual network the app (or deployment slot) is connected to
     * by name.
     *
     * Gets a virtual network the app (or deployment slot) is connected to by name.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} vnetName Name of the virtual network.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get the named virtual network for the production
     * slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VnetInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VnetInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VnetInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VnetInfo>;
    getVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, slot: string, callback: ServiceCallback<models.VnetInfo>): void;
    getVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetInfo>): void;


    /**
     * @summary Adds a Virtual Network connection to an app or slot (PUT) or
     * updates the connection properties (PATCH).
     *
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the
     * connection properties (PATCH).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} vnetName Name of an existing Virtual Network.
     *
     * @param {object} connectionEnvelope Properties of the Virtual Network
     * connection. See example.
     *
     * @param {string} [connectionEnvelope.vnetResourceId] The Virtual Network's
     * resource ID.
     *
     * @param {buffer} [connectionEnvelope.certBlob] A certificate file (.cer) blob
     * containing the public key of the private key used to authenticate a
     * Point-To-Site VPN connection.
     *
     * @param {string} [connectionEnvelope.dnsServers] DNS servers to be used by
     * this Virtual Network. This should be a comma-separated list of IP addresses.
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will add or update connections for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VnetInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateVnetConnectionSlotWithHttpOperationResponse(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: models.VnetInfo, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VnetInfo>>;

    /**
     * @summary Adds a Virtual Network connection to an app or slot (PUT) or
     * updates the connection properties (PATCH).
     *
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the
     * connection properties (PATCH).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} vnetName Name of an existing Virtual Network.
     *
     * @param {object} connectionEnvelope Properties of the Virtual Network
     * connection. See example.
     *
     * @param {string} [connectionEnvelope.vnetResourceId] The Virtual Network's
     * resource ID.
     *
     * @param {buffer} [connectionEnvelope.certBlob] A certificate file (.cer) blob
     * containing the public key of the private key used to authenticate a
     * Point-To-Site VPN connection.
     *
     * @param {string} [connectionEnvelope.dnsServers] DNS servers to be used by
     * this Virtual Network. This should be a comma-separated list of IP addresses.
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will add or update connections for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VnetInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VnetInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VnetInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: models.VnetInfo, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VnetInfo>;
    createOrUpdateVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: models.VnetInfo, slot: string, callback: ServiceCallback<models.VnetInfo>): void;
    createOrUpdateVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: models.VnetInfo, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetInfo>): void;


    /**
     * @summary Deletes a connection from an app (or deployment slot to a named
     * virtual network.
     *
     * Deletes a connection from an app (or deployment slot to a named virtual
     * network.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} vnetName Name of the virtual network.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will delete the connection for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteVnetConnectionSlotWithHttpOperationResponse(resourceGroupName: string, name: string, vnetName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a connection from an app (or deployment slot to a named
     * virtual network.
     *
     * Deletes a connection from an app (or deployment slot to a named virtual
     * network.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} vnetName Name of the virtual network.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will delete the connection for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, slot: string, callback: ServiceCallback<void>): void;
    deleteVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Adds a Virtual Network connection to an app or slot (PUT) or
     * updates the connection properties (PATCH).
     *
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the
     * connection properties (PATCH).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} vnetName Name of an existing Virtual Network.
     *
     * @param {object} connectionEnvelope Properties of the Virtual Network
     * connection. See example.
     *
     * @param {string} [connectionEnvelope.vnetResourceId] The Virtual Network's
     * resource ID.
     *
     * @param {buffer} [connectionEnvelope.certBlob] A certificate file (.cer) blob
     * containing the public key of the private key used to authenticate a
     * Point-To-Site VPN connection.
     *
     * @param {string} [connectionEnvelope.dnsServers] DNS servers to be used by
     * this Virtual Network. This should be a comma-separated list of IP addresses.
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will add or update connections for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VnetInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateVnetConnectionSlotWithHttpOperationResponse(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: models.VnetInfo, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VnetInfo>>;

    /**
     * @summary Adds a Virtual Network connection to an app or slot (PUT) or
     * updates the connection properties (PATCH).
     *
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the
     * connection properties (PATCH).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} vnetName Name of an existing Virtual Network.
     *
     * @param {object} connectionEnvelope Properties of the Virtual Network
     * connection. See example.
     *
     * @param {string} [connectionEnvelope.vnetResourceId] The Virtual Network's
     * resource ID.
     *
     * @param {buffer} [connectionEnvelope.certBlob] A certificate file (.cer) blob
     * containing the public key of the private key used to authenticate a
     * Point-To-Site VPN connection.
     *
     * @param {string} [connectionEnvelope.dnsServers] DNS servers to be used by
     * this Virtual Network. This should be a comma-separated list of IP addresses.
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will add or update connections for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VnetInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VnetInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VnetInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: models.VnetInfo, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VnetInfo>;
    updateVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: models.VnetInfo, slot: string, callback: ServiceCallback<models.VnetInfo>): void;
    updateVnetConnectionSlot(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: models.VnetInfo, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetInfo>): void;


    /**
     * @summary Gets an app's Virtual Network gateway.
     *
     * Gets an app's Virtual Network gateway.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} vnetName Name of the Virtual Network.
     *
     * @param {string} gatewayName Name of the gateway. Currently, the only
     * supported string is "primary".
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get a gateway for the production slot's Virtual
     * Network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VnetGateway>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getVnetConnectionGatewaySlotWithHttpOperationResponse(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VnetGateway>>;

    /**
     * @summary Gets an app's Virtual Network gateway.
     *
     * Gets an app's Virtual Network gateway.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} vnetName Name of the Virtual Network.
     *
     * @param {string} gatewayName Name of the gateway. Currently, the only
     * supported string is "primary".
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get a gateway for the production slot's Virtual
     * Network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VnetGateway} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VnetGateway} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VnetGateway} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getVnetConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VnetGateway>;
    getVnetConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, slot: string, callback: ServiceCallback<models.VnetGateway>): void;
    getVnetConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetGateway>): void;


    /**
     * @summary Adds a gateway to a connected Virtual Network (PUT) or updates it
     * (PATCH).
     *
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} vnetName Name of the Virtual Network.
     *
     * @param {string} gatewayName Name of the gateway. Currently, the only
     * supported string is "primary".
     *
     * @param {object} connectionEnvelope The properties to update this gateway
     * with.
     *
     * @param {string} [connectionEnvelope.vnetName] The Virtual Network name.
     *
     * @param {string} connectionEnvelope.vpnPackageUri The URI where the VPN
     * package can be downloaded.
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will add or update a gateway for the production slot's
     * Virtual Network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VnetGateway>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateVnetConnectionGatewaySlotWithHttpOperationResponse(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: models.VnetGateway, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VnetGateway>>;

    /**
     * @summary Adds a gateway to a connected Virtual Network (PUT) or updates it
     * (PATCH).
     *
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} vnetName Name of the Virtual Network.
     *
     * @param {string} gatewayName Name of the gateway. Currently, the only
     * supported string is "primary".
     *
     * @param {object} connectionEnvelope The properties to update this gateway
     * with.
     *
     * @param {string} [connectionEnvelope.vnetName] The Virtual Network name.
     *
     * @param {string} connectionEnvelope.vpnPackageUri The URI where the VPN
     * package can be downloaded.
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will add or update a gateway for the production slot's
     * Virtual Network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VnetGateway} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VnetGateway} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VnetGateway} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateVnetConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: models.VnetGateway, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VnetGateway>;
    createOrUpdateVnetConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: models.VnetGateway, slot: string, callback: ServiceCallback<models.VnetGateway>): void;
    createOrUpdateVnetConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: models.VnetGateway, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetGateway>): void;


    /**
     * @summary Adds a gateway to a connected Virtual Network (PUT) or updates it
     * (PATCH).
     *
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} vnetName Name of the Virtual Network.
     *
     * @param {string} gatewayName Name of the gateway. Currently, the only
     * supported string is "primary".
     *
     * @param {object} connectionEnvelope The properties to update this gateway
     * with.
     *
     * @param {string} [connectionEnvelope.vnetName] The Virtual Network name.
     *
     * @param {string} connectionEnvelope.vpnPackageUri The URI where the VPN
     * package can be downloaded.
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will add or update a gateway for the production slot's
     * Virtual Network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VnetGateway>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateVnetConnectionGatewaySlotWithHttpOperationResponse(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: models.VnetGateway, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VnetGateway>>;

    /**
     * @summary Adds a gateway to a connected Virtual Network (PUT) or updates it
     * (PATCH).
     *
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} vnetName Name of the Virtual Network.
     *
     * @param {string} gatewayName Name of the gateway. Currently, the only
     * supported string is "primary".
     *
     * @param {object} connectionEnvelope The properties to update this gateway
     * with.
     *
     * @param {string} [connectionEnvelope.vnetName] The Virtual Network name.
     *
     * @param {string} connectionEnvelope.vpnPackageUri The URI where the VPN
     * package can be downloaded.
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will add or update a gateway for the production slot's
     * Virtual Network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VnetGateway} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VnetGateway} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VnetGateway} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateVnetConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: models.VnetGateway, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VnetGateway>;
    updateVnetConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: models.VnetGateway, slot: string, callback: ServiceCallback<models.VnetGateway>): void;
    updateVnetConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: models.VnetGateway, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetGateway>): void;


    /**
     * @summary List webjobs for an app, or a deployment slot.
     *
     * List webjobs for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WebJobCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWebJobsSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WebJobCollection>>;

    /**
     * @summary List webjobs for an app, or a deployment slot.
     *
     * List webjobs for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WebJobCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WebJobCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WebJobCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listWebJobsSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WebJobCollection>;
    listWebJobsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.WebJobCollection>): void;
    listWebJobsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WebJobCollection>): void;


    /**
     * @summary Get webjob information for an app, or a deployment slot.
     *
     * Get webjob information for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of the web job.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WebJob>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWebJobSlotWithHttpOperationResponse(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WebJob>>;

    /**
     * @summary Get webjob information for an app, or a deployment slot.
     *
     * Get webjob information for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of the web job.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API returns deployments for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WebJob} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WebJob} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WebJob} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WebJob>;
    getWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, callback: ServiceCallback<models.WebJob>): void;
    getWebJobSlot(resourceGroupName: string, name: string, webJobName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WebJob>): void;


    /**
     * @summary Get the difference in configuration settings between two web app
     * slots.
     *
     * Get the difference in configuration settings between two web app slots.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} slotSwapEntity JSON object that contains the target slot
     * name. See example.
     *
     * @param {string} slotSwapEntity.targetSlot Destination deployment slot during
     * swap operation.
     *
     * @param {boolean} slotSwapEntity.preserveVnet <code>true</code> to preserve
     * Virtual Network to the slot during swap; otherwise, <code>false</code>.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SlotDifferenceCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSlotDifferencesFromProductionWithHttpOperationResponse(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SlotDifferenceCollection>>;

    /**
     * @summary Get the difference in configuration settings between two web app
     * slots.
     *
     * Get the difference in configuration settings between two web app slots.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} slotSwapEntity JSON object that contains the target slot
     * name. See example.
     *
     * @param {string} slotSwapEntity.targetSlot Destination deployment slot during
     * swap operation.
     *
     * @param {boolean} slotSwapEntity.preserveVnet <code>true</code> to preserve
     * Virtual Network to the slot during swap; otherwise, <code>false</code>.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SlotDifferenceCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SlotDifferenceCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SlotDifferenceCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSlotDifferencesFromProduction(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SlotDifferenceCollection>;
    listSlotDifferencesFromProduction(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, callback: ServiceCallback<models.SlotDifferenceCollection>): void;
    listSlotDifferencesFromProduction(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SlotDifferenceCollection>): void;


    /**
     * @summary Swaps two deployment slots of an app.
     *
     * Swaps two deployment slots of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} slotSwapEntity JSON object that contains the target slot
     * name. See example.
     *
     * @param {string} slotSwapEntity.targetSlot Destination deployment slot during
     * swap operation.
     *
     * @param {boolean} slotSwapEntity.preserveVnet <code>true</code> to preserve
     * Virtual Network to the slot during swap; otherwise, <code>false</code>.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    swapSlotWithProductionWithHttpOperationResponse(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Swaps two deployment slots of an app.
     *
     * Swaps two deployment slots of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} slotSwapEntity JSON object that contains the target slot
     * name. See example.
     *
     * @param {string} slotSwapEntity.targetSlot Destination deployment slot during
     * swap operation.
     *
     * @param {boolean} slotSwapEntity.preserveVnet <code>true</code> to preserve
     * Virtual Network to the slot during swap; otherwise, <code>false</code>.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    swapSlotWithProduction(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    swapSlotWithProduction(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, callback: ServiceCallback<void>): void;
    swapSlotWithProduction(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Returns all Snapshots to the user.
     *
     * Returns all Snapshots to the user.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Website Name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SnapshotCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSnapshotsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SnapshotCollection>>;

    /**
     * @summary Returns all Snapshots to the user.
     *
     * Returns all Snapshots to the user.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Website Name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SnapshotCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SnapshotCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SnapshotCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSnapshots(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SnapshotCollection>;
    listSnapshots(resourceGroupName: string, name: string, callback: ServiceCallback<models.SnapshotCollection>): void;
    listSnapshots(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SnapshotCollection>): void;


    /**
     * @summary Returns all Snapshots to the user from DRSecondary endpoint.
     *
     * Returns all Snapshots to the user from DRSecondary endpoint.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Website Name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SnapshotCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSnapshotsFromDRSecondaryWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SnapshotCollection>>;

    /**
     * @summary Returns all Snapshots to the user from DRSecondary endpoint.
     *
     * Returns all Snapshots to the user from DRSecondary endpoint.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Website Name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SnapshotCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SnapshotCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SnapshotCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSnapshotsFromDRSecondary(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SnapshotCollection>;
    listSnapshotsFromDRSecondary(resourceGroupName: string, name: string, callback: ServiceCallback<models.SnapshotCollection>): void;
    listSnapshotsFromDRSecondary(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SnapshotCollection>): void;


    /**
     * @summary Gets the source control configuration of an app.
     *
     * Gets the source control configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteSourceControl>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSourceControlWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteSourceControl>>;

    /**
     * @summary Gets the source control configuration of an app.
     *
     * Gets the source control configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteSourceControl} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteSourceControl} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteSourceControl} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSourceControl(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteSourceControl>;
    getSourceControl(resourceGroupName: string, name: string, callback: ServiceCallback<models.SiteSourceControl>): void;
    getSourceControl(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteSourceControl>): void;


    /**
     * @summary Updates the source control configuration of an app.
     *
     * Updates the source control configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} siteSourceControl JSON representation of a SiteSourceControl
     * object. See example.
     *
     * @param {string} [siteSourceControl.repoUrl] Repository or source control
     * URL.
     *
     * @param {string} [siteSourceControl.branch] Name of branch to use for
     * deployment.
     *
     * @param {boolean} [siteSourceControl.isManualIntegration] <code>true</code>
     * to limit to manual integration; <code>false</code> to enable continuous
     * integration (which configures webhooks into online repos like GitHub).
     *
     * @param {boolean} [siteSourceControl.deploymentRollbackEnabled]
     * <code>true</code> to enable deployment rollback; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteSourceControl.isMercurial] <code>true</code> for a
     * Mercurial repository; <code>false</code> for a Git repository.
     *
     * @param {string} [siteSourceControl.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteSourceControl>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateSourceControlWithHttpOperationResponse(resourceGroupName: string, name: string, siteSourceControl: models.SiteSourceControl, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteSourceControl>>;

    /**
     * @summary Updates the source control configuration of an app.
     *
     * Updates the source control configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} siteSourceControl JSON representation of a SiteSourceControl
     * object. See example.
     *
     * @param {string} [siteSourceControl.repoUrl] Repository or source control
     * URL.
     *
     * @param {string} [siteSourceControl.branch] Name of branch to use for
     * deployment.
     *
     * @param {boolean} [siteSourceControl.isManualIntegration] <code>true</code>
     * to limit to manual integration; <code>false</code> to enable continuous
     * integration (which configures webhooks into online repos like GitHub).
     *
     * @param {boolean} [siteSourceControl.deploymentRollbackEnabled]
     * <code>true</code> to enable deployment rollback; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteSourceControl.isMercurial] <code>true</code> for a
     * Mercurial repository; <code>false</code> for a Git repository.
     *
     * @param {string} [siteSourceControl.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteSourceControl} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteSourceControl} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteSourceControl} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateSourceControl(resourceGroupName: string, name: string, siteSourceControl: models.SiteSourceControl, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteSourceControl>;
    createOrUpdateSourceControl(resourceGroupName: string, name: string, siteSourceControl: models.SiteSourceControl, callback: ServiceCallback<models.SiteSourceControl>): void;
    createOrUpdateSourceControl(resourceGroupName: string, name: string, siteSourceControl: models.SiteSourceControl, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteSourceControl>): void;


    /**
     * @summary Deletes the source control configuration of an app.
     *
     * Deletes the source control configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteSourceControlWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes the source control configuration of an app.
     *
     * Deletes the source control configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteSourceControl(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteSourceControl(resourceGroupName: string, name: string, callback: ServiceCallback<void>): void;
    deleteSourceControl(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Updates the source control configuration of an app.
     *
     * Updates the source control configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} siteSourceControl JSON representation of a SiteSourceControl
     * object. See example.
     *
     * @param {string} [siteSourceControl.repoUrl] Repository or source control
     * URL.
     *
     * @param {string} [siteSourceControl.branch] Name of branch to use for
     * deployment.
     *
     * @param {boolean} [siteSourceControl.isManualIntegration] <code>true</code>
     * to limit to manual integration; <code>false</code> to enable continuous
     * integration (which configures webhooks into online repos like GitHub).
     *
     * @param {boolean} [siteSourceControl.deploymentRollbackEnabled]
     * <code>true</code> to enable deployment rollback; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteSourceControl.isMercurial] <code>true</code> for a
     * Mercurial repository; <code>false</code> for a Git repository.
     *
     * @param {string} [siteSourceControl.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteSourceControl>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateSourceControlWithHttpOperationResponse(resourceGroupName: string, name: string, siteSourceControl: models.SiteSourceControl, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteSourceControl>>;

    /**
     * @summary Updates the source control configuration of an app.
     *
     * Updates the source control configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} siteSourceControl JSON representation of a SiteSourceControl
     * object. See example.
     *
     * @param {string} [siteSourceControl.repoUrl] Repository or source control
     * URL.
     *
     * @param {string} [siteSourceControl.branch] Name of branch to use for
     * deployment.
     *
     * @param {boolean} [siteSourceControl.isManualIntegration] <code>true</code>
     * to limit to manual integration; <code>false</code> to enable continuous
     * integration (which configures webhooks into online repos like GitHub).
     *
     * @param {boolean} [siteSourceControl.deploymentRollbackEnabled]
     * <code>true</code> to enable deployment rollback; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteSourceControl.isMercurial] <code>true</code> for a
     * Mercurial repository; <code>false</code> for a Git repository.
     *
     * @param {string} [siteSourceControl.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteSourceControl} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteSourceControl} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteSourceControl} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateSourceControl(resourceGroupName: string, name: string, siteSourceControl: models.SiteSourceControl, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteSourceControl>;
    updateSourceControl(resourceGroupName: string, name: string, siteSourceControl: models.SiteSourceControl, callback: ServiceCallback<models.SiteSourceControl>): void;
    updateSourceControl(resourceGroupName: string, name: string, siteSourceControl: models.SiteSourceControl, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteSourceControl>): void;


    /**
     * @summary Starts an app (or deployment slot, if specified).
     *
     * Starts an app (or deployment slot, if specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    startWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Starts an app (or deployment slot, if specified).
     *
     * Starts an app (or deployment slot, if specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    start(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    start(resourceGroupName: string, name: string, callback: ServiceCallback<void>): void;
    start(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Start capturing network packets for the site.
     *
     * Start capturing network packets for the site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.durationInSeconds] The duration to keep capturing
     * in seconds.
     *
     * @param {number} [options.maxFrameLength] The maximum frame length in bytes
     * (Optional).
     *
     * @param {string} [options.sasUrl] The Blob URL to store capture file.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    startNetworkTraceWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { durationInSeconds? : number, maxFrameLength? : number, sasUrl? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkTrace[]>>;

    /**
     * @summary Start capturing network packets for the site.
     *
     * Start capturing network packets for the site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.durationInSeconds] The duration to keep capturing
     * in seconds.
     *
     * @param {number} [options.maxFrameLength] The maximum frame length in bytes
     * (Optional).
     *
     * @param {string} [options.sasUrl] The Blob URL to store capture file.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    startNetworkTrace(resourceGroupName: string, name: string, options?: { durationInSeconds? : number, maxFrameLength? : number, sasUrl? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkTrace[]>;
    startNetworkTrace(resourceGroupName: string, name: string, callback: ServiceCallback<models.NetworkTrace[]>): void;
    startNetworkTrace(resourceGroupName: string, name: string, options: { durationInSeconds? : number, maxFrameLength? : number, sasUrl? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkTrace[]>): void;


    /**
     * @summary Stops an app (or deployment slot, if specified).
     *
     * Stops an app (or deployment slot, if specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    stopWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Stops an app (or deployment slot, if specified).
     *
     * Stops an app (or deployment slot, if specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    stop(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    stop(resourceGroupName: string, name: string, callback: ServiceCallback<void>): void;
    stop(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Stop ongoing capturing network packets for the site.
     *
     * Stop ongoing capturing network packets for the site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    stopNetworkTraceWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Stop ongoing capturing network packets for the site.
     *
     * Stop ongoing capturing network packets for the site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    stopNetworkTrace(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    stopNetworkTrace(resourceGroupName: string, name: string, callback: ServiceCallback<void>): void;
    stopNetworkTrace(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Sync web app repository.
     *
     * Sync web app repository.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    syncRepositoryWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Sync web app repository.
     *
     * Sync web app repository.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    syncRepository(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    syncRepository(resourceGroupName: string, name: string, callback: ServiceCallback<void>): void;
    syncRepository(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Syncs function trigger metadata to the scale controller
     *
     * Syncs function trigger metadata to the scale controller
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    syncFunctionTriggersWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Syncs function trigger metadata to the scale controller
     *
     * Syncs function trigger metadata to the scale controller
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    syncFunctionTriggers(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    syncFunctionTriggers(resourceGroupName: string, name: string, callback: ServiceCallback<void>): void;
    syncFunctionTriggers(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary List triggered web jobs for an app, or a deployment slot.
     *
     * List triggered web jobs for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TriggeredWebJobCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listTriggeredWebJobsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TriggeredWebJobCollection>>;

    /**
     * @summary List triggered web jobs for an app, or a deployment slot.
     *
     * List triggered web jobs for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TriggeredWebJobCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TriggeredWebJobCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TriggeredWebJobCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listTriggeredWebJobs(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TriggeredWebJobCollection>;
    listTriggeredWebJobs(resourceGroupName: string, name: string, callback: ServiceCallback<models.TriggeredWebJobCollection>): void;
    listTriggeredWebJobs(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TriggeredWebJobCollection>): void;


    /**
     * @summary Gets a triggered web job by its ID for an app, or a deployment
     * slot.
     *
     * Gets a triggered web job by its ID for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TriggeredWebJob>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getTriggeredWebJobWithHttpOperationResponse(resourceGroupName: string, name: string, webJobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TriggeredWebJob>>;

    /**
     * @summary Gets a triggered web job by its ID for an app, or a deployment
     * slot.
     *
     * Gets a triggered web job by its ID for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TriggeredWebJob} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TriggeredWebJob} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TriggeredWebJob} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getTriggeredWebJob(resourceGroupName: string, name: string, webJobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TriggeredWebJob>;
    getTriggeredWebJob(resourceGroupName: string, name: string, webJobName: string, callback: ServiceCallback<models.TriggeredWebJob>): void;
    getTriggeredWebJob(resourceGroupName: string, name: string, webJobName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TriggeredWebJob>): void;


    /**
     * @summary Delete a triggered web job by its ID for an app, or a deployment
     * slot.
     *
     * Delete a triggered web job by its ID for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteTriggeredWebJobWithHttpOperationResponse(resourceGroupName: string, name: string, webJobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete a triggered web job by its ID for an app, or a deployment
     * slot.
     *
     * Delete a triggered web job by its ID for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteTriggeredWebJob(resourceGroupName: string, name: string, webJobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteTriggeredWebJob(resourceGroupName: string, name: string, webJobName: string, callback: ServiceCallback<void>): void;
    deleteTriggeredWebJob(resourceGroupName: string, name: string, webJobName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary List a triggered web job's history for an app, or a deployment
     * slot.
     *
     * List a triggered web job's history for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TriggeredJobHistoryCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listTriggeredWebJobHistoryWithHttpOperationResponse(resourceGroupName: string, name: string, webJobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TriggeredJobHistoryCollection>>;

    /**
     * @summary List a triggered web job's history for an app, or a deployment
     * slot.
     *
     * List a triggered web job's history for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TriggeredJobHistoryCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TriggeredJobHistoryCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TriggeredJobHistoryCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listTriggeredWebJobHistory(resourceGroupName: string, name: string, webJobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TriggeredJobHistoryCollection>;
    listTriggeredWebJobHistory(resourceGroupName: string, name: string, webJobName: string, callback: ServiceCallback<models.TriggeredJobHistoryCollection>): void;
    listTriggeredWebJobHistory(resourceGroupName: string, name: string, webJobName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TriggeredJobHistoryCollection>): void;


    /**
     * @summary Gets a triggered web job's history by its ID for an app, , or a
     * deployment slot.
     *
     * Gets a triggered web job's history by its ID for an app, , or a deployment
     * slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {string} id History ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TriggeredJobHistory>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getTriggeredWebJobHistoryWithHttpOperationResponse(resourceGroupName: string, name: string, webJobName: string, id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TriggeredJobHistory>>;

    /**
     * @summary Gets a triggered web job's history by its ID for an app, , or a
     * deployment slot.
     *
     * Gets a triggered web job's history by its ID for an app, , or a deployment
     * slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {string} id History ID.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TriggeredJobHistory} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TriggeredJobHistory} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TriggeredJobHistory} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getTriggeredWebJobHistory(resourceGroupName: string, name: string, webJobName: string, id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TriggeredJobHistory>;
    getTriggeredWebJobHistory(resourceGroupName: string, name: string, webJobName: string, id: string, callback: ServiceCallback<models.TriggeredJobHistory>): void;
    getTriggeredWebJobHistory(resourceGroupName: string, name: string, webJobName: string, id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TriggeredJobHistory>): void;


    /**
     * @summary Run a triggered web job for an app, or a deployment slot.
     *
     * Run a triggered web job for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    runTriggeredWebJobWithHttpOperationResponse(resourceGroupName: string, name: string, webJobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Run a triggered web job for an app, or a deployment slot.
     *
     * Run a triggered web job for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of Web Job.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    runTriggeredWebJob(resourceGroupName: string, name: string, webJobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    runTriggeredWebJob(resourceGroupName: string, name: string, webJobName: string, callback: ServiceCallback<void>): void;
    runTriggeredWebJob(resourceGroupName: string, name: string, webJobName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Gets the quota usage information of an app (or deployment slot, if
     * specified).
     *
     * Gets the quota usage information of an app (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] Return only information specified in the
     * filter (using OData syntax). For example: $filter=(name.value eq 'Metric1'
     * or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and
     * endTime eq 2014-12-31T23:59:59Z and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CsmUsageQuotaCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listUsagesWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CsmUsageQuotaCollection>>;

    /**
     * @summary Gets the quota usage information of an app (or deployment slot, if
     * specified).
     *
     * Gets the quota usage information of an app (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] Return only information specified in the
     * filter (using OData syntax). For example: $filter=(name.value eq 'Metric1'
     * or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and
     * endTime eq 2014-12-31T23:59:59Z and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CsmUsageQuotaCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CsmUsageQuotaCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CsmUsageQuotaCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listUsages(resourceGroupName: string, name: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.CsmUsageQuotaCollection>;
    listUsages(resourceGroupName: string, name: string, callback: ServiceCallback<models.CsmUsageQuotaCollection>): void;
    listUsages(resourceGroupName: string, name: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CsmUsageQuotaCollection>): void;


    /**
     * @summary Gets the virtual networks the app (or deployment slot) is connected
     * to.
     *
     * Gets the virtual networks the app (or deployment slot) is connected to.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listVnetConnectionsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VnetInfo[]>>;

    /**
     * @summary Gets the virtual networks the app (or deployment slot) is connected
     * to.
     *
     * Gets the virtual networks the app (or deployment slot) is connected to.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listVnetConnections(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VnetInfo[]>;
    listVnetConnections(resourceGroupName: string, name: string, callback: ServiceCallback<models.VnetInfo[]>): void;
    listVnetConnections(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetInfo[]>): void;


    /**
     * @summary Gets a virtual network the app (or deployment slot) is connected to
     * by name.
     *
     * Gets a virtual network the app (or deployment slot) is connected to by name.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} vnetName Name of the virtual network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VnetInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getVnetConnectionWithHttpOperationResponse(resourceGroupName: string, name: string, vnetName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VnetInfo>>;

    /**
     * @summary Gets a virtual network the app (or deployment slot) is connected to
     * by name.
     *
     * Gets a virtual network the app (or deployment slot) is connected to by name.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} vnetName Name of the virtual network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VnetInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VnetInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VnetInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getVnetConnection(resourceGroupName: string, name: string, vnetName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VnetInfo>;
    getVnetConnection(resourceGroupName: string, name: string, vnetName: string, callback: ServiceCallback<models.VnetInfo>): void;
    getVnetConnection(resourceGroupName: string, name: string, vnetName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetInfo>): void;


    /**
     * @summary Adds a Virtual Network connection to an app or slot (PUT) or
     * updates the connection properties (PATCH).
     *
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the
     * connection properties (PATCH).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} vnetName Name of an existing Virtual Network.
     *
     * @param {object} connectionEnvelope Properties of the Virtual Network
     * connection. See example.
     *
     * @param {string} [connectionEnvelope.vnetResourceId] The Virtual Network's
     * resource ID.
     *
     * @param {buffer} [connectionEnvelope.certBlob] A certificate file (.cer) blob
     * containing the public key of the private key used to authenticate a
     * Point-To-Site VPN connection.
     *
     * @param {string} [connectionEnvelope.dnsServers] DNS servers to be used by
     * this Virtual Network. This should be a comma-separated list of IP addresses.
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VnetInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateVnetConnectionWithHttpOperationResponse(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: models.VnetInfo, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VnetInfo>>;

    /**
     * @summary Adds a Virtual Network connection to an app or slot (PUT) or
     * updates the connection properties (PATCH).
     *
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the
     * connection properties (PATCH).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} vnetName Name of an existing Virtual Network.
     *
     * @param {object} connectionEnvelope Properties of the Virtual Network
     * connection. See example.
     *
     * @param {string} [connectionEnvelope.vnetResourceId] The Virtual Network's
     * resource ID.
     *
     * @param {buffer} [connectionEnvelope.certBlob] A certificate file (.cer) blob
     * containing the public key of the private key used to authenticate a
     * Point-To-Site VPN connection.
     *
     * @param {string} [connectionEnvelope.dnsServers] DNS servers to be used by
     * this Virtual Network. This should be a comma-separated list of IP addresses.
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VnetInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VnetInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VnetInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateVnetConnection(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: models.VnetInfo, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VnetInfo>;
    createOrUpdateVnetConnection(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: models.VnetInfo, callback: ServiceCallback<models.VnetInfo>): void;
    createOrUpdateVnetConnection(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: models.VnetInfo, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetInfo>): void;


    /**
     * @summary Deletes a connection from an app (or deployment slot to a named
     * virtual network.
     *
     * Deletes a connection from an app (or deployment slot to a named virtual
     * network.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} vnetName Name of the virtual network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteVnetConnectionWithHttpOperationResponse(resourceGroupName: string, name: string, vnetName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Deletes a connection from an app (or deployment slot to a named
     * virtual network.
     *
     * Deletes a connection from an app (or deployment slot to a named virtual
     * network.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} vnetName Name of the virtual network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteVnetConnection(resourceGroupName: string, name: string, vnetName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteVnetConnection(resourceGroupName: string, name: string, vnetName: string, callback: ServiceCallback<void>): void;
    deleteVnetConnection(resourceGroupName: string, name: string, vnetName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Adds a Virtual Network connection to an app or slot (PUT) or
     * updates the connection properties (PATCH).
     *
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the
     * connection properties (PATCH).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} vnetName Name of an existing Virtual Network.
     *
     * @param {object} connectionEnvelope Properties of the Virtual Network
     * connection. See example.
     *
     * @param {string} [connectionEnvelope.vnetResourceId] The Virtual Network's
     * resource ID.
     *
     * @param {buffer} [connectionEnvelope.certBlob] A certificate file (.cer) blob
     * containing the public key of the private key used to authenticate a
     * Point-To-Site VPN connection.
     *
     * @param {string} [connectionEnvelope.dnsServers] DNS servers to be used by
     * this Virtual Network. This should be a comma-separated list of IP addresses.
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VnetInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateVnetConnectionWithHttpOperationResponse(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: models.VnetInfo, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VnetInfo>>;

    /**
     * @summary Adds a Virtual Network connection to an app or slot (PUT) or
     * updates the connection properties (PATCH).
     *
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the
     * connection properties (PATCH).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} vnetName Name of an existing Virtual Network.
     *
     * @param {object} connectionEnvelope Properties of the Virtual Network
     * connection. See example.
     *
     * @param {string} [connectionEnvelope.vnetResourceId] The Virtual Network's
     * resource ID.
     *
     * @param {buffer} [connectionEnvelope.certBlob] A certificate file (.cer) blob
     * containing the public key of the private key used to authenticate a
     * Point-To-Site VPN connection.
     *
     * @param {string} [connectionEnvelope.dnsServers] DNS servers to be used by
     * this Virtual Network. This should be a comma-separated list of IP addresses.
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VnetInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VnetInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VnetInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateVnetConnection(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: models.VnetInfo, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VnetInfo>;
    updateVnetConnection(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: models.VnetInfo, callback: ServiceCallback<models.VnetInfo>): void;
    updateVnetConnection(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: models.VnetInfo, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetInfo>): void;


    /**
     * @summary Gets an app's Virtual Network gateway.
     *
     * Gets an app's Virtual Network gateway.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} vnetName Name of the Virtual Network.
     *
     * @param {string} gatewayName Name of the gateway. Currently, the only
     * supported string is "primary".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VnetGateway>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getVnetConnectionGatewayWithHttpOperationResponse(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VnetGateway>>;

    /**
     * @summary Gets an app's Virtual Network gateway.
     *
     * Gets an app's Virtual Network gateway.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} vnetName Name of the Virtual Network.
     *
     * @param {string} gatewayName Name of the gateway. Currently, the only
     * supported string is "primary".
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VnetGateway} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VnetGateway} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VnetGateway} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getVnetConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VnetGateway>;
    getVnetConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, callback: ServiceCallback<models.VnetGateway>): void;
    getVnetConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetGateway>): void;


    /**
     * @summary Adds a gateway to a connected Virtual Network (PUT) or updates it
     * (PATCH).
     *
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} vnetName Name of the Virtual Network.
     *
     * @param {string} gatewayName Name of the gateway. Currently, the only
     * supported string is "primary".
     *
     * @param {object} connectionEnvelope The properties to update this gateway
     * with.
     *
     * @param {string} [connectionEnvelope.vnetName] The Virtual Network name.
     *
     * @param {string} connectionEnvelope.vpnPackageUri The URI where the VPN
     * package can be downloaded.
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VnetGateway>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateVnetConnectionGatewayWithHttpOperationResponse(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: models.VnetGateway, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VnetGateway>>;

    /**
     * @summary Adds a gateway to a connected Virtual Network (PUT) or updates it
     * (PATCH).
     *
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} vnetName Name of the Virtual Network.
     *
     * @param {string} gatewayName Name of the gateway. Currently, the only
     * supported string is "primary".
     *
     * @param {object} connectionEnvelope The properties to update this gateway
     * with.
     *
     * @param {string} [connectionEnvelope.vnetName] The Virtual Network name.
     *
     * @param {string} connectionEnvelope.vpnPackageUri The URI where the VPN
     * package can be downloaded.
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VnetGateway} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VnetGateway} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VnetGateway} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateVnetConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: models.VnetGateway, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VnetGateway>;
    createOrUpdateVnetConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: models.VnetGateway, callback: ServiceCallback<models.VnetGateway>): void;
    createOrUpdateVnetConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: models.VnetGateway, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetGateway>): void;


    /**
     * @summary Adds a gateway to a connected Virtual Network (PUT) or updates it
     * (PATCH).
     *
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} vnetName Name of the Virtual Network.
     *
     * @param {string} gatewayName Name of the gateway. Currently, the only
     * supported string is "primary".
     *
     * @param {object} connectionEnvelope The properties to update this gateway
     * with.
     *
     * @param {string} [connectionEnvelope.vnetName] The Virtual Network name.
     *
     * @param {string} connectionEnvelope.vpnPackageUri The URI where the VPN
     * package can be downloaded.
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VnetGateway>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateVnetConnectionGatewayWithHttpOperationResponse(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: models.VnetGateway, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VnetGateway>>;

    /**
     * @summary Adds a gateway to a connected Virtual Network (PUT) or updates it
     * (PATCH).
     *
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} vnetName Name of the Virtual Network.
     *
     * @param {string} gatewayName Name of the gateway. Currently, the only
     * supported string is "primary".
     *
     * @param {object} connectionEnvelope The properties to update this gateway
     * with.
     *
     * @param {string} [connectionEnvelope.vnetName] The Virtual Network name.
     *
     * @param {string} connectionEnvelope.vpnPackageUri The URI where the VPN
     * package can be downloaded.
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VnetGateway} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VnetGateway} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VnetGateway} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateVnetConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: models.VnetGateway, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VnetGateway>;
    updateVnetConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: models.VnetGateway, callback: ServiceCallback<models.VnetGateway>): void;
    updateVnetConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: models.VnetGateway, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetGateway>): void;


    /**
     * @summary List webjobs for an app, or a deployment slot.
     *
     * List webjobs for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WebJobCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWebJobsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WebJobCollection>>;

    /**
     * @summary List webjobs for an app, or a deployment slot.
     *
     * List webjobs for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WebJobCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WebJobCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WebJobCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listWebJobs(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WebJobCollection>;
    listWebJobs(resourceGroupName: string, name: string, callback: ServiceCallback<models.WebJobCollection>): void;
    listWebJobs(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WebJobCollection>): void;


    /**
     * @summary Get webjob information for an app, or a deployment slot.
     *
     * Get webjob information for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of the web job.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WebJob>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWebJobWithHttpOperationResponse(resourceGroupName: string, name: string, webJobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WebJob>>;

    /**
     * @summary Get webjob information for an app, or a deployment slot.
     *
     * Get webjob information for an app, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} webJobName Name of the web job.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WebJob} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WebJob} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WebJob} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getWebJob(resourceGroupName: string, name: string, webJobName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WebJob>;
    getWebJob(resourceGroupName: string, name: string, webJobName: string, callback: ServiceCallback<models.WebJob>): void;
    getWebJob(resourceGroupName: string, name: string, webJobName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WebJob>): void;


    /**
     * @summary Creates a new web, mobile, or API app in an existing resource
     * group, or updates an existing app.
     *
     * Creates a new web, mobile, or API app in an existing resource group, or
     * updates an existing app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Unique name of the app to create or update. To create
     * or update a deployment slot, use the {slot} parameter.
     *
     * @param {object} siteEnvelope A JSON representation of the app properties.
     * See example.
     *
     * @param {boolean} [siteEnvelope.enabled] <code>true</code> if the app is
     * enabled; otherwise, <code>false</code>. Setting this value to false disables
     * the app (takes the app offline).
     *
     * @param {array} [siteEnvelope.hostNameSslStates] Hostname SSL states are used
     * to manage the SSL bindings for app's hostnames.
     *
     * @param {string} [siteEnvelope.serverFarmId] Resource ID of the associated
     * App Service plan, formatted as:
     * "/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}".
     *
     * @param {boolean} [siteEnvelope.reserved] <code>true</code> if reserved;
     * otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.isXenon] Obsolete: Hyper-V sandbox.
     *
     * @param {boolean} [siteEnvelope.hyperV] Hyper-V sandbox.
     *
     * @param {object} [siteEnvelope.siteConfig] Configuration of the app.
     *
     * @param {number} [siteEnvelope.siteConfig.numberOfWorkers] Number of workers.
     *
     * @param {array} [siteEnvelope.siteConfig.defaultDocuments] Default documents.
     *
     * @param {string} [siteEnvelope.siteConfig.netFrameworkVersion] .NET Framework
     * version.
     *
     * @param {string} [siteEnvelope.siteConfig.phpVersion] Version of PHP.
     *
     * @param {string} [siteEnvelope.siteConfig.pythonVersion] Version of Python.
     *
     * @param {string} [siteEnvelope.siteConfig.nodeVersion] Version of Node.js.
     *
     * @param {string} [siteEnvelope.siteConfig.linuxFxVersion] Linux App Framework
     * and version
     *
     * @param {string} [siteEnvelope.siteConfig.windowsFxVersion] Xenon App
     * Framework and version
     *
     * @param {boolean} [siteEnvelope.siteConfig.requestTracingEnabled]
     * <code>true</code> if request tracing is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {date} [siteEnvelope.siteConfig.requestTracingExpirationTime] Request
     * tracing expiration time.
     *
     * @param {boolean} [siteEnvelope.siteConfig.remoteDebuggingEnabled]
     * <code>true</code> if remote debugging is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.remoteDebuggingVersion] Remote
     * debugging version.
     *
     * @param {boolean} [siteEnvelope.siteConfig.httpLoggingEnabled]
     * <code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.
     *
     * @param {number} [siteEnvelope.siteConfig.logsDirectorySizeLimit] HTTP logs
     * directory size limit.
     *
     * @param {boolean} [siteEnvelope.siteConfig.detailedErrorLoggingEnabled]
     * <code>true</code> if detailed error logging is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.publishingUsername] Publishing user
     * name.
     *
     * @param {array} [siteEnvelope.siteConfig.appSettings] Application settings.
     *
     * @param {object} [siteEnvelope.siteConfig.azureStorageAccounts] User-provided
     * Azure storage accounts.
     *
     * @param {array} [siteEnvelope.siteConfig.connectionStrings] Connection
     * strings.
     *
     * @param {array} [siteEnvelope.siteConfig.handlerMappings] Handler mappings.
     *
     * @param {string} [siteEnvelope.siteConfig.documentRoot] Document root.
     *
     * @param {string} [siteEnvelope.siteConfig.scmType] SCM type. Possible values
     * include: 'None', 'Dropbox', 'Tfs', 'LocalGit', 'GitHub', 'CodePlexGit',
     * 'CodePlexHg', 'BitbucketGit', 'BitbucketHg', 'ExternalGit', 'ExternalHg',
     * 'OneDrive', 'VSO'
     *
     * @param {boolean} [siteEnvelope.siteConfig.use32BitWorkerProcess]
     * <code>true</code> to use 32-bit worker process; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.siteConfig.webSocketsEnabled]
     * <code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.siteConfig.alwaysOn] <code>true</code> if
     * Always On is enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.javaVersion] Java version.
     *
     * @param {string} [siteEnvelope.siteConfig.javaContainer] Java container.
     *
     * @param {string} [siteEnvelope.siteConfig.javaContainerVersion] Java
     * container version.
     *
     * @param {string} [siteEnvelope.siteConfig.appCommandLine] App command line to
     * launch.
     *
     * @param {string} [siteEnvelope.siteConfig.managedPipelineMode] Managed
     * pipeline mode. Possible values include: 'Integrated', 'Classic'
     *
     * @param {array} [siteEnvelope.siteConfig.virtualApplications] Virtual
     * applications.
     *
     * @param {string} [siteEnvelope.siteConfig.loadBalancing] Site load balancing.
     * Possible values include: 'WeightedRoundRobin', 'LeastRequests',
     * 'LeastResponseTime', 'WeightedTotalTraffic', 'RequestHash'
     *
     * @param {object} [siteEnvelope.siteConfig.experiments] This is work around
     * for polymophic types.
     *
     * @param {array} [siteEnvelope.siteConfig.experiments.rampUpRules] List of
     * ramp-up rules.
     *
     * @param {object} [siteEnvelope.siteConfig.limits] Site limits.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxPercentageCpu] Maximum
     * allowed CPU usage percentage.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxMemoryInMb] Maximum
     * allowed memory usage in MB.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxDiskSizeInMb] Maximum
     * allowed disk size usage in MB.
     *
     * @param {boolean} [siteEnvelope.siteConfig.autoHealEnabled] <code>true</code>
     * if Auto Heal is enabled; otherwise, <code>false</code>.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules] Auto Heal rules.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.triggers] Conditions
     * that describe when to execute the auto-heal actions.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.triggers.requests] A
     * rule based on total requests.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.requests.count] Request
     * Count.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.requests.timeInterval] Time
     * interval.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.privateBytesInKB] A rule
     * based on private bytes.
     *
     * @param {array} [siteEnvelope.siteConfig.autoHealRules.triggers.statusCodes]
     * A rule based on status codes.
     *
     * @param {object}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests] A rule based
     * on request execution time.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.timeTaken] Time
     * taken.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.count] Request
     * Count.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.timeInterval]
     * Time interval.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.actions] Actions to
     * be executed when a rule is triggered.
     *
     * @param {string} [siteEnvelope.siteConfig.autoHealRules.actions.actionType]
     * Predefined action to be taken. Possible values include: 'Recycle',
     * 'LogEvent', 'CustomAction'
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.actions.customAction]
     * Custom action to be taken.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction.exe] Executable
     * to be run.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction.parameters]
     * Parameters for the executable.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.minProcessExecutionTime]
     * Minimum time the process must execute
     * before taking the action
     *
     * @param {string} [siteEnvelope.siteConfig.tracingOptions] Tracing options.
     *
     * @param {string} [siteEnvelope.siteConfig.vnetName] Virtual Network name.
     *
     * @param {object} [siteEnvelope.siteConfig.cors] Cross-Origin Resource Sharing
     * (CORS) settings.
     *
     * @param {array} [siteEnvelope.siteConfig.cors.allowedOrigins] Gets or sets
     * the list of origins that should be allowed to make cross-origin
     * calls (for example: http://example.com:12345). Use "*" to allow all.
     *
     * @param {object} [siteEnvelope.siteConfig.push] Push endpoint settings.
     *
     * @param {boolean} siteEnvelope.siteConfig.push.isPushEnabled Gets or sets a
     * flag indicating whether the Push endpoint is enabled.
     *
     * @param {string} [siteEnvelope.siteConfig.push.tagWhitelistJson] Gets or sets
     * a JSON string containing a list of tags that are whitelisted for use by the
     * push registration endpoint.
     *
     * @param {string} [siteEnvelope.siteConfig.push.tagsRequiringAuth] Gets or
     * sets a JSON string containing a list of tags that require user
     * authentication to be used in the push registration endpoint.
     * Tags can consist of alphanumeric characters and the following:
     * '_', '@', '#', '.', ':', '-'.
     * Validation should be performed at the PushRequestHandler.
     *
     * @param {string} [siteEnvelope.siteConfig.push.dynamicTagsJson] Gets or sets
     * a JSON string containing a list of dynamic tags that will be evaluated from
     * user claims in the push registration endpoint.
     *
     * @param {string} [siteEnvelope.siteConfig.push.kind] Kind of resource.
     *
     * @param {object} [siteEnvelope.siteConfig.apiDefinition] Information about
     * the formal API definition for the app.
     *
     * @param {string} [siteEnvelope.siteConfig.apiDefinition.url] The URL of the
     * API definition.
     *
     * @param {string} [siteEnvelope.siteConfig.autoSwapSlotName] Auto-swap slot
     * name.
     *
     * @param {boolean} [siteEnvelope.siteConfig.localMySqlEnabled]
     * <code>true</code> to enable local MySQL; otherwise, <code>false</code>.
     *
     * @param {number} [siteEnvelope.siteConfig.managedServiceIdentityId] Managed
     * Service Identity Id
     *
     * @param {number} [siteEnvelope.siteConfig.xManagedServiceIdentityId] Explicit
     * Managed Service Identity Id
     *
     * @param {array} [siteEnvelope.siteConfig.ipSecurityRestrictions] IP security
     * restrictions.
     *
     * @param {boolean} [siteEnvelope.siteConfig.http20Enabled] Http20Enabled:
     * configures a web site to allow clients to connect over http2.0
     *
     * @param {string} [siteEnvelope.siteConfig.minTlsVersion] MinTlsVersion:
     * configures the minimum version of TLS required for SSL requests. Possible
     * values include: '1.0', '1.1', '1.2'
     *
     * @param {string} [siteEnvelope.siteConfig.ftpsState] State of FTP / FTPS
     * service. Possible values include: 'AllAllowed', 'FtpsOnly', 'Disabled'
     *
     * @param {number} [siteEnvelope.siteConfig.reservedInstanceCount] Number of
     * reserved instances.
     * This setting only applies to the Consumption Plan
     *
     * @param {boolean} [siteEnvelope.scmSiteAlsoStopped] <code>true</code> to stop
     * SCM (KUDU) site when the app is stopped; otherwise, <code>false</code>. The
     * default is <code>false</code>.
     *
     * @param {object} [siteEnvelope.hostingEnvironmentProfile] App Service
     * Environment to use for the app.
     *
     * @param {string} [siteEnvelope.hostingEnvironmentProfile.id] Resource ID of
     * the App Service Environment.
     *
     * @param {boolean} [siteEnvelope.clientAffinityEnabled] <code>true</code> to
     * enable client affinity; <code>false</code> to stop sending session affinity
     * cookies, which route client requests in the same session to the same
     * instance. Default is <code>true</code>.
     *
     * @param {boolean} [siteEnvelope.clientCertEnabled] <code>true</code> to
     * enable client certificate authentication (TLS mutual authentication);
     * otherwise, <code>false</code>. Default is <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.hostNamesDisabled] <code>true</code> to
     * disable the public hostnames of the app; otherwise, <code>false</code>.
     * If <code>true</code>, the app is only accessible via API management process.
     *
     * @param {number} [siteEnvelope.containerSize] Size of the function container.
     *
     * @param {number} [siteEnvelope.dailyMemoryTimeQuota] Maximum allowed daily
     * memory-time quota (applicable on dynamic apps only).
     *
     * @param {object} [siteEnvelope.cloningInfo] If specified during app creation,
     * the app is cloned from a source app.
     *
     * @param {uuid} [siteEnvelope.cloningInfo.correlationId] Correlation ID of
     * cloning operation. This ID ties multiple cloning operations
     * together to use the same snapshot.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.overwrite] <code>true</code> to
     * overwrite destination app; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.cloneCustomHostNames]
     * <code>true</code> to clone custom hostnames from source app; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.cloneSourceControl]
     * <code>true</code> to clone source control from source app; otherwise,
     * <code>false</code>.
     *
     * @param {string} siteEnvelope.cloningInfo.sourceWebAppId ARM resource ID of
     * the source app. App resource ID is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}
     * for production slots and
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName}
     * for other slots.
     *
     * @param {string} [siteEnvelope.cloningInfo.hostingEnvironment] App Service
     * Environment.
     *
     * @param {object} [siteEnvelope.cloningInfo.appSettingsOverrides] Application
     * setting overrides for cloned app. If specified, these settings override the
     * settings cloned
     * from source app. Otherwise, application settings from source app are
     * retained.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.configureLoadBalancing]
     * <code>true</code> to configure load balancing for source and destination
     * app.
     *
     * @param {string} [siteEnvelope.cloningInfo.trafficManagerProfileId] ARM
     * resource ID of the Traffic Manager profile to use, if it exists. Traffic
     * Manager resource ID is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}.
     *
     * @param {string} [siteEnvelope.cloningInfo.trafficManagerProfileName] Name of
     * Traffic Manager profile to create. This is only needed if Traffic Manager
     * profile does not already exist.
     *
     * @param {boolean} [siteEnvelope.httpsOnly] HttpsOnly: configures a web site
     * to accept only https requests. Issues redirect for
     * http requests
     *
     * @param {object} [siteEnvelope.identity]
     *
     * @param {string} [siteEnvelope.identity.type] Type of managed service
     * identity. Possible values include: 'SystemAssigned', 'UserAssigned'
     *
     * @param {array} [siteEnvelope.identity.identityIds] Array of UserAssigned
     * managed service identities.
     *
     * @param {string} [siteEnvelope.kind] Kind of resource.
     *
     * @param {string} siteEnvelope.location Resource Location.
     *
     * @param {object} [siteEnvelope.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Site>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, name: string, siteEnvelope: models.Site, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Site>>;

    /**
     * @summary Creates a new web, mobile, or API app in an existing resource
     * group, or updates an existing app.
     *
     * Creates a new web, mobile, or API app in an existing resource group, or
     * updates an existing app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Unique name of the app to create or update. To create
     * or update a deployment slot, use the {slot} parameter.
     *
     * @param {object} siteEnvelope A JSON representation of the app properties.
     * See example.
     *
     * @param {boolean} [siteEnvelope.enabled] <code>true</code> if the app is
     * enabled; otherwise, <code>false</code>. Setting this value to false disables
     * the app (takes the app offline).
     *
     * @param {array} [siteEnvelope.hostNameSslStates] Hostname SSL states are used
     * to manage the SSL bindings for app's hostnames.
     *
     * @param {string} [siteEnvelope.serverFarmId] Resource ID of the associated
     * App Service plan, formatted as:
     * "/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}".
     *
     * @param {boolean} [siteEnvelope.reserved] <code>true</code> if reserved;
     * otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.isXenon] Obsolete: Hyper-V sandbox.
     *
     * @param {boolean} [siteEnvelope.hyperV] Hyper-V sandbox.
     *
     * @param {object} [siteEnvelope.siteConfig] Configuration of the app.
     *
     * @param {number} [siteEnvelope.siteConfig.numberOfWorkers] Number of workers.
     *
     * @param {array} [siteEnvelope.siteConfig.defaultDocuments] Default documents.
     *
     * @param {string} [siteEnvelope.siteConfig.netFrameworkVersion] .NET Framework
     * version.
     *
     * @param {string} [siteEnvelope.siteConfig.phpVersion] Version of PHP.
     *
     * @param {string} [siteEnvelope.siteConfig.pythonVersion] Version of Python.
     *
     * @param {string} [siteEnvelope.siteConfig.nodeVersion] Version of Node.js.
     *
     * @param {string} [siteEnvelope.siteConfig.linuxFxVersion] Linux App Framework
     * and version
     *
     * @param {string} [siteEnvelope.siteConfig.windowsFxVersion] Xenon App
     * Framework and version
     *
     * @param {boolean} [siteEnvelope.siteConfig.requestTracingEnabled]
     * <code>true</code> if request tracing is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {date} [siteEnvelope.siteConfig.requestTracingExpirationTime] Request
     * tracing expiration time.
     *
     * @param {boolean} [siteEnvelope.siteConfig.remoteDebuggingEnabled]
     * <code>true</code> if remote debugging is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.remoteDebuggingVersion] Remote
     * debugging version.
     *
     * @param {boolean} [siteEnvelope.siteConfig.httpLoggingEnabled]
     * <code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.
     *
     * @param {number} [siteEnvelope.siteConfig.logsDirectorySizeLimit] HTTP logs
     * directory size limit.
     *
     * @param {boolean} [siteEnvelope.siteConfig.detailedErrorLoggingEnabled]
     * <code>true</code> if detailed error logging is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.publishingUsername] Publishing user
     * name.
     *
     * @param {array} [siteEnvelope.siteConfig.appSettings] Application settings.
     *
     * @param {object} [siteEnvelope.siteConfig.azureStorageAccounts] User-provided
     * Azure storage accounts.
     *
     * @param {array} [siteEnvelope.siteConfig.connectionStrings] Connection
     * strings.
     *
     * @param {array} [siteEnvelope.siteConfig.handlerMappings] Handler mappings.
     *
     * @param {string} [siteEnvelope.siteConfig.documentRoot] Document root.
     *
     * @param {string} [siteEnvelope.siteConfig.scmType] SCM type. Possible values
     * include: 'None', 'Dropbox', 'Tfs', 'LocalGit', 'GitHub', 'CodePlexGit',
     * 'CodePlexHg', 'BitbucketGit', 'BitbucketHg', 'ExternalGit', 'ExternalHg',
     * 'OneDrive', 'VSO'
     *
     * @param {boolean} [siteEnvelope.siteConfig.use32BitWorkerProcess]
     * <code>true</code> to use 32-bit worker process; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.siteConfig.webSocketsEnabled]
     * <code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.siteConfig.alwaysOn] <code>true</code> if
     * Always On is enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.javaVersion] Java version.
     *
     * @param {string} [siteEnvelope.siteConfig.javaContainer] Java container.
     *
     * @param {string} [siteEnvelope.siteConfig.javaContainerVersion] Java
     * container version.
     *
     * @param {string} [siteEnvelope.siteConfig.appCommandLine] App command line to
     * launch.
     *
     * @param {string} [siteEnvelope.siteConfig.managedPipelineMode] Managed
     * pipeline mode. Possible values include: 'Integrated', 'Classic'
     *
     * @param {array} [siteEnvelope.siteConfig.virtualApplications] Virtual
     * applications.
     *
     * @param {string} [siteEnvelope.siteConfig.loadBalancing] Site load balancing.
     * Possible values include: 'WeightedRoundRobin', 'LeastRequests',
     * 'LeastResponseTime', 'WeightedTotalTraffic', 'RequestHash'
     *
     * @param {object} [siteEnvelope.siteConfig.experiments] This is work around
     * for polymophic types.
     *
     * @param {array} [siteEnvelope.siteConfig.experiments.rampUpRules] List of
     * ramp-up rules.
     *
     * @param {object} [siteEnvelope.siteConfig.limits] Site limits.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxPercentageCpu] Maximum
     * allowed CPU usage percentage.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxMemoryInMb] Maximum
     * allowed memory usage in MB.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxDiskSizeInMb] Maximum
     * allowed disk size usage in MB.
     *
     * @param {boolean} [siteEnvelope.siteConfig.autoHealEnabled] <code>true</code>
     * if Auto Heal is enabled; otherwise, <code>false</code>.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules] Auto Heal rules.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.triggers] Conditions
     * that describe when to execute the auto-heal actions.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.triggers.requests] A
     * rule based on total requests.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.requests.count] Request
     * Count.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.requests.timeInterval] Time
     * interval.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.privateBytesInKB] A rule
     * based on private bytes.
     *
     * @param {array} [siteEnvelope.siteConfig.autoHealRules.triggers.statusCodes]
     * A rule based on status codes.
     *
     * @param {object}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests] A rule based
     * on request execution time.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.timeTaken] Time
     * taken.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.count] Request
     * Count.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.timeInterval]
     * Time interval.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.actions] Actions to
     * be executed when a rule is triggered.
     *
     * @param {string} [siteEnvelope.siteConfig.autoHealRules.actions.actionType]
     * Predefined action to be taken. Possible values include: 'Recycle',
     * 'LogEvent', 'CustomAction'
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.actions.customAction]
     * Custom action to be taken.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction.exe] Executable
     * to be run.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction.parameters]
     * Parameters for the executable.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.minProcessExecutionTime]
     * Minimum time the process must execute
     * before taking the action
     *
     * @param {string} [siteEnvelope.siteConfig.tracingOptions] Tracing options.
     *
     * @param {string} [siteEnvelope.siteConfig.vnetName] Virtual Network name.
     *
     * @param {object} [siteEnvelope.siteConfig.cors] Cross-Origin Resource Sharing
     * (CORS) settings.
     *
     * @param {array} [siteEnvelope.siteConfig.cors.allowedOrigins] Gets or sets
     * the list of origins that should be allowed to make cross-origin
     * calls (for example: http://example.com:12345). Use "*" to allow all.
     *
     * @param {object} [siteEnvelope.siteConfig.push] Push endpoint settings.
     *
     * @param {boolean} siteEnvelope.siteConfig.push.isPushEnabled Gets or sets a
     * flag indicating whether the Push endpoint is enabled.
     *
     * @param {string} [siteEnvelope.siteConfig.push.tagWhitelistJson] Gets or sets
     * a JSON string containing a list of tags that are whitelisted for use by the
     * push registration endpoint.
     *
     * @param {string} [siteEnvelope.siteConfig.push.tagsRequiringAuth] Gets or
     * sets a JSON string containing a list of tags that require user
     * authentication to be used in the push registration endpoint.
     * Tags can consist of alphanumeric characters and the following:
     * '_', '@', '#', '.', ':', '-'.
     * Validation should be performed at the PushRequestHandler.
     *
     * @param {string} [siteEnvelope.siteConfig.push.dynamicTagsJson] Gets or sets
     * a JSON string containing a list of dynamic tags that will be evaluated from
     * user claims in the push registration endpoint.
     *
     * @param {string} [siteEnvelope.siteConfig.push.kind] Kind of resource.
     *
     * @param {object} [siteEnvelope.siteConfig.apiDefinition] Information about
     * the formal API definition for the app.
     *
     * @param {string} [siteEnvelope.siteConfig.apiDefinition.url] The URL of the
     * API definition.
     *
     * @param {string} [siteEnvelope.siteConfig.autoSwapSlotName] Auto-swap slot
     * name.
     *
     * @param {boolean} [siteEnvelope.siteConfig.localMySqlEnabled]
     * <code>true</code> to enable local MySQL; otherwise, <code>false</code>.
     *
     * @param {number} [siteEnvelope.siteConfig.managedServiceIdentityId] Managed
     * Service Identity Id
     *
     * @param {number} [siteEnvelope.siteConfig.xManagedServiceIdentityId] Explicit
     * Managed Service Identity Id
     *
     * @param {array} [siteEnvelope.siteConfig.ipSecurityRestrictions] IP security
     * restrictions.
     *
     * @param {boolean} [siteEnvelope.siteConfig.http20Enabled] Http20Enabled:
     * configures a web site to allow clients to connect over http2.0
     *
     * @param {string} [siteEnvelope.siteConfig.minTlsVersion] MinTlsVersion:
     * configures the minimum version of TLS required for SSL requests. Possible
     * values include: '1.0', '1.1', '1.2'
     *
     * @param {string} [siteEnvelope.siteConfig.ftpsState] State of FTP / FTPS
     * service. Possible values include: 'AllAllowed', 'FtpsOnly', 'Disabled'
     *
     * @param {number} [siteEnvelope.siteConfig.reservedInstanceCount] Number of
     * reserved instances.
     * This setting only applies to the Consumption Plan
     *
     * @param {boolean} [siteEnvelope.scmSiteAlsoStopped] <code>true</code> to stop
     * SCM (KUDU) site when the app is stopped; otherwise, <code>false</code>. The
     * default is <code>false</code>.
     *
     * @param {object} [siteEnvelope.hostingEnvironmentProfile] App Service
     * Environment to use for the app.
     *
     * @param {string} [siteEnvelope.hostingEnvironmentProfile.id] Resource ID of
     * the App Service Environment.
     *
     * @param {boolean} [siteEnvelope.clientAffinityEnabled] <code>true</code> to
     * enable client affinity; <code>false</code> to stop sending session affinity
     * cookies, which route client requests in the same session to the same
     * instance. Default is <code>true</code>.
     *
     * @param {boolean} [siteEnvelope.clientCertEnabled] <code>true</code> to
     * enable client certificate authentication (TLS mutual authentication);
     * otherwise, <code>false</code>. Default is <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.hostNamesDisabled] <code>true</code> to
     * disable the public hostnames of the app; otherwise, <code>false</code>.
     * If <code>true</code>, the app is only accessible via API management process.
     *
     * @param {number} [siteEnvelope.containerSize] Size of the function container.
     *
     * @param {number} [siteEnvelope.dailyMemoryTimeQuota] Maximum allowed daily
     * memory-time quota (applicable on dynamic apps only).
     *
     * @param {object} [siteEnvelope.cloningInfo] If specified during app creation,
     * the app is cloned from a source app.
     *
     * @param {uuid} [siteEnvelope.cloningInfo.correlationId] Correlation ID of
     * cloning operation. This ID ties multiple cloning operations
     * together to use the same snapshot.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.overwrite] <code>true</code> to
     * overwrite destination app; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.cloneCustomHostNames]
     * <code>true</code> to clone custom hostnames from source app; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.cloneSourceControl]
     * <code>true</code> to clone source control from source app; otherwise,
     * <code>false</code>.
     *
     * @param {string} siteEnvelope.cloningInfo.sourceWebAppId ARM resource ID of
     * the source app. App resource ID is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}
     * for production slots and
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName}
     * for other slots.
     *
     * @param {string} [siteEnvelope.cloningInfo.hostingEnvironment] App Service
     * Environment.
     *
     * @param {object} [siteEnvelope.cloningInfo.appSettingsOverrides] Application
     * setting overrides for cloned app. If specified, these settings override the
     * settings cloned
     * from source app. Otherwise, application settings from source app are
     * retained.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.configureLoadBalancing]
     * <code>true</code> to configure load balancing for source and destination
     * app.
     *
     * @param {string} [siteEnvelope.cloningInfo.trafficManagerProfileId] ARM
     * resource ID of the Traffic Manager profile to use, if it exists. Traffic
     * Manager resource ID is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}.
     *
     * @param {string} [siteEnvelope.cloningInfo.trafficManagerProfileName] Name of
     * Traffic Manager profile to create. This is only needed if Traffic Manager
     * profile does not already exist.
     *
     * @param {boolean} [siteEnvelope.httpsOnly] HttpsOnly: configures a web site
     * to accept only https requests. Issues redirect for
     * http requests
     *
     * @param {object} [siteEnvelope.identity]
     *
     * @param {string} [siteEnvelope.identity.type] Type of managed service
     * identity. Possible values include: 'SystemAssigned', 'UserAssigned'
     *
     * @param {array} [siteEnvelope.identity.identityIds] Array of UserAssigned
     * managed service identities.
     *
     * @param {string} [siteEnvelope.kind] Kind of resource.
     *
     * @param {string} siteEnvelope.location Resource Location.
     *
     * @param {object} [siteEnvelope.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Site} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Site} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Site} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, name: string, siteEnvelope: models.Site, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Site>;
    beginCreateOrUpdate(resourceGroupName: string, name: string, siteEnvelope: models.Site, callback: ServiceCallback<models.Site>): void;
    beginCreateOrUpdate(resourceGroupName: string, name: string, siteEnvelope: models.Site, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Site>): void;


    /**
     * @summary Restores a specific backup to another app (or deployment slot, if
     * specified).
     *
     * Restores a specific backup to another app (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} backupId ID of the backup.
     *
     * @param {object} request Information on restore request .
     *
     * @param {string} request.storageAccountUrl SAS URL to the container.
     *
     * @param {string} [request.blobName] Name of a blob which contains the backup.
     *
     * @param {boolean} request.overwrite <code>true</code> if the restore
     * operation can overwrite target app; otherwise, <code>false</code>.
     * <code>true</code> is needed if trying to restore over an existing app.
     *
     * @param {string} [request.siteName] Name of an app.
     *
     * @param {array} [request.databases] Collection of databases which should be
     * restored. This list has to match the list of databases included in the
     * backup.
     *
     * @param {boolean} [request.ignoreConflictingHostNames] Changes a logic when
     * restoring an app with custom domains. <code>true</code> to remove custom
     * domains automatically. If <code>false</code>, custom domains are added to
     * the app's object when it is being restored, but that might fail due to
     * conflicts during the operation.
     *
     * @param {boolean} [request.ignoreDatabases] Ignore the databases and only
     * restore the site content
     *
     * @param {string} [request.appServicePlan] Specify app service plan that will
     * own restored site.
     *
     * @param {string} [request.operationType] Operation type. Possible values
     * include: 'Default', 'Clone', 'Relocation', 'Snapshot', 'CloudFS'
     *
     * @param {boolean} [request.adjustConnectionStrings] <code>true</code> if
     * SiteConfig.ConnectionStrings should be set in new app; otherwise,
     * <code>false</code>.
     *
     * @param {string} [request.hostingEnvironment] App Service Environment name,
     * if needed (only when restoring an app to an App Service Environment).
     *
     * @param {string} [request.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginRestoreWithHttpOperationResponse(resourceGroupName: string, name: string, backupId: string, request: models.RestoreRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Restores a specific backup to another app (or deployment slot, if
     * specified).
     *
     * Restores a specific backup to another app (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} backupId ID of the backup.
     *
     * @param {object} request Information on restore request .
     *
     * @param {string} request.storageAccountUrl SAS URL to the container.
     *
     * @param {string} [request.blobName] Name of a blob which contains the backup.
     *
     * @param {boolean} request.overwrite <code>true</code> if the restore
     * operation can overwrite target app; otherwise, <code>false</code>.
     * <code>true</code> is needed if trying to restore over an existing app.
     *
     * @param {string} [request.siteName] Name of an app.
     *
     * @param {array} [request.databases] Collection of databases which should be
     * restored. This list has to match the list of databases included in the
     * backup.
     *
     * @param {boolean} [request.ignoreConflictingHostNames] Changes a logic when
     * restoring an app with custom domains. <code>true</code> to remove custom
     * domains automatically. If <code>false</code>, custom domains are added to
     * the app's object when it is being restored, but that might fail due to
     * conflicts during the operation.
     *
     * @param {boolean} [request.ignoreDatabases] Ignore the databases and only
     * restore the site content
     *
     * @param {string} [request.appServicePlan] Specify app service plan that will
     * own restored site.
     *
     * @param {string} [request.operationType] Operation type. Possible values
     * include: 'Default', 'Clone', 'Relocation', 'Snapshot', 'CloudFS'
     *
     * @param {boolean} [request.adjustConnectionStrings] <code>true</code> if
     * SiteConfig.ConnectionStrings should be set in new app; otherwise,
     * <code>false</code>.
     *
     * @param {string} [request.hostingEnvironment] App Service Environment name,
     * if needed (only when restoring an app to an App Service Environment).
     *
     * @param {string} [request.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginRestore(resourceGroupName: string, name: string, backupId: string, request: models.RestoreRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginRestore(resourceGroupName: string, name: string, backupId: string, request: models.RestoreRequest, callback: ServiceCallback<void>): void;
    beginRestore(resourceGroupName: string, name: string, backupId: string, request: models.RestoreRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Gets the Git/FTP publishing credentials of an app.
     *
     * Gets the Git/FTP publishing credentials of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<User>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginListPublishingCredentialsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.User>>;

    /**
     * @summary Gets the Git/FTP publishing credentials of an app.
     *
     * Gets the Git/FTP publishing credentials of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {User} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {User} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link User} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginListPublishingCredentials(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.User>;
    beginListPublishingCredentials(resourceGroupName: string, name: string, callback: ServiceCallback<models.User>): void;
    beginListPublishingCredentials(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.User>): void;


    /**
     * @summary Invoke the MSDeploy web app extension.
     *
     * Invoke the MSDeploy web app extension.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} mSDeploy Details of MSDeploy operation
     *
     * @param {string} [mSDeploy.packageUri] Package URI
     *
     * @param {string} [mSDeploy.connectionString] SQL Connection String
     *
     * @param {string} [mSDeploy.dbType] Database Type
     *
     * @param {string} [mSDeploy.setParametersXmlFileUri] URI of MSDeploy
     * Parameters file. Must not be set if SetParameters is used.
     *
     * @param {object} [mSDeploy.setParameters] MSDeploy Parameters. Must not be
     * set if SetParametersXmlFileUri is used.
     *
     * @param {boolean} [mSDeploy.skipAppData] Controls whether the MSDeploy
     * operation skips the App_Data directory.
     * If set to <code>true</code>, the existing App_Data directory on the
     * destination
     * will not be deleted, and any App_Data directory in the source will be
     * ignored.
     * Setting is <code>false</code> by default.
     *
     * @param {boolean} [mSDeploy.appOffline] Sets the AppOffline rule while the
     * MSDeploy operation executes.
     * Setting is <code>false</code> by default.
     *
     * @param {string} [mSDeploy.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MSDeployStatus>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateMSDeployOperationWithHttpOperationResponse(resourceGroupName: string, name: string, mSDeploy: models.MSDeploy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MSDeployStatus>>;

    /**
     * @summary Invoke the MSDeploy web app extension.
     *
     * Invoke the MSDeploy web app extension.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} mSDeploy Details of MSDeploy operation
     *
     * @param {string} [mSDeploy.packageUri] Package URI
     *
     * @param {string} [mSDeploy.connectionString] SQL Connection String
     *
     * @param {string} [mSDeploy.dbType] Database Type
     *
     * @param {string} [mSDeploy.setParametersXmlFileUri] URI of MSDeploy
     * Parameters file. Must not be set if SetParameters is used.
     *
     * @param {object} [mSDeploy.setParameters] MSDeploy Parameters. Must not be
     * set if SetParametersXmlFileUri is used.
     *
     * @param {boolean} [mSDeploy.skipAppData] Controls whether the MSDeploy
     * operation skips the App_Data directory.
     * If set to <code>true</code>, the existing App_Data directory on the
     * destination
     * will not be deleted, and any App_Data directory in the source will be
     * ignored.
     * Setting is <code>false</code> by default.
     *
     * @param {boolean} [mSDeploy.appOffline] Sets the AppOffline rule while the
     * MSDeploy operation executes.
     * Setting is <code>false</code> by default.
     *
     * @param {string} [mSDeploy.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MSDeployStatus} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MSDeployStatus} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MSDeployStatus} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateMSDeployOperation(resourceGroupName: string, name: string, mSDeploy: models.MSDeploy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MSDeployStatus>;
    beginCreateMSDeployOperation(resourceGroupName: string, name: string, mSDeploy: models.MSDeploy, callback: ServiceCallback<models.MSDeployStatus>): void;
    beginCreateMSDeployOperation(resourceGroupName: string, name: string, mSDeploy: models.MSDeploy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MSDeployStatus>): void;


    /**
     * @summary Create function for web site, or a deployment slot.
     *
     * Create function for web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} functionName Function name.
     *
     * @param {object} functionEnvelope Function details.
     *
     * @param {string} [functionEnvelope.functionAppId] Function App ID.
     *
     * @param {string} [functionEnvelope.scriptRootPathHref] Script root path URI.
     *
     * @param {string} [functionEnvelope.scriptHref] Script URI.
     *
     * @param {string} [functionEnvelope.configHref] Config URI.
     *
     * @param {string} [functionEnvelope.secretsFileHref] Secrets file URI.
     *
     * @param {string} [functionEnvelope.href] Function URI.
     *
     * @param {object} [functionEnvelope.config] Config information.
     *
     * @param {object} [functionEnvelope.files] File list.
     *
     * @param {string} [functionEnvelope.testData] Test data used when testing via
     * the Azure Portal.
     *
     * @param {string} [functionEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FunctionEnvelope>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateFunctionWithHttpOperationResponse(resourceGroupName: string, name: string, functionName: string, functionEnvelope: models.FunctionEnvelope, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FunctionEnvelope>>;

    /**
     * @summary Create function for web site, or a deployment slot.
     *
     * Create function for web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} functionName Function name.
     *
     * @param {object} functionEnvelope Function details.
     *
     * @param {string} [functionEnvelope.functionAppId] Function App ID.
     *
     * @param {string} [functionEnvelope.scriptRootPathHref] Script root path URI.
     *
     * @param {string} [functionEnvelope.scriptHref] Script URI.
     *
     * @param {string} [functionEnvelope.configHref] Config URI.
     *
     * @param {string} [functionEnvelope.secretsFileHref] Secrets file URI.
     *
     * @param {string} [functionEnvelope.href] Function URI.
     *
     * @param {object} [functionEnvelope.config] Config information.
     *
     * @param {object} [functionEnvelope.files] File list.
     *
     * @param {string} [functionEnvelope.testData] Test data used when testing via
     * the Azure Portal.
     *
     * @param {string} [functionEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FunctionEnvelope} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FunctionEnvelope} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FunctionEnvelope} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateFunction(resourceGroupName: string, name: string, functionName: string, functionEnvelope: models.FunctionEnvelope, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FunctionEnvelope>;
    beginCreateFunction(resourceGroupName: string, name: string, functionName: string, functionEnvelope: models.FunctionEnvelope, callback: ServiceCallback<models.FunctionEnvelope>): void;
    beginCreateFunction(resourceGroupName: string, name: string, functionName: string, functionEnvelope: models.FunctionEnvelope, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FunctionEnvelope>): void;


    /**
     * @summary Invoke the MSDeploy web app extension.
     *
     * Invoke the MSDeploy web app extension.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} instanceId ID of web app instance.
     *
     * @param {object} mSDeploy Details of MSDeploy operation
     *
     * @param {string} [mSDeploy.packageUri] Package URI
     *
     * @param {string} [mSDeploy.connectionString] SQL Connection String
     *
     * @param {string} [mSDeploy.dbType] Database Type
     *
     * @param {string} [mSDeploy.setParametersXmlFileUri] URI of MSDeploy
     * Parameters file. Must not be set if SetParameters is used.
     *
     * @param {object} [mSDeploy.setParameters] MSDeploy Parameters. Must not be
     * set if SetParametersXmlFileUri is used.
     *
     * @param {boolean} [mSDeploy.skipAppData] Controls whether the MSDeploy
     * operation skips the App_Data directory.
     * If set to <code>true</code>, the existing App_Data directory on the
     * destination
     * will not be deleted, and any App_Data directory in the source will be
     * ignored.
     * Setting is <code>false</code> by default.
     *
     * @param {boolean} [mSDeploy.appOffline] Sets the AppOffline rule while the
     * MSDeploy operation executes.
     * Setting is <code>false</code> by default.
     *
     * @param {string} [mSDeploy.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MSDeployStatus>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateInstanceMSDeployOperationWithHttpOperationResponse(resourceGroupName: string, name: string, instanceId: string, mSDeploy: models.MSDeploy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MSDeployStatus>>;

    /**
     * @summary Invoke the MSDeploy web app extension.
     *
     * Invoke the MSDeploy web app extension.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} instanceId ID of web app instance.
     *
     * @param {object} mSDeploy Details of MSDeploy operation
     *
     * @param {string} [mSDeploy.packageUri] Package URI
     *
     * @param {string} [mSDeploy.connectionString] SQL Connection String
     *
     * @param {string} [mSDeploy.dbType] Database Type
     *
     * @param {string} [mSDeploy.setParametersXmlFileUri] URI of MSDeploy
     * Parameters file. Must not be set if SetParameters is used.
     *
     * @param {object} [mSDeploy.setParameters] MSDeploy Parameters. Must not be
     * set if SetParametersXmlFileUri is used.
     *
     * @param {boolean} [mSDeploy.skipAppData] Controls whether the MSDeploy
     * operation skips the App_Data directory.
     * If set to <code>true</code>, the existing App_Data directory on the
     * destination
     * will not be deleted, and any App_Data directory in the source will be
     * ignored.
     * Setting is <code>false</code> by default.
     *
     * @param {boolean} [mSDeploy.appOffline] Sets the AppOffline rule while the
     * MSDeploy operation executes.
     * Setting is <code>false</code> by default.
     *
     * @param {string} [mSDeploy.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MSDeployStatus} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MSDeployStatus} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MSDeployStatus} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateInstanceMSDeployOperation(resourceGroupName: string, name: string, instanceId: string, mSDeploy: models.MSDeploy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MSDeployStatus>;
    beginCreateInstanceMSDeployOperation(resourceGroupName: string, name: string, instanceId: string, mSDeploy: models.MSDeploy, callback: ServiceCallback<models.MSDeployStatus>): void;
    beginCreateInstanceMSDeployOperation(resourceGroupName: string, name: string, instanceId: string, mSDeploy: models.MSDeploy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MSDeployStatus>): void;


    /**
     * @summary Restores a web app.
     *
     * Restores a web app.
     *
     * @param {string} subscriptionName Azure subscription.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} migrationOptions Migration migrationOptions.
     *
     * @param {string} migrationOptions.azurefilesConnectionString AzureFiles
     * connection string.
     *
     * @param {string} migrationOptions.azurefilesShare AzureFiles share.
     *
     * @param {boolean} [migrationOptions.switchSiteAfterMigration]
     * <code>true</code>if the app should be switched over; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [migrationOptions.blockWriteAccessToSite] <code>true</code>
     * if the app should be read only during copy operation; otherwise,
     * <code>false</code>.
     *
     * @param {string} [migrationOptions.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StorageMigrationResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginMigrateStorageWithHttpOperationResponse(subscriptionName: string, resourceGroupName: string, name: string, migrationOptions: models.StorageMigrationOptions, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StorageMigrationResponse>>;

    /**
     * @summary Restores a web app.
     *
     * Restores a web app.
     *
     * @param {string} subscriptionName Azure subscription.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} migrationOptions Migration migrationOptions.
     *
     * @param {string} migrationOptions.azurefilesConnectionString AzureFiles
     * connection string.
     *
     * @param {string} migrationOptions.azurefilesShare AzureFiles share.
     *
     * @param {boolean} [migrationOptions.switchSiteAfterMigration]
     * <code>true</code>if the app should be switched over; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [migrationOptions.blockWriteAccessToSite] <code>true</code>
     * if the app should be read only during copy operation; otherwise,
     * <code>false</code>.
     *
     * @param {string} [migrationOptions.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StorageMigrationResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StorageMigrationResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StorageMigrationResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginMigrateStorage(subscriptionName: string, resourceGroupName: string, name: string, migrationOptions: models.StorageMigrationOptions, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StorageMigrationResponse>;
    beginMigrateStorage(subscriptionName: string, resourceGroupName: string, name: string, migrationOptions: models.StorageMigrationOptions, callback: ServiceCallback<models.StorageMigrationResponse>): void;
    beginMigrateStorage(subscriptionName: string, resourceGroupName: string, name: string, migrationOptions: models.StorageMigrationOptions, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StorageMigrationResponse>): void;


    /**
     * @summary Migrates a local (in-app) MySql database to a remote MySql
     * database.
     *
     * Migrates a local (in-app) MySql database to a remote MySql database.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} migrationRequestEnvelope MySql migration options.
     *
     * @param {string} migrationRequestEnvelope.connectionString Connection string
     * to the remote MySQL database.
     *
     * @param {string} migrationRequestEnvelope.migrationType The type of migration
     * operation to be done. Possible values include: 'LocalToRemote',
     * 'RemoteToLocal'
     *
     * @param {string} [migrationRequestEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Operation>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginMigrateMySqlWithHttpOperationResponse(resourceGroupName: string, name: string, migrationRequestEnvelope: models.MigrateMySqlRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Operation>>;

    /**
     * @summary Migrates a local (in-app) MySql database to a remote MySql
     * database.
     *
     * Migrates a local (in-app) MySql database to a remote MySql database.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} migrationRequestEnvelope MySql migration options.
     *
     * @param {string} migrationRequestEnvelope.connectionString Connection string
     * to the remote MySQL database.
     *
     * @param {string} migrationRequestEnvelope.migrationType The type of migration
     * operation to be done. Possible values include: 'LocalToRemote',
     * 'RemoteToLocal'
     *
     * @param {string} [migrationRequestEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Operation} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Operation} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Operation} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginMigrateMySql(resourceGroupName: string, name: string, migrationRequestEnvelope: models.MigrateMySqlRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Operation>;
    beginMigrateMySql(resourceGroupName: string, name: string, migrationRequestEnvelope: models.MigrateMySqlRequest, callback: ServiceCallback<models.Operation>): void;
    beginMigrateMySql(resourceGroupName: string, name: string, migrationRequestEnvelope: models.MigrateMySqlRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Operation>): void;


    /**
     * @summary Start capturing network packets for the site.
     *
     * Start capturing network packets for the site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.durationInSeconds] The duration to keep capturing
     * in seconds.
     *
     * @param {number} [options.maxFrameLength] The maximum frame length in bytes
     * (Optional).
     *
     * @param {string} [options.sasUrl] The Blob URL to store capture file.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginStartWebSiteNetworkTraceOperationWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { durationInSeconds? : number, maxFrameLength? : number, sasUrl? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkTrace[]>>;

    /**
     * @summary Start capturing network packets for the site.
     *
     * Start capturing network packets for the site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.durationInSeconds] The duration to keep capturing
     * in seconds.
     *
     * @param {number} [options.maxFrameLength] The maximum frame length in bytes
     * (Optional).
     *
     * @param {string} [options.sasUrl] The Blob URL to store capture file.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginStartWebSiteNetworkTraceOperation(resourceGroupName: string, name: string, options?: { durationInSeconds? : number, maxFrameLength? : number, sasUrl? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkTrace[]>;
    beginStartWebSiteNetworkTraceOperation(resourceGroupName: string, name: string, callback: ServiceCallback<models.NetworkTrace[]>): void;
    beginStartWebSiteNetworkTraceOperation(resourceGroupName: string, name: string, options: { durationInSeconds? : number, maxFrameLength? : number, sasUrl? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkTrace[]>): void;


    /**
     * @summary Restores an app from a backup blob in Azure Storage.
     *
     * Restores an app from a backup blob in Azure Storage.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} request Information on restore request .
     *
     * @param {string} request.storageAccountUrl SAS URL to the container.
     *
     * @param {string} [request.blobName] Name of a blob which contains the backup.
     *
     * @param {boolean} request.overwrite <code>true</code> if the restore
     * operation can overwrite target app; otherwise, <code>false</code>.
     * <code>true</code> is needed if trying to restore over an existing app.
     *
     * @param {string} [request.siteName] Name of an app.
     *
     * @param {array} [request.databases] Collection of databases which should be
     * restored. This list has to match the list of databases included in the
     * backup.
     *
     * @param {boolean} [request.ignoreConflictingHostNames] Changes a logic when
     * restoring an app with custom domains. <code>true</code> to remove custom
     * domains automatically. If <code>false</code>, custom domains are added to
     * the app's object when it is being restored, but that might fail due to
     * conflicts during the operation.
     *
     * @param {boolean} [request.ignoreDatabases] Ignore the databases and only
     * restore the site content
     *
     * @param {string} [request.appServicePlan] Specify app service plan that will
     * own restored site.
     *
     * @param {string} [request.operationType] Operation type. Possible values
     * include: 'Default', 'Clone', 'Relocation', 'Snapshot', 'CloudFS'
     *
     * @param {boolean} [request.adjustConnectionStrings] <code>true</code> if
     * SiteConfig.ConnectionStrings should be set in new app; otherwise,
     * <code>false</code>.
     *
     * @param {string} [request.hostingEnvironment] App Service Environment name,
     * if needed (only when restoring an app to an App Service Environment).
     *
     * @param {string} [request.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginRestoreFromBackupBlobWithHttpOperationResponse(resourceGroupName: string, name: string, request: models.RestoreRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Restores an app from a backup blob in Azure Storage.
     *
     * Restores an app from a backup blob in Azure Storage.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} request Information on restore request .
     *
     * @param {string} request.storageAccountUrl SAS URL to the container.
     *
     * @param {string} [request.blobName] Name of a blob which contains the backup.
     *
     * @param {boolean} request.overwrite <code>true</code> if the restore
     * operation can overwrite target app; otherwise, <code>false</code>.
     * <code>true</code> is needed if trying to restore over an existing app.
     *
     * @param {string} [request.siteName] Name of an app.
     *
     * @param {array} [request.databases] Collection of databases which should be
     * restored. This list has to match the list of databases included in the
     * backup.
     *
     * @param {boolean} [request.ignoreConflictingHostNames] Changes a logic when
     * restoring an app with custom domains. <code>true</code> to remove custom
     * domains automatically. If <code>false</code>, custom domains are added to
     * the app's object when it is being restored, but that might fail due to
     * conflicts during the operation.
     *
     * @param {boolean} [request.ignoreDatabases] Ignore the databases and only
     * restore the site content
     *
     * @param {string} [request.appServicePlan] Specify app service plan that will
     * own restored site.
     *
     * @param {string} [request.operationType] Operation type. Possible values
     * include: 'Default', 'Clone', 'Relocation', 'Snapshot', 'CloudFS'
     *
     * @param {boolean} [request.adjustConnectionStrings] <code>true</code> if
     * SiteConfig.ConnectionStrings should be set in new app; otherwise,
     * <code>false</code>.
     *
     * @param {string} [request.hostingEnvironment] App Service Environment name,
     * if needed (only when restoring an app to an App Service Environment).
     *
     * @param {string} [request.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginRestoreFromBackupBlob(resourceGroupName: string, name: string, request: models.RestoreRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginRestoreFromBackupBlob(resourceGroupName: string, name: string, request: models.RestoreRequest, callback: ServiceCallback<void>): void;
    beginRestoreFromBackupBlob(resourceGroupName: string, name: string, request: models.RestoreRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Restores a deleted web app to this web app.
     *
     * Restores a deleted web app to this web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} restoreRequest Deleted web app restore information.
     *
     * @param {string} [restoreRequest.deletedSiteId] ARM resource ID of the
     * deleted app. Example:
     * /subscriptions/{subId}/providers/Microsoft.Web/deletedSites/{deletedSiteId}
     *
     * @param {boolean} [restoreRequest.recoverConfiguration] If true, deleted site
     * configuration, in addition to content, will be restored.
     *
     * @param {string} [restoreRequest.snapshotTime] Point in time to restore the
     * deleted app from, formatted as a DateTime string.
     * If unspecified, default value is the time that the app was deleted.
     *
     * @param {boolean} [restoreRequest.useDRSecondary] If true, the snapshot is
     * retrieved from DRSecondary endpoint.
     *
     * @param {string} [restoreRequest.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginRestoreFromDeletedAppWithHttpOperationResponse(resourceGroupName: string, name: string, restoreRequest: models.DeletedAppRestoreRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Restores a deleted web app to this web app.
     *
     * Restores a deleted web app to this web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} restoreRequest Deleted web app restore information.
     *
     * @param {string} [restoreRequest.deletedSiteId] ARM resource ID of the
     * deleted app. Example:
     * /subscriptions/{subId}/providers/Microsoft.Web/deletedSites/{deletedSiteId}
     *
     * @param {boolean} [restoreRequest.recoverConfiguration] If true, deleted site
     * configuration, in addition to content, will be restored.
     *
     * @param {string} [restoreRequest.snapshotTime] Point in time to restore the
     * deleted app from, formatted as a DateTime string.
     * If unspecified, default value is the time that the app was deleted.
     *
     * @param {boolean} [restoreRequest.useDRSecondary] If true, the snapshot is
     * retrieved from DRSecondary endpoint.
     *
     * @param {string} [restoreRequest.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginRestoreFromDeletedApp(resourceGroupName: string, name: string, restoreRequest: models.DeletedAppRestoreRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginRestoreFromDeletedApp(resourceGroupName: string, name: string, restoreRequest: models.DeletedAppRestoreRequest, callback: ServiceCallback<void>): void;
    beginRestoreFromDeletedApp(resourceGroupName: string, name: string, restoreRequest: models.DeletedAppRestoreRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Restores a web app from a snapshot.
     *
     * Restores a web app from a snapshot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} restoreRequest Snapshot restore settings. Snapshot
     * information can be obtained by calling GetDeletedSites or GetSiteSnapshots
     * API.
     *
     * @param {string} [restoreRequest.snapshotTime] Point in time in which the app
     * restore should be done, formatted as a DateTime string.
     *
     * @param {object} [restoreRequest.recoverySource] Optional. Specifies the web
     * app that snapshot contents will be retrieved from.
     * If empty, the targeted web app will be used as the source.
     *
     * @param {string} [restoreRequest.recoverySource.location] Geographical
     * location of the source web app, e.g. SouthEastAsia, SouthCentralUS
     *
     * @param {string} [restoreRequest.recoverySource.id] ARM resource ID of the
     * source app.
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}
     * for production slots and
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName}
     * for other slots.
     *
     * @param {boolean} restoreRequest.overwrite If <code>true</code> the restore
     * operation can overwrite source app; otherwise, <code>false</code>.
     *
     * @param {boolean} [restoreRequest.recoverConfiguration] If true, site
     * configuration, in addition to content, will be reverted.
     *
     * @param {boolean} [restoreRequest.ignoreConflictingHostNames] If true, custom
     * hostname conflicts will be ignored when recovering to a target web app.
     * This setting is only necessary when RecoverConfiguration is enabled.
     *
     * @param {boolean} [restoreRequest.useDRSecondary] If true, the snapshot is
     * retrieved from DRSecondary endpoint.
     *
     * @param {string} [restoreRequest.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginRestoreSnapshotWithHttpOperationResponse(resourceGroupName: string, name: string, restoreRequest: models.SnapshotRestoreRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Restores a web app from a snapshot.
     *
     * Restores a web app from a snapshot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} restoreRequest Snapshot restore settings. Snapshot
     * information can be obtained by calling GetDeletedSites or GetSiteSnapshots
     * API.
     *
     * @param {string} [restoreRequest.snapshotTime] Point in time in which the app
     * restore should be done, formatted as a DateTime string.
     *
     * @param {object} [restoreRequest.recoverySource] Optional. Specifies the web
     * app that snapshot contents will be retrieved from.
     * If empty, the targeted web app will be used as the source.
     *
     * @param {string} [restoreRequest.recoverySource.location] Geographical
     * location of the source web app, e.g. SouthEastAsia, SouthCentralUS
     *
     * @param {string} [restoreRequest.recoverySource.id] ARM resource ID of the
     * source app.
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}
     * for production slots and
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName}
     * for other slots.
     *
     * @param {boolean} restoreRequest.overwrite If <code>true</code> the restore
     * operation can overwrite source app; otherwise, <code>false</code>.
     *
     * @param {boolean} [restoreRequest.recoverConfiguration] If true, site
     * configuration, in addition to content, will be reverted.
     *
     * @param {boolean} [restoreRequest.ignoreConflictingHostNames] If true, custom
     * hostname conflicts will be ignored when recovering to a target web app.
     * This setting is only necessary when RecoverConfiguration is enabled.
     *
     * @param {boolean} [restoreRequest.useDRSecondary] If true, the snapshot is
     * retrieved from DRSecondary endpoint.
     *
     * @param {string} [restoreRequest.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginRestoreSnapshot(resourceGroupName: string, name: string, restoreRequest: models.SnapshotRestoreRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginRestoreSnapshot(resourceGroupName: string, name: string, restoreRequest: models.SnapshotRestoreRequest, callback: ServiceCallback<void>): void;
    beginRestoreSnapshot(resourceGroupName: string, name: string, restoreRequest: models.SnapshotRestoreRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Install site extension on a web site, or a deployment slot.
     *
     * Install site extension on a web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} siteExtensionId Site extension name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteExtensionInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginInstallSiteExtensionWithHttpOperationResponse(resourceGroupName: string, name: string, siteExtensionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteExtensionInfo>>;

    /**
     * @summary Install site extension on a web site, or a deployment slot.
     *
     * Install site extension on a web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} siteExtensionId Site extension name.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteExtensionInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteExtensionInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteExtensionInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginInstallSiteExtension(resourceGroupName: string, name: string, siteExtensionId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteExtensionInfo>;
    beginInstallSiteExtension(resourceGroupName: string, name: string, siteExtensionId: string, callback: ServiceCallback<models.SiteExtensionInfo>): void;
    beginInstallSiteExtension(resourceGroupName: string, name: string, siteExtensionId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteExtensionInfo>): void;


    /**
     * @summary Creates a new web, mobile, or API app in an existing resource
     * group, or updates an existing app.
     *
     * Creates a new web, mobile, or API app in an existing resource group, or
     * updates an existing app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Unique name of the app to create or update. To create
     * or update a deployment slot, use the {slot} parameter.
     *
     * @param {object} siteEnvelope A JSON representation of the app properties.
     * See example.
     *
     * @param {boolean} [siteEnvelope.enabled] <code>true</code> if the app is
     * enabled; otherwise, <code>false</code>. Setting this value to false disables
     * the app (takes the app offline).
     *
     * @param {array} [siteEnvelope.hostNameSslStates] Hostname SSL states are used
     * to manage the SSL bindings for app's hostnames.
     *
     * @param {string} [siteEnvelope.serverFarmId] Resource ID of the associated
     * App Service plan, formatted as:
     * "/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}".
     *
     * @param {boolean} [siteEnvelope.reserved] <code>true</code> if reserved;
     * otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.isXenon] Obsolete: Hyper-V sandbox.
     *
     * @param {boolean} [siteEnvelope.hyperV] Hyper-V sandbox.
     *
     * @param {object} [siteEnvelope.siteConfig] Configuration of the app.
     *
     * @param {number} [siteEnvelope.siteConfig.numberOfWorkers] Number of workers.
     *
     * @param {array} [siteEnvelope.siteConfig.defaultDocuments] Default documents.
     *
     * @param {string} [siteEnvelope.siteConfig.netFrameworkVersion] .NET Framework
     * version.
     *
     * @param {string} [siteEnvelope.siteConfig.phpVersion] Version of PHP.
     *
     * @param {string} [siteEnvelope.siteConfig.pythonVersion] Version of Python.
     *
     * @param {string} [siteEnvelope.siteConfig.nodeVersion] Version of Node.js.
     *
     * @param {string} [siteEnvelope.siteConfig.linuxFxVersion] Linux App Framework
     * and version
     *
     * @param {string} [siteEnvelope.siteConfig.windowsFxVersion] Xenon App
     * Framework and version
     *
     * @param {boolean} [siteEnvelope.siteConfig.requestTracingEnabled]
     * <code>true</code> if request tracing is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {date} [siteEnvelope.siteConfig.requestTracingExpirationTime] Request
     * tracing expiration time.
     *
     * @param {boolean} [siteEnvelope.siteConfig.remoteDebuggingEnabled]
     * <code>true</code> if remote debugging is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.remoteDebuggingVersion] Remote
     * debugging version.
     *
     * @param {boolean} [siteEnvelope.siteConfig.httpLoggingEnabled]
     * <code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.
     *
     * @param {number} [siteEnvelope.siteConfig.logsDirectorySizeLimit] HTTP logs
     * directory size limit.
     *
     * @param {boolean} [siteEnvelope.siteConfig.detailedErrorLoggingEnabled]
     * <code>true</code> if detailed error logging is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.publishingUsername] Publishing user
     * name.
     *
     * @param {array} [siteEnvelope.siteConfig.appSettings] Application settings.
     *
     * @param {object} [siteEnvelope.siteConfig.azureStorageAccounts] User-provided
     * Azure storage accounts.
     *
     * @param {array} [siteEnvelope.siteConfig.connectionStrings] Connection
     * strings.
     *
     * @param {array} [siteEnvelope.siteConfig.handlerMappings] Handler mappings.
     *
     * @param {string} [siteEnvelope.siteConfig.documentRoot] Document root.
     *
     * @param {string} [siteEnvelope.siteConfig.scmType] SCM type. Possible values
     * include: 'None', 'Dropbox', 'Tfs', 'LocalGit', 'GitHub', 'CodePlexGit',
     * 'CodePlexHg', 'BitbucketGit', 'BitbucketHg', 'ExternalGit', 'ExternalHg',
     * 'OneDrive', 'VSO'
     *
     * @param {boolean} [siteEnvelope.siteConfig.use32BitWorkerProcess]
     * <code>true</code> to use 32-bit worker process; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.siteConfig.webSocketsEnabled]
     * <code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.siteConfig.alwaysOn] <code>true</code> if
     * Always On is enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.javaVersion] Java version.
     *
     * @param {string} [siteEnvelope.siteConfig.javaContainer] Java container.
     *
     * @param {string} [siteEnvelope.siteConfig.javaContainerVersion] Java
     * container version.
     *
     * @param {string} [siteEnvelope.siteConfig.appCommandLine] App command line to
     * launch.
     *
     * @param {string} [siteEnvelope.siteConfig.managedPipelineMode] Managed
     * pipeline mode. Possible values include: 'Integrated', 'Classic'
     *
     * @param {array} [siteEnvelope.siteConfig.virtualApplications] Virtual
     * applications.
     *
     * @param {string} [siteEnvelope.siteConfig.loadBalancing] Site load balancing.
     * Possible values include: 'WeightedRoundRobin', 'LeastRequests',
     * 'LeastResponseTime', 'WeightedTotalTraffic', 'RequestHash'
     *
     * @param {object} [siteEnvelope.siteConfig.experiments] This is work around
     * for polymophic types.
     *
     * @param {array} [siteEnvelope.siteConfig.experiments.rampUpRules] List of
     * ramp-up rules.
     *
     * @param {object} [siteEnvelope.siteConfig.limits] Site limits.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxPercentageCpu] Maximum
     * allowed CPU usage percentage.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxMemoryInMb] Maximum
     * allowed memory usage in MB.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxDiskSizeInMb] Maximum
     * allowed disk size usage in MB.
     *
     * @param {boolean} [siteEnvelope.siteConfig.autoHealEnabled] <code>true</code>
     * if Auto Heal is enabled; otherwise, <code>false</code>.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules] Auto Heal rules.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.triggers] Conditions
     * that describe when to execute the auto-heal actions.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.triggers.requests] A
     * rule based on total requests.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.requests.count] Request
     * Count.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.requests.timeInterval] Time
     * interval.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.privateBytesInKB] A rule
     * based on private bytes.
     *
     * @param {array} [siteEnvelope.siteConfig.autoHealRules.triggers.statusCodes]
     * A rule based on status codes.
     *
     * @param {object}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests] A rule based
     * on request execution time.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.timeTaken] Time
     * taken.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.count] Request
     * Count.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.timeInterval]
     * Time interval.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.actions] Actions to
     * be executed when a rule is triggered.
     *
     * @param {string} [siteEnvelope.siteConfig.autoHealRules.actions.actionType]
     * Predefined action to be taken. Possible values include: 'Recycle',
     * 'LogEvent', 'CustomAction'
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.actions.customAction]
     * Custom action to be taken.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction.exe] Executable
     * to be run.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction.parameters]
     * Parameters for the executable.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.minProcessExecutionTime]
     * Minimum time the process must execute
     * before taking the action
     *
     * @param {string} [siteEnvelope.siteConfig.tracingOptions] Tracing options.
     *
     * @param {string} [siteEnvelope.siteConfig.vnetName] Virtual Network name.
     *
     * @param {object} [siteEnvelope.siteConfig.cors] Cross-Origin Resource Sharing
     * (CORS) settings.
     *
     * @param {array} [siteEnvelope.siteConfig.cors.allowedOrigins] Gets or sets
     * the list of origins that should be allowed to make cross-origin
     * calls (for example: http://example.com:12345). Use "*" to allow all.
     *
     * @param {object} [siteEnvelope.siteConfig.push] Push endpoint settings.
     *
     * @param {boolean} siteEnvelope.siteConfig.push.isPushEnabled Gets or sets a
     * flag indicating whether the Push endpoint is enabled.
     *
     * @param {string} [siteEnvelope.siteConfig.push.tagWhitelistJson] Gets or sets
     * a JSON string containing a list of tags that are whitelisted for use by the
     * push registration endpoint.
     *
     * @param {string} [siteEnvelope.siteConfig.push.tagsRequiringAuth] Gets or
     * sets a JSON string containing a list of tags that require user
     * authentication to be used in the push registration endpoint.
     * Tags can consist of alphanumeric characters and the following:
     * '_', '@', '#', '.', ':', '-'.
     * Validation should be performed at the PushRequestHandler.
     *
     * @param {string} [siteEnvelope.siteConfig.push.dynamicTagsJson] Gets or sets
     * a JSON string containing a list of dynamic tags that will be evaluated from
     * user claims in the push registration endpoint.
     *
     * @param {string} [siteEnvelope.siteConfig.push.kind] Kind of resource.
     *
     * @param {object} [siteEnvelope.siteConfig.apiDefinition] Information about
     * the formal API definition for the app.
     *
     * @param {string} [siteEnvelope.siteConfig.apiDefinition.url] The URL of the
     * API definition.
     *
     * @param {string} [siteEnvelope.siteConfig.autoSwapSlotName] Auto-swap slot
     * name.
     *
     * @param {boolean} [siteEnvelope.siteConfig.localMySqlEnabled]
     * <code>true</code> to enable local MySQL; otherwise, <code>false</code>.
     *
     * @param {number} [siteEnvelope.siteConfig.managedServiceIdentityId] Managed
     * Service Identity Id
     *
     * @param {number} [siteEnvelope.siteConfig.xManagedServiceIdentityId] Explicit
     * Managed Service Identity Id
     *
     * @param {array} [siteEnvelope.siteConfig.ipSecurityRestrictions] IP security
     * restrictions.
     *
     * @param {boolean} [siteEnvelope.siteConfig.http20Enabled] Http20Enabled:
     * configures a web site to allow clients to connect over http2.0
     *
     * @param {string} [siteEnvelope.siteConfig.minTlsVersion] MinTlsVersion:
     * configures the minimum version of TLS required for SSL requests. Possible
     * values include: '1.0', '1.1', '1.2'
     *
     * @param {string} [siteEnvelope.siteConfig.ftpsState] State of FTP / FTPS
     * service. Possible values include: 'AllAllowed', 'FtpsOnly', 'Disabled'
     *
     * @param {number} [siteEnvelope.siteConfig.reservedInstanceCount] Number of
     * reserved instances.
     * This setting only applies to the Consumption Plan
     *
     * @param {boolean} [siteEnvelope.scmSiteAlsoStopped] <code>true</code> to stop
     * SCM (KUDU) site when the app is stopped; otherwise, <code>false</code>. The
     * default is <code>false</code>.
     *
     * @param {object} [siteEnvelope.hostingEnvironmentProfile] App Service
     * Environment to use for the app.
     *
     * @param {string} [siteEnvelope.hostingEnvironmentProfile.id] Resource ID of
     * the App Service Environment.
     *
     * @param {boolean} [siteEnvelope.clientAffinityEnabled] <code>true</code> to
     * enable client affinity; <code>false</code> to stop sending session affinity
     * cookies, which route client requests in the same session to the same
     * instance. Default is <code>true</code>.
     *
     * @param {boolean} [siteEnvelope.clientCertEnabled] <code>true</code> to
     * enable client certificate authentication (TLS mutual authentication);
     * otherwise, <code>false</code>. Default is <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.hostNamesDisabled] <code>true</code> to
     * disable the public hostnames of the app; otherwise, <code>false</code>.
     * If <code>true</code>, the app is only accessible via API management process.
     *
     * @param {number} [siteEnvelope.containerSize] Size of the function container.
     *
     * @param {number} [siteEnvelope.dailyMemoryTimeQuota] Maximum allowed daily
     * memory-time quota (applicable on dynamic apps only).
     *
     * @param {object} [siteEnvelope.cloningInfo] If specified during app creation,
     * the app is cloned from a source app.
     *
     * @param {uuid} [siteEnvelope.cloningInfo.correlationId] Correlation ID of
     * cloning operation. This ID ties multiple cloning operations
     * together to use the same snapshot.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.overwrite] <code>true</code> to
     * overwrite destination app; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.cloneCustomHostNames]
     * <code>true</code> to clone custom hostnames from source app; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.cloneSourceControl]
     * <code>true</code> to clone source control from source app; otherwise,
     * <code>false</code>.
     *
     * @param {string} siteEnvelope.cloningInfo.sourceWebAppId ARM resource ID of
     * the source app. App resource ID is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}
     * for production slots and
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName}
     * for other slots.
     *
     * @param {string} [siteEnvelope.cloningInfo.hostingEnvironment] App Service
     * Environment.
     *
     * @param {object} [siteEnvelope.cloningInfo.appSettingsOverrides] Application
     * setting overrides for cloned app. If specified, these settings override the
     * settings cloned
     * from source app. Otherwise, application settings from source app are
     * retained.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.configureLoadBalancing]
     * <code>true</code> to configure load balancing for source and destination
     * app.
     *
     * @param {string} [siteEnvelope.cloningInfo.trafficManagerProfileId] ARM
     * resource ID of the Traffic Manager profile to use, if it exists. Traffic
     * Manager resource ID is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}.
     *
     * @param {string} [siteEnvelope.cloningInfo.trafficManagerProfileName] Name of
     * Traffic Manager profile to create. This is only needed if Traffic Manager
     * profile does not already exist.
     *
     * @param {boolean} [siteEnvelope.httpsOnly] HttpsOnly: configures a web site
     * to accept only https requests. Issues redirect for
     * http requests
     *
     * @param {object} [siteEnvelope.identity]
     *
     * @param {string} [siteEnvelope.identity.type] Type of managed service
     * identity. Possible values include: 'SystemAssigned', 'UserAssigned'
     *
     * @param {array} [siteEnvelope.identity.identityIds] Array of UserAssigned
     * managed service identities.
     *
     * @param {string} [siteEnvelope.kind] Kind of resource.
     *
     * @param {string} siteEnvelope.location Resource Location.
     *
     * @param {object} [siteEnvelope.tags] Resource tags.
     *
     * @param {string} slot Name of the deployment slot to create or update. By
     * default, this API attempts to create or modify the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Site>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateSlotWithHttpOperationResponse(resourceGroupName: string, name: string, siteEnvelope: models.Site, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Site>>;

    /**
     * @summary Creates a new web, mobile, or API app in an existing resource
     * group, or updates an existing app.
     *
     * Creates a new web, mobile, or API app in an existing resource group, or
     * updates an existing app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Unique name of the app to create or update. To create
     * or update a deployment slot, use the {slot} parameter.
     *
     * @param {object} siteEnvelope A JSON representation of the app properties.
     * See example.
     *
     * @param {boolean} [siteEnvelope.enabled] <code>true</code> if the app is
     * enabled; otherwise, <code>false</code>. Setting this value to false disables
     * the app (takes the app offline).
     *
     * @param {array} [siteEnvelope.hostNameSslStates] Hostname SSL states are used
     * to manage the SSL bindings for app's hostnames.
     *
     * @param {string} [siteEnvelope.serverFarmId] Resource ID of the associated
     * App Service plan, formatted as:
     * "/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}".
     *
     * @param {boolean} [siteEnvelope.reserved] <code>true</code> if reserved;
     * otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.isXenon] Obsolete: Hyper-V sandbox.
     *
     * @param {boolean} [siteEnvelope.hyperV] Hyper-V sandbox.
     *
     * @param {object} [siteEnvelope.siteConfig] Configuration of the app.
     *
     * @param {number} [siteEnvelope.siteConfig.numberOfWorkers] Number of workers.
     *
     * @param {array} [siteEnvelope.siteConfig.defaultDocuments] Default documents.
     *
     * @param {string} [siteEnvelope.siteConfig.netFrameworkVersion] .NET Framework
     * version.
     *
     * @param {string} [siteEnvelope.siteConfig.phpVersion] Version of PHP.
     *
     * @param {string} [siteEnvelope.siteConfig.pythonVersion] Version of Python.
     *
     * @param {string} [siteEnvelope.siteConfig.nodeVersion] Version of Node.js.
     *
     * @param {string} [siteEnvelope.siteConfig.linuxFxVersion] Linux App Framework
     * and version
     *
     * @param {string} [siteEnvelope.siteConfig.windowsFxVersion] Xenon App
     * Framework and version
     *
     * @param {boolean} [siteEnvelope.siteConfig.requestTracingEnabled]
     * <code>true</code> if request tracing is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {date} [siteEnvelope.siteConfig.requestTracingExpirationTime] Request
     * tracing expiration time.
     *
     * @param {boolean} [siteEnvelope.siteConfig.remoteDebuggingEnabled]
     * <code>true</code> if remote debugging is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.remoteDebuggingVersion] Remote
     * debugging version.
     *
     * @param {boolean} [siteEnvelope.siteConfig.httpLoggingEnabled]
     * <code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.
     *
     * @param {number} [siteEnvelope.siteConfig.logsDirectorySizeLimit] HTTP logs
     * directory size limit.
     *
     * @param {boolean} [siteEnvelope.siteConfig.detailedErrorLoggingEnabled]
     * <code>true</code> if detailed error logging is enabled; otherwise,
     * <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.publishingUsername] Publishing user
     * name.
     *
     * @param {array} [siteEnvelope.siteConfig.appSettings] Application settings.
     *
     * @param {object} [siteEnvelope.siteConfig.azureStorageAccounts] User-provided
     * Azure storage accounts.
     *
     * @param {array} [siteEnvelope.siteConfig.connectionStrings] Connection
     * strings.
     *
     * @param {array} [siteEnvelope.siteConfig.handlerMappings] Handler mappings.
     *
     * @param {string} [siteEnvelope.siteConfig.documentRoot] Document root.
     *
     * @param {string} [siteEnvelope.siteConfig.scmType] SCM type. Possible values
     * include: 'None', 'Dropbox', 'Tfs', 'LocalGit', 'GitHub', 'CodePlexGit',
     * 'CodePlexHg', 'BitbucketGit', 'BitbucketHg', 'ExternalGit', 'ExternalHg',
     * 'OneDrive', 'VSO'
     *
     * @param {boolean} [siteEnvelope.siteConfig.use32BitWorkerProcess]
     * <code>true</code> to use 32-bit worker process; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.siteConfig.webSocketsEnabled]
     * <code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.siteConfig.alwaysOn] <code>true</code> if
     * Always On is enabled; otherwise, <code>false</code>.
     *
     * @param {string} [siteEnvelope.siteConfig.javaVersion] Java version.
     *
     * @param {string} [siteEnvelope.siteConfig.javaContainer] Java container.
     *
     * @param {string} [siteEnvelope.siteConfig.javaContainerVersion] Java
     * container version.
     *
     * @param {string} [siteEnvelope.siteConfig.appCommandLine] App command line to
     * launch.
     *
     * @param {string} [siteEnvelope.siteConfig.managedPipelineMode] Managed
     * pipeline mode. Possible values include: 'Integrated', 'Classic'
     *
     * @param {array} [siteEnvelope.siteConfig.virtualApplications] Virtual
     * applications.
     *
     * @param {string} [siteEnvelope.siteConfig.loadBalancing] Site load balancing.
     * Possible values include: 'WeightedRoundRobin', 'LeastRequests',
     * 'LeastResponseTime', 'WeightedTotalTraffic', 'RequestHash'
     *
     * @param {object} [siteEnvelope.siteConfig.experiments] This is work around
     * for polymophic types.
     *
     * @param {array} [siteEnvelope.siteConfig.experiments.rampUpRules] List of
     * ramp-up rules.
     *
     * @param {object} [siteEnvelope.siteConfig.limits] Site limits.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxPercentageCpu] Maximum
     * allowed CPU usage percentage.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxMemoryInMb] Maximum
     * allowed memory usage in MB.
     *
     * @param {number} [siteEnvelope.siteConfig.limits.maxDiskSizeInMb] Maximum
     * allowed disk size usage in MB.
     *
     * @param {boolean} [siteEnvelope.siteConfig.autoHealEnabled] <code>true</code>
     * if Auto Heal is enabled; otherwise, <code>false</code>.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules] Auto Heal rules.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.triggers] Conditions
     * that describe when to execute the auto-heal actions.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.triggers.requests] A
     * rule based on total requests.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.requests.count] Request
     * Count.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.requests.timeInterval] Time
     * interval.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.privateBytesInKB] A rule
     * based on private bytes.
     *
     * @param {array} [siteEnvelope.siteConfig.autoHealRules.triggers.statusCodes]
     * A rule based on status codes.
     *
     * @param {object}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests] A rule based
     * on request execution time.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.timeTaken] Time
     * taken.
     *
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.count] Request
     * Count.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.timeInterval]
     * Time interval.
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.actions] Actions to
     * be executed when a rule is triggered.
     *
     * @param {string} [siteEnvelope.siteConfig.autoHealRules.actions.actionType]
     * Predefined action to be taken. Possible values include: 'Recycle',
     * 'LogEvent', 'CustomAction'
     *
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.actions.customAction]
     * Custom action to be taken.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction.exe] Executable
     * to be run.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction.parameters]
     * Parameters for the executable.
     *
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.minProcessExecutionTime]
     * Minimum time the process must execute
     * before taking the action
     *
     * @param {string} [siteEnvelope.siteConfig.tracingOptions] Tracing options.
     *
     * @param {string} [siteEnvelope.siteConfig.vnetName] Virtual Network name.
     *
     * @param {object} [siteEnvelope.siteConfig.cors] Cross-Origin Resource Sharing
     * (CORS) settings.
     *
     * @param {array} [siteEnvelope.siteConfig.cors.allowedOrigins] Gets or sets
     * the list of origins that should be allowed to make cross-origin
     * calls (for example: http://example.com:12345). Use "*" to allow all.
     *
     * @param {object} [siteEnvelope.siteConfig.push] Push endpoint settings.
     *
     * @param {boolean} siteEnvelope.siteConfig.push.isPushEnabled Gets or sets a
     * flag indicating whether the Push endpoint is enabled.
     *
     * @param {string} [siteEnvelope.siteConfig.push.tagWhitelistJson] Gets or sets
     * a JSON string containing a list of tags that are whitelisted for use by the
     * push registration endpoint.
     *
     * @param {string} [siteEnvelope.siteConfig.push.tagsRequiringAuth] Gets or
     * sets a JSON string containing a list of tags that require user
     * authentication to be used in the push registration endpoint.
     * Tags can consist of alphanumeric characters and the following:
     * '_', '@', '#', '.', ':', '-'.
     * Validation should be performed at the PushRequestHandler.
     *
     * @param {string} [siteEnvelope.siteConfig.push.dynamicTagsJson] Gets or sets
     * a JSON string containing a list of dynamic tags that will be evaluated from
     * user claims in the push registration endpoint.
     *
     * @param {string} [siteEnvelope.siteConfig.push.kind] Kind of resource.
     *
     * @param {object} [siteEnvelope.siteConfig.apiDefinition] Information about
     * the formal API definition for the app.
     *
     * @param {string} [siteEnvelope.siteConfig.apiDefinition.url] The URL of the
     * API definition.
     *
     * @param {string} [siteEnvelope.siteConfig.autoSwapSlotName] Auto-swap slot
     * name.
     *
     * @param {boolean} [siteEnvelope.siteConfig.localMySqlEnabled]
     * <code>true</code> to enable local MySQL; otherwise, <code>false</code>.
     *
     * @param {number} [siteEnvelope.siteConfig.managedServiceIdentityId] Managed
     * Service Identity Id
     *
     * @param {number} [siteEnvelope.siteConfig.xManagedServiceIdentityId] Explicit
     * Managed Service Identity Id
     *
     * @param {array} [siteEnvelope.siteConfig.ipSecurityRestrictions] IP security
     * restrictions.
     *
     * @param {boolean} [siteEnvelope.siteConfig.http20Enabled] Http20Enabled:
     * configures a web site to allow clients to connect over http2.0
     *
     * @param {string} [siteEnvelope.siteConfig.minTlsVersion] MinTlsVersion:
     * configures the minimum version of TLS required for SSL requests. Possible
     * values include: '1.0', '1.1', '1.2'
     *
     * @param {string} [siteEnvelope.siteConfig.ftpsState] State of FTP / FTPS
     * service. Possible values include: 'AllAllowed', 'FtpsOnly', 'Disabled'
     *
     * @param {number} [siteEnvelope.siteConfig.reservedInstanceCount] Number of
     * reserved instances.
     * This setting only applies to the Consumption Plan
     *
     * @param {boolean} [siteEnvelope.scmSiteAlsoStopped] <code>true</code> to stop
     * SCM (KUDU) site when the app is stopped; otherwise, <code>false</code>. The
     * default is <code>false</code>.
     *
     * @param {object} [siteEnvelope.hostingEnvironmentProfile] App Service
     * Environment to use for the app.
     *
     * @param {string} [siteEnvelope.hostingEnvironmentProfile.id] Resource ID of
     * the App Service Environment.
     *
     * @param {boolean} [siteEnvelope.clientAffinityEnabled] <code>true</code> to
     * enable client affinity; <code>false</code> to stop sending session affinity
     * cookies, which route client requests in the same session to the same
     * instance. Default is <code>true</code>.
     *
     * @param {boolean} [siteEnvelope.clientCertEnabled] <code>true</code> to
     * enable client certificate authentication (TLS mutual authentication);
     * otherwise, <code>false</code>. Default is <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.hostNamesDisabled] <code>true</code> to
     * disable the public hostnames of the app; otherwise, <code>false</code>.
     * If <code>true</code>, the app is only accessible via API management process.
     *
     * @param {number} [siteEnvelope.containerSize] Size of the function container.
     *
     * @param {number} [siteEnvelope.dailyMemoryTimeQuota] Maximum allowed daily
     * memory-time quota (applicable on dynamic apps only).
     *
     * @param {object} [siteEnvelope.cloningInfo] If specified during app creation,
     * the app is cloned from a source app.
     *
     * @param {uuid} [siteEnvelope.cloningInfo.correlationId] Correlation ID of
     * cloning operation. This ID ties multiple cloning operations
     * together to use the same snapshot.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.overwrite] <code>true</code> to
     * overwrite destination app; otherwise, <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.cloneCustomHostNames]
     * <code>true</code> to clone custom hostnames from source app; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.cloneSourceControl]
     * <code>true</code> to clone source control from source app; otherwise,
     * <code>false</code>.
     *
     * @param {string} siteEnvelope.cloningInfo.sourceWebAppId ARM resource ID of
     * the source app. App resource ID is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}
     * for production slots and
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName}
     * for other slots.
     *
     * @param {string} [siteEnvelope.cloningInfo.hostingEnvironment] App Service
     * Environment.
     *
     * @param {object} [siteEnvelope.cloningInfo.appSettingsOverrides] Application
     * setting overrides for cloned app. If specified, these settings override the
     * settings cloned
     * from source app. Otherwise, application settings from source app are
     * retained.
     *
     * @param {boolean} [siteEnvelope.cloningInfo.configureLoadBalancing]
     * <code>true</code> to configure load balancing for source and destination
     * app.
     *
     * @param {string} [siteEnvelope.cloningInfo.trafficManagerProfileId] ARM
     * resource ID of the Traffic Manager profile to use, if it exists. Traffic
     * Manager resource ID is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}.
     *
     * @param {string} [siteEnvelope.cloningInfo.trafficManagerProfileName] Name of
     * Traffic Manager profile to create. This is only needed if Traffic Manager
     * profile does not already exist.
     *
     * @param {boolean} [siteEnvelope.httpsOnly] HttpsOnly: configures a web site
     * to accept only https requests. Issues redirect for
     * http requests
     *
     * @param {object} [siteEnvelope.identity]
     *
     * @param {string} [siteEnvelope.identity.type] Type of managed service
     * identity. Possible values include: 'SystemAssigned', 'UserAssigned'
     *
     * @param {array} [siteEnvelope.identity.identityIds] Array of UserAssigned
     * managed service identities.
     *
     * @param {string} [siteEnvelope.kind] Kind of resource.
     *
     * @param {string} siteEnvelope.location Resource Location.
     *
     * @param {object} [siteEnvelope.tags] Resource tags.
     *
     * @param {string} slot Name of the deployment slot to create or update. By
     * default, this API attempts to create or modify the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Site} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Site} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Site} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdateSlot(resourceGroupName: string, name: string, siteEnvelope: models.Site, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Site>;
    beginCreateOrUpdateSlot(resourceGroupName: string, name: string, siteEnvelope: models.Site, slot: string, callback: ServiceCallback<models.Site>): void;
    beginCreateOrUpdateSlot(resourceGroupName: string, name: string, siteEnvelope: models.Site, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Site>): void;


    /**
     * @summary Restores a specific backup to another app (or deployment slot, if
     * specified).
     *
     * Restores a specific backup to another app (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} backupId ID of the backup.
     *
     * @param {object} request Information on restore request .
     *
     * @param {string} request.storageAccountUrl SAS URL to the container.
     *
     * @param {string} [request.blobName] Name of a blob which contains the backup.
     *
     * @param {boolean} request.overwrite <code>true</code> if the restore
     * operation can overwrite target app; otherwise, <code>false</code>.
     * <code>true</code> is needed if trying to restore over an existing app.
     *
     * @param {string} [request.siteName] Name of an app.
     *
     * @param {array} [request.databases] Collection of databases which should be
     * restored. This list has to match the list of databases included in the
     * backup.
     *
     * @param {boolean} [request.ignoreConflictingHostNames] Changes a logic when
     * restoring an app with custom domains. <code>true</code> to remove custom
     * domains automatically. If <code>false</code>, custom domains are added to
     * the app's object when it is being restored, but that might fail due to
     * conflicts during the operation.
     *
     * @param {boolean} [request.ignoreDatabases] Ignore the databases and only
     * restore the site content
     *
     * @param {string} [request.appServicePlan] Specify app service plan that will
     * own restored site.
     *
     * @param {string} [request.operationType] Operation type. Possible values
     * include: 'Default', 'Clone', 'Relocation', 'Snapshot', 'CloudFS'
     *
     * @param {boolean} [request.adjustConnectionStrings] <code>true</code> if
     * SiteConfig.ConnectionStrings should be set in new app; otherwise,
     * <code>false</code>.
     *
     * @param {string} [request.hostingEnvironment] App Service Environment name,
     * if needed (only when restoring an app to an App Service Environment).
     *
     * @param {string} [request.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will restore a backup of the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginRestoreSlotWithHttpOperationResponse(resourceGroupName: string, name: string, backupId: string, request: models.RestoreRequest, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Restores a specific backup to another app (or deployment slot, if
     * specified).
     *
     * Restores a specific backup to another app (or deployment slot, if
     * specified).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} backupId ID of the backup.
     *
     * @param {object} request Information on restore request .
     *
     * @param {string} request.storageAccountUrl SAS URL to the container.
     *
     * @param {string} [request.blobName] Name of a blob which contains the backup.
     *
     * @param {boolean} request.overwrite <code>true</code> if the restore
     * operation can overwrite target app; otherwise, <code>false</code>.
     * <code>true</code> is needed if trying to restore over an existing app.
     *
     * @param {string} [request.siteName] Name of an app.
     *
     * @param {array} [request.databases] Collection of databases which should be
     * restored. This list has to match the list of databases included in the
     * backup.
     *
     * @param {boolean} [request.ignoreConflictingHostNames] Changes a logic when
     * restoring an app with custom domains. <code>true</code> to remove custom
     * domains automatically. If <code>false</code>, custom domains are added to
     * the app's object when it is being restored, but that might fail due to
     * conflicts during the operation.
     *
     * @param {boolean} [request.ignoreDatabases] Ignore the databases and only
     * restore the site content
     *
     * @param {string} [request.appServicePlan] Specify app service plan that will
     * own restored site.
     *
     * @param {string} [request.operationType] Operation type. Possible values
     * include: 'Default', 'Clone', 'Relocation', 'Snapshot', 'CloudFS'
     *
     * @param {boolean} [request.adjustConnectionStrings] <code>true</code> if
     * SiteConfig.ConnectionStrings should be set in new app; otherwise,
     * <code>false</code>.
     *
     * @param {string} [request.hostingEnvironment] App Service Environment name,
     * if needed (only when restoring an app to an App Service Environment).
     *
     * @param {string} [request.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will restore a backup of the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginRestoreSlot(resourceGroupName: string, name: string, backupId: string, request: models.RestoreRequest, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginRestoreSlot(resourceGroupName: string, name: string, backupId: string, request: models.RestoreRequest, slot: string, callback: ServiceCallback<void>): void;
    beginRestoreSlot(resourceGroupName: string, name: string, backupId: string, request: models.RestoreRequest, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Gets the Git/FTP publishing credentials of an app.
     *
     * Gets the Git/FTP publishing credentials of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get the publishing credentials for the production
     * slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<User>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginListPublishingCredentialsSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.User>>;

    /**
     * @summary Gets the Git/FTP publishing credentials of an app.
     *
     * Gets the Git/FTP publishing credentials of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will get the publishing credentials for the production
     * slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {User} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {User} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link User} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginListPublishingCredentialsSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.User>;
    beginListPublishingCredentialsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.User>): void;
    beginListPublishingCredentialsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.User>): void;


    /**
     * @summary Invoke the MSDeploy web app extension.
     *
     * Invoke the MSDeploy web app extension.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} mSDeploy Details of MSDeploy operation
     *
     * @param {string} [mSDeploy.packageUri] Package URI
     *
     * @param {string} [mSDeploy.connectionString] SQL Connection String
     *
     * @param {string} [mSDeploy.dbType] Database Type
     *
     * @param {string} [mSDeploy.setParametersXmlFileUri] URI of MSDeploy
     * Parameters file. Must not be set if SetParameters is used.
     *
     * @param {object} [mSDeploy.setParameters] MSDeploy Parameters. Must not be
     * set if SetParametersXmlFileUri is used.
     *
     * @param {boolean} [mSDeploy.skipAppData] Controls whether the MSDeploy
     * operation skips the App_Data directory.
     * If set to <code>true</code>, the existing App_Data directory on the
     * destination
     * will not be deleted, and any App_Data directory in the source will be
     * ignored.
     * Setting is <code>false</code> by default.
     *
     * @param {boolean} [mSDeploy.appOffline] Sets the AppOffline rule while the
     * MSDeploy operation executes.
     * Setting is <code>false</code> by default.
     *
     * @param {string} [mSDeploy.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MSDeployStatus>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateMSDeployOperationSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, mSDeploy: models.MSDeploy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MSDeployStatus>>;

    /**
     * @summary Invoke the MSDeploy web app extension.
     *
     * Invoke the MSDeploy web app extension.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} mSDeploy Details of MSDeploy operation
     *
     * @param {string} [mSDeploy.packageUri] Package URI
     *
     * @param {string} [mSDeploy.connectionString] SQL Connection String
     *
     * @param {string} [mSDeploy.dbType] Database Type
     *
     * @param {string} [mSDeploy.setParametersXmlFileUri] URI of MSDeploy
     * Parameters file. Must not be set if SetParameters is used.
     *
     * @param {object} [mSDeploy.setParameters] MSDeploy Parameters. Must not be
     * set if SetParametersXmlFileUri is used.
     *
     * @param {boolean} [mSDeploy.skipAppData] Controls whether the MSDeploy
     * operation skips the App_Data directory.
     * If set to <code>true</code>, the existing App_Data directory on the
     * destination
     * will not be deleted, and any App_Data directory in the source will be
     * ignored.
     * Setting is <code>false</code> by default.
     *
     * @param {boolean} [mSDeploy.appOffline] Sets the AppOffline rule while the
     * MSDeploy operation executes.
     * Setting is <code>false</code> by default.
     *
     * @param {string} [mSDeploy.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MSDeployStatus} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MSDeployStatus} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MSDeployStatus} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateMSDeployOperationSlot(resourceGroupName: string, name: string, slot: string, mSDeploy: models.MSDeploy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MSDeployStatus>;
    beginCreateMSDeployOperationSlot(resourceGroupName: string, name: string, slot: string, mSDeploy: models.MSDeploy, callback: ServiceCallback<models.MSDeployStatus>): void;
    beginCreateMSDeployOperationSlot(resourceGroupName: string, name: string, slot: string, mSDeploy: models.MSDeploy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MSDeployStatus>): void;


    /**
     * @summary Create function for web site, or a deployment slot.
     *
     * Create function for web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} functionName Function name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} functionEnvelope Function details.
     *
     * @param {string} [functionEnvelope.functionAppId] Function App ID.
     *
     * @param {string} [functionEnvelope.scriptRootPathHref] Script root path URI.
     *
     * @param {string} [functionEnvelope.scriptHref] Script URI.
     *
     * @param {string} [functionEnvelope.configHref] Config URI.
     *
     * @param {string} [functionEnvelope.secretsFileHref] Secrets file URI.
     *
     * @param {string} [functionEnvelope.href] Function URI.
     *
     * @param {object} [functionEnvelope.config] Config information.
     *
     * @param {object} [functionEnvelope.files] File list.
     *
     * @param {string} [functionEnvelope.testData] Test data used when testing via
     * the Azure Portal.
     *
     * @param {string} [functionEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FunctionEnvelope>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateInstanceFunctionSlotWithHttpOperationResponse(resourceGroupName: string, name: string, functionName: string, slot: string, functionEnvelope: models.FunctionEnvelope, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FunctionEnvelope>>;

    /**
     * @summary Create function for web site, or a deployment slot.
     *
     * Create function for web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} functionName Function name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} functionEnvelope Function details.
     *
     * @param {string} [functionEnvelope.functionAppId] Function App ID.
     *
     * @param {string} [functionEnvelope.scriptRootPathHref] Script root path URI.
     *
     * @param {string} [functionEnvelope.scriptHref] Script URI.
     *
     * @param {string} [functionEnvelope.configHref] Config URI.
     *
     * @param {string} [functionEnvelope.secretsFileHref] Secrets file URI.
     *
     * @param {string} [functionEnvelope.href] Function URI.
     *
     * @param {object} [functionEnvelope.config] Config information.
     *
     * @param {object} [functionEnvelope.files] File list.
     *
     * @param {string} [functionEnvelope.testData] Test data used when testing via
     * the Azure Portal.
     *
     * @param {string} [functionEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FunctionEnvelope} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FunctionEnvelope} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FunctionEnvelope} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateInstanceFunctionSlot(resourceGroupName: string, name: string, functionName: string, slot: string, functionEnvelope: models.FunctionEnvelope, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FunctionEnvelope>;
    beginCreateInstanceFunctionSlot(resourceGroupName: string, name: string, functionName: string, slot: string, functionEnvelope: models.FunctionEnvelope, callback: ServiceCallback<models.FunctionEnvelope>): void;
    beginCreateInstanceFunctionSlot(resourceGroupName: string, name: string, functionName: string, slot: string, functionEnvelope: models.FunctionEnvelope, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FunctionEnvelope>): void;


    /**
     * @summary Invoke the MSDeploy web app extension.
     *
     * Invoke the MSDeploy web app extension.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {string} instanceId ID of web app instance.
     *
     * @param {object} mSDeploy Details of MSDeploy operation
     *
     * @param {string} [mSDeploy.packageUri] Package URI
     *
     * @param {string} [mSDeploy.connectionString] SQL Connection String
     *
     * @param {string} [mSDeploy.dbType] Database Type
     *
     * @param {string} [mSDeploy.setParametersXmlFileUri] URI of MSDeploy
     * Parameters file. Must not be set if SetParameters is used.
     *
     * @param {object} [mSDeploy.setParameters] MSDeploy Parameters. Must not be
     * set if SetParametersXmlFileUri is used.
     *
     * @param {boolean} [mSDeploy.skipAppData] Controls whether the MSDeploy
     * operation skips the App_Data directory.
     * If set to <code>true</code>, the existing App_Data directory on the
     * destination
     * will not be deleted, and any App_Data directory in the source will be
     * ignored.
     * Setting is <code>false</code> by default.
     *
     * @param {boolean} [mSDeploy.appOffline] Sets the AppOffline rule while the
     * MSDeploy operation executes.
     * Setting is <code>false</code> by default.
     *
     * @param {string} [mSDeploy.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MSDeployStatus>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateInstanceMSDeployOperationSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, instanceId: string, mSDeploy: models.MSDeploy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MSDeployStatus>>;

    /**
     * @summary Invoke the MSDeploy web app extension.
     *
     * Invoke the MSDeploy web app extension.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {string} instanceId ID of web app instance.
     *
     * @param {object} mSDeploy Details of MSDeploy operation
     *
     * @param {string} [mSDeploy.packageUri] Package URI
     *
     * @param {string} [mSDeploy.connectionString] SQL Connection String
     *
     * @param {string} [mSDeploy.dbType] Database Type
     *
     * @param {string} [mSDeploy.setParametersXmlFileUri] URI of MSDeploy
     * Parameters file. Must not be set if SetParameters is used.
     *
     * @param {object} [mSDeploy.setParameters] MSDeploy Parameters. Must not be
     * set if SetParametersXmlFileUri is used.
     *
     * @param {boolean} [mSDeploy.skipAppData] Controls whether the MSDeploy
     * operation skips the App_Data directory.
     * If set to <code>true</code>, the existing App_Data directory on the
     * destination
     * will not be deleted, and any App_Data directory in the source will be
     * ignored.
     * Setting is <code>false</code> by default.
     *
     * @param {boolean} [mSDeploy.appOffline] Sets the AppOffline rule while the
     * MSDeploy operation executes.
     * Setting is <code>false</code> by default.
     *
     * @param {string} [mSDeploy.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MSDeployStatus} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MSDeployStatus} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MSDeployStatus} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateInstanceMSDeployOperationSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, mSDeploy: models.MSDeploy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MSDeployStatus>;
    beginCreateInstanceMSDeployOperationSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, mSDeploy: models.MSDeploy, callback: ServiceCallback<models.MSDeployStatus>): void;
    beginCreateInstanceMSDeployOperationSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, mSDeploy: models.MSDeploy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MSDeployStatus>): void;


    /**
     * @summary Start capturing network packets for the site.
     *
     * Start capturing network packets for the site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} slot The name of the slot for this web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.durationInSeconds] The duration to keep capturing
     * in seconds.
     *
     * @param {number} [options.maxFrameLength] The maximum frame length in bytes
     * (Optional).
     *
     * @param {string} [options.sasUrl] The Blob URL to store capture file.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginStartWebSiteNetworkTraceOperationSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { durationInSeconds? : number, maxFrameLength? : number, sasUrl? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkTrace[]>>;

    /**
     * @summary Start capturing network packets for the site.
     *
     * Start capturing network packets for the site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} slot The name of the slot for this web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.durationInSeconds] The duration to keep capturing
     * in seconds.
     *
     * @param {number} [options.maxFrameLength] The maximum frame length in bytes
     * (Optional).
     *
     * @param {string} [options.sasUrl] The Blob URL to store capture file.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginStartWebSiteNetworkTraceOperationSlot(resourceGroupName: string, name: string, slot: string, options?: { durationInSeconds? : number, maxFrameLength? : number, sasUrl? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkTrace[]>;
    beginStartWebSiteNetworkTraceOperationSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.NetworkTrace[]>): void;
    beginStartWebSiteNetworkTraceOperationSlot(resourceGroupName: string, name: string, slot: string, options: { durationInSeconds? : number, maxFrameLength? : number, sasUrl? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkTrace[]>): void;


    /**
     * @summary Restores an app from a backup blob in Azure Storage.
     *
     * Restores an app from a backup blob in Azure Storage.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} request Information on restore request .
     *
     * @param {string} request.storageAccountUrl SAS URL to the container.
     *
     * @param {string} [request.blobName] Name of a blob which contains the backup.
     *
     * @param {boolean} request.overwrite <code>true</code> if the restore
     * operation can overwrite target app; otherwise, <code>false</code>.
     * <code>true</code> is needed if trying to restore over an existing app.
     *
     * @param {string} [request.siteName] Name of an app.
     *
     * @param {array} [request.databases] Collection of databases which should be
     * restored. This list has to match the list of databases included in the
     * backup.
     *
     * @param {boolean} [request.ignoreConflictingHostNames] Changes a logic when
     * restoring an app with custom domains. <code>true</code> to remove custom
     * domains automatically. If <code>false</code>, custom domains are added to
     * the app's object when it is being restored, but that might fail due to
     * conflicts during the operation.
     *
     * @param {boolean} [request.ignoreDatabases] Ignore the databases and only
     * restore the site content
     *
     * @param {string} [request.appServicePlan] Specify app service plan that will
     * own restored site.
     *
     * @param {string} [request.operationType] Operation type. Possible values
     * include: 'Default', 'Clone', 'Relocation', 'Snapshot', 'CloudFS'
     *
     * @param {boolean} [request.adjustConnectionStrings] <code>true</code> if
     * SiteConfig.ConnectionStrings should be set in new app; otherwise,
     * <code>false</code>.
     *
     * @param {string} [request.hostingEnvironment] App Service Environment name,
     * if needed (only when restoring an app to an App Service Environment).
     *
     * @param {string} [request.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will restore a backup of the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginRestoreFromBackupBlobSlotWithHttpOperationResponse(resourceGroupName: string, name: string, request: models.RestoreRequest, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Restores an app from a backup blob in Azure Storage.
     *
     * Restores an app from a backup blob in Azure Storage.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} request Information on restore request .
     *
     * @param {string} request.storageAccountUrl SAS URL to the container.
     *
     * @param {string} [request.blobName] Name of a blob which contains the backup.
     *
     * @param {boolean} request.overwrite <code>true</code> if the restore
     * operation can overwrite target app; otherwise, <code>false</code>.
     * <code>true</code> is needed if trying to restore over an existing app.
     *
     * @param {string} [request.siteName] Name of an app.
     *
     * @param {array} [request.databases] Collection of databases which should be
     * restored. This list has to match the list of databases included in the
     * backup.
     *
     * @param {boolean} [request.ignoreConflictingHostNames] Changes a logic when
     * restoring an app with custom domains. <code>true</code> to remove custom
     * domains automatically. If <code>false</code>, custom domains are added to
     * the app's object when it is being restored, but that might fail due to
     * conflicts during the operation.
     *
     * @param {boolean} [request.ignoreDatabases] Ignore the databases and only
     * restore the site content
     *
     * @param {string} [request.appServicePlan] Specify app service plan that will
     * own restored site.
     *
     * @param {string} [request.operationType] Operation type. Possible values
     * include: 'Default', 'Clone', 'Relocation', 'Snapshot', 'CloudFS'
     *
     * @param {boolean} [request.adjustConnectionStrings] <code>true</code> if
     * SiteConfig.ConnectionStrings should be set in new app; otherwise,
     * <code>false</code>.
     *
     * @param {string} [request.hostingEnvironment] App Service Environment name,
     * if needed (only when restoring an app to an App Service Environment).
     *
     * @param {string} [request.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will restore a backup of the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginRestoreFromBackupBlobSlot(resourceGroupName: string, name: string, request: models.RestoreRequest, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginRestoreFromBackupBlobSlot(resourceGroupName: string, name: string, request: models.RestoreRequest, slot: string, callback: ServiceCallback<void>): void;
    beginRestoreFromBackupBlobSlot(resourceGroupName: string, name: string, request: models.RestoreRequest, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Restores a deleted web app to this web app.
     *
     * Restores a deleted web app to this web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} restoreRequest Deleted web app restore information.
     *
     * @param {string} [restoreRequest.deletedSiteId] ARM resource ID of the
     * deleted app. Example:
     * /subscriptions/{subId}/providers/Microsoft.Web/deletedSites/{deletedSiteId}
     *
     * @param {boolean} [restoreRequest.recoverConfiguration] If true, deleted site
     * configuration, in addition to content, will be restored.
     *
     * @param {string} [restoreRequest.snapshotTime] Point in time to restore the
     * deleted app from, formatted as a DateTime string.
     * If unspecified, default value is the time that the app was deleted.
     *
     * @param {boolean} [restoreRequest.useDRSecondary] If true, the snapshot is
     * retrieved from DRSecondary endpoint.
     *
     * @param {string} [restoreRequest.kind] Kind of resource.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginRestoreFromDeletedAppSlotWithHttpOperationResponse(resourceGroupName: string, name: string, restoreRequest: models.DeletedAppRestoreRequest, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Restores a deleted web app to this web app.
     *
     * Restores a deleted web app to this web app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} restoreRequest Deleted web app restore information.
     *
     * @param {string} [restoreRequest.deletedSiteId] ARM resource ID of the
     * deleted app. Example:
     * /subscriptions/{subId}/providers/Microsoft.Web/deletedSites/{deletedSiteId}
     *
     * @param {boolean} [restoreRequest.recoverConfiguration] If true, deleted site
     * configuration, in addition to content, will be restored.
     *
     * @param {string} [restoreRequest.snapshotTime] Point in time to restore the
     * deleted app from, formatted as a DateTime string.
     * If unspecified, default value is the time that the app was deleted.
     *
     * @param {boolean} [restoreRequest.useDRSecondary] If true, the snapshot is
     * retrieved from DRSecondary endpoint.
     *
     * @param {string} [restoreRequest.kind] Kind of resource.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginRestoreFromDeletedAppSlot(resourceGroupName: string, name: string, restoreRequest: models.DeletedAppRestoreRequest, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginRestoreFromDeletedAppSlot(resourceGroupName: string, name: string, restoreRequest: models.DeletedAppRestoreRequest, slot: string, callback: ServiceCallback<void>): void;
    beginRestoreFromDeletedAppSlot(resourceGroupName: string, name: string, restoreRequest: models.DeletedAppRestoreRequest, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Restores a web app from a snapshot.
     *
     * Restores a web app from a snapshot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} restoreRequest Snapshot restore settings. Snapshot
     * information can be obtained by calling GetDeletedSites or GetSiteSnapshots
     * API.
     *
     * @param {string} [restoreRequest.snapshotTime] Point in time in which the app
     * restore should be done, formatted as a DateTime string.
     *
     * @param {object} [restoreRequest.recoverySource] Optional. Specifies the web
     * app that snapshot contents will be retrieved from.
     * If empty, the targeted web app will be used as the source.
     *
     * @param {string} [restoreRequest.recoverySource.location] Geographical
     * location of the source web app, e.g. SouthEastAsia, SouthCentralUS
     *
     * @param {string} [restoreRequest.recoverySource.id] ARM resource ID of the
     * source app.
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}
     * for production slots and
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName}
     * for other slots.
     *
     * @param {boolean} restoreRequest.overwrite If <code>true</code> the restore
     * operation can overwrite source app; otherwise, <code>false</code>.
     *
     * @param {boolean} [restoreRequest.recoverConfiguration] If true, site
     * configuration, in addition to content, will be reverted.
     *
     * @param {boolean} [restoreRequest.ignoreConflictingHostNames] If true, custom
     * hostname conflicts will be ignored when recovering to a target web app.
     * This setting is only necessary when RecoverConfiguration is enabled.
     *
     * @param {boolean} [restoreRequest.useDRSecondary] If true, the snapshot is
     * retrieved from DRSecondary endpoint.
     *
     * @param {string} [restoreRequest.kind] Kind of resource.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginRestoreSnapshotSlotWithHttpOperationResponse(resourceGroupName: string, name: string, restoreRequest: models.SnapshotRestoreRequest, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Restores a web app from a snapshot.
     *
     * Restores a web app from a snapshot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} restoreRequest Snapshot restore settings. Snapshot
     * information can be obtained by calling GetDeletedSites or GetSiteSnapshots
     * API.
     *
     * @param {string} [restoreRequest.snapshotTime] Point in time in which the app
     * restore should be done, formatted as a DateTime string.
     *
     * @param {object} [restoreRequest.recoverySource] Optional. Specifies the web
     * app that snapshot contents will be retrieved from.
     * If empty, the targeted web app will be used as the source.
     *
     * @param {string} [restoreRequest.recoverySource.location] Geographical
     * location of the source web app, e.g. SouthEastAsia, SouthCentralUS
     *
     * @param {string} [restoreRequest.recoverySource.id] ARM resource ID of the
     * source app.
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}
     * for production slots and
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName}
     * for other slots.
     *
     * @param {boolean} restoreRequest.overwrite If <code>true</code> the restore
     * operation can overwrite source app; otherwise, <code>false</code>.
     *
     * @param {boolean} [restoreRequest.recoverConfiguration] If true, site
     * configuration, in addition to content, will be reverted.
     *
     * @param {boolean} [restoreRequest.ignoreConflictingHostNames] If true, custom
     * hostname conflicts will be ignored when recovering to a target web app.
     * This setting is only necessary when RecoverConfiguration is enabled.
     *
     * @param {boolean} [restoreRequest.useDRSecondary] If true, the snapshot is
     * retrieved from DRSecondary endpoint.
     *
     * @param {string} [restoreRequest.kind] Kind of resource.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginRestoreSnapshotSlot(resourceGroupName: string, name: string, restoreRequest: models.SnapshotRestoreRequest, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginRestoreSnapshotSlot(resourceGroupName: string, name: string, restoreRequest: models.SnapshotRestoreRequest, slot: string, callback: ServiceCallback<void>): void;
    beginRestoreSnapshotSlot(resourceGroupName: string, name: string, restoreRequest: models.SnapshotRestoreRequest, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Install site extension on a web site, or a deployment slot.
     *
     * Install site extension on a web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} siteExtensionId Site extension name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteExtensionInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginInstallSiteExtensionSlotWithHttpOperationResponse(resourceGroupName: string, name: string, siteExtensionId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteExtensionInfo>>;

    /**
     * @summary Install site extension on a web site, or a deployment slot.
     *
     * Install site extension on a web site, or a deployment slot.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Site name.
     *
     * @param {string} siteExtensionId Site extension name.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API deletes a deployment for the production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteExtensionInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteExtensionInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteExtensionInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginInstallSiteExtensionSlot(resourceGroupName: string, name: string, siteExtensionId: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteExtensionInfo>;
    beginInstallSiteExtensionSlot(resourceGroupName: string, name: string, siteExtensionId: string, slot: string, callback: ServiceCallback<models.SiteExtensionInfo>): void;
    beginInstallSiteExtensionSlot(resourceGroupName: string, name: string, siteExtensionId: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteExtensionInfo>): void;


    /**
     * @summary Swaps two deployment slots of an app.
     *
     * Swaps two deployment slots of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} slotSwapEntity JSON object that contains the target slot
     * name. See example.
     *
     * @param {string} slotSwapEntity.targetSlot Destination deployment slot during
     * swap operation.
     *
     * @param {boolean} slotSwapEntity.preserveVnet <code>true</code> to preserve
     * Virtual Network to the slot during swap; otherwise, <code>false</code>.
     *
     * @param {string} slot Name of the source slot. If a slot is not specified,
     * the production slot is used as the source slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginSwapSlotSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Swaps two deployment slots of an app.
     *
     * Swaps two deployment slots of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} slotSwapEntity JSON object that contains the target slot
     * name. See example.
     *
     * @param {string} slotSwapEntity.targetSlot Destination deployment slot during
     * swap operation.
     *
     * @param {boolean} slotSwapEntity.preserveVnet <code>true</code> to preserve
     * Virtual Network to the slot during swap; otherwise, <code>false</code>.
     *
     * @param {string} slot Name of the source slot. If a slot is not specified,
     * the production slot is used as the source slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginSwapSlotSlot(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginSwapSlotSlot(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, slot: string, callback: ServiceCallback<void>): void;
    beginSwapSlotSlot(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Updates the source control configuration of an app.
     *
     * Updates the source control configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} siteSourceControl JSON representation of a SiteSourceControl
     * object. See example.
     *
     * @param {string} [siteSourceControl.repoUrl] Repository or source control
     * URL.
     *
     * @param {string} [siteSourceControl.branch] Name of branch to use for
     * deployment.
     *
     * @param {boolean} [siteSourceControl.isManualIntegration] <code>true</code>
     * to limit to manual integration; <code>false</code> to enable continuous
     * integration (which configures webhooks into online repos like GitHub).
     *
     * @param {boolean} [siteSourceControl.deploymentRollbackEnabled]
     * <code>true</code> to enable deployment rollback; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteSourceControl.isMercurial] <code>true</code> for a
     * Mercurial repository; <code>false</code> for a Git repository.
     *
     * @param {string} [siteSourceControl.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will update the source control configuration for the
     * production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteSourceControl>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateSourceControlSlotWithHttpOperationResponse(resourceGroupName: string, name: string, siteSourceControl: models.SiteSourceControl, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteSourceControl>>;

    /**
     * @summary Updates the source control configuration of an app.
     *
     * Updates the source control configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} siteSourceControl JSON representation of a SiteSourceControl
     * object. See example.
     *
     * @param {string} [siteSourceControl.repoUrl] Repository or source control
     * URL.
     *
     * @param {string} [siteSourceControl.branch] Name of branch to use for
     * deployment.
     *
     * @param {boolean} [siteSourceControl.isManualIntegration] <code>true</code>
     * to limit to manual integration; <code>false</code> to enable continuous
     * integration (which configures webhooks into online repos like GitHub).
     *
     * @param {boolean} [siteSourceControl.deploymentRollbackEnabled]
     * <code>true</code> to enable deployment rollback; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteSourceControl.isMercurial] <code>true</code> for a
     * Mercurial repository; <code>false</code> for a Git repository.
     *
     * @param {string} [siteSourceControl.kind] Kind of resource.
     *
     * @param {string} slot Name of the deployment slot. If a slot is not
     * specified, the API will update the source control configuration for the
     * production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteSourceControl} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteSourceControl} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteSourceControl} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdateSourceControlSlot(resourceGroupName: string, name: string, siteSourceControl: models.SiteSourceControl, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteSourceControl>;
    beginCreateOrUpdateSourceControlSlot(resourceGroupName: string, name: string, siteSourceControl: models.SiteSourceControl, slot: string, callback: ServiceCallback<models.SiteSourceControl>): void;
    beginCreateOrUpdateSourceControlSlot(resourceGroupName: string, name: string, siteSourceControl: models.SiteSourceControl, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteSourceControl>): void;


    /**
     * @summary Start capturing network packets for the site.
     *
     * Start capturing network packets for the site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} slot The name of the slot for this web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.durationInSeconds] The duration to keep capturing
     * in seconds.
     *
     * @param {number} [options.maxFrameLength] The maximum frame length in bytes
     * (Optional).
     *
     * @param {string} [options.sasUrl] The Blob URL to store capture file.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginStartNetworkTraceSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { durationInSeconds? : number, maxFrameLength? : number, sasUrl? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkTrace[]>>;

    /**
     * @summary Start capturing network packets for the site.
     *
     * Start capturing network packets for the site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {string} slot The name of the slot for this web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.durationInSeconds] The duration to keep capturing
     * in seconds.
     *
     * @param {number} [options.maxFrameLength] The maximum frame length in bytes
     * (Optional).
     *
     * @param {string} [options.sasUrl] The Blob URL to store capture file.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginStartNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, options?: { durationInSeconds? : number, maxFrameLength? : number, sasUrl? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkTrace[]>;
    beginStartNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.NetworkTrace[]>): void;
    beginStartNetworkTraceSlot(resourceGroupName: string, name: string, slot: string, options: { durationInSeconds? : number, maxFrameLength? : number, sasUrl? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkTrace[]>): void;


    /**
     * @summary Swaps two deployment slots of an app.
     *
     * Swaps two deployment slots of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} slotSwapEntity JSON object that contains the target slot
     * name. See example.
     *
     * @param {string} slotSwapEntity.targetSlot Destination deployment slot during
     * swap operation.
     *
     * @param {boolean} slotSwapEntity.preserveVnet <code>true</code> to preserve
     * Virtual Network to the slot during swap; otherwise, <code>false</code>.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginSwapSlotWithProductionWithHttpOperationResponse(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Swaps two deployment slots of an app.
     *
     * Swaps two deployment slots of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} slotSwapEntity JSON object that contains the target slot
     * name. See example.
     *
     * @param {string} slotSwapEntity.targetSlot Destination deployment slot during
     * swap operation.
     *
     * @param {boolean} slotSwapEntity.preserveVnet <code>true</code> to preserve
     * Virtual Network to the slot during swap; otherwise, <code>false</code>.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginSwapSlotWithProduction(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginSwapSlotWithProduction(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, callback: ServiceCallback<void>): void;
    beginSwapSlotWithProduction(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Updates the source control configuration of an app.
     *
     * Updates the source control configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} siteSourceControl JSON representation of a SiteSourceControl
     * object. See example.
     *
     * @param {string} [siteSourceControl.repoUrl] Repository or source control
     * URL.
     *
     * @param {string} [siteSourceControl.branch] Name of branch to use for
     * deployment.
     *
     * @param {boolean} [siteSourceControl.isManualIntegration] <code>true</code>
     * to limit to manual integration; <code>false</code> to enable continuous
     * integration (which configures webhooks into online repos like GitHub).
     *
     * @param {boolean} [siteSourceControl.deploymentRollbackEnabled]
     * <code>true</code> to enable deployment rollback; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteSourceControl.isMercurial] <code>true</code> for a
     * Mercurial repository; <code>false</code> for a Git repository.
     *
     * @param {string} [siteSourceControl.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteSourceControl>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateSourceControlWithHttpOperationResponse(resourceGroupName: string, name: string, siteSourceControl: models.SiteSourceControl, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteSourceControl>>;

    /**
     * @summary Updates the source control configuration of an app.
     *
     * Updates the source control configuration of an app.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the app.
     *
     * @param {object} siteSourceControl JSON representation of a SiteSourceControl
     * object. See example.
     *
     * @param {string} [siteSourceControl.repoUrl] Repository or source control
     * URL.
     *
     * @param {string} [siteSourceControl.branch] Name of branch to use for
     * deployment.
     *
     * @param {boolean} [siteSourceControl.isManualIntegration] <code>true</code>
     * to limit to manual integration; <code>false</code> to enable continuous
     * integration (which configures webhooks into online repos like GitHub).
     *
     * @param {boolean} [siteSourceControl.deploymentRollbackEnabled]
     * <code>true</code> to enable deployment rollback; otherwise,
     * <code>false</code>.
     *
     * @param {boolean} [siteSourceControl.isMercurial] <code>true</code> for a
     * Mercurial repository; <code>false</code> for a Git repository.
     *
     * @param {string} [siteSourceControl.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteSourceControl} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteSourceControl} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteSourceControl} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdateSourceControl(resourceGroupName: string, name: string, siteSourceControl: models.SiteSourceControl, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteSourceControl>;
    beginCreateOrUpdateSourceControl(resourceGroupName: string, name: string, siteSourceControl: models.SiteSourceControl, callback: ServiceCallback<models.SiteSourceControl>): void;
    beginCreateOrUpdateSourceControl(resourceGroupName: string, name: string, siteSourceControl: models.SiteSourceControl, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteSourceControl>): void;


    /**
     * @summary Start capturing network packets for the site.
     *
     * Start capturing network packets for the site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.durationInSeconds] The duration to keep capturing
     * in seconds.
     *
     * @param {number} [options.maxFrameLength] The maximum frame length in bytes
     * (Optional).
     *
     * @param {string} [options.sasUrl] The Blob URL to store capture file.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginStartNetworkTraceWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { durationInSeconds? : number, maxFrameLength? : number, sasUrl? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NetworkTrace[]>>;

    /**
     * @summary Start capturing network packets for the site.
     *
     * Start capturing network packets for the site.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name The name of the web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.durationInSeconds] The duration to keep capturing
     * in seconds.
     *
     * @param {number} [options.maxFrameLength] The maximum frame length in bytes
     * (Optional).
     *
     * @param {string} [options.sasUrl] The Blob URL to store capture file.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginStartNetworkTrace(resourceGroupName: string, name: string, options?: { durationInSeconds? : number, maxFrameLength? : number, sasUrl? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.NetworkTrace[]>;
    beginStartNetworkTrace(resourceGroupName: string, name: string, callback: ServiceCallback<models.NetworkTrace[]>): void;
    beginStartNetworkTrace(resourceGroupName: string, name: string, options: { durationInSeconds? : number, maxFrameLength? : number, sasUrl? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkTrace[]>): void;


    /**
     * @summary Get all apps for a subscription.
     *
     * Get all apps for a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WebAppCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WebAppCollection>>;

    /**
     * @summary Get all apps for a subscription.
     *
     * Get all apps for a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WebAppCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WebAppCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WebAppCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WebAppCollection>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.WebAppCollection>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WebAppCollection>): void;


    /**
     * @summary Gets all web, mobile, and API apps in the specified resource group.
     *
     * Gets all web, mobile, and API apps in the specified resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WebAppCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WebAppCollection>>;

    /**
     * @summary Gets all web, mobile, and API apps in the specified resource group.
     *
     * Gets all web, mobile, and API apps in the specified resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WebAppCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WebAppCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WebAppCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WebAppCollection>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.WebAppCollection>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WebAppCollection>): void;


    /**
     * @summary Gets existing backups of an app.
     *
     * Gets existing backups of an app.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupItemCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBackupsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupItemCollection>>;

    /**
     * @summary Gets existing backups of an app.
     *
     * Gets existing backups of an app.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupItemCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupItemCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupItemCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBackupsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupItemCollection>;
    listBackupsNext(nextPageLink: string, callback: ServiceCallback<models.BackupItemCollection>): void;
    listBackupsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupItemCollection>): void;


    /**
     * @summary List the configurations of an app
     *
     * List the configurations of an app
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteConfigResourceCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listConfigurationsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteConfigResourceCollection>>;

    /**
     * @summary List the configurations of an app
     *
     * List the configurations of an app
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteConfigResourceCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteConfigResourceCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteConfigResourceCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listConfigurationsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteConfigResourceCollection>;
    listConfigurationsNext(nextPageLink: string, callback: ServiceCallback<models.SiteConfigResourceCollection>): void;
    listConfigurationsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteConfigResourceCollection>): void;


    /**
     * @summary Gets a list of web app configuration snapshots identifiers. Each
     * element of the list contains a timestamp and the ID of the snapshot.
     *
     * Gets a list of web app configuration snapshots identifiers. Each element of
     * the list contains a timestamp and the ID of the snapshot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteConfigurationSnapshotInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listConfigurationSnapshotInfoNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteConfigurationSnapshotInfoCollection>>;

    /**
     * @summary Gets a list of web app configuration snapshots identifiers. Each
     * element of the list contains a timestamp and the ID of the snapshot.
     *
     * Gets a list of web app configuration snapshots identifiers. Each element of
     * the list contains a timestamp and the ID of the snapshot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteConfigurationSnapshotInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteConfigurationSnapshotInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteConfigurationSnapshotInfoCollection} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listConfigurationSnapshotInfoNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteConfigurationSnapshotInfoCollection>;
    listConfigurationSnapshotInfoNext(nextPageLink: string, callback: ServiceCallback<models.SiteConfigurationSnapshotInfoCollection>): void;
    listConfigurationSnapshotInfoNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteConfigurationSnapshotInfoCollection>): void;


    /**
     * @summary List continuous web jobs for an app, or a deployment slot.
     *
     * List continuous web jobs for an app, or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ContinuousWebJobCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listContinuousWebJobsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ContinuousWebJobCollection>>;

    /**
     * @summary List continuous web jobs for an app, or a deployment slot.
     *
     * List continuous web jobs for an app, or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ContinuousWebJobCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ContinuousWebJobCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ContinuousWebJobCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listContinuousWebJobsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ContinuousWebJobCollection>;
    listContinuousWebJobsNext(nextPageLink: string, callback: ServiceCallback<models.ContinuousWebJobCollection>): void;
    listContinuousWebJobsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ContinuousWebJobCollection>): void;


    /**
     * @summary List deployments for an app, or a deployment slot.
     *
     * List deployments for an app, or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeploymentCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listDeploymentsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeploymentCollection>>;

    /**
     * @summary List deployments for an app, or a deployment slot.
     *
     * List deployments for an app, or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeploymentCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeploymentCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeploymentCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listDeploymentsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeploymentCollection>;
    listDeploymentsNext(nextPageLink: string, callback: ServiceCallback<models.DeploymentCollection>): void;
    listDeploymentsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentCollection>): void;


    /**
     * @summary Lists ownership identifiers for domain associated with web app.
     *
     * Lists ownership identifiers for domain associated with web app.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IdentifierCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listDomainOwnershipIdentifiersNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IdentifierCollection>>;

    /**
     * @summary Lists ownership identifiers for domain associated with web app.
     *
     * Lists ownership identifiers for domain associated with web app.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IdentifierCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IdentifierCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IdentifierCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listDomainOwnershipIdentifiersNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IdentifierCollection>;
    listDomainOwnershipIdentifiersNext(nextPageLink: string, callback: ServiceCallback<models.IdentifierCollection>): void;
    listDomainOwnershipIdentifiersNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IdentifierCollection>): void;


    /**
     * @summary List the functions for a web site, or a deployment slot.
     *
     * List the functions for a web site, or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FunctionEnvelopeCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listFunctionsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FunctionEnvelopeCollection>>;

    /**
     * @summary List the functions for a web site, or a deployment slot.
     *
     * List the functions for a web site, or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FunctionEnvelopeCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FunctionEnvelopeCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FunctionEnvelopeCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listFunctionsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FunctionEnvelopeCollection>;
    listFunctionsNext(nextPageLink: string, callback: ServiceCallback<models.FunctionEnvelopeCollection>): void;
    listFunctionsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FunctionEnvelopeCollection>): void;


    /**
     * @summary Get hostname bindings for an app or a deployment slot.
     *
     * Get hostname bindings for an app or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HostNameBindingCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listHostNameBindingsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HostNameBindingCollection>>;

    /**
     * @summary Get hostname bindings for an app or a deployment slot.
     *
     * Get hostname bindings for an app or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HostNameBindingCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HostNameBindingCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HostNameBindingCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listHostNameBindingsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HostNameBindingCollection>;
    listHostNameBindingsNext(nextPageLink: string, callback: ServiceCallback<models.HostNameBindingCollection>): void;
    listHostNameBindingsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HostNameBindingCollection>): void;


    /**
     * @summary Gets all scale-out instances of an app.
     *
     * Gets all scale-out instances of an app.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WebAppInstanceCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listInstanceIdentifiersNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WebAppInstanceCollection>>;

    /**
     * @summary Gets all scale-out instances of an app.
     *
     * Gets all scale-out instances of an app.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WebAppInstanceCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WebAppInstanceCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WebAppInstanceCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listInstanceIdentifiersNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WebAppInstanceCollection>;
    listInstanceIdentifiersNext(nextPageLink: string, callback: ServiceCallback<models.WebAppInstanceCollection>): void;
    listInstanceIdentifiersNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WebAppInstanceCollection>): void;


    /**
     * @summary Get list of processes for a web site, or a deployment slot, or for
     * a specific scaled-out instance in a web site.
     *
     * Get list of processes for a web site, or a deployment slot, or for a
     * specific scaled-out instance in a web site.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listInstanceProcessesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessInfoCollection>>;

    /**
     * @summary Get list of processes for a web site, or a deployment slot, or for
     * a specific scaled-out instance in a web site.
     *
     * Get list of processes for a web site, or a deployment slot, or for a
     * specific scaled-out instance in a web site.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessInfoCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listInstanceProcessesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessInfoCollection>;
    listInstanceProcessesNext(nextPageLink: string, callback: ServiceCallback<models.ProcessInfoCollection>): void;
    listInstanceProcessesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessInfoCollection>): void;


    /**
     * @summary List module information for a process by its ID for a specific
     * scaled-out instance in a web site.
     *
     * List module information for a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessModuleInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listInstanceProcessModulesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessModuleInfoCollection>>;

    /**
     * @summary List module information for a process by its ID for a specific
     * scaled-out instance in a web site.
     *
     * List module information for a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessModuleInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessModuleInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessModuleInfoCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listInstanceProcessModulesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessModuleInfoCollection>;
    listInstanceProcessModulesNext(nextPageLink: string, callback: ServiceCallback<models.ProcessModuleInfoCollection>): void;
    listInstanceProcessModulesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessModuleInfoCollection>): void;


    /**
     * @summary List the threads in a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * List the threads in a process by its ID for a specific scaled-out instance
     * in a web site.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessThreadInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listInstanceProcessThreadsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessThreadInfoCollection>>;

    /**
     * @summary List the threads in a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * List the threads in a process by its ID for a specific scaled-out instance
     * in a web site.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessThreadInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessThreadInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessThreadInfoCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listInstanceProcessThreadsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessThreadInfoCollection>;
    listInstanceProcessThreadsNext(nextPageLink: string, callback: ServiceCallback<models.ProcessThreadInfoCollection>): void;
    listInstanceProcessThreadsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessThreadInfoCollection>): void;


    /**
     * @summary Gets all metric definitions of an app (or deployment slot, if
     * specified).
     *
     * Gets all metric definitions of an app (or deployment slot, if specified).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceMetricDefinitionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricDefinitionsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceMetricDefinitionCollection>>;

    /**
     * @summary Gets all metric definitions of an app (or deployment slot, if
     * specified).
     *
     * Gets all metric definitions of an app (or deployment slot, if specified).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceMetricDefinitionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceMetricDefinitionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceMetricDefinitionCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetricDefinitionsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceMetricDefinitionCollection>;
    listMetricDefinitionsNext(nextPageLink: string, callback: ServiceCallback<models.ResourceMetricDefinitionCollection>): void;
    listMetricDefinitionsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricDefinitionCollection>): void;


    /**
     * @summary Gets performance metrics of an app (or deployment slot, if
     * specified).
     *
     * Gets performance metrics of an app (or deployment slot, if specified).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceMetricCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceMetricCollection>>;

    /**
     * @summary Gets performance metrics of an app (or deployment slot, if
     * specified).
     *
     * Gets performance metrics of an app (or deployment slot, if specified).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceMetricCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceMetricCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceMetricCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetricsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceMetricCollection>;
    listMetricsNext(nextPageLink: string, callback: ServiceCallback<models.ResourceMetricCollection>): void;
    listMetricsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricCollection>): void;


    /**
     * @summary Gets perfmon counters for web app.
     *
     * Gets perfmon counters for web app.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PerfMonCounterCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listPerfMonCountersNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PerfMonCounterCollection>>;

    /**
     * @summary Gets perfmon counters for web app.
     *
     * Gets perfmon counters for web app.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PerfMonCounterCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PerfMonCounterCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PerfMonCounterCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listPerfMonCountersNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PerfMonCounterCollection>;
    listPerfMonCountersNext(nextPageLink: string, callback: ServiceCallback<models.PerfMonCounterCollection>): void;
    listPerfMonCountersNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PerfMonCounterCollection>): void;


    /**
     * @summary Get list of processes for a web site, or a deployment slot, or for
     * a specific scaled-out instance in a web site.
     *
     * Get list of processes for a web site, or a deployment slot, or for a
     * specific scaled-out instance in a web site.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listProcessesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessInfoCollection>>;

    /**
     * @summary Get list of processes for a web site, or a deployment slot, or for
     * a specific scaled-out instance in a web site.
     *
     * Get list of processes for a web site, or a deployment slot, or for a
     * specific scaled-out instance in a web site.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessInfoCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listProcessesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessInfoCollection>;
    listProcessesNext(nextPageLink: string, callback: ServiceCallback<models.ProcessInfoCollection>): void;
    listProcessesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessInfoCollection>): void;


    /**
     * @summary List module information for a process by its ID for a specific
     * scaled-out instance in a web site.
     *
     * List module information for a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessModuleInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listProcessModulesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessModuleInfoCollection>>;

    /**
     * @summary List module information for a process by its ID for a specific
     * scaled-out instance in a web site.
     *
     * List module information for a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessModuleInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessModuleInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessModuleInfoCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listProcessModulesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessModuleInfoCollection>;
    listProcessModulesNext(nextPageLink: string, callback: ServiceCallback<models.ProcessModuleInfoCollection>): void;
    listProcessModulesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessModuleInfoCollection>): void;


    /**
     * @summary List the threads in a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * List the threads in a process by its ID for a specific scaled-out instance
     * in a web site.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessThreadInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listProcessThreadsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessThreadInfoCollection>>;

    /**
     * @summary List the threads in a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * List the threads in a process by its ID for a specific scaled-out instance
     * in a web site.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessThreadInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessThreadInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessThreadInfoCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listProcessThreadsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessThreadInfoCollection>;
    listProcessThreadsNext(nextPageLink: string, callback: ServiceCallback<models.ProcessThreadInfoCollection>): void;
    listProcessThreadsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessThreadInfoCollection>): void;


    /**
     * @summary Get public certificates for an app or a deployment slot.
     *
     * Get public certificates for an app or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PublicCertificateCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listPublicCertificatesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PublicCertificateCollection>>;

    /**
     * @summary Get public certificates for an app or a deployment slot.
     *
     * Get public certificates for an app or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PublicCertificateCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PublicCertificateCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PublicCertificateCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listPublicCertificatesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PublicCertificateCollection>;
    listPublicCertificatesNext(nextPageLink: string, callback: ServiceCallback<models.PublicCertificateCollection>): void;
    listPublicCertificatesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublicCertificateCollection>): void;


    /**
     * @summary Get list of siteextensions for a web site, or a deployment slot.
     *
     * Get list of siteextensions for a web site, or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteExtensionInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSiteExtensionsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteExtensionInfoCollection>>;

    /**
     * @summary Get list of siteextensions for a web site, or a deployment slot.
     *
     * Get list of siteextensions for a web site, or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteExtensionInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteExtensionInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteExtensionInfoCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSiteExtensionsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteExtensionInfoCollection>;
    listSiteExtensionsNext(nextPageLink: string, callback: ServiceCallback<models.SiteExtensionInfoCollection>): void;
    listSiteExtensionsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteExtensionInfoCollection>): void;


    /**
     * @summary Gets an app's deployment slots.
     *
     * Gets an app's deployment slots.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WebAppCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSlotsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WebAppCollection>>;

    /**
     * @summary Gets an app's deployment slots.
     *
     * Gets an app's deployment slots.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WebAppCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WebAppCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WebAppCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSlotsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WebAppCollection>;
    listSlotsNext(nextPageLink: string, callback: ServiceCallback<models.WebAppCollection>): void;
    listSlotsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WebAppCollection>): void;


    /**
     * @summary Gets existing backups of an app.
     *
     * Gets existing backups of an app.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<BackupItemCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBackupsSlotNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BackupItemCollection>>;

    /**
     * @summary Gets existing backups of an app.
     *
     * Gets existing backups of an app.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {BackupItemCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {BackupItemCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link BackupItemCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBackupsSlotNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BackupItemCollection>;
    listBackupsSlotNext(nextPageLink: string, callback: ServiceCallback<models.BackupItemCollection>): void;
    listBackupsSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupItemCollection>): void;


    /**
     * @summary List the configurations of an app
     *
     * List the configurations of an app
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteConfigResourceCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listConfigurationsSlotNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteConfigResourceCollection>>;

    /**
     * @summary List the configurations of an app
     *
     * List the configurations of an app
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteConfigResourceCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteConfigResourceCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteConfigResourceCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listConfigurationsSlotNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteConfigResourceCollection>;
    listConfigurationsSlotNext(nextPageLink: string, callback: ServiceCallback<models.SiteConfigResourceCollection>): void;
    listConfigurationsSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteConfigResourceCollection>): void;


    /**
     * @summary Gets a list of web app configuration snapshots identifiers. Each
     * element of the list contains a timestamp and the ID of the snapshot.
     *
     * Gets a list of web app configuration snapshots identifiers. Each element of
     * the list contains a timestamp and the ID of the snapshot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteConfigurationSnapshotInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listConfigurationSnapshotInfoSlotNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteConfigurationSnapshotInfoCollection>>;

    /**
     * @summary Gets a list of web app configuration snapshots identifiers. Each
     * element of the list contains a timestamp and the ID of the snapshot.
     *
     * Gets a list of web app configuration snapshots identifiers. Each element of
     * the list contains a timestamp and the ID of the snapshot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteConfigurationSnapshotInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteConfigurationSnapshotInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteConfigurationSnapshotInfoCollection} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listConfigurationSnapshotInfoSlotNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteConfigurationSnapshotInfoCollection>;
    listConfigurationSnapshotInfoSlotNext(nextPageLink: string, callback: ServiceCallback<models.SiteConfigurationSnapshotInfoCollection>): void;
    listConfigurationSnapshotInfoSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteConfigurationSnapshotInfoCollection>): void;


    /**
     * @summary List continuous web jobs for an app, or a deployment slot.
     *
     * List continuous web jobs for an app, or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ContinuousWebJobCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listContinuousWebJobsSlotNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ContinuousWebJobCollection>>;

    /**
     * @summary List continuous web jobs for an app, or a deployment slot.
     *
     * List continuous web jobs for an app, or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ContinuousWebJobCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ContinuousWebJobCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ContinuousWebJobCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listContinuousWebJobsSlotNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ContinuousWebJobCollection>;
    listContinuousWebJobsSlotNext(nextPageLink: string, callback: ServiceCallback<models.ContinuousWebJobCollection>): void;
    listContinuousWebJobsSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ContinuousWebJobCollection>): void;


    /**
     * @summary List deployments for an app, or a deployment slot.
     *
     * List deployments for an app, or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DeploymentCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listDeploymentsSlotNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DeploymentCollection>>;

    /**
     * @summary List deployments for an app, or a deployment slot.
     *
     * List deployments for an app, or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DeploymentCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DeploymentCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DeploymentCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listDeploymentsSlotNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DeploymentCollection>;
    listDeploymentsSlotNext(nextPageLink: string, callback: ServiceCallback<models.DeploymentCollection>): void;
    listDeploymentsSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentCollection>): void;


    /**
     * @summary Lists ownership identifiers for domain associated with web app.
     *
     * Lists ownership identifiers for domain associated with web app.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<IdentifierCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listDomainOwnershipIdentifiersSlotNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IdentifierCollection>>;

    /**
     * @summary Lists ownership identifiers for domain associated with web app.
     *
     * Lists ownership identifiers for domain associated with web app.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {IdentifierCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {IdentifierCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link IdentifierCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listDomainOwnershipIdentifiersSlotNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.IdentifierCollection>;
    listDomainOwnershipIdentifiersSlotNext(nextPageLink: string, callback: ServiceCallback<models.IdentifierCollection>): void;
    listDomainOwnershipIdentifiersSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IdentifierCollection>): void;


    /**
     * @summary List the functions for a web site, or a deployment slot.
     *
     * List the functions for a web site, or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FunctionEnvelopeCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listInstanceFunctionsSlotNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FunctionEnvelopeCollection>>;

    /**
     * @summary List the functions for a web site, or a deployment slot.
     *
     * List the functions for a web site, or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FunctionEnvelopeCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FunctionEnvelopeCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FunctionEnvelopeCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listInstanceFunctionsSlotNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FunctionEnvelopeCollection>;
    listInstanceFunctionsSlotNext(nextPageLink: string, callback: ServiceCallback<models.FunctionEnvelopeCollection>): void;
    listInstanceFunctionsSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FunctionEnvelopeCollection>): void;


    /**
     * @summary Get hostname bindings for an app or a deployment slot.
     *
     * Get hostname bindings for an app or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HostNameBindingCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listHostNameBindingsSlotNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HostNameBindingCollection>>;

    /**
     * @summary Get hostname bindings for an app or a deployment slot.
     *
     * Get hostname bindings for an app or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HostNameBindingCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HostNameBindingCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HostNameBindingCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listHostNameBindingsSlotNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HostNameBindingCollection>;
    listHostNameBindingsSlotNext(nextPageLink: string, callback: ServiceCallback<models.HostNameBindingCollection>): void;
    listHostNameBindingsSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HostNameBindingCollection>): void;


    /**
     * @summary Gets all scale-out instances of an app.
     *
     * Gets all scale-out instances of an app.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WebAppInstanceCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listInstanceIdentifiersSlotNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WebAppInstanceCollection>>;

    /**
     * @summary Gets all scale-out instances of an app.
     *
     * Gets all scale-out instances of an app.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WebAppInstanceCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WebAppInstanceCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WebAppInstanceCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listInstanceIdentifiersSlotNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WebAppInstanceCollection>;
    listInstanceIdentifiersSlotNext(nextPageLink: string, callback: ServiceCallback<models.WebAppInstanceCollection>): void;
    listInstanceIdentifiersSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WebAppInstanceCollection>): void;


    /**
     * @summary Get list of processes for a web site, or a deployment slot, or for
     * a specific scaled-out instance in a web site.
     *
     * Get list of processes for a web site, or a deployment slot, or for a
     * specific scaled-out instance in a web site.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listInstanceProcessesSlotNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessInfoCollection>>;

    /**
     * @summary Get list of processes for a web site, or a deployment slot, or for
     * a specific scaled-out instance in a web site.
     *
     * Get list of processes for a web site, or a deployment slot, or for a
     * specific scaled-out instance in a web site.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessInfoCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listInstanceProcessesSlotNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessInfoCollection>;
    listInstanceProcessesSlotNext(nextPageLink: string, callback: ServiceCallback<models.ProcessInfoCollection>): void;
    listInstanceProcessesSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessInfoCollection>): void;


    /**
     * @summary List module information for a process by its ID for a specific
     * scaled-out instance in a web site.
     *
     * List module information for a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessModuleInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listInstanceProcessModulesSlotNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessModuleInfoCollection>>;

    /**
     * @summary List module information for a process by its ID for a specific
     * scaled-out instance in a web site.
     *
     * List module information for a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessModuleInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessModuleInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessModuleInfoCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listInstanceProcessModulesSlotNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessModuleInfoCollection>;
    listInstanceProcessModulesSlotNext(nextPageLink: string, callback: ServiceCallback<models.ProcessModuleInfoCollection>): void;
    listInstanceProcessModulesSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessModuleInfoCollection>): void;


    /**
     * @summary List the threads in a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * List the threads in a process by its ID for a specific scaled-out instance
     * in a web site.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessThreadInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listInstanceProcessThreadsSlotNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessThreadInfoCollection>>;

    /**
     * @summary List the threads in a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * List the threads in a process by its ID for a specific scaled-out instance
     * in a web site.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessThreadInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessThreadInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessThreadInfoCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listInstanceProcessThreadsSlotNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessThreadInfoCollection>;
    listInstanceProcessThreadsSlotNext(nextPageLink: string, callback: ServiceCallback<models.ProcessThreadInfoCollection>): void;
    listInstanceProcessThreadsSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessThreadInfoCollection>): void;


    /**
     * @summary Gets all metric definitions of an app (or deployment slot, if
     * specified).
     *
     * Gets all metric definitions of an app (or deployment slot, if specified).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceMetricDefinitionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricDefinitionsSlotNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceMetricDefinitionCollection>>;

    /**
     * @summary Gets all metric definitions of an app (or deployment slot, if
     * specified).
     *
     * Gets all metric definitions of an app (or deployment slot, if specified).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceMetricDefinitionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceMetricDefinitionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceMetricDefinitionCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetricDefinitionsSlotNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceMetricDefinitionCollection>;
    listMetricDefinitionsSlotNext(nextPageLink: string, callback: ServiceCallback<models.ResourceMetricDefinitionCollection>): void;
    listMetricDefinitionsSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricDefinitionCollection>): void;


    /**
     * @summary Gets performance metrics of an app (or deployment slot, if
     * specified).
     *
     * Gets performance metrics of an app (or deployment slot, if specified).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceMetricCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricsSlotNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceMetricCollection>>;

    /**
     * @summary Gets performance metrics of an app (or deployment slot, if
     * specified).
     *
     * Gets performance metrics of an app (or deployment slot, if specified).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceMetricCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceMetricCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceMetricCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetricsSlotNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceMetricCollection>;
    listMetricsSlotNext(nextPageLink: string, callback: ServiceCallback<models.ResourceMetricCollection>): void;
    listMetricsSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricCollection>): void;


    /**
     * @summary Gets perfmon counters for web app.
     *
     * Gets perfmon counters for web app.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PerfMonCounterCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listPerfMonCountersSlotNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PerfMonCounterCollection>>;

    /**
     * @summary Gets perfmon counters for web app.
     *
     * Gets perfmon counters for web app.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PerfMonCounterCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PerfMonCounterCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PerfMonCounterCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listPerfMonCountersSlotNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PerfMonCounterCollection>;
    listPerfMonCountersSlotNext(nextPageLink: string, callback: ServiceCallback<models.PerfMonCounterCollection>): void;
    listPerfMonCountersSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PerfMonCounterCollection>): void;


    /**
     * @summary Get list of processes for a web site, or a deployment slot, or for
     * a specific scaled-out instance in a web site.
     *
     * Get list of processes for a web site, or a deployment slot, or for a
     * specific scaled-out instance in a web site.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listProcessesSlotNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessInfoCollection>>;

    /**
     * @summary Get list of processes for a web site, or a deployment slot, or for
     * a specific scaled-out instance in a web site.
     *
     * Get list of processes for a web site, or a deployment slot, or for a
     * specific scaled-out instance in a web site.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessInfoCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listProcessesSlotNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessInfoCollection>;
    listProcessesSlotNext(nextPageLink: string, callback: ServiceCallback<models.ProcessInfoCollection>): void;
    listProcessesSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessInfoCollection>): void;


    /**
     * @summary List module information for a process by its ID for a specific
     * scaled-out instance in a web site.
     *
     * List module information for a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessModuleInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listProcessModulesSlotNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessModuleInfoCollection>>;

    /**
     * @summary List module information for a process by its ID for a specific
     * scaled-out instance in a web site.
     *
     * List module information for a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessModuleInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessModuleInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessModuleInfoCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listProcessModulesSlotNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessModuleInfoCollection>;
    listProcessModulesSlotNext(nextPageLink: string, callback: ServiceCallback<models.ProcessModuleInfoCollection>): void;
    listProcessModulesSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessModuleInfoCollection>): void;


    /**
     * @summary List the threads in a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * List the threads in a process by its ID for a specific scaled-out instance
     * in a web site.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProcessThreadInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listProcessThreadsSlotNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProcessThreadInfoCollection>>;

    /**
     * @summary List the threads in a process by its ID for a specific scaled-out
     * instance in a web site.
     *
     * List the threads in a process by its ID for a specific scaled-out instance
     * in a web site.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProcessThreadInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProcessThreadInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProcessThreadInfoCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listProcessThreadsSlotNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProcessThreadInfoCollection>;
    listProcessThreadsSlotNext(nextPageLink: string, callback: ServiceCallback<models.ProcessThreadInfoCollection>): void;
    listProcessThreadsSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProcessThreadInfoCollection>): void;


    /**
     * @summary Get public certificates for an app or a deployment slot.
     *
     * Get public certificates for an app or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PublicCertificateCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listPublicCertificatesSlotNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PublicCertificateCollection>>;

    /**
     * @summary Get public certificates for an app or a deployment slot.
     *
     * Get public certificates for an app or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PublicCertificateCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PublicCertificateCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PublicCertificateCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listPublicCertificatesSlotNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PublicCertificateCollection>;
    listPublicCertificatesSlotNext(nextPageLink: string, callback: ServiceCallback<models.PublicCertificateCollection>): void;
    listPublicCertificatesSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublicCertificateCollection>): void;


    /**
     * @summary Get list of siteextensions for a web site, or a deployment slot.
     *
     * Get list of siteextensions for a web site, or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SiteExtensionInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSiteExtensionsSlotNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SiteExtensionInfoCollection>>;

    /**
     * @summary Get list of siteextensions for a web site, or a deployment slot.
     *
     * Get list of siteextensions for a web site, or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SiteExtensionInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SiteExtensionInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SiteExtensionInfoCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSiteExtensionsSlotNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SiteExtensionInfoCollection>;
    listSiteExtensionsSlotNext(nextPageLink: string, callback: ServiceCallback<models.SiteExtensionInfoCollection>): void;
    listSiteExtensionsSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteExtensionInfoCollection>): void;


    /**
     * @summary Get the difference in configuration settings between two web app
     * slots.
     *
     * Get the difference in configuration settings between two web app slots.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SlotDifferenceCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSlotDifferencesSlotNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SlotDifferenceCollection>>;

    /**
     * @summary Get the difference in configuration settings between two web app
     * slots.
     *
     * Get the difference in configuration settings between two web app slots.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SlotDifferenceCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SlotDifferenceCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SlotDifferenceCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSlotDifferencesSlotNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SlotDifferenceCollection>;
    listSlotDifferencesSlotNext(nextPageLink: string, callback: ServiceCallback<models.SlotDifferenceCollection>): void;
    listSlotDifferencesSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SlotDifferenceCollection>): void;


    /**
     * @summary Returns all Snapshots to the user.
     *
     * Returns all Snapshots to the user.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SnapshotCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSnapshotsSlotNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SnapshotCollection>>;

    /**
     * @summary Returns all Snapshots to the user.
     *
     * Returns all Snapshots to the user.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SnapshotCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SnapshotCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SnapshotCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSnapshotsSlotNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SnapshotCollection>;
    listSnapshotsSlotNext(nextPageLink: string, callback: ServiceCallback<models.SnapshotCollection>): void;
    listSnapshotsSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SnapshotCollection>): void;


    /**
     * @summary Returns all Snapshots to the user from DRSecondary endpoint.
     *
     * Returns all Snapshots to the user from DRSecondary endpoint.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SnapshotCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSnapshotsFromDRSecondarySlotNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SnapshotCollection>>;

    /**
     * @summary Returns all Snapshots to the user from DRSecondary endpoint.
     *
     * Returns all Snapshots to the user from DRSecondary endpoint.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SnapshotCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SnapshotCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SnapshotCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSnapshotsFromDRSecondarySlotNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SnapshotCollection>;
    listSnapshotsFromDRSecondarySlotNext(nextPageLink: string, callback: ServiceCallback<models.SnapshotCollection>): void;
    listSnapshotsFromDRSecondarySlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SnapshotCollection>): void;


    /**
     * @summary List triggered web jobs for an app, or a deployment slot.
     *
     * List triggered web jobs for an app, or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TriggeredWebJobCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listTriggeredWebJobsSlotNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TriggeredWebJobCollection>>;

    /**
     * @summary List triggered web jobs for an app, or a deployment slot.
     *
     * List triggered web jobs for an app, or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TriggeredWebJobCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TriggeredWebJobCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TriggeredWebJobCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listTriggeredWebJobsSlotNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TriggeredWebJobCollection>;
    listTriggeredWebJobsSlotNext(nextPageLink: string, callback: ServiceCallback<models.TriggeredWebJobCollection>): void;
    listTriggeredWebJobsSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TriggeredWebJobCollection>): void;


    /**
     * @summary List a triggered web job's history for an app, or a deployment
     * slot.
     *
     * List a triggered web job's history for an app, or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TriggeredJobHistoryCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listTriggeredWebJobHistorySlotNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TriggeredJobHistoryCollection>>;

    /**
     * @summary List a triggered web job's history for an app, or a deployment
     * slot.
     *
     * List a triggered web job's history for an app, or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TriggeredJobHistoryCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TriggeredJobHistoryCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TriggeredJobHistoryCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listTriggeredWebJobHistorySlotNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TriggeredJobHistoryCollection>;
    listTriggeredWebJobHistorySlotNext(nextPageLink: string, callback: ServiceCallback<models.TriggeredJobHistoryCollection>): void;
    listTriggeredWebJobHistorySlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TriggeredJobHistoryCollection>): void;


    /**
     * @summary Gets the quota usage information of an app (or deployment slot, if
     * specified).
     *
     * Gets the quota usage information of an app (or deployment slot, if
     * specified).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CsmUsageQuotaCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listUsagesSlotNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CsmUsageQuotaCollection>>;

    /**
     * @summary Gets the quota usage information of an app (or deployment slot, if
     * specified).
     *
     * Gets the quota usage information of an app (or deployment slot, if
     * specified).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CsmUsageQuotaCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CsmUsageQuotaCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CsmUsageQuotaCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listUsagesSlotNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CsmUsageQuotaCollection>;
    listUsagesSlotNext(nextPageLink: string, callback: ServiceCallback<models.CsmUsageQuotaCollection>): void;
    listUsagesSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CsmUsageQuotaCollection>): void;


    /**
     * @summary List webjobs for an app, or a deployment slot.
     *
     * List webjobs for an app, or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WebJobCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWebJobsSlotNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WebJobCollection>>;

    /**
     * @summary List webjobs for an app, or a deployment slot.
     *
     * List webjobs for an app, or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WebJobCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WebJobCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WebJobCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listWebJobsSlotNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WebJobCollection>;
    listWebJobsSlotNext(nextPageLink: string, callback: ServiceCallback<models.WebJobCollection>): void;
    listWebJobsSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WebJobCollection>): void;


    /**
     * @summary Get the difference in configuration settings between two web app
     * slots.
     *
     * Get the difference in configuration settings between two web app slots.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SlotDifferenceCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSlotDifferencesFromProductionNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SlotDifferenceCollection>>;

    /**
     * @summary Get the difference in configuration settings between two web app
     * slots.
     *
     * Get the difference in configuration settings between two web app slots.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SlotDifferenceCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SlotDifferenceCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SlotDifferenceCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSlotDifferencesFromProductionNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SlotDifferenceCollection>;
    listSlotDifferencesFromProductionNext(nextPageLink: string, callback: ServiceCallback<models.SlotDifferenceCollection>): void;
    listSlotDifferencesFromProductionNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SlotDifferenceCollection>): void;


    /**
     * @summary Returns all Snapshots to the user.
     *
     * Returns all Snapshots to the user.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SnapshotCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSnapshotsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SnapshotCollection>>;

    /**
     * @summary Returns all Snapshots to the user.
     *
     * Returns all Snapshots to the user.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SnapshotCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SnapshotCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SnapshotCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSnapshotsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SnapshotCollection>;
    listSnapshotsNext(nextPageLink: string, callback: ServiceCallback<models.SnapshotCollection>): void;
    listSnapshotsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SnapshotCollection>): void;


    /**
     * @summary Returns all Snapshots to the user from DRSecondary endpoint.
     *
     * Returns all Snapshots to the user from DRSecondary endpoint.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SnapshotCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSnapshotsFromDRSecondaryNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SnapshotCollection>>;

    /**
     * @summary Returns all Snapshots to the user from DRSecondary endpoint.
     *
     * Returns all Snapshots to the user from DRSecondary endpoint.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SnapshotCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SnapshotCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SnapshotCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSnapshotsFromDRSecondaryNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SnapshotCollection>;
    listSnapshotsFromDRSecondaryNext(nextPageLink: string, callback: ServiceCallback<models.SnapshotCollection>): void;
    listSnapshotsFromDRSecondaryNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SnapshotCollection>): void;


    /**
     * @summary List triggered web jobs for an app, or a deployment slot.
     *
     * List triggered web jobs for an app, or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TriggeredWebJobCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listTriggeredWebJobsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TriggeredWebJobCollection>>;

    /**
     * @summary List triggered web jobs for an app, or a deployment slot.
     *
     * List triggered web jobs for an app, or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TriggeredWebJobCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TriggeredWebJobCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TriggeredWebJobCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listTriggeredWebJobsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TriggeredWebJobCollection>;
    listTriggeredWebJobsNext(nextPageLink: string, callback: ServiceCallback<models.TriggeredWebJobCollection>): void;
    listTriggeredWebJobsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TriggeredWebJobCollection>): void;


    /**
     * @summary List a triggered web job's history for an app, or a deployment
     * slot.
     *
     * List a triggered web job's history for an app, or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TriggeredJobHistoryCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listTriggeredWebJobHistoryNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TriggeredJobHistoryCollection>>;

    /**
     * @summary List a triggered web job's history for an app, or a deployment
     * slot.
     *
     * List a triggered web job's history for an app, or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TriggeredJobHistoryCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TriggeredJobHistoryCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TriggeredJobHistoryCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listTriggeredWebJobHistoryNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TriggeredJobHistoryCollection>;
    listTriggeredWebJobHistoryNext(nextPageLink: string, callback: ServiceCallback<models.TriggeredJobHistoryCollection>): void;
    listTriggeredWebJobHistoryNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TriggeredJobHistoryCollection>): void;


    /**
     * @summary Gets the quota usage information of an app (or deployment slot, if
     * specified).
     *
     * Gets the quota usage information of an app (or deployment slot, if
     * specified).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CsmUsageQuotaCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listUsagesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CsmUsageQuotaCollection>>;

    /**
     * @summary Gets the quota usage information of an app (or deployment slot, if
     * specified).
     *
     * Gets the quota usage information of an app (or deployment slot, if
     * specified).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CsmUsageQuotaCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CsmUsageQuotaCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CsmUsageQuotaCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listUsagesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CsmUsageQuotaCollection>;
    listUsagesNext(nextPageLink: string, callback: ServiceCallback<models.CsmUsageQuotaCollection>): void;
    listUsagesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CsmUsageQuotaCollection>): void;


    /**
     * @summary List webjobs for an app, or a deployment slot.
     *
     * List webjobs for an app, or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WebJobCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWebJobsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WebJobCollection>>;

    /**
     * @summary List webjobs for an app, or a deployment slot.
     *
     * List webjobs for an app, or a deployment slot.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WebJobCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WebJobCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WebJobCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listWebJobsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WebJobCollection>;
    listWebJobsNext(nextPageLink: string, callback: ServiceCallback<models.WebJobCollection>): void;
    listWebJobsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WebJobCollection>): void;
}

/**
 * @class
 * AppServiceEnvironments
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the WebSiteManagementClient.
 */
export interface AppServiceEnvironments {


    /**
     * @summary Get all App Service Environments for a subscription.
     *
     * Get all App Service Environments for a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppServiceEnvironmentCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppServiceEnvironmentCollection>>;

    /**
     * @summary Get all App Service Environments for a subscription.
     *
     * Get all App Service Environments for a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppServiceEnvironmentCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppServiceEnvironmentCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppServiceEnvironmentCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppServiceEnvironmentCollection>;
    list(callback: ServiceCallback<models.AppServiceEnvironmentCollection>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppServiceEnvironmentCollection>): void;


    /**
     * @summary Get all App Service Environments in a resource group.
     *
     * Get all App Service Environments in a resource group.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppServiceEnvironmentCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppServiceEnvironmentCollection>>;

    /**
     * @summary Get all App Service Environments in a resource group.
     *
     * Get all App Service Environments in a resource group.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppServiceEnvironmentCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppServiceEnvironmentCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppServiceEnvironmentCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppServiceEnvironmentCollection>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.AppServiceEnvironmentCollection>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppServiceEnvironmentCollection>): void;


    /**
     * @summary Get the properties of an App Service Environment.
     *
     * Get the properties of an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppServiceEnvironmentResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppServiceEnvironmentResource>>;

    /**
     * @summary Get the properties of an App Service Environment.
     *
     * Get the properties of an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppServiceEnvironmentResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppServiceEnvironmentResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppServiceEnvironmentResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppServiceEnvironmentResource>;
    get(resourceGroupName: string, name: string, callback: ServiceCallback<models.AppServiceEnvironmentResource>): void;
    get(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppServiceEnvironmentResource>): void;


    /**
     * @summary Create or update an App Service Environment.
     *
     * Create or update an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} hostingEnvironmentEnvelope Configuration details of the App
     * Service Environment.
     *
     * @param {string} hostingEnvironmentEnvelope.appServiceEnvironmentResourceName
     * Name of the App Service Environment.
     *
     * @param {string}
     * hostingEnvironmentEnvelope.appServiceEnvironmentResourceLocation Location of
     * the App Service Environment, e.g. "West US".
     *
     * @param {string} [hostingEnvironmentEnvelope.vnetName] Name of the Virtual
     * Network for the App Service Environment.
     *
     * @param {string} [hostingEnvironmentEnvelope.vnetResourceGroupName] Resource
     * group of the Virtual Network.
     *
     * @param {string} [hostingEnvironmentEnvelope.vnetSubnetName] Subnet of the
     * Virtual Network.
     *
     * @param {object} hostingEnvironmentEnvelope.virtualNetwork Description of the
     * Virtual Network.
     *
     * @param {string} [hostingEnvironmentEnvelope.virtualNetwork.id] Resource id
     * of the Virtual Network.
     *
     * @param {string} [hostingEnvironmentEnvelope.virtualNetwork.subnet] Subnet
     * within the Virtual Network.
     *
     * @param {string} [hostingEnvironmentEnvelope.internalLoadBalancingMode]
     * Specifies which endpoints to serve internally in the Virtual Network for the
     * App Service Environment. Possible values include: 'None', 'Web',
     * 'Publishing'
     *
     * @param {string} [hostingEnvironmentEnvelope.multiSize] Front-end VM size,
     * e.g. "Medium", "Large".
     *
     * @param {number} [hostingEnvironmentEnvelope.multiRoleCount] Number of
     * front-end instances.
     *
     * @param {array} hostingEnvironmentEnvelope.workerPools Description of worker
     * pools with worker size IDs, VM sizes, and number of workers in each pool.
     *
     * @param {number} [hostingEnvironmentEnvelope.ipsslAddressCount] Number of IP
     * SSL addresses reserved for the App Service Environment.
     *
     * @param {string} [hostingEnvironmentEnvelope.dnsSuffix] DNS suffix of the App
     * Service Environment.
     *
     * @param {array} [hostingEnvironmentEnvelope.networkAccessControlList] Access
     * control list for controlling traffic to the App Service Environment.
     *
     * @param {number} [hostingEnvironmentEnvelope.frontEndScaleFactor] Scale
     * factor for front-ends.
     *
     * @param {string} [hostingEnvironmentEnvelope.apiManagementAccountId] API
     * Management Account associated with the App Service Environment.
     *
     * @param {boolean} [hostingEnvironmentEnvelope.suspended] <code>true</code> if
     * the App Service Environment is suspended; otherwise, <code>false</code>. The
     * environment can be suspended, e.g. when the management endpoint is no longer
     * available
     * (most likely because NSG blocked the incoming traffic).
     *
     * @param {boolean} [hostingEnvironmentEnvelope.dynamicCacheEnabled] True/false
     * indicating whether the App Service Environment is suspended. The environment
     * can be suspended e.g. when the management endpoint is no longer available
     * (most likely because NSG blocked the incoming traffic).
     *
     * @param {array} [hostingEnvironmentEnvelope.clusterSettings] Custom settings
     * for changing the behavior of the App Service Environment.
     *
     * @param {array} [hostingEnvironmentEnvelope.userWhitelistedIpRanges] User
     * added ip ranges to whitelist on ASE db
     *
     * @param {boolean} [hostingEnvironmentEnvelope.hasLinuxWorkers] Flag that
     * displays whether an ASE has linux workers or not
     *
     * @param {string} [hostingEnvironmentEnvelope.sslCertKeyVaultId] Key Vault ID
     * for ILB App Service Environment default SSL certificate
     *
     * @param {string} [hostingEnvironmentEnvelope.sslCertKeyVaultSecretName] Key
     * Vault Secret Name for ILB App Service Environment default SSL certificate
     *
     * @param {string} [hostingEnvironmentEnvelope.kind] Kind of resource.
     *
     * @param {string} hostingEnvironmentEnvelope.location Resource Location.
     *
     * @param {object} [hostingEnvironmentEnvelope.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppServiceEnvironmentResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, name: string, hostingEnvironmentEnvelope: models.AppServiceEnvironmentResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppServiceEnvironmentResource>>;

    /**
     * @summary Create or update an App Service Environment.
     *
     * Create or update an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} hostingEnvironmentEnvelope Configuration details of the App
     * Service Environment.
     *
     * @param {string} hostingEnvironmentEnvelope.appServiceEnvironmentResourceName
     * Name of the App Service Environment.
     *
     * @param {string}
     * hostingEnvironmentEnvelope.appServiceEnvironmentResourceLocation Location of
     * the App Service Environment, e.g. "West US".
     *
     * @param {string} [hostingEnvironmentEnvelope.vnetName] Name of the Virtual
     * Network for the App Service Environment.
     *
     * @param {string} [hostingEnvironmentEnvelope.vnetResourceGroupName] Resource
     * group of the Virtual Network.
     *
     * @param {string} [hostingEnvironmentEnvelope.vnetSubnetName] Subnet of the
     * Virtual Network.
     *
     * @param {object} hostingEnvironmentEnvelope.virtualNetwork Description of the
     * Virtual Network.
     *
     * @param {string} [hostingEnvironmentEnvelope.virtualNetwork.id] Resource id
     * of the Virtual Network.
     *
     * @param {string} [hostingEnvironmentEnvelope.virtualNetwork.subnet] Subnet
     * within the Virtual Network.
     *
     * @param {string} [hostingEnvironmentEnvelope.internalLoadBalancingMode]
     * Specifies which endpoints to serve internally in the Virtual Network for the
     * App Service Environment. Possible values include: 'None', 'Web',
     * 'Publishing'
     *
     * @param {string} [hostingEnvironmentEnvelope.multiSize] Front-end VM size,
     * e.g. "Medium", "Large".
     *
     * @param {number} [hostingEnvironmentEnvelope.multiRoleCount] Number of
     * front-end instances.
     *
     * @param {array} hostingEnvironmentEnvelope.workerPools Description of worker
     * pools with worker size IDs, VM sizes, and number of workers in each pool.
     *
     * @param {number} [hostingEnvironmentEnvelope.ipsslAddressCount] Number of IP
     * SSL addresses reserved for the App Service Environment.
     *
     * @param {string} [hostingEnvironmentEnvelope.dnsSuffix] DNS suffix of the App
     * Service Environment.
     *
     * @param {array} [hostingEnvironmentEnvelope.networkAccessControlList] Access
     * control list for controlling traffic to the App Service Environment.
     *
     * @param {number} [hostingEnvironmentEnvelope.frontEndScaleFactor] Scale
     * factor for front-ends.
     *
     * @param {string} [hostingEnvironmentEnvelope.apiManagementAccountId] API
     * Management Account associated with the App Service Environment.
     *
     * @param {boolean} [hostingEnvironmentEnvelope.suspended] <code>true</code> if
     * the App Service Environment is suspended; otherwise, <code>false</code>. The
     * environment can be suspended, e.g. when the management endpoint is no longer
     * available
     * (most likely because NSG blocked the incoming traffic).
     *
     * @param {boolean} [hostingEnvironmentEnvelope.dynamicCacheEnabled] True/false
     * indicating whether the App Service Environment is suspended. The environment
     * can be suspended e.g. when the management endpoint is no longer available
     * (most likely because NSG blocked the incoming traffic).
     *
     * @param {array} [hostingEnvironmentEnvelope.clusterSettings] Custom settings
     * for changing the behavior of the App Service Environment.
     *
     * @param {array} [hostingEnvironmentEnvelope.userWhitelistedIpRanges] User
     * added ip ranges to whitelist on ASE db
     *
     * @param {boolean} [hostingEnvironmentEnvelope.hasLinuxWorkers] Flag that
     * displays whether an ASE has linux workers or not
     *
     * @param {string} [hostingEnvironmentEnvelope.sslCertKeyVaultId] Key Vault ID
     * for ILB App Service Environment default SSL certificate
     *
     * @param {string} [hostingEnvironmentEnvelope.sslCertKeyVaultSecretName] Key
     * Vault Secret Name for ILB App Service Environment default SSL certificate
     *
     * @param {string} [hostingEnvironmentEnvelope.kind] Kind of resource.
     *
     * @param {string} hostingEnvironmentEnvelope.location Resource Location.
     *
     * @param {object} [hostingEnvironmentEnvelope.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppServiceEnvironmentResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppServiceEnvironmentResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppServiceEnvironmentResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, name: string, hostingEnvironmentEnvelope: models.AppServiceEnvironmentResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppServiceEnvironmentResource>;
    createOrUpdate(resourceGroupName: string, name: string, hostingEnvironmentEnvelope: models.AppServiceEnvironmentResource, callback: ServiceCallback<models.AppServiceEnvironmentResource>): void;
    createOrUpdate(resourceGroupName: string, name: string, hostingEnvironmentEnvelope: models.AppServiceEnvironmentResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppServiceEnvironmentResource>): void;


    /**
     * @summary Delete an App Service Environment.
     *
     * Delete an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.forceDelete] Specify <code>true</code> to force
     * the deletion even if the App Service Environment contains resources. The
     * default is <code>false</code>.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { forceDelete? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete an App Service Environment.
     *
     * Delete an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.forceDelete] Specify <code>true</code> to force
     * the deletion even if the App Service Environment contains resources. The
     * default is <code>false</code>.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, name: string, options?: { forceDelete? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, name: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, name: string, options: { forceDelete? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Create or update an App Service Environment.
     *
     * Create or update an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} hostingEnvironmentEnvelope Configuration details of the App
     * Service Environment.
     *
     * @param {string}
     * hostingEnvironmentEnvelope.appServiceEnvironmentPatchResourceName Name of
     * the App Service Environment.
     *
     * @param {string} hostingEnvironmentEnvelope.location Location of the App
     * Service Environment, e.g. "West US".
     *
     * @param {string} [hostingEnvironmentEnvelope.vnetName] Name of the Virtual
     * Network for the App Service Environment.
     *
     * @param {string} [hostingEnvironmentEnvelope.vnetResourceGroupName] Resource
     * group of the Virtual Network.
     *
     * @param {string} [hostingEnvironmentEnvelope.vnetSubnetName] Subnet of the
     * Virtual Network.
     *
     * @param {object} hostingEnvironmentEnvelope.virtualNetwork Description of the
     * Virtual Network.
     *
     * @param {string} [hostingEnvironmentEnvelope.virtualNetwork.id] Resource id
     * of the Virtual Network.
     *
     * @param {string} [hostingEnvironmentEnvelope.virtualNetwork.subnet] Subnet
     * within the Virtual Network.
     *
     * @param {string} [hostingEnvironmentEnvelope.internalLoadBalancingMode]
     * Specifies which endpoints to serve internally in the Virtual Network for the
     * App Service Environment. Possible values include: 'None', 'Web',
     * 'Publishing'
     *
     * @param {string} [hostingEnvironmentEnvelope.multiSize] Front-end VM size,
     * e.g. "Medium", "Large".
     *
     * @param {number} [hostingEnvironmentEnvelope.multiRoleCount] Number of
     * front-end instances.
     *
     * @param {array} hostingEnvironmentEnvelope.workerPools Description of worker
     * pools with worker size IDs, VM sizes, and number of workers in each pool.
     *
     * @param {number} [hostingEnvironmentEnvelope.ipsslAddressCount] Number of IP
     * SSL addresses reserved for the App Service Environment.
     *
     * @param {string} [hostingEnvironmentEnvelope.dnsSuffix] DNS suffix of the App
     * Service Environment.
     *
     * @param {array} [hostingEnvironmentEnvelope.networkAccessControlList] Access
     * control list for controlling traffic to the App Service Environment.
     *
     * @param {number} [hostingEnvironmentEnvelope.frontEndScaleFactor] Scale
     * factor for front-ends.
     *
     * @param {string} [hostingEnvironmentEnvelope.apiManagementAccountId] API
     * Management Account associated with the App Service Environment.
     *
     * @param {boolean} [hostingEnvironmentEnvelope.suspended] <code>true</code> if
     * the App Service Environment is suspended; otherwise, <code>false</code>. The
     * environment can be suspended, e.g. when the management endpoint is no longer
     * available
     * (most likely because NSG blocked the incoming traffic).
     *
     * @param {boolean} [hostingEnvironmentEnvelope.dynamicCacheEnabled] True/false
     * indicating whether the App Service Environment is suspended. The environment
     * can be suspended e.g. when the management endpoint is no longer available
     * (most likely because NSG blocked the incoming traffic).
     *
     * @param {array} [hostingEnvironmentEnvelope.clusterSettings] Custom settings
     * for changing the behavior of the App Service Environment.
     *
     * @param {array} [hostingEnvironmentEnvelope.userWhitelistedIpRanges] User
     * added ip ranges to whitelist on ASE db
     *
     * @param {boolean} [hostingEnvironmentEnvelope.hasLinuxWorkers] Flag that
     * displays whether an ASE has linux workers or not
     *
     * @param {string} [hostingEnvironmentEnvelope.sslCertKeyVaultId] Key Vault ID
     * for ILB App Service Environment default SSL certificate
     *
     * @param {string} [hostingEnvironmentEnvelope.sslCertKeyVaultSecretName] Key
     * Vault Secret Name for ILB App Service Environment default SSL certificate
     *
     * @param {string} [hostingEnvironmentEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppServiceEnvironmentResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, name: string, hostingEnvironmentEnvelope: models.AppServiceEnvironmentPatchResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppServiceEnvironmentResource>>;

    /**
     * @summary Create or update an App Service Environment.
     *
     * Create or update an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} hostingEnvironmentEnvelope Configuration details of the App
     * Service Environment.
     *
     * @param {string}
     * hostingEnvironmentEnvelope.appServiceEnvironmentPatchResourceName Name of
     * the App Service Environment.
     *
     * @param {string} hostingEnvironmentEnvelope.location Location of the App
     * Service Environment, e.g. "West US".
     *
     * @param {string} [hostingEnvironmentEnvelope.vnetName] Name of the Virtual
     * Network for the App Service Environment.
     *
     * @param {string} [hostingEnvironmentEnvelope.vnetResourceGroupName] Resource
     * group of the Virtual Network.
     *
     * @param {string} [hostingEnvironmentEnvelope.vnetSubnetName] Subnet of the
     * Virtual Network.
     *
     * @param {object} hostingEnvironmentEnvelope.virtualNetwork Description of the
     * Virtual Network.
     *
     * @param {string} [hostingEnvironmentEnvelope.virtualNetwork.id] Resource id
     * of the Virtual Network.
     *
     * @param {string} [hostingEnvironmentEnvelope.virtualNetwork.subnet] Subnet
     * within the Virtual Network.
     *
     * @param {string} [hostingEnvironmentEnvelope.internalLoadBalancingMode]
     * Specifies which endpoints to serve internally in the Virtual Network for the
     * App Service Environment. Possible values include: 'None', 'Web',
     * 'Publishing'
     *
     * @param {string} [hostingEnvironmentEnvelope.multiSize] Front-end VM size,
     * e.g. "Medium", "Large".
     *
     * @param {number} [hostingEnvironmentEnvelope.multiRoleCount] Number of
     * front-end instances.
     *
     * @param {array} hostingEnvironmentEnvelope.workerPools Description of worker
     * pools with worker size IDs, VM sizes, and number of workers in each pool.
     *
     * @param {number} [hostingEnvironmentEnvelope.ipsslAddressCount] Number of IP
     * SSL addresses reserved for the App Service Environment.
     *
     * @param {string} [hostingEnvironmentEnvelope.dnsSuffix] DNS suffix of the App
     * Service Environment.
     *
     * @param {array} [hostingEnvironmentEnvelope.networkAccessControlList] Access
     * control list for controlling traffic to the App Service Environment.
     *
     * @param {number} [hostingEnvironmentEnvelope.frontEndScaleFactor] Scale
     * factor for front-ends.
     *
     * @param {string} [hostingEnvironmentEnvelope.apiManagementAccountId] API
     * Management Account associated with the App Service Environment.
     *
     * @param {boolean} [hostingEnvironmentEnvelope.suspended] <code>true</code> if
     * the App Service Environment is suspended; otherwise, <code>false</code>. The
     * environment can be suspended, e.g. when the management endpoint is no longer
     * available
     * (most likely because NSG blocked the incoming traffic).
     *
     * @param {boolean} [hostingEnvironmentEnvelope.dynamicCacheEnabled] True/false
     * indicating whether the App Service Environment is suspended. The environment
     * can be suspended e.g. when the management endpoint is no longer available
     * (most likely because NSG blocked the incoming traffic).
     *
     * @param {array} [hostingEnvironmentEnvelope.clusterSettings] Custom settings
     * for changing the behavior of the App Service Environment.
     *
     * @param {array} [hostingEnvironmentEnvelope.userWhitelistedIpRanges] User
     * added ip ranges to whitelist on ASE db
     *
     * @param {boolean} [hostingEnvironmentEnvelope.hasLinuxWorkers] Flag that
     * displays whether an ASE has linux workers or not
     *
     * @param {string} [hostingEnvironmentEnvelope.sslCertKeyVaultId] Key Vault ID
     * for ILB App Service Environment default SSL certificate
     *
     * @param {string} [hostingEnvironmentEnvelope.sslCertKeyVaultSecretName] Key
     * Vault Secret Name for ILB App Service Environment default SSL certificate
     *
     * @param {string} [hostingEnvironmentEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppServiceEnvironmentResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppServiceEnvironmentResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppServiceEnvironmentResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, name: string, hostingEnvironmentEnvelope: models.AppServiceEnvironmentPatchResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppServiceEnvironmentResource>;
    update(resourceGroupName: string, name: string, hostingEnvironmentEnvelope: models.AppServiceEnvironmentPatchResource, callback: ServiceCallback<models.AppServiceEnvironmentResource>): void;
    update(resourceGroupName: string, name: string, hostingEnvironmentEnvelope: models.AppServiceEnvironmentPatchResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppServiceEnvironmentResource>): void;


    /**
     * @summary Get the used, available, and total worker capacity an App Service
     * Environment.
     *
     * Get the used, available, and total worker capacity an App Service
     * Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StampCapacityCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listCapacitiesWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StampCapacityCollection>>;

    /**
     * @summary Get the used, available, and total worker capacity an App Service
     * Environment.
     *
     * Get the used, available, and total worker capacity an App Service
     * Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StampCapacityCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StampCapacityCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StampCapacityCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listCapacities(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StampCapacityCollection>;
    listCapacities(resourceGroupName: string, name: string, callback: ServiceCallback<models.StampCapacityCollection>): void;
    listCapacities(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StampCapacityCollection>): void;


    /**
     * @summary Get IP addresses assigned to an App Service Environment.
     *
     * Get IP addresses assigned to an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AddressResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listVipsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AddressResponse>>;

    /**
     * @summary Get IP addresses assigned to an App Service Environment.
     *
     * Get IP addresses assigned to an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AddressResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AddressResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AddressResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listVips(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AddressResponse>;
    listVips(resourceGroupName: string, name: string, callback: ServiceCallback<models.AddressResponse>): void;
    listVips(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AddressResponse>): void;


    /**
     * @summary Move an App Service Environment to a different VNET.
     *
     * Move an App Service Environment to a different VNET.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} vnetInfo Details for the new virtual network.
     *
     * @param {string} [vnetInfo.id] Resource id of the Virtual Network.
     *
     * @param {string} [vnetInfo.subnet] Subnet within the Virtual Network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WebAppCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    changeVnetWithHttpOperationResponse(resourceGroupName: string, name: string, vnetInfo: models.VirtualNetworkProfile, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WebAppCollection>>;

    /**
     * @summary Move an App Service Environment to a different VNET.
     *
     * Move an App Service Environment to a different VNET.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} vnetInfo Details for the new virtual network.
     *
     * @param {string} [vnetInfo.id] Resource id of the Virtual Network.
     *
     * @param {string} [vnetInfo.subnet] Subnet within the Virtual Network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WebAppCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WebAppCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WebAppCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    changeVnet(resourceGroupName: string, name: string, vnetInfo: models.VirtualNetworkProfile, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WebAppCollection>;
    changeVnet(resourceGroupName: string, name: string, vnetInfo: models.VirtualNetworkProfile, callback: ServiceCallback<models.WebAppCollection>): void;
    changeVnet(resourceGroupName: string, name: string, vnetInfo: models.VirtualNetworkProfile, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WebAppCollection>): void;


    /**
     * @summary Get diagnostic information for an App Service Environment.
     *
     * Get diagnostic information for an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listDiagnosticsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HostingEnvironmentDiagnostics[]>>;

    /**
     * @summary Get diagnostic information for an App Service Environment.
     *
     * Get diagnostic information for an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listDiagnostics(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HostingEnvironmentDiagnostics[]>;
    listDiagnostics(resourceGroupName: string, name: string, callback: ServiceCallback<models.HostingEnvironmentDiagnostics[]>): void;
    listDiagnostics(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HostingEnvironmentDiagnostics[]>): void;


    /**
     * @summary Get a diagnostics item for an App Service Environment.
     *
     * Get a diagnostics item for an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {string} diagnosticsName Name of the diagnostics item.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HostingEnvironmentDiagnostics>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getDiagnosticsItemWithHttpOperationResponse(resourceGroupName: string, name: string, diagnosticsName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HostingEnvironmentDiagnostics>>;

    /**
     * @summary Get a diagnostics item for an App Service Environment.
     *
     * Get a diagnostics item for an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {string} diagnosticsName Name of the diagnostics item.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HostingEnvironmentDiagnostics} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HostingEnvironmentDiagnostics} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HostingEnvironmentDiagnostics} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getDiagnosticsItem(resourceGroupName: string, name: string, diagnosticsName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HostingEnvironmentDiagnostics>;
    getDiagnosticsItem(resourceGroupName: string, name: string, diagnosticsName: string, callback: ServiceCallback<models.HostingEnvironmentDiagnostics>): void;
    getDiagnosticsItem(resourceGroupName: string, name: string, diagnosticsName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HostingEnvironmentDiagnostics>): void;


    /**
     * @summary Get global metric definitions of an App Service Environment.
     *
     * Get global metric definitions of an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MetricDefinition>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricDefinitionsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MetricDefinition>>;

    /**
     * @summary Get global metric definitions of an App Service Environment.
     *
     * Get global metric definitions of an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MetricDefinition} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MetricDefinition} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MetricDefinition} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetricDefinitions(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MetricDefinition>;
    listMetricDefinitions(resourceGroupName: string, name: string, callback: ServiceCallback<models.MetricDefinition>): void;
    listMetricDefinitions(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricDefinition>): void;


    /**
     * @summary Get global metrics of an App Service Environment.
     *
     * Get global metrics of an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.details] Specify <code>true</code> to include
     * instance details. The default is <code>false</code>.
     *
     * @param {string} [options.filter] Return only usages/metrics specified in the
     * filter. Filter conforms to odata syntax. Example: $filter=(name.value eq
     * 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z
     * and endTime eq 2014-12-31T23:59:59Z and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceMetricCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { details? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceMetricCollection>>;

    /**
     * @summary Get global metrics of an App Service Environment.
     *
     * Get global metrics of an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.details] Specify <code>true</code> to include
     * instance details. The default is <code>false</code>.
     *
     * @param {string} [options.filter] Return only usages/metrics specified in the
     * filter. Filter conforms to odata syntax. Example: $filter=(name.value eq
     * 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z
     * and endTime eq 2014-12-31T23:59:59Z and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceMetricCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceMetricCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceMetricCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetrics(resourceGroupName: string, name: string, options?: { details? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceMetricCollection>;
    listMetrics(resourceGroupName: string, name: string, callback: ServiceCallback<models.ResourceMetricCollection>): void;
    listMetrics(resourceGroupName: string, name: string, options: { details? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricCollection>): void;


    /**
     * @summary Get all multi-role pools.
     *
     * Get all multi-role pools.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkerPoolCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMultiRolePoolsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkerPoolCollection>>;

    /**
     * @summary Get all multi-role pools.
     *
     * Get all multi-role pools.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkerPoolCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkerPoolCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkerPoolCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMultiRolePools(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkerPoolCollection>;
    listMultiRolePools(resourceGroupName: string, name: string, callback: ServiceCallback<models.WorkerPoolCollection>): void;
    listMultiRolePools(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkerPoolCollection>): void;


    /**
     * @summary Get properties of a multi-role pool.
     *
     * Get properties of a multi-role pool.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkerPoolResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getMultiRolePoolWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkerPoolResource>>;

    /**
     * @summary Get properties of a multi-role pool.
     *
     * Get properties of a multi-role pool.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkerPoolResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkerPoolResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkerPoolResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getMultiRolePool(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkerPoolResource>;
    getMultiRolePool(resourceGroupName: string, name: string, callback: ServiceCallback<models.WorkerPoolResource>): void;
    getMultiRolePool(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkerPoolResource>): void;


    /**
     * @summary Create or update a multi-role pool.
     *
     * Create or update a multi-role pool.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} multiRolePoolEnvelope Properties of the multi-role pool.
     *
     * @param {number} [multiRolePoolEnvelope.workerSizeId] Worker size ID for
     * referencing this worker pool.
     *
     * @param {string} [multiRolePoolEnvelope.computeMode] Shared or dedicated app
     * hosting. Possible values include: 'Shared', 'Dedicated', 'Dynamic'
     *
     * @param {string} [multiRolePoolEnvelope.workerSize] VM size of the worker
     * pool instances.
     *
     * @param {number} [multiRolePoolEnvelope.workerCount] Number of instances in
     * the worker pool.
     *
     * @param {object} [multiRolePoolEnvelope.sku]
     *
     * @param {string} [multiRolePoolEnvelope.sku.name] Name of the resource SKU.
     *
     * @param {string} [multiRolePoolEnvelope.sku.tier] Service tier of the
     * resource SKU.
     *
     * @param {string} [multiRolePoolEnvelope.sku.size] Size specifier of the
     * resource SKU.
     *
     * @param {string} [multiRolePoolEnvelope.sku.family] Family code of the
     * resource SKU.
     *
     * @param {number} [multiRolePoolEnvelope.sku.capacity] Current number of
     * instances assigned to the resource.
     *
     * @param {object} [multiRolePoolEnvelope.sku.skuCapacity] Min, max, and
     * default scale values of the SKU.
     *
     * @param {number} [multiRolePoolEnvelope.sku.skuCapacity.minimum] Minimum
     * number of workers for this App Service plan SKU.
     *
     * @param {number} [multiRolePoolEnvelope.sku.skuCapacity.maximum] Maximum
     * number of workers for this App Service plan SKU.
     *
     * @param {number} [multiRolePoolEnvelope.sku.skuCapacity.default] Default
     * number of workers for this App Service plan SKU.
     *
     * @param {string} [multiRolePoolEnvelope.sku.skuCapacity.scaleType] Available
     * scale configurations for an App Service plan.
     *
     * @param {array} [multiRolePoolEnvelope.sku.locations] Locations of the SKU.
     *
     * @param {array} [multiRolePoolEnvelope.sku.capabilities] Capabilities of the
     * SKU, e.g., is traffic manager enabled?
     *
     * @param {string} [multiRolePoolEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkerPoolResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateMultiRolePoolWithHttpOperationResponse(resourceGroupName: string, name: string, multiRolePoolEnvelope: models.WorkerPoolResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkerPoolResource>>;

    /**
     * @summary Create or update a multi-role pool.
     *
     * Create or update a multi-role pool.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} multiRolePoolEnvelope Properties of the multi-role pool.
     *
     * @param {number} [multiRolePoolEnvelope.workerSizeId] Worker size ID for
     * referencing this worker pool.
     *
     * @param {string} [multiRolePoolEnvelope.computeMode] Shared or dedicated app
     * hosting. Possible values include: 'Shared', 'Dedicated', 'Dynamic'
     *
     * @param {string} [multiRolePoolEnvelope.workerSize] VM size of the worker
     * pool instances.
     *
     * @param {number} [multiRolePoolEnvelope.workerCount] Number of instances in
     * the worker pool.
     *
     * @param {object} [multiRolePoolEnvelope.sku]
     *
     * @param {string} [multiRolePoolEnvelope.sku.name] Name of the resource SKU.
     *
     * @param {string} [multiRolePoolEnvelope.sku.tier] Service tier of the
     * resource SKU.
     *
     * @param {string} [multiRolePoolEnvelope.sku.size] Size specifier of the
     * resource SKU.
     *
     * @param {string} [multiRolePoolEnvelope.sku.family] Family code of the
     * resource SKU.
     *
     * @param {number} [multiRolePoolEnvelope.sku.capacity] Current number of
     * instances assigned to the resource.
     *
     * @param {object} [multiRolePoolEnvelope.sku.skuCapacity] Min, max, and
     * default scale values of the SKU.
     *
     * @param {number} [multiRolePoolEnvelope.sku.skuCapacity.minimum] Minimum
     * number of workers for this App Service plan SKU.
     *
     * @param {number} [multiRolePoolEnvelope.sku.skuCapacity.maximum] Maximum
     * number of workers for this App Service plan SKU.
     *
     * @param {number} [multiRolePoolEnvelope.sku.skuCapacity.default] Default
     * number of workers for this App Service plan SKU.
     *
     * @param {string} [multiRolePoolEnvelope.sku.skuCapacity.scaleType] Available
     * scale configurations for an App Service plan.
     *
     * @param {array} [multiRolePoolEnvelope.sku.locations] Locations of the SKU.
     *
     * @param {array} [multiRolePoolEnvelope.sku.capabilities] Capabilities of the
     * SKU, e.g., is traffic manager enabled?
     *
     * @param {string} [multiRolePoolEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkerPoolResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkerPoolResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkerPoolResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateMultiRolePool(resourceGroupName: string, name: string, multiRolePoolEnvelope: models.WorkerPoolResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkerPoolResource>;
    createOrUpdateMultiRolePool(resourceGroupName: string, name: string, multiRolePoolEnvelope: models.WorkerPoolResource, callback: ServiceCallback<models.WorkerPoolResource>): void;
    createOrUpdateMultiRolePool(resourceGroupName: string, name: string, multiRolePoolEnvelope: models.WorkerPoolResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkerPoolResource>): void;


    /**
     * @summary Create or update a multi-role pool.
     *
     * Create or update a multi-role pool.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} multiRolePoolEnvelope Properties of the multi-role pool.
     *
     * @param {number} [multiRolePoolEnvelope.workerSizeId] Worker size ID for
     * referencing this worker pool.
     *
     * @param {string} [multiRolePoolEnvelope.computeMode] Shared or dedicated app
     * hosting. Possible values include: 'Shared', 'Dedicated', 'Dynamic'
     *
     * @param {string} [multiRolePoolEnvelope.workerSize] VM size of the worker
     * pool instances.
     *
     * @param {number} [multiRolePoolEnvelope.workerCount] Number of instances in
     * the worker pool.
     *
     * @param {object} [multiRolePoolEnvelope.sku]
     *
     * @param {string} [multiRolePoolEnvelope.sku.name] Name of the resource SKU.
     *
     * @param {string} [multiRolePoolEnvelope.sku.tier] Service tier of the
     * resource SKU.
     *
     * @param {string} [multiRolePoolEnvelope.sku.size] Size specifier of the
     * resource SKU.
     *
     * @param {string} [multiRolePoolEnvelope.sku.family] Family code of the
     * resource SKU.
     *
     * @param {number} [multiRolePoolEnvelope.sku.capacity] Current number of
     * instances assigned to the resource.
     *
     * @param {object} [multiRolePoolEnvelope.sku.skuCapacity] Min, max, and
     * default scale values of the SKU.
     *
     * @param {number} [multiRolePoolEnvelope.sku.skuCapacity.minimum] Minimum
     * number of workers for this App Service plan SKU.
     *
     * @param {number} [multiRolePoolEnvelope.sku.skuCapacity.maximum] Maximum
     * number of workers for this App Service plan SKU.
     *
     * @param {number} [multiRolePoolEnvelope.sku.skuCapacity.default] Default
     * number of workers for this App Service plan SKU.
     *
     * @param {string} [multiRolePoolEnvelope.sku.skuCapacity.scaleType] Available
     * scale configurations for an App Service plan.
     *
     * @param {array} [multiRolePoolEnvelope.sku.locations] Locations of the SKU.
     *
     * @param {array} [multiRolePoolEnvelope.sku.capabilities] Capabilities of the
     * SKU, e.g., is traffic manager enabled?
     *
     * @param {string} [multiRolePoolEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkerPoolResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateMultiRolePoolWithHttpOperationResponse(resourceGroupName: string, name: string, multiRolePoolEnvelope: models.WorkerPoolResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkerPoolResource>>;

    /**
     * @summary Create or update a multi-role pool.
     *
     * Create or update a multi-role pool.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} multiRolePoolEnvelope Properties of the multi-role pool.
     *
     * @param {number} [multiRolePoolEnvelope.workerSizeId] Worker size ID for
     * referencing this worker pool.
     *
     * @param {string} [multiRolePoolEnvelope.computeMode] Shared or dedicated app
     * hosting. Possible values include: 'Shared', 'Dedicated', 'Dynamic'
     *
     * @param {string} [multiRolePoolEnvelope.workerSize] VM size of the worker
     * pool instances.
     *
     * @param {number} [multiRolePoolEnvelope.workerCount] Number of instances in
     * the worker pool.
     *
     * @param {object} [multiRolePoolEnvelope.sku]
     *
     * @param {string} [multiRolePoolEnvelope.sku.name] Name of the resource SKU.
     *
     * @param {string} [multiRolePoolEnvelope.sku.tier] Service tier of the
     * resource SKU.
     *
     * @param {string} [multiRolePoolEnvelope.sku.size] Size specifier of the
     * resource SKU.
     *
     * @param {string} [multiRolePoolEnvelope.sku.family] Family code of the
     * resource SKU.
     *
     * @param {number} [multiRolePoolEnvelope.sku.capacity] Current number of
     * instances assigned to the resource.
     *
     * @param {object} [multiRolePoolEnvelope.sku.skuCapacity] Min, max, and
     * default scale values of the SKU.
     *
     * @param {number} [multiRolePoolEnvelope.sku.skuCapacity.minimum] Minimum
     * number of workers for this App Service plan SKU.
     *
     * @param {number} [multiRolePoolEnvelope.sku.skuCapacity.maximum] Maximum
     * number of workers for this App Service plan SKU.
     *
     * @param {number} [multiRolePoolEnvelope.sku.skuCapacity.default] Default
     * number of workers for this App Service plan SKU.
     *
     * @param {string} [multiRolePoolEnvelope.sku.skuCapacity.scaleType] Available
     * scale configurations for an App Service plan.
     *
     * @param {array} [multiRolePoolEnvelope.sku.locations] Locations of the SKU.
     *
     * @param {array} [multiRolePoolEnvelope.sku.capabilities] Capabilities of the
     * SKU, e.g., is traffic manager enabled?
     *
     * @param {string} [multiRolePoolEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkerPoolResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkerPoolResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkerPoolResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateMultiRolePool(resourceGroupName: string, name: string, multiRolePoolEnvelope: models.WorkerPoolResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkerPoolResource>;
    updateMultiRolePool(resourceGroupName: string, name: string, multiRolePoolEnvelope: models.WorkerPoolResource, callback: ServiceCallback<models.WorkerPoolResource>): void;
    updateMultiRolePool(resourceGroupName: string, name: string, multiRolePoolEnvelope: models.WorkerPoolResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkerPoolResource>): void;


    /**
     * @summary Get metric definitions for a specific instance of a multi-role pool
     * of an App Service Environment.
     *
     * Get metric definitions for a specific instance of a multi-role pool of an
     * App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {string} instance Name of the instance in the multi-role pool.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceMetricDefinitionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMultiRolePoolInstanceMetricDefinitionsWithHttpOperationResponse(resourceGroupName: string, name: string, instance: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceMetricDefinitionCollection>>;

    /**
     * @summary Get metric definitions for a specific instance of a multi-role pool
     * of an App Service Environment.
     *
     * Get metric definitions for a specific instance of a multi-role pool of an
     * App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {string} instance Name of the instance in the multi-role pool.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceMetricDefinitionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceMetricDefinitionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceMetricDefinitionCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMultiRolePoolInstanceMetricDefinitions(resourceGroupName: string, name: string, instance: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceMetricDefinitionCollection>;
    listMultiRolePoolInstanceMetricDefinitions(resourceGroupName: string, name: string, instance: string, callback: ServiceCallback<models.ResourceMetricDefinitionCollection>): void;
    listMultiRolePoolInstanceMetricDefinitions(resourceGroupName: string, name: string, instance: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricDefinitionCollection>): void;


    /**
     * @summary Get metrics for a specific instance of a multi-role pool of an App
     * Service Environment.
     *
     * Get metrics for a specific instance of a multi-role pool of an App Service
     * Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {string} instance Name of the instance in the multi-role pool.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.details] Specify <code>true</code> to include
     * instance details. The default is <code>false</code>.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceMetricCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMultiRolePoolInstanceMetricsWithHttpOperationResponse(resourceGroupName: string, name: string, instance: string, options?: { details? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceMetricCollection>>;

    /**
     * @summary Get metrics for a specific instance of a multi-role pool of an App
     * Service Environment.
     *
     * Get metrics for a specific instance of a multi-role pool of an App Service
     * Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {string} instance Name of the instance in the multi-role pool.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.details] Specify <code>true</code> to include
     * instance details. The default is <code>false</code>.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceMetricCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceMetricCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceMetricCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMultiRolePoolInstanceMetrics(resourceGroupName: string, name: string, instance: string, options?: { details? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceMetricCollection>;
    listMultiRolePoolInstanceMetrics(resourceGroupName: string, name: string, instance: string, callback: ServiceCallback<models.ResourceMetricCollection>): void;
    listMultiRolePoolInstanceMetrics(resourceGroupName: string, name: string, instance: string, options: { details? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricCollection>): void;


    /**
     * @summary Get metric definitions for a multi-role pool of an App Service
     * Environment.
     *
     * Get metric definitions for a multi-role pool of an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceMetricDefinitionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMultiRoleMetricDefinitionsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceMetricDefinitionCollection>>;

    /**
     * @summary Get metric definitions for a multi-role pool of an App Service
     * Environment.
     *
     * Get metric definitions for a multi-role pool of an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceMetricDefinitionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceMetricDefinitionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceMetricDefinitionCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMultiRoleMetricDefinitions(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceMetricDefinitionCollection>;
    listMultiRoleMetricDefinitions(resourceGroupName: string, name: string, callback: ServiceCallback<models.ResourceMetricDefinitionCollection>): void;
    listMultiRoleMetricDefinitions(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricDefinitionCollection>): void;


    /**
     * @summary Get metrics for a multi-role pool of an App Service Environment.
     *
     * Get metrics for a multi-role pool of an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.startTime] Beginning time of the metrics query.
     *
     * @param {string} [options.endTime] End time of the metrics query.
     *
     * @param {string} [options.timeGrain] Time granularity of the metrics query.
     *
     * @param {boolean} [options.details] Specify <code>true</code> to include
     * instance details. The default is <code>false</code>.
     *
     * @param {string} [options.filter] Return only usages/metrics specified in the
     * filter. Filter conforms to odata syntax. Example: $filter=(name.value eq
     * 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z
     * and endTime eq 2014-12-31T23:59:59Z and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceMetricCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMultiRoleMetricsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { startTime? : string, endTime? : string, timeGrain? : string, details? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceMetricCollection>>;

    /**
     * @summary Get metrics for a multi-role pool of an App Service Environment.
     *
     * Get metrics for a multi-role pool of an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.startTime] Beginning time of the metrics query.
     *
     * @param {string} [options.endTime] End time of the metrics query.
     *
     * @param {string} [options.timeGrain] Time granularity of the metrics query.
     *
     * @param {boolean} [options.details] Specify <code>true</code> to include
     * instance details. The default is <code>false</code>.
     *
     * @param {string} [options.filter] Return only usages/metrics specified in the
     * filter. Filter conforms to odata syntax. Example: $filter=(name.value eq
     * 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z
     * and endTime eq 2014-12-31T23:59:59Z and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceMetricCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceMetricCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceMetricCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMultiRoleMetrics(resourceGroupName: string, name: string, options?: { startTime? : string, endTime? : string, timeGrain? : string, details? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceMetricCollection>;
    listMultiRoleMetrics(resourceGroupName: string, name: string, callback: ServiceCallback<models.ResourceMetricCollection>): void;
    listMultiRoleMetrics(resourceGroupName: string, name: string, options: { startTime? : string, endTime? : string, timeGrain? : string, details? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricCollection>): void;


    /**
     * @summary Get available SKUs for scaling a multi-role pool.
     *
     * Get available SKUs for scaling a multi-role pool.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SkuInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMultiRolePoolSkusWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SkuInfoCollection>>;

    /**
     * @summary Get available SKUs for scaling a multi-role pool.
     *
     * Get available SKUs for scaling a multi-role pool.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SkuInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SkuInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SkuInfoCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMultiRolePoolSkus(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SkuInfoCollection>;
    listMultiRolePoolSkus(resourceGroupName: string, name: string, callback: ServiceCallback<models.SkuInfoCollection>): void;
    listMultiRolePoolSkus(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SkuInfoCollection>): void;


    /**
     * @summary Get usage metrics for a multi-role pool of an App Service
     * Environment.
     *
     * Get usage metrics for a multi-role pool of an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UsageCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMultiRoleUsagesWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UsageCollection>>;

    /**
     * @summary Get usage metrics for a multi-role pool of an App Service
     * Environment.
     *
     * Get usage metrics for a multi-role pool of an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UsageCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UsageCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UsageCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMultiRoleUsages(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.UsageCollection>;
    listMultiRoleUsages(resourceGroupName: string, name: string, callback: ServiceCallback<models.UsageCollection>): void;
    listMultiRoleUsages(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UsageCollection>): void;


    /**
     * @summary List all currently running operations on the App Service
     * Environment.
     *
     * List all currently running operations on the App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listOperationsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Operation[]>>;

    /**
     * @summary List all currently running operations on the App Service
     * Environment.
     *
     * List all currently running operations on the App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listOperations(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Operation[]>;
    listOperations(resourceGroupName: string, name: string, callback: ServiceCallback<models.Operation[]>): void;
    listOperations(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Operation[]>): void;


    /**
     * @summary Reboot all machines in an App Service Environment.
     *
     * Reboot all machines in an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    rebootWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Reboot all machines in an App Service Environment.
     *
     * Reboot all machines in an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    reboot(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    reboot(resourceGroupName: string, name: string, callback: ServiceCallback<void>): void;
    reboot(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Resume an App Service Environment.
     *
     * Resume an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WebAppCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    resumeWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WebAppCollection>>;

    /**
     * @summary Resume an App Service Environment.
     *
     * Resume an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WebAppCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WebAppCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WebAppCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    resume(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WebAppCollection>;
    resume(resourceGroupName: string, name: string, callback: ServiceCallback<models.WebAppCollection>): void;
    resume(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WebAppCollection>): void;


    /**
     * @summary Get all App Service plans in an App Service Environment.
     *
     * Get all App Service plans in an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppServicePlanCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAppServicePlansWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppServicePlanCollection>>;

    /**
     * @summary Get all App Service plans in an App Service Environment.
     *
     * Get all App Service plans in an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppServicePlanCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppServicePlanCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppServicePlanCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAppServicePlans(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppServicePlanCollection>;
    listAppServicePlans(resourceGroupName: string, name: string, callback: ServiceCallback<models.AppServicePlanCollection>): void;
    listAppServicePlans(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppServicePlanCollection>): void;


    /**
     * @summary Get all apps in an App Service Environment.
     *
     * Get all apps in an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.propertiesToInclude] Comma separated list of app
     * properties to include.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WebAppCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWebAppsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { propertiesToInclude? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WebAppCollection>>;

    /**
     * @summary Get all apps in an App Service Environment.
     *
     * Get all apps in an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.propertiesToInclude] Comma separated list of app
     * properties to include.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WebAppCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WebAppCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WebAppCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listWebApps(resourceGroupName: string, name: string, options?: { propertiesToInclude? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.WebAppCollection>;
    listWebApps(resourceGroupName: string, name: string, callback: ServiceCallback<models.WebAppCollection>): void;
    listWebApps(resourceGroupName: string, name: string, options: { propertiesToInclude? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WebAppCollection>): void;


    /**
     * @summary Suspend an App Service Environment.
     *
     * Suspend an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WebAppCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    suspendWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WebAppCollection>>;

    /**
     * @summary Suspend an App Service Environment.
     *
     * Suspend an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WebAppCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WebAppCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WebAppCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    suspend(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WebAppCollection>;
    suspend(resourceGroupName: string, name: string, callback: ServiceCallback<models.WebAppCollection>): void;
    suspend(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WebAppCollection>): void;


    /**
     * @summary Get global usage metrics of an App Service Environment.
     *
     * Get global usage metrics of an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] Return only usages/metrics specified in the
     * filter. Filter conforms to odata syntax. Example: $filter=(name.value eq
     * 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z
     * and endTime eq 2014-12-31T23:59:59Z and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CsmUsageQuotaCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listUsagesWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CsmUsageQuotaCollection>>;

    /**
     * @summary Get global usage metrics of an App Service Environment.
     *
     * Get global usage metrics of an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] Return only usages/metrics specified in the
     * filter. Filter conforms to odata syntax. Example: $filter=(name.value eq
     * 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z
     * and endTime eq 2014-12-31T23:59:59Z and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CsmUsageQuotaCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CsmUsageQuotaCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CsmUsageQuotaCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listUsages(resourceGroupName: string, name: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.CsmUsageQuotaCollection>;
    listUsages(resourceGroupName: string, name: string, callback: ServiceCallback<models.CsmUsageQuotaCollection>): void;
    listUsages(resourceGroupName: string, name: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CsmUsageQuotaCollection>): void;


    /**
     * @summary Get all worker pools of an App Service Environment.
     *
     * Get all worker pools of an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkerPoolCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWorkerPoolsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkerPoolCollection>>;

    /**
     * @summary Get all worker pools of an App Service Environment.
     *
     * Get all worker pools of an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkerPoolCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkerPoolCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkerPoolCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listWorkerPools(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkerPoolCollection>;
    listWorkerPools(resourceGroupName: string, name: string, callback: ServiceCallback<models.WorkerPoolCollection>): void;
    listWorkerPools(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkerPoolCollection>): void;


    /**
     * @summary Get properties of a worker pool.
     *
     * Get properties of a worker pool.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {string} workerPoolName Name of the worker pool.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkerPoolResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWorkerPoolWithHttpOperationResponse(resourceGroupName: string, name: string, workerPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkerPoolResource>>;

    /**
     * @summary Get properties of a worker pool.
     *
     * Get properties of a worker pool.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {string} workerPoolName Name of the worker pool.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkerPoolResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkerPoolResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkerPoolResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getWorkerPool(resourceGroupName: string, name: string, workerPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkerPoolResource>;
    getWorkerPool(resourceGroupName: string, name: string, workerPoolName: string, callback: ServiceCallback<models.WorkerPoolResource>): void;
    getWorkerPool(resourceGroupName: string, name: string, workerPoolName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkerPoolResource>): void;


    /**
     * @summary Create or update a worker pool.
     *
     * Create or update a worker pool.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {string} workerPoolName Name of the worker pool.
     *
     * @param {object} workerPoolEnvelope Properties of the worker pool.
     *
     * @param {number} [workerPoolEnvelope.workerSizeId] Worker size ID for
     * referencing this worker pool.
     *
     * @param {string} [workerPoolEnvelope.computeMode] Shared or dedicated app
     * hosting. Possible values include: 'Shared', 'Dedicated', 'Dynamic'
     *
     * @param {string} [workerPoolEnvelope.workerSize] VM size of the worker pool
     * instances.
     *
     * @param {number} [workerPoolEnvelope.workerCount] Number of instances in the
     * worker pool.
     *
     * @param {object} [workerPoolEnvelope.sku]
     *
     * @param {string} [workerPoolEnvelope.sku.name] Name of the resource SKU.
     *
     * @param {string} [workerPoolEnvelope.sku.tier] Service tier of the resource
     * SKU.
     *
     * @param {string} [workerPoolEnvelope.sku.size] Size specifier of the resource
     * SKU.
     *
     * @param {string} [workerPoolEnvelope.sku.family] Family code of the resource
     * SKU.
     *
     * @param {number} [workerPoolEnvelope.sku.capacity] Current number of
     * instances assigned to the resource.
     *
     * @param {object} [workerPoolEnvelope.sku.skuCapacity] Min, max, and default
     * scale values of the SKU.
     *
     * @param {number} [workerPoolEnvelope.sku.skuCapacity.minimum] Minimum number
     * of workers for this App Service plan SKU.
     *
     * @param {number} [workerPoolEnvelope.sku.skuCapacity.maximum] Maximum number
     * of workers for this App Service plan SKU.
     *
     * @param {number} [workerPoolEnvelope.sku.skuCapacity.default] Default number
     * of workers for this App Service plan SKU.
     *
     * @param {string} [workerPoolEnvelope.sku.skuCapacity.scaleType] Available
     * scale configurations for an App Service plan.
     *
     * @param {array} [workerPoolEnvelope.sku.locations] Locations of the SKU.
     *
     * @param {array} [workerPoolEnvelope.sku.capabilities] Capabilities of the
     * SKU, e.g., is traffic manager enabled?
     *
     * @param {string} [workerPoolEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkerPoolResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWorkerPoolWithHttpOperationResponse(resourceGroupName: string, name: string, workerPoolName: string, workerPoolEnvelope: models.WorkerPoolResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkerPoolResource>>;

    /**
     * @summary Create or update a worker pool.
     *
     * Create or update a worker pool.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {string} workerPoolName Name of the worker pool.
     *
     * @param {object} workerPoolEnvelope Properties of the worker pool.
     *
     * @param {number} [workerPoolEnvelope.workerSizeId] Worker size ID for
     * referencing this worker pool.
     *
     * @param {string} [workerPoolEnvelope.computeMode] Shared or dedicated app
     * hosting. Possible values include: 'Shared', 'Dedicated', 'Dynamic'
     *
     * @param {string} [workerPoolEnvelope.workerSize] VM size of the worker pool
     * instances.
     *
     * @param {number} [workerPoolEnvelope.workerCount] Number of instances in the
     * worker pool.
     *
     * @param {object} [workerPoolEnvelope.sku]
     *
     * @param {string} [workerPoolEnvelope.sku.name] Name of the resource SKU.
     *
     * @param {string} [workerPoolEnvelope.sku.tier] Service tier of the resource
     * SKU.
     *
     * @param {string} [workerPoolEnvelope.sku.size] Size specifier of the resource
     * SKU.
     *
     * @param {string} [workerPoolEnvelope.sku.family] Family code of the resource
     * SKU.
     *
     * @param {number} [workerPoolEnvelope.sku.capacity] Current number of
     * instances assigned to the resource.
     *
     * @param {object} [workerPoolEnvelope.sku.skuCapacity] Min, max, and default
     * scale values of the SKU.
     *
     * @param {number} [workerPoolEnvelope.sku.skuCapacity.minimum] Minimum number
     * of workers for this App Service plan SKU.
     *
     * @param {number} [workerPoolEnvelope.sku.skuCapacity.maximum] Maximum number
     * of workers for this App Service plan SKU.
     *
     * @param {number} [workerPoolEnvelope.sku.skuCapacity.default] Default number
     * of workers for this App Service plan SKU.
     *
     * @param {string} [workerPoolEnvelope.sku.skuCapacity.scaleType] Available
     * scale configurations for an App Service plan.
     *
     * @param {array} [workerPoolEnvelope.sku.locations] Locations of the SKU.
     *
     * @param {array} [workerPoolEnvelope.sku.capabilities] Capabilities of the
     * SKU, e.g., is traffic manager enabled?
     *
     * @param {string} [workerPoolEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkerPoolResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkerPoolResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkerPoolResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateWorkerPool(resourceGroupName: string, name: string, workerPoolName: string, workerPoolEnvelope: models.WorkerPoolResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkerPoolResource>;
    createOrUpdateWorkerPool(resourceGroupName: string, name: string, workerPoolName: string, workerPoolEnvelope: models.WorkerPoolResource, callback: ServiceCallback<models.WorkerPoolResource>): void;
    createOrUpdateWorkerPool(resourceGroupName: string, name: string, workerPoolName: string, workerPoolEnvelope: models.WorkerPoolResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkerPoolResource>): void;


    /**
     * @summary Create or update a worker pool.
     *
     * Create or update a worker pool.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {string} workerPoolName Name of the worker pool.
     *
     * @param {object} workerPoolEnvelope Properties of the worker pool.
     *
     * @param {number} [workerPoolEnvelope.workerSizeId] Worker size ID for
     * referencing this worker pool.
     *
     * @param {string} [workerPoolEnvelope.computeMode] Shared or dedicated app
     * hosting. Possible values include: 'Shared', 'Dedicated', 'Dynamic'
     *
     * @param {string} [workerPoolEnvelope.workerSize] VM size of the worker pool
     * instances.
     *
     * @param {number} [workerPoolEnvelope.workerCount] Number of instances in the
     * worker pool.
     *
     * @param {object} [workerPoolEnvelope.sku]
     *
     * @param {string} [workerPoolEnvelope.sku.name] Name of the resource SKU.
     *
     * @param {string} [workerPoolEnvelope.sku.tier] Service tier of the resource
     * SKU.
     *
     * @param {string} [workerPoolEnvelope.sku.size] Size specifier of the resource
     * SKU.
     *
     * @param {string} [workerPoolEnvelope.sku.family] Family code of the resource
     * SKU.
     *
     * @param {number} [workerPoolEnvelope.sku.capacity] Current number of
     * instances assigned to the resource.
     *
     * @param {object} [workerPoolEnvelope.sku.skuCapacity] Min, max, and default
     * scale values of the SKU.
     *
     * @param {number} [workerPoolEnvelope.sku.skuCapacity.minimum] Minimum number
     * of workers for this App Service plan SKU.
     *
     * @param {number} [workerPoolEnvelope.sku.skuCapacity.maximum] Maximum number
     * of workers for this App Service plan SKU.
     *
     * @param {number} [workerPoolEnvelope.sku.skuCapacity.default] Default number
     * of workers for this App Service plan SKU.
     *
     * @param {string} [workerPoolEnvelope.sku.skuCapacity.scaleType] Available
     * scale configurations for an App Service plan.
     *
     * @param {array} [workerPoolEnvelope.sku.locations] Locations of the SKU.
     *
     * @param {array} [workerPoolEnvelope.sku.capabilities] Capabilities of the
     * SKU, e.g., is traffic manager enabled?
     *
     * @param {string} [workerPoolEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkerPoolResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWorkerPoolWithHttpOperationResponse(resourceGroupName: string, name: string, workerPoolName: string, workerPoolEnvelope: models.WorkerPoolResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkerPoolResource>>;

    /**
     * @summary Create or update a worker pool.
     *
     * Create or update a worker pool.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {string} workerPoolName Name of the worker pool.
     *
     * @param {object} workerPoolEnvelope Properties of the worker pool.
     *
     * @param {number} [workerPoolEnvelope.workerSizeId] Worker size ID for
     * referencing this worker pool.
     *
     * @param {string} [workerPoolEnvelope.computeMode] Shared or dedicated app
     * hosting. Possible values include: 'Shared', 'Dedicated', 'Dynamic'
     *
     * @param {string} [workerPoolEnvelope.workerSize] VM size of the worker pool
     * instances.
     *
     * @param {number} [workerPoolEnvelope.workerCount] Number of instances in the
     * worker pool.
     *
     * @param {object} [workerPoolEnvelope.sku]
     *
     * @param {string} [workerPoolEnvelope.sku.name] Name of the resource SKU.
     *
     * @param {string} [workerPoolEnvelope.sku.tier] Service tier of the resource
     * SKU.
     *
     * @param {string} [workerPoolEnvelope.sku.size] Size specifier of the resource
     * SKU.
     *
     * @param {string} [workerPoolEnvelope.sku.family] Family code of the resource
     * SKU.
     *
     * @param {number} [workerPoolEnvelope.sku.capacity] Current number of
     * instances assigned to the resource.
     *
     * @param {object} [workerPoolEnvelope.sku.skuCapacity] Min, max, and default
     * scale values of the SKU.
     *
     * @param {number} [workerPoolEnvelope.sku.skuCapacity.minimum] Minimum number
     * of workers for this App Service plan SKU.
     *
     * @param {number} [workerPoolEnvelope.sku.skuCapacity.maximum] Maximum number
     * of workers for this App Service plan SKU.
     *
     * @param {number} [workerPoolEnvelope.sku.skuCapacity.default] Default number
     * of workers for this App Service plan SKU.
     *
     * @param {string} [workerPoolEnvelope.sku.skuCapacity.scaleType] Available
     * scale configurations for an App Service plan.
     *
     * @param {array} [workerPoolEnvelope.sku.locations] Locations of the SKU.
     *
     * @param {array} [workerPoolEnvelope.sku.capabilities] Capabilities of the
     * SKU, e.g., is traffic manager enabled?
     *
     * @param {string} [workerPoolEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkerPoolResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkerPoolResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkerPoolResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateWorkerPool(resourceGroupName: string, name: string, workerPoolName: string, workerPoolEnvelope: models.WorkerPoolResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkerPoolResource>;
    updateWorkerPool(resourceGroupName: string, name: string, workerPoolName: string, workerPoolEnvelope: models.WorkerPoolResource, callback: ServiceCallback<models.WorkerPoolResource>): void;
    updateWorkerPool(resourceGroupName: string, name: string, workerPoolName: string, workerPoolEnvelope: models.WorkerPoolResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkerPoolResource>): void;


    /**
     * @summary Get metric definitions for a specific instance of a worker pool of
     * an App Service Environment.
     *
     * Get metric definitions for a specific instance of a worker pool of an App
     * Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {string} workerPoolName Name of the worker pool.
     *
     * @param {string} instance Name of the instance in the worker pool.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceMetricDefinitionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWorkerPoolInstanceMetricDefinitionsWithHttpOperationResponse(resourceGroupName: string, name: string, workerPoolName: string, instance: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceMetricDefinitionCollection>>;

    /**
     * @summary Get metric definitions for a specific instance of a worker pool of
     * an App Service Environment.
     *
     * Get metric definitions for a specific instance of a worker pool of an App
     * Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {string} workerPoolName Name of the worker pool.
     *
     * @param {string} instance Name of the instance in the worker pool.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceMetricDefinitionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceMetricDefinitionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceMetricDefinitionCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listWorkerPoolInstanceMetricDefinitions(resourceGroupName: string, name: string, workerPoolName: string, instance: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceMetricDefinitionCollection>;
    listWorkerPoolInstanceMetricDefinitions(resourceGroupName: string, name: string, workerPoolName: string, instance: string, callback: ServiceCallback<models.ResourceMetricDefinitionCollection>): void;
    listWorkerPoolInstanceMetricDefinitions(resourceGroupName: string, name: string, workerPoolName: string, instance: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricDefinitionCollection>): void;


    /**
     * @summary Get metrics for a specific instance of a worker pool of an App
     * Service Environment.
     *
     * Get metrics for a specific instance of a worker pool of an App Service
     * Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {string} workerPoolName Name of the worker pool.
     *
     * @param {string} instance Name of the instance in the worker pool.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.details] Specify <code>true</code> to include
     * instance details. The default is <code>false</code>.
     *
     * @param {string} [options.filter] Return only usages/metrics specified in the
     * filter. Filter conforms to odata syntax. Example: $filter=(name.value eq
     * 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z
     * and endTime eq 2014-12-31T23:59:59Z and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceMetricCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWorkerPoolInstanceMetricsWithHttpOperationResponse(resourceGroupName: string, name: string, workerPoolName: string, instance: string, options?: { details? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceMetricCollection>>;

    /**
     * @summary Get metrics for a specific instance of a worker pool of an App
     * Service Environment.
     *
     * Get metrics for a specific instance of a worker pool of an App Service
     * Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {string} workerPoolName Name of the worker pool.
     *
     * @param {string} instance Name of the instance in the worker pool.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.details] Specify <code>true</code> to include
     * instance details. The default is <code>false</code>.
     *
     * @param {string} [options.filter] Return only usages/metrics specified in the
     * filter. Filter conforms to odata syntax. Example: $filter=(name.value eq
     * 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z
     * and endTime eq 2014-12-31T23:59:59Z and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceMetricCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceMetricCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceMetricCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listWorkerPoolInstanceMetrics(resourceGroupName: string, name: string, workerPoolName: string, instance: string, options?: { details? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceMetricCollection>;
    listWorkerPoolInstanceMetrics(resourceGroupName: string, name: string, workerPoolName: string, instance: string, callback: ServiceCallback<models.ResourceMetricCollection>): void;
    listWorkerPoolInstanceMetrics(resourceGroupName: string, name: string, workerPoolName: string, instance: string, options: { details? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricCollection>): void;


    /**
     * @summary Get metric definitions for a worker pool of an App Service
     * Environment.
     *
     * Get metric definitions for a worker pool of an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {string} workerPoolName Name of the worker pool.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceMetricDefinitionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWebWorkerMetricDefinitionsWithHttpOperationResponse(resourceGroupName: string, name: string, workerPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceMetricDefinitionCollection>>;

    /**
     * @summary Get metric definitions for a worker pool of an App Service
     * Environment.
     *
     * Get metric definitions for a worker pool of an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {string} workerPoolName Name of the worker pool.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceMetricDefinitionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceMetricDefinitionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceMetricDefinitionCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listWebWorkerMetricDefinitions(resourceGroupName: string, name: string, workerPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceMetricDefinitionCollection>;
    listWebWorkerMetricDefinitions(resourceGroupName: string, name: string, workerPoolName: string, callback: ServiceCallback<models.ResourceMetricDefinitionCollection>): void;
    listWebWorkerMetricDefinitions(resourceGroupName: string, name: string, workerPoolName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricDefinitionCollection>): void;


    /**
     * @summary Get metrics for a worker pool of a AppServiceEnvironment (App
     * Service Environment).
     *
     * Get metrics for a worker pool of a AppServiceEnvironment (App Service
     * Environment).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {string} workerPoolName Name of worker pool
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.details] Specify <code>true</code> to include
     * instance details. The default is <code>false</code>.
     *
     * @param {string} [options.filter] Return only usages/metrics specified in the
     * filter. Filter conforms to odata syntax. Example: $filter=(name.value eq
     * 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z
     * and endTime eq 2014-12-31T23:59:59Z and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceMetricCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWebWorkerMetricsWithHttpOperationResponse(resourceGroupName: string, name: string, workerPoolName: string, options?: { details? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceMetricCollection>>;

    /**
     * @summary Get metrics for a worker pool of a AppServiceEnvironment (App
     * Service Environment).
     *
     * Get metrics for a worker pool of a AppServiceEnvironment (App Service
     * Environment).
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {string} workerPoolName Name of worker pool
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.details] Specify <code>true</code> to include
     * instance details. The default is <code>false</code>.
     *
     * @param {string} [options.filter] Return only usages/metrics specified in the
     * filter. Filter conforms to odata syntax. Example: $filter=(name.value eq
     * 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z
     * and endTime eq 2014-12-31T23:59:59Z and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceMetricCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceMetricCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceMetricCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listWebWorkerMetrics(resourceGroupName: string, name: string, workerPoolName: string, options?: { details? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceMetricCollection>;
    listWebWorkerMetrics(resourceGroupName: string, name: string, workerPoolName: string, callback: ServiceCallback<models.ResourceMetricCollection>): void;
    listWebWorkerMetrics(resourceGroupName: string, name: string, workerPoolName: string, options: { details? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricCollection>): void;


    /**
     * @summary Get available SKUs for scaling a worker pool.
     *
     * Get available SKUs for scaling a worker pool.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {string} workerPoolName Name of the worker pool.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SkuInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWorkerPoolSkusWithHttpOperationResponse(resourceGroupName: string, name: string, workerPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SkuInfoCollection>>;

    /**
     * @summary Get available SKUs for scaling a worker pool.
     *
     * Get available SKUs for scaling a worker pool.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {string} workerPoolName Name of the worker pool.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SkuInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SkuInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SkuInfoCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listWorkerPoolSkus(resourceGroupName: string, name: string, workerPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SkuInfoCollection>;
    listWorkerPoolSkus(resourceGroupName: string, name: string, workerPoolName: string, callback: ServiceCallback<models.SkuInfoCollection>): void;
    listWorkerPoolSkus(resourceGroupName: string, name: string, workerPoolName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SkuInfoCollection>): void;


    /**
     * @summary Get usage metrics for a worker pool of an App Service Environment.
     *
     * Get usage metrics for a worker pool of an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {string} workerPoolName Name of the worker pool.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UsageCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWebWorkerUsagesWithHttpOperationResponse(resourceGroupName: string, name: string, workerPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UsageCollection>>;

    /**
     * @summary Get usage metrics for a worker pool of an App Service Environment.
     *
     * Get usage metrics for a worker pool of an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {string} workerPoolName Name of the worker pool.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UsageCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UsageCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UsageCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listWebWorkerUsages(resourceGroupName: string, name: string, workerPoolName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.UsageCollection>;
    listWebWorkerUsages(resourceGroupName: string, name: string, workerPoolName: string, callback: ServiceCallback<models.UsageCollection>): void;
    listWebWorkerUsages(resourceGroupName: string, name: string, workerPoolName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UsageCollection>): void;


    /**
     * @summary Create or update an App Service Environment.
     *
     * Create or update an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} hostingEnvironmentEnvelope Configuration details of the App
     * Service Environment.
     *
     * @param {string} hostingEnvironmentEnvelope.appServiceEnvironmentResourceName
     * Name of the App Service Environment.
     *
     * @param {string}
     * hostingEnvironmentEnvelope.appServiceEnvironmentResourceLocation Location of
     * the App Service Environment, e.g. "West US".
     *
     * @param {string} [hostingEnvironmentEnvelope.vnetName] Name of the Virtual
     * Network for the App Service Environment.
     *
     * @param {string} [hostingEnvironmentEnvelope.vnetResourceGroupName] Resource
     * group of the Virtual Network.
     *
     * @param {string} [hostingEnvironmentEnvelope.vnetSubnetName] Subnet of the
     * Virtual Network.
     *
     * @param {object} hostingEnvironmentEnvelope.virtualNetwork Description of the
     * Virtual Network.
     *
     * @param {string} [hostingEnvironmentEnvelope.virtualNetwork.id] Resource id
     * of the Virtual Network.
     *
     * @param {string} [hostingEnvironmentEnvelope.virtualNetwork.subnet] Subnet
     * within the Virtual Network.
     *
     * @param {string} [hostingEnvironmentEnvelope.internalLoadBalancingMode]
     * Specifies which endpoints to serve internally in the Virtual Network for the
     * App Service Environment. Possible values include: 'None', 'Web',
     * 'Publishing'
     *
     * @param {string} [hostingEnvironmentEnvelope.multiSize] Front-end VM size,
     * e.g. "Medium", "Large".
     *
     * @param {number} [hostingEnvironmentEnvelope.multiRoleCount] Number of
     * front-end instances.
     *
     * @param {array} hostingEnvironmentEnvelope.workerPools Description of worker
     * pools with worker size IDs, VM sizes, and number of workers in each pool.
     *
     * @param {number} [hostingEnvironmentEnvelope.ipsslAddressCount] Number of IP
     * SSL addresses reserved for the App Service Environment.
     *
     * @param {string} [hostingEnvironmentEnvelope.dnsSuffix] DNS suffix of the App
     * Service Environment.
     *
     * @param {array} [hostingEnvironmentEnvelope.networkAccessControlList] Access
     * control list for controlling traffic to the App Service Environment.
     *
     * @param {number} [hostingEnvironmentEnvelope.frontEndScaleFactor] Scale
     * factor for front-ends.
     *
     * @param {string} [hostingEnvironmentEnvelope.apiManagementAccountId] API
     * Management Account associated with the App Service Environment.
     *
     * @param {boolean} [hostingEnvironmentEnvelope.suspended] <code>true</code> if
     * the App Service Environment is suspended; otherwise, <code>false</code>. The
     * environment can be suspended, e.g. when the management endpoint is no longer
     * available
     * (most likely because NSG blocked the incoming traffic).
     *
     * @param {boolean} [hostingEnvironmentEnvelope.dynamicCacheEnabled] True/false
     * indicating whether the App Service Environment is suspended. The environment
     * can be suspended e.g. when the management endpoint is no longer available
     * (most likely because NSG blocked the incoming traffic).
     *
     * @param {array} [hostingEnvironmentEnvelope.clusterSettings] Custom settings
     * for changing the behavior of the App Service Environment.
     *
     * @param {array} [hostingEnvironmentEnvelope.userWhitelistedIpRanges] User
     * added ip ranges to whitelist on ASE db
     *
     * @param {boolean} [hostingEnvironmentEnvelope.hasLinuxWorkers] Flag that
     * displays whether an ASE has linux workers or not
     *
     * @param {string} [hostingEnvironmentEnvelope.sslCertKeyVaultId] Key Vault ID
     * for ILB App Service Environment default SSL certificate
     *
     * @param {string} [hostingEnvironmentEnvelope.sslCertKeyVaultSecretName] Key
     * Vault Secret Name for ILB App Service Environment default SSL certificate
     *
     * @param {string} [hostingEnvironmentEnvelope.kind] Kind of resource.
     *
     * @param {string} hostingEnvironmentEnvelope.location Resource Location.
     *
     * @param {object} [hostingEnvironmentEnvelope.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppServiceEnvironmentResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, name: string, hostingEnvironmentEnvelope: models.AppServiceEnvironmentResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppServiceEnvironmentResource>>;

    /**
     * @summary Create or update an App Service Environment.
     *
     * Create or update an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} hostingEnvironmentEnvelope Configuration details of the App
     * Service Environment.
     *
     * @param {string} hostingEnvironmentEnvelope.appServiceEnvironmentResourceName
     * Name of the App Service Environment.
     *
     * @param {string}
     * hostingEnvironmentEnvelope.appServiceEnvironmentResourceLocation Location of
     * the App Service Environment, e.g. "West US".
     *
     * @param {string} [hostingEnvironmentEnvelope.vnetName] Name of the Virtual
     * Network for the App Service Environment.
     *
     * @param {string} [hostingEnvironmentEnvelope.vnetResourceGroupName] Resource
     * group of the Virtual Network.
     *
     * @param {string} [hostingEnvironmentEnvelope.vnetSubnetName] Subnet of the
     * Virtual Network.
     *
     * @param {object} hostingEnvironmentEnvelope.virtualNetwork Description of the
     * Virtual Network.
     *
     * @param {string} [hostingEnvironmentEnvelope.virtualNetwork.id] Resource id
     * of the Virtual Network.
     *
     * @param {string} [hostingEnvironmentEnvelope.virtualNetwork.subnet] Subnet
     * within the Virtual Network.
     *
     * @param {string} [hostingEnvironmentEnvelope.internalLoadBalancingMode]
     * Specifies which endpoints to serve internally in the Virtual Network for the
     * App Service Environment. Possible values include: 'None', 'Web',
     * 'Publishing'
     *
     * @param {string} [hostingEnvironmentEnvelope.multiSize] Front-end VM size,
     * e.g. "Medium", "Large".
     *
     * @param {number} [hostingEnvironmentEnvelope.multiRoleCount] Number of
     * front-end instances.
     *
     * @param {array} hostingEnvironmentEnvelope.workerPools Description of worker
     * pools with worker size IDs, VM sizes, and number of workers in each pool.
     *
     * @param {number} [hostingEnvironmentEnvelope.ipsslAddressCount] Number of IP
     * SSL addresses reserved for the App Service Environment.
     *
     * @param {string} [hostingEnvironmentEnvelope.dnsSuffix] DNS suffix of the App
     * Service Environment.
     *
     * @param {array} [hostingEnvironmentEnvelope.networkAccessControlList] Access
     * control list for controlling traffic to the App Service Environment.
     *
     * @param {number} [hostingEnvironmentEnvelope.frontEndScaleFactor] Scale
     * factor for front-ends.
     *
     * @param {string} [hostingEnvironmentEnvelope.apiManagementAccountId] API
     * Management Account associated with the App Service Environment.
     *
     * @param {boolean} [hostingEnvironmentEnvelope.suspended] <code>true</code> if
     * the App Service Environment is suspended; otherwise, <code>false</code>. The
     * environment can be suspended, e.g. when the management endpoint is no longer
     * available
     * (most likely because NSG blocked the incoming traffic).
     *
     * @param {boolean} [hostingEnvironmentEnvelope.dynamicCacheEnabled] True/false
     * indicating whether the App Service Environment is suspended. The environment
     * can be suspended e.g. when the management endpoint is no longer available
     * (most likely because NSG blocked the incoming traffic).
     *
     * @param {array} [hostingEnvironmentEnvelope.clusterSettings] Custom settings
     * for changing the behavior of the App Service Environment.
     *
     * @param {array} [hostingEnvironmentEnvelope.userWhitelistedIpRanges] User
     * added ip ranges to whitelist on ASE db
     *
     * @param {boolean} [hostingEnvironmentEnvelope.hasLinuxWorkers] Flag that
     * displays whether an ASE has linux workers or not
     *
     * @param {string} [hostingEnvironmentEnvelope.sslCertKeyVaultId] Key Vault ID
     * for ILB App Service Environment default SSL certificate
     *
     * @param {string} [hostingEnvironmentEnvelope.sslCertKeyVaultSecretName] Key
     * Vault Secret Name for ILB App Service Environment default SSL certificate
     *
     * @param {string} [hostingEnvironmentEnvelope.kind] Kind of resource.
     *
     * @param {string} hostingEnvironmentEnvelope.location Resource Location.
     *
     * @param {object} [hostingEnvironmentEnvelope.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppServiceEnvironmentResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppServiceEnvironmentResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppServiceEnvironmentResource} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, name: string, hostingEnvironmentEnvelope: models.AppServiceEnvironmentResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppServiceEnvironmentResource>;
    beginCreateOrUpdate(resourceGroupName: string, name: string, hostingEnvironmentEnvelope: models.AppServiceEnvironmentResource, callback: ServiceCallback<models.AppServiceEnvironmentResource>): void;
    beginCreateOrUpdate(resourceGroupName: string, name: string, hostingEnvironmentEnvelope: models.AppServiceEnvironmentResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppServiceEnvironmentResource>): void;


    /**
     * @summary Delete an App Service Environment.
     *
     * Delete an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.forceDelete] Specify <code>true</code> to force
     * the deletion even if the App Service Environment contains resources. The
     * default is <code>false</code>.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { forceDelete? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete an App Service Environment.
     *
     * Delete an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.forceDelete] Specify <code>true</code> to force
     * the deletion even if the App Service Environment contains resources. The
     * default is <code>false</code>.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, name: string, options?: { forceDelete? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, name: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, name: string, options: { forceDelete? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Move an App Service Environment to a different VNET.
     *
     * Move an App Service Environment to a different VNET.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} vnetInfo Details for the new virtual network.
     *
     * @param {string} [vnetInfo.id] Resource id of the Virtual Network.
     *
     * @param {string} [vnetInfo.subnet] Subnet within the Virtual Network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WebAppCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginChangeVnetWithHttpOperationResponse(resourceGroupName: string, name: string, vnetInfo: models.VirtualNetworkProfile, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WebAppCollection>>;

    /**
     * @summary Move an App Service Environment to a different VNET.
     *
     * Move an App Service Environment to a different VNET.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} vnetInfo Details for the new virtual network.
     *
     * @param {string} [vnetInfo.id] Resource id of the Virtual Network.
     *
     * @param {string} [vnetInfo.subnet] Subnet within the Virtual Network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WebAppCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WebAppCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WebAppCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginChangeVnet(resourceGroupName: string, name: string, vnetInfo: models.VirtualNetworkProfile, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WebAppCollection>;
    beginChangeVnet(resourceGroupName: string, name: string, vnetInfo: models.VirtualNetworkProfile, callback: ServiceCallback<models.WebAppCollection>): void;
    beginChangeVnet(resourceGroupName: string, name: string, vnetInfo: models.VirtualNetworkProfile, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WebAppCollection>): void;


    /**
     * @summary Create or update a multi-role pool.
     *
     * Create or update a multi-role pool.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} multiRolePoolEnvelope Properties of the multi-role pool.
     *
     * @param {number} [multiRolePoolEnvelope.workerSizeId] Worker size ID for
     * referencing this worker pool.
     *
     * @param {string} [multiRolePoolEnvelope.computeMode] Shared or dedicated app
     * hosting. Possible values include: 'Shared', 'Dedicated', 'Dynamic'
     *
     * @param {string} [multiRolePoolEnvelope.workerSize] VM size of the worker
     * pool instances.
     *
     * @param {number} [multiRolePoolEnvelope.workerCount] Number of instances in
     * the worker pool.
     *
     * @param {object} [multiRolePoolEnvelope.sku]
     *
     * @param {string} [multiRolePoolEnvelope.sku.name] Name of the resource SKU.
     *
     * @param {string} [multiRolePoolEnvelope.sku.tier] Service tier of the
     * resource SKU.
     *
     * @param {string} [multiRolePoolEnvelope.sku.size] Size specifier of the
     * resource SKU.
     *
     * @param {string} [multiRolePoolEnvelope.sku.family] Family code of the
     * resource SKU.
     *
     * @param {number} [multiRolePoolEnvelope.sku.capacity] Current number of
     * instances assigned to the resource.
     *
     * @param {object} [multiRolePoolEnvelope.sku.skuCapacity] Min, max, and
     * default scale values of the SKU.
     *
     * @param {number} [multiRolePoolEnvelope.sku.skuCapacity.minimum] Minimum
     * number of workers for this App Service plan SKU.
     *
     * @param {number} [multiRolePoolEnvelope.sku.skuCapacity.maximum] Maximum
     * number of workers for this App Service plan SKU.
     *
     * @param {number} [multiRolePoolEnvelope.sku.skuCapacity.default] Default
     * number of workers for this App Service plan SKU.
     *
     * @param {string} [multiRolePoolEnvelope.sku.skuCapacity.scaleType] Available
     * scale configurations for an App Service plan.
     *
     * @param {array} [multiRolePoolEnvelope.sku.locations] Locations of the SKU.
     *
     * @param {array} [multiRolePoolEnvelope.sku.capabilities] Capabilities of the
     * SKU, e.g., is traffic manager enabled?
     *
     * @param {string} [multiRolePoolEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkerPoolResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateMultiRolePoolWithHttpOperationResponse(resourceGroupName: string, name: string, multiRolePoolEnvelope: models.WorkerPoolResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkerPoolResource>>;

    /**
     * @summary Create or update a multi-role pool.
     *
     * Create or update a multi-role pool.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} multiRolePoolEnvelope Properties of the multi-role pool.
     *
     * @param {number} [multiRolePoolEnvelope.workerSizeId] Worker size ID for
     * referencing this worker pool.
     *
     * @param {string} [multiRolePoolEnvelope.computeMode] Shared or dedicated app
     * hosting. Possible values include: 'Shared', 'Dedicated', 'Dynamic'
     *
     * @param {string} [multiRolePoolEnvelope.workerSize] VM size of the worker
     * pool instances.
     *
     * @param {number} [multiRolePoolEnvelope.workerCount] Number of instances in
     * the worker pool.
     *
     * @param {object} [multiRolePoolEnvelope.sku]
     *
     * @param {string} [multiRolePoolEnvelope.sku.name] Name of the resource SKU.
     *
     * @param {string} [multiRolePoolEnvelope.sku.tier] Service tier of the
     * resource SKU.
     *
     * @param {string} [multiRolePoolEnvelope.sku.size] Size specifier of the
     * resource SKU.
     *
     * @param {string} [multiRolePoolEnvelope.sku.family] Family code of the
     * resource SKU.
     *
     * @param {number} [multiRolePoolEnvelope.sku.capacity] Current number of
     * instances assigned to the resource.
     *
     * @param {object} [multiRolePoolEnvelope.sku.skuCapacity] Min, max, and
     * default scale values of the SKU.
     *
     * @param {number} [multiRolePoolEnvelope.sku.skuCapacity.minimum] Minimum
     * number of workers for this App Service plan SKU.
     *
     * @param {number} [multiRolePoolEnvelope.sku.skuCapacity.maximum] Maximum
     * number of workers for this App Service plan SKU.
     *
     * @param {number} [multiRolePoolEnvelope.sku.skuCapacity.default] Default
     * number of workers for this App Service plan SKU.
     *
     * @param {string} [multiRolePoolEnvelope.sku.skuCapacity.scaleType] Available
     * scale configurations for an App Service plan.
     *
     * @param {array} [multiRolePoolEnvelope.sku.locations] Locations of the SKU.
     *
     * @param {array} [multiRolePoolEnvelope.sku.capabilities] Capabilities of the
     * SKU, e.g., is traffic manager enabled?
     *
     * @param {string} [multiRolePoolEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkerPoolResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkerPoolResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkerPoolResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdateMultiRolePool(resourceGroupName: string, name: string, multiRolePoolEnvelope: models.WorkerPoolResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkerPoolResource>;
    beginCreateOrUpdateMultiRolePool(resourceGroupName: string, name: string, multiRolePoolEnvelope: models.WorkerPoolResource, callback: ServiceCallback<models.WorkerPoolResource>): void;
    beginCreateOrUpdateMultiRolePool(resourceGroupName: string, name: string, multiRolePoolEnvelope: models.WorkerPoolResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkerPoolResource>): void;


    /**
     * @summary Resume an App Service Environment.
     *
     * Resume an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WebAppCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginResumeWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WebAppCollection>>;

    /**
     * @summary Resume an App Service Environment.
     *
     * Resume an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WebAppCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WebAppCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WebAppCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginResume(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WebAppCollection>;
    beginResume(resourceGroupName: string, name: string, callback: ServiceCallback<models.WebAppCollection>): void;
    beginResume(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WebAppCollection>): void;


    /**
     * @summary Suspend an App Service Environment.
     *
     * Suspend an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WebAppCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginSuspendWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WebAppCollection>>;

    /**
     * @summary Suspend an App Service Environment.
     *
     * Suspend an App Service Environment.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WebAppCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WebAppCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WebAppCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginSuspend(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WebAppCollection>;
    beginSuspend(resourceGroupName: string, name: string, callback: ServiceCallback<models.WebAppCollection>): void;
    beginSuspend(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WebAppCollection>): void;


    /**
     * @summary Create or update a worker pool.
     *
     * Create or update a worker pool.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {string} workerPoolName Name of the worker pool.
     *
     * @param {object} workerPoolEnvelope Properties of the worker pool.
     *
     * @param {number} [workerPoolEnvelope.workerSizeId] Worker size ID for
     * referencing this worker pool.
     *
     * @param {string} [workerPoolEnvelope.computeMode] Shared or dedicated app
     * hosting. Possible values include: 'Shared', 'Dedicated', 'Dynamic'
     *
     * @param {string} [workerPoolEnvelope.workerSize] VM size of the worker pool
     * instances.
     *
     * @param {number} [workerPoolEnvelope.workerCount] Number of instances in the
     * worker pool.
     *
     * @param {object} [workerPoolEnvelope.sku]
     *
     * @param {string} [workerPoolEnvelope.sku.name] Name of the resource SKU.
     *
     * @param {string} [workerPoolEnvelope.sku.tier] Service tier of the resource
     * SKU.
     *
     * @param {string} [workerPoolEnvelope.sku.size] Size specifier of the resource
     * SKU.
     *
     * @param {string} [workerPoolEnvelope.sku.family] Family code of the resource
     * SKU.
     *
     * @param {number} [workerPoolEnvelope.sku.capacity] Current number of
     * instances assigned to the resource.
     *
     * @param {object} [workerPoolEnvelope.sku.skuCapacity] Min, max, and default
     * scale values of the SKU.
     *
     * @param {number} [workerPoolEnvelope.sku.skuCapacity.minimum] Minimum number
     * of workers for this App Service plan SKU.
     *
     * @param {number} [workerPoolEnvelope.sku.skuCapacity.maximum] Maximum number
     * of workers for this App Service plan SKU.
     *
     * @param {number} [workerPoolEnvelope.sku.skuCapacity.default] Default number
     * of workers for this App Service plan SKU.
     *
     * @param {string} [workerPoolEnvelope.sku.skuCapacity.scaleType] Available
     * scale configurations for an App Service plan.
     *
     * @param {array} [workerPoolEnvelope.sku.locations] Locations of the SKU.
     *
     * @param {array} [workerPoolEnvelope.sku.capabilities] Capabilities of the
     * SKU, e.g., is traffic manager enabled?
     *
     * @param {string} [workerPoolEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkerPoolResource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWorkerPoolWithHttpOperationResponse(resourceGroupName: string, name: string, workerPoolName: string, workerPoolEnvelope: models.WorkerPoolResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkerPoolResource>>;

    /**
     * @summary Create or update a worker pool.
     *
     * Create or update a worker pool.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service Environment.
     *
     * @param {string} workerPoolName Name of the worker pool.
     *
     * @param {object} workerPoolEnvelope Properties of the worker pool.
     *
     * @param {number} [workerPoolEnvelope.workerSizeId] Worker size ID for
     * referencing this worker pool.
     *
     * @param {string} [workerPoolEnvelope.computeMode] Shared or dedicated app
     * hosting. Possible values include: 'Shared', 'Dedicated', 'Dynamic'
     *
     * @param {string} [workerPoolEnvelope.workerSize] VM size of the worker pool
     * instances.
     *
     * @param {number} [workerPoolEnvelope.workerCount] Number of instances in the
     * worker pool.
     *
     * @param {object} [workerPoolEnvelope.sku]
     *
     * @param {string} [workerPoolEnvelope.sku.name] Name of the resource SKU.
     *
     * @param {string} [workerPoolEnvelope.sku.tier] Service tier of the resource
     * SKU.
     *
     * @param {string} [workerPoolEnvelope.sku.size] Size specifier of the resource
     * SKU.
     *
     * @param {string} [workerPoolEnvelope.sku.family] Family code of the resource
     * SKU.
     *
     * @param {number} [workerPoolEnvelope.sku.capacity] Current number of
     * instances assigned to the resource.
     *
     * @param {object} [workerPoolEnvelope.sku.skuCapacity] Min, max, and default
     * scale values of the SKU.
     *
     * @param {number} [workerPoolEnvelope.sku.skuCapacity.minimum] Minimum number
     * of workers for this App Service plan SKU.
     *
     * @param {number} [workerPoolEnvelope.sku.skuCapacity.maximum] Maximum number
     * of workers for this App Service plan SKU.
     *
     * @param {number} [workerPoolEnvelope.sku.skuCapacity.default] Default number
     * of workers for this App Service plan SKU.
     *
     * @param {string} [workerPoolEnvelope.sku.skuCapacity.scaleType] Available
     * scale configurations for an App Service plan.
     *
     * @param {array} [workerPoolEnvelope.sku.locations] Locations of the SKU.
     *
     * @param {array} [workerPoolEnvelope.sku.capabilities] Capabilities of the
     * SKU, e.g., is traffic manager enabled?
     *
     * @param {string} [workerPoolEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkerPoolResource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkerPoolResource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkerPoolResource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdateWorkerPool(resourceGroupName: string, name: string, workerPoolName: string, workerPoolEnvelope: models.WorkerPoolResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkerPoolResource>;
    beginCreateOrUpdateWorkerPool(resourceGroupName: string, name: string, workerPoolName: string, workerPoolEnvelope: models.WorkerPoolResource, callback: ServiceCallback<models.WorkerPoolResource>): void;
    beginCreateOrUpdateWorkerPool(resourceGroupName: string, name: string, workerPoolName: string, workerPoolEnvelope: models.WorkerPoolResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkerPoolResource>): void;


    /**
     * @summary Get all App Service Environments for a subscription.
     *
     * Get all App Service Environments for a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppServiceEnvironmentCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppServiceEnvironmentCollection>>;

    /**
     * @summary Get all App Service Environments for a subscription.
     *
     * Get all App Service Environments for a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppServiceEnvironmentCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppServiceEnvironmentCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppServiceEnvironmentCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppServiceEnvironmentCollection>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.AppServiceEnvironmentCollection>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppServiceEnvironmentCollection>): void;


    /**
     * @summary Get all App Service Environments in a resource group.
     *
     * Get all App Service Environments in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppServiceEnvironmentCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppServiceEnvironmentCollection>>;

    /**
     * @summary Get all App Service Environments in a resource group.
     *
     * Get all App Service Environments in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppServiceEnvironmentCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppServiceEnvironmentCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppServiceEnvironmentCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppServiceEnvironmentCollection>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.AppServiceEnvironmentCollection>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppServiceEnvironmentCollection>): void;


    /**
     * @summary Get the used, available, and total worker capacity an App Service
     * Environment.
     *
     * Get the used, available, and total worker capacity an App Service
     * Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<StampCapacityCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listCapacitiesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StampCapacityCollection>>;

    /**
     * @summary Get the used, available, and total worker capacity an App Service
     * Environment.
     *
     * Get the used, available, and total worker capacity an App Service
     * Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {StampCapacityCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {StampCapacityCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link StampCapacityCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listCapacitiesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StampCapacityCollection>;
    listCapacitiesNext(nextPageLink: string, callback: ServiceCallback<models.StampCapacityCollection>): void;
    listCapacitiesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StampCapacityCollection>): void;


    /**
     * @summary Move an App Service Environment to a different VNET.
     *
     * Move an App Service Environment to a different VNET.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WebAppCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    changeVnetNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WebAppCollection>>;

    /**
     * @summary Move an App Service Environment to a different VNET.
     *
     * Move an App Service Environment to a different VNET.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WebAppCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WebAppCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WebAppCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    changeVnetNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WebAppCollection>;
    changeVnetNext(nextPageLink: string, callback: ServiceCallback<models.WebAppCollection>): void;
    changeVnetNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WebAppCollection>): void;


    /**
     * @summary Get global metrics of an App Service Environment.
     *
     * Get global metrics of an App Service Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceMetricCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceMetricCollection>>;

    /**
     * @summary Get global metrics of an App Service Environment.
     *
     * Get global metrics of an App Service Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceMetricCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceMetricCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceMetricCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetricsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceMetricCollection>;
    listMetricsNext(nextPageLink: string, callback: ServiceCallback<models.ResourceMetricCollection>): void;
    listMetricsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricCollection>): void;


    /**
     * @summary Get all multi-role pools.
     *
     * Get all multi-role pools.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkerPoolCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMultiRolePoolsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkerPoolCollection>>;

    /**
     * @summary Get all multi-role pools.
     *
     * Get all multi-role pools.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkerPoolCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkerPoolCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkerPoolCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMultiRolePoolsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkerPoolCollection>;
    listMultiRolePoolsNext(nextPageLink: string, callback: ServiceCallback<models.WorkerPoolCollection>): void;
    listMultiRolePoolsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkerPoolCollection>): void;


    /**
     * @summary Get metric definitions for a specific instance of a multi-role pool
     * of an App Service Environment.
     *
     * Get metric definitions for a specific instance of a multi-role pool of an
     * App Service Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceMetricDefinitionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMultiRolePoolInstanceMetricDefinitionsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceMetricDefinitionCollection>>;

    /**
     * @summary Get metric definitions for a specific instance of a multi-role pool
     * of an App Service Environment.
     *
     * Get metric definitions for a specific instance of a multi-role pool of an
     * App Service Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceMetricDefinitionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceMetricDefinitionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceMetricDefinitionCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMultiRolePoolInstanceMetricDefinitionsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceMetricDefinitionCollection>;
    listMultiRolePoolInstanceMetricDefinitionsNext(nextPageLink: string, callback: ServiceCallback<models.ResourceMetricDefinitionCollection>): void;
    listMultiRolePoolInstanceMetricDefinitionsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricDefinitionCollection>): void;


    /**
     * @summary Get metrics for a specific instance of a multi-role pool of an App
     * Service Environment.
     *
     * Get metrics for a specific instance of a multi-role pool of an App Service
     * Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceMetricCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMultiRolePoolInstanceMetricsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceMetricCollection>>;

    /**
     * @summary Get metrics for a specific instance of a multi-role pool of an App
     * Service Environment.
     *
     * Get metrics for a specific instance of a multi-role pool of an App Service
     * Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceMetricCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceMetricCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceMetricCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMultiRolePoolInstanceMetricsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceMetricCollection>;
    listMultiRolePoolInstanceMetricsNext(nextPageLink: string, callback: ServiceCallback<models.ResourceMetricCollection>): void;
    listMultiRolePoolInstanceMetricsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricCollection>): void;


    /**
     * @summary Get metric definitions for a multi-role pool of an App Service
     * Environment.
     *
     * Get metric definitions for a multi-role pool of an App Service Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceMetricDefinitionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMultiRoleMetricDefinitionsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceMetricDefinitionCollection>>;

    /**
     * @summary Get metric definitions for a multi-role pool of an App Service
     * Environment.
     *
     * Get metric definitions for a multi-role pool of an App Service Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceMetricDefinitionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceMetricDefinitionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceMetricDefinitionCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMultiRoleMetricDefinitionsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceMetricDefinitionCollection>;
    listMultiRoleMetricDefinitionsNext(nextPageLink: string, callback: ServiceCallback<models.ResourceMetricDefinitionCollection>): void;
    listMultiRoleMetricDefinitionsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricDefinitionCollection>): void;


    /**
     * @summary Get metrics for a multi-role pool of an App Service Environment.
     *
     * Get metrics for a multi-role pool of an App Service Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceMetricCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMultiRoleMetricsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceMetricCollection>>;

    /**
     * @summary Get metrics for a multi-role pool of an App Service Environment.
     *
     * Get metrics for a multi-role pool of an App Service Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceMetricCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceMetricCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceMetricCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMultiRoleMetricsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceMetricCollection>;
    listMultiRoleMetricsNext(nextPageLink: string, callback: ServiceCallback<models.ResourceMetricCollection>): void;
    listMultiRoleMetricsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricCollection>): void;


    /**
     * @summary Get available SKUs for scaling a multi-role pool.
     *
     * Get available SKUs for scaling a multi-role pool.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SkuInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMultiRolePoolSkusNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SkuInfoCollection>>;

    /**
     * @summary Get available SKUs for scaling a multi-role pool.
     *
     * Get available SKUs for scaling a multi-role pool.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SkuInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SkuInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SkuInfoCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMultiRolePoolSkusNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SkuInfoCollection>;
    listMultiRolePoolSkusNext(nextPageLink: string, callback: ServiceCallback<models.SkuInfoCollection>): void;
    listMultiRolePoolSkusNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SkuInfoCollection>): void;


    /**
     * @summary Get usage metrics for a multi-role pool of an App Service
     * Environment.
     *
     * Get usage metrics for a multi-role pool of an App Service Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UsageCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMultiRoleUsagesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UsageCollection>>;

    /**
     * @summary Get usage metrics for a multi-role pool of an App Service
     * Environment.
     *
     * Get usage metrics for a multi-role pool of an App Service Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UsageCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UsageCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UsageCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMultiRoleUsagesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.UsageCollection>;
    listMultiRoleUsagesNext(nextPageLink: string, callback: ServiceCallback<models.UsageCollection>): void;
    listMultiRoleUsagesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UsageCollection>): void;


    /**
     * @summary Resume an App Service Environment.
     *
     * Resume an App Service Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WebAppCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    resumeNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WebAppCollection>>;

    /**
     * @summary Resume an App Service Environment.
     *
     * Resume an App Service Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WebAppCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WebAppCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WebAppCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    resumeNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WebAppCollection>;
    resumeNext(nextPageLink: string, callback: ServiceCallback<models.WebAppCollection>): void;
    resumeNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WebAppCollection>): void;


    /**
     * @summary Get all App Service plans in an App Service Environment.
     *
     * Get all App Service plans in an App Service Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppServicePlanCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listAppServicePlansNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppServicePlanCollection>>;

    /**
     * @summary Get all App Service plans in an App Service Environment.
     *
     * Get all App Service plans in an App Service Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppServicePlanCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppServicePlanCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppServicePlanCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listAppServicePlansNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppServicePlanCollection>;
    listAppServicePlansNext(nextPageLink: string, callback: ServiceCallback<models.AppServicePlanCollection>): void;
    listAppServicePlansNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppServicePlanCollection>): void;


    /**
     * @summary Get all apps in an App Service Environment.
     *
     * Get all apps in an App Service Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WebAppCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWebAppsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WebAppCollection>>;

    /**
     * @summary Get all apps in an App Service Environment.
     *
     * Get all apps in an App Service Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WebAppCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WebAppCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WebAppCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listWebAppsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WebAppCollection>;
    listWebAppsNext(nextPageLink: string, callback: ServiceCallback<models.WebAppCollection>): void;
    listWebAppsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WebAppCollection>): void;


    /**
     * @summary Suspend an App Service Environment.
     *
     * Suspend an App Service Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WebAppCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    suspendNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WebAppCollection>>;

    /**
     * @summary Suspend an App Service Environment.
     *
     * Suspend an App Service Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WebAppCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WebAppCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WebAppCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    suspendNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WebAppCollection>;
    suspendNext(nextPageLink: string, callback: ServiceCallback<models.WebAppCollection>): void;
    suspendNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WebAppCollection>): void;


    /**
     * @summary Get global usage metrics of an App Service Environment.
     *
     * Get global usage metrics of an App Service Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CsmUsageQuotaCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listUsagesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CsmUsageQuotaCollection>>;

    /**
     * @summary Get global usage metrics of an App Service Environment.
     *
     * Get global usage metrics of an App Service Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CsmUsageQuotaCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CsmUsageQuotaCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CsmUsageQuotaCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listUsagesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CsmUsageQuotaCollection>;
    listUsagesNext(nextPageLink: string, callback: ServiceCallback<models.CsmUsageQuotaCollection>): void;
    listUsagesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CsmUsageQuotaCollection>): void;


    /**
     * @summary Get all worker pools of an App Service Environment.
     *
     * Get all worker pools of an App Service Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WorkerPoolCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWorkerPoolsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WorkerPoolCollection>>;

    /**
     * @summary Get all worker pools of an App Service Environment.
     *
     * Get all worker pools of an App Service Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WorkerPoolCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WorkerPoolCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WorkerPoolCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listWorkerPoolsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WorkerPoolCollection>;
    listWorkerPoolsNext(nextPageLink: string, callback: ServiceCallback<models.WorkerPoolCollection>): void;
    listWorkerPoolsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkerPoolCollection>): void;


    /**
     * @summary Get metric definitions for a specific instance of a worker pool of
     * an App Service Environment.
     *
     * Get metric definitions for a specific instance of a worker pool of an App
     * Service Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceMetricDefinitionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWorkerPoolInstanceMetricDefinitionsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceMetricDefinitionCollection>>;

    /**
     * @summary Get metric definitions for a specific instance of a worker pool of
     * an App Service Environment.
     *
     * Get metric definitions for a specific instance of a worker pool of an App
     * Service Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceMetricDefinitionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceMetricDefinitionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceMetricDefinitionCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listWorkerPoolInstanceMetricDefinitionsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceMetricDefinitionCollection>;
    listWorkerPoolInstanceMetricDefinitionsNext(nextPageLink: string, callback: ServiceCallback<models.ResourceMetricDefinitionCollection>): void;
    listWorkerPoolInstanceMetricDefinitionsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricDefinitionCollection>): void;


    /**
     * @summary Get metrics for a specific instance of a worker pool of an App
     * Service Environment.
     *
     * Get metrics for a specific instance of a worker pool of an App Service
     * Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceMetricCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWorkerPoolInstanceMetricsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceMetricCollection>>;

    /**
     * @summary Get metrics for a specific instance of a worker pool of an App
     * Service Environment.
     *
     * Get metrics for a specific instance of a worker pool of an App Service
     * Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceMetricCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceMetricCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceMetricCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listWorkerPoolInstanceMetricsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceMetricCollection>;
    listWorkerPoolInstanceMetricsNext(nextPageLink: string, callback: ServiceCallback<models.ResourceMetricCollection>): void;
    listWorkerPoolInstanceMetricsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricCollection>): void;


    /**
     * @summary Get metric definitions for a worker pool of an App Service
     * Environment.
     *
     * Get metric definitions for a worker pool of an App Service Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceMetricDefinitionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWebWorkerMetricDefinitionsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceMetricDefinitionCollection>>;

    /**
     * @summary Get metric definitions for a worker pool of an App Service
     * Environment.
     *
     * Get metric definitions for a worker pool of an App Service Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceMetricDefinitionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceMetricDefinitionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceMetricDefinitionCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listWebWorkerMetricDefinitionsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceMetricDefinitionCollection>;
    listWebWorkerMetricDefinitionsNext(nextPageLink: string, callback: ServiceCallback<models.ResourceMetricDefinitionCollection>): void;
    listWebWorkerMetricDefinitionsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricDefinitionCollection>): void;


    /**
     * @summary Get metrics for a worker pool of a AppServiceEnvironment (App
     * Service Environment).
     *
     * Get metrics for a worker pool of a AppServiceEnvironment (App Service
     * Environment).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceMetricCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWebWorkerMetricsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceMetricCollection>>;

    /**
     * @summary Get metrics for a worker pool of a AppServiceEnvironment (App
     * Service Environment).
     *
     * Get metrics for a worker pool of a AppServiceEnvironment (App Service
     * Environment).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceMetricCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceMetricCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceMetricCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listWebWorkerMetricsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceMetricCollection>;
    listWebWorkerMetricsNext(nextPageLink: string, callback: ServiceCallback<models.ResourceMetricCollection>): void;
    listWebWorkerMetricsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricCollection>): void;


    /**
     * @summary Get available SKUs for scaling a worker pool.
     *
     * Get available SKUs for scaling a worker pool.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SkuInfoCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWorkerPoolSkusNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SkuInfoCollection>>;

    /**
     * @summary Get available SKUs for scaling a worker pool.
     *
     * Get available SKUs for scaling a worker pool.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SkuInfoCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SkuInfoCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SkuInfoCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listWorkerPoolSkusNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SkuInfoCollection>;
    listWorkerPoolSkusNext(nextPageLink: string, callback: ServiceCallback<models.SkuInfoCollection>): void;
    listWorkerPoolSkusNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SkuInfoCollection>): void;


    /**
     * @summary Get usage metrics for a worker pool of an App Service Environment.
     *
     * Get usage metrics for a worker pool of an App Service Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UsageCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWebWorkerUsagesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UsageCollection>>;

    /**
     * @summary Get usage metrics for a worker pool of an App Service Environment.
     *
     * Get usage metrics for a worker pool of an App Service Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UsageCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UsageCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UsageCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listWebWorkerUsagesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.UsageCollection>;
    listWebWorkerUsagesNext(nextPageLink: string, callback: ServiceCallback<models.UsageCollection>): void;
    listWebWorkerUsagesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UsageCollection>): void;


    /**
     * @summary Move an App Service Environment to a different VNET.
     *
     * Move an App Service Environment to a different VNET.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WebAppCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginChangeVnetNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WebAppCollection>>;

    /**
     * @summary Move an App Service Environment to a different VNET.
     *
     * Move an App Service Environment to a different VNET.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WebAppCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WebAppCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WebAppCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginChangeVnetNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WebAppCollection>;
    beginChangeVnetNext(nextPageLink: string, callback: ServiceCallback<models.WebAppCollection>): void;
    beginChangeVnetNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WebAppCollection>): void;


    /**
     * @summary Resume an App Service Environment.
     *
     * Resume an App Service Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WebAppCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginResumeNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WebAppCollection>>;

    /**
     * @summary Resume an App Service Environment.
     *
     * Resume an App Service Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WebAppCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WebAppCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WebAppCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginResumeNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WebAppCollection>;
    beginResumeNext(nextPageLink: string, callback: ServiceCallback<models.WebAppCollection>): void;
    beginResumeNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WebAppCollection>): void;


    /**
     * @summary Suspend an App Service Environment.
     *
     * Suspend an App Service Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WebAppCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginSuspendNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WebAppCollection>>;

    /**
     * @summary Suspend an App Service Environment.
     *
     * Suspend an App Service Environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WebAppCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WebAppCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WebAppCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginSuspendNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WebAppCollection>;
    beginSuspendNext(nextPageLink: string, callback: ServiceCallback<models.WebAppCollection>): void;
    beginSuspendNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WebAppCollection>): void;
}

/**
 * @class
 * AppServicePlans
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the WebSiteManagementClient.
 */
export interface AppServicePlans {


    /**
     * @summary Get all App Service plans for a subcription.
     *
     * Get all App Service plans for a subcription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.detailed] Specify <code>true</code> to return all
     * App Service plan properties. The default is <code>false</code>, which
     * returns a subset of the properties.
     * Retrieval of all properties may increase the API latency.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppServicePlanCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { detailed? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppServicePlanCollection>>;

    /**
     * @summary Get all App Service plans for a subcription.
     *
     * Get all App Service plans for a subcription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.detailed] Specify <code>true</code> to return all
     * App Service plan properties. The default is <code>false</code>, which
     * returns a subset of the properties.
     * Retrieval of all properties may increase the API latency.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppServicePlanCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppServicePlanCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppServicePlanCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { detailed? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.AppServicePlanCollection>;
    list(callback: ServiceCallback<models.AppServicePlanCollection>): void;
    list(options: { detailed? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppServicePlanCollection>): void;


    /**
     * @summary Get all App Service plans in a resource group.
     *
     * Get all App Service plans in a resource group.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppServicePlanCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppServicePlanCollection>>;

    /**
     * @summary Get all App Service plans in a resource group.
     *
     * Get all App Service plans in a resource group.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppServicePlanCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppServicePlanCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppServicePlanCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppServicePlanCollection>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.AppServicePlanCollection>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppServicePlanCollection>): void;


    /**
     * @summary Get an App Service plan.
     *
     * Get an App Service plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppServicePlan>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppServicePlan>>;

    /**
     * @summary Get an App Service plan.
     *
     * Get an App Service plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppServicePlan} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppServicePlan} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppServicePlan} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppServicePlan>;
    get(resourceGroupName: string, name: string, callback: ServiceCallback<models.AppServicePlan>): void;
    get(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppServicePlan>): void;


    /**
     * @summary Creates or updates an App Service Plan.
     *
     * Creates or updates an App Service Plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {object} appServicePlan Details of the App Service plan.
     *
     * @param {string} [appServicePlan.workerTierName] Target worker tier assigned
     * to the App Service plan.
     *
     * @param {string} [appServicePlan.adminSiteName] App Service plan
     * administration site.
     *
     * @param {object} [appServicePlan.hostingEnvironmentProfile] Specification for
     * the App Service Environment to use for the App Service plan.
     *
     * @param {string} [appServicePlan.hostingEnvironmentProfile.id] Resource ID of
     * the App Service Environment.
     *
     * @param {boolean} [appServicePlan.perSiteScaling] If <code>true</code>, apps
     * assigned to this App Service plan can be scaled independently.
     * If <code>false</code>, apps assigned to this App Service plan will scale to
     * all instances of the plan.
     *
     * @param {number} [appServicePlan.maximumElasticWorkerCount] Maximum number of
     * total workers allowed for this ElasticScaleEnabled App Service Plan
     *
     * @param {boolean} [appServicePlan.isSpot] If <code>true</code>, this App
     * Service Plan owns spot instances.
     *
     * @param {date} [appServicePlan.spotExpirationTime] The time when the server
     * farm expires. Valid only if it is a spot server farm.
     *
     * @param {date} [appServicePlan.freeOfferExpirationTime] The time when the
     * server farm free offer expires.
     *
     * @param {boolean} [appServicePlan.reserved] If Linux app service plan
     * <code>true</code>, <code>false</code> otherwise.
     *
     * @param {boolean} [appServicePlan.isXenon] Obsolete: If Hyper-V container app
     * service plan <code>true</code>, <code>false</code> otherwise.
     *
     * @param {boolean} [appServicePlan.hyperV] If Hyper-V container app service
     * plan <code>true</code>, <code>false</code> otherwise.
     *
     * @param {number} [appServicePlan.targetWorkerCount] Scaling worker count.
     *
     * @param {number} [appServicePlan.targetWorkerSizeId] Scaling worker size ID.
     *
     * @param {object} [appServicePlan.sku]
     *
     * @param {string} [appServicePlan.sku.name] Name of the resource SKU.
     *
     * @param {string} [appServicePlan.sku.tier] Service tier of the resource SKU.
     *
     * @param {string} [appServicePlan.sku.size] Size specifier of the resource
     * SKU.
     *
     * @param {string} [appServicePlan.sku.family] Family code of the resource SKU.
     *
     * @param {number} [appServicePlan.sku.capacity] Current number of instances
     * assigned to the resource.
     *
     * @param {object} [appServicePlan.sku.skuCapacity] Min, max, and default scale
     * values of the SKU.
     *
     * @param {number} [appServicePlan.sku.skuCapacity.minimum] Minimum number of
     * workers for this App Service plan SKU.
     *
     * @param {number} [appServicePlan.sku.skuCapacity.maximum] Maximum number of
     * workers for this App Service plan SKU.
     *
     * @param {number} [appServicePlan.sku.skuCapacity.default] Default number of
     * workers for this App Service plan SKU.
     *
     * @param {string} [appServicePlan.sku.skuCapacity.scaleType] Available scale
     * configurations for an App Service plan.
     *
     * @param {array} [appServicePlan.sku.locations] Locations of the SKU.
     *
     * @param {array} [appServicePlan.sku.capabilities] Capabilities of the SKU,
     * e.g., is traffic manager enabled?
     *
     * @param {string} [appServicePlan.kind] Kind of resource.
     *
     * @param {string} appServicePlan.location Resource Location.
     *
     * @param {object} [appServicePlan.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppServicePlan>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, name: string, appServicePlan: models.AppServicePlan, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppServicePlan>>;

    /**
     * @summary Creates or updates an App Service Plan.
     *
     * Creates or updates an App Service Plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {object} appServicePlan Details of the App Service plan.
     *
     * @param {string} [appServicePlan.workerTierName] Target worker tier assigned
     * to the App Service plan.
     *
     * @param {string} [appServicePlan.adminSiteName] App Service plan
     * administration site.
     *
     * @param {object} [appServicePlan.hostingEnvironmentProfile] Specification for
     * the App Service Environment to use for the App Service plan.
     *
     * @param {string} [appServicePlan.hostingEnvironmentProfile.id] Resource ID of
     * the App Service Environment.
     *
     * @param {boolean} [appServicePlan.perSiteScaling] If <code>true</code>, apps
     * assigned to this App Service plan can be scaled independently.
     * If <code>false</code>, apps assigned to this App Service plan will scale to
     * all instances of the plan.
     *
     * @param {number} [appServicePlan.maximumElasticWorkerCount] Maximum number of
     * total workers allowed for this ElasticScaleEnabled App Service Plan
     *
     * @param {boolean} [appServicePlan.isSpot] If <code>true</code>, this App
     * Service Plan owns spot instances.
     *
     * @param {date} [appServicePlan.spotExpirationTime] The time when the server
     * farm expires. Valid only if it is a spot server farm.
     *
     * @param {date} [appServicePlan.freeOfferExpirationTime] The time when the
     * server farm free offer expires.
     *
     * @param {boolean} [appServicePlan.reserved] If Linux app service plan
     * <code>true</code>, <code>false</code> otherwise.
     *
     * @param {boolean} [appServicePlan.isXenon] Obsolete: If Hyper-V container app
     * service plan <code>true</code>, <code>false</code> otherwise.
     *
     * @param {boolean} [appServicePlan.hyperV] If Hyper-V container app service
     * plan <code>true</code>, <code>false</code> otherwise.
     *
     * @param {number} [appServicePlan.targetWorkerCount] Scaling worker count.
     *
     * @param {number} [appServicePlan.targetWorkerSizeId] Scaling worker size ID.
     *
     * @param {object} [appServicePlan.sku]
     *
     * @param {string} [appServicePlan.sku.name] Name of the resource SKU.
     *
     * @param {string} [appServicePlan.sku.tier] Service tier of the resource SKU.
     *
     * @param {string} [appServicePlan.sku.size] Size specifier of the resource
     * SKU.
     *
     * @param {string} [appServicePlan.sku.family] Family code of the resource SKU.
     *
     * @param {number} [appServicePlan.sku.capacity] Current number of instances
     * assigned to the resource.
     *
     * @param {object} [appServicePlan.sku.skuCapacity] Min, max, and default scale
     * values of the SKU.
     *
     * @param {number} [appServicePlan.sku.skuCapacity.minimum] Minimum number of
     * workers for this App Service plan SKU.
     *
     * @param {number} [appServicePlan.sku.skuCapacity.maximum] Maximum number of
     * workers for this App Service plan SKU.
     *
     * @param {number} [appServicePlan.sku.skuCapacity.default] Default number of
     * workers for this App Service plan SKU.
     *
     * @param {string} [appServicePlan.sku.skuCapacity.scaleType] Available scale
     * configurations for an App Service plan.
     *
     * @param {array} [appServicePlan.sku.locations] Locations of the SKU.
     *
     * @param {array} [appServicePlan.sku.capabilities] Capabilities of the SKU,
     * e.g., is traffic manager enabled?
     *
     * @param {string} [appServicePlan.kind] Kind of resource.
     *
     * @param {string} appServicePlan.location Resource Location.
     *
     * @param {object} [appServicePlan.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppServicePlan} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppServicePlan} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppServicePlan} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, name: string, appServicePlan: models.AppServicePlan, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppServicePlan>;
    createOrUpdate(resourceGroupName: string, name: string, appServicePlan: models.AppServicePlan, callback: ServiceCallback<models.AppServicePlan>): void;
    createOrUpdate(resourceGroupName: string, name: string, appServicePlan: models.AppServicePlan, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppServicePlan>): void;


    /**
     * @summary Delete an App Service plan.
     *
     * Delete an App Service plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete an App Service plan.
     *
     * Delete an App Service plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, name: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Creates or updates an App Service Plan.
     *
     * Creates or updates an App Service Plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {object} appServicePlan Details of the App Service plan.
     *
     * @param {string} [appServicePlan.workerTierName] Target worker tier assigned
     * to the App Service plan.
     *
     * @param {string} [appServicePlan.adminSiteName] App Service plan
     * administration site.
     *
     * @param {object} [appServicePlan.hostingEnvironmentProfile] Specification for
     * the App Service Environment to use for the App Service plan.
     *
     * @param {string} [appServicePlan.hostingEnvironmentProfile.id] Resource ID of
     * the App Service Environment.
     *
     * @param {boolean} [appServicePlan.perSiteScaling] If <code>true</code>, apps
     * assigned to this App Service plan can be scaled independently.
     * If <code>false</code>, apps assigned to this App Service plan will scale to
     * all instances of the plan.
     *
     * @param {number} [appServicePlan.maximumElasticWorkerCount] Maximum number of
     * total workers allowed for this ElasticScaleEnabled App Service Plan
     *
     * @param {boolean} [appServicePlan.isSpot] If <code>true</code>, this App
     * Service Plan owns spot instances.
     *
     * @param {date} [appServicePlan.spotExpirationTime] The time when the server
     * farm expires. Valid only if it is a spot server farm.
     *
     * @param {date} [appServicePlan.freeOfferExpirationTime] The time when the
     * server farm free offer expires.
     *
     * @param {boolean} [appServicePlan.reserved] If Linux app service plan
     * <code>true</code>, <code>false</code> otherwise.
     *
     * @param {boolean} [appServicePlan.isXenon] Obsolete: If Hyper-V container app
     * service plan <code>true</code>, <code>false</code> otherwise.
     *
     * @param {boolean} [appServicePlan.hyperV] If Hyper-V container app service
     * plan <code>true</code>, <code>false</code> otherwise.
     *
     * @param {number} [appServicePlan.targetWorkerCount] Scaling worker count.
     *
     * @param {number} [appServicePlan.targetWorkerSizeId] Scaling worker size ID.
     *
     * @param {string} [appServicePlan.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppServicePlan>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, name: string, appServicePlan: models.AppServicePlanPatchResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppServicePlan>>;

    /**
     * @summary Creates or updates an App Service Plan.
     *
     * Creates or updates an App Service Plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {object} appServicePlan Details of the App Service plan.
     *
     * @param {string} [appServicePlan.workerTierName] Target worker tier assigned
     * to the App Service plan.
     *
     * @param {string} [appServicePlan.adminSiteName] App Service plan
     * administration site.
     *
     * @param {object} [appServicePlan.hostingEnvironmentProfile] Specification for
     * the App Service Environment to use for the App Service plan.
     *
     * @param {string} [appServicePlan.hostingEnvironmentProfile.id] Resource ID of
     * the App Service Environment.
     *
     * @param {boolean} [appServicePlan.perSiteScaling] If <code>true</code>, apps
     * assigned to this App Service plan can be scaled independently.
     * If <code>false</code>, apps assigned to this App Service plan will scale to
     * all instances of the plan.
     *
     * @param {number} [appServicePlan.maximumElasticWorkerCount] Maximum number of
     * total workers allowed for this ElasticScaleEnabled App Service Plan
     *
     * @param {boolean} [appServicePlan.isSpot] If <code>true</code>, this App
     * Service Plan owns spot instances.
     *
     * @param {date} [appServicePlan.spotExpirationTime] The time when the server
     * farm expires. Valid only if it is a spot server farm.
     *
     * @param {date} [appServicePlan.freeOfferExpirationTime] The time when the
     * server farm free offer expires.
     *
     * @param {boolean} [appServicePlan.reserved] If Linux app service plan
     * <code>true</code>, <code>false</code> otherwise.
     *
     * @param {boolean} [appServicePlan.isXenon] Obsolete: If Hyper-V container app
     * service plan <code>true</code>, <code>false</code> otherwise.
     *
     * @param {boolean} [appServicePlan.hyperV] If Hyper-V container app service
     * plan <code>true</code>, <code>false</code> otherwise.
     *
     * @param {number} [appServicePlan.targetWorkerCount] Scaling worker count.
     *
     * @param {number} [appServicePlan.targetWorkerSizeId] Scaling worker size ID.
     *
     * @param {string} [appServicePlan.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppServicePlan} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppServicePlan} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppServicePlan} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, name: string, appServicePlan: models.AppServicePlanPatchResource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppServicePlan>;
    update(resourceGroupName: string, name: string, appServicePlan: models.AppServicePlanPatchResource, callback: ServiceCallback<models.AppServicePlan>): void;
    update(resourceGroupName: string, name: string, appServicePlan: models.AppServicePlanPatchResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppServicePlan>): void;


    /**
     * @summary List all capabilities of an App Service plan.
     *
     * List all capabilities of an App Service plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listCapabilitiesWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Capability[]>>;

    /**
     * @summary List all capabilities of an App Service plan.
     *
     * List all capabilities of an App Service plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listCapabilities(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Capability[]>;
    listCapabilities(resourceGroupName: string, name: string, callback: ServiceCallback<models.Capability[]>): void;
    listCapabilities(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Capability[]>): void;


    /**
     * @summary Retrieve a Hybrid Connection in use in an App Service plan.
     *
     * Retrieve a Hybrid Connection in use in an App Service plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {string} namespaceName Name of the Service Bus namespace.
     *
     * @param {string} relayName Name of the Service Bus relay.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HybridConnection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getHybridConnectionWithHttpOperationResponse(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HybridConnection>>;

    /**
     * @summary Retrieve a Hybrid Connection in use in an App Service plan.
     *
     * Retrieve a Hybrid Connection in use in an App Service plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {string} namespaceName Name of the Service Bus namespace.
     *
     * @param {string} relayName Name of the Service Bus relay.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HybridConnection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HybridConnection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HybridConnection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HybridConnection>;
    getHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, callback: ServiceCallback<models.HybridConnection>): void;
    getHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HybridConnection>): void;


    /**
     * @summary Delete a Hybrid Connection in use in an App Service plan.
     *
     * Delete a Hybrid Connection in use in an App Service plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {string} namespaceName Name of the Service Bus namespace.
     *
     * @param {string} relayName Name of the Service Bus relay.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteHybridConnectionWithHttpOperationResponse(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete a Hybrid Connection in use in an App Service plan.
     *
     * Delete a Hybrid Connection in use in an App Service plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {string} namespaceName Name of the Service Bus namespace.
     *
     * @param {string} relayName Name of the Service Bus relay.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, callback: ServiceCallback<void>): void;
    deleteHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Get the send key name and value of a Hybrid Connection.
     *
     * Get the send key name and value of a Hybrid Connection.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {string} namespaceName The name of the Service Bus namespace.
     *
     * @param {string} relayName The name of the Service Bus relay.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HybridConnectionKey>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listHybridConnectionKeysWithHttpOperationResponse(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HybridConnectionKey>>;

    /**
     * @summary Get the send key name and value of a Hybrid Connection.
     *
     * Get the send key name and value of a Hybrid Connection.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {string} namespaceName The name of the Service Bus namespace.
     *
     * @param {string} relayName The name of the Service Bus relay.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HybridConnectionKey} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HybridConnectionKey} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HybridConnectionKey} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listHybridConnectionKeys(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HybridConnectionKey>;
    listHybridConnectionKeys(resourceGroupName: string, name: string, namespaceName: string, relayName: string, callback: ServiceCallback<models.HybridConnectionKey>): void;
    listHybridConnectionKeys(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HybridConnectionKey>): void;


    /**
     * @summary Get all apps that use a Hybrid Connection in an App Service Plan.
     *
     * Get all apps that use a Hybrid Connection in an App Service Plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {string} namespaceName Name of the Hybrid Connection namespace.
     *
     * @param {string} relayName Name of the Hybrid Connection relay.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWebAppsByHybridConnectionWithHttpOperationResponse(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceCollection>>;

    /**
     * @summary Get all apps that use a Hybrid Connection in an App Service Plan.
     *
     * Get all apps that use a Hybrid Connection in an App Service Plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {string} namespaceName Name of the Hybrid Connection namespace.
     *
     * @param {string} relayName Name of the Hybrid Connection relay.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listWebAppsByHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceCollection>;
    listWebAppsByHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, callback: ServiceCallback<models.ResourceCollection>): void;
    listWebAppsByHybridConnection(resourceGroupName: string, name: string, namespaceName: string, relayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceCollection>): void;


    /**
     * @summary Get the maximum number of Hybrid Connections allowed in an App
     * Service plan.
     *
     * Get the maximum number of Hybrid Connections allowed in an App Service plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HybridConnectionLimits>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getHybridConnectionPlanLimitWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HybridConnectionLimits>>;

    /**
     * @summary Get the maximum number of Hybrid Connections allowed in an App
     * Service plan.
     *
     * Get the maximum number of Hybrid Connections allowed in an App Service plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HybridConnectionLimits} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HybridConnectionLimits} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HybridConnectionLimits} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getHybridConnectionPlanLimit(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HybridConnectionLimits>;
    getHybridConnectionPlanLimit(resourceGroupName: string, name: string, callback: ServiceCallback<models.HybridConnectionLimits>): void;
    getHybridConnectionPlanLimit(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HybridConnectionLimits>): void;


    /**
     * @summary Retrieve all Hybrid Connections in use in an App Service plan.
     *
     * Retrieve all Hybrid Connections in use in an App Service plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HybridConnectionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listHybridConnectionsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HybridConnectionCollection>>;

    /**
     * @summary Retrieve all Hybrid Connections in use in an App Service plan.
     *
     * Retrieve all Hybrid Connections in use in an App Service plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HybridConnectionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HybridConnectionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HybridConnectionCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listHybridConnections(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HybridConnectionCollection>;
    listHybridConnections(resourceGroupName: string, name: string, callback: ServiceCallback<models.HybridConnectionCollection>): void;
    listHybridConnections(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HybridConnectionCollection>): void;


    /**
     * @summary Get metrics that can be queried for an App Service plan, and their
     * definitions.
     *
     * Get metrics that can be queried for an App Service plan, and their
     * definitions.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceMetricDefinitionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricDefintionsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceMetricDefinitionCollection>>;

    /**
     * @summary Get metrics that can be queried for an App Service plan, and their
     * definitions.
     *
     * Get metrics that can be queried for an App Service plan, and their
     * definitions.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceMetricDefinitionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceMetricDefinitionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceMetricDefinitionCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetricDefintions(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceMetricDefinitionCollection>;
    listMetricDefintions(resourceGroupName: string, name: string, callback: ServiceCallback<models.ResourceMetricDefinitionCollection>): void;
    listMetricDefintions(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricDefinitionCollection>): void;


    /**
     * @summary Get metrics for an App Serice plan.
     *
     * Get metrics for an App Serice plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.details] Specify <code>true</code> to include
     * instance details. The default is <code>false</code>.
     *
     * @param {string} [options.filter] Return only usages/metrics specified in the
     * filter. Filter conforms to odata syntax. Example: $filter=(name.value eq
     * 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z
     * and endTime eq 2014-12-31T23:59:59Z and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceMetricCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { details? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceMetricCollection>>;

    /**
     * @summary Get metrics for an App Serice plan.
     *
     * Get metrics for an App Serice plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.details] Specify <code>true</code> to include
     * instance details. The default is <code>false</code>.
     *
     * @param {string} [options.filter] Return only usages/metrics specified in the
     * filter. Filter conforms to odata syntax. Example: $filter=(name.value eq
     * 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z
     * and endTime eq 2014-12-31T23:59:59Z and timeGrain eq
     * duration'[Hour|Minute|Day]'.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceMetricCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceMetricCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceMetricCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetrics(resourceGroupName: string, name: string, options?: { details? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceMetricCollection>;
    listMetrics(resourceGroupName: string, name: string, callback: ServiceCallback<models.ResourceMetricCollection>): void;
    listMetrics(resourceGroupName: string, name: string, options: { details? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricCollection>): void;


    /**
     * @summary Restart all apps in an App Service plan.
     *
     * Restart all apps in an App Service plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.softRestart] Specify <code>true</code> to performa
     * a soft restart, applies the configuration settings and restarts the apps if
     * necessary. The default is <code>false</code>, which always restarts and
     * reprovisions the apps
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    restartWebAppsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { softRestart? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Restart all apps in an App Service plan.
     *
     * Restart all apps in an App Service plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.softRestart] Specify <code>true</code> to performa
     * a soft restart, applies the configuration settings and restarts the apps if
     * necessary. The default is <code>false</code>, which always restarts and
     * reprovisions the apps
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    restartWebApps(resourceGroupName: string, name: string, options?: { softRestart? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    restartWebApps(resourceGroupName: string, name: string, callback: ServiceCallback<void>): void;
    restartWebApps(resourceGroupName: string, name: string, options: { softRestart? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Get all apps associated with an App Service plan.
     *
     * Get all apps associated with an App Service plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.skipToken] Skip to a web app in the list of webapps
     * associated with app service plan. If specified, the resulting list will
     * contain web apps starting from (including) the skipToken. Otherwise, the
     * resulting list contains web apps from the start of the list
     *
     * @param {string} [options.filter] Supported filter: $filter=state eq running.
     * Returns only web apps that are currently running
     *
     * @param {string} [options.top] List page size. If specified, results are
     * paged.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WebAppCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWebAppsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { skipToken? : string, filter? : string, top? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WebAppCollection>>;

    /**
     * @summary Get all apps associated with an App Service plan.
     *
     * Get all apps associated with an App Service plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.skipToken] Skip to a web app in the list of webapps
     * associated with app service plan. If specified, the resulting list will
     * contain web apps starting from (including) the skipToken. Otherwise, the
     * resulting list contains web apps from the start of the list
     *
     * @param {string} [options.filter] Supported filter: $filter=state eq running.
     * Returns only web apps that are currently running
     *
     * @param {string} [options.top] List page size. If specified, results are
     * paged.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WebAppCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WebAppCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WebAppCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listWebApps(resourceGroupName: string, name: string, options?: { skipToken? : string, filter? : string, top? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.WebAppCollection>;
    listWebApps(resourceGroupName: string, name: string, callback: ServiceCallback<models.WebAppCollection>): void;
    listWebApps(resourceGroupName: string, name: string, options: { skipToken? : string, filter? : string, top? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WebAppCollection>): void;


    /**
     * @summary Gets all selectable sku's for a given App Service Plan
     *
     * Gets all selectable sku's for a given App Service Plan
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of App Service Plan
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getServerFarmSkusWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * @summary Gets all selectable sku's for a given App Service Plan
     *
     * Gets all selectable sku's for a given App Service Plan
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of App Service Plan
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getServerFarmSkus(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    getServerFarmSkus(resourceGroupName: string, name: string, callback: ServiceCallback<any>): void;
    getServerFarmSkus(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * @summary Gets server farm usage information
     *
     * Gets server farm usage information
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of App Service Plan
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] Return only usages/metrics specified in the
     * filter. Filter conforms to odata syntax. Example: $filter=(name.value eq
     * 'Metric1' or name.value eq 'Metric2').
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CsmUsageQuotaCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listUsagesWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CsmUsageQuotaCollection>>;

    /**
     * @summary Gets server farm usage information
     *
     * Gets server farm usage information
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of App Service Plan
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] Return only usages/metrics specified in the
     * filter. Filter conforms to odata syntax. Example: $filter=(name.value eq
     * 'Metric1' or name.value eq 'Metric2').
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CsmUsageQuotaCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CsmUsageQuotaCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CsmUsageQuotaCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listUsages(resourceGroupName: string, name: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.CsmUsageQuotaCollection>;
    listUsages(resourceGroupName: string, name: string, callback: ServiceCallback<models.CsmUsageQuotaCollection>): void;
    listUsages(resourceGroupName: string, name: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CsmUsageQuotaCollection>): void;


    /**
     * @summary Get all Virtual Networks associated with an App Service plan.
     *
     * Get all Virtual Networks associated with an App Service plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listVnetsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VnetInfo[]>>;

    /**
     * @summary Get all Virtual Networks associated with an App Service plan.
     *
     * Get all Virtual Networks associated with an App Service plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listVnets(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VnetInfo[]>;
    listVnets(resourceGroupName: string, name: string, callback: ServiceCallback<models.VnetInfo[]>): void;
    listVnets(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetInfo[]>): void;


    /**
     * @summary Get a Virtual Network associated with an App Service plan.
     *
     * Get a Virtual Network associated with an App Service plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {string} vnetName Name of the Virtual Network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VnetInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getVnetFromServerFarmWithHttpOperationResponse(resourceGroupName: string, name: string, vnetName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VnetInfo>>;

    /**
     * @summary Get a Virtual Network associated with an App Service plan.
     *
     * Get a Virtual Network associated with an App Service plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {string} vnetName Name of the Virtual Network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VnetInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VnetInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VnetInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getVnetFromServerFarm(resourceGroupName: string, name: string, vnetName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VnetInfo>;
    getVnetFromServerFarm(resourceGroupName: string, name: string, vnetName: string, callback: ServiceCallback<models.VnetInfo>): void;
    getVnetFromServerFarm(resourceGroupName: string, name: string, vnetName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetInfo>): void;


    /**
     * @summary Get a Virtual Network gateway.
     *
     * Get a Virtual Network gateway.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {string} vnetName Name of the Virtual Network.
     *
     * @param {string} gatewayName Name of the gateway. Only the 'primary' gateway
     * is supported.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VnetGateway>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getVnetGatewayWithHttpOperationResponse(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VnetGateway>>;

    /**
     * @summary Get a Virtual Network gateway.
     *
     * Get a Virtual Network gateway.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {string} vnetName Name of the Virtual Network.
     *
     * @param {string} gatewayName Name of the gateway. Only the 'primary' gateway
     * is supported.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VnetGateway} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VnetGateway} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VnetGateway} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VnetGateway>;
    getVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, callback: ServiceCallback<models.VnetGateway>): void;
    getVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetGateway>): void;


    /**
     * @summary Update a Virtual Network gateway.
     *
     * Update a Virtual Network gateway.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {string} vnetName Name of the Virtual Network.
     *
     * @param {string} gatewayName Name of the gateway. Only the 'primary' gateway
     * is supported.
     *
     * @param {object} connectionEnvelope Definition of the gateway.
     *
     * @param {string} [connectionEnvelope.vnetName] The Virtual Network name.
     *
     * @param {string} connectionEnvelope.vpnPackageUri The URI where the VPN
     * package can be downloaded.
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VnetGateway>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateVnetGatewayWithHttpOperationResponse(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: models.VnetGateway, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VnetGateway>>;

    /**
     * @summary Update a Virtual Network gateway.
     *
     * Update a Virtual Network gateway.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {string} vnetName Name of the Virtual Network.
     *
     * @param {string} gatewayName Name of the gateway. Only the 'primary' gateway
     * is supported.
     *
     * @param {object} connectionEnvelope Definition of the gateway.
     *
     * @param {string} [connectionEnvelope.vnetName] The Virtual Network name.
     *
     * @param {string} connectionEnvelope.vpnPackageUri The URI where the VPN
     * package can be downloaded.
     *
     * @param {string} [connectionEnvelope.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VnetGateway} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VnetGateway} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VnetGateway} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: models.VnetGateway, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VnetGateway>;
    updateVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: models.VnetGateway, callback: ServiceCallback<models.VnetGateway>): void;
    updateVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: models.VnetGateway, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetGateway>): void;


    /**
     * @summary Get all routes that are associated with a Virtual Network in an App
     * Service plan.
     *
     * Get all routes that are associated with a Virtual Network in an App Service
     * plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {string} vnetName Name of the Virtual Network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listRoutesForVnetWithHttpOperationResponse(resourceGroupName: string, name: string, vnetName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VnetRoute[]>>;

    /**
     * @summary Get all routes that are associated with a Virtual Network in an App
     * Service plan.
     *
     * Get all routes that are associated with a Virtual Network in an App Service
     * plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {string} vnetName Name of the Virtual Network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listRoutesForVnet(resourceGroupName: string, name: string, vnetName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VnetRoute[]>;
    listRoutesForVnet(resourceGroupName: string, name: string, vnetName: string, callback: ServiceCallback<models.VnetRoute[]>): void;
    listRoutesForVnet(resourceGroupName: string, name: string, vnetName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetRoute[]>): void;


    /**
     * @summary Get a Virtual Network route in an App Service plan.
     *
     * Get a Virtual Network route in an App Service plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {string} vnetName Name of the Virtual Network.
     *
     * @param {string} routeName Name of the Virtual Network route.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getRouteForVnetWithHttpOperationResponse(resourceGroupName: string, name: string, vnetName: string, routeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VnetRoute[]>>;

    /**
     * @summary Get a Virtual Network route in an App Service plan.
     *
     * Get a Virtual Network route in an App Service plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {string} vnetName Name of the Virtual Network.
     *
     * @param {string} routeName Name of the Virtual Network route.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getRouteForVnet(resourceGroupName: string, name: string, vnetName: string, routeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VnetRoute[]>;
    getRouteForVnet(resourceGroupName: string, name: string, vnetName: string, routeName: string, callback: ServiceCallback<models.VnetRoute[]>): void;
    getRouteForVnet(resourceGroupName: string, name: string, vnetName: string, routeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetRoute[]>): void;


    /**
     * @summary Create or update a Virtual Network route in an App Service plan.
     *
     * Create or update a Virtual Network route in an App Service plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {string} vnetName Name of the Virtual Network.
     *
     * @param {string} routeName Name of the Virtual Network route.
     *
     * @param {object} route Definition of the Virtual Network route.
     *
     * @param {string} [route.startAddress] The starting address for this route.
     * This may also include a CIDR notation, in which case the end address must
     * not be specified.
     *
     * @param {string} [route.endAddress] The ending address for this route. If the
     * start address is specified in CIDR notation, this must be omitted.
     *
     * @param {string} [route.routeType] The type of route this is:
     * DEFAULT - By default, every app has routes to the local address ranges
     * specified by RFC1918
     * INHERITED - Routes inherited from the real Virtual Network routes
     * STATIC - Static route set on the app only
     *
     * These values will be used for syncing an app's routes with those from a
     * Virtual Network. Possible values include: 'DEFAULT', 'INHERITED', 'STATIC'
     *
     * @param {string} [route.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VnetRoute>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateVnetRouteWithHttpOperationResponse(resourceGroupName: string, name: string, vnetName: string, routeName: string, route: models.VnetRoute, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VnetRoute>>;

    /**
     * @summary Create or update a Virtual Network route in an App Service plan.
     *
     * Create or update a Virtual Network route in an App Service plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {string} vnetName Name of the Virtual Network.
     *
     * @param {string} routeName Name of the Virtual Network route.
     *
     * @param {object} route Definition of the Virtual Network route.
     *
     * @param {string} [route.startAddress] The starting address for this route.
     * This may also include a CIDR notation, in which case the end address must
     * not be specified.
     *
     * @param {string} [route.endAddress] The ending address for this route. If the
     * start address is specified in CIDR notation, this must be omitted.
     *
     * @param {string} [route.routeType] The type of route this is:
     * DEFAULT - By default, every app has routes to the local address ranges
     * specified by RFC1918
     * INHERITED - Routes inherited from the real Virtual Network routes
     * STATIC - Static route set on the app only
     *
     * These values will be used for syncing an app's routes with those from a
     * Virtual Network. Possible values include: 'DEFAULT', 'INHERITED', 'STATIC'
     *
     * @param {string} [route.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VnetRoute} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VnetRoute} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VnetRoute} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdateVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, route: models.VnetRoute, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VnetRoute>;
    createOrUpdateVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, route: models.VnetRoute, callback: ServiceCallback<models.VnetRoute>): void;
    createOrUpdateVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, route: models.VnetRoute, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetRoute>): void;


    /**
     * @summary Delete a Virtual Network route in an App Service plan.
     *
     * Delete a Virtual Network route in an App Service plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {string} vnetName Name of the Virtual Network.
     *
     * @param {string} routeName Name of the Virtual Network route.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteVnetRouteWithHttpOperationResponse(resourceGroupName: string, name: string, vnetName: string, routeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete a Virtual Network route in an App Service plan.
     *
     * Delete a Virtual Network route in an App Service plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {string} vnetName Name of the Virtual Network.
     *
     * @param {string} routeName Name of the Virtual Network route.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, callback: ServiceCallback<void>): void;
    deleteVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Create or update a Virtual Network route in an App Service plan.
     *
     * Create or update a Virtual Network route in an App Service plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {string} vnetName Name of the Virtual Network.
     *
     * @param {string} routeName Name of the Virtual Network route.
     *
     * @param {object} route Definition of the Virtual Network route.
     *
     * @param {string} [route.startAddress] The starting address for this route.
     * This may also include a CIDR notation, in which case the end address must
     * not be specified.
     *
     * @param {string} [route.endAddress] The ending address for this route. If the
     * start address is specified in CIDR notation, this must be omitted.
     *
     * @param {string} [route.routeType] The type of route this is:
     * DEFAULT - By default, every app has routes to the local address ranges
     * specified by RFC1918
     * INHERITED - Routes inherited from the real Virtual Network routes
     * STATIC - Static route set on the app only
     *
     * These values will be used for syncing an app's routes with those from a
     * Virtual Network. Possible values include: 'DEFAULT', 'INHERITED', 'STATIC'
     *
     * @param {string} [route.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VnetRoute>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateVnetRouteWithHttpOperationResponse(resourceGroupName: string, name: string, vnetName: string, routeName: string, route: models.VnetRoute, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VnetRoute>>;

    /**
     * @summary Create or update a Virtual Network route in an App Service plan.
     *
     * Create or update a Virtual Network route in an App Service plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {string} vnetName Name of the Virtual Network.
     *
     * @param {string} routeName Name of the Virtual Network route.
     *
     * @param {object} route Definition of the Virtual Network route.
     *
     * @param {string} [route.startAddress] The starting address for this route.
     * This may also include a CIDR notation, in which case the end address must
     * not be specified.
     *
     * @param {string} [route.endAddress] The ending address for this route. If the
     * start address is specified in CIDR notation, this must be omitted.
     *
     * @param {string} [route.routeType] The type of route this is:
     * DEFAULT - By default, every app has routes to the local address ranges
     * specified by RFC1918
     * INHERITED - Routes inherited from the real Virtual Network routes
     * STATIC - Static route set on the app only
     *
     * These values will be used for syncing an app's routes with those from a
     * Virtual Network. Possible values include: 'DEFAULT', 'INHERITED', 'STATIC'
     *
     * @param {string} [route.kind] Kind of resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VnetRoute} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VnetRoute} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VnetRoute} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    updateVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, route: models.VnetRoute, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VnetRoute>;
    updateVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, route: models.VnetRoute, callback: ServiceCallback<models.VnetRoute>): void;
    updateVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, route: models.VnetRoute, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetRoute>): void;


    /**
     * @summary Reboot a worker machine in an App Service plan.
     *
     * Reboot a worker machine in an App Service plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {string} workerName Name of worker machine, which typically starts
     * with RD.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    rebootWorkerWithHttpOperationResponse(resourceGroupName: string, name: string, workerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Reboot a worker machine in an App Service plan.
     *
     * Reboot a worker machine in an App Service plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {string} workerName Name of worker machine, which typically starts
     * with RD.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    rebootWorker(resourceGroupName: string, name: string, workerName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    rebootWorker(resourceGroupName: string, name: string, workerName: string, callback: ServiceCallback<void>): void;
    rebootWorker(resourceGroupName: string, name: string, workerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Creates or updates an App Service Plan.
     *
     * Creates or updates an App Service Plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {object} appServicePlan Details of the App Service plan.
     *
     * @param {string} [appServicePlan.workerTierName] Target worker tier assigned
     * to the App Service plan.
     *
     * @param {string} [appServicePlan.adminSiteName] App Service plan
     * administration site.
     *
     * @param {object} [appServicePlan.hostingEnvironmentProfile] Specification for
     * the App Service Environment to use for the App Service plan.
     *
     * @param {string} [appServicePlan.hostingEnvironmentProfile.id] Resource ID of
     * the App Service Environment.
     *
     * @param {boolean} [appServicePlan.perSiteScaling] If <code>true</code>, apps
     * assigned to this App Service plan can be scaled independently.
     * If <code>false</code>, apps assigned to this App Service plan will scale to
     * all instances of the plan.
     *
     * @param {number} [appServicePlan.maximumElasticWorkerCount] Maximum number of
     * total workers allowed for this ElasticScaleEnabled App Service Plan
     *
     * @param {boolean} [appServicePlan.isSpot] If <code>true</code>, this App
     * Service Plan owns spot instances.
     *
     * @param {date} [appServicePlan.spotExpirationTime] The time when the server
     * farm expires. Valid only if it is a spot server farm.
     *
     * @param {date} [appServicePlan.freeOfferExpirationTime] The time when the
     * server farm free offer expires.
     *
     * @param {boolean} [appServicePlan.reserved] If Linux app service plan
     * <code>true</code>, <code>false</code> otherwise.
     *
     * @param {boolean} [appServicePlan.isXenon] Obsolete: If Hyper-V container app
     * service plan <code>true</code>, <code>false</code> otherwise.
     *
     * @param {boolean} [appServicePlan.hyperV] If Hyper-V container app service
     * plan <code>true</code>, <code>false</code> otherwise.
     *
     * @param {number} [appServicePlan.targetWorkerCount] Scaling worker count.
     *
     * @param {number} [appServicePlan.targetWorkerSizeId] Scaling worker size ID.
     *
     * @param {object} [appServicePlan.sku]
     *
     * @param {string} [appServicePlan.sku.name] Name of the resource SKU.
     *
     * @param {string} [appServicePlan.sku.tier] Service tier of the resource SKU.
     *
     * @param {string} [appServicePlan.sku.size] Size specifier of the resource
     * SKU.
     *
     * @param {string} [appServicePlan.sku.family] Family code of the resource SKU.
     *
     * @param {number} [appServicePlan.sku.capacity] Current number of instances
     * assigned to the resource.
     *
     * @param {object} [appServicePlan.sku.skuCapacity] Min, max, and default scale
     * values of the SKU.
     *
     * @param {number} [appServicePlan.sku.skuCapacity.minimum] Minimum number of
     * workers for this App Service plan SKU.
     *
     * @param {number} [appServicePlan.sku.skuCapacity.maximum] Maximum number of
     * workers for this App Service plan SKU.
     *
     * @param {number} [appServicePlan.sku.skuCapacity.default] Default number of
     * workers for this App Service plan SKU.
     *
     * @param {string} [appServicePlan.sku.skuCapacity.scaleType] Available scale
     * configurations for an App Service plan.
     *
     * @param {array} [appServicePlan.sku.locations] Locations of the SKU.
     *
     * @param {array} [appServicePlan.sku.capabilities] Capabilities of the SKU,
     * e.g., is traffic manager enabled?
     *
     * @param {string} [appServicePlan.kind] Kind of resource.
     *
     * @param {string} appServicePlan.location Resource Location.
     *
     * @param {object} [appServicePlan.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppServicePlan>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, name: string, appServicePlan: models.AppServicePlan, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppServicePlan>>;

    /**
     * @summary Creates or updates an App Service Plan.
     *
     * Creates or updates an App Service Plan.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of the App Service plan.
     *
     * @param {object} appServicePlan Details of the App Service plan.
     *
     * @param {string} [appServicePlan.workerTierName] Target worker tier assigned
     * to the App Service plan.
     *
     * @param {string} [appServicePlan.adminSiteName] App Service plan
     * administration site.
     *
     * @param {object} [appServicePlan.hostingEnvironmentProfile] Specification for
     * the App Service Environment to use for the App Service plan.
     *
     * @param {string} [appServicePlan.hostingEnvironmentProfile.id] Resource ID of
     * the App Service Environment.
     *
     * @param {boolean} [appServicePlan.perSiteScaling] If <code>true</code>, apps
     * assigned to this App Service plan can be scaled independently.
     * If <code>false</code>, apps assigned to this App Service plan will scale to
     * all instances of the plan.
     *
     * @param {number} [appServicePlan.maximumElasticWorkerCount] Maximum number of
     * total workers allowed for this ElasticScaleEnabled App Service Plan
     *
     * @param {boolean} [appServicePlan.isSpot] If <code>true</code>, this App
     * Service Plan owns spot instances.
     *
     * @param {date} [appServicePlan.spotExpirationTime] The time when the server
     * farm expires. Valid only if it is a spot server farm.
     *
     * @param {date} [appServicePlan.freeOfferExpirationTime] The time when the
     * server farm free offer expires.
     *
     * @param {boolean} [appServicePlan.reserved] If Linux app service plan
     * <code>true</code>, <code>false</code> otherwise.
     *
     * @param {boolean} [appServicePlan.isXenon] Obsolete: If Hyper-V container app
     * service plan <code>true</code>, <code>false</code> otherwise.
     *
     * @param {boolean} [appServicePlan.hyperV] If Hyper-V container app service
     * plan <code>true</code>, <code>false</code> otherwise.
     *
     * @param {number} [appServicePlan.targetWorkerCount] Scaling worker count.
     *
     * @param {number} [appServicePlan.targetWorkerSizeId] Scaling worker size ID.
     *
     * @param {object} [appServicePlan.sku]
     *
     * @param {string} [appServicePlan.sku.name] Name of the resource SKU.
     *
     * @param {string} [appServicePlan.sku.tier] Service tier of the resource SKU.
     *
     * @param {string} [appServicePlan.sku.size] Size specifier of the resource
     * SKU.
     *
     * @param {string} [appServicePlan.sku.family] Family code of the resource SKU.
     *
     * @param {number} [appServicePlan.sku.capacity] Current number of instances
     * assigned to the resource.
     *
     * @param {object} [appServicePlan.sku.skuCapacity] Min, max, and default scale
     * values of the SKU.
     *
     * @param {number} [appServicePlan.sku.skuCapacity.minimum] Minimum number of
     * workers for this App Service plan SKU.
     *
     * @param {number} [appServicePlan.sku.skuCapacity.maximum] Maximum number of
     * workers for this App Service plan SKU.
     *
     * @param {number} [appServicePlan.sku.skuCapacity.default] Default number of
     * workers for this App Service plan SKU.
     *
     * @param {string} [appServicePlan.sku.skuCapacity.scaleType] Available scale
     * configurations for an App Service plan.
     *
     * @param {array} [appServicePlan.sku.locations] Locations of the SKU.
     *
     * @param {array} [appServicePlan.sku.capabilities] Capabilities of the SKU,
     * e.g., is traffic manager enabled?
     *
     * @param {string} [appServicePlan.kind] Kind of resource.
     *
     * @param {string} appServicePlan.location Resource Location.
     *
     * @param {object} [appServicePlan.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppServicePlan} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppServicePlan} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppServicePlan} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, name: string, appServicePlan: models.AppServicePlan, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppServicePlan>;
    beginCreateOrUpdate(resourceGroupName: string, name: string, appServicePlan: models.AppServicePlan, callback: ServiceCallback<models.AppServicePlan>): void;
    beginCreateOrUpdate(resourceGroupName: string, name: string, appServicePlan: models.AppServicePlan, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppServicePlan>): void;


    /**
     * @summary Get all App Service plans for a subcription.
     *
     * Get all App Service plans for a subcription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppServicePlanCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppServicePlanCollection>>;

    /**
     * @summary Get all App Service plans for a subcription.
     *
     * Get all App Service plans for a subcription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppServicePlanCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppServicePlanCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppServicePlanCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppServicePlanCollection>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.AppServicePlanCollection>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppServicePlanCollection>): void;


    /**
     * @summary Get all App Service plans in a resource group.
     *
     * Get all App Service plans in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AppServicePlanCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AppServicePlanCollection>>;

    /**
     * @summary Get all App Service plans in a resource group.
     *
     * Get all App Service plans in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AppServicePlanCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AppServicePlanCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AppServicePlanCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AppServicePlanCollection>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.AppServicePlanCollection>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppServicePlanCollection>): void;


    /**
     * @summary Get all apps that use a Hybrid Connection in an App Service Plan.
     *
     * Get all apps that use a Hybrid Connection in an App Service Plan.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWebAppsByHybridConnectionNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceCollection>>;

    /**
     * @summary Get all apps that use a Hybrid Connection in an App Service Plan.
     *
     * Get all apps that use a Hybrid Connection in an App Service Plan.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listWebAppsByHybridConnectionNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceCollection>;
    listWebAppsByHybridConnectionNext(nextPageLink: string, callback: ServiceCallback<models.ResourceCollection>): void;
    listWebAppsByHybridConnectionNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceCollection>): void;


    /**
     * @summary Retrieve all Hybrid Connections in use in an App Service plan.
     *
     * Retrieve all Hybrid Connections in use in an App Service plan.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HybridConnectionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listHybridConnectionsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HybridConnectionCollection>>;

    /**
     * @summary Retrieve all Hybrid Connections in use in an App Service plan.
     *
     * Retrieve all Hybrid Connections in use in an App Service plan.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HybridConnectionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HybridConnectionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HybridConnectionCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listHybridConnectionsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HybridConnectionCollection>;
    listHybridConnectionsNext(nextPageLink: string, callback: ServiceCallback<models.HybridConnectionCollection>): void;
    listHybridConnectionsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HybridConnectionCollection>): void;


    /**
     * @summary Get metrics that can be queried for an App Service plan, and their
     * definitions.
     *
     * Get metrics that can be queried for an App Service plan, and their
     * definitions.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceMetricDefinitionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricDefintionsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceMetricDefinitionCollection>>;

    /**
     * @summary Get metrics that can be queried for an App Service plan, and their
     * definitions.
     *
     * Get metrics that can be queried for an App Service plan, and their
     * definitions.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceMetricDefinitionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceMetricDefinitionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceMetricDefinitionCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetricDefintionsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceMetricDefinitionCollection>;
    listMetricDefintionsNext(nextPageLink: string, callback: ServiceCallback<models.ResourceMetricDefinitionCollection>): void;
    listMetricDefintionsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricDefinitionCollection>): void;


    /**
     * @summary Get metrics for an App Serice plan.
     *
     * Get metrics for an App Serice plan.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceMetricCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listMetricsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceMetricCollection>>;

    /**
     * @summary Get metrics for an App Serice plan.
     *
     * Get metrics for an App Serice plan.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceMetricCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceMetricCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceMetricCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listMetricsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceMetricCollection>;
    listMetricsNext(nextPageLink: string, callback: ServiceCallback<models.ResourceMetricCollection>): void;
    listMetricsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricCollection>): void;


    /**
     * @summary Get all apps associated with an App Service plan.
     *
     * Get all apps associated with an App Service plan.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WebAppCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWebAppsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WebAppCollection>>;

    /**
     * @summary Get all apps associated with an App Service plan.
     *
     * Get all apps associated with an App Service plan.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WebAppCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WebAppCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WebAppCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listWebAppsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WebAppCollection>;
    listWebAppsNext(nextPageLink: string, callback: ServiceCallback<models.WebAppCollection>): void;
    listWebAppsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WebAppCollection>): void;


    /**
     * @summary Gets server farm usage information
     *
     * Gets server farm usage information
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CsmUsageQuotaCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listUsagesNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CsmUsageQuotaCollection>>;

    /**
     * @summary Gets server farm usage information
     *
     * Gets server farm usage information
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CsmUsageQuotaCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CsmUsageQuotaCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CsmUsageQuotaCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listUsagesNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CsmUsageQuotaCollection>;
    listUsagesNext(nextPageLink: string, callback: ServiceCallback<models.CsmUsageQuotaCollection>): void;
    listUsagesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CsmUsageQuotaCollection>): void;
}

/**
 * @class
 * ResourceHealthMetadataOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the WebSiteManagementClient.
 */
export interface ResourceHealthMetadataOperations {


    /**
     * @summary List all ResourceHealthMetadata for all sites in the subscription.
     *
     * List all ResourceHealthMetadata for all sites in the subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceHealthMetadataCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceHealthMetadataCollection>>;

    /**
     * @summary List all ResourceHealthMetadata for all sites in the subscription.
     *
     * List all ResourceHealthMetadata for all sites in the subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceHealthMetadataCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceHealthMetadataCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceHealthMetadataCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceHealthMetadataCollection>;
    list(callback: ServiceCallback<models.ResourceHealthMetadataCollection>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceHealthMetadataCollection>): void;


    /**
     * @summary List all ResourceHealthMetadata for all sites in the resource group
     * in the subscription.
     *
     * List all ResourceHealthMetadata for all sites in the resource group in the
     * subscription.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceHealthMetadataCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceHealthMetadataCollection>>;

    /**
     * @summary List all ResourceHealthMetadata for all sites in the resource group
     * in the subscription.
     *
     * List all ResourceHealthMetadata for all sites in the resource group in the
     * subscription.
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceHealthMetadataCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceHealthMetadataCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceHealthMetadataCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceHealthMetadataCollection>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.ResourceHealthMetadataCollection>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceHealthMetadataCollection>): void;


    /**
     * @summary Gets the category of ResourceHealthMetadata to use for the given
     * site as a collection
     *
     * Gets the category of ResourceHealthMetadata to use for the given site as a
     * collection
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceHealthMetadataCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySiteWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceHealthMetadataCollection>>;

    /**
     * @summary Gets the category of ResourceHealthMetadata to use for the given
     * site as a collection
     *
     * Gets the category of ResourceHealthMetadata to use for the given site as a
     * collection
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceHealthMetadataCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceHealthMetadataCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceHealthMetadataCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySite(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceHealthMetadataCollection>;
    listBySite(resourceGroupName: string, name: string, callback: ServiceCallback<models.ResourceHealthMetadataCollection>): void;
    listBySite(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceHealthMetadataCollection>): void;


    /**
     * @summary Gets the category of ResourceHealthMetadata to use for the given
     * site
     *
     * Gets the category of ResourceHealthMetadata to use for the given site
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceHealthMetadata>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getBySiteWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceHealthMetadata>>;

    /**
     * @summary Gets the category of ResourceHealthMetadata to use for the given
     * site
     *
     * Gets the category of ResourceHealthMetadata to use for the given site
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceHealthMetadata} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceHealthMetadata} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceHealthMetadata} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getBySite(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceHealthMetadata>;
    getBySite(resourceGroupName: string, name: string, callback: ServiceCallback<models.ResourceHealthMetadata>): void;
    getBySite(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceHealthMetadata>): void;


    /**
     * @summary Gets the category of ResourceHealthMetadata to use for the given
     * site as a collection
     *
     * Gets the category of ResourceHealthMetadata to use for the given site as a
     * collection
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceHealthMetadataCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySiteSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceHealthMetadataCollection>>;

    /**
     * @summary Gets the category of ResourceHealthMetadata to use for the given
     * site as a collection
     *
     * Gets the category of ResourceHealthMetadata to use for the given site as a
     * collection
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app.
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceHealthMetadataCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceHealthMetadataCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceHealthMetadataCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySiteSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceHealthMetadataCollection>;
    listBySiteSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.ResourceHealthMetadataCollection>): void;
    listBySiteSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceHealthMetadataCollection>): void;


    /**
     * @summary Gets the category of ResourceHealthMetadata to use for the given
     * site
     *
     * Gets the category of ResourceHealthMetadata to use for the given site
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceHealthMetadata>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getBySiteSlotWithHttpOperationResponse(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceHealthMetadata>>;

    /**
     * @summary Gets the category of ResourceHealthMetadata to use for the given
     * site
     *
     * Gets the category of ResourceHealthMetadata to use for the given site
     *
     * @param {string} resourceGroupName Name of the resource group to which the
     * resource belongs.
     *
     * @param {string} name Name of web app
     *
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceHealthMetadata} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceHealthMetadata} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceHealthMetadata} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getBySiteSlot(resourceGroupName: string, name: string, slot: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceHealthMetadata>;
    getBySiteSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.ResourceHealthMetadata>): void;
    getBySiteSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceHealthMetadata>): void;


    /**
     * @summary List all ResourceHealthMetadata for all sites in the subscription.
     *
     * List all ResourceHealthMetadata for all sites in the subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceHealthMetadataCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceHealthMetadataCollection>>;

    /**
     * @summary List all ResourceHealthMetadata for all sites in the subscription.
     *
     * List all ResourceHealthMetadata for all sites in the subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceHealthMetadataCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceHealthMetadataCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceHealthMetadataCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceHealthMetadataCollection>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ResourceHealthMetadataCollection>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceHealthMetadataCollection>): void;


    /**
     * @summary List all ResourceHealthMetadata for all sites in the resource group
     * in the subscription.
     *
     * List all ResourceHealthMetadata for all sites in the resource group in the
     * subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceHealthMetadataCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceHealthMetadataCollection>>;

    /**
     * @summary List all ResourceHealthMetadata for all sites in the resource group
     * in the subscription.
     *
     * List all ResourceHealthMetadata for all sites in the resource group in the
     * subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceHealthMetadataCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceHealthMetadataCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceHealthMetadataCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceHealthMetadataCollection>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.ResourceHealthMetadataCollection>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceHealthMetadataCollection>): void;


    /**
     * @summary Gets the category of ResourceHealthMetadata to use for the given
     * site as a collection
     *
     * Gets the category of ResourceHealthMetadata to use for the given site as a
     * collection
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceHealthMetadataCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySiteNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceHealthMetadataCollection>>;

    /**
     * @summary Gets the category of ResourceHealthMetadata to use for the given
     * site as a collection
     *
     * Gets the category of ResourceHealthMetadata to use for the given site as a
     * collection
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceHealthMetadataCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceHealthMetadataCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceHealthMetadataCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySiteNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceHealthMetadataCollection>;
    listBySiteNext(nextPageLink: string, callback: ServiceCallback<models.ResourceHealthMetadataCollection>): void;
    listBySiteNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceHealthMetadataCollection>): void;


    /**
     * @summary Gets the category of ResourceHealthMetadata to use for the given
     * site as a collection
     *
     * Gets the category of ResourceHealthMetadata to use for the given site as a
     * collection
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceHealthMetadataCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySiteSlotNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceHealthMetadataCollection>>;

    /**
     * @summary Gets the category of ResourceHealthMetadata to use for the given
     * site as a collection
     *
     * Gets the category of ResourceHealthMetadata to use for the given site as a
     * collection
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceHealthMetadataCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceHealthMetadataCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceHealthMetadataCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySiteSlotNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceHealthMetadataCollection>;
    listBySiteSlotNext(nextPageLink: string, callback: ServiceCallback<models.ResourceHealthMetadataCollection>): void;
    listBySiteSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceHealthMetadataCollection>): void;
}
