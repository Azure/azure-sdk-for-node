/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Class representing Diagnostic Metric
 *
 */
class DiagnosticMetricSample {
  /**
   * Create a DiagnosticMetricSample.
   * @member {date} [timestamp] Time at which metric is measured
   * @member {string} [roleInstance] Role Instance. Null if this counter is not
   * per instance
   * This is returned and should be whichever instance name we desire to be
   * returned
   * i.e. CPU and Memory return RDWORKERNAME (LargeDed..._IN_0)
   * where RDWORKERNAME is Machine name below and RoleInstance name in
   * parenthesis
   * @member {number} [total] Total value of the metric. If multiple
   * measurements are made this will have sum of all.
   * @member {number} [maximum] Maximum of the metric sampled during the time
   * period
   * @member {number} [minimum] Minimum of the metric sampled during the time
   * period
   * @member {boolean} [isAggregated] Whether the values are aggregates across
   * all workers or not
   */
  constructor() {
  }

  /**
   * Defines the metadata of DiagnosticMetricSample
   *
   * @returns {object} metadata of DiagnosticMetricSample
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DiagnosticMetricSample',
      type: {
        name: 'Composite',
        className: 'DiagnosticMetricSample',
        modelProperties: {
          timestamp: {
            required: false,
            serializedName: 'timestamp',
            type: {
              name: 'DateTime'
            }
          },
          roleInstance: {
            required: false,
            serializedName: 'roleInstance',
            type: {
              name: 'String'
            }
          },
          total: {
            required: false,
            serializedName: 'total',
            type: {
              name: 'Number'
            }
          },
          maximum: {
            required: false,
            serializedName: 'maximum',
            type: {
              name: 'Number'
            }
          },
          minimum: {
            required: false,
            serializedName: 'minimum',
            type: {
              name: 'Number'
            }
          },
          isAggregated: {
            required: false,
            serializedName: 'isAggregated',
            type: {
              name: 'Boolean'
            }
          }
        }
      }
    };
  }
}

module.exports = DiagnosticMetricSample;
