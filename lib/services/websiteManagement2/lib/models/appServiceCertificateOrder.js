/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * SSL certificate purchase order.
 *
 * @extends models['Resource']
 */
class AppServiceCertificateOrder extends models['Resource'] {
  /**
   * Create a AppServiceCertificateOrder.
   * @property {object} [certificates] State of the Key Vault secret.
   * @property {string} [distinguishedName] Certificate distinguished name.
   * @property {string} [domainVerificationToken] Domain verification token.
   * @property {number} [validityInYears] Duration in years (must be between 1
   * and 3). Default value: 1 .
   * @property {number} [keySize] Certificate key size. Default value: 2048 .
   * @property {string} productType Certificate product type. Possible values
   * include: 'StandardDomainValidatedSsl',
   * 'StandardDomainValidatedWildCardSsl'
   * @property {boolean} [autoRenew] <code>true</code> if the certificate
   * should be automatically renewed when it expires; otherwise,
   * <code>false</code>. Default value: true .
   * @property {string} [provisioningState] Status of certificate order.
   * Possible values include: 'Succeeded', 'Failed', 'Canceled', 'InProgress',
   * 'Deleting'
   * @property {string} [status] Current order status. Possible values include:
   * 'Pendingissuance', 'Issued', 'Revoked', 'Canceled', 'Denied',
   * 'Pendingrevocation', 'PendingRekey', 'Unused', 'Expired', 'NotSubmitted'
   * @property {object} [signedCertificate] Signed certificate.
   * @property {number} [signedCertificate.version] Certificate Version.
   * @property {string} [signedCertificate.serialNumber] Certificate Serial
   * Number.
   * @property {string} [signedCertificate.thumbprint] Certificate Thumbprint.
   * @property {string} [signedCertificate.subject] Certificate Subject.
   * @property {date} [signedCertificate.notBefore] Date Certificate is valid
   * from.
   * @property {date} [signedCertificate.notAfter] Date Certificate is valid
   * to.
   * @property {string} [signedCertificate.signatureAlgorithm] Certificate
   * Signature algorithm.
   * @property {string} [signedCertificate.issuer] Certificate Issuer.
   * @property {string} [signedCertificate.rawData] Raw certificate data.
   * @property {string} [csr] Last CSR that was created for this order.
   * @property {object} [intermediate] Intermediate certificate.
   * @property {number} [intermediate.version] Certificate Version.
   * @property {string} [intermediate.serialNumber] Certificate Serial Number.
   * @property {string} [intermediate.thumbprint] Certificate Thumbprint.
   * @property {string} [intermediate.subject] Certificate Subject.
   * @property {date} [intermediate.notBefore] Date Certificate is valid from.
   * @property {date} [intermediate.notAfter] Date Certificate is valid to.
   * @property {string} [intermediate.signatureAlgorithm] Certificate Signature
   * algorithm.
   * @property {string} [intermediate.issuer] Certificate Issuer.
   * @property {string} [intermediate.rawData] Raw certificate data.
   * @property {object} [root] Root certificate.
   * @property {number} [root.version] Certificate Version.
   * @property {string} [root.serialNumber] Certificate Serial Number.
   * @property {string} [root.thumbprint] Certificate Thumbprint.
   * @property {string} [root.subject] Certificate Subject.
   * @property {date} [root.notBefore] Date Certificate is valid from.
   * @property {date} [root.notAfter] Date Certificate is valid to.
   * @property {string} [root.signatureAlgorithm] Certificate Signature
   * algorithm.
   * @property {string} [root.issuer] Certificate Issuer.
   * @property {string} [root.rawData] Raw certificate data.
   * @property {string} [serialNumber] Current serial number of the
   * certificate.
   * @property {date} [lastCertificateIssuanceTime] Certificate last issuance
   * time.
   * @property {date} [expirationTime] Certificate expiration time.
   * @property {boolean} [isPrivateKeyExternal] <code>true</code> if private
   * key is external; otherwise, <code>false</code>.
   * @property {array} [appServiceCertificateNotRenewableReasons] Reasons why
   * App Service Certificate is not renewable at the current moment.
   * @property {date} [nextAutoRenewalTimeStamp] Time stamp when the
   * certificate would be auto renewed next
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of AppServiceCertificateOrder
   *
   * @returns {object} metadata of AppServiceCertificateOrder
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'AppServiceCertificateOrder',
      type: {
        name: 'Composite',
        className: 'AppServiceCertificateOrder',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          kind: {
            required: false,
            serializedName: 'kind',
            type: {
              name: 'String'
            }
          },
          location: {
            required: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          certificates: {
            required: false,
            serializedName: 'properties.certificates',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'AppServiceCertificateElementType',
                  type: {
                    name: 'Composite',
                    className: 'AppServiceCertificate'
                  }
              }
            }
          },
          distinguishedName: {
            required: false,
            serializedName: 'properties.distinguishedName',
            type: {
              name: 'String'
            }
          },
          domainVerificationToken: {
            required: false,
            readOnly: true,
            serializedName: 'properties.domainVerificationToken',
            type: {
              name: 'String'
            }
          },
          validityInYears: {
            required: false,
            serializedName: 'properties.validityInYears',
            defaultValue: 1,
            constraints: {
              InclusiveMaximum: 3,
              InclusiveMinimum: 1
            },
            type: {
              name: 'Number'
            }
          },
          keySize: {
            required: false,
            serializedName: 'properties.keySize',
            defaultValue: 2048,
            type: {
              name: 'Number'
            }
          },
          productType: {
            required: true,
            serializedName: 'properties.productType',
            type: {
              name: 'Enum',
              allowedValues: [ 'StandardDomainValidatedSsl', 'StandardDomainValidatedWildCardSsl' ]
            }
          },
          autoRenew: {
            required: false,
            serializedName: 'properties.autoRenew',
            defaultValue: true,
            type: {
              name: 'Boolean'
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'Enum',
              allowedValues: [ 'Succeeded', 'Failed', 'Canceled', 'InProgress', 'Deleting' ]
            }
          },
          status: {
            required: false,
            readOnly: true,
            serializedName: 'properties.status',
            type: {
              name: 'Enum',
              allowedValues: [ 'Pendingissuance', 'Issued', 'Revoked', 'Canceled', 'Denied', 'Pendingrevocation', 'PendingRekey', 'Unused', 'Expired', 'NotSubmitted' ]
            }
          },
          signedCertificate: {
            required: false,
            readOnly: true,
            serializedName: 'properties.signedCertificate',
            type: {
              name: 'Composite',
              className: 'CertificateDetails'
            }
          },
          csr: {
            required: false,
            serializedName: 'properties.csr',
            type: {
              name: 'String'
            }
          },
          intermediate: {
            required: false,
            readOnly: true,
            serializedName: 'properties.intermediate',
            type: {
              name: 'Composite',
              className: 'CertificateDetails'
            }
          },
          root: {
            required: false,
            readOnly: true,
            serializedName: 'properties.root',
            type: {
              name: 'Composite',
              className: 'CertificateDetails'
            }
          },
          serialNumber: {
            required: false,
            readOnly: true,
            serializedName: 'properties.serialNumber',
            type: {
              name: 'String'
            }
          },
          lastCertificateIssuanceTime: {
            required: false,
            readOnly: true,
            serializedName: 'properties.lastCertificateIssuanceTime',
            type: {
              name: 'DateTime'
            }
          },
          expirationTime: {
            required: false,
            readOnly: true,
            serializedName: 'properties.expirationTime',
            type: {
              name: 'DateTime'
            }
          },
          isPrivateKeyExternal: {
            required: false,
            readOnly: true,
            serializedName: 'properties.isPrivateKeyExternal',
            type: {
              name: 'Boolean'
            }
          },
          appServiceCertificateNotRenewableReasons: {
            required: false,
            readOnly: true,
            serializedName: 'properties.appServiceCertificateNotRenewableReasons',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          nextAutoRenewalTimeStamp: {
            required: false,
            readOnly: true,
            serializedName: 'properties.nextAutoRenewalTimeStamp',
            type: {
              name: 'DateTime'
            }
          }
        }
      }
    };
  }
}

module.exports = AppServiceCertificateOrder;
