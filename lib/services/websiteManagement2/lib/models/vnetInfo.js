/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Virtual Network information contract.
 *
 * @extends models['ProxyOnlyResource']
 */
class VnetInfo extends models['ProxyOnlyResource'] {
  /**
   * Create a VnetInfo.
   * @member {string} [vnetResourceId] The Virtual Network's resource ID.
   * @member {string} [certThumbprint] The client certificate thumbprint.
   * @member {buffer} [certBlob] A certificate file (.cer) blob containing the
   * public key of the private key used to authenticate a
   * Point-To-Site VPN connection.
   * @member {array} [routes] The routes that this Virtual Network connection
   * uses.
   * @member {boolean} [resyncRequired] <code>true</code> if a resync is
   * required; otherwise, <code>false</code>.
   * @member {string} [dnsServers] DNS servers to be used by this Virtual
   * Network. This should be a comma-separated list of IP addresses.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of VnetInfo
   *
   * @returns {object} metadata of VnetInfo
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'VnetInfo',
      type: {
        name: 'Composite',
        className: 'VnetInfo',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          kind: {
            required: false,
            serializedName: 'kind',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          vnetResourceId: {
            required: false,
            serializedName: 'properties.vnetResourceId',
            type: {
              name: 'String'
            }
          },
          certThumbprint: {
            required: false,
            readOnly: true,
            serializedName: 'properties.certThumbprint',
            type: {
              name: 'String'
            }
          },
          certBlob: {
            required: false,
            serializedName: 'properties.certBlob',
            type: {
              name: 'ByteArray'
            }
          },
          routes: {
            required: false,
            readOnly: true,
            serializedName: 'properties.routes',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'VnetRouteElementType',
                  type: {
                    name: 'Composite',
                    className: 'VnetRoute'
                  }
              }
            }
          },
          resyncRequired: {
            required: false,
            readOnly: true,
            serializedName: 'properties.resyncRequired',
            type: {
              name: 'Boolean'
            }
          },
          dnsServers: {
            required: false,
            serializedName: 'properties.dnsServers',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = VnetInfo;
