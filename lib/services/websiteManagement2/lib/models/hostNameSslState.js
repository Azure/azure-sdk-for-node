/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * SSL-enabled hostname.
 *
 */
class HostNameSslState {
  /**
   * Create a HostNameSslState.
   * @property {string} [name] Hostname.
   * @property {string} [sslState] SSL type. Possible values include:
   * 'Disabled', 'SniEnabled', 'IpBasedEnabled'
   * @property {string} [virtualIP] Virtual IP address assigned to the hostname
   * if IP based SSL is enabled.
   * @property {string} [thumbprint] SSL certificate thumbprint.
   * @property {boolean} [toUpdate] Set to <code>true</code> to update existing
   * hostname.
   * @property {string} [hostType] Indicates whether the hostname is a standard
   * or repository hostname. Possible values include: 'Standard', 'Repository'
   */
  constructor() {
  }

  /**
   * Defines the metadata of HostNameSslState
   *
   * @returns {object} metadata of HostNameSslState
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'HostNameSslState',
      type: {
        name: 'Composite',
        className: 'HostNameSslState',
        modelProperties: {
          name: {
            required: false,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          sslState: {
            required: false,
            serializedName: 'sslState',
            type: {
              name: 'Enum',
              allowedValues: [ 'Disabled', 'SniEnabled', 'IpBasedEnabled' ]
            }
          },
          virtualIP: {
            required: false,
            serializedName: 'virtualIP',
            type: {
              name: 'String'
            }
          },
          thumbprint: {
            required: false,
            serializedName: 'thumbprint',
            type: {
              name: 'String'
            }
          },
          toUpdate: {
            required: false,
            serializedName: 'toUpdate',
            type: {
              name: 'Boolean'
            }
          },
          hostType: {
            required: false,
            serializedName: 'hostType',
            type: {
              name: 'Enum',
              allowedValues: [ 'Standard', 'Repository' ]
            }
          }
        }
      }
    };
  }
}

module.exports = HostNameSslState;
