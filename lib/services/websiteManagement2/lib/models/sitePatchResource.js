/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * ARM resource for a site.
 *
 * @extends models['ProxyOnlyResource']
 */
class SitePatchResource extends models['ProxyOnlyResource'] {
  /**
   * Create a SitePatchResource.
   * @property {string} [state] Current state of the app.
   * @property {array} [hostNames] Hostnames associated with the app.
   * @property {string} [repositorySiteName] Name of the repository site.
   * @property {string} [usageState] State indicating whether the app has
   * exceeded its quota usage. Read-only. Possible values include: 'Normal',
   * 'Exceeded'
   * @property {boolean} [enabled] <code>true</code> if the app is enabled;
   * otherwise, <code>false</code>. Setting this value to false disables the
   * app (takes the app offline).
   * @property {array} [enabledHostNames] Enabled hostnames for the
   * app.Hostnames need to be assigned (see HostNames) AND enabled. Otherwise,
   * the app is not served on those hostnames.
   * @property {string} [availabilityState] Management information availability
   * state for the app. Possible values include: 'Normal', 'Limited',
   * 'DisasterRecoveryMode'
   * @property {array} [hostNameSslStates] Hostname SSL states are used to
   * manage the SSL bindings for app's hostnames.
   * @property {string} [serverFarmId] Resource ID of the associated App
   * Service plan, formatted as:
   * "/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}".
   * @property {boolean} [reserved] <code>true</code> if reserved; otherwise,
   * <code>false</code>. Default value: false .
   * @property {boolean} [isXenon] Obsolete: Hyper-V sandbox. Default value:
   * false .
   * @property {boolean} [hyperV] Hyper-V sandbox. Default value: false .
   * @property {date} [lastModifiedTimeUtc] Last time the app was modified, in
   * UTC. Read-only.
   * @property {object} [siteConfig] Configuration of the app.
   * @property {number} [siteConfig.numberOfWorkers] Number of workers.
   * @property {array} [siteConfig.defaultDocuments] Default documents.
   * @property {string} [siteConfig.netFrameworkVersion] .NET Framework
   * version.
   * @property {string} [siteConfig.phpVersion] Version of PHP.
   * @property {string} [siteConfig.pythonVersion] Version of Python.
   * @property {string} [siteConfig.nodeVersion] Version of Node.js.
   * @property {string} [siteConfig.linuxFxVersion] Linux App Framework and
   * version
   * @property {string} [siteConfig.windowsFxVersion] Xenon App Framework and
   * version
   * @property {boolean} [siteConfig.requestTracingEnabled] <code>true</code>
   * if request tracing is enabled; otherwise, <code>false</code>.
   * @property {date} [siteConfig.requestTracingExpirationTime] Request tracing
   * expiration time.
   * @property {boolean} [siteConfig.remoteDebuggingEnabled] <code>true</code>
   * if remote debugging is enabled; otherwise, <code>false</code>.
   * @property {string} [siteConfig.remoteDebuggingVersion] Remote debugging
   * version.
   * @property {boolean} [siteConfig.httpLoggingEnabled] <code>true</code> if
   * HTTP logging is enabled; otherwise, <code>false</code>.
   * @property {number} [siteConfig.logsDirectorySizeLimit] HTTP logs directory
   * size limit.
   * @property {boolean} [siteConfig.detailedErrorLoggingEnabled]
   * <code>true</code> if detailed error logging is enabled; otherwise,
   * <code>false</code>.
   * @property {string} [siteConfig.publishingUsername] Publishing user name.
   * @property {array} [siteConfig.appSettings] Application settings.
   * @property {object} [siteConfig.azureStorageAccounts] User-provided Azure
   * storage accounts.
   * @property {array} [siteConfig.connectionStrings] Connection strings.
   * @property {object} [siteConfig.machineKey] Site MachineKey.
   * @property {string} [siteConfig.machineKey.validation] MachineKey
   * validation.
   * @property {string} [siteConfig.machineKey.validationKey] Validation key.
   * @property {string} [siteConfig.machineKey.decryption] Algorithm used for
   * decryption.
   * @property {string} [siteConfig.machineKey.decryptionKey] Decryption key.
   * @property {array} [siteConfig.handlerMappings] Handler mappings.
   * @property {string} [siteConfig.documentRoot] Document root.
   * @property {string} [siteConfig.scmType] SCM type. Possible values include:
   * 'None', 'Dropbox', 'Tfs', 'LocalGit', 'GitHub', 'CodePlexGit',
   * 'CodePlexHg', 'BitbucketGit', 'BitbucketHg', 'ExternalGit', 'ExternalHg',
   * 'OneDrive', 'VSO'
   * @property {boolean} [siteConfig.use32BitWorkerProcess] <code>true</code>
   * to use 32-bit worker process; otherwise, <code>false</code>.
   * @property {boolean} [siteConfig.webSocketsEnabled] <code>true</code> if
   * WebSocket is enabled; otherwise, <code>false</code>.
   * @property {boolean} [siteConfig.alwaysOn] <code>true</code> if Always On
   * is enabled; otherwise, <code>false</code>.
   * @property {string} [siteConfig.javaVersion] Java version.
   * @property {string} [siteConfig.javaContainer] Java container.
   * @property {string} [siteConfig.javaContainerVersion] Java container
   * version.
   * @property {string} [siteConfig.appCommandLine] App command line to launch.
   * @property {string} [siteConfig.managedPipelineMode] Managed pipeline mode.
   * Possible values include: 'Integrated', 'Classic'
   * @property {array} [siteConfig.virtualApplications] Virtual applications.
   * @property {string} [siteConfig.loadBalancing] Site load balancing.
   * Possible values include: 'WeightedRoundRobin', 'LeastRequests',
   * 'LeastResponseTime', 'WeightedTotalTraffic', 'RequestHash'
   * @property {object} [siteConfig.experiments] This is work around for
   * polymorphic types.
   * @property {array} [siteConfig.experiments.rampUpRules] List of ramp-up
   * rules.
   * @property {object} [siteConfig.limits] Site limits.
   * @property {number} [siteConfig.limits.maxPercentageCpu] Maximum allowed
   * CPU usage percentage.
   * @property {number} [siteConfig.limits.maxMemoryInMb] Maximum allowed
   * memory usage in MB.
   * @property {number} [siteConfig.limits.maxDiskSizeInMb] Maximum allowed
   * disk size usage in MB.
   * @property {boolean} [siteConfig.autoHealEnabled] <code>true</code> if Auto
   * Heal is enabled; otherwise, <code>false</code>.
   * @property {object} [siteConfig.autoHealRules] Auto Heal rules.
   * @property {object} [siteConfig.autoHealRules.triggers] Conditions that
   * describe when to execute the auto-heal actions.
   * @property {object} [siteConfig.autoHealRules.triggers.requests] A rule
   * based on total requests.
   * @property {number} [siteConfig.autoHealRules.triggers.requests.count]
   * Request Count.
   * @property {string}
   * [siteConfig.autoHealRules.triggers.requests.timeInterval] Time interval.
   * @property {number} [siteConfig.autoHealRules.triggers.privateBytesInKB] A
   * rule based on private bytes.
   * @property {array} [siteConfig.autoHealRules.triggers.statusCodes] A rule
   * based on status codes.
   * @property {object} [siteConfig.autoHealRules.triggers.slowRequests] A rule
   * based on request execution time.
   * @property {string}
   * [siteConfig.autoHealRules.triggers.slowRequests.timeTaken] Time taken.
   * @property {number} [siteConfig.autoHealRules.triggers.slowRequests.count]
   * Request Count.
   * @property {string}
   * [siteConfig.autoHealRules.triggers.slowRequests.timeInterval] Time
   * interval.
   * @property {object} [siteConfig.autoHealRules.actions] Actions to be
   * executed when a rule is triggered.
   * @property {string} [siteConfig.autoHealRules.actions.actionType]
   * Predefined action to be taken. Possible values include: 'Recycle',
   * 'LogEvent', 'CustomAction'
   * @property {object} [siteConfig.autoHealRules.actions.customAction] Custom
   * action to be taken.
   * @property {string} [siteConfig.autoHealRules.actions.customAction.exe]
   * Executable to be run.
   * @property {string}
   * [siteConfig.autoHealRules.actions.customAction.parameters] Parameters for
   * the executable.
   * @property {string}
   * [siteConfig.autoHealRules.actions.minProcessExecutionTime] Minimum time
   * the process must execute
   * before taking the action
   * @property {string} [siteConfig.tracingOptions] Tracing options.
   * @property {string} [siteConfig.vnetName] Virtual Network name.
   * @property {object} [siteConfig.cors] Cross-Origin Resource Sharing (CORS)
   * settings.
   * @property {array} [siteConfig.cors.allowedOrigins] Gets or sets the list
   * of origins that should be allowed to make cross-origin
   * calls (for example: http://example.com:12345). Use "*" to allow all.
   * @property {object} [siteConfig.push] Push endpoint settings.
   * @property {boolean} [siteConfig.push.isPushEnabled] Gets or sets a flag
   * indicating whether the Push endpoint is enabled.
   * @property {string} [siteConfig.push.tagWhitelistJson] Gets or sets a JSON
   * string containing a list of tags that are whitelisted for use by the push
   * registration endpoint.
   * @property {string} [siteConfig.push.tagsRequiringAuth] Gets or sets a JSON
   * string containing a list of tags that require user authentication to be
   * used in the push registration endpoint.
   * Tags can consist of alphanumeric characters and the following:
   * '_', '@', '#', '.', ':', '-'.
   * Validation should be performed at the PushRequestHandler.
   * @property {string} [siteConfig.push.dynamicTagsJson] Gets or sets a JSON
   * string containing a list of dynamic tags that will be evaluated from user
   * claims in the push registration endpoint.
   * @property {object} [siteConfig.apiDefinition] Information about the formal
   * API definition for the app.
   * @property {string} [siteConfig.apiDefinition.url] The URL of the API
   * definition.
   * @property {string} [siteConfig.autoSwapSlotName] Auto-swap slot name.
   * @property {boolean} [siteConfig.localMySqlEnabled] <code>true</code> to
   * enable local MySQL; otherwise, <code>false</code>.
   * @property {number} [siteConfig.managedServiceIdentityId] Managed Service
   * Identity Id
   * @property {number} [siteConfig.xManagedServiceIdentityId] Explicit Managed
   * Service Identity Id
   * @property {array} [siteConfig.ipSecurityRestrictions] IP security
   * restrictions.
   * @property {boolean} [siteConfig.http20Enabled] Http20Enabled: configures a
   * web site to allow clients to connect over http2.0
   * @property {string} [siteConfig.minTlsVersion] MinTlsVersion: configures
   * the minimum version of TLS required for SSL requests. Possible values
   * include: '1.0', '1.1', '1.2'
   * @property {string} [siteConfig.ftpsState] State of FTP / FTPS service.
   * Possible values include: 'AllAllowed', 'FtpsOnly', 'Disabled'
   * @property {number} [siteConfig.reservedInstanceCount] Number of reserved
   * instances.
   * This setting only applies to the Consumption Plan
   * @property {array} [trafficManagerHostNames] Azure Traffic Manager
   * hostnames associated with the app. Read-only.
   * @property {boolean} [scmSiteAlsoStopped] <code>true</code> to stop SCM
   * (KUDU) site when the app is stopped; otherwise, <code>false</code>. The
   * default is <code>false</code>. Default value: false .
   * @property {string} [targetSwapSlot] Specifies which deployment slot this
   * app will swap into. Read-only.
   * @property {object} [hostingEnvironmentProfile] App Service Environment to
   * use for the app.
   * @property {string} [hostingEnvironmentProfile.id] Resource ID of the App
   * Service Environment.
   * @property {string} [hostingEnvironmentProfile.name] Name of the App
   * Service Environment.
   * @property {string} [hostingEnvironmentProfile.type] Resource type of the
   * App Service Environment.
   * @property {boolean} [clientAffinityEnabled] <code>true</code> to enable
   * client affinity; <code>false</code> to stop sending session affinity
   * cookies, which route client requests in the same session to the same
   * instance. Default is <code>true</code>.
   * @property {boolean} [clientCertEnabled] <code>true</code> to enable client
   * certificate authentication (TLS mutual authentication); otherwise,
   * <code>false</code>. Default is <code>false</code>.
   * @property {boolean} [hostNamesDisabled] <code>true</code> to disable the
   * public hostnames of the app; otherwise, <code>false</code>.
   * If <code>true</code>, the app is only accessible via API management
   * process.
   * @property {string} [outboundIpAddresses] List of IP addresses that the app
   * uses for outbound connections (e.g. database access). Includes VIPs from
   * tenants that site can be hosted with current settings. Read-only.
   * @property {string} [possibleOutboundIpAddresses] List of IP addresses that
   * the app uses for outbound connections (e.g. database access). Includes
   * VIPs from all tenants. Read-only.
   * @property {number} [containerSize] Size of the function container.
   * @property {number} [dailyMemoryTimeQuota] Maximum allowed daily
   * memory-time quota (applicable on dynamic apps only).
   * @property {date} [suspendedTill] App suspended till in case memory-time
   * quota is exceeded.
   * @property {number} [maxNumberOfWorkers] Maximum number of workers.
   * This only applies to Functions container.
   * @property {object} [cloningInfo] If specified during app creation, the app
   * is cloned from a source app.
   * @property {uuid} [cloningInfo.correlationId] Correlation ID of cloning
   * operation. This ID ties multiple cloning operations
   * together to use the same snapshot.
   * @property {boolean} [cloningInfo.overwrite] <code>true</code> to overwrite
   * destination app; otherwise, <code>false</code>.
   * @property {boolean} [cloningInfo.cloneCustomHostNames] <code>true</code>
   * to clone custom hostnames from source app; otherwise, <code>false</code>.
   * @property {boolean} [cloningInfo.cloneSourceControl] <code>true</code> to
   * clone source control from source app; otherwise, <code>false</code>.
   * @property {string} [cloningInfo.sourceWebAppId] ARM resource ID of the
   * source app. App resource ID is of the form
   * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}
   * for production slots and
   * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName}
   * for other slots.
   * @property {string} [cloningInfo.hostingEnvironment] App Service
   * Environment.
   * @property {object} [cloningInfo.appSettingsOverrides] Application setting
   * overrides for cloned app. If specified, these settings override the
   * settings cloned
   * from source app. Otherwise, application settings from source app are
   * retained.
   * @property {boolean} [cloningInfo.configureLoadBalancing] <code>true</code>
   * to configure load balancing for source and destination app.
   * @property {string} [cloningInfo.trafficManagerProfileId] ARM resource ID
   * of the Traffic Manager profile to use, if it exists. Traffic Manager
   * resource ID is of the form
   * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}.
   * @property {string} [cloningInfo.trafficManagerProfileName] Name of Traffic
   * Manager profile to create. This is only needed if Traffic Manager profile
   * does not already exist.
   * @property {string} [resourceGroup] Name of the resource group the app
   * belongs to. Read-only.
   * @property {boolean} [isDefaultContainer] <code>true</code> if the app is a
   * default container; otherwise, <code>false</code>.
   * @property {string} [defaultHostName] Default hostname of the app.
   * Read-only.
   * @property {object} [slotSwapStatus] Status of the last deployment slot
   * swap operation.
   * @property {date} [slotSwapStatus.timestampUtc] The time the last
   * successful slot swap completed.
   * @property {string} [slotSwapStatus.sourceSlotName] The source slot of the
   * last swap operation.
   * @property {string} [slotSwapStatus.destinationSlotName] The destination
   * slot of the last swap operation.
   * @property {boolean} [httpsOnly] HttpsOnly: configures a web site to accept
   * only https requests. Issues redirect for
   * http requests
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of SitePatchResource
   *
   * @returns {object} metadata of SitePatchResource
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'SitePatchResource',
      type: {
        name: 'Composite',
        className: 'SitePatchResource',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          kind: {
            required: false,
            serializedName: 'kind',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          state: {
            required: false,
            readOnly: true,
            serializedName: 'properties.state',
            type: {
              name: 'String'
            }
          },
          hostNames: {
            required: false,
            readOnly: true,
            serializedName: 'properties.hostNames',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          repositorySiteName: {
            required: false,
            readOnly: true,
            serializedName: 'properties.repositorySiteName',
            type: {
              name: 'String'
            }
          },
          usageState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.usageState',
            type: {
              name: 'Enum',
              allowedValues: [ 'Normal', 'Exceeded' ]
            }
          },
          enabled: {
            required: false,
            serializedName: 'properties.enabled',
            type: {
              name: 'Boolean'
            }
          },
          enabledHostNames: {
            required: false,
            readOnly: true,
            serializedName: 'properties.enabledHostNames',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          availabilityState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.availabilityState',
            type: {
              name: 'Enum',
              allowedValues: [ 'Normal', 'Limited', 'DisasterRecoveryMode' ]
            }
          },
          hostNameSslStates: {
            required: false,
            serializedName: 'properties.hostNameSslStates',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'HostNameSslStateElementType',
                  type: {
                    name: 'Composite',
                    className: 'HostNameSslState'
                  }
              }
            }
          },
          serverFarmId: {
            required: false,
            serializedName: 'properties.serverFarmId',
            type: {
              name: 'String'
            }
          },
          reserved: {
            required: false,
            serializedName: 'properties.reserved',
            defaultValue: false,
            type: {
              name: 'Boolean'
            }
          },
          isXenon: {
            required: false,
            serializedName: 'properties.isXenon',
            defaultValue: false,
            type: {
              name: 'Boolean'
            }
          },
          hyperV: {
            required: false,
            serializedName: 'properties.hyperV',
            defaultValue: false,
            type: {
              name: 'Boolean'
            }
          },
          lastModifiedTimeUtc: {
            required: false,
            readOnly: true,
            serializedName: 'properties.lastModifiedTimeUtc',
            type: {
              name: 'DateTime'
            }
          },
          siteConfig: {
            required: false,
            serializedName: 'properties.siteConfig',
            type: {
              name: 'Composite',
              className: 'SiteConfig'
            }
          },
          trafficManagerHostNames: {
            required: false,
            readOnly: true,
            serializedName: 'properties.trafficManagerHostNames',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          scmSiteAlsoStopped: {
            required: false,
            serializedName: 'properties.scmSiteAlsoStopped',
            defaultValue: false,
            type: {
              name: 'Boolean'
            }
          },
          targetSwapSlot: {
            required: false,
            readOnly: true,
            serializedName: 'properties.targetSwapSlot',
            type: {
              name: 'String'
            }
          },
          hostingEnvironmentProfile: {
            required: false,
            serializedName: 'properties.hostingEnvironmentProfile',
            type: {
              name: 'Composite',
              className: 'HostingEnvironmentProfile'
            }
          },
          clientAffinityEnabled: {
            required: false,
            serializedName: 'properties.clientAffinityEnabled',
            type: {
              name: 'Boolean'
            }
          },
          clientCertEnabled: {
            required: false,
            serializedName: 'properties.clientCertEnabled',
            type: {
              name: 'Boolean'
            }
          },
          hostNamesDisabled: {
            required: false,
            serializedName: 'properties.hostNamesDisabled',
            type: {
              name: 'Boolean'
            }
          },
          outboundIpAddresses: {
            required: false,
            readOnly: true,
            serializedName: 'properties.outboundIpAddresses',
            type: {
              name: 'String'
            }
          },
          possibleOutboundIpAddresses: {
            required: false,
            readOnly: true,
            serializedName: 'properties.possibleOutboundIpAddresses',
            type: {
              name: 'String'
            }
          },
          containerSize: {
            required: false,
            serializedName: 'properties.containerSize',
            type: {
              name: 'Number'
            }
          },
          dailyMemoryTimeQuota: {
            required: false,
            serializedName: 'properties.dailyMemoryTimeQuota',
            type: {
              name: 'Number'
            }
          },
          suspendedTill: {
            required: false,
            readOnly: true,
            serializedName: 'properties.suspendedTill',
            type: {
              name: 'DateTime'
            }
          },
          maxNumberOfWorkers: {
            required: false,
            readOnly: true,
            serializedName: 'properties.maxNumberOfWorkers',
            type: {
              name: 'Number'
            }
          },
          cloningInfo: {
            required: false,
            serializedName: 'properties.cloningInfo',
            type: {
              name: 'Composite',
              className: 'CloningInfo'
            }
          },
          resourceGroup: {
            required: false,
            readOnly: true,
            serializedName: 'properties.resourceGroup',
            type: {
              name: 'String'
            }
          },
          isDefaultContainer: {
            required: false,
            readOnly: true,
            serializedName: 'properties.isDefaultContainer',
            type: {
              name: 'Boolean'
            }
          },
          defaultHostName: {
            required: false,
            readOnly: true,
            serializedName: 'properties.defaultHostName',
            type: {
              name: 'String'
            }
          },
          slotSwapStatus: {
            required: false,
            readOnly: true,
            serializedName: 'properties.slotSwapStatus',
            type: {
              name: 'Composite',
              className: 'SlotSwapStatus'
            }
          },
          httpsOnly: {
            required: false,
            serializedName: 'properties.httpsOnly',
            type: {
              name: 'Boolean'
            }
          }
        }
      }
    };
  }
}

module.exports = SitePatchResource;
