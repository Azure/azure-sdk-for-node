/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { ServiceClient, ServiceClientOptions, ServiceCallback, HttpOperationResponse, ServiceClientCredentials } from 'ms-rest';
import * as models from "./models";

export default class SpeechServicesAPIv20 extends ServiceClient {
  /**
   * @class
   * Initializes a new instance of the SpeechServicesAPIv20 class.
   * @constructor
   *
   * @param {credentials} credentials - Subscription credentials which uniquely identify client subscription.
   *
   * @param {string} [baseUri] - The base URI of the service.
   *
   * @param {object} [options] - The parameter options
   *
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   *
   * @param {object} [options.requestOptions] - Options for the underlying request object
   * {@link https://github.com/request/request#requestoptions-callback Options doc}
   *
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   *
   */
  constructor(credentials: ServiceClientCredentials, baseUri?: string, options?: ServiceClientOptions);

  credentials: ServiceClientCredentials;


  /**
   * @summary Gets the list of accuracy tests for the authenticated subscription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getAccuracyTestsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Gets the list of accuracy tests for the authenticated subscription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getAccuracyTests(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getAccuracyTests(callback: ServiceCallback<any>): void;
  getAccuracyTests(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Creates a new accuracy test.
   *
   * @param {object} testDefinition The details of the new accuracy test.
   *
   * @param {object} testDefinition.dataset Information about the dataset used in
   * the test
   *
   * @param {uuid} testDefinition.dataset.id The identifier of this entity
   *
   * @param {array} testDefinition.modelsProperty Information about the models
   * used for this accuracy test
   *
   * @param {string} testDefinition.name The name of the object
   *
   * @param {string} [testDefinition.description] The description of the object
   *
   * @param {object} [testDefinition.properties] The custom properties of this
   * entity
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ErrorContent>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createAccuracyTestWithHttpOperationResponse(testDefinition: models.TestDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorContent>>;

  /**
   * @summary Creates a new accuracy test.
   *
   * @param {object} testDefinition The details of the new accuracy test.
   *
   * @param {object} testDefinition.dataset Information about the dataset used in
   * the test
   *
   * @param {uuid} testDefinition.dataset.id The identifier of this entity
   *
   * @param {array} testDefinition.modelsProperty Information about the models
   * used for this accuracy test
   *
   * @param {string} testDefinition.name The name of the object
   *
   * @param {string} [testDefinition.description] The description of the object
   *
   * @param {object} [testDefinition.properties] The custom properties of this
   * entity
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ErrorContent} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ErrorContent} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ErrorContent} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createAccuracyTest(testDefinition: models.TestDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorContent>;
  createAccuracyTest(testDefinition: models.TestDefinition, callback: ServiceCallback<models.ErrorContent>): void;
  createAccuracyTest(testDefinition: models.TestDefinition, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorContent>): void;


  /**
   * @summary Gets the accuracy test identified by the given ID.
   *
   * @param {uuid} id The identifier of the accuracy test.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getAccuracyTestWithHttpOperationResponse(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Gets the accuracy test identified by the given ID.
   *
   * @param {uuid} id The identifier of the accuracy test.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getAccuracyTest(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getAccuracyTest(id: string, callback: ServiceCallback<any>): void;
  getAccuracyTest(id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deletes the accuracy test identified by the given ID.
   *
   * @param {uuid} id The identifier of the accuracy test.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ErrorContent>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteAccuracyTestWithHttpOperationResponse(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorContent>>;

  /**
   * @summary Deletes the accuracy test identified by the given ID.
   *
   * @param {uuid} id The identifier of the accuracy test.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ErrorContent} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ErrorContent} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ErrorContent} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteAccuracyTest(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorContent>;
  deleteAccuracyTest(id: string, callback: ServiceCallback<models.ErrorContent>): void;
  deleteAccuracyTest(id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorContent>): void;


  /**
   * @summary Updates the mutable details of the test identified by its id.
   *
   * @param {uuid} id The identifier of the accuracy test.
   *
   * @param {object} testUpdate The object containing the updated fields of the
   * test.
   *
   * @param {string} testUpdate.name The name of the object
   *
   * @param {string} [testUpdate.description] The description of the object
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateAccuracyTestWithHttpOperationResponse(id: string, testUpdate: models.TestUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Updates the mutable details of the test identified by its id.
   *
   * @param {uuid} id The identifier of the accuracy test.
   *
   * @param {object} testUpdate The object containing the updated fields of the
   * test.
   *
   * @param {string} testUpdate.name The name of the object
   *
   * @param {string} [testUpdate.description] The description of the object
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateAccuracyTest(id: string, testUpdate: models.TestUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  updateAccuracyTest(id: string, testUpdate: models.TestUpdate, callback: ServiceCallback<any>): void;
  updateAccuracyTest(id: string, testUpdate: models.TestUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets a list of datasets for the authenticated subscription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDatasetsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Gets a list of datasets for the authenticated subscription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDatasets(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getDatasets(callback: ServiceCallback<any>): void;
  getDatasets(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets the dataset identified by the given ID.
   *
   * @param {uuid} id The identifier of the dataset.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDatasetWithHttpOperationResponse(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Gets the dataset identified by the given ID.
   *
   * @param {uuid} id The identifier of the dataset.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDataset(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getDataset(id: string, callback: ServiceCallback<any>): void;
  getDataset(id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deletes the specified dataset.
   *
   * @param {uuid} id The identifier of the dataset.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ErrorContent>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteDatasetWithHttpOperationResponse(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorContent>>;

  /**
   * @summary Deletes the specified dataset.
   *
   * @param {uuid} id The identifier of the dataset.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ErrorContent} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ErrorContent} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ErrorContent} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteDataset(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorContent>;
  deleteDataset(id: string, callback: ServiceCallback<models.ErrorContent>): void;
  deleteDataset(id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorContent>): void;


  /**
   * @summary Updates the mutable details of the dataset identified by its ID.
   *
   * @param {uuid} id The identifier of the dataset.
   *
   * @param {object} datasetUpdate The updated values for the dataset.
   *
   * @param {string} datasetUpdate.name The name of the object
   *
   * @param {string} [datasetUpdate.description] The description of the object
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateDatasetWithHttpOperationResponse(id: string, datasetUpdate: models.DatasetUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Updates the mutable details of the dataset identified by its ID.
   *
   * @param {uuid} id The identifier of the dataset.
   *
   * @param {object} datasetUpdate The updated values for the dataset.
   *
   * @param {string} datasetUpdate.name The name of the object
   *
   * @param {string} [datasetUpdate.description] The description of the object
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateDataset(id: string, datasetUpdate: models.DatasetUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  updateDataset(id: string, datasetUpdate: models.DatasetUpdate, callback: ServiceCallback<any>): void;
  updateDataset(id: string, datasetUpdate: models.DatasetUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets a list of supported locales for data imports.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getSupportedLocalesForDatasetsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Gets a list of supported locales for data imports.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getSupportedLocalesForDatasets(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getSupportedLocalesForDatasets(callback: ServiceCallback<any>): void;
  getSupportedLocalesForDatasets(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Uploads data and creates a new dataset.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.name] The name of this data import (always add this
   * string for any import).
   *
   * @param {string} [options.description] Optional description of this data
   * import.
   *
   * @param {string} [options.locale] The locale of this data import (always add
   * this string for any import).
   *
   * @param {string} [options.dataImportKind] The kind of the data import (always
   * add this string for any import). Possible values include: 'None',
   * 'Language', 'Acoustic', 'Pronunciation', 'CustomVoice', 'LanguageGeneration'
   *
   * @param {string} [options.properties] Optional properties of this data import
   * (json serialized object with key/values, where all values must be strings)
   *
   * @param {object} [options.audiodata] A zip file containing the audio data
   * (this and the audio archive file for acoustic data imports).
   *
   * @param {object} [options.transcriptions] A text file containing the
   * transcriptions for the audio data (this and the transcriptions file for
   * acoustic data imports).
   *
   * @param {object} [options.languagedata] A text file containing the language
   * or pronunciation data (only this file for language data imports).
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ErrorContent>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  uploadDatasetWithHttpOperationResponse(options?: { name? : string, description? : string, locale? : string, dataImportKind? : string, properties? : string, audiodata? : stream.Readable, transcriptions? : stream.Readable, languagedata? : stream.Readable, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorContent>>;

  /**
   * @summary Uploads data and creates a new dataset.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.name] The name of this data import (always add this
   * string for any import).
   *
   * @param {string} [options.description] Optional description of this data
   * import.
   *
   * @param {string} [options.locale] The locale of this data import (always add
   * this string for any import).
   *
   * @param {string} [options.dataImportKind] The kind of the data import (always
   * add this string for any import). Possible values include: 'None',
   * 'Language', 'Acoustic', 'Pronunciation', 'CustomVoice', 'LanguageGeneration'
   *
   * @param {string} [options.properties] Optional properties of this data import
   * (json serialized object with key/values, where all values must be strings)
   *
   * @param {object} [options.audiodata] A zip file containing the audio data
   * (this and the audio archive file for acoustic data imports).
   *
   * @param {object} [options.transcriptions] A text file containing the
   * transcriptions for the audio data (this and the transcriptions file for
   * acoustic data imports).
   *
   * @param {object} [options.languagedata] A text file containing the language
   * or pronunciation data (only this file for language data imports).
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ErrorContent} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ErrorContent} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ErrorContent} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  uploadDataset(options?: { name? : string, description? : string, locale? : string, dataImportKind? : string, properties? : string, audiodata? : stream.Readable, transcriptions? : stream.Readable, languagedata? : stream.Readable, customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorContent>;
  uploadDataset(callback: ServiceCallback<models.ErrorContent>): void;
  uploadDataset(options: { name? : string, description? : string, locale? : string, dataImportKind? : string, properties? : string, audiodata? : stream.Readable, transcriptions? : stream.Readable, languagedata? : stream.Readable, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorContent>): void;


  /**
   * @summary Gets the list of endpoints for the authenticated subscription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getEndpointsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Gets the list of endpoints for the authenticated subscription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getEndpoints(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getEndpoints(callback: ServiceCallback<any>): void;
  getEndpoints(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Creates a new endpoint.
   *
   * @param {object} endpointDefinition The details of the endpoint.
   *
   * @param {number} [endpointDefinition.concurrentRecognitions] The number of
   * concurrent recognitions the endpoint supports
   *
   * @param {array} endpointDefinition.modelsProperty Information about the
   * deployed models
   *
   * @param {boolean} [endpointDefinition.contentLoggingEnabled] A value
   * indicating whether content logging (audio &amp; transcriptions) is being
   * used for a deployment.
   * Suppressing content logging will result in a higher cost for the deployment.
   * Free subscriptions can only deploy true
   *
   * @param {string} endpointDefinition.name The name of the object
   *
   * @param {string} [endpointDefinition.description] The description of the
   * object
   *
   * @param {object} [endpointDefinition.properties] The custom properties of
   * this entity
   *
   * @param {string} [endpointDefinition.locale] The locale of the contained data
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ErrorContent>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createEndpointWithHttpOperationResponse(endpointDefinition: models.SpeechEndpointDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorContent>>;

  /**
   * @summary Creates a new endpoint.
   *
   * @param {object} endpointDefinition The details of the endpoint.
   *
   * @param {number} [endpointDefinition.concurrentRecognitions] The number of
   * concurrent recognitions the endpoint supports
   *
   * @param {array} endpointDefinition.modelsProperty Information about the
   * deployed models
   *
   * @param {boolean} [endpointDefinition.contentLoggingEnabled] A value
   * indicating whether content logging (audio &amp; transcriptions) is being
   * used for a deployment.
   * Suppressing content logging will result in a higher cost for the deployment.
   * Free subscriptions can only deploy true
   *
   * @param {string} endpointDefinition.name The name of the object
   *
   * @param {string} [endpointDefinition.description] The description of the
   * object
   *
   * @param {object} [endpointDefinition.properties] The custom properties of
   * this entity
   *
   * @param {string} [endpointDefinition.locale] The locale of the contained data
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ErrorContent} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ErrorContent} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ErrorContent} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createEndpoint(endpointDefinition: models.SpeechEndpointDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorContent>;
  createEndpoint(endpointDefinition: models.SpeechEndpointDefinition, callback: ServiceCallback<models.ErrorContent>): void;
  createEndpoint(endpointDefinition: models.SpeechEndpointDefinition, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorContent>): void;


  /**
   * @summary Gets the endpoint identified by the given ID.
   *
   * @param {uuid} id The identifier of the endpoint.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getEndpointWithHttpOperationResponse(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Gets the endpoint identified by the given ID.
   *
   * @param {uuid} id The identifier of the endpoint.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getEndpoint(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getEndpoint(id: string, callback: ServiceCallback<any>): void;
  getEndpoint(id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deletes the endpoint identified by the given ID.
   *
   * @param {uuid} id The identifier of the endpoint.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ErrorContent>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteEndpointWithHttpOperationResponse(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorContent>>;

  /**
   * @summary Deletes the endpoint identified by the given ID.
   *
   * @param {uuid} id The identifier of the endpoint.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ErrorContent} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ErrorContent} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ErrorContent} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteEndpoint(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorContent>;
  deleteEndpoint(id: string, callback: ServiceCallback<models.ErrorContent>): void;
  deleteEndpoint(id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorContent>): void;


  /**
   * @summary Updates the metadata of the endpoint identified by the given ID.
   *
   * @param {uuid} id The identifier of the endpoint.
   *
   * @param {object} endpointUpdate The updated values for the endpoint.
   *
   * @param {string} endpointUpdate.name The name of the object
   *
   * @param {string} [endpointUpdate.description] The description of the object
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateEndpointWithHttpOperationResponse(id: string, endpointUpdate: models.EndpointUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Updates the metadata of the endpoint identified by the given ID.
   *
   * @param {uuid} id The identifier of the endpoint.
   *
   * @param {object} endpointUpdate The updated values for the endpoint.
   *
   * @param {string} endpointUpdate.name The name of the object
   *
   * @param {string} [endpointUpdate.description] The description of the object
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateEndpoint(id: string, endpointUpdate: models.EndpointUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  updateEndpoint(id: string, endpointUpdate: models.EndpointUpdate, callback: ServiceCallback<any>): void;
  updateEndpoint(id: string, endpointUpdate: models.EndpointUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets a list of supported locales for endpoint creations.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getSupportedLocalesForEndpointsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Gets a list of supported locales for endpoint creations.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getSupportedLocalesForEndpoints(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getSupportedLocalesForEndpoints(callback: ServiceCallback<any>): void;
  getSupportedLocalesForEndpoints(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets the list of endpoint data export tasks for the authenticated
   * user.
   *
   * @param {uuid} endpointId The identifier of the endpoint.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getEndpointDataExportsWithHttpOperationResponse(endpointId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Gets the list of endpoint data export tasks for the authenticated
   * user.
   *
   * @param {uuid} endpointId The identifier of the endpoint.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getEndpointDataExports(endpointId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getEndpointDataExports(endpointId: string, callback: ServiceCallback<any>): void;
  getEndpointDataExports(endpointId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Create a new endpoint data export task.
   *
   * @param {uuid} endpointId The identifier of the endpoint.
   *
   * @param {object} endpointDataDefinition The details of the new endpoint data
   * export.
   *
   * @param {date} endpointDataDefinition.startDate The start date of the
   * demplyment data export
   *
   * @param {date} endpointDataDefinition.endDate The end date of the demplyment
   * data export
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ErrorContent>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createEndpointDataExportWithHttpOperationResponse(endpointId: string, endpointDataDefinition: models.EndpointDataDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorContent>>;

  /**
   * @summary Create a new endpoint data export task.
   *
   * @param {uuid} endpointId The identifier of the endpoint.
   *
   * @param {object} endpointDataDefinition The details of the new endpoint data
   * export.
   *
   * @param {date} endpointDataDefinition.startDate The start date of the
   * demplyment data export
   *
   * @param {date} endpointDataDefinition.endDate The end date of the demplyment
   * data export
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ErrorContent} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ErrorContent} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ErrorContent} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createEndpointDataExport(endpointId: string, endpointDataDefinition: models.EndpointDataDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorContent>;
  createEndpointDataExport(endpointId: string, endpointDataDefinition: models.EndpointDataDefinition, callback: ServiceCallback<models.ErrorContent>): void;
  createEndpointDataExport(endpointId: string, endpointDataDefinition: models.EndpointDataDefinition, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorContent>): void;


  /**
   * @summary Deletes the transcriptions and captured audio files associated with
   * the endpoint identified by the given ID.
   *
   * Deletion will happen in the background and can take up to a day.
   *
   * @param {uuid} endpointId The identifier of the endpoint.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ErrorContent>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteEndpointDataWithHttpOperationResponse(endpointId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorContent>>;

  /**
   * @summary Deletes the transcriptions and captured audio files associated with
   * the endpoint identified by the given ID.
   *
   * Deletion will happen in the background and can take up to a day.
   *
   * @param {uuid} endpointId The identifier of the endpoint.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ErrorContent} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ErrorContent} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ErrorContent} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteEndpointData(endpointId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorContent>;
  deleteEndpointData(endpointId: string, callback: ServiceCallback<models.ErrorContent>): void;
  deleteEndpointData(endpointId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorContent>): void;


  /**
   * @summary Gets the specified endpoint data export task for the authenticated
   * user.
   *
   * @param {uuid} endpointId The identifier of the endpoint.
   *
   * @param {uuid} id The identifier of the data export.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getEndpointDataExportWithHttpOperationResponse(endpointId: string, id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Gets the specified endpoint data export task for the authenticated
   * user.
   *
   * @param {uuid} endpointId The identifier of the endpoint.
   *
   * @param {uuid} id The identifier of the data export.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getEndpointDataExport(endpointId: string, id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getEndpointDataExport(endpointId: string, id: string, callback: ServiceCallback<any>): void;
  getEndpointDataExport(endpointId: string, id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deletes the endpoint data export task identified by the given ID.
   *
   * @param {uuid} endpointId The identifier of the endpoint.
   *
   * @param {uuid} id The identifier of the endpoint data export.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ErrorContent>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteEndpointDataExportWithHttpOperationResponse(endpointId: string, id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorContent>>;

  /**
   * @summary Deletes the endpoint data export task identified by the given ID.
   *
   * @param {uuid} endpointId The identifier of the endpoint.
   *
   * @param {uuid} id The identifier of the endpoint data export.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ErrorContent} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ErrorContent} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ErrorContent} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteEndpointDataExport(endpointId: string, id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorContent>;
  deleteEndpointDataExport(endpointId: string, id: string, callback: ServiceCallback<models.ErrorContent>): void;
  deleteEndpointDataExport(endpointId: string, id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorContent>): void;


  /**
   * @summary Gets the list of models for the authenticated subscription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getModelsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Gets the list of models for the authenticated subscription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getModels(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getModels(callback: ServiceCallback<any>): void;
  getModels(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Creates a new model.
   *
   * @param {object} modelDefinition The details of the new model.
   *
   * @param {string} [modelDefinition.text] The text used to adapt this language
   * model
   *
   * @param {object} [modelDefinition.baseModel] The base model used for
   * adaptation
   *
   * @param {uuid} modelDefinition.baseModel.id The identifier of this entity
   *
   * @param {array} [modelDefinition.datasets] Datasets used for adaptation
   *
   * @param {string} modelDefinition.modelKind The kind of this model (e.g.
   * acoustic, language ...). Possible values include: 'None', 'Acoustic',
   * 'Language', 'AcousticAndLanguage', 'CustomVoice', 'LanguageGeneration',
   * 'Sentiment', 'LanguageIdentification'
   *
   * @param {string} modelDefinition.name The name of the object
   *
   * @param {string} [modelDefinition.description] The description of the object
   *
   * @param {object} [modelDefinition.properties] The custom properties of this
   * entity
   *
   * @param {string} [modelDefinition.locale] The locale of the contained data
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ErrorContent>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createModelWithHttpOperationResponse(modelDefinition: models.SpeechModelDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorContent>>;

  /**
   * @summary Creates a new model.
   *
   * @param {object} modelDefinition The details of the new model.
   *
   * @param {string} [modelDefinition.text] The text used to adapt this language
   * model
   *
   * @param {object} [modelDefinition.baseModel] The base model used for
   * adaptation
   *
   * @param {uuid} modelDefinition.baseModel.id The identifier of this entity
   *
   * @param {array} [modelDefinition.datasets] Datasets used for adaptation
   *
   * @param {string} modelDefinition.modelKind The kind of this model (e.g.
   * acoustic, language ...). Possible values include: 'None', 'Acoustic',
   * 'Language', 'AcousticAndLanguage', 'CustomVoice', 'LanguageGeneration',
   * 'Sentiment', 'LanguageIdentification'
   *
   * @param {string} modelDefinition.name The name of the object
   *
   * @param {string} [modelDefinition.description] The description of the object
   *
   * @param {object} [modelDefinition.properties] The custom properties of this
   * entity
   *
   * @param {string} [modelDefinition.locale] The locale of the contained data
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ErrorContent} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ErrorContent} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ErrorContent} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createModel(modelDefinition: models.SpeechModelDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorContent>;
  createModel(modelDefinition: models.SpeechModelDefinition, callback: ServiceCallback<models.ErrorContent>): void;
  createModel(modelDefinition: models.SpeechModelDefinition, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorContent>): void;


  /**
   * @summary Gets the model identified by the given ID.
   *
   * @param {uuid} id The identifier of the model.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getModelWithHttpOperationResponse(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Gets the model identified by the given ID.
   *
   * @param {uuid} id The identifier of the model.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getModel(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getModel(id: string, callback: ServiceCallback<any>): void;
  getModel(id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deletes the model identified by the given ID.
   *
   * @param {uuid} id The identifier of the model.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ErrorContent>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteModelWithHttpOperationResponse(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorContent>>;

  /**
   * @summary Deletes the model identified by the given ID.
   *
   * @param {uuid} id The identifier of the model.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ErrorContent} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ErrorContent} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ErrorContent} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteModel(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorContent>;
  deleteModel(id: string, callback: ServiceCallback<models.ErrorContent>): void;
  deleteModel(id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorContent>): void;


  /**
   * @summary Updates the metadata of the model identified by the given ID.
   *
   * @param {uuid} id The identifier of the model.
   *
   * @param {object} modelUpdate The updated values for the model.
   *
   * @param {string} modelUpdate.name The name of the object
   *
   * @param {string} [modelUpdate.description] The description of the object
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateModelWithHttpOperationResponse(id: string, modelUpdate: models.ModelUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Updates the metadata of the model identified by the given ID.
   *
   * @param {uuid} id The identifier of the model.
   *
   * @param {object} modelUpdate The updated values for the model.
   *
   * @param {string} modelUpdate.name The name of the object
   *
   * @param {string} [modelUpdate.description] The description of the object
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateModel(id: string, modelUpdate: models.ModelUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  updateModel(id: string, modelUpdate: models.ModelUpdate, callback: ServiceCallback<any>): void;
  updateModel(id: string, modelUpdate: models.ModelUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets a list of supported locales for model adaptation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getSupportedLocalesForModelsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Gets a list of supported locales for model adaptation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getSupportedLocalesForModels(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getSupportedLocalesForModels(callback: ServiceCallback<any>): void;
  getSupportedLocalesForModels(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets a list of transcriptions for the authenticated subscription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getTranscriptionsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Gets a list of transcriptions for the authenticated subscription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getTranscriptions(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getTranscriptions(callback: ServiceCallback<any>): void;
  getTranscriptions(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Creates a new transcription.
   *
   * @param {object} transcription The details of the new transcription.
   *
   * @param {string} transcription.recordingsUrl
   *
   * @param {array} [transcription.modelsProperty]
   *
   * @param {string} [transcription.locale] The locale of the contained data
   *
   * @param {string} transcription.name The name of the object
   *
   * @param {string} [transcription.description] The description of the object
   *
   * @param {object} [transcription.properties] The custom properties of this
   * entity
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ErrorContent>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createTranscriptionWithHttpOperationResponse(transcription: models.TranscriptionDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorContent>>;

  /**
   * @summary Creates a new transcription.
   *
   * @param {object} transcription The details of the new transcription.
   *
   * @param {string} transcription.recordingsUrl
   *
   * @param {array} [transcription.modelsProperty]
   *
   * @param {string} [transcription.locale] The locale of the contained data
   *
   * @param {string} transcription.name The name of the object
   *
   * @param {string} [transcription.description] The description of the object
   *
   * @param {object} [transcription.properties] The custom properties of this
   * entity
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ErrorContent} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ErrorContent} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ErrorContent} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createTranscription(transcription: models.TranscriptionDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorContent>;
  createTranscription(transcription: models.TranscriptionDefinition, callback: ServiceCallback<models.ErrorContent>): void;
  createTranscription(transcription: models.TranscriptionDefinition, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorContent>): void;


  /**
   * @summary Gets the transcription identified by the given ID.
   *
   * @param {uuid} id The identifier of the transcription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getTranscriptionWithHttpOperationResponse(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Gets the transcription identified by the given ID.
   *
   * @param {uuid} id The identifier of the transcription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getTranscription(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getTranscription(id: string, callback: ServiceCallback<any>): void;
  getTranscription(id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deletes the specified transcription task.
   *
   * @param {uuid} id The identifier of the transcription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ErrorContent>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteTranscriptionWithHttpOperationResponse(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorContent>>;

  /**
   * @summary Deletes the specified transcription task.
   *
   * @param {uuid} id The identifier of the transcription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ErrorContent} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ErrorContent} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ErrorContent} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteTranscription(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorContent>;
  deleteTranscription(id: string, callback: ServiceCallback<models.ErrorContent>): void;
  deleteTranscription(id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorContent>): void;


  /**
   * @summary Updates the mutable details of the transcription identified by its
   * ID.
   *
   * @param {uuid} id The identifier of the transcription.
   *
   * @param {object} transcriptionUpdate The updated values for the
   * transcription.
   *
   * @param {string} transcriptionUpdate.name The name of the object
   *
   * @param {string} [transcriptionUpdate.description] The description of the
   * object
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateTranscriptionWithHttpOperationResponse(id: string, transcriptionUpdate: models.TranscriptionUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Updates the mutable details of the transcription identified by its
   * ID.
   *
   * @param {uuid} id The identifier of the transcription.
   *
   * @param {object} transcriptionUpdate The updated values for the
   * transcription.
   *
   * @param {string} transcriptionUpdate.name The name of the object
   *
   * @param {string} [transcriptionUpdate.description] The description of the
   * object
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateTranscription(id: string, transcriptionUpdate: models.TranscriptionUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  updateTranscription(id: string, transcriptionUpdate: models.TranscriptionUpdate, callback: ServiceCallback<any>): void;
  updateTranscription(id: string, transcriptionUpdate: models.TranscriptionUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets a list of supported locales for offline transcriptions.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getSupportedLocalesForTranscriptionsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Gets a list of supported locales for offline transcriptions.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getSupportedLocalesForTranscriptions(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getSupportedLocalesForTranscriptions(callback: ServiceCallback<any>): void;
  getSupportedLocalesForTranscriptions(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets all language generation endpoint of a subscription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getLanguageGenerationEndpointsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Gets all language generation endpoint of a subscription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getLanguageGenerationEndpoints(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getLanguageGenerationEndpoints(callback: ServiceCallback<any>): void;
  getLanguageGenerationEndpoints(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Creates a new language generation endpoint.
   *
   * @param {object} endpointDefinition
   *
   * @param {number} [endpointDefinition.concurrentRecognitions] The number of
   * concurrent recognitions the endpoint supports
   *
   * @param {array} endpointDefinition.modelsProperty Information about the
   * deployed models
   *
   * @param {boolean} [endpointDefinition.contentLoggingEnabled] A value
   * indicating whether content logging (audio &amp; transcriptions) is being
   * used for a deployment.
   * Suppressing content logging will result in a higher cost for the deployment.
   * Free subscriptions can only deploy true
   *
   * @param {string} endpointDefinition.name The name of the object
   *
   * @param {string} [endpointDefinition.description] The description of the
   * object
   *
   * @param {object} [endpointDefinition.properties] The custom properties of
   * this entity
   *
   * @param {string} [endpointDefinition.locale] The locale of the contained data
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ErrorContent>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createLanguageGenerationEndpointWithHttpOperationResponse(endpointDefinition: models.EndpointDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorContent>>;

  /**
   * @summary Creates a new language generation endpoint.
   *
   * @param {object} endpointDefinition
   *
   * @param {number} [endpointDefinition.concurrentRecognitions] The number of
   * concurrent recognitions the endpoint supports
   *
   * @param {array} endpointDefinition.modelsProperty Information about the
   * deployed models
   *
   * @param {boolean} [endpointDefinition.contentLoggingEnabled] A value
   * indicating whether content logging (audio &amp; transcriptions) is being
   * used for a deployment.
   * Suppressing content logging will result in a higher cost for the deployment.
   * Free subscriptions can only deploy true
   *
   * @param {string} endpointDefinition.name The name of the object
   *
   * @param {string} [endpointDefinition.description] The description of the
   * object
   *
   * @param {object} [endpointDefinition.properties] The custom properties of
   * this entity
   *
   * @param {string} [endpointDefinition.locale] The locale of the contained data
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ErrorContent} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ErrorContent} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ErrorContent} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createLanguageGenerationEndpoint(endpointDefinition: models.EndpointDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorContent>;
  createLanguageGenerationEndpoint(endpointDefinition: models.EndpointDefinition, callback: ServiceCallback<models.ErrorContent>): void;
  createLanguageGenerationEndpoint(endpointDefinition: models.EndpointDefinition, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorContent>): void;


  /**
   * @summary Gets the specified deployed language generation endpoint.
   *
   * @param {uuid} id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getLanguageGenerationEndpointWithHttpOperationResponse(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Gets the specified deployed language generation endpoint.
   *
   * @param {uuid} id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getLanguageGenerationEndpoint(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getLanguageGenerationEndpoint(id: string, callback: ServiceCallback<any>): void;
  getLanguageGenerationEndpoint(id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deletes the language generation model endpoint with the given id.
   *
   * @param {uuid} id The identifier of the language generation model endpoint.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ErrorContent>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteLanguageGenerationEndpointWithHttpOperationResponse(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorContent>>;

  /**
   * @summary Deletes the language generation model endpoint with the given id.
   *
   * @param {uuid} id The identifier of the language generation model endpoint.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ErrorContent} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ErrorContent} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ErrorContent} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteLanguageGenerationEndpoint(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorContent>;
  deleteLanguageGenerationEndpoint(id: string, callback: ServiceCallback<models.ErrorContent>): void;
  deleteLanguageGenerationEndpoint(id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorContent>): void;


  /**
   * @summary Updates the mutable details of the language generation endpoint
   * identified by its id.
   *
   * @param {uuid} id The identifier of the language generation model endpoint.
   *
   * @param {object} endpointUpdate The object contains the updated fields of the
   * endpoint.
   *
   * @param {string} endpointUpdate.name The name of the object
   *
   * @param {string} [endpointUpdate.description] The description of the object
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateLanguageGenerationEndpointWithHttpOperationResponse(id: string, endpointUpdate: models.EndpointUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Updates the mutable details of the language generation endpoint
   * identified by its id.
   *
   * @param {uuid} id The identifier of the language generation model endpoint.
   *
   * @param {object} endpointUpdate The object contains the updated fields of the
   * endpoint.
   *
   * @param {string} endpointUpdate.name The name of the object
   *
   * @param {string} [endpointUpdate.description] The description of the object
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateLanguageGenerationEndpoint(id: string, endpointUpdate: models.EndpointUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  updateLanguageGenerationEndpoint(id: string, endpointUpdate: models.EndpointUpdate, callback: ServiceCallback<any>): void;
  updateLanguageGenerationEndpoint(id: string, endpointUpdate: models.EndpointUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets a list of supported locales for language generation endpoint
   * creation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getSupportedLocalesForLanguageGenerationEndpointsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Gets a list of supported locales for language generation endpoint
   * creation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getSupportedLocalesForLanguageGenerationEndpoints(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getSupportedLocalesForLanguageGenerationEndpoints(callback: ServiceCallback<any>): void;
  getSupportedLocalesForLanguageGenerationEndpoints(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets all language generation model of a subscription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getLanguageGenerationModelsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Gets all language generation model of a subscription.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getLanguageGenerationModels(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getLanguageGenerationModels(callback: ServiceCallback<any>): void;
  getLanguageGenerationModels(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Creates a new language generation model.
   *
   * @param {object} modelDefinition
   *
   * @param {string} [modelDefinition.text] The text used to adapt this language
   * model
   *
   * @param {object} [modelDefinition.baseModel] The base model used for
   * adaptation
   *
   * @param {uuid} modelDefinition.baseModel.id The identifier of this entity
   *
   * @param {array} [modelDefinition.datasets] Datasets used for adaptation
   *
   * @param {string} modelDefinition.modelKind The kind of this model (e.g.
   * acoustic, language ...). Possible values include: 'Acoustic',
   * 'AcousticAndLanguage', 'Language', 'None', 'CustomVoice',
   * 'LanguageGeneration', 'Sentiment', 'LanguageIdentification'
   *
   * @param {string} modelDefinition.name The name of the object
   *
   * @param {string} [modelDefinition.description] The description of the object
   *
   * @param {object} [modelDefinition.properties] The custom properties of this
   * entity
   *
   * @param {string} [modelDefinition.locale] The locale of the contained data
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ErrorContent>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createLanguageGenerationModelWithHttpOperationResponse(modelDefinition: models.ModelDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorContent>>;

  /**
   * @summary Creates a new language generation model.
   *
   * @param {object} modelDefinition
   *
   * @param {string} [modelDefinition.text] The text used to adapt this language
   * model
   *
   * @param {object} [modelDefinition.baseModel] The base model used for
   * adaptation
   *
   * @param {uuid} modelDefinition.baseModel.id The identifier of this entity
   *
   * @param {array} [modelDefinition.datasets] Datasets used for adaptation
   *
   * @param {string} modelDefinition.modelKind The kind of this model (e.g.
   * acoustic, language ...). Possible values include: 'Acoustic',
   * 'AcousticAndLanguage', 'Language', 'None', 'CustomVoice',
   * 'LanguageGeneration', 'Sentiment', 'LanguageIdentification'
   *
   * @param {string} modelDefinition.name The name of the object
   *
   * @param {string} [modelDefinition.description] The description of the object
   *
   * @param {object} [modelDefinition.properties] The custom properties of this
   * entity
   *
   * @param {string} [modelDefinition.locale] The locale of the contained data
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ErrorContent} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ErrorContent} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ErrorContent} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createLanguageGenerationModel(modelDefinition: models.ModelDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorContent>;
  createLanguageGenerationModel(modelDefinition: models.ModelDefinition, callback: ServiceCallback<models.ErrorContent>): void;
  createLanguageGenerationModel(modelDefinition: models.ModelDefinition, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorContent>): void;


  /**
   * @summary Gets the specified language generation model.
   *
   * @param {uuid} id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getLanguageGenerationModelWithHttpOperationResponse(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Gets the specified language generation model.
   *
   * @param {uuid} id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getLanguageGenerationModel(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getLanguageGenerationModel(id: string, callback: ServiceCallback<any>): void;
  getLanguageGenerationModel(id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deletes the language generation model with the given id.
   *
   * @param {uuid} id The identifier of the language generation model.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ErrorContent>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteLanguageGenerationModelWithHttpOperationResponse(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorContent>>;

  /**
   * @summary Deletes the language generation model with the given id.
   *
   * @param {uuid} id The identifier of the language generation model.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ErrorContent} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ErrorContent} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ErrorContent} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteLanguageGenerationModel(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorContent>;
  deleteLanguageGenerationModel(id: string, callback: ServiceCallback<models.ErrorContent>): void;
  deleteLanguageGenerationModel(id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorContent>): void;


  /**
   * @summary Updates the mutable details of the language generation model
   * identified by its id.
   *
   * @param {uuid} id The route parameter identifies the language generation
   * model to change.
   *
   * @param {object} modelUpdate The object contains the updated fields of the
   * model.
   *
   * @param {string} modelUpdate.name The name of the object
   *
   * @param {string} [modelUpdate.description] The description of the object
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateLanguageGenerationModelWithHttpOperationResponse(id: string, modelUpdate: models.ModelUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Updates the mutable details of the language generation model
   * identified by its id.
   *
   * @param {uuid} id The route parameter identifies the language generation
   * model to change.
   *
   * @param {object} modelUpdate The object contains the updated fields of the
   * model.
   *
   * @param {string} modelUpdate.name The name of the object
   *
   * @param {string} [modelUpdate.description] The description of the object
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateLanguageGenerationModel(id: string, modelUpdate: models.ModelUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  updateLanguageGenerationModel(id: string, modelUpdate: models.ModelUpdate, callback: ServiceCallback<any>): void;
  updateLanguageGenerationModel(id: string, modelUpdate: models.ModelUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets a list of supported locales for language generation model
   * creation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getSupportedLocalesForLanguageGenerationModelsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Gets a list of supported locales for language generation model
   * creation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getSupportedLocalesForLanguageGenerationModels(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getSupportedLocalesForLanguageGenerationModels(callback: ServiceCallback<any>): void;
  getSupportedLocalesForLanguageGenerationModels(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary The action returns the health of the different components of the
   * serivce.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HealthStatusResponse>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getHealthStatusWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HealthStatusResponse>>;

  /**
   * @summary The action returns the health of the different components of the
   * serivce.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {HealthStatusResponse} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {HealthStatusResponse} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link HealthStatusResponse} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getHealthStatus(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HealthStatusResponse>;
  getHealthStatus(callback: ServiceCallback<models.HealthStatusResponse>): void;
  getHealthStatus(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HealthStatusResponse>): void;


  /**
   * @summary Gets all voice datasets of a user.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getVoiceDatasetsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Gets all voice datasets of a user.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getVoiceDatasets(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getVoiceDatasets(callback: ServiceCallback<any>): void;
  getVoiceDatasets(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets a list of supported locales for custom voice data imports.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getSupportedLocalesForVoiceDatasetsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Gets a list of supported locales for custom voice data imports.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getSupportedLocalesForVoiceDatasets(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getSupportedLocalesForVoiceDatasets(callback: ServiceCallback<any>): void;
  getSupportedLocalesForVoiceDatasets(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Uploads data and creates a new voice data object.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.name] The name of this data import (always add this
   * string for any import).
   *
   * @param {string} [options.description] Optional description of this data
   * import.
   *
   * @param {string} [options.locale] The locale of this data import (always add
   * this string for any import).
   *
   * @param {string} [options.dataImportKind] The kind of the data import (always
   * add this string for any import). Possible values include: 'None',
   * 'Language', 'Acoustic', 'Pronunciation', 'CustomVoice', 'LanguageGeneration'
   *
   * @param {string} [options.properties] Optional properties of this data import
   * (json serialized object with key/values, where all values must be strings)
   *
   * @param {object} [options.audiodata] A zip file containing the audio data.
   *
   * @param {object} [options.transcriptions] The transcriptions text file of the
   * audio data.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ErrorContent>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  uploadVoiceDatasetWithHttpOperationResponse(options?: { name? : string, description? : string, locale? : string, dataImportKind? : string, properties? : string, audiodata? : stream.Readable, transcriptions? : stream.Readable, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorContent>>;

  /**
   * @summary Uploads data and creates a new voice data object.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.name] The name of this data import (always add this
   * string for any import).
   *
   * @param {string} [options.description] Optional description of this data
   * import.
   *
   * @param {string} [options.locale] The locale of this data import (always add
   * this string for any import).
   *
   * @param {string} [options.dataImportKind] The kind of the data import (always
   * add this string for any import). Possible values include: 'None',
   * 'Language', 'Acoustic', 'Pronunciation', 'CustomVoice', 'LanguageGeneration'
   *
   * @param {string} [options.properties] Optional properties of this data import
   * (json serialized object with key/values, where all values must be strings)
   *
   * @param {object} [options.audiodata] A zip file containing the audio data.
   *
   * @param {object} [options.transcriptions] The transcriptions text file of the
   * audio data.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ErrorContent} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ErrorContent} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ErrorContent} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  uploadVoiceDataset(options?: { name? : string, description? : string, locale? : string, dataImportKind? : string, properties? : string, audiodata? : stream.Readable, transcriptions? : stream.Readable, customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorContent>;
  uploadVoiceDataset(callback: ServiceCallback<models.ErrorContent>): void;
  uploadVoiceDataset(options: { name? : string, description? : string, locale? : string, dataImportKind? : string, properties? : string, audiodata? : stream.Readable, transcriptions? : stream.Readable, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorContent>): void;


  /**
   * @summary Deletes the voice dataset with the given id.
   *
   * @param {uuid} id The identifier of the voice dataset
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ErrorContent>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteVoiceDatasetWithHttpOperationResponse(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorContent>>;

  /**
   * @summary Deletes the voice dataset with the given id.
   *
   * @param {uuid} id The identifier of the voice dataset
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ErrorContent} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ErrorContent} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ErrorContent} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteVoiceDataset(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorContent>;
  deleteVoiceDataset(id: string, callback: ServiceCallback<models.ErrorContent>): void;
  deleteVoiceDataset(id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorContent>): void;


  /**
   * @summary Updates the mutable details of the voice dataset identified by its
   * ID.
   *
   * @param {uuid} id The identifier of the voice dataset.
   *
   * @param {object} datasetUpdate The updated values for the voice dataset.
   *
   * @param {string} datasetUpdate.name The name of the object
   *
   * @param {string} [datasetUpdate.description] The description of the object
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateVoiceDatasetWithHttpOperationResponse(id: string, datasetUpdate: models.DatasetUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Updates the mutable details of the voice dataset identified by its
   * ID.
   *
   * @param {uuid} id The identifier of the voice dataset.
   *
   * @param {object} datasetUpdate The updated values for the voice dataset.
   *
   * @param {string} datasetUpdate.name The name of the object
   *
   * @param {string} [datasetUpdate.description] The description of the object
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateVoiceDataset(id: string, datasetUpdate: models.DatasetUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  updateVoiceDataset(id: string, datasetUpdate: models.DatasetUpdate, callback: ServiceCallback<any>): void;
  updateVoiceDataset(id: string, datasetUpdate: models.DatasetUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets a list of voice endpoint details.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getVoiceDeploymentsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Gets a list of voice endpoint details.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getVoiceDeployments(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getVoiceDeployments(callback: ServiceCallback<any>): void;
  getVoiceDeployments(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Creates a new voice endpoint object.
   *
   * @param {object} endpoint
   *
   * @param {number} [endpoint.concurrentRecognitions] The number of concurrent
   * recognitions the endpoint supports
   *
   * @param {array} endpoint.modelsProperty Information about the deployed models
   *
   * @param {boolean} [endpoint.contentLoggingEnabled] A value indicating whether
   * content logging (audio &amp; transcriptions) is being used for a deployment.
   * Suppressing content logging will result in a higher cost for the deployment.
   * Free subscriptions can only deploy true
   *
   * @param {string} endpoint.name The name of the object
   *
   * @param {string} [endpoint.description] The description of the object
   *
   * @param {object} [endpoint.properties] The custom properties of this entity
   *
   * @param {string} [endpoint.locale] The locale of the contained data
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ErrorContent>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createVoiceDeploymentWithHttpOperationResponse(endpoint: models.EndpointDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorContent>>;

  /**
   * @summary Creates a new voice endpoint object.
   *
   * @param {object} endpoint
   *
   * @param {number} [endpoint.concurrentRecognitions] The number of concurrent
   * recognitions the endpoint supports
   *
   * @param {array} endpoint.modelsProperty Information about the deployed models
   *
   * @param {boolean} [endpoint.contentLoggingEnabled] A value indicating whether
   * content logging (audio &amp; transcriptions) is being used for a deployment.
   * Suppressing content logging will result in a higher cost for the deployment.
   * Free subscriptions can only deploy true
   *
   * @param {string} endpoint.name The name of the object
   *
   * @param {string} [endpoint.description] The description of the object
   *
   * @param {object} [endpoint.properties] The custom properties of this entity
   *
   * @param {string} [endpoint.locale] The locale of the contained data
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ErrorContent} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ErrorContent} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ErrorContent} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createVoiceDeployment(endpoint: models.EndpointDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorContent>;
  createVoiceDeployment(endpoint: models.EndpointDefinition, callback: ServiceCallback<models.ErrorContent>): void;
  createVoiceDeployment(endpoint: models.EndpointDefinition, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorContent>): void;


  /**
   * @summary Gets the details of a Custom Voice endpoint.
   *
   * @param {uuid} id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getVoiceDeploymentWithHttpOperationResponse(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Gets the details of a Custom Voice endpoint.
   *
   * @param {uuid} id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getVoiceDeployment(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getVoiceDeployment(id: string, callback: ServiceCallback<any>): void;
  getVoiceDeployment(id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Delete the specified voice endpoint.
   *
   * @param {uuid} id The id of voice endpoint.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ErrorContent>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteDeploymentWithHttpOperationResponse(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorContent>>;

  /**
   * @summary Delete the specified voice endpoint.
   *
   * @param {uuid} id The id of voice endpoint.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ErrorContent} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ErrorContent} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ErrorContent} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteDeployment(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorContent>;
  deleteDeployment(id: string, callback: ServiceCallback<models.ErrorContent>): void;
  deleteDeployment(id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorContent>): void;


  /**
   * @summary Updates the name and description of the endpoint identified by the
   * given ID.
   *
   * @param {uuid} id The identifier of the endpoint.
   *
   * @param {object} endpointUpdate The updated values for the endpoint.
   *
   * @param {string} endpointUpdate.name The name of the object
   *
   * @param {string} [endpointUpdate.description] The description of the object
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateVoiceEndpointWithHttpOperationResponse(id: string, endpointUpdate: models.EndpointUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Updates the name and description of the endpoint identified by the
   * given ID.
   *
   * @param {uuid} id The identifier of the endpoint.
   *
   * @param {object} endpointUpdate The updated values for the endpoint.
   *
   * @param {string} endpointUpdate.name The name of the object
   *
   * @param {string} [endpointUpdate.description] The description of the object
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateVoiceEndpoint(id: string, endpointUpdate: models.EndpointUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  updateVoiceEndpoint(id: string, endpointUpdate: models.EndpointUpdate, callback: ServiceCallback<any>): void;
  updateVoiceEndpoint(id: string, endpointUpdate: models.EndpointUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets a list of supported locales for custom voice Endpoints.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getSupportedLocalesForVoiceEndpointsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Gets a list of supported locales for custom voice Endpoints.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getSupportedLocalesForVoiceEndpoints(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getSupportedLocalesForVoiceEndpoints(callback: ServiceCallback<any>): void;
  getSupportedLocalesForVoiceEndpoints(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets a list of voice model details.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getVoiceModelsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Gets a list of voice model details.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getVoiceModels(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getVoiceModels(callback: ServiceCallback<any>): void;
  getVoiceModels(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Creates a new voice model object.
   *
   * @param {object} modelDefinition
   *
   * @param {string} [modelDefinition.text] The text used to adapt this language
   * model
   *
   * @param {object} [modelDefinition.baseModel] The base model used for
   * adaptation
   *
   * @param {uuid} modelDefinition.baseModel.id The identifier of this entity
   *
   * @param {array} [modelDefinition.datasets] Datasets used for adaptation
   *
   * @param {string} modelDefinition.modelKind The kind of this model (e.g.
   * acoustic, language ...). Possible values include: 'Acoustic',
   * 'AcousticAndLanguage', 'Language', 'None', 'CustomVoice',
   * 'LanguageGeneration', 'Sentiment', 'LanguageIdentification'
   *
   * @param {string} modelDefinition.name The name of the object
   *
   * @param {string} [modelDefinition.description] The description of the object
   *
   * @param {object} [modelDefinition.properties] The custom properties of this
   * entity
   *
   * @param {string} [modelDefinition.locale] The locale of the contained data
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ErrorContent>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createVoiceModelWithHttpOperationResponse(modelDefinition: models.ModelDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorContent>>;

  /**
   * @summary Creates a new voice model object.
   *
   * @param {object} modelDefinition
   *
   * @param {string} [modelDefinition.text] The text used to adapt this language
   * model
   *
   * @param {object} [modelDefinition.baseModel] The base model used for
   * adaptation
   *
   * @param {uuid} modelDefinition.baseModel.id The identifier of this entity
   *
   * @param {array} [modelDefinition.datasets] Datasets used for adaptation
   *
   * @param {string} modelDefinition.modelKind The kind of this model (e.g.
   * acoustic, language ...). Possible values include: 'Acoustic',
   * 'AcousticAndLanguage', 'Language', 'None', 'CustomVoice',
   * 'LanguageGeneration', 'Sentiment', 'LanguageIdentification'
   *
   * @param {string} modelDefinition.name The name of the object
   *
   * @param {string} [modelDefinition.description] The description of the object
   *
   * @param {object} [modelDefinition.properties] The custom properties of this
   * entity
   *
   * @param {string} [modelDefinition.locale] The locale of the contained data
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ErrorContent} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ErrorContent} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ErrorContent} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createVoiceModel(modelDefinition: models.ModelDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorContent>;
  createVoiceModel(modelDefinition: models.ModelDefinition, callback: ServiceCallback<models.ErrorContent>): void;
  createVoiceModel(modelDefinition: models.ModelDefinition, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorContent>): void;


  /**
   * @summary Gets specified voice model details.
   *
   * @param {uuid} id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getVoiceModelWithHttpOperationResponse(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Gets specified voice model details.
   *
   * @param {uuid} id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getVoiceModel(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getVoiceModel(id: string, callback: ServiceCallback<any>): void;
  getVoiceModel(id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deletes the voice model with the given id.
   *
   * @param {uuid} id The identifier of the voice model
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ErrorContent>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteVoiceModelWithHttpOperationResponse(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorContent>>;

  /**
   * @summary Deletes the voice model with the given id.
   *
   * @param {uuid} id The identifier of the voice model
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ErrorContent} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ErrorContent} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ErrorContent} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteVoiceModel(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorContent>;
  deleteVoiceModel(id: string, callback: ServiceCallback<models.ErrorContent>): void;
  deleteVoiceModel(id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorContent>): void;


  /**
   * @summary Updates the metadata of the voice model identified by the given ID.
   *
   * @param {uuid} id The identifier of the voice model.
   *
   * @param {object} modelUpdate The updated values for the voice model.
   *
   * @param {string} modelUpdate.name The name of the object
   *
   * @param {string} [modelUpdate.description] The description of the object
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateVoiceModelWithHttpOperationResponse(id: string, modelUpdate: models.ModelUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Updates the metadata of the voice model identified by the given ID.
   *
   * @param {uuid} id The identifier of the voice model.
   *
   * @param {object} modelUpdate The updated values for the voice model.
   *
   * @param {string} modelUpdate.name The name of the object
   *
   * @param {string} [modelUpdate.description] The description of the object
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateVoiceModel(id: string, modelUpdate: models.ModelUpdate, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  updateVoiceModel(id: string, modelUpdate: models.ModelUpdate, callback: ServiceCallback<any>): void;
  updateVoiceModel(id: string, modelUpdate: models.ModelUpdate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets a list of supported locales for custom voice Models.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getSupportedLocalesForVoiceModelsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Gets a list of supported locales for custom voice Models.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getSupportedLocalesForVoiceModels(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getSupportedLocalesForVoiceModels(callback: ServiceCallback<any>): void;
  getSupportedLocalesForVoiceModels(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Gets detail of the specified voice test.
   *
   * @param {uuid} id The identifier of the voice test.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getVoiceTestWithHttpOperationResponse(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

  /**
   * @summary Gets detail of the specified voice test.
   *
   * @param {uuid} id The identifier of the voice test.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Object} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Object} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getVoiceTest(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
  getVoiceTest(id: string, callback: ServiceCallback<any>): void;
  getVoiceTest(id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


  /**
   * @summary Deletes the specified voice test.
   *
   * @param {uuid} id The identifier of the voice test.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ErrorContent>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteVoiceTestWithHttpOperationResponse(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorContent>>;

  /**
   * @summary Deletes the specified voice test.
   *
   * @param {uuid} id The identifier of the voice test.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ErrorContent} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ErrorContent} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ErrorContent} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteVoiceTest(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorContent>;
  deleteVoiceTest(id: string, callback: ServiceCallback<models.ErrorContent>): void;
  deleteVoiceTest(id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorContent>): void;


  /**
   * @summary Creates a new voice test.
   *
   * @param {object} voiceTestDefinition
   *
   * @param {string} voiceTestDefinition.text Information about the text used in
   * the voice test
   *
   * @param {object} voiceTestDefinition.model Information about the models used
   * in the voice test
   *
   * @param {uuid} voiceTestDefinition.model.id The identifier of this entity
   *
   * @param {string} voiceTestDefinition.voiceTestKind The kind of this test
   * (e.g. Text, SSML). Possible values include: 'None', 'Text', 'SSML'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ErrorContent>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createVoiceTestWithHttpOperationResponse(voiceTestDefinition: models.VoiceTestDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ErrorContent>>;

  /**
   * @summary Creates a new voice test.
   *
   * @param {object} voiceTestDefinition
   *
   * @param {string} voiceTestDefinition.text Information about the text used in
   * the voice test
   *
   * @param {object} voiceTestDefinition.model Information about the models used
   * in the voice test
   *
   * @param {uuid} voiceTestDefinition.model.id The identifier of this entity
   *
   * @param {string} voiceTestDefinition.voiceTestKind The kind of this test
   * (e.g. Text, SSML). Possible values include: 'None', 'Text', 'SSML'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ErrorContent} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ErrorContent} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ErrorContent} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createVoiceTest(voiceTestDefinition: models.VoiceTestDefinition, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ErrorContent>;
  createVoiceTest(voiceTestDefinition: models.VoiceTestDefinition, callback: ServiceCallback<models.ErrorContent>): void;
  createVoiceTest(voiceTestDefinition: models.VoiceTestDefinition, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorContent>): void;
}

export { SpeechServicesAPIv20, models as SpeechServicesAPIv20Models };
