/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as moment from "moment";

/**
 * @summary Dataset
 */
export interface Dataset {
  /**
   * The identifier of this entity
   */
  id: string;
  /**
   * The kind of the dataset (e.g. acoustic data, language data ...). Possible values include:
   * 'Acoustic', 'Language', 'Pronunciation', 'None', 'CustomVoice', 'LanguageGeneration'
   */
  dataImportKind: string;
  /**
   * The name of the object
   */
  name: string;
  /**
   * The description of the object
   */
  description?: string;
  /**
   * The custom properties of this entity
   */
  properties?: { [propertyName: string]: string };
  /**
   * The locale of the contained data
   */
  locale?: string;
  /**
   * The time-stamp when the object was created
   */
  createdDateTime: Date;
  /**
   * The time-stamp when the current status was entered
   */
  lastActionDateTime: Date;
  /**
   * The status of the object. Possible values include: 'Succeeded', 'Failed', 'NotStarted',
   * 'Running'
   */
  status: string;
}

/**
 * @summary Model
 */
export interface Model {
  /**
   * The identifier of this entity
   */
  id: string;
  /**
   * The base model used for adaptation
   */
  baseModel?: Model;
  /**
   * Datasets used for adaptation
   */
  datasets?: Dataset[];
  /**
   * The kind of this model (e.g. acoustic, language ...). Possible values include:
   * 'AcousticAndLanguage', 'None', 'Acoustic', 'Language', 'CustomVoice', 'LanguageGeneration',
   * 'Sentiment', 'LanguageIdentification'
   */
  modelKind: string;
  /**
   * The name of the object
   */
  name: string;
  /**
   * The description of the object
   */
  description?: string;
  /**
   * The custom properties of this entity
   */
  properties?: { [propertyName: string]: string };
  /**
   * The locale of the contained data
   */
  locale?: string;
  /**
   * The time-stamp when the object was created
   */
  createdDateTime: Date;
  /**
   * The time-stamp when the current status was entered
   */
  lastActionDateTime: Date;
  /**
   * The status of the object. Possible values include: 'Succeeded', 'Failed', 'NotStarted',
   * 'Running'
   */
  status: string;
}

/**
 * @summary Test
 */
export interface Test {
  /**
   * Information about the dataset used in the test
   */
  dataset?: Dataset;
  /**
   * The identifier of this entity
   */
  id: string;
  /**
   * The word error rate of the tested model
   */
  wordErrorRate: number;
  /**
   * The URL that can be used to download the test results.
   * Each line in the file represents a tab separated list of filename, reference transcription and
   * decoder output.
   *
   * The URL will only be valid, if the test completed successfully
   */
  resultsUrl?: string;
  /**
   * The time-stamp when the object was created
   */
  createdDateTime: Date;
  /**
   * The time-stamp when the current status was entered
   */
  lastActionDateTime: Date;
  /**
   * The status of the object. Possible values include: 'Succeeded', 'Failed', 'NotStarted',
   * 'Running'
   */
  status: string;
  /**
   * Information about the models used for this accuracy test
   */
  modelsProperty: Model[];
  /**
   * The name of the object
   */
  name: string;
  /**
   * The description of the object
   */
  description?: string;
  /**
   * The custom properties of this entity
   */
  properties?: { [propertyName: string]: string };
}

/**
 * @summary ErrorDetail
 * @description An array of implementations of this interface can be used as details for an error.
 */
export interface ErrorDetail {
  /**
   * A service-defined error code that should be human-readable.
   * This code serves as a more specific indicator of the error than
   * the HTTP error code specified in the response
   */
  code: string;
  /**
   * A human-readable representation of the error. It is intended as
   * an aid to developers and is not suitable for exposure to end users
   */
  message: string;
  /**
   * The target of the particular error (e.g., the name of the property in error)
   */
  target?: string;
}

/**
 * @summary InnerError
 * @description An implementation of this interface represents a stage in a stack trace.
 * If the error level is the root, the {Microsoft.SpeechServices.Common.Client.IInnerError.Code}
 * and the {Microsoft.SpeechServices.Common.Client.IInnerError.InnerError}
 * property may be omitted.
 */
export interface InnerError {
  /**
   * A service-defined error code that should be human-readable.
   * This code serves as a more specific indicator of the error than
   * the HTTP error code specified in the response
   */
  code?: string;
  /**
   * A human-readable representation of the error. It is intended as
   * an aid to developers and is not suitable for exposure to end users
   */
  innererror?: InnerError;
}

/**
 * @summary ErrorContent
 * @description The interface represents the content of an error response defined in the OneAPI
 * v2.1 documentation.
 */
export interface ErrorContent {
  /**
   * An array of details representing distinct related errors that occurred during the request
   */
  details?: ErrorDetail[];
  /**
   * The stack trace of the error. The payload is service-defined.
   * If the error is not at the root level, the object contains a Code
   * and an InnerError property
   */
  innererror?: InnerError;
  /**
   * A service-defined error code that should be human-readable.
   * This code serves as a more specific indicator of the error than
   * the HTTP error code specified in the response
   */
  code: string;
  /**
   * A human-readable representation of the error. It is intended as
   * an aid to developers and is not suitable for exposure to end users
   */
  message: string;
  /**
   * The target of the particular error (e.g., the name of the property in error)
   */
  target?: string;
}

/**
 * @summary DatasetIdentity
 */
export interface DatasetIdentity {
  /**
   * The identifier of this entity
   */
  id: string;
}

/**
 * @summary ModelIdentity
 */
export interface ModelIdentity {
  /**
   * The identifier of this entity
   */
  id: string;
}

/**
 * @summary TestDefinition
 */
export interface TestDefinition {
  /**
   * Information about the dataset used in the test
   */
  dataset: DatasetIdentity;
  /**
   * Information about the models used for this accuracy test
   */
  modelsProperty: ModelIdentity[];
  /**
   * The name of the object
   */
  name: string;
  /**
   * The description of the object
   */
  description?: string;
  /**
   * The custom properties of this entity
   */
  properties?: { [propertyName: string]: string };
}

/**
 * @summary TestUpdate
 */
export interface TestUpdate {
  /**
   * The name of the object
   */
  name: string;
  /**
   * The description of the object
   */
  description?: string;
}

/**
 * @summary DatasetUpdate
 */
export interface DatasetUpdate {
  /**
   * The name of the object
   */
  name: string;
  /**
   * The description of the object
   */
  description?: string;
}

/**
 * @summary Endpoint
 */
export interface Endpoint {
  /**
   * The number of concurrent recognitions the endpoint supports
   */
  concurrentRecognitions?: number;
  /**
   * The identifier of this entity
   */
  id: string;
  /**
   * The kind of this endpoint (e.g. custom speech, custom voice ...). Possible values include:
   * 'None', 'SpeechRecognition', 'CustomVoice', 'LanguageGeneration', 'LanguageIdentification'
   */
  endpointKind: string;
  /**
   * The list of endpoint urls
   */
  endpointUrls: { [propertyName: string]: string };
  /**
   * The time-stamp when the object was created
   */
  createdDateTime: Date;
  /**
   * The time-stamp when the current status was entered
   */
  lastActionDateTime: Date;
  /**
   * The status of the object. Possible values include: 'NotStarted', 'Running', 'Succeeded',
   * 'Failed'
   */
  status: string;
  /**
   * Information about the deployed models
   */
  modelsProperty: Model[];
  /**
   * A value indicating whether content logging (audio &amp; transcriptions) is being used for a
   * deployment.
   * Suppressing content logging will result in a higher cost for the deployment.
   * Free subscriptions can only deploy true
   */
  contentLoggingEnabled?: boolean;
  /**
   * The name of the object
   */
  name: string;
  /**
   * The description of the object
   */
  description?: string;
  /**
   * The custom properties of this entity
   */
  properties?: { [propertyName: string]: string };
  /**
   * The locale of the contained data
   */
  locale?: string;
}

/**
 * @summary SpeechEndpointDefinition
 */
export interface SpeechEndpointDefinition {
  /**
   * The number of concurrent recognitions the endpoint supports
   */
  concurrentRecognitions?: number;
  /**
   * Information about the deployed models
   */
  modelsProperty: ModelIdentity[];
  /**
   * A value indicating whether content logging (audio &amp; transcriptions) is being used for a
   * deployment.
   * Suppressing content logging will result in a higher cost for the deployment.
   * Free subscriptions can only deploy true
   */
  contentLoggingEnabled?: boolean;
  /**
   * The name of the object
   */
  name: string;
  /**
   * The description of the object
   */
  description?: string;
  /**
   * The custom properties of this entity
   */
  properties?: { [propertyName: string]: string };
  /**
   * The locale of the contained data
   */
  locale?: string;
}

/**
 * @summary EndpointUpdate
 */
export interface EndpointUpdate {
  /**
   * The name of the object
   */
  name: string;
  /**
   * The description of the object
   */
  description?: string;
}

/**
 * @summary EndpointData
 */
export interface EndpointData {
  /**
   * The identifier of this entity
   */
  id: string;
  /**
   * The resulting data Url for the model deployment
   */
  dataUrl?: string;
  /**
   * The time-stamp when the object was created
   */
  createdDateTime: Date;
  /**
   * The time-stamp when the current status was entered
   */
  lastActionDateTime: Date;
  /**
   * The status of the object. Possible values include: 'Succeeded', 'NotStarted', 'Running',
   * 'Failed'
   */
  status: string;
  /**
   * The start date of the demplyment data export
   */
  startDate: Date;
  /**
   * The end date of the demplyment data export
   */
  endDate: Date;
}

/**
 * @summary EndpointDataDefinition
 */
export interface EndpointDataDefinition {
  /**
   * The start date of the demplyment data export
   */
  startDate: Date;
  /**
   * The end date of the demplyment data export
   */
  endDate: Date;
}

/**
 * @summary SpeechModelDefinition
 */
export interface SpeechModelDefinition {
  /**
   * The text used to adapt this language model
   */
  text?: string;
  /**
   * The base model used for adaptation
   */
  baseModel?: ModelIdentity;
  /**
   * Datasets used for adaptation
   */
  datasets?: DatasetIdentity[];
  /**
   * The kind of this model (e.g. acoustic, language ...). Possible values include: 'None',
   * 'Acoustic', 'Language', 'AcousticAndLanguage', 'CustomVoice', 'LanguageGeneration',
   * 'Sentiment', 'LanguageIdentification'
   */
  modelKind: string;
  /**
   * The name of the object
   */
  name: string;
  /**
   * The description of the object
   */
  description?: string;
  /**
   * The custom properties of this entity
   */
  properties?: { [propertyName: string]: string };
  /**
   * The locale of the contained data
   */
  locale?: string;
}

/**
 * @summary ModelUpdate
 */
export interface ModelUpdate {
  /**
   * The name of the object
   */
  name: string;
  /**
   * The description of the object
   */
  description?: string;
}

/**
 * @summary WebHookConfigurationSecret
 */
export interface WebHookConfigurationSecret {
  /**
   * A secret that will be used to create a SHA1 hash of the payload with the secret as HMAC key.
   * This hash will be set as X-MicrosoftSpeechServices-Signature header when calling back into the
   * registered URL
   */
  secret?: string;
}

/**
 * @summary WebHookUpdate
 */
export interface WebHookUpdate {
  /**
   * The configuration of the web hook registration.
   *
   * If the property secret is omitted or contains an empty string in a POST or PATCH request,
   * no signature hash will be calculated.
   *
   * When retrieving web hook registration information from the service, the secret is always
   * omitted
   */
  configuration: WebHookConfigurationSecret;
  /**
   * A value indicating whether callbacks to the registered URL are made or not
   */
  active: boolean;
  /**
   * The name of the object
   */
  name: string;
  /**
   * The description of the object
   */
  description?: string;
}

/**
 * @summary Transcription
 */
export interface Transcription {
  recordingsUrl: string;
  /**
   * The identifier of this entity
  */
  id: string;
  modelsProperty: Model[];
  /**
   * The locale of the contained data
  */
  locale?: string;
  /**
   * The results Urls for the transcription
  */
  resultsUrls?: { [propertyName: string]: string };
  /**
   * The failure reason for the transcription
  */
  statusMessage?: string;
  /**
   * The time-stamp when the object was created
  */
  createdDateTime: Date;
  /**
   * The time-stamp when the current status was entered
  */
  lastActionDateTime: Date;
  /**
   * The status of the object. Possible values include: 'Succeeded', 'NotStarted', 'Running',
   * 'Failed'
  */
  status: string;
  /**
   * The name of the object
  */
  name: string;
  /**
   * The description of the object
  */
  description?: string;
  /**
   * The custom properties of this entity
  */
  properties?: { [propertyName: string]: string };
}

/**
 * @summary TranscriptionDefinition
*/
export interface TranscriptionDefinition {
  recordingsUrl: string;
  modelsProperty?: ModelIdentity[];
  /**
   * The locale of the contained data
  */
  locale?: string;
  /**
   * The name of the object
  */
  name: string;
  /**
   * The description of the object
  */
  description?: string;
  /**
   * The custom properties of this entity
  */
  properties?: { [propertyName: string]: string };
}

/**
 * @summary TranscriptionUpdate
*/
export interface TranscriptionUpdate {
  /**
   * The name of the object
  */
  name: string;
  /**
   * The description of the object
  */
  description?: string;
}

/**
 * @summary EndpointDefinition
*/
export interface EndpointDefinition {
  /**
   * The number of concurrent recognitions the endpoint supports
  */
  concurrentRecognitions?: number;
  /**
   * Information about the deployed models
  */
  modelsProperty: ModelIdentity[];
  /**
   * A value indicating whether content logging (audio &amp; transcriptions) is being used for a
   * deployment.
   * Suppressing content logging will result in a higher cost for the deployment.
   * Free subscriptions can only deploy true
  */
  contentLoggingEnabled?: boolean;
  /**
   * The name of the object
  */
  name: string;
  /**
   * The description of the object
  */
  description?: string;
  /**
   * The custom properties of this entity
  */
  properties?: { [propertyName: string]: string };
  /**
   * The locale of the contained data
  */
  locale?: string;
}

/**
 * @summary ModelDefinition
*/
export interface ModelDefinition {
  /**
   * The text used to adapt this language model
  */
  text?: string;
  /**
   * The base model used for adaptation
  */
  baseModel?: ModelIdentity;
  /**
   * Datasets used for adaptation
  */
  datasets?: DatasetIdentity[];
  /**
   * The kind of this model (e.g. acoustic, language ...). Possible values include: 'Acoustic',
   * 'AcousticAndLanguage', 'Language', 'None', 'CustomVoice', 'LanguageGeneration', 'Sentiment',
   * 'LanguageIdentification'
  */
  modelKind: string;
  /**
   * The name of the object
  */
  name: string;
  /**
   * The description of the object
  */
  description?: string;
  /**
   * The custom properties of this entity
  */
  properties?: { [propertyName: string]: string };
  /**
   * The locale of the contained data
  */
  locale?: string;
}

/**
 * @summary Component
*/
export interface Component {
  name?: string;
  type?: string;
  /**
   * Possible values include: 'Healthy', 'Sick', 'Error'
  */
  status?: string;
  message?: string;
}

/**
 * @summary HealthStatusResponse
*/
export interface HealthStatusResponse {
  /**
   * Possible values include: 'Healthy', 'Sick', 'Error'
  */
  status?: string;
  message?: string;
  components?: Component[];
}

/**
 * @summary DatasetDefinition
*/
export interface DatasetDefinition {
  /**
   * The kind of the dataset (e.g. acoustic data, language data ...). Possible values include:
   * 'None', 'Language', 'Acoustic', 'Pronunciation', 'CustomVoice', 'LanguageGeneration'
  */
  dataImportKind: string;
  /**
   * The name of the object
  */
  name: string;
  /**
   * The description of the object
  */
  description?: string;
  /**
   * The custom properties of this entity
  */
  properties?: { [propertyName: string]: string };
  /**
   * The locale of the contained data
  */
  locale?: string;
}

/**
 * @summary VoiceTest
*/
export interface VoiceTest {
  /**
   * The identifier of this entity
  */
  id: string;
  /**
   * The audio URI of the voice test
  */
  audioUri?: string;
  /**
   * The text URI of the voice test
  */
  textUri: string;
  /**
   * The time-stamp when the object was created
  */
  createdDateTime: Date;
  /**
   * The time-stamp when the current status was entered
  */
  lastActionDateTime: Date;
  /**
   * The status of the object. Possible values include: 'Succeeded', 'NotStarted', 'Running',
   * 'Failed'
  */
  status: string;
  /**
   * Information about the models used in the voice test
  */
  model: Model;
  /**
   * The kind of this test (e.g. Text, SSML). Possible values include: 'None', 'Text', 'SSML'
  */
  voiceTestKind: string;
}

/**
 * @summary VoiceTestDefinition
*/
export interface VoiceTestDefinition {
  /**
   * Information about the text used in the voice test
  */
  text: string;
  /**
   * Information about the models used in the voice test
  */
  model: ModelIdentity;
  /**
   * The kind of this test (e.g. Text, SSML). Possible values include: 'None', 'Text', 'SSML'
  */
  voiceTestKind: string;
}

/**
 * @summary IReadOnlyDictionary`2
*/
export interface GetSupportedLocalesForDatasetsOKResponse {
  none?: string[];
  language?: string[];
  acoustic?: string[];
  pronunciation?: string[];
  customVoice?: string[];
  languageGeneration?: string[];
}

/**
 * @summary IReadOnlyDictionary`2
*/
export interface GetSupportedLocalesForModelsOKResponse {
  none?: string[];
  acoustic?: string[];
  language?: string[];
  acousticAndLanguage?: string[];
  customVoice?: string[];
  languageGeneration?: string[];
  sentiment?: string[];
  languageIdentification?: string[];
}
