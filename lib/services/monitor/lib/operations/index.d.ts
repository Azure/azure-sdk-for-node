/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as moment from 'moment';
import * as models from '../models';


/**
 * @class
 * UsageMetrics
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MonitorClient.
 */
export interface UsageMetrics {


    /**
     * The List operation lists the usage metrics for the resource.<br>**WARNING**:
     * This operation will be *deprecated* in the next release.
     *
     * @param {string} resourceUri The identifier of the resource.
     *
     * @param {string} apiVersion Client Api Version. NOTE: This is not a client
     * property, it must be explicit in the call and there is no default value.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply on the
     * operation.<br>**WARNING**: $filter not documented since the operation will
     * be deprecated in the next release.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<UsageMetricCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceUri: string, apiVersion: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.UsageMetricCollection>>;

    /**
     * The List operation lists the usage metrics for the resource.<br>**WARNING**:
     * This operation will be *deprecated* in the next release.
     *
     * @param {string} resourceUri The identifier of the resource.
     *
     * @param {string} apiVersion Client Api Version. NOTE: This is not a client
     * property, it must be explicit in the call and there is no default value.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply on the
     * operation.<br>**WARNING**: $filter not documented since the operation will
     * be deprecated in the next release.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {UsageMetricCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {UsageMetricCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link UsageMetricCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceUri: string, apiVersion: string, options?: { filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.UsageMetricCollection>;
    list(resourceUri: string, apiVersion: string, callback: ServiceCallback<models.UsageMetricCollection>): void;
    list(resourceUri: string, apiVersion: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UsageMetricCollection>): void;
}

/**
 * @class
 * ActivityLogs
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MonitorClient.
 */
export interface ActivityLogs {


    /**
     * Provides the list of records from the activity logs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] Reduces the set of data collected.<br>The
     * **$filter** argument is very restricted and allows only the following
     * patterns.<br>- *List events for a resource group*: $filter=eventTimestamp ge
     * '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
     * '2014-07-20T04:36:37.6407898Z' and resourceGroupName eq
     * 'resourceGroupName'.<br>- *List events for resource*: $filter=eventTimestamp
     * ge '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
     * '2014-07-20T04:36:37.6407898Z' and resourceUri eq 'resourceURI'.<br>- *List
     * events for a subscription in a time range*: $filter=eventTimestamp ge
     * '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
     * '2014-07-20T04:36:37.6407898Z'.<br>- *List events for a resource provider*:
     * $filter=eventTimestamp ge '2014-07-16T04:36:37.6407898Z' and eventTimestamp
     * le '2014-07-20T04:36:37.6407898Z' and resourceProvider eq
     * 'resourceProviderName'.<br>- *List events for a correlation Id*:
     * $filter=eventTimestamp ge '2014-07-16T04:36:37.6407898Z' and eventTimestamp
     * le '2014-07-20T04:36:37.6407898Z' and correlationId eq
     * 'correlationID'.<br><br>**NOTE**: No other syntax is allowed.
     *
     * @param {string} [options.select] Used to fetch events with only the given
     * properties.<br>The **$select** argument is a comma separated list of
     * property names to be returned. Possible values are: *authorization*,
     * *claims*, *correlationId*, *description*, *eventDataId*, *eventName*,
     * *eventTimestamp*, *httpRequest*, *level*, *operationId*, *operationName*,
     * *properties*, *resourceGroupName*, *resourceProviderName*, *resourceId*,
     * *status*, *submissionTimestamp*, *subStatus*, *subscriptionId*
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventDataCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { filter? : string, select? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventDataCollection>>;

    /**
     * Provides the list of records from the activity logs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] Reduces the set of data collected.<br>The
     * **$filter** argument is very restricted and allows only the following
     * patterns.<br>- *List events for a resource group*: $filter=eventTimestamp ge
     * '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
     * '2014-07-20T04:36:37.6407898Z' and resourceGroupName eq
     * 'resourceGroupName'.<br>- *List events for resource*: $filter=eventTimestamp
     * ge '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
     * '2014-07-20T04:36:37.6407898Z' and resourceUri eq 'resourceURI'.<br>- *List
     * events for a subscription in a time range*: $filter=eventTimestamp ge
     * '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
     * '2014-07-20T04:36:37.6407898Z'.<br>- *List events for a resource provider*:
     * $filter=eventTimestamp ge '2014-07-16T04:36:37.6407898Z' and eventTimestamp
     * le '2014-07-20T04:36:37.6407898Z' and resourceProvider eq
     * 'resourceProviderName'.<br>- *List events for a correlation Id*:
     * $filter=eventTimestamp ge '2014-07-16T04:36:37.6407898Z' and eventTimestamp
     * le '2014-07-20T04:36:37.6407898Z' and correlationId eq
     * 'correlationID'.<br><br>**NOTE**: No other syntax is allowed.
     *
     * @param {string} [options.select] Used to fetch events with only the given
     * properties.<br>The **$select** argument is a comma separated list of
     * property names to be returned. Possible values are: *authorization*,
     * *claims*, *correlationId*, *description*, *eventDataId*, *eventName*,
     * *eventTimestamp*, *httpRequest*, *level*, *operationId*, *operationName*,
     * *properties*, *resourceGroupName*, *resourceProviderName*, *resourceId*,
     * *status*, *submissionTimestamp*, *subStatus*, *subscriptionId*
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventDataCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventDataCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventDataCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { filter? : string, select? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.EventDataCollection>;
    list(callback: ServiceCallback<models.EventDataCollection>): void;
    list(options: { filter? : string, select? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventDataCollection>): void;


    /**
     * Provides the list of records from the activity logs.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventDataCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventDataCollection>>;

    /**
     * Provides the list of records from the activity logs.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventDataCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventDataCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventDataCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EventDataCollection>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.EventDataCollection>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventDataCollection>): void;
}

/**
 * @class
 * EventCategories
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MonitorClient.
 */
export interface EventCategories {


    /**
     * Get the list of available event categories supported in the Activity Logs
     * Service.<br>The current list includes the following: Administrative,
     * Security, ServiceHealth, Alert, Recommendation, Policy.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventCategoryCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventCategoryCollection>>;

    /**
     * Get the list of available event categories supported in the Activity Logs
     * Service.<br>The current list includes the following: Administrative,
     * Security, ServiceHealth, Alert, Recommendation, Policy.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventCategoryCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventCategoryCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventCategoryCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EventCategoryCollection>;
    list(callback: ServiceCallback<models.EventCategoryCollection>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventCategoryCollection>): void;
}

/**
 * @class
 * TenantActivityLogs
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MonitorClient.
 */
export interface TenantActivityLogs {


    /**
     * Gets the Activity Logs for the Tenant.<br>Everything that is applicable to
     * the API to get the Activity Logs for the subscription is applicable to this
     * API (the parameters, $filter, etc.).<br>One thing to point out here is that
     * this API does *not* retrieve the logs at the individual subscription of the
     * tenant but only surfaces the logs that were generated at the tenant level.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] Reduces the set of data collected. <br>The
     * **$filter** is very restricted and allows only the following patterns.<br>-
     * List events for a resource group: $filter=eventTimestamp ge '<Start Time>'
     * and eventTimestamp le '<End Time>' and eventChannels eq 'Admin, Operation'
     * and resourceGroupName eq '<ResourceGroupName>'.<br>- List events for
     * resource: $filter=eventTimestamp ge '<Start Time>' and eventTimestamp le
     * '<End Time>' and eventChannels eq 'Admin, Operation' and resourceUri eq
     * '<ResourceURI>'.<br>- List events for a subscription: $filter=eventTimestamp
     * ge '<Start Time>' and eventTimestamp le '<End Time>' and eventChannels eq
     * 'Admin, Operation'.<br>- List events for a resource provider:
     * $filter=eventTimestamp ge '<Start Time>' and eventTimestamp le '<End Time>'
     * and eventChannels eq 'Admin, Operation' and resourceProvider eq
     * '<ResourceProviderName>'.<br>- List events for a correlation Id:
     * api-version=2014-04-01&$filter=eventTimestamp ge
     * '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
     * '2014-07-20T04:36:37.6407898Z' and eventChannels eq 'Admin, Operation' and
     * correlationId eq '<CorrelationID>'.<br>**NOTE**: No other syntax is allowed.
     *
     * @param {string} [options.select] Used to fetch events with only the given
     * properties.<br>The **$select** argument is a comma separated list of
     * property names to be returned. Possible values are: *authorization*,
     * *claims*, *correlationId*, *description*, *eventDataId*, *eventName*,
     * *eventTimestamp*, *httpRequest*, *level*, *operationId*, *operationName*,
     * *properties*, *resourceGroupName*, *resourceProviderName*, *resourceId*,
     * *status*, *submissionTimestamp*, *subStatus*, *subscriptionId*
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventDataCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { filter? : string, select? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventDataCollection>>;

    /**
     * Gets the Activity Logs for the Tenant.<br>Everything that is applicable to
     * the API to get the Activity Logs for the subscription is applicable to this
     * API (the parameters, $filter, etc.).<br>One thing to point out here is that
     * this API does *not* retrieve the logs at the individual subscription of the
     * tenant but only surfaces the logs that were generated at the tenant level.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] Reduces the set of data collected. <br>The
     * **$filter** is very restricted and allows only the following patterns.<br>-
     * List events for a resource group: $filter=eventTimestamp ge '<Start Time>'
     * and eventTimestamp le '<End Time>' and eventChannels eq 'Admin, Operation'
     * and resourceGroupName eq '<ResourceGroupName>'.<br>- List events for
     * resource: $filter=eventTimestamp ge '<Start Time>' and eventTimestamp le
     * '<End Time>' and eventChannels eq 'Admin, Operation' and resourceUri eq
     * '<ResourceURI>'.<br>- List events for a subscription: $filter=eventTimestamp
     * ge '<Start Time>' and eventTimestamp le '<End Time>' and eventChannels eq
     * 'Admin, Operation'.<br>- List events for a resource provider:
     * $filter=eventTimestamp ge '<Start Time>' and eventTimestamp le '<End Time>'
     * and eventChannels eq 'Admin, Operation' and resourceProvider eq
     * '<ResourceProviderName>'.<br>- List events for a correlation Id:
     * api-version=2014-04-01&$filter=eventTimestamp ge
     * '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
     * '2014-07-20T04:36:37.6407898Z' and eventChannels eq 'Admin, Operation' and
     * correlationId eq '<CorrelationID>'.<br>**NOTE**: No other syntax is allowed.
     *
     * @param {string} [options.select] Used to fetch events with only the given
     * properties.<br>The **$select** argument is a comma separated list of
     * property names to be returned. Possible values are: *authorization*,
     * *claims*, *correlationId*, *description*, *eventDataId*, *eventName*,
     * *eventTimestamp*, *httpRequest*, *level*, *operationId*, *operationName*,
     * *properties*, *resourceGroupName*, *resourceProviderName*, *resourceId*,
     * *status*, *submissionTimestamp*, *subStatus*, *subscriptionId*
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventDataCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventDataCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventDataCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { filter? : string, select? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.EventDataCollection>;
    list(callback: ServiceCallback<models.EventDataCollection>): void;
    list(options: { filter? : string, select? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventDataCollection>): void;


    /**
     * Gets the Activity Logs for the Tenant.<br>Everything that is applicable to
     * the API to get the Activity Logs for the subscription is applicable to this
     * API (the parameters, $filter, etc.).<br>One thing to point out here is that
     * this API does *not* retrieve the logs at the individual subscription of the
     * tenant but only surfaces the logs that were generated at the tenant level.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EventDataCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EventDataCollection>>;

    /**
     * Gets the Activity Logs for the Tenant.<br>Everything that is applicable to
     * the API to get the Activity Logs for the subscription is applicable to this
     * API (the parameters, $filter, etc.).<br>One thing to point out here is that
     * this API does *not* retrieve the logs at the individual subscription of the
     * tenant but only surfaces the logs that were generated at the tenant level.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EventDataCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EventDataCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EventDataCollection} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EventDataCollection>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.EventDataCollection>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EventDataCollection>): void;
}

/**
 * @class
 * MetricDefinitions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MonitorClient.
 */
export interface MetricDefinitions {


    /**
     * Lists the metric definitions for the resource.
     *
     * @param {string} resourceUri The identifier of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MetricDefinitionCollection>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceUri: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MetricDefinitionCollection>>;

    /**
     * Lists the metric definitions for the resource.
     *
     * @param {string} resourceUri The identifier of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MetricDefinitionCollection} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MetricDefinitionCollection} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MetricDefinitionCollection} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceUri: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.MetricDefinitionCollection>;
    list(resourceUri: string, callback: ServiceCallback<models.MetricDefinitionCollection>): void;
    list(resourceUri: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricDefinitionCollection>): void;
}

/**
 * @class
 * Metrics
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MonitorClient.
 */
export interface Metrics {


    /**
     * **Lists the metric values for a resource**.
     *
     * @param {string} resourceUri The identifier of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.timespan] The timespan of the query. It is a string
     * with the following format 'startDateTime_ISO/endDateTime_ISO'.
     *
     * @param {moment.duration} [options.interval] The interval (i.e. timegrain) of
     * the query.
     *
     * @param {string} [options.metric] The name of the metric to retrieve.
     *
     * @param {string} [options.aggregation] The list of aggregation types (comma
     * separated) to retrieve.
     *
     * @param {number} [options.top] The maximum number of records to retrieve.
     * Valid only if $filter is specified.
     * Defaults to 10.
     *
     * @param {string} [options.orderby] The aggregation to use for sorting results
     * and the direction of the sort.
     * Only one order can be specified.
     * Examples: sum asc.
     *
     * @param {string} [options.filter] The **$filter** is used to reduce the set
     * of metric data returned.<br>Example:<br>Metric contains metadata A, B and
     * C.<br>- Return all time series of C where A = a1 and B = b1 or
     * b2<br>**$filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**<br>-
     * Invalid variant:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B =
     * ‘b2’**<br>This is invalid because the logical or operator cannot separate
     * two different metadata names.<br>- Return all time series where A = a1, B =
     * b1 and C = c1:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>-
     * Return all time series where A = a1<br>**$filter=A eq ‘a1’ and B eq ‘*’ and
     * C eq ‘*’**.
     *
     * @param {string} [options.resultType] Reduces the set of data collected. The
     * syntax allowed depends on the operation. See the operation's description for
     * details. Possible values include: 'Data', 'Metadata'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Response>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceUri: string, options?: { timespan? : string, interval? : moment.Duration, metric? : string, aggregation? : string, top? : number, orderby? : string, filter? : string, resultType? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Response>>;

    /**
     * **Lists the metric values for a resource**.
     *
     * @param {string} resourceUri The identifier of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.timespan] The timespan of the query. It is a string
     * with the following format 'startDateTime_ISO/endDateTime_ISO'.
     *
     * @param {moment.duration} [options.interval] The interval (i.e. timegrain) of
     * the query.
     *
     * @param {string} [options.metric] The name of the metric to retrieve.
     *
     * @param {string} [options.aggregation] The list of aggregation types (comma
     * separated) to retrieve.
     *
     * @param {number} [options.top] The maximum number of records to retrieve.
     * Valid only if $filter is specified.
     * Defaults to 10.
     *
     * @param {string} [options.orderby] The aggregation to use for sorting results
     * and the direction of the sort.
     * Only one order can be specified.
     * Examples: sum asc.
     *
     * @param {string} [options.filter] The **$filter** is used to reduce the set
     * of metric data returned.<br>Example:<br>Metric contains metadata A, B and
     * C.<br>- Return all time series of C where A = a1 and B = b1 or
     * b2<br>**$filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**<br>-
     * Invalid variant:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B =
     * ‘b2’**<br>This is invalid because the logical or operator cannot separate
     * two different metadata names.<br>- Return all time series where A = a1, B =
     * b1 and C = c1:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>-
     * Return all time series where A = a1<br>**$filter=A eq ‘a1’ and B eq ‘*’ and
     * C eq ‘*’**.
     *
     * @param {string} [options.resultType] Reduces the set of data collected. The
     * syntax allowed depends on the operation. See the operation's description for
     * details. Possible values include: 'Data', 'Metadata'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Response} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Response} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Response} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceUri: string, options?: { timespan? : string, interval? : moment.Duration, metric? : string, aggregation? : string, top? : number, orderby? : string, filter? : string, resultType? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Response>;
    list(resourceUri: string, callback: ServiceCallback<models.Response>): void;
    list(resourceUri: string, options: { timespan? : string, interval? : moment.Duration, metric? : string, aggregation? : string, top? : number, orderby? : string, filter? : string, resultType? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Response>): void;
}
