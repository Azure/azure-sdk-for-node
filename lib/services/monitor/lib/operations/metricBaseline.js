/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const WebResource = msRest.WebResource;
const moment = require('moment');

/**
 * **Gets the baseline values for a specific metric**.
 *
 * @param {string} resourceUri The identifier of the resource. It has the
 * following structure:
 * subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceName}.
 * For example:
 * subscriptions/b368ca2f-e298-46b7-b0ab-012281956afa/resourceGroups/vms/providers/Microsoft.Compute/virtualMachines/vm1
 *
 * @param {string} metricName The name of the metric to retrieve the baseline
 * for.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.timespan] The timespan of the query. It is a string
 * with the following format 'startDateTime_ISO/endDateTime_ISO'.
 *
 * @param {moment.duration} [options.interval] The interval (i.e. timegrain) of
 * the query.
 *
 * @param {string} [options.aggregation] The aggregation type of the metric to
 * retrieve the baseline for.
 *
 * @param {string} [options.sensitivities] The list of sensitivities (comma
 * separated) to retrieve.
 *
 * @param {string} [options.resultType] Allows retrieving only metadata of the
 * baseline. On data request all information is retrieved. Possible values
 * include: 'Data', 'Metadata'
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link BaselineResponse} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _get(resourceUri, metricName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let timespan = (options && options.timespan !== undefined) ? options.timespan : undefined;
  let interval = (options && options.interval !== undefined) ? options.interval : undefined;
  let aggregation = (options && options.aggregation !== undefined) ? options.aggregation : undefined;
  let sensitivities = (options && options.sensitivities !== undefined) ? options.sensitivities : undefined;
  let resultType = (options && options.resultType !== undefined) ? options.resultType : undefined;
  let apiVersion = '2017-11-01-preview';
  // Validate
  try {
    if (resourceUri === null || resourceUri === undefined || typeof resourceUri.valueOf() !== 'string') {
      throw new Error('resourceUri cannot be null or undefined and it must be of type string.');
    }
    if (metricName === null || metricName === undefined || typeof metricName.valueOf() !== 'string') {
      throw new Error('metricName cannot be null or undefined and it must be of type string.');
    }
    if (timespan !== null && timespan !== undefined && typeof timespan.valueOf() !== 'string') {
      throw new Error('timespan must be of type string.');
    }
    if(interval && !moment.isDuration(interval)) {
      throw new Error('interval must be of type moment.duration.');
    }
    if (aggregation !== null && aggregation !== undefined && typeof aggregation.valueOf() !== 'string') {
      throw new Error('aggregation must be of type string.');
    }
    if (sensitivities !== null && sensitivities !== undefined && typeof sensitivities.valueOf() !== 'string') {
      throw new Error('sensitivities must be of type string.');
    }
    if (resultType) {
      let allowedValues = [ 'Data', 'Metadata' ];
      if (!allowedValues.some( function(item) { return item === resultType; })) {
        throw new Error(resultType + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + '{resourceUri}/providers/microsoft.insights/baseline/{metricName}';
  requestUrl = requestUrl.replace('{resourceUri}', resourceUri);
  requestUrl = requestUrl.replace('{metricName}', encodeURIComponent(metricName));
  let queryParameters = [];
  if (timespan !== null && timespan !== undefined) {
    queryParameters.push('timespan=' + encodeURIComponent(timespan));
  }
  if (interval !== null && interval !== undefined) {
    queryParameters.push('interval=' + encodeURIComponent(interval.toISOString()));
  }
  if (aggregation !== null && aggregation !== undefined) {
    queryParameters.push('aggregation=' + encodeURIComponent(aggregation));
  }
  if (sensitivities !== null && sensitivities !== undefined) {
    queryParameters.push('sensitivities=' + encodeURIComponent(sensitivities));
  }
  if (resultType !== null && resultType !== undefined) {
    queryParameters.push('resultType=' + encodeURIComponent(resultType));
  }
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['BaselineResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * **Lists the baseline values for a resource**.
 *
 * @param {string} resourceUri The identifier of the resource. It has the
 * following structure:
 * subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceName}.
 * For example:
 * subscriptions/b368ca2f-e298-46b7-b0ab-012281956afa/resourceGroups/vms/providers/Microsoft.Compute/virtualMachines/vm1
 *
 * @param {object} timeSeriesInformation Information that need to be specified
 * to calculate a baseline on a time series.
 *
 * @param {array} timeSeriesInformation.sensitivities the list of sensitivities
 * for calculating the baseline.
 *
 * @param {array} timeSeriesInformation.values The metric values to calculate
 * the baseline.
 *
 * @param {array} [timeSeriesInformation.timestamps] the array of timestamps of
 * the baselines.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link CalculateBaselineResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _calculateBaseline(resourceUri, timeSeriesInformation, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2017-11-01-preview';
  // Validate
  try {
    if (resourceUri === null || resourceUri === undefined || typeof resourceUri.valueOf() !== 'string') {
      throw new Error('resourceUri cannot be null or undefined and it must be of type string.');
    }
    if (timeSeriesInformation === null || timeSeriesInformation === undefined) {
      throw new Error('timeSeriesInformation cannot be null or undefined.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + '{resourceUri}/providers/microsoft.insights/calculatebaseline';
  requestUrl = requestUrl.replace('{resourceUri}', resourceUri);
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (timeSeriesInformation !== null && timeSeriesInformation !== undefined) {
      let requestModelMapper = new client.models['TimeSeriesInformation']().mapper();
      requestModel = client.serialize(requestModelMapper, timeSeriesInformation, 'timeSeriesInformation');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(timeSeriesInformation, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['CalculateBaselineResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a MetricBaseline. */
class MetricBaseline {
  /**
   * Create a MetricBaseline.
   * @param {MonitorManagementClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._get = _get;
    this._calculateBaseline = _calculateBaseline;
  }

  /**
   * **Gets the baseline values for a specific metric**.
   *
   * @param {string} resourceUri The identifier of the resource. It has the
   * following structure:
   * subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceName}.
   * For example:
   * subscriptions/b368ca2f-e298-46b7-b0ab-012281956afa/resourceGroups/vms/providers/Microsoft.Compute/virtualMachines/vm1
   *
   * @param {string} metricName The name of the metric to retrieve the baseline
   * for.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.timespan] The timespan of the query. It is a string
   * with the following format 'startDateTime_ISO/endDateTime_ISO'.
   *
   * @param {moment.duration} [options.interval] The interval (i.e. timegrain) of
   * the query.
   *
   * @param {string} [options.aggregation] The aggregation type of the metric to
   * retrieve the baseline for.
   *
   * @param {string} [options.sensitivities] The list of sensitivities (comma
   * separated) to retrieve.
   *
   * @param {string} [options.resultType] Allows retrieving only metadata of the
   * baseline. On data request all information is retrieved. Possible values
   * include: 'Data', 'Metadata'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<BaselineResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWithHttpOperationResponse(resourceUri, metricName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._get(resourceUri, metricName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * **Gets the baseline values for a specific metric**.
   *
   * @param {string} resourceUri The identifier of the resource. It has the
   * following structure:
   * subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceName}.
   * For example:
   * subscriptions/b368ca2f-e298-46b7-b0ab-012281956afa/resourceGroups/vms/providers/Microsoft.Compute/virtualMachines/vm1
   *
   * @param {string} metricName The name of the metric to retrieve the baseline
   * for.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.timespan] The timespan of the query. It is a string
   * with the following format 'startDateTime_ISO/endDateTime_ISO'.
   *
   * @param {moment.duration} [options.interval] The interval (i.e. timegrain) of
   * the query.
   *
   * @param {string} [options.aggregation] The aggregation type of the metric to
   * retrieve the baseline for.
   *
   * @param {string} [options.sensitivities] The list of sensitivities (comma
   * separated) to retrieve.
   *
   * @param {string} [options.resultType] Allows retrieving only metadata of the
   * baseline. On data request all information is retrieved. Possible values
   * include: 'Data', 'Metadata'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {BaselineResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link BaselineResponse} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  get(resourceUri, metricName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._get(resourceUri, metricName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._get(resourceUri, metricName, options, optionalCallback);
    }
  }

  /**
   * **Lists the baseline values for a resource**.
   *
   * @param {string} resourceUri The identifier of the resource. It has the
   * following structure:
   * subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceName}.
   * For example:
   * subscriptions/b368ca2f-e298-46b7-b0ab-012281956afa/resourceGroups/vms/providers/Microsoft.Compute/virtualMachines/vm1
   *
   * @param {object} timeSeriesInformation Information that need to be specified
   * to calculate a baseline on a time series.
   *
   * @param {array} timeSeriesInformation.sensitivities the list of sensitivities
   * for calculating the baseline.
   *
   * @param {array} timeSeriesInformation.values The metric values to calculate
   * the baseline.
   *
   * @param {array} [timeSeriesInformation.timestamps] the array of timestamps of
   * the baselines.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CalculateBaselineResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  calculateBaselineWithHttpOperationResponse(resourceUri, timeSeriesInformation, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._calculateBaseline(resourceUri, timeSeriesInformation, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * **Lists the baseline values for a resource**.
   *
   * @param {string} resourceUri The identifier of the resource. It has the
   * following structure:
   * subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceName}.
   * For example:
   * subscriptions/b368ca2f-e298-46b7-b0ab-012281956afa/resourceGroups/vms/providers/Microsoft.Compute/virtualMachines/vm1
   *
   * @param {object} timeSeriesInformation Information that need to be specified
   * to calculate a baseline on a time series.
   *
   * @param {array} timeSeriesInformation.sensitivities the list of sensitivities
   * for calculating the baseline.
   *
   * @param {array} timeSeriesInformation.values The metric values to calculate
   * the baseline.
   *
   * @param {array} [timeSeriesInformation.timestamps] the array of timestamps of
   * the baselines.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {CalculateBaselineResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CalculateBaselineResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  calculateBaseline(resourceUri, timeSeriesInformation, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._calculateBaseline(resourceUri, timeSeriesInformation, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._calculateBaseline(resourceUri, timeSeriesInformation, options, optionalCallback);
    }
  }

}

module.exports = MetricBaseline;
