/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const WebResource = msRest.WebResource;

/**
 * Provides the list of records from the activity logs.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.filter] Reduces the set of data collected.<br>The
 * **$filter** argument is very restricted and allows only the following
 * patterns.<br>- *List events for a resource group*: $filter=eventTimestamp ge
 * '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
 * '2014-07-20T04:36:37.6407898Z' and resourceGroupName eq
 * 'resourceGroupName'.<br>- *List events for resource*: $filter=eventTimestamp
 * ge '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
 * '2014-07-20T04:36:37.6407898Z' and resourceUri eq 'resourceURI'.<br>- *List
 * events for a subscription in a time range*: $filter=eventTimestamp ge
 * '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
 * '2014-07-20T04:36:37.6407898Z'.<br>- *List events for a resource provider*:
 * $filter=eventTimestamp ge '2014-07-16T04:36:37.6407898Z' and eventTimestamp
 * le '2014-07-20T04:36:37.6407898Z' and resourceProvider eq
 * 'resourceProviderName'.<br>- *List events for a correlation Id*:
 * $filter=eventTimestamp ge '2014-07-16T04:36:37.6407898Z' and eventTimestamp
 * le '2014-07-20T04:36:37.6407898Z' and correlationId eq
 * 'correlationID'.<br><br>**NOTE**: No other syntax is allowed.
 *
 * @param {string} [options.select] Used to fetch events with only the given
 * properties.<br>The **$select** argument is a comma separated list of
 * property names to be returned. Possible values are: *authorization*,
 * *claims*, *correlationId*, *description*, *eventDataId*, *eventName*,
 * *eventTimestamp*, *httpRequest*, *level*, *operationId*, *operationName*,
 * *properties*, *resourceGroupName*, *resourceProviderName*, *resourceId*,
 * *status*, *submissionTimestamp*, *subStatus*, *subscriptionId*
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link EventDataCollection} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _list(options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let filter = (options && options.filter !== undefined) ? options.filter : undefined;
  let select = (options && options.select !== undefined) ? options.select : undefined;
  let apiVersion = '2015-04-01';
  // Validate
  try {
    if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {
      throw new Error('filter must be of type string.');
    }
    if (select !== null && select !== undefined && typeof select.valueOf() !== 'string') {
      throw new Error('select must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/microsoft.insights/eventtypes/management/values';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (filter !== null && filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(filter));
  }
  if (select !== null && select !== undefined) {
    queryParameters.push('$select=' + encodeURIComponent(select));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['EventDataCollection']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Provides the list of records from the activity logs.
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link EventDataCollection} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listNext(nextPageLink, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
      throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let requestUrl = '{nextLink}';
  requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['EventDataCollection']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a ActivityLogs. */
class ActivityLogs {
  /**
   * Create a ActivityLogs.
   * @param {MonitorManagementClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._list = _list;
    this._listNext = _listNext;
  }

  /**
   * Provides the list of records from the activity logs.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.filter] Reduces the set of data collected.<br>The
   * **$filter** argument is very restricted and allows only the following
   * patterns.<br>- *List events for a resource group*: $filter=eventTimestamp ge
   * '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
   * '2014-07-20T04:36:37.6407898Z' and resourceGroupName eq
   * 'resourceGroupName'.<br>- *List events for resource*: $filter=eventTimestamp
   * ge '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
   * '2014-07-20T04:36:37.6407898Z' and resourceUri eq 'resourceURI'.<br>- *List
   * events for a subscription in a time range*: $filter=eventTimestamp ge
   * '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
   * '2014-07-20T04:36:37.6407898Z'.<br>- *List events for a resource provider*:
   * $filter=eventTimestamp ge '2014-07-16T04:36:37.6407898Z' and eventTimestamp
   * le '2014-07-20T04:36:37.6407898Z' and resourceProvider eq
   * 'resourceProviderName'.<br>- *List events for a correlation Id*:
   * $filter=eventTimestamp ge '2014-07-16T04:36:37.6407898Z' and eventTimestamp
   * le '2014-07-20T04:36:37.6407898Z' and correlationId eq
   * 'correlationID'.<br><br>**NOTE**: No other syntax is allowed.
   *
   * @param {string} [options.select] Used to fetch events with only the given
   * properties.<br>The **$select** argument is a comma separated list of
   * property names to be returned. Possible values are: *authorization*,
   * *claims*, *correlationId*, *description*, *eventDataId*, *eventName*,
   * *eventTimestamp*, *httpRequest*, *level*, *operationId*, *operationName*,
   * *properties*, *resourceGroupName*, *resourceProviderName*, *resourceId*,
   * *status*, *submissionTimestamp*, *subStatus*, *subscriptionId*
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<EventDataCollection>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listWithHttpOperationResponse(options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._list(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Provides the list of records from the activity logs.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.filter] Reduces the set of data collected.<br>The
   * **$filter** argument is very restricted and allows only the following
   * patterns.<br>- *List events for a resource group*: $filter=eventTimestamp ge
   * '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
   * '2014-07-20T04:36:37.6407898Z' and resourceGroupName eq
   * 'resourceGroupName'.<br>- *List events for resource*: $filter=eventTimestamp
   * ge '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
   * '2014-07-20T04:36:37.6407898Z' and resourceUri eq 'resourceURI'.<br>- *List
   * events for a subscription in a time range*: $filter=eventTimestamp ge
   * '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
   * '2014-07-20T04:36:37.6407898Z'.<br>- *List events for a resource provider*:
   * $filter=eventTimestamp ge '2014-07-16T04:36:37.6407898Z' and eventTimestamp
   * le '2014-07-20T04:36:37.6407898Z' and resourceProvider eq
   * 'resourceProviderName'.<br>- *List events for a correlation Id*:
   * $filter=eventTimestamp ge '2014-07-16T04:36:37.6407898Z' and eventTimestamp
   * le '2014-07-20T04:36:37.6407898Z' and correlationId eq
   * 'correlationID'.<br><br>**NOTE**: No other syntax is allowed.
   *
   * @param {string} [options.select] Used to fetch events with only the given
   * properties.<br>The **$select** argument is a comma separated list of
   * property names to be returned. Possible values are: *authorization*,
   * *claims*, *correlationId*, *description*, *eventDataId*, *eventName*,
   * *eventTimestamp*, *httpRequest*, *level*, *operationId*, *operationName*,
   * *properties*, *resourceGroupName*, *resourceProviderName*, *resourceId*,
   * *status*, *submissionTimestamp*, *subStatus*, *subscriptionId*
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {EventDataCollection} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link EventDataCollection} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  list(options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._list(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._list(options, optionalCallback);
    }
  }

  /**
   * Provides the list of records from the activity logs.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<EventDataCollection>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listNextWithHttpOperationResponse(nextPageLink, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listNext(nextPageLink, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Provides the list of records from the activity logs.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {EventDataCollection} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link EventDataCollection} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listNext(nextPageLink, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listNext(nextPageLink, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listNext(nextPageLink, options, optionalCallback);
    }
  }

}

module.exports = ActivityLogs;
