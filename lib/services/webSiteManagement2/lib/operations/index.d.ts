/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback } from 'ms-rest';
import * as stream from 'stream';
import * as models from '../models';


/**
 * @class
 * CertificateOrders
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the WebSiteManagementClient.
 */
export interface CertificateOrders {

    /**
     * @summary Get certificate associated with the certificate order
     *
     * @param {string} resourceGroupName Azure resource group name
     * 
     * @param {string} certificateOrderName Certificate name
     * 
     * @param {string} name Certificate name
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getCertificate(resourceGroupName: string, certificateOrderName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateOrderCertificate>): void;
    getCertificate(resourceGroupName: string, certificateOrderName: string, name: string, callback: ServiceCallback<models.CertificateOrderCertificate>): void;

    /**
     * @summary Associates a Key Vault secret to a certificate store that will be
     * used for storing the certificate once it's ready
     *
     * @param {string} resourceGroupName Azure resource group name
     * 
     * @param {string} certificateOrderName Certificate name
     * 
     * @param {string} name Certificate name
     * 
     * @param {object} keyVaultCertificate Key Vault secret csm Id
     * 
     * @param {string} [keyVaultCertificate.keyVaultId] Key Vault Csm resource Id
     * 
     * @param {string} [keyVaultCertificate.keyVaultSecretName] Key Vault secret
     * name
     * 
     * @param {string} [keyVaultCertificate.provisioningState] Status of the Key
     * Vault secret. Possible values include: 'Initialized',
     * 'WaitingOnCertificateOrder', 'Succeeded', 'CertificateOrderFailed',
     * 'OperationNotPermittedOnKeyVault',
     * 'AzureServiceUnauthorizedToAccessKeyVault', 'KeyVaultDoesNotExist',
     * 'KeyVaultSecretDoesNotExist', 'UnknownError', 'Unknown'
     * 
     * @param {string} [keyVaultCertificate.id] Resource Id
     * 
     * @param {string} [keyVaultCertificate.name] Resource Name
     * 
     * @param {string} [keyVaultCertificate.kind] Kind of resource
     * 
     * @param {string} keyVaultCertificate.location Resource Location
     * 
     * @param {string} [keyVaultCertificate.type] Resource type
     * 
     * @param {object} [keyVaultCertificate.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateCertificate(resourceGroupName: string, certificateOrderName: string, name: string, keyVaultCertificate: models.CertificateOrderCertificate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateOrderCertificate>): void;
    createOrUpdateCertificate(resourceGroupName: string, certificateOrderName: string, name: string, keyVaultCertificate: models.CertificateOrderCertificate, callback: ServiceCallback<models.CertificateOrderCertificate>): void;

    /**
     * @summary Deletes the certificate associated with the certificate order
     *
     * @param {string} resourceGroupName Azure resource group name
     * 
     * @param {string} certificateOrderName Certificate name
     * 
     * @param {string} name Certificate name
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteCertificate(resourceGroupName: string, certificateOrderName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteCertificate(resourceGroupName: string, certificateOrderName: string, name: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Associates a Key Vault secret to a certificate store that will be
     * used for storing the certificate once it's ready
     *
     * @param {string} resourceGroupName Azure resource group name
     * 
     * @param {string} certificateOrderName Certificate name
     * 
     * @param {string} name Certificate name
     * 
     * @param {object} keyVaultCertificate Key Vault secret csm Id
     * 
     * @param {string} [keyVaultCertificate.keyVaultId] Key Vault Csm resource Id
     * 
     * @param {string} [keyVaultCertificate.keyVaultSecretName] Key Vault secret
     * name
     * 
     * @param {string} [keyVaultCertificate.provisioningState] Status of the Key
     * Vault secret. Possible values include: 'Initialized',
     * 'WaitingOnCertificateOrder', 'Succeeded', 'CertificateOrderFailed',
     * 'OperationNotPermittedOnKeyVault',
     * 'AzureServiceUnauthorizedToAccessKeyVault', 'KeyVaultDoesNotExist',
     * 'KeyVaultSecretDoesNotExist', 'UnknownError', 'Unknown'
     * 
     * @param {string} [keyVaultCertificate.id] Resource Id
     * 
     * @param {string} [keyVaultCertificate.name] Resource Name
     * 
     * @param {string} [keyVaultCertificate.kind] Kind of resource
     * 
     * @param {string} keyVaultCertificate.location Resource Location
     * 
     * @param {string} [keyVaultCertificate.type] Resource type
     * 
     * @param {object} [keyVaultCertificate.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateCertificate(resourceGroupName: string, certificateOrderName: string, name: string, keyVaultCertificate: models.CertificateOrderCertificate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateOrderCertificate>): void;
    updateCertificate(resourceGroupName: string, certificateOrderName: string, name: string, keyVaultCertificate: models.CertificateOrderCertificate, callback: ServiceCallback<models.CertificateOrderCertificate>): void;

    /**
     * @summary Get a certificate order
     *
     * @param {string} resourceGroupName Azure resource group name
     * 
     * @param {string} name Certificate name
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getCertificateOrder(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateOrder>): void;
    getCertificateOrder(resourceGroupName: string, name: string, callback: ServiceCallback<models.CertificateOrder>): void;

    /**
     * @summary Create or update a certificate purchase order
     *
     * @param {string} resourceGroupName Azure resource group name
     * 
     * @param {string} name Certificate name
     * 
     * @param {object} certificateDistinguishedName Distinguished name to be used
     * for purchasing certificate
     * 
     * @param {object} [certificateDistinguishedName.certificates] State of the
     * Key Vault secret
     * 
     * @param {string} [certificateDistinguishedName.distinguishedName]
     * Certificate distinguished name
     * 
     * @param {string} [certificateDistinguishedName.domainVerificationToken]
     * Domain Verification Token
     * 
     * @param {number} [certificateDistinguishedName.validityInYears] Duration in
     * years (must be between 1 and 3)
     * 
     * @param {number} [certificateDistinguishedName.keySize] Certificate Key Size
     * 
     * @param {string} [certificateDistinguishedName.productType] Certificate
     * product type. Possible values include: 'StandardDomainValidatedSsl',
     * 'StandardDomainValidatedWildCardSsl'
     * 
     * @param {boolean} [certificateDistinguishedName.autoRenew] Auto renew
     * 
     * @param {string} [certificateDistinguishedName.provisioningState] Status of
     * certificate order. Possible values include: 'Succeeded', 'Failed',
     * 'Canceled', 'InProgress', 'Deleting'
     * 
     * @param {string} [certificateDistinguishedName.status] Current order status.
     * Possible values include: 'Pendingissuance', 'Issued', 'Revoked',
     * 'Canceled', 'Denied', 'Pendingrevocation', 'PendingRekey', 'Unused',
     * 'Expired', 'NotSubmitted'
     * 
     * @param {object} [certificateDistinguishedName.signedCertificate] Signed
     * certificate
     * 
     * @param {string} [certificateDistinguishedName.csr] Last CSR that was
     * created for this order
     * 
     * @param {object} [certificateDistinguishedName.intermediate] Intermediate
     * certificate
     * 
     * @param {object} [certificateDistinguishedName.root] Root certificate
     * 
     * @param {number} [certificateDistinguishedName.root.version] Version
     * 
     * @param {string} [certificateDistinguishedName.root.serialNumber] Serial
     * Number
     * 
     * @param {string} [certificateDistinguishedName.root.thumbprint] Thumbprint
     * 
     * @param {string} [certificateDistinguishedName.root.subject] Subject
     * 
     * @param {date} [certificateDistinguishedName.root.notBefore] Valid from
     * 
     * @param {date} [certificateDistinguishedName.root.notAfter] Valid to
     * 
     * @param {string} [certificateDistinguishedName.root.signatureAlgorithm]
     * Signature Algorithm
     * 
     * @param {string} [certificateDistinguishedName.root.issuer] Issuer
     * 
     * @param {string} [certificateDistinguishedName.root.rawData] Raw certificate
     * data
     * 
     * @param {string} [certificateDistinguishedName.root.id] Resource Id
     * 
     * @param {string} [certificateDistinguishedName.root.name] Resource Name
     * 
     * @param {string} [certificateDistinguishedName.root.kind] Kind of resource
     * 
     * @param {string} certificateDistinguishedName.root.location Resource Location
     * 
     * @param {string} [certificateDistinguishedName.root.type] Resource type
     * 
     * @param {object} [certificateDistinguishedName.root.tags] Resource tags
     * 
     * @param {string} [certificateDistinguishedName.serialNumber] Current serial
     * number of the certificate
     * 
     * @param {date} [certificateDistinguishedName.lastCertificateIssuanceTime]
     * Certificate last issuance time
     * 
     * @param {date} [certificateDistinguishedName.expirationTime] Certificate
     * expiration time
     * 
     * @param {string} [certificateDistinguishedName.id] Resource Id
     * 
     * @param {string} [certificateDistinguishedName.name] Resource Name
     * 
     * @param {string} [certificateDistinguishedName.kind] Kind of resource
     * 
     * @param {string} certificateDistinguishedName.location Resource Location
     * 
     * @param {string} [certificateDistinguishedName.type] Resource type
     * 
     * @param {object} [certificateDistinguishedName.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateCertificateOrder(resourceGroupName: string, name: string, certificateDistinguishedName: models.CertificateOrder, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateOrder>): void;
    createOrUpdateCertificateOrder(resourceGroupName: string, name: string, certificateDistinguishedName: models.CertificateOrder, callback: ServiceCallback<models.CertificateOrder>): void;

    /**
     * @summary Delete an existing certificate order
     *
     * @param {string} resourceGroupName Azure resource group name
     * 
     * @param {string} name Certificate name
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteCertificateOrder(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteCertificateOrder(resourceGroupName: string, name: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Create or update a certificate purchase order
     *
     * @param {string} resourceGroupName Azure resource group name
     * 
     * @param {string} name Certificate name
     * 
     * @param {object} certificateDistinguishedName Distinguished name to be used
     * for purchasing certificate
     * 
     * @param {object} [certificateDistinguishedName.certificates] State of the
     * Key Vault secret
     * 
     * @param {string} [certificateDistinguishedName.distinguishedName]
     * Certificate distinguished name
     * 
     * @param {string} [certificateDistinguishedName.domainVerificationToken]
     * Domain Verification Token
     * 
     * @param {number} [certificateDistinguishedName.validityInYears] Duration in
     * years (must be between 1 and 3)
     * 
     * @param {number} [certificateDistinguishedName.keySize] Certificate Key Size
     * 
     * @param {string} [certificateDistinguishedName.productType] Certificate
     * product type. Possible values include: 'StandardDomainValidatedSsl',
     * 'StandardDomainValidatedWildCardSsl'
     * 
     * @param {boolean} [certificateDistinguishedName.autoRenew] Auto renew
     * 
     * @param {string} [certificateDistinguishedName.provisioningState] Status of
     * certificate order. Possible values include: 'Succeeded', 'Failed',
     * 'Canceled', 'InProgress', 'Deleting'
     * 
     * @param {string} [certificateDistinguishedName.status] Current order status.
     * Possible values include: 'Pendingissuance', 'Issued', 'Revoked',
     * 'Canceled', 'Denied', 'Pendingrevocation', 'PendingRekey', 'Unused',
     * 'Expired', 'NotSubmitted'
     * 
     * @param {object} [certificateDistinguishedName.signedCertificate] Signed
     * certificate
     * 
     * @param {string} [certificateDistinguishedName.csr] Last CSR that was
     * created for this order
     * 
     * @param {object} [certificateDistinguishedName.intermediate] Intermediate
     * certificate
     * 
     * @param {object} [certificateDistinguishedName.root] Root certificate
     * 
     * @param {number} [certificateDistinguishedName.root.version] Version
     * 
     * @param {string} [certificateDistinguishedName.root.serialNumber] Serial
     * Number
     * 
     * @param {string} [certificateDistinguishedName.root.thumbprint] Thumbprint
     * 
     * @param {string} [certificateDistinguishedName.root.subject] Subject
     * 
     * @param {date} [certificateDistinguishedName.root.notBefore] Valid from
     * 
     * @param {date} [certificateDistinguishedName.root.notAfter] Valid to
     * 
     * @param {string} [certificateDistinguishedName.root.signatureAlgorithm]
     * Signature Algorithm
     * 
     * @param {string} [certificateDistinguishedName.root.issuer] Issuer
     * 
     * @param {string} [certificateDistinguishedName.root.rawData] Raw certificate
     * data
     * 
     * @param {string} [certificateDistinguishedName.root.id] Resource Id
     * 
     * @param {string} [certificateDistinguishedName.root.name] Resource Name
     * 
     * @param {string} [certificateDistinguishedName.root.kind] Kind of resource
     * 
     * @param {string} certificateDistinguishedName.root.location Resource Location
     * 
     * @param {string} [certificateDistinguishedName.root.type] Resource type
     * 
     * @param {object} [certificateDistinguishedName.root.tags] Resource tags
     * 
     * @param {string} [certificateDistinguishedName.serialNumber] Current serial
     * number of the certificate
     * 
     * @param {date} [certificateDistinguishedName.lastCertificateIssuanceTime]
     * Certificate last issuance time
     * 
     * @param {date} [certificateDistinguishedName.expirationTime] Certificate
     * expiration time
     * 
     * @param {string} [certificateDistinguishedName.id] Resource Id
     * 
     * @param {string} [certificateDistinguishedName.name] Resource Name
     * 
     * @param {string} [certificateDistinguishedName.kind] Kind of resource
     * 
     * @param {string} certificateDistinguishedName.location Resource Location
     * 
     * @param {string} [certificateDistinguishedName.type] Resource type
     * 
     * @param {object} [certificateDistinguishedName.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateCertificateOrder(resourceGroupName: string, name: string, certificateDistinguishedName: models.CertificateOrder, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateOrder>): void;
    updateCertificateOrder(resourceGroupName: string, name: string, certificateDistinguishedName: models.CertificateOrder, callback: ServiceCallback<models.CertificateOrder>): void;

    /**
     * @summary Get certificate orders in a resource group
     *
     * @param {string} resourceGroupName Azure resource group name
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getCertificateOrders(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateOrderCollection>): void;
    getCertificateOrders(resourceGroupName: string, callback: ServiceCallback<models.CertificateOrderCollection>): void;

    /**
     * @summary List all certificates associated with a certificate order (only
     * one certificate can be associated with an order at a time)
     *
     * @param {string} resourceGroupName Azure resource group name
     * 
     * @param {string} certificateOrderName Certificate name
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getCertificates(resourceGroupName: string, certificateOrderName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateOrderCertificateCollection>): void;
    getCertificates(resourceGroupName: string, certificateOrderName: string, callback: ServiceCallback<models.CertificateOrderCertificateCollection>): void;

    /**
     * @summary Reissue an existing certificate order
     *
     * @param {string} resourceGroupName Azure resource group name
     * 
     * @param {string} name Certificate name
     * 
     * @param {object} reissueCertificateOrderRequest Reissue parameters
     * 
     * @param {number} [reissueCertificateOrderRequest.keySize] Certificate Key
     * Size
     * 
     * @param {number} [reissueCertificateOrderRequest.delayExistingRevokeInHours]
     * Delay in hours to revoke existing certificate after the new certificate is
     * issued
     * 
     * @param {string} [reissueCertificateOrderRequest.id] Resource Id
     * 
     * @param {string} [reissueCertificateOrderRequest.name] Resource Name
     * 
     * @param {string} [reissueCertificateOrderRequest.kind] Kind of resource
     * 
     * @param {string} reissueCertificateOrderRequest.location Resource Location
     * 
     * @param {string} [reissueCertificateOrderRequest.type] Resource type
     * 
     * @param {object} [reissueCertificateOrderRequest.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    reissueCertificateOrder(resourceGroupName: string, name: string, reissueCertificateOrderRequest: models.ReissueCertificateOrderRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    reissueCertificateOrder(resourceGroupName: string, name: string, reissueCertificateOrderRequest: models.ReissueCertificateOrderRequest, callback: ServiceCallback<any>): void;

    /**
     * @summary Renew an existing certificate order
     *
     * @param {string} resourceGroupName Azure resource group name
     * 
     * @param {string} name Certificate name
     * 
     * @param {object} renewCertificateOrderRequest Renew parameters
     * 
     * @param {number} [renewCertificateOrderRequest.keySize] Certificate Key Size
     * 
     * @param {string} [renewCertificateOrderRequest.id] Resource Id
     * 
     * @param {string} [renewCertificateOrderRequest.name] Resource Name
     * 
     * @param {string} [renewCertificateOrderRequest.kind] Kind of resource
     * 
     * @param {string} renewCertificateOrderRequest.location Resource Location
     * 
     * @param {string} [renewCertificateOrderRequest.type] Resource type
     * 
     * @param {object} [renewCertificateOrderRequest.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    renewCertificateOrder(resourceGroupName: string, name: string, renewCertificateOrderRequest: models.RenewCertificateOrderRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    renewCertificateOrder(resourceGroupName: string, name: string, renewCertificateOrderRequest: models.RenewCertificateOrderRequest, callback: ServiceCallback<any>): void;

    /**
     * @summary Retrieve the list of certificate actions
     *
     * @param {string} resourceGroupName Azure resource group name
     * 
     * @param {string} name Certificate order name
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    retrieveCertificateActions(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateOrderAction[]>): void;
    retrieveCertificateActions(resourceGroupName: string, name: string, callback: ServiceCallback<models.CertificateOrderAction[]>): void;

    /**
     * @summary Retrive email history
     *
     * @param {string} resourceGroupName Azure resource group name
     * 
     * @param {string} name Certificate order name
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    retrieveCertificateEmailHistory(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateEmail[]>): void;
    retrieveCertificateEmailHistory(resourceGroupName: string, name: string, callback: ServiceCallback<models.CertificateEmail[]>): void;

    /**
     * @summary Resend certificate email
     *
     * @param {string} resourceGroupName Azure resource group name
     * 
     * @param {string} name Certificate order name
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    resendCertificateEmail(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    resendCertificateEmail(resourceGroupName: string, name: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Verify domain ownership for this certificate order
     *
     * @param {string} resourceGroupName Azure resource group name
     * 
     * @param {string} name Certificate order name
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    verifyDomainOwnership(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    verifyDomainOwnership(resourceGroupName: string, name: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Get certificate orders in a resource group
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getCertificateOrdersNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateOrderCollection>): void;
    getCertificateOrdersNext(nextPageLink: string, callback: ServiceCallback<models.CertificateOrderCollection>): void;

    /**
     * @summary List all certificates associated with a certificate order (only
     * one certificate can be associated with an order at a time)
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getCertificatesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateOrderCertificateCollection>): void;
    getCertificatesNext(nextPageLink: string, callback: ServiceCallback<models.CertificateOrderCertificateCollection>): void;
}

/**
 * @class
 * Certificates
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the WebSiteManagementClient.
 */
export interface Certificates {

    /**
     * @summary Get certificates for a subscription in the specified resource
     * group.
     *
     * @param {string} resourceGroupName Name of the resource group
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getCertificates(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateCollection>): void;
    getCertificates(resourceGroupName: string, callback: ServiceCallback<models.CertificateCollection>): void;

    /**
     * @summary Get a certificate by certificate name for a subscription in the
     * specified resource group.
     *
     * @param {string} resourceGroupName Name of the resource group
     * 
     * @param {string} name Name of the certificate.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getCertificate(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Certificate>): void;
    getCertificate(resourceGroupName: string, name: string, callback: ServiceCallback<models.Certificate>): void;

    /**
     * @summary Creates or modifies an existing certificate.
     *
     * @param {string} resourceGroupName Name of the resource group
     * 
     * @param {string} name Name of the certificate.
     * 
     * @param {object} certificateEnvelope Details of certificate if it exists
     * already.
     * 
     * @param {string} [certificateEnvelope.friendlyName] Friendly name of the
     * certificate
     * 
     * @param {string} [certificateEnvelope.subjectName] Subject name of the
     * certificate
     * 
     * @param {array} [certificateEnvelope.hostNames] Host names the certificate
     * applies to
     * 
     * @param {string} [certificateEnvelope.pfxBlob] Pfx blob
     * 
     * @param {string} [certificateEnvelope.siteName] App name
     * 
     * @param {string} [certificateEnvelope.selfLink] Self link
     * 
     * @param {string} [certificateEnvelope.issuer] Certificate issuer
     * 
     * @param {date} [certificateEnvelope.issueDate] Certificate issue Date
     * 
     * @param {date} [certificateEnvelope.expirationDate] Certificate expriration
     * date
     * 
     * @param {string} [certificateEnvelope.password] Certificate password
     * 
     * @param {string} [certificateEnvelope.thumbprint] Certificate thumbprint
     * 
     * @param {boolean} [certificateEnvelope.valid] Is the certificate valid?
     * 
     * @param {string} [certificateEnvelope.cerBlob] Raw bytes of .cer file
     * 
     * @param {string} [certificateEnvelope.publicKeyHash] Public key hash
     * 
     * @param {object} [certificateEnvelope.hostingEnvironmentProfile]
     * Specification for the hosting environment (App Service Environment) to use
     * for the certificate
     * 
     * @param {string} [certificateEnvelope.hostingEnvironmentProfile.id] Resource
     * id of the hostingEnvironment (App Service Environment)
     * 
     * @param {string} [certificateEnvelope.hostingEnvironmentProfile.name] Name
     * of the hostingEnvironment (App Service Environment) (read only)
     * 
     * @param {string} [certificateEnvelope.hostingEnvironmentProfile.type]
     * Resource type of the hostingEnvironment (App Service Environment) (read
     * only)
     * 
     * @param {string} [certificateEnvelope.id] Resource Id
     * 
     * @param {string} [certificateEnvelope.name] Resource Name
     * 
     * @param {string} [certificateEnvelope.kind] Kind of resource
     * 
     * @param {string} certificateEnvelope.location Resource Location
     * 
     * @param {string} [certificateEnvelope.type] Resource type
     * 
     * @param {object} [certificateEnvelope.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateCertificate(resourceGroupName: string, name: string, certificateEnvelope: models.Certificate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Certificate>): void;
    createOrUpdateCertificate(resourceGroupName: string, name: string, certificateEnvelope: models.Certificate, callback: ServiceCallback<models.Certificate>): void;

    /**
     * @summary Delete a certificate by name in a specificed subscription and
     * resourcegroup.
     *
     * @param {string} resourceGroupName Name of the resource group
     * 
     * @param {string} name Name of the certificate to be deleted.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteCertificate(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteCertificate(resourceGroupName: string, name: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Creates or modifies an existing certificate.
     *
     * @param {string} resourceGroupName Name of the resource group
     * 
     * @param {string} name Name of the certificate.
     * 
     * @param {object} certificateEnvelope Details of certificate if it exists
     * already.
     * 
     * @param {string} [certificateEnvelope.friendlyName] Friendly name of the
     * certificate
     * 
     * @param {string} [certificateEnvelope.subjectName] Subject name of the
     * certificate
     * 
     * @param {array} [certificateEnvelope.hostNames] Host names the certificate
     * applies to
     * 
     * @param {string} [certificateEnvelope.pfxBlob] Pfx blob
     * 
     * @param {string} [certificateEnvelope.siteName] App name
     * 
     * @param {string} [certificateEnvelope.selfLink] Self link
     * 
     * @param {string} [certificateEnvelope.issuer] Certificate issuer
     * 
     * @param {date} [certificateEnvelope.issueDate] Certificate issue Date
     * 
     * @param {date} [certificateEnvelope.expirationDate] Certificate expriration
     * date
     * 
     * @param {string} [certificateEnvelope.password] Certificate password
     * 
     * @param {string} [certificateEnvelope.thumbprint] Certificate thumbprint
     * 
     * @param {boolean} [certificateEnvelope.valid] Is the certificate valid?
     * 
     * @param {string} [certificateEnvelope.cerBlob] Raw bytes of .cer file
     * 
     * @param {string} [certificateEnvelope.publicKeyHash] Public key hash
     * 
     * @param {object} [certificateEnvelope.hostingEnvironmentProfile]
     * Specification for the hosting environment (App Service Environment) to use
     * for the certificate
     * 
     * @param {string} [certificateEnvelope.hostingEnvironmentProfile.id] Resource
     * id of the hostingEnvironment (App Service Environment)
     * 
     * @param {string} [certificateEnvelope.hostingEnvironmentProfile.name] Name
     * of the hostingEnvironment (App Service Environment) (read only)
     * 
     * @param {string} [certificateEnvelope.hostingEnvironmentProfile.type]
     * Resource type of the hostingEnvironment (App Service Environment) (read
     * only)
     * 
     * @param {string} [certificateEnvelope.id] Resource Id
     * 
     * @param {string} [certificateEnvelope.name] Resource Name
     * 
     * @param {string} [certificateEnvelope.kind] Kind of resource
     * 
     * @param {string} certificateEnvelope.location Resource Location
     * 
     * @param {string} [certificateEnvelope.type] Resource type
     * 
     * @param {object} [certificateEnvelope.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateCertificate(resourceGroupName: string, name: string, certificateEnvelope: models.Certificate, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Certificate>): void;
    updateCertificate(resourceGroupName: string, name: string, certificateEnvelope: models.Certificate, callback: ServiceCallback<models.Certificate>): void;

    /**
     * @summary Gets the certificate signing requests for a subscription in the
     * specified resource group
     *
     * @param {string} resourceGroupName Name of the resource group
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getCsrs(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Csr[]>): void;
    getCsrs(resourceGroupName: string, callback: ServiceCallback<models.Csr[]>): void;

    /**
     * @summary Gets a certificate signing request by certificate name for a
     * subscription in the specified resource group
     *
     * @param {string} resourceGroupName Name of the resource group
     * 
     * @param {string} name Name of the certificate.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getCsr(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Csr>): void;
    getCsr(resourceGroupName: string, name: string, callback: ServiceCallback<models.Csr>): void;

    /**
     * @summary Creates or modifies an existing certificate signing request.
     *
     * @param {string} resourceGroupName Name of the resource group
     * 
     * @param {string} name Name of the certificate.
     * 
     * @param {object} csrEnvelope Details of certificate signing request if it
     * exists already.
     * 
     * @param {string} [csrEnvelope.csrName] Name used to locate CSR object
     * 
     * @param {string} [csrEnvelope.distinguishedName] Distinguished name of
     * certificate to be created
     * 
     * @param {string} [csrEnvelope.csrString] Actual CSR string created
     * 
     * @param {string} [csrEnvelope.pfxBlob] PFX certifcate of created certificate
     * 
     * @param {string} [csrEnvelope.password] PFX password
     * 
     * @param {string} [csrEnvelope.publicKeyHash] Hash of the certificates public
     * key
     * 
     * @param {string} [csrEnvelope.hostingEnvironment] Hosting environment
     * 
     * @param {string} [csrEnvelope.id] Resource Id
     * 
     * @param {string} [csrEnvelope.name] Resource Name
     * 
     * @param {string} [csrEnvelope.kind] Kind of resource
     * 
     * @param {string} csrEnvelope.location Resource Location
     * 
     * @param {string} [csrEnvelope.type] Resource type
     * 
     * @param {object} [csrEnvelope.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateCsr(resourceGroupName: string, name: string, csrEnvelope: models.Csr, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Csr>): void;
    createOrUpdateCsr(resourceGroupName: string, name: string, csrEnvelope: models.Csr, callback: ServiceCallback<models.Csr>): void;

    /**
     * @summary Delete the certificate signing request.
     *
     * @param {string} resourceGroupName Name of the resource group
     * 
     * @param {string} name Name of the certificate signing request.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteCsr(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteCsr(resourceGroupName: string, name: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Creates or modifies an existing certificate signing request.
     *
     * @param {string} resourceGroupName Name of the resource group
     * 
     * @param {string} name Name of the certificate.
     * 
     * @param {object} csrEnvelope Details of certificate signing request if it
     * exists already.
     * 
     * @param {string} [csrEnvelope.csrName] Name used to locate CSR object
     * 
     * @param {string} [csrEnvelope.distinguishedName] Distinguished name of
     * certificate to be created
     * 
     * @param {string} [csrEnvelope.csrString] Actual CSR string created
     * 
     * @param {string} [csrEnvelope.pfxBlob] PFX certifcate of created certificate
     * 
     * @param {string} [csrEnvelope.password] PFX password
     * 
     * @param {string} [csrEnvelope.publicKeyHash] Hash of the certificates public
     * key
     * 
     * @param {string} [csrEnvelope.hostingEnvironment] Hosting environment
     * 
     * @param {string} [csrEnvelope.id] Resource Id
     * 
     * @param {string} [csrEnvelope.name] Resource Name
     * 
     * @param {string} [csrEnvelope.kind] Kind of resource
     * 
     * @param {string} csrEnvelope.location Resource Location
     * 
     * @param {string} [csrEnvelope.type] Resource type
     * 
     * @param {object} [csrEnvelope.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateCsr(resourceGroupName: string, name: string, csrEnvelope: models.Csr, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Csr>): void;
    updateCsr(resourceGroupName: string, name: string, csrEnvelope: models.Csr, callback: ServiceCallback<models.Csr>): void;

    /**
     * @summary Get certificates for a subscription in the specified resource
     * group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getCertificatesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateCollection>): void;
    getCertificatesNext(nextPageLink: string, callback: ServiceCallback<models.CertificateCollection>): void;
}

/**
 * @class
 * ClassicMobileServices
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the WebSiteManagementClient.
 */
export interface ClassicMobileServices {

    /**
     * @summary Get all mobile services in a resource group.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getClassicMobileServices(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClassicMobileServiceCollection>): void;
    getClassicMobileServices(resourceGroupName: string, callback: ServiceCallback<models.ClassicMobileServiceCollection>): void;

    /**
     * @summary Get a mobile service.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of mobile service
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getClassicMobileService(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClassicMobileService>): void;
    getClassicMobileService(resourceGroupName: string, name: string, callback: ServiceCallback<models.ClassicMobileService>): void;

    /**
     * @summary Delete a mobile service.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of mobile service
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteClassicMobileService(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteClassicMobileService(resourceGroupName: string, name: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Get all mobile services in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getClassicMobileServicesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClassicMobileServiceCollection>): void;
    getClassicMobileServicesNext(nextPageLink: string, callback: ServiceCallback<models.ClassicMobileServiceCollection>): void;
}

/**
 * @class
 * Domains
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the WebSiteManagementClient.
 */
export interface Domains {

    /**
     * @summary Lists domains under a resource group
     *
     * @param {string} resourceGroupName Name of the resource group
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getDomains(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainCollection>): void;
    getDomains(resourceGroupName: string, callback: ServiceCallback<models.DomainCollection>): void;

    /**
     * @summary Gets details of a domain
     *
     * @param {string} resourceGroupName Name of the resource group
     * 
     * @param {string} domainName Name of the domain
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getDomain(resourceGroupName: string, domainName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Domain>): void;
    getDomain(resourceGroupName: string, domainName: string, callback: ServiceCallback<models.Domain>): void;

    /**
     * @summary Creates a domain
     *
     * @param {string} resourceGroupName &gt;Name of the resource group
     * 
     * @param {string} domainName Name of the domain
     * 
     * @param {object} domain Domain registration information
     * 
     * @param {object} [domain.contactAdmin] Admin contact information
     * 
     * @param {object} [domain.contactBilling] Billing contact information
     * 
     * @param {object} [domain.contactRegistrant] Registrant contact information
     * 
     * @param {object} [domain.contactTech] Technical contact information
     * 
     * @param {object} [domain.contactTech.addressMailing] Mailing address
     * 
     * @param {string} [domain.contactTech.addressMailing.address1] Address 1
     * 
     * @param {string} [domain.contactTech.addressMailing.address2] Address 2
     * 
     * @param {string} [domain.contactTech.addressMailing.city] City
     * 
     * @param {string} [domain.contactTech.addressMailing.country] Country
     * 
     * @param {string} [domain.contactTech.addressMailing.postalCode] Postal code
     * 
     * @param {string} [domain.contactTech.addressMailing.state] State
     * 
     * @param {string} [domain.contactTech.email] Email address
     * 
     * @param {string} [domain.contactTech.fax] Fax number
     * 
     * @param {string} [domain.contactTech.jobTitle] Job title
     * 
     * @param {string} [domain.contactTech.nameFirst] First name
     * 
     * @param {string} [domain.contactTech.nameLast] Last name
     * 
     * @param {string} [domain.contactTech.nameMiddle] Middle name
     * 
     * @param {string} [domain.contactTech.organization] Organization
     * 
     * @param {string} [domain.contactTech.phone] Phone number
     * 
     * @param {string} [domain.registrationStatus] Domain registration status.
     * Possible values include: 'Active', 'Awaiting', 'Cancelled', 'Confiscated',
     * 'Disabled', 'Excluded', 'Expired', 'Failed', 'Held', 'Locked', 'Parked',
     * 'Pending', 'Reserved', 'Reverted', 'Suspended', 'Transferred', 'Unknown',
     * 'Unlocked', 'Unparked', 'Updated', 'JsonConverterFailed'
     * 
     * @param {string} [domain.provisioningState] Domain provisioning state.
     * Possible values include: 'Succeeded', 'Failed', 'Canceled', 'InProgress',
     * 'Deleting'
     * 
     * @param {array} [domain.nameServers] Name servers
     * 
     * @param {boolean} [domain.privacy] If true then domain privacy is enabled
     * for this domain
     * 
     * @param {date} [domain.createdTime] Domain creation timestamp
     * 
     * @param {date} [domain.expirationTime] Domain expiration timestamp
     * 
     * @param {date} [domain.lastRenewedTime] Timestamp when the domain was
     * renewed last time
     * 
     * @param {boolean} [domain.autoRenew] If true then domain will renewed
     * automatically
     * 
     * @param {boolean} [domain.readyForDnsRecordManagement] If true then Azure
     * can assign this domain to Web Apps. This value will be true if domain
     * registration status is active and it is hosted on name servers Azure has
     * programmatic access to
     * 
     * @param {array} [domain.managedHostNames] All hostnames derived from the
     * domain and assigned to Azure resources
     * 
     * @param {object} [domain.consent] Legal agreement consent
     * 
     * @param {array} [domain.consent.agreementKeys] List of applicable legal
     * agreement keys. This list can be retrieved using ListLegalAgreements Api
     * under TopLevelDomain resource
     * 
     * @param {string} [domain.consent.agreedBy] Client IP address
     * 
     * @param {date} [domain.consent.agreedAt] Timestamp when the agreements were
     * accepted
     * 
     * @param {array} [domain.domainNotRenewableReasons] Reasons why domain is not
     * renewable
     * 
     * @param {string} [domain.id] Resource Id
     * 
     * @param {string} [domain.name] Resource Name
     * 
     * @param {string} [domain.kind] Kind of resource
     * 
     * @param {string} domain.location Resource Location
     * 
     * @param {string} [domain.type] Resource type
     * 
     * @param {object} [domain.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateDomain(resourceGroupName: string, domainName: string, domain: models.Domain, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Domain>): void;
    createOrUpdateDomain(resourceGroupName: string, domainName: string, domain: models.Domain, callback: ServiceCallback<models.Domain>): void;

    /**
     * @summary Deletes a domain
     *
     * @param {string} resourceGroupName Name of the resource group
     * 
     * @param {string} domainName Name of the domain
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.forceHardDeleteDomain] If true then the domain
     * will be deleted immediately instead of after 24 hours
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteDomain(resourceGroupName: string, domainName: string, options: { forceHardDeleteDomain? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteDomain(resourceGroupName: string, domainName: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Creates a domain
     *
     * @param {string} resourceGroupName &gt;Name of the resource group
     * 
     * @param {string} domainName Name of the domain
     * 
     * @param {object} domain Domain registration information
     * 
     * @param {object} [domain.contactAdmin] Admin contact information
     * 
     * @param {object} [domain.contactBilling] Billing contact information
     * 
     * @param {object} [domain.contactRegistrant] Registrant contact information
     * 
     * @param {object} [domain.contactTech] Technical contact information
     * 
     * @param {object} [domain.contactTech.addressMailing] Mailing address
     * 
     * @param {string} [domain.contactTech.addressMailing.address1] Address 1
     * 
     * @param {string} [domain.contactTech.addressMailing.address2] Address 2
     * 
     * @param {string} [domain.contactTech.addressMailing.city] City
     * 
     * @param {string} [domain.contactTech.addressMailing.country] Country
     * 
     * @param {string} [domain.contactTech.addressMailing.postalCode] Postal code
     * 
     * @param {string} [domain.contactTech.addressMailing.state] State
     * 
     * @param {string} [domain.contactTech.email] Email address
     * 
     * @param {string} [domain.contactTech.fax] Fax number
     * 
     * @param {string} [domain.contactTech.jobTitle] Job title
     * 
     * @param {string} [domain.contactTech.nameFirst] First name
     * 
     * @param {string} [domain.contactTech.nameLast] Last name
     * 
     * @param {string} [domain.contactTech.nameMiddle] Middle name
     * 
     * @param {string} [domain.contactTech.organization] Organization
     * 
     * @param {string} [domain.contactTech.phone] Phone number
     * 
     * @param {string} [domain.registrationStatus] Domain registration status.
     * Possible values include: 'Active', 'Awaiting', 'Cancelled', 'Confiscated',
     * 'Disabled', 'Excluded', 'Expired', 'Failed', 'Held', 'Locked', 'Parked',
     * 'Pending', 'Reserved', 'Reverted', 'Suspended', 'Transferred', 'Unknown',
     * 'Unlocked', 'Unparked', 'Updated', 'JsonConverterFailed'
     * 
     * @param {string} [domain.provisioningState] Domain provisioning state.
     * Possible values include: 'Succeeded', 'Failed', 'Canceled', 'InProgress',
     * 'Deleting'
     * 
     * @param {array} [domain.nameServers] Name servers
     * 
     * @param {boolean} [domain.privacy] If true then domain privacy is enabled
     * for this domain
     * 
     * @param {date} [domain.createdTime] Domain creation timestamp
     * 
     * @param {date} [domain.expirationTime] Domain expiration timestamp
     * 
     * @param {date} [domain.lastRenewedTime] Timestamp when the domain was
     * renewed last time
     * 
     * @param {boolean} [domain.autoRenew] If true then domain will renewed
     * automatically
     * 
     * @param {boolean} [domain.readyForDnsRecordManagement] If true then Azure
     * can assign this domain to Web Apps. This value will be true if domain
     * registration status is active and it is hosted on name servers Azure has
     * programmatic access to
     * 
     * @param {array} [domain.managedHostNames] All hostnames derived from the
     * domain and assigned to Azure resources
     * 
     * @param {object} [domain.consent] Legal agreement consent
     * 
     * @param {array} [domain.consent.agreementKeys] List of applicable legal
     * agreement keys. This list can be retrieved using ListLegalAgreements Api
     * under TopLevelDomain resource
     * 
     * @param {string} [domain.consent.agreedBy] Client IP address
     * 
     * @param {date} [domain.consent.agreedAt] Timestamp when the agreements were
     * accepted
     * 
     * @param {array} [domain.domainNotRenewableReasons] Reasons why domain is not
     * renewable
     * 
     * @param {string} [domain.id] Resource Id
     * 
     * @param {string} [domain.name] Resource Name
     * 
     * @param {string} [domain.kind] Kind of resource
     * 
     * @param {string} domain.location Resource Location
     * 
     * @param {string} [domain.type] Resource type
     * 
     * @param {object} [domain.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateDomain(resourceGroupName: string, domainName: string, domain: models.Domain, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Domain>): void;
    updateDomain(resourceGroupName: string, domainName: string, domain: models.Domain, callback: ServiceCallback<models.Domain>): void;

    /**
     * @summary Retrieves the latest status of a domain purchase operation
     *
     * @param {string} resourceGroupName Name of the resource group
     * 
     * @param {string} domainName Name of the domain
     * 
     * @param {string} operationId Domain purchase operation Id
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getDomainOperation(resourceGroupName: string, domainName: string, operationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Domain>): void;
    getDomainOperation(resourceGroupName: string, domainName: string, operationId: string, callback: ServiceCallback<models.Domain>): void;

    /**
     * @summary Lists domains under a resource group
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getDomainsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainCollection>): void;
    getDomainsNext(nextPageLink: string, callback: ServiceCallback<models.DomainCollection>): void;
}

/**
 * @class
 * Global
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the WebSiteManagementClient.
 */
export interface Global {

    /**
     * @summary Gets publishing credentials for the subscription owner
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSubscriptionPublishingCredentials(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.User>): void;
    getSubscriptionPublishingCredentials(callback: ServiceCallback<models.User>): void;

    /**
     * @summary Updates publishing credentials for the subscription owner
     *
     * @param {object} requestMessage requestMessage with new publishing
     * credentials
     * 
     * @param {string} [requestMessage.userName] Username (internal)
     * 
     * @param {string} [requestMessage.publishingUserName] Username used for
     * publishing
     * 
     * @param {string} [requestMessage.publishingPassword] Password used for
     * publishing
     * 
     * @param {string} [requestMessage.scmUri] Service Control Manager URI,
     * including username and password
     * 
     * @param {string} [requestMessage.id] Resource Id
     * 
     * @param {string} [requestMessage.name] Resource Name
     * 
     * @param {string} [requestMessage.kind] Kind of resource
     * 
     * @param {string} requestMessage.location Resource Location
     * 
     * @param {string} [requestMessage.type] Resource type
     * 
     * @param {object} [requestMessage.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateSubscriptionPublishingCredentials(requestMessage: models.User, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.User>): void;
    updateSubscriptionPublishingCredentials(requestMessage: models.User, callback: ServiceCallback<models.User>): void;

    /**
     * @summary Gets list of available geo regions
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.sku] Filter only to regions that support this sku
     * 
     * @param {boolean} [options.linuxWorkersEnabled] Filter only to regions that
     * support linux workers
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSubscriptionGeoRegions(options: { sku? : string, linuxWorkersEnabled? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GeoRegionCollection>): void;
    getSubscriptionGeoRegions(callback: ServiceCallback<models.GeoRegionCollection>): void;

    /**
     * @summary Get all certificates for a subscription
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAllCertificates(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateCollection>): void;
    getAllCertificates(callback: ServiceCallback<models.CertificateCollection>): void;

    /**
     * @summary Gets all App Service Plans for a subcription
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.detailed] False to return a subset of App Service
     * Plan properties, true to return all of the properties.
     * Retrieval of all properties may increase the API latency.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAllServerFarms(options: { detailed? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerFarmCollection>): void;
    getAllServerFarms(callback: ServiceCallback<models.ServerFarmCollection>): void;

    /**
     * @summary Gets all Web Apps for a subscription
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAllSites(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteCollection>): void;
    getAllSites(callback: ServiceCallback<models.SiteCollection>): void;

    /**
     * @summary Gets all hostingEnvironments (App Service Environment) for a
     * subscription
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAllHostingEnvironments(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HostingEnvironmentCollection>): void;
    getAllHostingEnvironments(callback: ServiceCallback<models.HostingEnvironmentCollection>): void;

    /**
     * @summary Gets all managed hosting environments for a subscription
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAllManagedHostingEnvironments(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedHostingEnvironmentCollection>): void;
    getAllManagedHostingEnvironments(callback: ServiceCallback<models.ManagedHostingEnvironmentCollection>): void;

    /**
     * @summary Gets all mobile services for a subscription
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAllClassicMobileServices(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClassicMobileServiceCollection>): void;
    getAllClassicMobileServices(callback: ServiceCallback<models.ClassicMobileServiceCollection>): void;

    /**
     * @summary List premier add on offers
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listPremierAddOnOffers(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    listPremierAddOnOffers(callback: ServiceCallback<any>): void;

    /**
     * @summary Whether hosting environment name is available
     *
     * @param {string} name Hosting environment name
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    isHostingEnvironmentNameAvailable(name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    isHostingEnvironmentNameAvailable(name: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Whether hosting environment name is available
     *
     * @param {string} name Hosting environment name
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    isHostingEnvironmentWithLegacyNameAvailable(name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    isHostingEnvironmentWithLegacyNameAvailable(name: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Check if resource name is available
     *
     * @param {object} request Name availability request
     * 
     * @param {string} [request.name] Resource name to verify
     * 
     * @param {string} [request.type] Resource type used for verification
     * 
     * @param {boolean} [request.isFqdn] Is fully qualified domain name
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    checkNameAvailability(request: models.ResourceNameAvailabilityRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceNameAvailability>): void;
    checkNameAvailability(request: models.ResourceNameAvailabilityRequest, callback: ServiceCallback<models.ResourceNameAvailability>): void;

    /**
     * @summary Gets list of available geo regions
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSubscriptionGeoRegionsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GeoRegionCollection>): void;
    getSubscriptionGeoRegionsNext(nextPageLink: string, callback: ServiceCallback<models.GeoRegionCollection>): void;

    /**
     * @summary Get all certificates for a subscription
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAllCertificatesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateCollection>): void;
    getAllCertificatesNext(nextPageLink: string, callback: ServiceCallback<models.CertificateCollection>): void;

    /**
     * @summary Gets all App Service Plans for a subcription
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAllServerFarmsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerFarmCollection>): void;
    getAllServerFarmsNext(nextPageLink: string, callback: ServiceCallback<models.ServerFarmCollection>): void;

    /**
     * @summary Gets all Web Apps for a subscription
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAllSitesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteCollection>): void;
    getAllSitesNext(nextPageLink: string, callback: ServiceCallback<models.SiteCollection>): void;

    /**
     * @summary Gets all hostingEnvironments (App Service Environment) for a
     * subscription
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAllHostingEnvironmentsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HostingEnvironmentCollection>): void;
    getAllHostingEnvironmentsNext(nextPageLink: string, callback: ServiceCallback<models.HostingEnvironmentCollection>): void;

    /**
     * @summary Gets all managed hosting environments for a subscription
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAllManagedHostingEnvironmentsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedHostingEnvironmentCollection>): void;
    getAllManagedHostingEnvironmentsNext(nextPageLink: string, callback: ServiceCallback<models.ManagedHostingEnvironmentCollection>): void;

    /**
     * @summary Gets all mobile services for a subscription
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAllClassicMobileServicesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClassicMobileServiceCollection>): void;
    getAllClassicMobileServicesNext(nextPageLink: string, callback: ServiceCallback<models.ClassicMobileServiceCollection>): void;
}

/**
 * @class
 * GlobalCertificateOrder
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the WebSiteManagementClient.
 */
export interface GlobalCertificateOrder {

    /**
     * @summary Lists all domains in a subscription
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAllCertificateOrders(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateOrderCollection>): void;
    getAllCertificateOrders(callback: ServiceCallback<models.CertificateOrderCollection>): void;

    /**
     * @summary Validate certificate purchase information
     *
     * @param {object} certificateOrder Certificate order
     * 
     * @param {object} [certificateOrder.certificates] State of the Key Vault
     * secret
     * 
     * @param {string} [certificateOrder.distinguishedName] Certificate
     * distinguished name
     * 
     * @param {string} [certificateOrder.domainVerificationToken] Domain
     * Verification Token
     * 
     * @param {number} [certificateOrder.validityInYears] Duration in years (must
     * be between 1 and 3)
     * 
     * @param {number} [certificateOrder.keySize] Certificate Key Size
     * 
     * @param {string} [certificateOrder.productType] Certificate product type.
     * Possible values include: 'StandardDomainValidatedSsl',
     * 'StandardDomainValidatedWildCardSsl'
     * 
     * @param {boolean} [certificateOrder.autoRenew] Auto renew
     * 
     * @param {string} [certificateOrder.provisioningState] Status of certificate
     * order. Possible values include: 'Succeeded', 'Failed', 'Canceled',
     * 'InProgress', 'Deleting'
     * 
     * @param {string} [certificateOrder.status] Current order status. Possible
     * values include: 'Pendingissuance', 'Issued', 'Revoked', 'Canceled',
     * 'Denied', 'Pendingrevocation', 'PendingRekey', 'Unused', 'Expired',
     * 'NotSubmitted'
     * 
     * @param {object} [certificateOrder.signedCertificate] Signed certificate
     * 
     * @param {string} [certificateOrder.csr] Last CSR that was created for this
     * order
     * 
     * @param {object} [certificateOrder.intermediate] Intermediate certificate
     * 
     * @param {object} [certificateOrder.root] Root certificate
     * 
     * @param {number} [certificateOrder.root.version] Version
     * 
     * @param {string} [certificateOrder.root.serialNumber] Serial Number
     * 
     * @param {string} [certificateOrder.root.thumbprint] Thumbprint
     * 
     * @param {string} [certificateOrder.root.subject] Subject
     * 
     * @param {date} [certificateOrder.root.notBefore] Valid from
     * 
     * @param {date} [certificateOrder.root.notAfter] Valid to
     * 
     * @param {string} [certificateOrder.root.signatureAlgorithm] Signature
     * Algorithm
     * 
     * @param {string} [certificateOrder.root.issuer] Issuer
     * 
     * @param {string} [certificateOrder.root.rawData] Raw certificate data
     * 
     * @param {string} [certificateOrder.root.id] Resource Id
     * 
     * @param {string} [certificateOrder.root.name] Resource Name
     * 
     * @param {string} [certificateOrder.root.kind] Kind of resource
     * 
     * @param {string} certificateOrder.root.location Resource Location
     * 
     * @param {string} [certificateOrder.root.type] Resource type
     * 
     * @param {object} [certificateOrder.root.tags] Resource tags
     * 
     * @param {string} [certificateOrder.serialNumber] Current serial number of
     * the certificate
     * 
     * @param {date} [certificateOrder.lastCertificateIssuanceTime] Certificate
     * last issuance time
     * 
     * @param {date} [certificateOrder.expirationTime] Certificate expiration time
     * 
     * @param {string} [certificateOrder.id] Resource Id
     * 
     * @param {string} [certificateOrder.name] Resource Name
     * 
     * @param {string} [certificateOrder.kind] Kind of resource
     * 
     * @param {string} certificateOrder.location Resource Location
     * 
     * @param {string} [certificateOrder.type] Resource type
     * 
     * @param {object} [certificateOrder.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    validateCertificatePurchaseInformation(certificateOrder: models.CertificateOrder, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    validateCertificatePurchaseInformation(certificateOrder: models.CertificateOrder, callback: ServiceCallback<any>): void;

    /**
     * @summary Lists all domains in a subscription
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAllCertificateOrdersNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateOrderCollection>): void;
    getAllCertificateOrdersNext(nextPageLink: string, callback: ServiceCallback<models.CertificateOrderCollection>): void;
}

/**
 * @class
 * GlobalDomainRegistration
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the WebSiteManagementClient.
 */
export interface GlobalDomainRegistration {

    /**
     * @summary Lists all domains in a subscription
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAllDomains(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainCollection>): void;
    getAllDomains(callback: ServiceCallback<models.DomainCollection>): void;

    /**
     * @summary Generates a single sign on request for domain management portal
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getDomainControlCenterSsoRequest(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainControlCenterSsoRequest>): void;
    getDomainControlCenterSsoRequest(callback: ServiceCallback<models.DomainControlCenterSsoRequest>): void;

    /**
     * @summary Validates domain registration information
     *
     * @param {object} domainRegistrationInput Domain registration information
     * 
     * @param {string} [domainRegistrationInput.domainRegistrationInputName] Name
     * of the domain
     * 
     * @param {object} [domainRegistrationInput.contactAdmin] Admin contact
     * information
     * 
     * @param {object} [domainRegistrationInput.contactBilling] Billing contact
     * information
     * 
     * @param {object} [domainRegistrationInput.contactRegistrant] Registrant
     * contact information
     * 
     * @param {object} [domainRegistrationInput.contactTech] Technical contact
     * information
     * 
     * @param {object} [domainRegistrationInput.contactTech.addressMailing]
     * Mailing address
     * 
     * @param {string}
     * [domainRegistrationInput.contactTech.addressMailing.address1] Address 1
     * 
     * @param {string}
     * [domainRegistrationInput.contactTech.addressMailing.address2] Address 2
     * 
     * @param {string} [domainRegistrationInput.contactTech.addressMailing.city]
     * City
     * 
     * @param {string}
     * [domainRegistrationInput.contactTech.addressMailing.country] Country
     * 
     * @param {string}
     * [domainRegistrationInput.contactTech.addressMailing.postalCode] Postal code
     * 
     * @param {string} [domainRegistrationInput.contactTech.addressMailing.state]
     * State
     * 
     * @param {string} [domainRegistrationInput.contactTech.email] Email address
     * 
     * @param {string} [domainRegistrationInput.contactTech.fax] Fax number
     * 
     * @param {string} [domainRegistrationInput.contactTech.jobTitle] Job title
     * 
     * @param {string} [domainRegistrationInput.contactTech.nameFirst] First name
     * 
     * @param {string} [domainRegistrationInput.contactTech.nameLast] Last name
     * 
     * @param {string} [domainRegistrationInput.contactTech.nameMiddle] Middle name
     * 
     * @param {string} [domainRegistrationInput.contactTech.organization]
     * Organization
     * 
     * @param {string} [domainRegistrationInput.contactTech.phone] Phone number
     * 
     * @param {string} [domainRegistrationInput.registrationStatus] Domain
     * registration status. Possible values include: 'Active', 'Awaiting',
     * 'Cancelled', 'Confiscated', 'Disabled', 'Excluded', 'Expired', 'Failed',
     * 'Held', 'Locked', 'Parked', 'Pending', 'Reserved', 'Reverted',
     * 'Suspended', 'Transferred', 'Unknown', 'Unlocked', 'Unparked', 'Updated',
     * 'JsonConverterFailed'
     * 
     * @param {string} [domainRegistrationInput.provisioningState] Domain
     * provisioning state. Possible values include: 'Succeeded', 'Failed',
     * 'Canceled', 'InProgress', 'Deleting'
     * 
     * @param {array} [domainRegistrationInput.nameServers] Name servers
     * 
     * @param {boolean} [domainRegistrationInput.privacy] If true then domain
     * privacy is enabled for this domain
     * 
     * @param {date} [domainRegistrationInput.createdTime] Domain creation
     * timestamp
     * 
     * @param {date} [domainRegistrationInput.expirationTime] Domain expiration
     * timestamp
     * 
     * @param {date} [domainRegistrationInput.lastRenewedTime] Timestamp when the
     * domain was renewed last time
     * 
     * @param {boolean} [domainRegistrationInput.autoRenew] If true then domain
     * will renewed automatically
     * 
     * @param {boolean} [domainRegistrationInput.readyForDnsRecordManagement] If
     * true then Azure can assign this domain to Web Apps. This value will be
     * true if domain registration status is active and it is hosted on name
     * servers Azure has programmatic access to
     * 
     * @param {array} [domainRegistrationInput.managedHostNames] All hostnames
     * derived from the domain and assigned to Azure resources
     * 
     * @param {object} [domainRegistrationInput.consent] Legal agreement consent
     * 
     * @param {array} [domainRegistrationInput.consent.agreementKeys] List of
     * applicable legal agreement keys. This list can be retrieved using
     * ListLegalAgreements Api under TopLevelDomain resource
     * 
     * @param {string} [domainRegistrationInput.consent.agreedBy] Client IP address
     * 
     * @param {date} [domainRegistrationInput.consent.agreedAt] Timestamp when the
     * agreements were accepted
     * 
     * @param {array} [domainRegistrationInput.domainNotRenewableReasons] Reasons
     * why domain is not renewable
     * 
     * @param {string} [domainRegistrationInput.id] Resource Id
     * 
     * @param {string} [domainRegistrationInput.name] Resource Name
     * 
     * @param {string} [domainRegistrationInput.kind] Kind of resource
     * 
     * @param {string} domainRegistrationInput.location Resource Location
     * 
     * @param {string} [domainRegistrationInput.type] Resource type
     * 
     * @param {object} [domainRegistrationInput.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    validateDomainPurchaseInformation(domainRegistrationInput: models.DomainRegistrationInput, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    validateDomainPurchaseInformation(domainRegistrationInput: models.DomainRegistrationInput, callback: ServiceCallback<any>): void;

    /**
     * @summary Checks if a domain is available for registration
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.name] Name of the object
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    checkDomainAvailability(options: { name? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainAvailablilityCheckResult>): void;
    checkDomainAvailability(callback: ServiceCallback<models.DomainAvailablilityCheckResult>): void;

    /**
     * @summary Lists domain recommendations based on keywords
     *
     * @param {object} parameters Domain recommendation search parameters
     * 
     * @param {string} [parameters.keywords] Keywords to be used for generating
     * domain recommendations
     * 
     * @param {number} [parameters.maxDomainRecommendations] Maximum number of
     * recommendations
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listDomainRecommendations(parameters: models.DomainRecommendationSearchParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NameIdentifierCollection>): void;
    listDomainRecommendations(parameters: models.DomainRecommendationSearchParameters, callback: ServiceCallback<models.NameIdentifierCollection>): void;

    /**
     * @summary Lists all domains in a subscription
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAllDomainsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DomainCollection>): void;
    getAllDomainsNext(nextPageLink: string, callback: ServiceCallback<models.DomainCollection>): void;

    /**
     * @summary Lists domain recommendations based on keywords
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listDomainRecommendationsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NameIdentifierCollection>): void;
    listDomainRecommendationsNext(nextPageLink: string, callback: ServiceCallback<models.NameIdentifierCollection>): void;
}

/**
 * @class
 * GlobalResourceGroups
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the WebSiteManagementClient.
 */
export interface GlobalResourceGroups {

    /**
     * @param {string} resourceGroupName
     * 
     * @param {object} moveResourceEnvelope
     * 
     * @param {string} [moveResourceEnvelope.targetResourceGroup]
     * 
     * @param {array} [moveResourceEnvelope.resources]
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    moveResources(resourceGroupName: string, moveResourceEnvelope: models.CsmMoveResourceEnvelope, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    moveResources(resourceGroupName: string, moveResourceEnvelope: models.CsmMoveResourceEnvelope, callback: ServiceCallback<void>): void;
}

/**
 * @class
 * HostingEnvironments
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the WebSiteManagementClient.
 */
export interface HostingEnvironments {

    /**
     * @summary Get properties of hostingEnvironment (App Service Environment).
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHostingEnvironment(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HostingEnvironment>): void;
    getHostingEnvironment(resourceGroupName: string, name: string, callback: ServiceCallback<models.HostingEnvironment>): void;

    /**
     * @summary Create or update a hostingEnvironment (App Service Environment).
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {object} hostingEnvironmentEnvelope Properties of hostingEnvironment
     * (App Service Environment)
     * 
     * @param {string} [hostingEnvironmentEnvelope.hostingEnvironmentName] Name of
     * the hostingEnvironment (App Service Environment)
     * 
     * @param {string} [hostingEnvironmentEnvelope.hostingEnvironmentLocation]
     * Location of the hostingEnvironment (App Service Environment), e.g. "West
     * US"
     * 
     * @param {string} [hostingEnvironmentEnvelope.provisioningState] Provisioning
     * state of the hostingEnvironment (App Service Environment). Possible values
     * include: 'Succeeded', 'Failed', 'Canceled', 'InProgress', 'Deleting'
     * 
     * @param {string} [hostingEnvironmentEnvelope.status] Current status of the
     * hostingEnvironment (App Service Environment). Possible values include:
     * 'Preparing', 'Ready', 'Scaling', 'Deleting'
     * 
     * @param {string} [hostingEnvironmentEnvelope.vnetName] Name of the
     * hostingEnvironment's (App Service Environment) virtual network
     * 
     * @param {string} [hostingEnvironmentEnvelope.vnetResourceGroupName] Resource
     * group of the hostingEnvironment's (App Service Environment) virtual network
     * 
     * @param {string} [hostingEnvironmentEnvelope.vnetSubnetName] Subnet of the
     * hostingEnvironment's (App Service Environment) virtual network
     * 
     * @param {object} [hostingEnvironmentEnvelope.virtualNetwork] Description of
     * the hostingEnvironment's (App Service Environment) virtual network
     * 
     * @param {string} [hostingEnvironmentEnvelope.virtualNetwork.id] Resource id
     * of the virtual network
     * 
     * @param {string} [hostingEnvironmentEnvelope.virtualNetwork.name] Name of
     * the virtual network (read-only)
     * 
     * @param {string} [hostingEnvironmentEnvelope.virtualNetwork.type] Resource
     * type of the virtual network (read-only)
     * 
     * @param {string} [hostingEnvironmentEnvelope.virtualNetwork.subnet] Subnet
     * within the virtual network
     * 
     * @param {string} [hostingEnvironmentEnvelope.internalLoadBalancingMode]
     * Specifies which endpoints to serve internally in the hostingEnvironment's
     * (App Service Environment) VNET. Possible values include: 'None', 'Web',
     * 'Publishing'
     * 
     * @param {string} [hostingEnvironmentEnvelope.multiSize] Front-end VM size,
     * e.g. "Medium", "Large"
     * 
     * @param {number} [hostingEnvironmentEnvelope.multiRoleCount] Number of
     * front-end instances
     * 
     * @param {array} [hostingEnvironmentEnvelope.workerPools] Description of
     * worker pools with worker size ids, VM sizes, and number of workers in each
     * pool
     * 
     * @param {number} [hostingEnvironmentEnvelope.ipsslAddressCount] Number of IP
     * SSL addresses reserved for this hostingEnvironment (App Service
     * Environment)
     * 
     * @param {string} [hostingEnvironmentEnvelope.databaseEdition] Edition of the
     * metadata database for the hostingEnvironment (App Service Environment)
     * e.g. "Standard"
     * 
     * @param {string} [hostingEnvironmentEnvelope.databaseServiceObjective]
     * Service objective of the metadata database for the hostingEnvironment (App
     * Service Environment) e.g. "S0"
     * 
     * @param {number} [hostingEnvironmentEnvelope.upgradeDomains] Number of
     * upgrade domains of this hostingEnvironment (App Service Environment)
     * 
     * @param {string} [hostingEnvironmentEnvelope.subscriptionId] Subscription of
     * the hostingEnvironment (App Service Environment)
     * 
     * @param {string} [hostingEnvironmentEnvelope.dnsSuffix] DNS suffix of the
     * hostingEnvironment (App Service Environment)
     * 
     * @param {string} [hostingEnvironmentEnvelope.lastAction] Last deployment
     * action on this hostingEnvironment (App Service Environment)
     * 
     * @param {string} [hostingEnvironmentEnvelope.lastActionResult] Result of the
     * last deployment action on this hostingEnvironment (App Service Environment)
     * 
     * @param {string} [hostingEnvironmentEnvelope.allowedMultiSizes] List of
     * comma separated strings describing which VM sizes are allowed for
     * front-ends
     * 
     * @param {string} [hostingEnvironmentEnvelope.allowedWorkerSizes] List of
     * comma separated strings describing which VM sizes are allowed for workers
     * 
     * @param {number} [hostingEnvironmentEnvelope.maximumNumberOfMachines]
     * Maximum number of VMs in this hostingEnvironment (App Service Environment)
     * 
     * @param {array} [hostingEnvironmentEnvelope.vipMappings] Description of IP
     * SSL mapping for this hostingEnvironment (App Service Environment)
     * 
     * @param {array} [hostingEnvironmentEnvelope.environmentCapacities] Current
     * total, used, and available worker capacities
     * 
     * @param {array} [hostingEnvironmentEnvelope.networkAccessControlList] Access
     * control list for controlling traffic to the hostingEnvironment (App
     * Service Environment)
     * 
     * @param {boolean} [hostingEnvironmentEnvelope.environmentIsHealthy]
     * True/false indicating whether the hostingEnvironment (App Service
     * Environment) is healthy
     * 
     * @param {string} [hostingEnvironmentEnvelope.environmentStatus] Detailed
     * message about with results of the last check of the hostingEnvironment
     * (App Service Environment)
     * 
     * @param {string} [hostingEnvironmentEnvelope.resourceGroup] Resource group
     * of the hostingEnvironment (App Service Environment)
     * 
     * @param {string} [hostingEnvironmentEnvelope.apiManagementAccountId] Api
     * Management Account associated with this Hosting Environment
     * 
     * @param {boolean} [hostingEnvironmentEnvelope.suspended] True/false
     * indicating whether the hostingEnvironment is suspended. The environment
     * can be suspended e.g. when the management endpoint is no longer available
     * (most likely because NSG blocked the incoming traffic)
     * 
     * @param {array} [hostingEnvironmentEnvelope.clusterSettings] Custom settings
     * for changing the behavior of the hosting environment
     * 
     * @param {string} [hostingEnvironmentEnvelope.id] Resource Id
     * 
     * @param {string} [hostingEnvironmentEnvelope.name] Resource Name
     * 
     * @param {string} [hostingEnvironmentEnvelope.kind] Kind of resource
     * 
     * @param {string} hostingEnvironmentEnvelope.location Resource Location
     * 
     * @param {string} [hostingEnvironmentEnvelope.type] Resource type
     * 
     * @param {object} [hostingEnvironmentEnvelope.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateHostingEnvironment(resourceGroupName: string, name: string, hostingEnvironmentEnvelope: models.HostingEnvironment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HostingEnvironment>): void;
    createOrUpdateHostingEnvironment(resourceGroupName: string, name: string, hostingEnvironmentEnvelope: models.HostingEnvironment, callback: ServiceCallback<models.HostingEnvironment>): void;

    /**
     * @summary Create or update a hostingEnvironment (App Service Environment).
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {object} hostingEnvironmentEnvelope Properties of hostingEnvironment
     * (App Service Environment)
     * 
     * @param {string} [hostingEnvironmentEnvelope.hostingEnvironmentName] Name of
     * the hostingEnvironment (App Service Environment)
     * 
     * @param {string} [hostingEnvironmentEnvelope.hostingEnvironmentLocation]
     * Location of the hostingEnvironment (App Service Environment), e.g. "West
     * US"
     * 
     * @param {string} [hostingEnvironmentEnvelope.provisioningState] Provisioning
     * state of the hostingEnvironment (App Service Environment). Possible values
     * include: 'Succeeded', 'Failed', 'Canceled', 'InProgress', 'Deleting'
     * 
     * @param {string} [hostingEnvironmentEnvelope.status] Current status of the
     * hostingEnvironment (App Service Environment). Possible values include:
     * 'Preparing', 'Ready', 'Scaling', 'Deleting'
     * 
     * @param {string} [hostingEnvironmentEnvelope.vnetName] Name of the
     * hostingEnvironment's (App Service Environment) virtual network
     * 
     * @param {string} [hostingEnvironmentEnvelope.vnetResourceGroupName] Resource
     * group of the hostingEnvironment's (App Service Environment) virtual network
     * 
     * @param {string} [hostingEnvironmentEnvelope.vnetSubnetName] Subnet of the
     * hostingEnvironment's (App Service Environment) virtual network
     * 
     * @param {object} [hostingEnvironmentEnvelope.virtualNetwork] Description of
     * the hostingEnvironment's (App Service Environment) virtual network
     * 
     * @param {string} [hostingEnvironmentEnvelope.virtualNetwork.id] Resource id
     * of the virtual network
     * 
     * @param {string} [hostingEnvironmentEnvelope.virtualNetwork.name] Name of
     * the virtual network (read-only)
     * 
     * @param {string} [hostingEnvironmentEnvelope.virtualNetwork.type] Resource
     * type of the virtual network (read-only)
     * 
     * @param {string} [hostingEnvironmentEnvelope.virtualNetwork.subnet] Subnet
     * within the virtual network
     * 
     * @param {string} [hostingEnvironmentEnvelope.internalLoadBalancingMode]
     * Specifies which endpoints to serve internally in the hostingEnvironment's
     * (App Service Environment) VNET. Possible values include: 'None', 'Web',
     * 'Publishing'
     * 
     * @param {string} [hostingEnvironmentEnvelope.multiSize] Front-end VM size,
     * e.g. "Medium", "Large"
     * 
     * @param {number} [hostingEnvironmentEnvelope.multiRoleCount] Number of
     * front-end instances
     * 
     * @param {array} [hostingEnvironmentEnvelope.workerPools] Description of
     * worker pools with worker size ids, VM sizes, and number of workers in each
     * pool
     * 
     * @param {number} [hostingEnvironmentEnvelope.ipsslAddressCount] Number of IP
     * SSL addresses reserved for this hostingEnvironment (App Service
     * Environment)
     * 
     * @param {string} [hostingEnvironmentEnvelope.databaseEdition] Edition of the
     * metadata database for the hostingEnvironment (App Service Environment)
     * e.g. "Standard"
     * 
     * @param {string} [hostingEnvironmentEnvelope.databaseServiceObjective]
     * Service objective of the metadata database for the hostingEnvironment (App
     * Service Environment) e.g. "S0"
     * 
     * @param {number} [hostingEnvironmentEnvelope.upgradeDomains] Number of
     * upgrade domains of this hostingEnvironment (App Service Environment)
     * 
     * @param {string} [hostingEnvironmentEnvelope.subscriptionId] Subscription of
     * the hostingEnvironment (App Service Environment)
     * 
     * @param {string} [hostingEnvironmentEnvelope.dnsSuffix] DNS suffix of the
     * hostingEnvironment (App Service Environment)
     * 
     * @param {string} [hostingEnvironmentEnvelope.lastAction] Last deployment
     * action on this hostingEnvironment (App Service Environment)
     * 
     * @param {string} [hostingEnvironmentEnvelope.lastActionResult] Result of the
     * last deployment action on this hostingEnvironment (App Service Environment)
     * 
     * @param {string} [hostingEnvironmentEnvelope.allowedMultiSizes] List of
     * comma separated strings describing which VM sizes are allowed for
     * front-ends
     * 
     * @param {string} [hostingEnvironmentEnvelope.allowedWorkerSizes] List of
     * comma separated strings describing which VM sizes are allowed for workers
     * 
     * @param {number} [hostingEnvironmentEnvelope.maximumNumberOfMachines]
     * Maximum number of VMs in this hostingEnvironment (App Service Environment)
     * 
     * @param {array} [hostingEnvironmentEnvelope.vipMappings] Description of IP
     * SSL mapping for this hostingEnvironment (App Service Environment)
     * 
     * @param {array} [hostingEnvironmentEnvelope.environmentCapacities] Current
     * total, used, and available worker capacities
     * 
     * @param {array} [hostingEnvironmentEnvelope.networkAccessControlList] Access
     * control list for controlling traffic to the hostingEnvironment (App
     * Service Environment)
     * 
     * @param {boolean} [hostingEnvironmentEnvelope.environmentIsHealthy]
     * True/false indicating whether the hostingEnvironment (App Service
     * Environment) is healthy
     * 
     * @param {string} [hostingEnvironmentEnvelope.environmentStatus] Detailed
     * message about with results of the last check of the hostingEnvironment
     * (App Service Environment)
     * 
     * @param {string} [hostingEnvironmentEnvelope.resourceGroup] Resource group
     * of the hostingEnvironment (App Service Environment)
     * 
     * @param {string} [hostingEnvironmentEnvelope.apiManagementAccountId] Api
     * Management Account associated with this Hosting Environment
     * 
     * @param {boolean} [hostingEnvironmentEnvelope.suspended] True/false
     * indicating whether the hostingEnvironment is suspended. The environment
     * can be suspended e.g. when the management endpoint is no longer available
     * (most likely because NSG blocked the incoming traffic)
     * 
     * @param {array} [hostingEnvironmentEnvelope.clusterSettings] Custom settings
     * for changing the behavior of the hosting environment
     * 
     * @param {string} [hostingEnvironmentEnvelope.id] Resource Id
     * 
     * @param {string} [hostingEnvironmentEnvelope.name] Resource Name
     * 
     * @param {string} [hostingEnvironmentEnvelope.kind] Kind of resource
     * 
     * @param {string} hostingEnvironmentEnvelope.location Resource Location
     * 
     * @param {string} [hostingEnvironmentEnvelope.type] Resource type
     * 
     * @param {object} [hostingEnvironmentEnvelope.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreateOrUpdateHostingEnvironment(resourceGroupName: string, name: string, hostingEnvironmentEnvelope: models.HostingEnvironment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HostingEnvironment>): void;
    beginCreateOrUpdateHostingEnvironment(resourceGroupName: string, name: string, hostingEnvironmentEnvelope: models.HostingEnvironment, callback: ServiceCallback<models.HostingEnvironment>): void;

    /**
     * @summary Delete a hostingEnvironment (App Service Environment).
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.forceDelete] Delete even if the
     * hostingEnvironment (App Service Environment) contains resources
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteHostingEnvironment(resourceGroupName: string, name: string, options: { forceDelete? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteHostingEnvironment(resourceGroupName: string, name: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Delete a hostingEnvironment (App Service Environment).
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.forceDelete] Delete even if the
     * hostingEnvironment (App Service Environment) contains resources
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginDeleteHostingEnvironment(resourceGroupName: string, name: string, options: { forceDelete? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    beginDeleteHostingEnvironment(resourceGroupName: string, name: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Get diagnostic information for hostingEnvironment (App Service
     * Environment).
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHostingEnvironmentDiagnostics(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HostingEnvironmentDiagnostics[]>): void;
    getHostingEnvironmentDiagnostics(resourceGroupName: string, name: string, callback: ServiceCallback<models.HostingEnvironmentDiagnostics[]>): void;

    /**
     * @summary Get diagnostic information for hostingEnvironment (App Service
     * Environment).
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {string} diagnosticsName Name of the diagnostics
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHostingEnvironmentDiagnosticsItem(resourceGroupName: string, name: string, diagnosticsName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HostingEnvironmentDiagnostics>): void;
    getHostingEnvironmentDiagnosticsItem(resourceGroupName: string, name: string, diagnosticsName: string, callback: ServiceCallback<models.HostingEnvironmentDiagnostics>): void;

    /**
     * @summary Get used, available, and total worker capacity for
     * hostingEnvironment (App Service Environment).
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHostingEnvironmentCapacities(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StampCapacityCollection>): void;
    getHostingEnvironmentCapacities(resourceGroupName: string, name: string, callback: ServiceCallback<models.StampCapacityCollection>): void;

    /**
     * @summary Get IP addresses assigned to the hostingEnvironment (App Service
     * Environment).
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHostingEnvironmentVips(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AddressResponse>): void;
    getHostingEnvironmentVips(resourceGroupName: string, name: string, callback: ServiceCallback<models.AddressResponse>): void;

    /**
     * @summary Get all hostingEnvironments (App Service Environments) in a
     * resource group.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHostingEnvironments(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HostingEnvironmentCollection>): void;
    getHostingEnvironments(resourceGroupName: string, callback: ServiceCallback<models.HostingEnvironmentCollection>): void;

    /**
     * @summary Reboots all machines in a hostingEnvironment (App Service
     * Environment).
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    rebootHostingEnvironment(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    rebootHostingEnvironment(resourceGroupName: string, name: string, callback: ServiceCallback<any>): void;

    /**
     * @summary List all currently running operations on the hostingEnvironment
     * (App Service Environment)
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHostingEnvironmentOperations(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getHostingEnvironmentOperations(resourceGroupName: string, name: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Get status of an operation on a hostingEnvironment (App Service
     * Environment).
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {string} operationId operation identifier GUID
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHostingEnvironmentOperation(resourceGroupName: string, name: string, operationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getHostingEnvironmentOperation(resourceGroupName: string, name: string, operationId: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Get global metrics of hostingEnvironment (App Service Environment).
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.details] Include instance details
     * 
     * @param {string} [options.filter] Return only usages/metrics specified in
     * the filter. Filter conforms to odata syntax. Example: $filter=(name.value
     * eq 'Metric1' or name.value eq 'Metric2') and startTime eq
     * '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain
     * eq duration'[Hour|Minute|Day]'.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHostingEnvironmentMetrics(resourceGroupName: string, name: string, options: { details? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricCollection>): void;
    getHostingEnvironmentMetrics(resourceGroupName: string, name: string, callback: ServiceCallback<models.ResourceMetricCollection>): void;

    /**
     * @summary Get global metric definitions of hostingEnvironment (App Service
     * Environment).
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHostingEnvironmentMetricDefinitions(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricDefinition>): void;
    getHostingEnvironmentMetricDefinitions(resourceGroupName: string, name: string, callback: ServiceCallback<models.MetricDefinition>): void;

    /**
     * @summary Get global usages of hostingEnvironment (App Service Environment).
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.filter] Return only usages/metrics specified in
     * the filter. Filter conforms to odata syntax. Example: $filter=(name.value
     * eq 'Metric1' or name.value eq 'Metric2') and startTime eq
     * '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain
     * eq duration'[Hour|Minute|Day]'.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHostingEnvironmentUsages(resourceGroupName: string, name: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CsmUsageQuotaCollection>): void;
    getHostingEnvironmentUsages(resourceGroupName: string, name: string, callback: ServiceCallback<models.CsmUsageQuotaCollection>): void;

    /**
     * @summary Get metrics for a multiRole pool of a hostingEnvironment (App
     * Service Environment).
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.startTime] Beginning time of metrics query
     * 
     * @param {string} [options.endTime] End time of metrics query
     * 
     * @param {string} [options.timeGrain] Time granularity of metrics query
     * 
     * @param {boolean} [options.details] Include instance details
     * 
     * @param {string} [options.filter] Return only usages/metrics specified in
     * the filter. Filter conforms to odata syntax. Example: $filter=(name.value
     * eq 'Metric1' or name.value eq 'Metric2') and startTime eq
     * '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain
     * eq duration'[Hour|Minute|Day]'.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHostingEnvironmentMultiRoleMetrics(resourceGroupName: string, name: string, options: { startTime? : string, endTime? : string, timeGrain? : string, details? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricCollection>): void;
    getHostingEnvironmentMultiRoleMetrics(resourceGroupName: string, name: string, callback: ServiceCallback<models.ResourceMetricCollection>): void;

    /**
     * @summary Get metrics for a worker pool of a hostingEnvironment (App Service
     * Environment).
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {string} workerPoolName Name of worker pool
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.details] Include instance details
     * 
     * @param {string} [options.filter] Return only usages/metrics specified in
     * the filter. Filter conforms to odata syntax. Example: $filter=(name.value
     * eq 'Metric1' or name.value eq 'Metric2') and startTime eq
     * '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain
     * eq duration'[Hour|Minute|Day]'.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHostingEnvironmentWebWorkerMetrics(resourceGroupName: string, name: string, workerPoolName: string, options: { details? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricCollection>): void;
    getHostingEnvironmentWebWorkerMetrics(resourceGroupName: string, name: string, workerPoolName: string, callback: ServiceCallback<models.ResourceMetricCollection>): void;

    /**
     * @summary Get metric definitions for a multiRole pool of a
     * hostingEnvironment (App Service Environment).
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHostingEnvironmentMultiRoleMetricDefinitions(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricDefinitionCollection>): void;
    getHostingEnvironmentMultiRoleMetricDefinitions(resourceGroupName: string, name: string, callback: ServiceCallback<models.MetricDefinitionCollection>): void;

    /**
     * @summary Get metric definitions for a worker pool of a hostingEnvironment
     * (App Service Environment).
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {string} workerPoolName Name of worker pool
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHostingEnvironmentWebWorkerMetricDefinitions(resourceGroupName: string, name: string, workerPoolName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricDefinitionCollection>): void;
    getHostingEnvironmentWebWorkerMetricDefinitions(resourceGroupName: string, name: string, workerPoolName: string, callback: ServiceCallback<models.MetricDefinitionCollection>): void;

    /**
     * @summary Get usages for a multiRole pool of a hostingEnvironment (App
     * Service Environment).
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHostingEnvironmentMultiRoleUsages(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UsageCollection>): void;
    getHostingEnvironmentMultiRoleUsages(resourceGroupName: string, name: string, callback: ServiceCallback<models.UsageCollection>): void;

    /**
     * @summary Get usages for a worker pool of a hostingEnvironment (App Service
     * Environment).
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {string} workerPoolName Name of worker pool
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHostingEnvironmentWebWorkerUsages(resourceGroupName: string, name: string, workerPoolName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UsageCollection>): void;
    getHostingEnvironmentWebWorkerUsages(resourceGroupName: string, name: string, workerPoolName: string, callback: ServiceCallback<models.UsageCollection>): void;

    /**
     * @summary Get all sites on the hostingEnvironment (App Service Environment).
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.propertiesToInclude] Comma separated list of site
     * properties to include
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHostingEnvironmentSites(resourceGroupName: string, name: string, options: { propertiesToInclude? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteCollection>): void;
    getHostingEnvironmentSites(resourceGroupName: string, name: string, callback: ServiceCallback<models.SiteCollection>): void;

    /**
     * @summary Get all serverfarms (App Service Plans) on the hostingEnvironment
     * (App Service Environment).
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHostingEnvironmentWebHostingPlans(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerFarmCollection>): void;
    getHostingEnvironmentWebHostingPlans(resourceGroupName: string, name: string, callback: ServiceCallback<models.ServerFarmCollection>): void;

    /**
     * @summary Get all serverfarms (App Service Plans) on the hostingEnvironment
     * (App Service Environment).
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHostingEnvironmentServerFarms(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerFarmCollection>): void;
    getHostingEnvironmentServerFarms(resourceGroupName: string, name: string, callback: ServiceCallback<models.ServerFarmCollection>): void;

    /**
     * @summary Get all multi role pools
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getMultiRolePools(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkerPoolCollection>): void;
    getMultiRolePools(resourceGroupName: string, name: string, callback: ServiceCallback<models.WorkerPoolCollection>): void;

    /**
     * @summary Get properties of a multiRool pool.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getMultiRolePool(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkerPool>): void;
    getMultiRolePool(resourceGroupName: string, name: string, callback: ServiceCallback<models.WorkerPool>): void;

    /**
     * @summary Create or update a multiRole pool.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {object} multiRolePoolEnvelope Properties of multiRole pool
     * 
     * @param {number} [multiRolePoolEnvelope.workerSizeId] Worker size id for
     * referencing this worker pool
     * 
     * @param {string} [multiRolePoolEnvelope.computeMode] Shared or dedicated web
     * app hosting. Possible values include: 'Shared', 'Dedicated', 'Dynamic'
     * 
     * @param {string} [multiRolePoolEnvelope.workerSize] VM size of the worker
     * pool instances
     * 
     * @param {number} [multiRolePoolEnvelope.workerCount] Number of instances in
     * the worker pool
     * 
     * @param {array} [multiRolePoolEnvelope.instanceNames] Names of all instances
     * in the worker pool (read only)
     * 
     * @param {object} [multiRolePoolEnvelope.sku]
     * 
     * @param {string} [multiRolePoolEnvelope.sku.name] Name of the resource sku
     * 
     * @param {string} [multiRolePoolEnvelope.sku.tier] Service Tier of the
     * resource sku
     * 
     * @param {string} [multiRolePoolEnvelope.sku.size] Size specifier of the
     * resource sku
     * 
     * @param {string} [multiRolePoolEnvelope.sku.family] Family code of the
     * resource sku
     * 
     * @param {number} [multiRolePoolEnvelope.sku.capacity] Current number of
     * instances assigned to the resource
     * 
     * @param {string} [multiRolePoolEnvelope.id] Resource Id
     * 
     * @param {string} [multiRolePoolEnvelope.name] Resource Name
     * 
     * @param {string} [multiRolePoolEnvelope.kind] Kind of resource
     * 
     * @param {string} multiRolePoolEnvelope.location Resource Location
     * 
     * @param {string} [multiRolePoolEnvelope.type] Resource type
     * 
     * @param {object} [multiRolePoolEnvelope.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateMultiRolePool(resourceGroupName: string, name: string, multiRolePoolEnvelope: models.WorkerPool, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkerPool>): void;
    createOrUpdateMultiRolePool(resourceGroupName: string, name: string, multiRolePoolEnvelope: models.WorkerPool, callback: ServiceCallback<models.WorkerPool>): void;

    /**
     * @summary Create or update a multiRole pool.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {object} multiRolePoolEnvelope Properties of multiRole pool
     * 
     * @param {number} [multiRolePoolEnvelope.workerSizeId] Worker size id for
     * referencing this worker pool
     * 
     * @param {string} [multiRolePoolEnvelope.computeMode] Shared or dedicated web
     * app hosting. Possible values include: 'Shared', 'Dedicated', 'Dynamic'
     * 
     * @param {string} [multiRolePoolEnvelope.workerSize] VM size of the worker
     * pool instances
     * 
     * @param {number} [multiRolePoolEnvelope.workerCount] Number of instances in
     * the worker pool
     * 
     * @param {array} [multiRolePoolEnvelope.instanceNames] Names of all instances
     * in the worker pool (read only)
     * 
     * @param {object} [multiRolePoolEnvelope.sku]
     * 
     * @param {string} [multiRolePoolEnvelope.sku.name] Name of the resource sku
     * 
     * @param {string} [multiRolePoolEnvelope.sku.tier] Service Tier of the
     * resource sku
     * 
     * @param {string} [multiRolePoolEnvelope.sku.size] Size specifier of the
     * resource sku
     * 
     * @param {string} [multiRolePoolEnvelope.sku.family] Family code of the
     * resource sku
     * 
     * @param {number} [multiRolePoolEnvelope.sku.capacity] Current number of
     * instances assigned to the resource
     * 
     * @param {string} [multiRolePoolEnvelope.id] Resource Id
     * 
     * @param {string} [multiRolePoolEnvelope.name] Resource Name
     * 
     * @param {string} [multiRolePoolEnvelope.kind] Kind of resource
     * 
     * @param {string} multiRolePoolEnvelope.location Resource Location
     * 
     * @param {string} [multiRolePoolEnvelope.type] Resource type
     * 
     * @param {object} [multiRolePoolEnvelope.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreateOrUpdateMultiRolePool(resourceGroupName: string, name: string, multiRolePoolEnvelope: models.WorkerPool, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkerPool>): void;
    beginCreateOrUpdateMultiRolePool(resourceGroupName: string, name: string, multiRolePoolEnvelope: models.WorkerPool, callback: ServiceCallback<models.WorkerPool>): void;

    /**
     * @summary Get available skus for scaling a multiRole pool.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getMultiRolePoolSkus(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SkuInfoCollection>): void;
    getMultiRolePoolSkus(resourceGroupName: string, name: string, callback: ServiceCallback<models.SkuInfoCollection>): void;

    /**
     * @summary Get all worker pools
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getWorkerPools(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkerPoolCollection>): void;
    getWorkerPools(resourceGroupName: string, name: string, callback: ServiceCallback<models.WorkerPoolCollection>): void;

    /**
     * @summary Get properties of a worker pool.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {string} workerPoolName Name of worker pool
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getWorkerPool(resourceGroupName: string, name: string, workerPoolName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkerPool>): void;
    getWorkerPool(resourceGroupName: string, name: string, workerPoolName: string, callback: ServiceCallback<models.WorkerPool>): void;

    /**
     * @summary Create or update a worker pool.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {string} workerPoolName Name of worker pool
     * 
     * @param {object} workerPoolEnvelope Properties of worker pool
     * 
     * @param {number} [workerPoolEnvelope.workerSizeId] Worker size id for
     * referencing this worker pool
     * 
     * @param {string} [workerPoolEnvelope.computeMode] Shared or dedicated web
     * app hosting. Possible values include: 'Shared', 'Dedicated', 'Dynamic'
     * 
     * @param {string} [workerPoolEnvelope.workerSize] VM size of the worker pool
     * instances
     * 
     * @param {number} [workerPoolEnvelope.workerCount] Number of instances in the
     * worker pool
     * 
     * @param {array} [workerPoolEnvelope.instanceNames] Names of all instances in
     * the worker pool (read only)
     * 
     * @param {object} [workerPoolEnvelope.sku]
     * 
     * @param {string} [workerPoolEnvelope.sku.name] Name of the resource sku
     * 
     * @param {string} [workerPoolEnvelope.sku.tier] Service Tier of the resource
     * sku
     * 
     * @param {string} [workerPoolEnvelope.sku.size] Size specifier of the
     * resource sku
     * 
     * @param {string} [workerPoolEnvelope.sku.family] Family code of the resource
     * sku
     * 
     * @param {number} [workerPoolEnvelope.sku.capacity] Current number of
     * instances assigned to the resource
     * 
     * @param {string} [workerPoolEnvelope.id] Resource Id
     * 
     * @param {string} [workerPoolEnvelope.name] Resource Name
     * 
     * @param {string} [workerPoolEnvelope.kind] Kind of resource
     * 
     * @param {string} workerPoolEnvelope.location Resource Location
     * 
     * @param {string} [workerPoolEnvelope.type] Resource type
     * 
     * @param {object} [workerPoolEnvelope.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateWorkerPool(resourceGroupName: string, name: string, workerPoolName: string, workerPoolEnvelope: models.WorkerPool, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkerPool>): void;
    createOrUpdateWorkerPool(resourceGroupName: string, name: string, workerPoolName: string, workerPoolEnvelope: models.WorkerPool, callback: ServiceCallback<models.WorkerPool>): void;

    /**
     * @summary Create or update a worker pool.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {string} workerPoolName Name of worker pool
     * 
     * @param {object} workerPoolEnvelope Properties of worker pool
     * 
     * @param {number} [workerPoolEnvelope.workerSizeId] Worker size id for
     * referencing this worker pool
     * 
     * @param {string} [workerPoolEnvelope.computeMode] Shared or dedicated web
     * app hosting. Possible values include: 'Shared', 'Dedicated', 'Dynamic'
     * 
     * @param {string} [workerPoolEnvelope.workerSize] VM size of the worker pool
     * instances
     * 
     * @param {number} [workerPoolEnvelope.workerCount] Number of instances in the
     * worker pool
     * 
     * @param {array} [workerPoolEnvelope.instanceNames] Names of all instances in
     * the worker pool (read only)
     * 
     * @param {object} [workerPoolEnvelope.sku]
     * 
     * @param {string} [workerPoolEnvelope.sku.name] Name of the resource sku
     * 
     * @param {string} [workerPoolEnvelope.sku.tier] Service Tier of the resource
     * sku
     * 
     * @param {string} [workerPoolEnvelope.sku.size] Size specifier of the
     * resource sku
     * 
     * @param {string} [workerPoolEnvelope.sku.family] Family code of the resource
     * sku
     * 
     * @param {number} [workerPoolEnvelope.sku.capacity] Current number of
     * instances assigned to the resource
     * 
     * @param {string} [workerPoolEnvelope.id] Resource Id
     * 
     * @param {string} [workerPoolEnvelope.name] Resource Name
     * 
     * @param {string} [workerPoolEnvelope.kind] Kind of resource
     * 
     * @param {string} workerPoolEnvelope.location Resource Location
     * 
     * @param {string} [workerPoolEnvelope.type] Resource type
     * 
     * @param {object} [workerPoolEnvelope.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreateOrUpdateWorkerPool(resourceGroupName: string, name: string, workerPoolName: string, workerPoolEnvelope: models.WorkerPool, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkerPool>): void;
    beginCreateOrUpdateWorkerPool(resourceGroupName: string, name: string, workerPoolName: string, workerPoolEnvelope: models.WorkerPool, callback: ServiceCallback<models.WorkerPool>): void;

    /**
     * @summary Get available skus for scaling a worker pool.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {string} workerPoolName Name of worker pool
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getWorkerPoolSkus(resourceGroupName: string, name: string, workerPoolName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SkuInfoCollection>): void;
    getWorkerPoolSkus(resourceGroupName: string, name: string, workerPoolName: string, callback: ServiceCallback<models.SkuInfoCollection>): void;

    /**
     * @summary Get metrics for a specific instance of a worker pool of a
     * hostingEnvironment (App Service Environment).
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {string} workerPoolName Name of worker pool
     * 
     * @param {string} instance Name of instance in the worker pool
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.details] Include instance details
     * 
     * @param {string} [options.filter] Return only usages/metrics specified in
     * the filter. Filter conforms to odata syntax. Example: $filter=(name.value
     * eq 'Metric1' or name.value eq 'Metric2') and startTime eq
     * '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain
     * eq duration'[Hour|Minute|Day]'.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getWorkerPoolInstanceMetrics(resourceGroupName: string, name: string, workerPoolName: string, instance: string, options: { details? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getWorkerPoolInstanceMetrics(resourceGroupName: string, name: string, workerPoolName: string, instance: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Get metric definitions for a specific instance of a worker pool of
     * a hostingEnvironment (App Service Environment).
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {string} workerPoolName Name of worker pool
     * 
     * @param {string} instance Name of instance in the worker pool
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getWorkerPoolInstanceMetricDefinitions(resourceGroupName: string, name: string, workerPoolName: string, instance: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getWorkerPoolInstanceMetricDefinitions(resourceGroupName: string, name: string, workerPoolName: string, instance: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Get metrics for a specific instance of a multiRole pool of a
     * hostingEnvironment (App Service Environment).
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {string} instance Name of instance in the multiRole pool
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.details] Include instance details
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getMultiRolePoolInstanceMetrics(resourceGroupName: string, name: string, instance: string, options: { details? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getMultiRolePoolInstanceMetrics(resourceGroupName: string, name: string, instance: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Get metric definitions for a specific instance of a multiRole pool
     * of a hostingEnvironment (App Service Environment).
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {string} instance Name of instance in the multiRole pool&gt;
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getMultiRolePoolInstanceMetricDefinitions(resourceGroupName: string, name: string, instance: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getMultiRolePoolInstanceMetricDefinitions(resourceGroupName: string, name: string, instance: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Suspends the hostingEnvironment.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    suspendHostingEnvironment(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteCollection>): void;
    suspendHostingEnvironment(resourceGroupName: string, name: string, callback: ServiceCallback<models.SiteCollection>): void;

    /**
     * @summary Suspends the hostingEnvironment.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginSuspendHostingEnvironment(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteCollection>): void;
    beginSuspendHostingEnvironment(resourceGroupName: string, name: string, callback: ServiceCallback<models.SiteCollection>): void;

    /**
     * @summary Resumes the hostingEnvironment.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    resumeHostingEnvironment(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteCollection>): void;
    resumeHostingEnvironment(resourceGroupName: string, name: string, callback: ServiceCallback<models.SiteCollection>): void;

    /**
     * @summary Resumes the hostingEnvironment.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of hostingEnvironment (App Service Environment)
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginResumeHostingEnvironment(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteCollection>): void;
    beginResumeHostingEnvironment(resourceGroupName: string, name: string, callback: ServiceCallback<models.SiteCollection>): void;

    /**
     * @summary Get used, available, and total worker capacity for
     * hostingEnvironment (App Service Environment).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHostingEnvironmentCapacitiesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StampCapacityCollection>): void;
    getHostingEnvironmentCapacitiesNext(nextPageLink: string, callback: ServiceCallback<models.StampCapacityCollection>): void;

    /**
     * @summary Get all hostingEnvironments (App Service Environments) in a
     * resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHostingEnvironmentsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HostingEnvironmentCollection>): void;
    getHostingEnvironmentsNext(nextPageLink: string, callback: ServiceCallback<models.HostingEnvironmentCollection>): void;

    /**
     * @summary Get global metrics of hostingEnvironment (App Service Environment).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHostingEnvironmentMetricsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricCollection>): void;
    getHostingEnvironmentMetricsNext(nextPageLink: string, callback: ServiceCallback<models.ResourceMetricCollection>): void;

    /**
     * @summary Get global usages of hostingEnvironment (App Service Environment).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHostingEnvironmentUsagesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CsmUsageQuotaCollection>): void;
    getHostingEnvironmentUsagesNext(nextPageLink: string, callback: ServiceCallback<models.CsmUsageQuotaCollection>): void;

    /**
     * @summary Get metrics for a multiRole pool of a hostingEnvironment (App
     * Service Environment).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHostingEnvironmentMultiRoleMetricsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricCollection>): void;
    getHostingEnvironmentMultiRoleMetricsNext(nextPageLink: string, callback: ServiceCallback<models.ResourceMetricCollection>): void;

    /**
     * @summary Get metrics for a worker pool of a hostingEnvironment (App Service
     * Environment).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHostingEnvironmentWebWorkerMetricsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricCollection>): void;
    getHostingEnvironmentWebWorkerMetricsNext(nextPageLink: string, callback: ServiceCallback<models.ResourceMetricCollection>): void;

    /**
     * @summary Get metric definitions for a multiRole pool of a
     * hostingEnvironment (App Service Environment).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHostingEnvironmentMultiRoleMetricDefinitionsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricDefinitionCollection>): void;
    getHostingEnvironmentMultiRoleMetricDefinitionsNext(nextPageLink: string, callback: ServiceCallback<models.MetricDefinitionCollection>): void;

    /**
     * @summary Get metric definitions for a worker pool of a hostingEnvironment
     * (App Service Environment).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHostingEnvironmentWebWorkerMetricDefinitionsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricDefinitionCollection>): void;
    getHostingEnvironmentWebWorkerMetricDefinitionsNext(nextPageLink: string, callback: ServiceCallback<models.MetricDefinitionCollection>): void;

    /**
     * @summary Get usages for a multiRole pool of a hostingEnvironment (App
     * Service Environment).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHostingEnvironmentMultiRoleUsagesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UsageCollection>): void;
    getHostingEnvironmentMultiRoleUsagesNext(nextPageLink: string, callback: ServiceCallback<models.UsageCollection>): void;

    /**
     * @summary Get usages for a worker pool of a hostingEnvironment (App Service
     * Environment).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHostingEnvironmentWebWorkerUsagesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.UsageCollection>): void;
    getHostingEnvironmentWebWorkerUsagesNext(nextPageLink: string, callback: ServiceCallback<models.UsageCollection>): void;

    /**
     * @summary Get all sites on the hostingEnvironment (App Service Environment).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHostingEnvironmentSitesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteCollection>): void;
    getHostingEnvironmentSitesNext(nextPageLink: string, callback: ServiceCallback<models.SiteCollection>): void;

    /**
     * @summary Get all serverfarms (App Service Plans) on the hostingEnvironment
     * (App Service Environment).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHostingEnvironmentWebHostingPlansNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerFarmCollection>): void;
    getHostingEnvironmentWebHostingPlansNext(nextPageLink: string, callback: ServiceCallback<models.ServerFarmCollection>): void;

    /**
     * @summary Get all serverfarms (App Service Plans) on the hostingEnvironment
     * (App Service Environment).
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHostingEnvironmentServerFarmsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerFarmCollection>): void;
    getHostingEnvironmentServerFarmsNext(nextPageLink: string, callback: ServiceCallback<models.ServerFarmCollection>): void;

    /**
     * @summary Get all multi role pools
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getMultiRolePoolsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkerPoolCollection>): void;
    getMultiRolePoolsNext(nextPageLink: string, callback: ServiceCallback<models.WorkerPoolCollection>): void;

    /**
     * @summary Get available skus for scaling a multiRole pool.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getMultiRolePoolSkusNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SkuInfoCollection>): void;
    getMultiRolePoolSkusNext(nextPageLink: string, callback: ServiceCallback<models.SkuInfoCollection>): void;

    /**
     * @summary Get all worker pools
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getWorkerPoolsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WorkerPoolCollection>): void;
    getWorkerPoolsNext(nextPageLink: string, callback: ServiceCallback<models.WorkerPoolCollection>): void;

    /**
     * @summary Get available skus for scaling a worker pool.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getWorkerPoolSkusNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SkuInfoCollection>): void;
    getWorkerPoolSkusNext(nextPageLink: string, callback: ServiceCallback<models.SkuInfoCollection>): void;

    /**
     * @summary Suspends the hostingEnvironment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    suspendHostingEnvironmentNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteCollection>): void;
    suspendHostingEnvironmentNext(nextPageLink: string, callback: ServiceCallback<models.SiteCollection>): void;

    /**
     * @summary Suspends the hostingEnvironment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginSuspendHostingEnvironmentNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteCollection>): void;
    beginSuspendHostingEnvironmentNext(nextPageLink: string, callback: ServiceCallback<models.SiteCollection>): void;

    /**
     * @summary Resumes the hostingEnvironment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    resumeHostingEnvironmentNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteCollection>): void;
    resumeHostingEnvironmentNext(nextPageLink: string, callback: ServiceCallback<models.SiteCollection>): void;

    /**
     * @summary Resumes the hostingEnvironment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginResumeHostingEnvironmentNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteCollection>): void;
    beginResumeHostingEnvironmentNext(nextPageLink: string, callback: ServiceCallback<models.SiteCollection>): void;
}

/**
 * @class
 * ManagedHostingEnvironments
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the WebSiteManagementClient.
 */
export interface ManagedHostingEnvironments {

    /**
     * @summary Get properties of a managed hosting environment.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of managed hosting environment
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getManagedHostingEnvironment(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManagedHostingEnvironment>): void;
    getManagedHostingEnvironment(resourceGroupName: string, name: string, callback: ServiceCallback<models.ManagedHostingEnvironment>): void;

    /**
     * @summary Create or update a managed hosting environment.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of managed hosting environment
     * 
     * @param {object} managedHostingEnvironmentEnvelope Properties of managed
     * hosting environment
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.hostingEnvironmentName]
     * Name of the hostingEnvironment (App Service Environment)
     * 
     * @param {string}
     * [managedHostingEnvironmentEnvelope.hostingEnvironmentLocation] Location of
     * the hostingEnvironment (App Service Environment), e.g. "West US"
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.provisioningState]
     * Provisioning state of the hostingEnvironment (App Service Environment).
     * Possible values include: 'Succeeded', 'Failed', 'Canceled', 'InProgress',
     * 'Deleting'
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.status] Current status
     * of the hostingEnvironment (App Service Environment). Possible values
     * include: 'Preparing', 'Ready', 'Scaling', 'Deleting'
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.vnetName] Name of the
     * hostingEnvironment's (App Service Environment) virtual network
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.vnetResourceGroupName]
     * Resource group of the hostingEnvironment's (App Service Environment)
     * virtual network
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.vnetSubnetName] Subnet
     * of the hostingEnvironment's (App Service Environment) virtual network
     * 
     * @param {object} [managedHostingEnvironmentEnvelope.virtualNetwork]
     * Description of the hostingEnvironment's (App Service Environment) virtual
     * network
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.virtualNetwork.id]
     * Resource id of the virtual network
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.virtualNetwork.name]
     * Name of the virtual network (read-only)
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.virtualNetwork.type]
     * Resource type of the virtual network (read-only)
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.virtualNetwork.subnet]
     * Subnet within the virtual network
     * 
     * @param {string}
     * [managedHostingEnvironmentEnvelope.internalLoadBalancingMode] Specifies
     * which endpoints to serve internally in the hostingEnvironment's (App
     * Service Environment) VNET. Possible values include: 'None', 'Web',
     * 'Publishing'
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.multiSize] Front-end VM
     * size, e.g. "Medium", "Large"
     * 
     * @param {number} [managedHostingEnvironmentEnvelope.multiRoleCount] Number
     * of front-end instances
     * 
     * @param {array} [managedHostingEnvironmentEnvelope.workerPools] Description
     * of worker pools with worker size ids, VM sizes, and number of workers in
     * each pool
     * 
     * @param {number} [managedHostingEnvironmentEnvelope.ipsslAddressCount]
     * Number of IP SSL addresses reserved for this hostingEnvironment (App
     * Service Environment)
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.databaseEdition] Edition
     * of the metadata database for the hostingEnvironment (App Service
     * Environment) e.g. "Standard"
     * 
     * @param {string}
     * [managedHostingEnvironmentEnvelope.databaseServiceObjective] Service
     * objective of the metadata database for the hostingEnvironment (App Service
     * Environment) e.g. "S0"
     * 
     * @param {number} [managedHostingEnvironmentEnvelope.upgradeDomains] Number
     * of upgrade domains of this hostingEnvironment (App Service Environment)
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.subscriptionId]
     * Subscription of the hostingEnvironment (App Service Environment)
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.dnsSuffix] DNS suffix of
     * the hostingEnvironment (App Service Environment)
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.lastAction] Last
     * deployment action on this hostingEnvironment (App Service Environment)
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.lastActionResult] Result
     * of the last deployment action on this hostingEnvironment (App Service
     * Environment)
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.allowedMultiSizes] List
     * of comma separated strings describing which VM sizes are allowed for
     * front-ends
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.allowedWorkerSizes] List
     * of comma separated strings describing which VM sizes are allowed for
     * workers
     * 
     * @param {number} [managedHostingEnvironmentEnvelope.maximumNumberOfMachines]
     * Maximum number of VMs in this hostingEnvironment (App Service Environment)
     * 
     * @param {array} [managedHostingEnvironmentEnvelope.vipMappings] Description
     * of IP SSL mapping for this hostingEnvironment (App Service Environment)
     * 
     * @param {array} [managedHostingEnvironmentEnvelope.environmentCapacities]
     * Current total, used, and available worker capacities
     * 
     * @param {array} [managedHostingEnvironmentEnvelope.networkAccessControlList]
     * Access control list for controlling traffic to the hostingEnvironment (App
     * Service Environment)
     * 
     * @param {boolean} [managedHostingEnvironmentEnvelope.environmentIsHealthy]
     * True/false indicating whether the hostingEnvironment (App Service
     * Environment) is healthy
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.environmentStatus]
     * Detailed message about with results of the last check of the
     * hostingEnvironment (App Service Environment)
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.resourceGroup] Resource
     * group of the hostingEnvironment (App Service Environment)
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.apiManagementAccountId]
     * Api Management Account associated with this Hosting Environment
     * 
     * @param {boolean} [managedHostingEnvironmentEnvelope.suspended] True/false
     * indicating whether the hostingEnvironment is suspended. The environment
     * can be suspended e.g. when the management endpoint is no longer available
     * (most likely because NSG blocked the incoming traffic)
     * 
     * @param {array} [managedHostingEnvironmentEnvelope.clusterSettings] Custom
     * settings for changing the behavior of the hosting environment
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.id] Resource Id
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.name] Resource Name
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.kind] Kind of resource
     * 
     * @param {string} managedHostingEnvironmentEnvelope.location Resource Location
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.type] Resource type
     * 
     * @param {object} [managedHostingEnvironmentEnvelope.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateManagedHostingEnvironment(resourceGroupName: string, name: string, managedHostingEnvironmentEnvelope: models.HostingEnvironment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HostingEnvironment>): void;
    createOrUpdateManagedHostingEnvironment(resourceGroupName: string, name: string, managedHostingEnvironmentEnvelope: models.HostingEnvironment, callback: ServiceCallback<models.HostingEnvironment>): void;

    /**
     * @summary Create or update a managed hosting environment.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of managed hosting environment
     * 
     * @param {object} managedHostingEnvironmentEnvelope Properties of managed
     * hosting environment
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.hostingEnvironmentName]
     * Name of the hostingEnvironment (App Service Environment)
     * 
     * @param {string}
     * [managedHostingEnvironmentEnvelope.hostingEnvironmentLocation] Location of
     * the hostingEnvironment (App Service Environment), e.g. "West US"
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.provisioningState]
     * Provisioning state of the hostingEnvironment (App Service Environment).
     * Possible values include: 'Succeeded', 'Failed', 'Canceled', 'InProgress',
     * 'Deleting'
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.status] Current status
     * of the hostingEnvironment (App Service Environment). Possible values
     * include: 'Preparing', 'Ready', 'Scaling', 'Deleting'
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.vnetName] Name of the
     * hostingEnvironment's (App Service Environment) virtual network
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.vnetResourceGroupName]
     * Resource group of the hostingEnvironment's (App Service Environment)
     * virtual network
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.vnetSubnetName] Subnet
     * of the hostingEnvironment's (App Service Environment) virtual network
     * 
     * @param {object} [managedHostingEnvironmentEnvelope.virtualNetwork]
     * Description of the hostingEnvironment's (App Service Environment) virtual
     * network
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.virtualNetwork.id]
     * Resource id of the virtual network
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.virtualNetwork.name]
     * Name of the virtual network (read-only)
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.virtualNetwork.type]
     * Resource type of the virtual network (read-only)
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.virtualNetwork.subnet]
     * Subnet within the virtual network
     * 
     * @param {string}
     * [managedHostingEnvironmentEnvelope.internalLoadBalancingMode] Specifies
     * which endpoints to serve internally in the hostingEnvironment's (App
     * Service Environment) VNET. Possible values include: 'None', 'Web',
     * 'Publishing'
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.multiSize] Front-end VM
     * size, e.g. "Medium", "Large"
     * 
     * @param {number} [managedHostingEnvironmentEnvelope.multiRoleCount] Number
     * of front-end instances
     * 
     * @param {array} [managedHostingEnvironmentEnvelope.workerPools] Description
     * of worker pools with worker size ids, VM sizes, and number of workers in
     * each pool
     * 
     * @param {number} [managedHostingEnvironmentEnvelope.ipsslAddressCount]
     * Number of IP SSL addresses reserved for this hostingEnvironment (App
     * Service Environment)
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.databaseEdition] Edition
     * of the metadata database for the hostingEnvironment (App Service
     * Environment) e.g. "Standard"
     * 
     * @param {string}
     * [managedHostingEnvironmentEnvelope.databaseServiceObjective] Service
     * objective of the metadata database for the hostingEnvironment (App Service
     * Environment) e.g. "S0"
     * 
     * @param {number} [managedHostingEnvironmentEnvelope.upgradeDomains] Number
     * of upgrade domains of this hostingEnvironment (App Service Environment)
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.subscriptionId]
     * Subscription of the hostingEnvironment (App Service Environment)
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.dnsSuffix] DNS suffix of
     * the hostingEnvironment (App Service Environment)
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.lastAction] Last
     * deployment action on this hostingEnvironment (App Service Environment)
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.lastActionResult] Result
     * of the last deployment action on this hostingEnvironment (App Service
     * Environment)
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.allowedMultiSizes] List
     * of comma separated strings describing which VM sizes are allowed for
     * front-ends
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.allowedWorkerSizes] List
     * of comma separated strings describing which VM sizes are allowed for
     * workers
     * 
     * @param {number} [managedHostingEnvironmentEnvelope.maximumNumberOfMachines]
     * Maximum number of VMs in this hostingEnvironment (App Service Environment)
     * 
     * @param {array} [managedHostingEnvironmentEnvelope.vipMappings] Description
     * of IP SSL mapping for this hostingEnvironment (App Service Environment)
     * 
     * @param {array} [managedHostingEnvironmentEnvelope.environmentCapacities]
     * Current total, used, and available worker capacities
     * 
     * @param {array} [managedHostingEnvironmentEnvelope.networkAccessControlList]
     * Access control list for controlling traffic to the hostingEnvironment (App
     * Service Environment)
     * 
     * @param {boolean} [managedHostingEnvironmentEnvelope.environmentIsHealthy]
     * True/false indicating whether the hostingEnvironment (App Service
     * Environment) is healthy
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.environmentStatus]
     * Detailed message about with results of the last check of the
     * hostingEnvironment (App Service Environment)
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.resourceGroup] Resource
     * group of the hostingEnvironment (App Service Environment)
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.apiManagementAccountId]
     * Api Management Account associated with this Hosting Environment
     * 
     * @param {boolean} [managedHostingEnvironmentEnvelope.suspended] True/false
     * indicating whether the hostingEnvironment is suspended. The environment
     * can be suspended e.g. when the management endpoint is no longer available
     * (most likely because NSG blocked the incoming traffic)
     * 
     * @param {array} [managedHostingEnvironmentEnvelope.clusterSettings] Custom
     * settings for changing the behavior of the hosting environment
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.id] Resource Id
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.name] Resource Name
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.kind] Kind of resource
     * 
     * @param {string} managedHostingEnvironmentEnvelope.location Resource Location
     * 
     * @param {string} [managedHostingEnvironmentEnvelope.type] Resource type
     * 
     * @param {object} [managedHostingEnvironmentEnvelope.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreateOrUpdateManagedHostingEnvironment(resourceGroupName: string, name: string, managedHostingEnvironmentEnvelope: models.HostingEnvironment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HostingEnvironment>): void;
    beginCreateOrUpdateManagedHostingEnvironment(resourceGroupName: string, name: string, managedHostingEnvironmentEnvelope: models.HostingEnvironment, callback: ServiceCallback<models.HostingEnvironment>): void;

    /**
     * @summary Delete a managed hosting environment.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of managed hosting environment
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.forceDelete] Delete even if the managed hosting
     * environment contains resources
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteManagedHostingEnvironment(resourceGroupName: string, name: string, options: { forceDelete? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteManagedHostingEnvironment(resourceGroupName: string, name: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Delete a managed hosting environment.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of managed hosting environment
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.forceDelete] Delete even if the managed hosting
     * environment contains resources
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginDeleteManagedHostingEnvironment(resourceGroupName: string, name: string, options: { forceDelete? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    beginDeleteManagedHostingEnvironment(resourceGroupName: string, name: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Get all managed hosting environments in a resource group.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getManagedHostingEnvironments(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HostingEnvironmentCollection>): void;
    getManagedHostingEnvironments(resourceGroupName: string, callback: ServiceCallback<models.HostingEnvironmentCollection>): void;

    /**
     * @summary Get list of ip addresses assigned to a managed hosting environment
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of managed hosting environment
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getManagedHostingEnvironmentVips(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AddressResponse>): void;
    getManagedHostingEnvironmentVips(resourceGroupName: string, name: string, callback: ServiceCallback<models.AddressResponse>): void;

    /**
     * @summary Get status of an operation on a managed hosting environment.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of managed hosting environment
     * 
     * @param {string} operationId operation identifier GUID
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getManagedHostingEnvironmentOperation(resourceGroupName: string, name: string, operationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getManagedHostingEnvironmentOperation(resourceGroupName: string, name: string, operationId: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Get all sites on the managed hosting environment.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of managed hosting environment
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.propertiesToInclude] Comma separated list of site
     * properties to include
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getManagedHostingEnvironmentSites(resourceGroupName: string, name: string, options: { propertiesToInclude? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteCollection>): void;
    getManagedHostingEnvironmentSites(resourceGroupName: string, name: string, callback: ServiceCallback<models.SiteCollection>): void;

    /**
     * @summary Get all serverfarms (App Service Plans) on the managed hosting
     * environment.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of managed hosting environment
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getManagedHostingEnvironmentWebHostingPlans(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerFarmCollection>): void;
    getManagedHostingEnvironmentWebHostingPlans(resourceGroupName: string, name: string, callback: ServiceCallback<models.ServerFarmCollection>): void;

    /**
     * @summary Get all serverfarms (App Service Plans) on the managed hosting
     * environment.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of managed hosting environment
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getManagedHostingEnvironmentServerFarms(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerFarmCollection>): void;
    getManagedHostingEnvironmentServerFarms(resourceGroupName: string, name: string, callback: ServiceCallback<models.ServerFarmCollection>): void;

    /**
     * @summary Get all managed hosting environments in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getManagedHostingEnvironmentsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HostingEnvironmentCollection>): void;
    getManagedHostingEnvironmentsNext(nextPageLink: string, callback: ServiceCallback<models.HostingEnvironmentCollection>): void;

    /**
     * @summary Get all sites on the managed hosting environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getManagedHostingEnvironmentSitesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteCollection>): void;
    getManagedHostingEnvironmentSitesNext(nextPageLink: string, callback: ServiceCallback<models.SiteCollection>): void;

    /**
     * @summary Get all serverfarms (App Service Plans) on the managed hosting
     * environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getManagedHostingEnvironmentWebHostingPlansNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerFarmCollection>): void;
    getManagedHostingEnvironmentWebHostingPlansNext(nextPageLink: string, callback: ServiceCallback<models.ServerFarmCollection>): void;

    /**
     * @summary Get all serverfarms (App Service Plans) on the managed hosting
     * environment.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getManagedHostingEnvironmentServerFarmsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerFarmCollection>): void;
    getManagedHostingEnvironmentServerFarmsNext(nextPageLink: string, callback: ServiceCallback<models.ServerFarmCollection>): void;
}

/**
 * @class
 * Provider
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the WebSiteManagementClient.
 */
export interface Provider {

    /**
     * @summary Gets the source controls available for Azure websites
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSourceControls(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SourceControlCollection>): void;
    getSourceControls(callback: ServiceCallback<models.SourceControlCollection>): void;

    /**
     * @summary Gets source control token
     *
     * @param {string} sourceControlType Type of source control
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSourceControl(sourceControlType: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SourceControl>): void;
    getSourceControl(sourceControlType: string, callback: ServiceCallback<models.SourceControl>): void;

    /**
     * @summary Updates source control token
     *
     * @param {string} sourceControlType Type of source control
     * 
     * @param {object} requestMessage Source control token information
     * 
     * @param {string} [requestMessage.sourceControlName] Name or Source Control
     * Type
     * 
     * @param {string} [requestMessage.token] OAuth Access Token
     * 
     * @param {string} [requestMessage.tokenSecret] OAuth Access Token Secret
     * 
     * @param {string} [requestMessage.refreshToken] OAuth Refresh Token
     * 
     * @param {date} [requestMessage.expirationTime] OAuth Token Expiration
     * 
     * @param {string} [requestMessage.id] Resource Id
     * 
     * @param {string} [requestMessage.name] Resource Name
     * 
     * @param {string} [requestMessage.kind] Kind of resource
     * 
     * @param {string} requestMessage.location Resource Location
     * 
     * @param {string} [requestMessage.type] Resource type
     * 
     * @param {object} [requestMessage.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateSourceControl(sourceControlType: string, requestMessage: models.SourceControl, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SourceControl>): void;
    updateSourceControl(sourceControlType: string, requestMessage: models.SourceControl, callback: ServiceCallback<models.SourceControl>): void;

    /**
     * @summary Gets publishing user
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getPublishingUser(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.User>): void;
    getPublishingUser(callback: ServiceCallback<models.User>): void;

    /**
     * @summary Updates publishing user
     *
     * @param {object} requestMessage Details of publishing user
     * 
     * @param {string} [requestMessage.userName] Username (internal)
     * 
     * @param {string} [requestMessage.publishingUserName] Username used for
     * publishing
     * 
     * @param {string} [requestMessage.publishingPassword] Password used for
     * publishing
     * 
     * @param {string} [requestMessage.scmUri] Service Control Manager URI,
     * including username and password
     * 
     * @param {string} [requestMessage.id] Resource Id
     * 
     * @param {string} [requestMessage.name] Resource Name
     * 
     * @param {string} [requestMessage.kind] Kind of resource
     * 
     * @param {string} requestMessage.location Resource Location
     * 
     * @param {string} [requestMessage.type] Resource type
     * 
     * @param {object} [requestMessage.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updatePublishingUser(requestMessage: models.User, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.User>): void;
    updatePublishingUser(requestMessage: models.User, callback: ServiceCallback<models.User>): void;

    /**
     * @summary Gets the source controls available for Azure websites
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSourceControlsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SourceControlCollection>): void;
    getSourceControlsNext(nextPageLink: string, callback: ServiceCallback<models.SourceControlCollection>): void;
}

/**
 * @class
 * Recommendations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the WebSiteManagementClient.
 */
export interface Recommendations {

    /**
     * @summary Gets a list of recommendations associated with the specified
     * subscription.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.featured] If set, this API returns only the most
     * critical recommendation among the others. Otherwise this API returns all
     * recommendations available
     * 
     * @param {string} [options.filter] Return only channels specified in the
     * filter. Filter is specified by using OData syntax. Example:
     * $filter=channels eq 'Api' or channel eq 'Notification'
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getRecommendationBySubscription(options: { featured? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Recommendation[]>): void;
    getRecommendationBySubscription(callback: ServiceCallback<models.Recommendation[]>): void;

    /**
     * @summary Gets the detailed properties of the recommendation object for the
     * specified web site.
     *
     * @param {string} resourceGroupName Resource group name
     * 
     * @param {string} siteName Site name
     * 
     * @param {string} name Recommendation rule name
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getRuleDetailsBySiteName(resourceGroupName: string, siteName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RecommendationRule>): void;
    getRuleDetailsBySiteName(resourceGroupName: string, siteName: string, name: string, callback: ServiceCallback<models.RecommendationRule>): void;

    /**
     * @summary Gets a list of recommendations associated with the specified web
     * site.
     *
     * @param {string} resourceGroupName Resource group name
     * 
     * @param {string} siteName Site name
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.featured] If set, this API returns only the most
     * critical recommendation among the others. Otherwise this API returns all
     * recommendations available
     * 
     * @param {string} [options.siteSku] The name of site SKU.
     * 
     * @param {number} [options.numSlots] The number of site slots associated to
     * the site
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getRecommendedRulesForSite(resourceGroupName: string, siteName: string, options: { featured? : boolean, siteSku? : string, numSlots? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Recommendation[]>): void;
    getRecommendedRulesForSite(resourceGroupName: string, siteName: string, callback: ServiceCallback<models.Recommendation[]>): void;

    /**
     * @summary Gets the list of past recommendations optionally specified by the
     * time range.
     *
     * @param {string} resourceGroupName Resource group name
     * 
     * @param {string} siteName Site name
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.startTime] The start time of a time range to
     * query, e.g. $filter=startTime eq '2015-01-01T00:00:00Z' and endTime eq
     * '2015-01-02T00:00:00Z'
     * 
     * @param {string} [options.endTime] The end time of a time range to query,
     * e.g. $filter=startTime eq '2015-01-01T00:00:00Z' and endTime eq
     * '2015-01-02T00:00:00Z'
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getRecommendationHistoryForSite(resourceGroupName: string, siteName: string, options: { startTime? : string, endTime? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Recommendation[]>): void;
    getRecommendationHistoryForSite(resourceGroupName: string, siteName: string, callback: ServiceCallback<models.Recommendation[]>): void;
}

/**
 * @class
 * ServerFarms
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the WebSiteManagementClient.
 */
export interface ServerFarms {

    /**
     * @summary Gets collection of App Service Plans in a resource group for a
     * given subscription.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getServerFarms(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerFarmCollection>): void;
    getServerFarms(resourceGroupName: string, callback: ServiceCallback<models.ServerFarmCollection>): void;

    /**
     * @summary Gets specified App Service Plan in a resource group
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of App Service Plan
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getServerFarm(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerFarmWithRichSku>): void;
    getServerFarm(resourceGroupName: string, name: string, callback: ServiceCallback<models.ServerFarmWithRichSku>): void;

    /**
     * @summary Creates or updates an App Service Plan
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of App Service Plan
     * 
     * @param {object} serverFarmEnvelope Details of App Service Plan
     * 
     * @param {string} [serverFarmEnvelope.serverFarmWithRichSkuName] Name for the
     * App Service Plan
     * 
     * @param {string} [serverFarmEnvelope.workerTierName] Target worker tier
     * assigned to the App Service Plan
     * 
     * @param {string} [serverFarmEnvelope.adminSiteName] App Service Plan
     * administration site
     * 
     * @param {object} [serverFarmEnvelope.hostingEnvironmentProfile]
     * Specification for the hosting environment (App Service Environment) to use
     * for the App Service Plan
     * 
     * @param {string} [serverFarmEnvelope.hostingEnvironmentProfile.id] Resource
     * id of the hostingEnvironment (App Service Environment)
     * 
     * @param {string} [serverFarmEnvelope.hostingEnvironmentProfile.name] Name of
     * the hostingEnvironment (App Service Environment) (read only)
     * 
     * @param {string} [serverFarmEnvelope.hostingEnvironmentProfile.type]
     * Resource type of the hostingEnvironment (App Service Environment) (read
     * only)
     * 
     * @param {number} [serverFarmEnvelope.maximumNumberOfWorkers] Maximum number
     * of instances that can be assigned to this App Service Plan
     * 
     * @param {boolean} [serverFarmEnvelope.perSiteScaling] If True apps assigned
     * to this App Service Plan can be scaled independently
     * If False apps assigned to this App Service Plan will scale to
     * all instances of the plan
     * 
     * @param {boolean} [serverFarmEnvelope.reserved] Enables creation of a Linux
     * App Service Plan
     * 
     * @param {object} [serverFarmEnvelope.sku]
     * 
     * @param {string} [serverFarmEnvelope.sku.name] Name of the resource sku
     * 
     * @param {string} [serverFarmEnvelope.sku.tier] Service Tier of the resource
     * sku
     * 
     * @param {string} [serverFarmEnvelope.sku.size] Size specifier of the
     * resource sku
     * 
     * @param {string} [serverFarmEnvelope.sku.family] Family code of the resource
     * sku
     * 
     * @param {number} [serverFarmEnvelope.sku.capacity] Current number of
     * instances assigned to the resource
     * 
     * @param {string} [serverFarmEnvelope.id] Resource Id
     * 
     * @param {string} [serverFarmEnvelope.name] Resource Name
     * 
     * @param {string} [serverFarmEnvelope.kind] Kind of resource
     * 
     * @param {string} serverFarmEnvelope.location Resource Location
     * 
     * @param {string} [serverFarmEnvelope.type] Resource type
     * 
     * @param {object} [serverFarmEnvelope.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.allowPendingState] OBSOLETE: If true, allow
     * pending state for App Service Plan
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateServerFarm(resourceGroupName: string, name: string, serverFarmEnvelope: models.ServerFarmWithRichSku, options: { allowPendingState? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerFarmWithRichSku>): void;
    createOrUpdateServerFarm(resourceGroupName: string, name: string, serverFarmEnvelope: models.ServerFarmWithRichSku, callback: ServiceCallback<models.ServerFarmWithRichSku>): void;

    /**
     * @summary Creates or updates an App Service Plan
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of App Service Plan
     * 
     * @param {object} serverFarmEnvelope Details of App Service Plan
     * 
     * @param {string} [serverFarmEnvelope.serverFarmWithRichSkuName] Name for the
     * App Service Plan
     * 
     * @param {string} [serverFarmEnvelope.workerTierName] Target worker tier
     * assigned to the App Service Plan
     * 
     * @param {string} [serverFarmEnvelope.adminSiteName] App Service Plan
     * administration site
     * 
     * @param {object} [serverFarmEnvelope.hostingEnvironmentProfile]
     * Specification for the hosting environment (App Service Environment) to use
     * for the App Service Plan
     * 
     * @param {string} [serverFarmEnvelope.hostingEnvironmentProfile.id] Resource
     * id of the hostingEnvironment (App Service Environment)
     * 
     * @param {string} [serverFarmEnvelope.hostingEnvironmentProfile.name] Name of
     * the hostingEnvironment (App Service Environment) (read only)
     * 
     * @param {string} [serverFarmEnvelope.hostingEnvironmentProfile.type]
     * Resource type of the hostingEnvironment (App Service Environment) (read
     * only)
     * 
     * @param {number} [serverFarmEnvelope.maximumNumberOfWorkers] Maximum number
     * of instances that can be assigned to this App Service Plan
     * 
     * @param {boolean} [serverFarmEnvelope.perSiteScaling] If True apps assigned
     * to this App Service Plan can be scaled independently
     * If False apps assigned to this App Service Plan will scale to
     * all instances of the plan
     * 
     * @param {boolean} [serverFarmEnvelope.reserved] Enables creation of a Linux
     * App Service Plan
     * 
     * @param {object} [serverFarmEnvelope.sku]
     * 
     * @param {string} [serverFarmEnvelope.sku.name] Name of the resource sku
     * 
     * @param {string} [serverFarmEnvelope.sku.tier] Service Tier of the resource
     * sku
     * 
     * @param {string} [serverFarmEnvelope.sku.size] Size specifier of the
     * resource sku
     * 
     * @param {string} [serverFarmEnvelope.sku.family] Family code of the resource
     * sku
     * 
     * @param {number} [serverFarmEnvelope.sku.capacity] Current number of
     * instances assigned to the resource
     * 
     * @param {string} [serverFarmEnvelope.id] Resource Id
     * 
     * @param {string} [serverFarmEnvelope.name] Resource Name
     * 
     * @param {string} [serverFarmEnvelope.kind] Kind of resource
     * 
     * @param {string} serverFarmEnvelope.location Resource Location
     * 
     * @param {string} [serverFarmEnvelope.type] Resource type
     * 
     * @param {object} [serverFarmEnvelope.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.allowPendingState] OBSOLETE: If true, allow
     * pending state for App Service Plan
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreateOrUpdateServerFarm(resourceGroupName: string, name: string, serverFarmEnvelope: models.ServerFarmWithRichSku, options: { allowPendingState? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerFarmWithRichSku>): void;
    beginCreateOrUpdateServerFarm(resourceGroupName: string, name: string, serverFarmEnvelope: models.ServerFarmWithRichSku, callback: ServiceCallback<models.ServerFarmWithRichSku>): void;

    /**
     * @summary Deletes a App Service Plan
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of App Service Plan
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteServerFarm(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteServerFarm(resourceGroupName: string, name: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Queries for App Serice Plan metrics
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of App Service Plan
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.details] If true, metrics are broken down per App
     * Service Plan instance
     * 
     * @param {string} [options.filter] Return only usages/metrics specified in
     * the filter. Filter conforms to odata syntax. Example: $filter=(name.value
     * eq 'Metric1' or name.value eq 'Metric2') and startTime eq
     * '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain
     * eq duration'[Hour|Minute|Day]'.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getServerFarmMetrics(resourceGroupName: string, name: string, options: { details? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricCollection>): void;
    getServerFarmMetrics(resourceGroupName: string, name: string, callback: ServiceCallback<models.ResourceMetricCollection>): void;

    /**
     * @summary List of metrics that can be queried for an App Service Plan
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of App Service Plan
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getServerFarmMetricDefintions(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricDefinitionCollection>): void;
    getServerFarmMetricDefintions(resourceGroupName: string, name: string, callback: ServiceCallback<models.MetricDefinitionCollection>): void;

    /**
     * @summary Gets list of vnets associated with App Service Plan
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of App Service Plan
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getVnetsForServerFarm(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetInfo[]>): void;
    getVnetsForServerFarm(resourceGroupName: string, name: string, callback: ServiceCallback<models.VnetInfo[]>): void;

    /**
     * @summary Gets a vnet associated with an App Service Plan
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of App Service Plan
     * 
     * @param {string} vnetName Name of virtual network
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getVnetFromServerFarm(resourceGroupName: string, name: string, vnetName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetInfo>): void;
    getVnetFromServerFarm(resourceGroupName: string, name: string, vnetName: string, callback: ServiceCallback<models.VnetInfo>): void;

    /**
     * @summary Gets a list of all routes associated with a vnet, in an app
     * service plan
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of App Service Plan
     * 
     * @param {string} vnetName Name of virtual network
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getRoutesForVnet(resourceGroupName: string, name: string, vnetName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetRoute[]>): void;
    getRoutesForVnet(resourceGroupName: string, name: string, vnetName: string, callback: ServiceCallback<models.VnetRoute[]>): void;

    /**
     * @summary Gets a specific route associated with a vnet, in an app service
     * plan
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of App Service Plan
     * 
     * @param {string} vnetName Name of virtual network
     * 
     * @param {string} routeName Name of the virtual network route
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getRouteForVnet(resourceGroupName: string, name: string, vnetName: string, routeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetRoute[]>): void;
    getRouteForVnet(resourceGroupName: string, name: string, vnetName: string, routeName: string, callback: ServiceCallback<models.VnetRoute[]>): void;

    /**
     * @summary Creates a new route or updates an existing route for a vnet in an
     * app service plan.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of App Service Plan
     * 
     * @param {string} vnetName Name of virtual network
     * 
     * @param {string} routeName Name of the virtual network route
     * 
     * @param {object} route The route object
     * 
     * @param {string} [route.vnetRouteName] The name of this route. This is only
     * returned by the server and does not need to be set by the client.
     * 
     * @param {string} [route.startAddress] The starting address for this route.
     * This may also include a CIDR notation, in which case the end address must
     * not be specified.
     * 
     * @param {string} [route.endAddress] The ending address for this route. If
     * the start address is specified in CIDR notation, this must be omitted.
     * 
     * @param {string} [route.routeType] The type of route this is:
     * DEFAULT - By default, every web app has routes to the local
     * address ranges specified by RFC1918
     * INHERITED - Routes inherited from the real Virtual Network
     * routes
     * STATIC - Static route set on the web app only
     * 
     * These values will be used for syncing a Web App's routes with
     * those from a Virtual Network. This operation will clear all DEFAULT and
     * INHERITED routes and replace them
     * with new INHERITED routes.
     * 
     * @param {string} [route.id] Resource Id
     * 
     * @param {string} [route.name] Resource Name
     * 
     * @param {string} [route.kind] Kind of resource
     * 
     * @param {string} route.location Resource Location
     * 
     * @param {string} [route.type] Resource type
     * 
     * @param {object} [route.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, route: models.VnetRoute, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetRoute>): void;
    createOrUpdateVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, route: models.VnetRoute, callback: ServiceCallback<models.VnetRoute>): void;

    /**
     * @summary Deletes an existing route for a vnet in an app service plan.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of App Service Plan
     * 
     * @param {string} vnetName Name of virtual network
     * 
     * @param {string} routeName Name of the virtual network route
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Creates a new route or updates an existing route for a vnet in an
     * app service plan.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of App Service Plan
     * 
     * @param {string} vnetName Name of virtual network
     * 
     * @param {string} routeName Name of the virtual network route
     * 
     * @param {object} route The route object
     * 
     * @param {string} [route.vnetRouteName] The name of this route. This is only
     * returned by the server and does not need to be set by the client.
     * 
     * @param {string} [route.startAddress] The starting address for this route.
     * This may also include a CIDR notation, in which case the end address must
     * not be specified.
     * 
     * @param {string} [route.endAddress] The ending address for this route. If
     * the start address is specified in CIDR notation, this must be omitted.
     * 
     * @param {string} [route.routeType] The type of route this is:
     * DEFAULT - By default, every web app has routes to the local
     * address ranges specified by RFC1918
     * INHERITED - Routes inherited from the real Virtual Network
     * routes
     * STATIC - Static route set on the web app only
     * 
     * These values will be used for syncing a Web App's routes with
     * those from a Virtual Network. This operation will clear all DEFAULT and
     * INHERITED routes and replace them
     * with new INHERITED routes.
     * 
     * @param {string} [route.id] Resource Id
     * 
     * @param {string} [route.name] Resource Name
     * 
     * @param {string} [route.kind] Kind of resource
     * 
     * @param {string} route.location Resource Location
     * 
     * @param {string} [route.type] Resource type
     * 
     * @param {object} [route.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, route: models.VnetRoute, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetRoute>): void;
    updateVnetRoute(resourceGroupName: string, name: string, vnetName: string, routeName: string, route: models.VnetRoute, callback: ServiceCallback<models.VnetRoute>): void;

    /**
     * @summary Gets the vnet gateway.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of the App Service Plan
     * 
     * @param {string} vnetName Name of the virtual network
     * 
     * @param {string} gatewayName Name of the gateway. Only the 'primary' gateway
     * is supported.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getServerFarmVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetGateway>): void;
    getServerFarmVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, callback: ServiceCallback<models.VnetGateway>): void;

    /**
     * @summary Updates the vnet gateway
     *
     * @param {string} resourceGroupName The resource group
     * 
     * @param {string} name The name of the App Service Plan
     * 
     * @param {string} vnetName The name of the virtual network
     * 
     * @param {string} gatewayName The name of the gateway. Only 'primary' is
     * supported.
     * 
     * @param {object} connectionEnvelope The gateway entity.
     * 
     * @param {string} [connectionEnvelope.vnetName] The VNET name.
     * 
     * @param {string} [connectionEnvelope.vpnPackageUri] The URI where the Vpn
     * package can be downloaded
     * 
     * @param {string} [connectionEnvelope.id] Resource Id
     * 
     * @param {string} [connectionEnvelope.name] Resource Name
     * 
     * @param {string} [connectionEnvelope.kind] Kind of resource
     * 
     * @param {string} connectionEnvelope.location Resource Location
     * 
     * @param {string} [connectionEnvelope.type] Resource type
     * 
     * @param {object} [connectionEnvelope.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateServerFarmVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: models.VnetGateway, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetGateway>): void;
    updateServerFarmVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: models.VnetGateway, callback: ServiceCallback<models.VnetGateway>): void;

    /**
     * @summary Gets list of Apps associated with an App Service Plan
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of App Service Plan
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.skipToken] Skip to of web apps in a list. If
     * specified, the resulting list will contain web apps starting from
     * (including) the skipToken. Else, the resulting list contains web apps from
     * the start of the list
     * 
     * @param {string} [options.filter] Supported filter: $filter=state eq
     * running. Returns only web apps that are currently running
     * 
     * @param {string} [options.top] List page size. If specified, results are
     * paged.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getServerFarmSites(resourceGroupName: string, name: string, options: { skipToken? : string, filter? : string, top? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteCollection>): void;
    getServerFarmSites(resourceGroupName: string, name: string, callback: ServiceCallback<models.SiteCollection>): void;

    /**
     * @summary Submit a reboot request for a worker machine in the specified
     * server farm
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of server farm
     * 
     * @param {string} workerName Name of worker machine, typically starts with RD
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    rebootWorkerForServerFarm(resourceGroupName: string, name: string, workerName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    rebootWorkerForServerFarm(resourceGroupName: string, name: string, workerName: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Restarts web apps in a specified App Service Plan
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of App Service Plan
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.softRestart] Soft restart applies the
     * configuration settings and restarts the apps if necessary. Hard restart
     * always restarts and reprovisions the apps
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    restartSitesForServerFarm(resourceGroupName: string, name: string, options: { softRestart? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    restartSitesForServerFarm(resourceGroupName: string, name: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Gets a server farm operation
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of server farm
     * 
     * @param {string} operationId Id of Server farm operation"&gt;
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getServerFarmOperation(resourceGroupName: string, name: string, operationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerFarmWithRichSku>): void;
    getServerFarmOperation(resourceGroupName: string, name: string, operationId: string, callback: ServiceCallback<models.ServerFarmWithRichSku>): void;

    /**
     * @summary Gets collection of App Service Plans in a resource group for a
     * given subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getServerFarmsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServerFarmCollection>): void;
    getServerFarmsNext(nextPageLink: string, callback: ServiceCallback<models.ServerFarmCollection>): void;

    /**
     * @summary Queries for App Serice Plan metrics
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getServerFarmMetricsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricCollection>): void;
    getServerFarmMetricsNext(nextPageLink: string, callback: ServiceCallback<models.ResourceMetricCollection>): void;

    /**
     * @summary List of metrics that can be queried for an App Service Plan
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getServerFarmMetricDefintionsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricDefinitionCollection>): void;
    getServerFarmMetricDefintionsNext(nextPageLink: string, callback: ServiceCallback<models.MetricDefinitionCollection>): void;

    /**
     * @summary Gets list of Apps associated with an App Service Plan
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getServerFarmSitesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteCollection>): void;
    getServerFarmSitesNext(nextPageLink: string, callback: ServiceCallback<models.SiteCollection>): void;
}

/**
 * @class
 * Sites
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the WebSiteManagementClient.
 */
export interface Sites {

    /**
     * @summary Retrieves a specific Virtual Network Connection associated with
     * this web app.
     *
     * @param {string} resourceGroupName The resource group name
     * 
     * @param {string} name The name of the web app
     * 
     * @param {string} vnetName The name of the Virtual Network
     * 
     * @param {string} slot The name of the slot for this web app.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteVNETConnectionSlot(resourceGroupName: string, name: string, vnetName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetInfo>): void;
    getSiteVNETConnectionSlot(resourceGroupName: string, name: string, vnetName: string, slot: string, callback: ServiceCallback<models.VnetInfo>): void;

    /**
     * @summary Adds a Virtual Network Connection or updates it's properties.
     *
     * @param {string} resourceGroupName The resource group name
     * 
     * @param {string} name The name of the web app
     * 
     * @param {string} vnetName The name of the Virtual Network
     * 
     * @param {object} connectionEnvelope The properties of this Virtual Network
     * Connection
     * 
     * @param {string} [connectionEnvelope.vnetResourceId] The vnet resource id
     * 
     * @param {string} [connectionEnvelope.certThumbprint] The client certificate
     * thumbprint
     * 
     * @param {string} [connectionEnvelope.certBlob] A certificate file (.cer)
     * blob containing the public key of the private key used to authenticate a
     * Point-To-Site VPN connection.
     * 
     * @param {array} [connectionEnvelope.routes] The routes that this virtual
     * network connection uses.
     * 
     * @param {boolean} [connectionEnvelope.resyncRequired] Flag to determine if a
     * resync is required
     * 
     * @param {string} [connectionEnvelope.dnsServers] Dns servers to be used by
     * this VNET. This should be a comma-separated list of IP addresses.
     * 
     * @param {string} [connectionEnvelope.id] Resource Id
     * 
     * @param {string} [connectionEnvelope.name] Resource Name
     * 
     * @param {string} [connectionEnvelope.kind] Kind of resource
     * 
     * @param {string} connectionEnvelope.location Resource Location
     * 
     * @param {string} [connectionEnvelope.type] Resource type
     * 
     * @param {object} [connectionEnvelope.tags] Resource tags
     * 
     * @param {string} slot The name of the slot for this web app.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateSiteVNETConnectionSlot(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: models.VnetInfo, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetInfo>): void;
    createOrUpdateSiteVNETConnectionSlot(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: models.VnetInfo, slot: string, callback: ServiceCallback<models.VnetInfo>): void;

    /**
     * @summary Removes the specified Virtual Network Connection association from
     * this web app.
     *
     * @param {string} resourceGroupName The resource group name
     * 
     * @param {string} name The name of the web app
     * 
     * @param {string} vnetName The name of the Virtual Network
     * 
     * @param {string} slot The name of the slot for this web app.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteSiteVNETConnectionSlot(resourceGroupName: string, name: string, vnetName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteSiteVNETConnectionSlot(resourceGroupName: string, name: string, vnetName: string, slot: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Adds a Virtual Network Connection or updates it's properties.
     *
     * @param {string} resourceGroupName The resource group name
     * 
     * @param {string} name The name of the web app
     * 
     * @param {string} vnetName The name of the Virtual Network
     * 
     * @param {object} connectionEnvelope The properties of this Virtual Network
     * Connection
     * 
     * @param {string} [connectionEnvelope.vnetResourceId] The vnet resource id
     * 
     * @param {string} [connectionEnvelope.certThumbprint] The client certificate
     * thumbprint
     * 
     * @param {string} [connectionEnvelope.certBlob] A certificate file (.cer)
     * blob containing the public key of the private key used to authenticate a
     * Point-To-Site VPN connection.
     * 
     * @param {array} [connectionEnvelope.routes] The routes that this virtual
     * network connection uses.
     * 
     * @param {boolean} [connectionEnvelope.resyncRequired] Flag to determine if a
     * resync is required
     * 
     * @param {string} [connectionEnvelope.dnsServers] Dns servers to be used by
     * this VNET. This should be a comma-separated list of IP addresses.
     * 
     * @param {string} [connectionEnvelope.id] Resource Id
     * 
     * @param {string} [connectionEnvelope.name] Resource Name
     * 
     * @param {string} [connectionEnvelope.kind] Kind of resource
     * 
     * @param {string} connectionEnvelope.location Resource Location
     * 
     * @param {string} [connectionEnvelope.type] Resource type
     * 
     * @param {object} [connectionEnvelope.tags] Resource tags
     * 
     * @param {string} slot The name of the slot for this web app.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateSiteVNETConnectionSlot(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: models.VnetInfo, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetInfo>): void;
    updateSiteVNETConnectionSlot(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: models.VnetInfo, slot: string, callback: ServiceCallback<models.VnetInfo>): void;

    /**
     * @summary Retrieves a specific Virtual Network Connection associated with
     * this web app.
     *
     * @param {string} resourceGroupName The resource group name
     * 
     * @param {string} name The name of the web app
     * 
     * @param {string} vnetName The name of the Virtual Network
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteVNETConnection(resourceGroupName: string, name: string, vnetName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetInfo>): void;
    getSiteVNETConnection(resourceGroupName: string, name: string, vnetName: string, callback: ServiceCallback<models.VnetInfo>): void;

    /**
     * @summary Adds a Virtual Network Connection or updates it's properties.
     *
     * @param {string} resourceGroupName The resource group name
     * 
     * @param {string} name The name of the web app
     * 
     * @param {string} vnetName The name of the Virtual Network
     * 
     * @param {object} connectionEnvelope The properties of this Virtual Network
     * Connection
     * 
     * @param {string} [connectionEnvelope.vnetResourceId] The vnet resource id
     * 
     * @param {string} [connectionEnvelope.certThumbprint] The client certificate
     * thumbprint
     * 
     * @param {string} [connectionEnvelope.certBlob] A certificate file (.cer)
     * blob containing the public key of the private key used to authenticate a
     * Point-To-Site VPN connection.
     * 
     * @param {array} [connectionEnvelope.routes] The routes that this virtual
     * network connection uses.
     * 
     * @param {boolean} [connectionEnvelope.resyncRequired] Flag to determine if a
     * resync is required
     * 
     * @param {string} [connectionEnvelope.dnsServers] Dns servers to be used by
     * this VNET. This should be a comma-separated list of IP addresses.
     * 
     * @param {string} [connectionEnvelope.id] Resource Id
     * 
     * @param {string} [connectionEnvelope.name] Resource Name
     * 
     * @param {string} [connectionEnvelope.kind] Kind of resource
     * 
     * @param {string} connectionEnvelope.location Resource Location
     * 
     * @param {string} [connectionEnvelope.type] Resource type
     * 
     * @param {object} [connectionEnvelope.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateSiteVNETConnection(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: models.VnetInfo, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetInfo>): void;
    createOrUpdateSiteVNETConnection(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: models.VnetInfo, callback: ServiceCallback<models.VnetInfo>): void;

    /**
     * @summary Removes the specified Virtual Network Connection association from
     * this web app.
     *
     * @param {string} resourceGroupName The resource group name
     * 
     * @param {string} name The name of the web app
     * 
     * @param {string} vnetName The name of the Virtual Network
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteSiteVNETConnection(resourceGroupName: string, name: string, vnetName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteSiteVNETConnection(resourceGroupName: string, name: string, vnetName: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Adds a Virtual Network Connection or updates it's properties.
     *
     * @param {string} resourceGroupName The resource group name
     * 
     * @param {string} name The name of the web app
     * 
     * @param {string} vnetName The name of the Virtual Network
     * 
     * @param {object} connectionEnvelope The properties of this Virtual Network
     * Connection
     * 
     * @param {string} [connectionEnvelope.vnetResourceId] The vnet resource id
     * 
     * @param {string} [connectionEnvelope.certThumbprint] The client certificate
     * thumbprint
     * 
     * @param {string} [connectionEnvelope.certBlob] A certificate file (.cer)
     * blob containing the public key of the private key used to authenticate a
     * Point-To-Site VPN connection.
     * 
     * @param {array} [connectionEnvelope.routes] The routes that this virtual
     * network connection uses.
     * 
     * @param {boolean} [connectionEnvelope.resyncRequired] Flag to determine if a
     * resync is required
     * 
     * @param {string} [connectionEnvelope.dnsServers] Dns servers to be used by
     * this VNET. This should be a comma-separated list of IP addresses.
     * 
     * @param {string} [connectionEnvelope.id] Resource Id
     * 
     * @param {string} [connectionEnvelope.name] Resource Name
     * 
     * @param {string} [connectionEnvelope.kind] Kind of resource
     * 
     * @param {string} connectionEnvelope.location Resource Location
     * 
     * @param {string} [connectionEnvelope.type] Resource type
     * 
     * @param {object} [connectionEnvelope.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateSiteVNETConnection(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: models.VnetInfo, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetInfo>): void;
    updateSiteVNETConnection(resourceGroupName: string, name: string, vnetName: string, connectionEnvelope: models.VnetInfo, callback: ServiceCallback<models.VnetInfo>): void;

    /**
     * @summary Retrieves a view of all network features in use on this web app.
     *
     * @param {string} resourceGroupName The resource group name
     * 
     * @param {string} name The name of the web app
     * 
     * @param {string} view The type of view. This can either be "summary" or
     * "detailed".
     * 
     * @param {string} slot The name of the slot for this web app.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteNetworkFeaturesSlot(resourceGroupName: string, name: string, view: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkFeatures>): void;
    getSiteNetworkFeaturesSlot(resourceGroupName: string, name: string, view: string, slot: string, callback: ServiceCallback<models.NetworkFeatures>): void;

    /**
     * @summary Retrieves a view of all network features in use on this web app.
     *
     * @param {string} resourceGroupName The resource group name
     * 
     * @param {string} name The name of the web app
     * 
     * @param {string} view The type of view. This can either be "summary" or
     * "detailed".
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteNetworkFeatures(resourceGroupName: string, name: string, view: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NetworkFeatures>): void;
    getSiteNetworkFeatures(resourceGroupName: string, name: string, view: string, callback: ServiceCallback<models.NetworkFeatures>): void;

    /**
     * @summary Gets the operation for a web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} operationId Id of an operation
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteOperationSlot(resourceGroupName: string, name: string, operationId: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getSiteOperationSlot(resourceGroupName: string, name: string, operationId: string, slot: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Gets the operation for a web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} operationId Id of an operation
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteOperation(resourceGroupName: string, name: string, operationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getSiteOperation(resourceGroupName: string, name: string, operationId: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Swaps web app slots
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} slotSwapEntity Request body that contains the target slot
     * name
     * 
     * @param {string} [slotSwapEntity.targetSlot] Set the destination deployment
     * slot during swap operation
     * 
     * @param {boolean} [slotSwapEntity.preserveVnet] Get or set the flag
     * indicating it should preserve VNet to the slot during swap
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    swapSlotWithProduction(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    swapSlotWithProduction(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, callback: ServiceCallback<any>): void;

    /**
     * @summary Swaps web app slots
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} slotSwapEntity Request body that contains the target slot
     * name
     * 
     * @param {string} [slotSwapEntity.targetSlot] Set the destination deployment
     * slot during swap operation
     * 
     * @param {boolean} [slotSwapEntity.preserveVnet] Get or set the flag
     * indicating it should preserve VNet to the slot during swap
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginSwapSlotWithProduction(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    beginSwapSlotWithProduction(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, callback: ServiceCallback<any>): void;

    /**
     * @summary Swaps web app slots
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} slotSwapEntity Request body that contains the target slot
     * name
     * 
     * @param {string} [slotSwapEntity.targetSlot] Set the destination deployment
     * slot during swap operation
     * 
     * @param {boolean} [slotSwapEntity.preserveVnet] Get or set the flag
     * indicating it should preserve VNet to the slot during swap
     * 
     * @param {string} slot Name of source slot for the swap
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    swapSlotsSlot(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    swapSlotsSlot(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, slot: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Swaps web app slots
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} slotSwapEntity Request body that contains the target slot
     * name
     * 
     * @param {string} [slotSwapEntity.targetSlot] Set the destination deployment
     * slot during swap operation
     * 
     * @param {boolean} [slotSwapEntity.preserveVnet] Get or set the flag
     * indicating it should preserve VNet to the slot during swap
     * 
     * @param {string} slot Name of source slot for the swap
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginSwapSlotsSlot(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    beginSwapSlotsSlot(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, slot: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Get the difference in configuration settings between two web app
     * slots
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} slotSwapEntity Request body that contains the target slot
     * name
     * 
     * @param {string} [slotSwapEntity.targetSlot] Set the destination deployment
     * slot during swap operation
     * 
     * @param {boolean} [slotSwapEntity.preserveVnet] Get or set the flag
     * indicating it should preserve VNet to the slot during swap
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSlotsDifferencesFromProduction(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SlotDifferenceCollection>): void;
    getSlotsDifferencesFromProduction(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, callback: ServiceCallback<models.SlotDifferenceCollection>): void;

    /**
     * @summary Get the difference in configuration settings between two web app
     * slots
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} slotSwapEntity Request body that contains the target slot
     * name
     * 
     * @param {string} [slotSwapEntity.targetSlot] Set the destination deployment
     * slot during swap operation
     * 
     * @param {boolean} [slotSwapEntity.preserveVnet] Get or set the flag
     * indicating it should preserve VNet to the slot during swap
     * 
     * @param {string} slot Name of the source slot
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSlotsDifferencesSlot(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SlotDifferenceCollection>): void;
    getSlotsDifferencesSlot(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, slot: string, callback: ServiceCallback<models.SlotDifferenceCollection>): void;

    /**
     * @summary Applies the configuration settings from the target slot onto the
     * current slot
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} slotSwapEntity Request body that contains the target slot
     * name. Settings from that slot will be applied on the source slot
     * 
     * @param {string} [slotSwapEntity.targetSlot] Set the destination deployment
     * slot during swap operation
     * 
     * @param {boolean} [slotSwapEntity.preserveVnet] Get or set the flag
     * indicating it should preserve VNet to the slot during swap
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    applySlotConfigToProduction(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    applySlotConfigToProduction(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, callback: ServiceCallback<any>): void;

    /**
     * @summary Applies the configuration settings from the target slot onto the
     * current slot
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} slotSwapEntity Request body that contains the target slot
     * name. Settings from that slot will be applied on the source slot
     * 
     * @param {string} [slotSwapEntity.targetSlot] Set the destination deployment
     * slot during swap operation
     * 
     * @param {boolean} [slotSwapEntity.preserveVnet] Get or set the flag
     * indicating it should preserve VNet to the slot during swap
     * 
     * @param {string} slot Name of the source slot. Settings from the target slot
     * will be applied onto this slot
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    applySlotConfigSlot(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    applySlotConfigSlot(resourceGroupName: string, name: string, slotSwapEntity: models.CsmSlotEntity, slot: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Resets the configuration settings of the current slot if they were
     * previously modified by calling ApplySlotConfig API
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    resetProductionSlotConfig(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    resetProductionSlotConfig(resourceGroupName: string, name: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Resets the configuration settings of the current slot if they were
     * previously modified by calling ApplySlotConfig API
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    resetSlotConfigSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    resetSlotConfigSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Gets the names of application settings and connection string that
     * remain with the slot during swap operation
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSlotConfigNames(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SlotConfigNamesResource>): void;
    getSlotConfigNames(resourceGroupName: string, name: string, callback: ServiceCallback<models.SlotConfigNamesResource>): void;

    /**
     * @summary Updates the names of application settings and connection string
     * that remain with the slot during swap operation
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} slotConfigNames Request body containing the names of
     * application settings and connection strings
     * 
     * @param {array} [slotConfigNames.connectionStringNames] List of connection
     * string names
     * 
     * @param {array} [slotConfigNames.appSettingNames] List of application
     * settings names
     * 
     * @param {string} [slotConfigNames.id] Resource Id
     * 
     * @param {string} [slotConfigNames.name] Resource Name
     * 
     * @param {string} [slotConfigNames.kind] Kind of resource
     * 
     * @param {string} slotConfigNames.location Resource Location
     * 
     * @param {string} [slotConfigNames.type] Resource type
     * 
     * @param {object} [slotConfigNames.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateSlotConfigNames(resourceGroupName: string, name: string, slotConfigNames: models.SlotConfigNamesResource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SlotConfigNamesResource>): void;
    updateSlotConfigNames(resourceGroupName: string, name: string, slotConfigNames: models.SlotConfigNamesResource, callback: ServiceCallback<models.SlotConfigNamesResource>): void;

    /**
     * @summary Gets all the slots for a web apps
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.propertiesToInclude] List of app properties to
     * include in the response
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteSlots(resourceGroupName: string, name: string, options: { propertiesToInclude? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteCollection>): void;
    getSiteSlots(resourceGroupName: string, name: string, callback: ServiceCallback<models.SiteCollection>): void;

    /**
     * @summary Gets the web apps for a subscription in the specified resource
     * group
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.propertiesToInclude] Additional web app properties
     * included in the response
     * 
     * @param {string} [options.includeSiteTypes] Types of apps included in the
     * response
     * 
     * @param {boolean} [options.includeSlots] Whether or not to include
     * deployments slots in results
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSites(resourceGroupName: string, options: { propertiesToInclude? : string, includeSiteTypes? : string, includeSlots? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteCollection>): void;
    getSites(resourceGroupName: string, callback: ServiceCallback<models.SiteCollection>): void;

    /**
     * @summary Get details of a web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.propertiesToInclude] Additional web app properties
     * included in the response
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSite(resourceGroupName: string, name: string, options: { propertiesToInclude? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Site>): void;
    getSite(resourceGroupName: string, name: string, callback: ServiceCallback<models.Site>): void;

    /**
     * @summary Creates a new web app or modifies an existing web app.
     *
     * @param {string} resourceGroupName Name of the resource group
     * 
     * @param {string} name Name of the web app
     * 
     * @param {object} siteEnvelope Details of web app if it exists already
     * 
     * @param {string} [siteEnvelope.siteName] Name of web app
     * 
     * @param {boolean} [siteEnvelope.enabled] True if the site is enabled;
     * otherwise, false. Setting this  value to false disables the site (takes
     * the site off line).
     * 
     * @param {array} [siteEnvelope.hostNameSslStates] Hostname SSL states are
     * used to manage the SSL bindings for site's hostnames.
     * 
     * @param {string} [siteEnvelope.serverFarmId]
     * 
     * @param {object} [siteEnvelope.siteConfig] Configuration of web app
     * 
     * @param {number} [siteEnvelope.siteConfig.numberOfWorkers] Number of workers
     * 
     * @param {array} [siteEnvelope.siteConfig.defaultDocuments] Default documents
     * 
     * @param {string} [siteEnvelope.siteConfig.netFrameworkVersion] Net Framework
     * Version
     * 
     * @param {string} [siteEnvelope.siteConfig.phpVersion] Version of PHP
     * 
     * @param {string} [siteEnvelope.siteConfig.pythonVersion] Version of Python
     * 
     * @param {string} [siteEnvelope.siteConfig.nodeVersion] Version of Node
     * 
     * @param {boolean} [siteEnvelope.siteConfig.requestTracingEnabled] Enable
     * request tracing
     * 
     * @param {date} [siteEnvelope.siteConfig.requestTracingExpirationTime]
     * Request tracing expiration time
     * 
     * @param {boolean} [siteEnvelope.siteConfig.remoteDebuggingEnabled] Remote
     * Debugging Enabled
     * 
     * @param {string} [siteEnvelope.siteConfig.remoteDebuggingVersion] Remote
     * Debugging Version
     * 
     * @param {boolean} [siteEnvelope.siteConfig.httpLoggingEnabled] HTTP logging
     * Enabled
     * 
     * @param {number} [siteEnvelope.siteConfig.logsDirectorySizeLimit] HTTP Logs
     * Directory size limit
     * 
     * @param {boolean} [siteEnvelope.siteConfig.detailedErrorLoggingEnabled]
     * Detailed error logging enabled
     * 
     * @param {string} [siteEnvelope.siteConfig.publishingUsername] Publishing
     * user name
     * 
     * @param {string} [siteEnvelope.siteConfig.publishingPassword] Publishing
     * password
     * 
     * @param {array} [siteEnvelope.siteConfig.appSettings] Application Settings
     * 
     * @param {array} [siteEnvelope.siteConfig.metadata] Site Metadata
     * 
     * @param {array} [siteEnvelope.siteConfig.connectionStrings] Connection
     * strings
     * 
     * @param {array} [siteEnvelope.siteConfig.handlerMappings] Handler mappings
     * 
     * @param {string} [siteEnvelope.siteConfig.documentRoot] Document root
     * 
     * @param {string} [siteEnvelope.siteConfig.scmType] SCM type
     * 
     * @param {boolean} [siteEnvelope.siteConfig.use32BitWorkerProcess] Use 32 bit
     * worker process
     * 
     * @param {boolean} [siteEnvelope.siteConfig.webSocketsEnabled] Web socket
     * enabled.
     * 
     * @param {boolean} [siteEnvelope.siteConfig.alwaysOn] Always On
     * 
     * @param {string} [siteEnvelope.siteConfig.javaVersion] Java version
     * 
     * @param {string} [siteEnvelope.siteConfig.javaContainer] Java container
     * 
     * @param {string} [siteEnvelope.siteConfig.javaContainerVersion] Java
     * container version
     * 
     * @param {string} [siteEnvelope.siteConfig.appCommandLine] App Command Line
     * to launch
     * 
     * @param {string} [siteEnvelope.siteConfig.managedPipelineMode] Managed
     * pipeline mode. Possible values include: 'Integrated', 'Classic'
     * 
     * @param {array} [siteEnvelope.siteConfig.virtualApplications] Virtual
     * applications
     * 
     * @param {string} [siteEnvelope.siteConfig.loadBalancing] Site load
     * balancing. Possible values include: 'WeightedRoundRobin', 'LeastRequests',
     * 'LeastResponseTime', 'WeightedTotalTraffic', 'RequestHash'
     * 
     * @param {object} [siteEnvelope.siteConfig.experiments] This is work around
     * for polymophic types
     * 
     * @param {array} [siteEnvelope.siteConfig.experiments.rampUpRules] List of
     * {Microsoft.Web.Hosting.Administration.RampUpRule} objects.
     * 
     * @param {object} [siteEnvelope.siteConfig.limits] Site limits
     * 
     * @param {number} [siteEnvelope.siteConfig.limits.maxPercentageCpu] Maximum
     * allowed CPU usage percentage
     * 
     * @param {number} [siteEnvelope.siteConfig.limits.maxMemoryInMb] Maximum
     * allowed memory usage in MB
     * 
     * @param {number} [siteEnvelope.siteConfig.limits.maxDiskSizeInMb] Maximum
     * allowed disk size usage in MB
     * 
     * @param {boolean} [siteEnvelope.siteConfig.autoHealEnabled] Auto heal enabled
     * 
     * @param {object} [siteEnvelope.siteConfig.autoHealRules] Auto heal rules
     * 
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.triggers] Triggers -
     * Conditions that describe when to execute the auto-heal actions
     * 
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.triggers.requests]
     * Requests - Defines a rule based on total requests
     * 
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.requests.count] Count
     * 
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.requests.timeInterval]
     * TimeInterval
     * 
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.privateBytesInKB]
     * PrivateBytesInKB - Defines a rule based on private bytes
     * 
     * @param {array} [siteEnvelope.siteConfig.autoHealRules.triggers.statusCodes]
     * StatusCodes - Defines a rule based on status codes
     * 
     * @param {object}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests] SlowRequests
     * - Defines a rule based on request execution time
     * 
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.timeTaken]
     * TimeTaken
     * 
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.count] Count
     * 
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.timeInterval]
     * TimeInterval
     * 
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.actions] Actions -
     * Actions to be executed when a rule is triggered
     * 
     * @param {string} siteEnvelope.siteConfig.autoHealRules.actions.actionType
     * ActionType - predefined action to be taken. Possible values include:
     * 'Recycle', 'LogEvent', 'CustomAction'
     * 
     * @param {object}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction] CustomAction
     * - custom action to be taken
     * 
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction.exe]
     * Executable to be run
     * 
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction.parameters]
     * Parameters for the executable
     * 
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.minProcessExecutionTime]
     * MinProcessExecutionTime - minimum time the process must execute
     * before taking the action
     * 
     * @param {string} [siteEnvelope.siteConfig.tracingOptions] Tracing options
     * 
     * @param {string} [siteEnvelope.siteConfig.vnetName] Vnet name
     * 
     * @param {object} [siteEnvelope.siteConfig.cors] Cross-Origin Resource
     * Sharing (CORS) settings.
     * 
     * @param {array} [siteEnvelope.siteConfig.cors.allowedOrigins] Gets or sets
     * the list of origins that should be allowed to make cross-origin
     * calls (for example: http://example.com:12345). Use "*" to allow
     * all.
     * 
     * @param {object} [siteEnvelope.siteConfig.apiDefinition] Information about
     * the formal API definition for the web app.
     * 
     * @param {string} [siteEnvelope.siteConfig.apiDefinition.url] The URL of the
     * API definition.
     * 
     * @param {string} [siteEnvelope.siteConfig.autoSwapSlotName] Auto swap slot
     * name
     * 
     * @param {boolean} [siteEnvelope.siteConfig.localMySqlEnabled] Local mysql
     * enabled
     * 
     * @param {array} [siteEnvelope.siteConfig.ipSecurityRestrictions] Ip Security
     * restrictions
     * 
     * @param {string} [siteEnvelope.siteConfig.id] Resource Id
     * 
     * @param {string} [siteEnvelope.siteConfig.name] Resource Name
     * 
     * @param {string} [siteEnvelope.siteConfig.kind] Kind of resource
     * 
     * @param {string} siteEnvelope.siteConfig.location Resource Location
     * 
     * @param {string} [siteEnvelope.siteConfig.type] Resource type
     * 
     * @param {object} [siteEnvelope.siteConfig.tags] Resource tags
     * 
     * @param {boolean} [siteEnvelope.scmSiteAlsoStopped] If set indicates whether
     * to stop SCM (KUDU) site when the web app is stopped. Default is false.
     * 
     * @param {object} [siteEnvelope.hostingEnvironmentProfile] Specification for
     * the hosting environment (App Service Environment) to use for the web app
     * 
     * @param {string} [siteEnvelope.hostingEnvironmentProfile.id] Resource id of
     * the hostingEnvironment (App Service Environment)
     * 
     * @param {string} [siteEnvelope.hostingEnvironmentProfile.name] Name of the
     * hostingEnvironment (App Service Environment) (read only)
     * 
     * @param {string} [siteEnvelope.hostingEnvironmentProfile.type] Resource type
     * of the hostingEnvironment (App Service Environment) (read only)
     * 
     * @param {string} [siteEnvelope.microService]
     * 
     * @param {string} [siteEnvelope.gatewaySiteName] Name of gateway app
     * associated with web app
     * 
     * @param {boolean} [siteEnvelope.clientAffinityEnabled] Specifies if the
     * client affinity is enabled when load balancing http request for multiple
     * instances of the web app
     * 
     * @param {boolean} [siteEnvelope.clientCertEnabled] Specifies if the client
     * certificate is enabled for the web app
     * 
     * @param {boolean} [siteEnvelope.hostNamesDisabled] Specifies if the public
     * hostnames are disabled the web app.
     * If set to true the app is only accessible via API Management
     * process
     * 
     * @param {number} [siteEnvelope.containerSize] Size of a function container
     * 
     * @param {number} [siteEnvelope.maxNumberOfWorkers] Maximum number of workers
     * This only applies to function container
     * 
     * @param {object} [siteEnvelope.cloningInfo] This is only valid for web app
     * creation. If specified, web app is cloned from
     * a source web app
     * 
     * @param {string} [siteEnvelope.cloningInfo.correlationId] Correlation Id of
     * cloning operation. This id ties multiple cloning operations
     * together to use the same snapshot
     * 
     * @param {boolean} [siteEnvelope.cloningInfo.overwrite] Overwrite destination
     * web app
     * 
     * @param {boolean} [siteEnvelope.cloningInfo.cloneCustomHostNames] If true,
     * clone custom hostnames from source web app
     * 
     * @param {boolean} [siteEnvelope.cloningInfo.cloneSourceControl] Clone source
     * control from source web app
     * 
     * @param {string} [siteEnvelope.cloningInfo.sourceWebAppId] ARM resource id
     * of the source web app. Web app resource id is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}
     * for production slots and
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName}
     * for other slots
     * 
     * @param {string} [siteEnvelope.cloningInfo.hostingEnvironment] Hosting
     * environment
     * 
     * @param {object} [siteEnvelope.cloningInfo.appSettingsOverrides] Application
     * settings overrides for cloned web app. If specified these settings will
     * override the settings cloned
     * from source web app. If not specified, application settings
     * from source web app are retained.
     * 
     * @param {boolean} [siteEnvelope.cloningInfo.configureLoadBalancing] If
     * specified configure load balancing for source and clone site
     * 
     * @param {string} [siteEnvelope.cloningInfo.trafficManagerProfileId] ARM
     * resource id of the traffic manager profile to use if it exists. Traffic
     * manager resource id is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}
     * 
     * @param {string} [siteEnvelope.cloningInfo.trafficManagerProfileName] Name
     * of traffic manager profile to create. This is only needed if traffic
     * manager profile does not already exist
     * 
     * @param {string} [siteEnvelope.id] Resource Id
     * 
     * @param {string} [siteEnvelope.name] Resource Name
     * 
     * @param {string} [siteEnvelope.kind] Kind of resource
     * 
     * @param {string} siteEnvelope.location Resource Location
     * 
     * @param {string} [siteEnvelope.type] Resource type
     * 
     * @param {object} [siteEnvelope.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.skipDnsRegistration] If true web app hostname is
     * not registered with DNS on creation. This parameter is
     * only used for app creation
     * 
     * @param {string} [options.skipCustomDomainVerification] If true, custom (non
     * *.azurewebsites.net) domains associated with web app are not verified.
     * 
     * @param {string} [options.forceDnsRegistration] If true, web app hostname is
     * force registered with DNS
     * 
     * @param {string} [options.ttlInSeconds] Time to live in seconds for web
     * app's default domain name
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateSite(resourceGroupName: string, name: string, siteEnvelope: models.Site, options: { skipDnsRegistration? : string, skipCustomDomainVerification? : string, forceDnsRegistration? : string, ttlInSeconds? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Site>): void;
    createOrUpdateSite(resourceGroupName: string, name: string, siteEnvelope: models.Site, callback: ServiceCallback<models.Site>): void;

    /**
     * @summary Creates a new web app or modifies an existing web app.
     *
     * @param {string} resourceGroupName Name of the resource group
     * 
     * @param {string} name Name of the web app
     * 
     * @param {object} siteEnvelope Details of web app if it exists already
     * 
     * @param {string} [siteEnvelope.siteName] Name of web app
     * 
     * @param {boolean} [siteEnvelope.enabled] True if the site is enabled;
     * otherwise, false. Setting this  value to false disables the site (takes
     * the site off line).
     * 
     * @param {array} [siteEnvelope.hostNameSslStates] Hostname SSL states are
     * used to manage the SSL bindings for site's hostnames.
     * 
     * @param {string} [siteEnvelope.serverFarmId]
     * 
     * @param {object} [siteEnvelope.siteConfig] Configuration of web app
     * 
     * @param {number} [siteEnvelope.siteConfig.numberOfWorkers] Number of workers
     * 
     * @param {array} [siteEnvelope.siteConfig.defaultDocuments] Default documents
     * 
     * @param {string} [siteEnvelope.siteConfig.netFrameworkVersion] Net Framework
     * Version
     * 
     * @param {string} [siteEnvelope.siteConfig.phpVersion] Version of PHP
     * 
     * @param {string} [siteEnvelope.siteConfig.pythonVersion] Version of Python
     * 
     * @param {string} [siteEnvelope.siteConfig.nodeVersion] Version of Node
     * 
     * @param {boolean} [siteEnvelope.siteConfig.requestTracingEnabled] Enable
     * request tracing
     * 
     * @param {date} [siteEnvelope.siteConfig.requestTracingExpirationTime]
     * Request tracing expiration time
     * 
     * @param {boolean} [siteEnvelope.siteConfig.remoteDebuggingEnabled] Remote
     * Debugging Enabled
     * 
     * @param {string} [siteEnvelope.siteConfig.remoteDebuggingVersion] Remote
     * Debugging Version
     * 
     * @param {boolean} [siteEnvelope.siteConfig.httpLoggingEnabled] HTTP logging
     * Enabled
     * 
     * @param {number} [siteEnvelope.siteConfig.logsDirectorySizeLimit] HTTP Logs
     * Directory size limit
     * 
     * @param {boolean} [siteEnvelope.siteConfig.detailedErrorLoggingEnabled]
     * Detailed error logging enabled
     * 
     * @param {string} [siteEnvelope.siteConfig.publishingUsername] Publishing
     * user name
     * 
     * @param {string} [siteEnvelope.siteConfig.publishingPassword] Publishing
     * password
     * 
     * @param {array} [siteEnvelope.siteConfig.appSettings] Application Settings
     * 
     * @param {array} [siteEnvelope.siteConfig.metadata] Site Metadata
     * 
     * @param {array} [siteEnvelope.siteConfig.connectionStrings] Connection
     * strings
     * 
     * @param {array} [siteEnvelope.siteConfig.handlerMappings] Handler mappings
     * 
     * @param {string} [siteEnvelope.siteConfig.documentRoot] Document root
     * 
     * @param {string} [siteEnvelope.siteConfig.scmType] SCM type
     * 
     * @param {boolean} [siteEnvelope.siteConfig.use32BitWorkerProcess] Use 32 bit
     * worker process
     * 
     * @param {boolean} [siteEnvelope.siteConfig.webSocketsEnabled] Web socket
     * enabled.
     * 
     * @param {boolean} [siteEnvelope.siteConfig.alwaysOn] Always On
     * 
     * @param {string} [siteEnvelope.siteConfig.javaVersion] Java version
     * 
     * @param {string} [siteEnvelope.siteConfig.javaContainer] Java container
     * 
     * @param {string} [siteEnvelope.siteConfig.javaContainerVersion] Java
     * container version
     * 
     * @param {string} [siteEnvelope.siteConfig.appCommandLine] App Command Line
     * to launch
     * 
     * @param {string} [siteEnvelope.siteConfig.managedPipelineMode] Managed
     * pipeline mode. Possible values include: 'Integrated', 'Classic'
     * 
     * @param {array} [siteEnvelope.siteConfig.virtualApplications] Virtual
     * applications
     * 
     * @param {string} [siteEnvelope.siteConfig.loadBalancing] Site load
     * balancing. Possible values include: 'WeightedRoundRobin', 'LeastRequests',
     * 'LeastResponseTime', 'WeightedTotalTraffic', 'RequestHash'
     * 
     * @param {object} [siteEnvelope.siteConfig.experiments] This is work around
     * for polymophic types
     * 
     * @param {array} [siteEnvelope.siteConfig.experiments.rampUpRules] List of
     * {Microsoft.Web.Hosting.Administration.RampUpRule} objects.
     * 
     * @param {object} [siteEnvelope.siteConfig.limits] Site limits
     * 
     * @param {number} [siteEnvelope.siteConfig.limits.maxPercentageCpu] Maximum
     * allowed CPU usage percentage
     * 
     * @param {number} [siteEnvelope.siteConfig.limits.maxMemoryInMb] Maximum
     * allowed memory usage in MB
     * 
     * @param {number} [siteEnvelope.siteConfig.limits.maxDiskSizeInMb] Maximum
     * allowed disk size usage in MB
     * 
     * @param {boolean} [siteEnvelope.siteConfig.autoHealEnabled] Auto heal enabled
     * 
     * @param {object} [siteEnvelope.siteConfig.autoHealRules] Auto heal rules
     * 
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.triggers] Triggers -
     * Conditions that describe when to execute the auto-heal actions
     * 
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.triggers.requests]
     * Requests - Defines a rule based on total requests
     * 
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.requests.count] Count
     * 
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.requests.timeInterval]
     * TimeInterval
     * 
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.privateBytesInKB]
     * PrivateBytesInKB - Defines a rule based on private bytes
     * 
     * @param {array} [siteEnvelope.siteConfig.autoHealRules.triggers.statusCodes]
     * StatusCodes - Defines a rule based on status codes
     * 
     * @param {object}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests] SlowRequests
     * - Defines a rule based on request execution time
     * 
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.timeTaken]
     * TimeTaken
     * 
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.count] Count
     * 
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.timeInterval]
     * TimeInterval
     * 
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.actions] Actions -
     * Actions to be executed when a rule is triggered
     * 
     * @param {string} siteEnvelope.siteConfig.autoHealRules.actions.actionType
     * ActionType - predefined action to be taken. Possible values include:
     * 'Recycle', 'LogEvent', 'CustomAction'
     * 
     * @param {object}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction] CustomAction
     * - custom action to be taken
     * 
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction.exe]
     * Executable to be run
     * 
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction.parameters]
     * Parameters for the executable
     * 
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.minProcessExecutionTime]
     * MinProcessExecutionTime - minimum time the process must execute
     * before taking the action
     * 
     * @param {string} [siteEnvelope.siteConfig.tracingOptions] Tracing options
     * 
     * @param {string} [siteEnvelope.siteConfig.vnetName] Vnet name
     * 
     * @param {object} [siteEnvelope.siteConfig.cors] Cross-Origin Resource
     * Sharing (CORS) settings.
     * 
     * @param {array} [siteEnvelope.siteConfig.cors.allowedOrigins] Gets or sets
     * the list of origins that should be allowed to make cross-origin
     * calls (for example: http://example.com:12345). Use "*" to allow
     * all.
     * 
     * @param {object} [siteEnvelope.siteConfig.apiDefinition] Information about
     * the formal API definition for the web app.
     * 
     * @param {string} [siteEnvelope.siteConfig.apiDefinition.url] The URL of the
     * API definition.
     * 
     * @param {string} [siteEnvelope.siteConfig.autoSwapSlotName] Auto swap slot
     * name
     * 
     * @param {boolean} [siteEnvelope.siteConfig.localMySqlEnabled] Local mysql
     * enabled
     * 
     * @param {array} [siteEnvelope.siteConfig.ipSecurityRestrictions] Ip Security
     * restrictions
     * 
     * @param {string} [siteEnvelope.siteConfig.id] Resource Id
     * 
     * @param {string} [siteEnvelope.siteConfig.name] Resource Name
     * 
     * @param {string} [siteEnvelope.siteConfig.kind] Kind of resource
     * 
     * @param {string} siteEnvelope.siteConfig.location Resource Location
     * 
     * @param {string} [siteEnvelope.siteConfig.type] Resource type
     * 
     * @param {object} [siteEnvelope.siteConfig.tags] Resource tags
     * 
     * @param {boolean} [siteEnvelope.scmSiteAlsoStopped] If set indicates whether
     * to stop SCM (KUDU) site when the web app is stopped. Default is false.
     * 
     * @param {object} [siteEnvelope.hostingEnvironmentProfile] Specification for
     * the hosting environment (App Service Environment) to use for the web app
     * 
     * @param {string} [siteEnvelope.hostingEnvironmentProfile.id] Resource id of
     * the hostingEnvironment (App Service Environment)
     * 
     * @param {string} [siteEnvelope.hostingEnvironmentProfile.name] Name of the
     * hostingEnvironment (App Service Environment) (read only)
     * 
     * @param {string} [siteEnvelope.hostingEnvironmentProfile.type] Resource type
     * of the hostingEnvironment (App Service Environment) (read only)
     * 
     * @param {string} [siteEnvelope.microService]
     * 
     * @param {string} [siteEnvelope.gatewaySiteName] Name of gateway app
     * associated with web app
     * 
     * @param {boolean} [siteEnvelope.clientAffinityEnabled] Specifies if the
     * client affinity is enabled when load balancing http request for multiple
     * instances of the web app
     * 
     * @param {boolean} [siteEnvelope.clientCertEnabled] Specifies if the client
     * certificate is enabled for the web app
     * 
     * @param {boolean} [siteEnvelope.hostNamesDisabled] Specifies if the public
     * hostnames are disabled the web app.
     * If set to true the app is only accessible via API Management
     * process
     * 
     * @param {number} [siteEnvelope.containerSize] Size of a function container
     * 
     * @param {number} [siteEnvelope.maxNumberOfWorkers] Maximum number of workers
     * This only applies to function container
     * 
     * @param {object} [siteEnvelope.cloningInfo] This is only valid for web app
     * creation. If specified, web app is cloned from
     * a source web app
     * 
     * @param {string} [siteEnvelope.cloningInfo.correlationId] Correlation Id of
     * cloning operation. This id ties multiple cloning operations
     * together to use the same snapshot
     * 
     * @param {boolean} [siteEnvelope.cloningInfo.overwrite] Overwrite destination
     * web app
     * 
     * @param {boolean} [siteEnvelope.cloningInfo.cloneCustomHostNames] If true,
     * clone custom hostnames from source web app
     * 
     * @param {boolean} [siteEnvelope.cloningInfo.cloneSourceControl] Clone source
     * control from source web app
     * 
     * @param {string} [siteEnvelope.cloningInfo.sourceWebAppId] ARM resource id
     * of the source web app. Web app resource id is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}
     * for production slots and
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName}
     * for other slots
     * 
     * @param {string} [siteEnvelope.cloningInfo.hostingEnvironment] Hosting
     * environment
     * 
     * @param {object} [siteEnvelope.cloningInfo.appSettingsOverrides] Application
     * settings overrides for cloned web app. If specified these settings will
     * override the settings cloned
     * from source web app. If not specified, application settings
     * from source web app are retained.
     * 
     * @param {boolean} [siteEnvelope.cloningInfo.configureLoadBalancing] If
     * specified configure load balancing for source and clone site
     * 
     * @param {string} [siteEnvelope.cloningInfo.trafficManagerProfileId] ARM
     * resource id of the traffic manager profile to use if it exists. Traffic
     * manager resource id is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}
     * 
     * @param {string} [siteEnvelope.cloningInfo.trafficManagerProfileName] Name
     * of traffic manager profile to create. This is only needed if traffic
     * manager profile does not already exist
     * 
     * @param {string} [siteEnvelope.id] Resource Id
     * 
     * @param {string} [siteEnvelope.name] Resource Name
     * 
     * @param {string} [siteEnvelope.kind] Kind of resource
     * 
     * @param {string} siteEnvelope.location Resource Location
     * 
     * @param {string} [siteEnvelope.type] Resource type
     * 
     * @param {object} [siteEnvelope.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.skipDnsRegistration] If true web app hostname is
     * not registered with DNS on creation. This parameter is
     * only used for app creation
     * 
     * @param {string} [options.skipCustomDomainVerification] If true, custom (non
     * *.azurewebsites.net) domains associated with web app are not verified.
     * 
     * @param {string} [options.forceDnsRegistration] If true, web app hostname is
     * force registered with DNS
     * 
     * @param {string} [options.ttlInSeconds] Time to live in seconds for web
     * app's default domain name
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreateOrUpdateSite(resourceGroupName: string, name: string, siteEnvelope: models.Site, options: { skipDnsRegistration? : string, skipCustomDomainVerification? : string, forceDnsRegistration? : string, ttlInSeconds? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Site>): void;
    beginCreateOrUpdateSite(resourceGroupName: string, name: string, siteEnvelope: models.Site, callback: ServiceCallback<models.Site>): void;

    /**
     * @summary Deletes a web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.deleteMetrics] If true, web app metrics are also
     * deleted
     * 
     * @param {string} [options.deleteEmptyServerFarm] If true and App Service
     * Plan is empty after web app deletion, App Service Plan is also deleted
     * 
     * @param {string} [options.skipDnsRegistration] If true, DNS registration is
     * skipped
     * 
     * @param {string} [options.deleteAllSlots] If true, all slots associated with
     * web app are also deleted
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteSite(resourceGroupName: string, name: string, options: { deleteMetrics? : string, deleteEmptyServerFarm? : string, skipDnsRegistration? : string, deleteAllSlots? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteSite(resourceGroupName: string, name: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Get details of a web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.propertiesToInclude] Additional web app properties
     * included in the response
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteSlot(resourceGroupName: string, name: string, slot: string, options: { propertiesToInclude? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Site>): void;
    getSiteSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.Site>): void;

    /**
     * @summary Creates a new web app or modifies an existing web app.
     *
     * @param {string} resourceGroupName Name of the resource group
     * 
     * @param {string} name Name of the web app
     * 
     * @param {object} siteEnvelope Details of web app if it exists already
     * 
     * @param {string} [siteEnvelope.siteName] Name of web app
     * 
     * @param {boolean} [siteEnvelope.enabled] True if the site is enabled;
     * otherwise, false. Setting this  value to false disables the site (takes
     * the site off line).
     * 
     * @param {array} [siteEnvelope.hostNameSslStates] Hostname SSL states are
     * used to manage the SSL bindings for site's hostnames.
     * 
     * @param {string} [siteEnvelope.serverFarmId]
     * 
     * @param {object} [siteEnvelope.siteConfig] Configuration of web app
     * 
     * @param {number} [siteEnvelope.siteConfig.numberOfWorkers] Number of workers
     * 
     * @param {array} [siteEnvelope.siteConfig.defaultDocuments] Default documents
     * 
     * @param {string} [siteEnvelope.siteConfig.netFrameworkVersion] Net Framework
     * Version
     * 
     * @param {string} [siteEnvelope.siteConfig.phpVersion] Version of PHP
     * 
     * @param {string} [siteEnvelope.siteConfig.pythonVersion] Version of Python
     * 
     * @param {string} [siteEnvelope.siteConfig.nodeVersion] Version of Node
     * 
     * @param {boolean} [siteEnvelope.siteConfig.requestTracingEnabled] Enable
     * request tracing
     * 
     * @param {date} [siteEnvelope.siteConfig.requestTracingExpirationTime]
     * Request tracing expiration time
     * 
     * @param {boolean} [siteEnvelope.siteConfig.remoteDebuggingEnabled] Remote
     * Debugging Enabled
     * 
     * @param {string} [siteEnvelope.siteConfig.remoteDebuggingVersion] Remote
     * Debugging Version
     * 
     * @param {boolean} [siteEnvelope.siteConfig.httpLoggingEnabled] HTTP logging
     * Enabled
     * 
     * @param {number} [siteEnvelope.siteConfig.logsDirectorySizeLimit] HTTP Logs
     * Directory size limit
     * 
     * @param {boolean} [siteEnvelope.siteConfig.detailedErrorLoggingEnabled]
     * Detailed error logging enabled
     * 
     * @param {string} [siteEnvelope.siteConfig.publishingUsername] Publishing
     * user name
     * 
     * @param {string} [siteEnvelope.siteConfig.publishingPassword] Publishing
     * password
     * 
     * @param {array} [siteEnvelope.siteConfig.appSettings] Application Settings
     * 
     * @param {array} [siteEnvelope.siteConfig.metadata] Site Metadata
     * 
     * @param {array} [siteEnvelope.siteConfig.connectionStrings] Connection
     * strings
     * 
     * @param {array} [siteEnvelope.siteConfig.handlerMappings] Handler mappings
     * 
     * @param {string} [siteEnvelope.siteConfig.documentRoot] Document root
     * 
     * @param {string} [siteEnvelope.siteConfig.scmType] SCM type
     * 
     * @param {boolean} [siteEnvelope.siteConfig.use32BitWorkerProcess] Use 32 bit
     * worker process
     * 
     * @param {boolean} [siteEnvelope.siteConfig.webSocketsEnabled] Web socket
     * enabled.
     * 
     * @param {boolean} [siteEnvelope.siteConfig.alwaysOn] Always On
     * 
     * @param {string} [siteEnvelope.siteConfig.javaVersion] Java version
     * 
     * @param {string} [siteEnvelope.siteConfig.javaContainer] Java container
     * 
     * @param {string} [siteEnvelope.siteConfig.javaContainerVersion] Java
     * container version
     * 
     * @param {string} [siteEnvelope.siteConfig.appCommandLine] App Command Line
     * to launch
     * 
     * @param {string} [siteEnvelope.siteConfig.managedPipelineMode] Managed
     * pipeline mode. Possible values include: 'Integrated', 'Classic'
     * 
     * @param {array} [siteEnvelope.siteConfig.virtualApplications] Virtual
     * applications
     * 
     * @param {string} [siteEnvelope.siteConfig.loadBalancing] Site load
     * balancing. Possible values include: 'WeightedRoundRobin', 'LeastRequests',
     * 'LeastResponseTime', 'WeightedTotalTraffic', 'RequestHash'
     * 
     * @param {object} [siteEnvelope.siteConfig.experiments] This is work around
     * for polymophic types
     * 
     * @param {array} [siteEnvelope.siteConfig.experiments.rampUpRules] List of
     * {Microsoft.Web.Hosting.Administration.RampUpRule} objects.
     * 
     * @param {object} [siteEnvelope.siteConfig.limits] Site limits
     * 
     * @param {number} [siteEnvelope.siteConfig.limits.maxPercentageCpu] Maximum
     * allowed CPU usage percentage
     * 
     * @param {number} [siteEnvelope.siteConfig.limits.maxMemoryInMb] Maximum
     * allowed memory usage in MB
     * 
     * @param {number} [siteEnvelope.siteConfig.limits.maxDiskSizeInMb] Maximum
     * allowed disk size usage in MB
     * 
     * @param {boolean} [siteEnvelope.siteConfig.autoHealEnabled] Auto heal enabled
     * 
     * @param {object} [siteEnvelope.siteConfig.autoHealRules] Auto heal rules
     * 
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.triggers] Triggers -
     * Conditions that describe when to execute the auto-heal actions
     * 
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.triggers.requests]
     * Requests - Defines a rule based on total requests
     * 
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.requests.count] Count
     * 
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.requests.timeInterval]
     * TimeInterval
     * 
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.privateBytesInKB]
     * PrivateBytesInKB - Defines a rule based on private bytes
     * 
     * @param {array} [siteEnvelope.siteConfig.autoHealRules.triggers.statusCodes]
     * StatusCodes - Defines a rule based on status codes
     * 
     * @param {object}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests] SlowRequests
     * - Defines a rule based on request execution time
     * 
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.timeTaken]
     * TimeTaken
     * 
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.count] Count
     * 
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.timeInterval]
     * TimeInterval
     * 
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.actions] Actions -
     * Actions to be executed when a rule is triggered
     * 
     * @param {string} siteEnvelope.siteConfig.autoHealRules.actions.actionType
     * ActionType - predefined action to be taken. Possible values include:
     * 'Recycle', 'LogEvent', 'CustomAction'
     * 
     * @param {object}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction] CustomAction
     * - custom action to be taken
     * 
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction.exe]
     * Executable to be run
     * 
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction.parameters]
     * Parameters for the executable
     * 
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.minProcessExecutionTime]
     * MinProcessExecutionTime - minimum time the process must execute
     * before taking the action
     * 
     * @param {string} [siteEnvelope.siteConfig.tracingOptions] Tracing options
     * 
     * @param {string} [siteEnvelope.siteConfig.vnetName] Vnet name
     * 
     * @param {object} [siteEnvelope.siteConfig.cors] Cross-Origin Resource
     * Sharing (CORS) settings.
     * 
     * @param {array} [siteEnvelope.siteConfig.cors.allowedOrigins] Gets or sets
     * the list of origins that should be allowed to make cross-origin
     * calls (for example: http://example.com:12345). Use "*" to allow
     * all.
     * 
     * @param {object} [siteEnvelope.siteConfig.apiDefinition] Information about
     * the formal API definition for the web app.
     * 
     * @param {string} [siteEnvelope.siteConfig.apiDefinition.url] The URL of the
     * API definition.
     * 
     * @param {string} [siteEnvelope.siteConfig.autoSwapSlotName] Auto swap slot
     * name
     * 
     * @param {boolean} [siteEnvelope.siteConfig.localMySqlEnabled] Local mysql
     * enabled
     * 
     * @param {array} [siteEnvelope.siteConfig.ipSecurityRestrictions] Ip Security
     * restrictions
     * 
     * @param {string} [siteEnvelope.siteConfig.id] Resource Id
     * 
     * @param {string} [siteEnvelope.siteConfig.name] Resource Name
     * 
     * @param {string} [siteEnvelope.siteConfig.kind] Kind of resource
     * 
     * @param {string} siteEnvelope.siteConfig.location Resource Location
     * 
     * @param {string} [siteEnvelope.siteConfig.type] Resource type
     * 
     * @param {object} [siteEnvelope.siteConfig.tags] Resource tags
     * 
     * @param {boolean} [siteEnvelope.scmSiteAlsoStopped] If set indicates whether
     * to stop SCM (KUDU) site when the web app is stopped. Default is false.
     * 
     * @param {object} [siteEnvelope.hostingEnvironmentProfile] Specification for
     * the hosting environment (App Service Environment) to use for the web app
     * 
     * @param {string} [siteEnvelope.hostingEnvironmentProfile.id] Resource id of
     * the hostingEnvironment (App Service Environment)
     * 
     * @param {string} [siteEnvelope.hostingEnvironmentProfile.name] Name of the
     * hostingEnvironment (App Service Environment) (read only)
     * 
     * @param {string} [siteEnvelope.hostingEnvironmentProfile.type] Resource type
     * of the hostingEnvironment (App Service Environment) (read only)
     * 
     * @param {string} [siteEnvelope.microService]
     * 
     * @param {string} [siteEnvelope.gatewaySiteName] Name of gateway app
     * associated with web app
     * 
     * @param {boolean} [siteEnvelope.clientAffinityEnabled] Specifies if the
     * client affinity is enabled when load balancing http request for multiple
     * instances of the web app
     * 
     * @param {boolean} [siteEnvelope.clientCertEnabled] Specifies if the client
     * certificate is enabled for the web app
     * 
     * @param {boolean} [siteEnvelope.hostNamesDisabled] Specifies if the public
     * hostnames are disabled the web app.
     * If set to true the app is only accessible via API Management
     * process
     * 
     * @param {number} [siteEnvelope.containerSize] Size of a function container
     * 
     * @param {number} [siteEnvelope.maxNumberOfWorkers] Maximum number of workers
     * This only applies to function container
     * 
     * @param {object} [siteEnvelope.cloningInfo] This is only valid for web app
     * creation. If specified, web app is cloned from
     * a source web app
     * 
     * @param {string} [siteEnvelope.cloningInfo.correlationId] Correlation Id of
     * cloning operation. This id ties multiple cloning operations
     * together to use the same snapshot
     * 
     * @param {boolean} [siteEnvelope.cloningInfo.overwrite] Overwrite destination
     * web app
     * 
     * @param {boolean} [siteEnvelope.cloningInfo.cloneCustomHostNames] If true,
     * clone custom hostnames from source web app
     * 
     * @param {boolean} [siteEnvelope.cloningInfo.cloneSourceControl] Clone source
     * control from source web app
     * 
     * @param {string} [siteEnvelope.cloningInfo.sourceWebAppId] ARM resource id
     * of the source web app. Web app resource id is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}
     * for production slots and
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName}
     * for other slots
     * 
     * @param {string} [siteEnvelope.cloningInfo.hostingEnvironment] Hosting
     * environment
     * 
     * @param {object} [siteEnvelope.cloningInfo.appSettingsOverrides] Application
     * settings overrides for cloned web app. If specified these settings will
     * override the settings cloned
     * from source web app. If not specified, application settings
     * from source web app are retained.
     * 
     * @param {boolean} [siteEnvelope.cloningInfo.configureLoadBalancing] If
     * specified configure load balancing for source and clone site
     * 
     * @param {string} [siteEnvelope.cloningInfo.trafficManagerProfileId] ARM
     * resource id of the traffic manager profile to use if it exists. Traffic
     * manager resource id is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}
     * 
     * @param {string} [siteEnvelope.cloningInfo.trafficManagerProfileName] Name
     * of traffic manager profile to create. This is only needed if traffic
     * manager profile does not already exist
     * 
     * @param {string} [siteEnvelope.id] Resource Id
     * 
     * @param {string} [siteEnvelope.name] Resource Name
     * 
     * @param {string} [siteEnvelope.kind] Kind of resource
     * 
     * @param {string} siteEnvelope.location Resource Location
     * 
     * @param {string} [siteEnvelope.type] Resource type
     * 
     * @param {object} [siteEnvelope.tags] Resource tags
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.skipDnsRegistration] If true web app hostname is
     * not registered with DNS on creation. This parameter is
     * only used for app creation
     * 
     * @param {string} [options.skipCustomDomainVerification] If true, custom (non
     * *.azurewebsites.net) domains associated with web app are not verified.
     * 
     * @param {string} [options.forceDnsRegistration] If true, web app hostname is
     * force registered with DNS
     * 
     * @param {string} [options.ttlInSeconds] Time to live in seconds for web
     * app's default domain name
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateSiteSlot(resourceGroupName: string, name: string, siteEnvelope: models.Site, slot: string, options: { skipDnsRegistration? : string, skipCustomDomainVerification? : string, forceDnsRegistration? : string, ttlInSeconds? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Site>): void;
    createOrUpdateSiteSlot(resourceGroupName: string, name: string, siteEnvelope: models.Site, slot: string, callback: ServiceCallback<models.Site>): void;

    /**
     * @summary Creates a new web app or modifies an existing web app.
     *
     * @param {string} resourceGroupName Name of the resource group
     * 
     * @param {string} name Name of the web app
     * 
     * @param {object} siteEnvelope Details of web app if it exists already
     * 
     * @param {string} [siteEnvelope.siteName] Name of web app
     * 
     * @param {boolean} [siteEnvelope.enabled] True if the site is enabled;
     * otherwise, false. Setting this  value to false disables the site (takes
     * the site off line).
     * 
     * @param {array} [siteEnvelope.hostNameSslStates] Hostname SSL states are
     * used to manage the SSL bindings for site's hostnames.
     * 
     * @param {string} [siteEnvelope.serverFarmId]
     * 
     * @param {object} [siteEnvelope.siteConfig] Configuration of web app
     * 
     * @param {number} [siteEnvelope.siteConfig.numberOfWorkers] Number of workers
     * 
     * @param {array} [siteEnvelope.siteConfig.defaultDocuments] Default documents
     * 
     * @param {string} [siteEnvelope.siteConfig.netFrameworkVersion] Net Framework
     * Version
     * 
     * @param {string} [siteEnvelope.siteConfig.phpVersion] Version of PHP
     * 
     * @param {string} [siteEnvelope.siteConfig.pythonVersion] Version of Python
     * 
     * @param {string} [siteEnvelope.siteConfig.nodeVersion] Version of Node
     * 
     * @param {boolean} [siteEnvelope.siteConfig.requestTracingEnabled] Enable
     * request tracing
     * 
     * @param {date} [siteEnvelope.siteConfig.requestTracingExpirationTime]
     * Request tracing expiration time
     * 
     * @param {boolean} [siteEnvelope.siteConfig.remoteDebuggingEnabled] Remote
     * Debugging Enabled
     * 
     * @param {string} [siteEnvelope.siteConfig.remoteDebuggingVersion] Remote
     * Debugging Version
     * 
     * @param {boolean} [siteEnvelope.siteConfig.httpLoggingEnabled] HTTP logging
     * Enabled
     * 
     * @param {number} [siteEnvelope.siteConfig.logsDirectorySizeLimit] HTTP Logs
     * Directory size limit
     * 
     * @param {boolean} [siteEnvelope.siteConfig.detailedErrorLoggingEnabled]
     * Detailed error logging enabled
     * 
     * @param {string} [siteEnvelope.siteConfig.publishingUsername] Publishing
     * user name
     * 
     * @param {string} [siteEnvelope.siteConfig.publishingPassword] Publishing
     * password
     * 
     * @param {array} [siteEnvelope.siteConfig.appSettings] Application Settings
     * 
     * @param {array} [siteEnvelope.siteConfig.metadata] Site Metadata
     * 
     * @param {array} [siteEnvelope.siteConfig.connectionStrings] Connection
     * strings
     * 
     * @param {array} [siteEnvelope.siteConfig.handlerMappings] Handler mappings
     * 
     * @param {string} [siteEnvelope.siteConfig.documentRoot] Document root
     * 
     * @param {string} [siteEnvelope.siteConfig.scmType] SCM type
     * 
     * @param {boolean} [siteEnvelope.siteConfig.use32BitWorkerProcess] Use 32 bit
     * worker process
     * 
     * @param {boolean} [siteEnvelope.siteConfig.webSocketsEnabled] Web socket
     * enabled.
     * 
     * @param {boolean} [siteEnvelope.siteConfig.alwaysOn] Always On
     * 
     * @param {string} [siteEnvelope.siteConfig.javaVersion] Java version
     * 
     * @param {string} [siteEnvelope.siteConfig.javaContainer] Java container
     * 
     * @param {string} [siteEnvelope.siteConfig.javaContainerVersion] Java
     * container version
     * 
     * @param {string} [siteEnvelope.siteConfig.appCommandLine] App Command Line
     * to launch
     * 
     * @param {string} [siteEnvelope.siteConfig.managedPipelineMode] Managed
     * pipeline mode. Possible values include: 'Integrated', 'Classic'
     * 
     * @param {array} [siteEnvelope.siteConfig.virtualApplications] Virtual
     * applications
     * 
     * @param {string} [siteEnvelope.siteConfig.loadBalancing] Site load
     * balancing. Possible values include: 'WeightedRoundRobin', 'LeastRequests',
     * 'LeastResponseTime', 'WeightedTotalTraffic', 'RequestHash'
     * 
     * @param {object} [siteEnvelope.siteConfig.experiments] This is work around
     * for polymophic types
     * 
     * @param {array} [siteEnvelope.siteConfig.experiments.rampUpRules] List of
     * {Microsoft.Web.Hosting.Administration.RampUpRule} objects.
     * 
     * @param {object} [siteEnvelope.siteConfig.limits] Site limits
     * 
     * @param {number} [siteEnvelope.siteConfig.limits.maxPercentageCpu] Maximum
     * allowed CPU usage percentage
     * 
     * @param {number} [siteEnvelope.siteConfig.limits.maxMemoryInMb] Maximum
     * allowed memory usage in MB
     * 
     * @param {number} [siteEnvelope.siteConfig.limits.maxDiskSizeInMb] Maximum
     * allowed disk size usage in MB
     * 
     * @param {boolean} [siteEnvelope.siteConfig.autoHealEnabled] Auto heal enabled
     * 
     * @param {object} [siteEnvelope.siteConfig.autoHealRules] Auto heal rules
     * 
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.triggers] Triggers -
     * Conditions that describe when to execute the auto-heal actions
     * 
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.triggers.requests]
     * Requests - Defines a rule based on total requests
     * 
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.requests.count] Count
     * 
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.requests.timeInterval]
     * TimeInterval
     * 
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.privateBytesInKB]
     * PrivateBytesInKB - Defines a rule based on private bytes
     * 
     * @param {array} [siteEnvelope.siteConfig.autoHealRules.triggers.statusCodes]
     * StatusCodes - Defines a rule based on status codes
     * 
     * @param {object}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests] SlowRequests
     * - Defines a rule based on request execution time
     * 
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.timeTaken]
     * TimeTaken
     * 
     * @param {number}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.count] Count
     * 
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.triggers.slowRequests.timeInterval]
     * TimeInterval
     * 
     * @param {object} [siteEnvelope.siteConfig.autoHealRules.actions] Actions -
     * Actions to be executed when a rule is triggered
     * 
     * @param {string} siteEnvelope.siteConfig.autoHealRules.actions.actionType
     * ActionType - predefined action to be taken. Possible values include:
     * 'Recycle', 'LogEvent', 'CustomAction'
     * 
     * @param {object}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction] CustomAction
     * - custom action to be taken
     * 
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction.exe]
     * Executable to be run
     * 
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.customAction.parameters]
     * Parameters for the executable
     * 
     * @param {string}
     * [siteEnvelope.siteConfig.autoHealRules.actions.minProcessExecutionTime]
     * MinProcessExecutionTime - minimum time the process must execute
     * before taking the action
     * 
     * @param {string} [siteEnvelope.siteConfig.tracingOptions] Tracing options
     * 
     * @param {string} [siteEnvelope.siteConfig.vnetName] Vnet name
     * 
     * @param {object} [siteEnvelope.siteConfig.cors] Cross-Origin Resource
     * Sharing (CORS) settings.
     * 
     * @param {array} [siteEnvelope.siteConfig.cors.allowedOrigins] Gets or sets
     * the list of origins that should be allowed to make cross-origin
     * calls (for example: http://example.com:12345). Use "*" to allow
     * all.
     * 
     * @param {object} [siteEnvelope.siteConfig.apiDefinition] Information about
     * the formal API definition for the web app.
     * 
     * @param {string} [siteEnvelope.siteConfig.apiDefinition.url] The URL of the
     * API definition.
     * 
     * @param {string} [siteEnvelope.siteConfig.autoSwapSlotName] Auto swap slot
     * name
     * 
     * @param {boolean} [siteEnvelope.siteConfig.localMySqlEnabled] Local mysql
     * enabled
     * 
     * @param {array} [siteEnvelope.siteConfig.ipSecurityRestrictions] Ip Security
     * restrictions
     * 
     * @param {string} [siteEnvelope.siteConfig.id] Resource Id
     * 
     * @param {string} [siteEnvelope.siteConfig.name] Resource Name
     * 
     * @param {string} [siteEnvelope.siteConfig.kind] Kind of resource
     * 
     * @param {string} siteEnvelope.siteConfig.location Resource Location
     * 
     * @param {string} [siteEnvelope.siteConfig.type] Resource type
     * 
     * @param {object} [siteEnvelope.siteConfig.tags] Resource tags
     * 
     * @param {boolean} [siteEnvelope.scmSiteAlsoStopped] If set indicates whether
     * to stop SCM (KUDU) site when the web app is stopped. Default is false.
     * 
     * @param {object} [siteEnvelope.hostingEnvironmentProfile] Specification for
     * the hosting environment (App Service Environment) to use for the web app
     * 
     * @param {string} [siteEnvelope.hostingEnvironmentProfile.id] Resource id of
     * the hostingEnvironment (App Service Environment)
     * 
     * @param {string} [siteEnvelope.hostingEnvironmentProfile.name] Name of the
     * hostingEnvironment (App Service Environment) (read only)
     * 
     * @param {string} [siteEnvelope.hostingEnvironmentProfile.type] Resource type
     * of the hostingEnvironment (App Service Environment) (read only)
     * 
     * @param {string} [siteEnvelope.microService]
     * 
     * @param {string} [siteEnvelope.gatewaySiteName] Name of gateway app
     * associated with web app
     * 
     * @param {boolean} [siteEnvelope.clientAffinityEnabled] Specifies if the
     * client affinity is enabled when load balancing http request for multiple
     * instances of the web app
     * 
     * @param {boolean} [siteEnvelope.clientCertEnabled] Specifies if the client
     * certificate is enabled for the web app
     * 
     * @param {boolean} [siteEnvelope.hostNamesDisabled] Specifies if the public
     * hostnames are disabled the web app.
     * If set to true the app is only accessible via API Management
     * process
     * 
     * @param {number} [siteEnvelope.containerSize] Size of a function container
     * 
     * @param {number} [siteEnvelope.maxNumberOfWorkers] Maximum number of workers
     * This only applies to function container
     * 
     * @param {object} [siteEnvelope.cloningInfo] This is only valid for web app
     * creation. If specified, web app is cloned from
     * a source web app
     * 
     * @param {string} [siteEnvelope.cloningInfo.correlationId] Correlation Id of
     * cloning operation. This id ties multiple cloning operations
     * together to use the same snapshot
     * 
     * @param {boolean} [siteEnvelope.cloningInfo.overwrite] Overwrite destination
     * web app
     * 
     * @param {boolean} [siteEnvelope.cloningInfo.cloneCustomHostNames] If true,
     * clone custom hostnames from source web app
     * 
     * @param {boolean} [siteEnvelope.cloningInfo.cloneSourceControl] Clone source
     * control from source web app
     * 
     * @param {string} [siteEnvelope.cloningInfo.sourceWebAppId] ARM resource id
     * of the source web app. Web app resource id is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}
     * for production slots and
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName}
     * for other slots
     * 
     * @param {string} [siteEnvelope.cloningInfo.hostingEnvironment] Hosting
     * environment
     * 
     * @param {object} [siteEnvelope.cloningInfo.appSettingsOverrides] Application
     * settings overrides for cloned web app. If specified these settings will
     * override the settings cloned
     * from source web app. If not specified, application settings
     * from source web app are retained.
     * 
     * @param {boolean} [siteEnvelope.cloningInfo.configureLoadBalancing] If
     * specified configure load balancing for source and clone site
     * 
     * @param {string} [siteEnvelope.cloningInfo.trafficManagerProfileId] ARM
     * resource id of the traffic manager profile to use if it exists. Traffic
     * manager resource id is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}
     * 
     * @param {string} [siteEnvelope.cloningInfo.trafficManagerProfileName] Name
     * of traffic manager profile to create. This is only needed if traffic
     * manager profile does not already exist
     * 
     * @param {string} [siteEnvelope.id] Resource Id
     * 
     * @param {string} [siteEnvelope.name] Resource Name
     * 
     * @param {string} [siteEnvelope.kind] Kind of resource
     * 
     * @param {string} siteEnvelope.location Resource Location
     * 
     * @param {string} [siteEnvelope.type] Resource type
     * 
     * @param {object} [siteEnvelope.tags] Resource tags
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.skipDnsRegistration] If true web app hostname is
     * not registered with DNS on creation. This parameter is
     * only used for app creation
     * 
     * @param {string} [options.skipCustomDomainVerification] If true, custom (non
     * *.azurewebsites.net) domains associated with web app are not verified.
     * 
     * @param {string} [options.forceDnsRegistration] If true, web app hostname is
     * force registered with DNS
     * 
     * @param {string} [options.ttlInSeconds] Time to live in seconds for web
     * app's default domain name
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginCreateOrUpdateSiteSlot(resourceGroupName: string, name: string, siteEnvelope: models.Site, slot: string, options: { skipDnsRegistration? : string, skipCustomDomainVerification? : string, forceDnsRegistration? : string, ttlInSeconds? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Site>): void;
    beginCreateOrUpdateSiteSlot(resourceGroupName: string, name: string, siteEnvelope: models.Site, slot: string, callback: ServiceCallback<models.Site>): void;

    /**
     * @summary Deletes a web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.deleteMetrics] If true, web app metrics are also
     * deleted
     * 
     * @param {string} [options.deleteEmptyServerFarm] If true and App Service
     * Plan is empty after web app deletion, App Service Plan is also deleted
     * 
     * @param {string} [options.skipDnsRegistration] If true, DNS registration is
     * skipped
     * 
     * @param {string} [options.deleteAllSlots] If true, all slots associated with
     * web app are also deleted
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteSiteSlot(resourceGroupName: string, name: string, slot: string, options: { deleteMetrics? : string, deleteEmptyServerFarm? : string, skipDnsRegistration? : string, deleteAllSlots? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteSiteSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Creates a new web app or modifies an existing web app.
     *
     * @param {string} resourceGroupName Name of the resource group
     * 
     * @param {string} name Name of the web app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    isSiteCloneable(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteCloneability>): void;
    isSiteCloneable(resourceGroupName: string, name: string, callback: ServiceCallback<models.SiteCloneability>): void;

    /**
     * @summary Creates a new web app or modifies an existing web app.
     *
     * @param {string} resourceGroupName Name of the resource group
     * 
     * @param {string} name Name of the web app
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    isSiteCloneableSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteCloneability>): void;
    isSiteCloneableSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.SiteCloneability>): void;

    /**
     * @summary Recovers a deleted web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} recoveryEntity Snapshot data used for web app recovery.
     * Snapshot information can be obtained by calling GetDeletedSites or
     * GetSiteSnapshots API.
     * 
     * @param {date} [recoveryEntity.snapshotTime] Point in time in which the site
     * recover should be attempted.
     * 
     * @param {boolean} [recoveryEntity.recoverConfig] If true, then the website's
     * configuration will be reverted to its state at SnapshotTime
     * 
     * @param {string} [recoveryEntity.siteName] [Optional] Destination web app
     * name into which web app should be recovered. This is case when new web app
     * should be created instead.
     * 
     * @param {string} [recoveryEntity.slotName] [Optional] Destination web app
     * slot name into which web app should be recovered
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    recoverSite(resourceGroupName: string, name: string, recoveryEntity: models.CsmSiteRecoveryEntity, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Site>): void;
    recoverSite(resourceGroupName: string, name: string, recoveryEntity: models.CsmSiteRecoveryEntity, callback: ServiceCallback<models.Site>): void;

    /**
     * @summary Recovers a deleted web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} recoveryEntity Snapshot data used for web app recovery.
     * Snapshot information can be obtained by calling GetDeletedSites or
     * GetSiteSnapshots API.
     * 
     * @param {date} [recoveryEntity.snapshotTime] Point in time in which the site
     * recover should be attempted.
     * 
     * @param {boolean} [recoveryEntity.recoverConfig] If true, then the website's
     * configuration will be reverted to its state at SnapshotTime
     * 
     * @param {string} [recoveryEntity.siteName] [Optional] Destination web app
     * name into which web app should be recovered. This is case when new web app
     * should be created instead.
     * 
     * @param {string} [recoveryEntity.slotName] [Optional] Destination web app
     * slot name into which web app should be recovered
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginRecoverSite(resourceGroupName: string, name: string, recoveryEntity: models.CsmSiteRecoveryEntity, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Site>): void;
    beginRecoverSite(resourceGroupName: string, name: string, recoveryEntity: models.CsmSiteRecoveryEntity, callback: ServiceCallback<models.Site>): void;

    /**
     * @summary Recovers a deleted web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} recoveryEntity Snapshot data used for web app recovery.
     * Snapshot information can be obtained by calling GetDeletedSites or
     * GetSiteSnapshots API.
     * 
     * @param {date} [recoveryEntity.snapshotTime] Point in time in which the site
     * recover should be attempted.
     * 
     * @param {boolean} [recoveryEntity.recoverConfig] If true, then the website's
     * configuration will be reverted to its state at SnapshotTime
     * 
     * @param {string} [recoveryEntity.siteName] [Optional] Destination web app
     * name into which web app should be recovered. This is case when new web app
     * should be created instead.
     * 
     * @param {string} [recoveryEntity.slotName] [Optional] Destination web app
     * slot name into which web app should be recovered
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    recoverSiteSlot(resourceGroupName: string, name: string, recoveryEntity: models.CsmSiteRecoveryEntity, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Site>): void;
    recoverSiteSlot(resourceGroupName: string, name: string, recoveryEntity: models.CsmSiteRecoveryEntity, slot: string, callback: ServiceCallback<models.Site>): void;

    /**
     * @summary Recovers a deleted web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} recoveryEntity Snapshot data used for web app recovery.
     * Snapshot information can be obtained by calling GetDeletedSites or
     * GetSiteSnapshots API.
     * 
     * @param {date} [recoveryEntity.snapshotTime] Point in time in which the site
     * recover should be attempted.
     * 
     * @param {boolean} [recoveryEntity.recoverConfig] If true, then the website's
     * configuration will be reverted to its state at SnapshotTime
     * 
     * @param {string} [recoveryEntity.siteName] [Optional] Destination web app
     * name into which web app should be recovered. This is case when new web app
     * should be created instead.
     * 
     * @param {string} [recoveryEntity.slotName] [Optional] Destination web app
     * slot name into which web app should be recovered
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginRecoverSiteSlot(resourceGroupName: string, name: string, recoveryEntity: models.CsmSiteRecoveryEntity, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Site>): void;
    beginRecoverSiteSlot(resourceGroupName: string, name: string, recoveryEntity: models.CsmSiteRecoveryEntity, slot: string, callback: ServiceCallback<models.Site>): void;

    /**
     * @summary Returns all Snapshots to the user.
     *
     * @param {string} resourceGroupName Webspace
     * 
     * @param {string} name Website Name
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteSnapshots(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getSiteSnapshots(resourceGroupName: string, name: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Returns all Snapshots to the user.
     *
     * @param {string} resourceGroupName Webspace
     * 
     * @param {string} name Website Name
     * 
     * @param {string} slot Website Slot
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteSnapshotsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getSiteSnapshotsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Gets deleted web apps in subscription
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.propertiesToInclude] Additional web app properties
     * included in the response
     * 
     * @param {string} [options.includeSiteTypes] Types of apps included in the
     * response
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getDeletedSites(resourceGroupName: string, options: { propertiesToInclude? : string, includeSiteTypes? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeletedSiteCollection>): void;
    getDeletedSites(resourceGroupName: string, callback: ServiceCallback<models.DeletedSiteCollection>): void;

    /**
     * @summary List deployments
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getDeployments(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentCollection>): void;
    getDeployments(resourceGroupName: string, name: string, callback: ServiceCallback<models.DeploymentCollection>): void;

    /**
     * @summary List deployments
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getDeploymentsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentCollection>): void;
    getDeploymentsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.DeploymentCollection>): void;

    /**
     * @summary List deployments
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} instanceId Id of web app instance
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getInstanceDeployments(resourceGroupName: string, name: string, instanceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentCollection>): void;
    getInstanceDeployments(resourceGroupName: string, name: string, instanceId: string, callback: ServiceCallback<models.DeploymentCollection>): void;

    /**
     * @summary List deployments
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {string} instanceId Id of web app instance
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getInstanceDeploymentsSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentCollection>): void;
    getInstanceDeploymentsSlot(resourceGroupName: string, name: string, slot: string, instanceId: string, callback: ServiceCallback<models.DeploymentCollection>): void;

    /**
     * @summary Get the deployment
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} id Id of the deployment
     * 
     * @param {string} instanceId Id of web app instance
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getInstanceDeployment(resourceGroupName: string, name: string, id: string, instanceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Deployment>): void;
    getInstanceDeployment(resourceGroupName: string, name: string, id: string, instanceId: string, callback: ServiceCallback<models.Deployment>): void;

    /**
     * @summary Create a deployment
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} id Id of the deployment
     * 
     * @param {string} instanceId Id of web app instance
     * 
     * @param {object} deployment Details of deployment
     * 
     * @param {string} [deployment.deploymentId] Id
     * 
     * @param {number} [deployment.status] Status
     * 
     * @param {string} [deployment.message] Message
     * 
     * @param {string} [deployment.author] Author
     * 
     * @param {string} [deployment.deployer] Deployer
     * 
     * @param {string} [deployment.authorEmail] AuthorEmail
     * 
     * @param {date} [deployment.startTime] StartTime
     * 
     * @param {date} [deployment.endTime] EndTime
     * 
     * @param {boolean} [deployment.active] Active
     * 
     * @param {string} [deployment.details] Detail
     * 
     * @param {string} [deployment.id] Resource Id
     * 
     * @param {string} [deployment.name] Resource Name
     * 
     * @param {string} [deployment.kind] Kind of resource
     * 
     * @param {string} deployment.location Resource Location
     * 
     * @param {string} [deployment.type] Resource type
     * 
     * @param {object} [deployment.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createInstanceDeployment(resourceGroupName: string, name: string, id: string, instanceId: string, deployment: models.Deployment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Deployment>): void;
    createInstanceDeployment(resourceGroupName: string, name: string, id: string, instanceId: string, deployment: models.Deployment, callback: ServiceCallback<models.Deployment>): void;

    /**
     * @summary Delete the deployment
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} id Id of the deployment
     * 
     * @param {string} instanceId Id of web app instance
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteInstanceDeployment(resourceGroupName: string, name: string, id: string, instanceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteInstanceDeployment(resourceGroupName: string, name: string, id: string, instanceId: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Get the deployment
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} id Id of the deployment
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getDeployment(resourceGroupName: string, name: string, id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Deployment>): void;
    getDeployment(resourceGroupName: string, name: string, id: string, callback: ServiceCallback<models.Deployment>): void;

    /**
     * @summary Create a deployment
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} id Id of the deployment
     * 
     * @param {object} deployment Details of deployment
     * 
     * @param {string} [deployment.deploymentId] Id
     * 
     * @param {number} [deployment.status] Status
     * 
     * @param {string} [deployment.message] Message
     * 
     * @param {string} [deployment.author] Author
     * 
     * @param {string} [deployment.deployer] Deployer
     * 
     * @param {string} [deployment.authorEmail] AuthorEmail
     * 
     * @param {date} [deployment.startTime] StartTime
     * 
     * @param {date} [deployment.endTime] EndTime
     * 
     * @param {boolean} [deployment.active] Active
     * 
     * @param {string} [deployment.details] Detail
     * 
     * @param {string} [deployment.id] Resource Id
     * 
     * @param {string} [deployment.name] Resource Name
     * 
     * @param {string} [deployment.kind] Kind of resource
     * 
     * @param {string} deployment.location Resource Location
     * 
     * @param {string} [deployment.type] Resource type
     * 
     * @param {object} [deployment.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createDeployment(resourceGroupName: string, name: string, id: string, deployment: models.Deployment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Deployment>): void;
    createDeployment(resourceGroupName: string, name: string, id: string, deployment: models.Deployment, callback: ServiceCallback<models.Deployment>): void;

    /**
     * @summary Delete the deployment
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} id Id of the deployment
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteDeployment(resourceGroupName: string, name: string, id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteDeployment(resourceGroupName: string, name: string, id: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Get the deployment
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} id Id of the deployment
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Deployment>): void;
    getDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, callback: ServiceCallback<models.Deployment>): void;

    /**
     * @summary Create a deployment
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} id Id of the deployment
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} deployment Details of deployment
     * 
     * @param {string} [deployment.deploymentId] Id
     * 
     * @param {number} [deployment.status] Status
     * 
     * @param {string} [deployment.message] Message
     * 
     * @param {string} [deployment.author] Author
     * 
     * @param {string} [deployment.deployer] Deployer
     * 
     * @param {string} [deployment.authorEmail] AuthorEmail
     * 
     * @param {date} [deployment.startTime] StartTime
     * 
     * @param {date} [deployment.endTime] EndTime
     * 
     * @param {boolean} [deployment.active] Active
     * 
     * @param {string} [deployment.details] Detail
     * 
     * @param {string} [deployment.id] Resource Id
     * 
     * @param {string} [deployment.name] Resource Name
     * 
     * @param {string} [deployment.kind] Kind of resource
     * 
     * @param {string} deployment.location Resource Location
     * 
     * @param {string} [deployment.type] Resource type
     * 
     * @param {object} [deployment.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, deployment: models.Deployment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Deployment>): void;
    createDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, deployment: models.Deployment, callback: ServiceCallback<models.Deployment>): void;

    /**
     * @summary Delete the deployment
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} id Id of the deployment
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Get the deployment
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} id Id of the deployment
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {string} instanceId Id of web app instance
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getInstanceDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, instanceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Deployment>): void;
    getInstanceDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, instanceId: string, callback: ServiceCallback<models.Deployment>): void;

    /**
     * @summary Create a deployment
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} id Id of the deployment
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {string} instanceId Id of web app instance
     * 
     * @param {object} deployment Details of deployment
     * 
     * @param {string} [deployment.deploymentId] Id
     * 
     * @param {number} [deployment.status] Status
     * 
     * @param {string} [deployment.message] Message
     * 
     * @param {string} [deployment.author] Author
     * 
     * @param {string} [deployment.deployer] Deployer
     * 
     * @param {string} [deployment.authorEmail] AuthorEmail
     * 
     * @param {date} [deployment.startTime] StartTime
     * 
     * @param {date} [deployment.endTime] EndTime
     * 
     * @param {boolean} [deployment.active] Active
     * 
     * @param {string} [deployment.details] Detail
     * 
     * @param {string} [deployment.id] Resource Id
     * 
     * @param {string} [deployment.name] Resource Name
     * 
     * @param {string} [deployment.kind] Kind of resource
     * 
     * @param {string} deployment.location Resource Location
     * 
     * @param {string} [deployment.type] Resource type
     * 
     * @param {object} [deployment.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createInstanceDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, instanceId: string, deployment: models.Deployment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Deployment>): void;
    createInstanceDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, instanceId: string, deployment: models.Deployment, callback: ServiceCallback<models.Deployment>): void;

    /**
     * @summary Delete the deployment
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} id Id of the deployment
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {string} instanceId Id of web app instance
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteInstanceDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, instanceId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteInstanceDeploymentSlot(resourceGroupName: string, name: string, id: string, slot: string, instanceId: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Gets all instance of a web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteInstanceIdentifiers(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteInstanceCollection>): void;
    getSiteInstanceIdentifiers(resourceGroupName: string, name: string, callback: ServiceCallback<models.SiteInstanceCollection>): void;

    /**
     * @summary Gets all instance of a web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteInstanceIdentifiersSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteInstanceCollection>): void;
    getSiteInstanceIdentifiersSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.SiteInstanceCollection>): void;

    /**
     * @summary Get web app hostname bindings
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteHostNameBindings(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HostNameBindingCollection>): void;
    getSiteHostNameBindings(resourceGroupName: string, name: string, callback: ServiceCallback<models.HostNameBindingCollection>): void;

    /**
     * @summary Get web app hostname bindings
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteHostNameBindingsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HostNameBindingCollection>): void;
    getSiteHostNameBindingsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.HostNameBindingCollection>): void;

    /**
     * @summary Get web app binding for a hostname
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} hostName Name of host
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteHostNameBinding(resourceGroupName: string, name: string, hostName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HostNameBinding>): void;
    getSiteHostNameBinding(resourceGroupName: string, name: string, hostName: string, callback: ServiceCallback<models.HostNameBinding>): void;

    /**
     * @summary Creates a web app hostname binding
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} hostName Name of host
     * 
     * @param {object} hostNameBinding Host name binding information
     * 
     * @param {string} [hostNameBinding.hostNameBindingName] Hostname
     * 
     * @param {string} [hostNameBinding.siteName] Web app name
     * 
     * @param {string} [hostNameBinding.domainId] Fully qualified ARM domain
     * resource URI
     * 
     * @param {string} [hostNameBinding.azureResourceName] Azure resource name
     * 
     * @param {string} [hostNameBinding.azureResourceType] Azure resource type.
     * Possible values include: 'Website', 'TrafficManager'
     * 
     * @param {string} [hostNameBinding.customHostNameDnsRecordType] Custom DNS
     * record type. Possible values include: 'CName', 'A'
     * 
     * @param {string} [hostNameBinding.hostNameType] Host name type. Possible
     * values include: 'Verified', 'Managed'
     * 
     * @param {string} [hostNameBinding.id] Resource Id
     * 
     * @param {string} [hostNameBinding.name] Resource Name
     * 
     * @param {string} [hostNameBinding.kind] Kind of resource
     * 
     * @param {string} hostNameBinding.location Resource Location
     * 
     * @param {string} [hostNameBinding.type] Resource type
     * 
     * @param {object} [hostNameBinding.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateSiteHostNameBinding(resourceGroupName: string, name: string, hostName: string, hostNameBinding: models.HostNameBinding, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HostNameBinding>): void;
    createOrUpdateSiteHostNameBinding(resourceGroupName: string, name: string, hostName: string, hostNameBinding: models.HostNameBinding, callback: ServiceCallback<models.HostNameBinding>): void;

    /**
     * @summary Deletes a host name binding
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} hostName Name of host
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteSiteHostNameBinding(resourceGroupName: string, name: string, hostName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteSiteHostNameBinding(resourceGroupName: string, name: string, hostName: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Get web app binding for a hostname
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {string} hostName Name of host
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteHostNameBindingSlot(resourceGroupName: string, name: string, slot: string, hostName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HostNameBinding>): void;
    getSiteHostNameBindingSlot(resourceGroupName: string, name: string, slot: string, hostName: string, callback: ServiceCallback<models.HostNameBinding>): void;

    /**
     * @summary Creates a web app hostname binding
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} hostName Name of host
     * 
     * @param {object} hostNameBinding Host name binding information
     * 
     * @param {string} [hostNameBinding.hostNameBindingName] Hostname
     * 
     * @param {string} [hostNameBinding.siteName] Web app name
     * 
     * @param {string} [hostNameBinding.domainId] Fully qualified ARM domain
     * resource URI
     * 
     * @param {string} [hostNameBinding.azureResourceName] Azure resource name
     * 
     * @param {string} [hostNameBinding.azureResourceType] Azure resource type.
     * Possible values include: 'Website', 'TrafficManager'
     * 
     * @param {string} [hostNameBinding.customHostNameDnsRecordType] Custom DNS
     * record type. Possible values include: 'CName', 'A'
     * 
     * @param {string} [hostNameBinding.hostNameType] Host name type. Possible
     * values include: 'Verified', 'Managed'
     * 
     * @param {string} [hostNameBinding.id] Resource Id
     * 
     * @param {string} [hostNameBinding.name] Resource Name
     * 
     * @param {string} [hostNameBinding.kind] Kind of resource
     * 
     * @param {string} hostNameBinding.location Resource Location
     * 
     * @param {string} [hostNameBinding.type] Resource type
     * 
     * @param {object} [hostNameBinding.tags] Resource tags
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateSiteHostNameBindingSlot(resourceGroupName: string, name: string, hostName: string, hostNameBinding: models.HostNameBinding, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HostNameBinding>): void;
    createOrUpdateSiteHostNameBindingSlot(resourceGroupName: string, name: string, hostName: string, hostNameBinding: models.HostNameBinding, slot: string, callback: ServiceCallback<models.HostNameBinding>): void;

    /**
     * @summary Deletes a host name binding
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {string} hostName Name of host
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteSiteHostNameBindingSlot(resourceGroupName: string, name: string, slot: string, hostName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteSiteHostNameBindingSlot(resourceGroupName: string, name: string, slot: string, hostName: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Gets the configuration of the web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteConfig(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteConfig>): void;
    getSiteConfig(resourceGroupName: string, name: string, callback: ServiceCallback<models.SiteConfig>): void;

    /**
     * @summary Update the configuration of web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} siteConfig Request body that contains the configuraiton
     * setting for the web app
     * 
     * @param {number} [siteConfig.numberOfWorkers] Number of workers
     * 
     * @param {array} [siteConfig.defaultDocuments] Default documents
     * 
     * @param {string} [siteConfig.netFrameworkVersion] Net Framework Version
     * 
     * @param {string} [siteConfig.phpVersion] Version of PHP
     * 
     * @param {string} [siteConfig.pythonVersion] Version of Python
     * 
     * @param {string} [siteConfig.nodeVersion] Version of Node
     * 
     * @param {boolean} [siteConfig.requestTracingEnabled] Enable request tracing
     * 
     * @param {date} [siteConfig.requestTracingExpirationTime] Request tracing
     * expiration time
     * 
     * @param {boolean} [siteConfig.remoteDebuggingEnabled] Remote Debugging
     * Enabled
     * 
     * @param {string} [siteConfig.remoteDebuggingVersion] Remote Debugging Version
     * 
     * @param {boolean} [siteConfig.httpLoggingEnabled] HTTP logging Enabled
     * 
     * @param {number} [siteConfig.logsDirectorySizeLimit] HTTP Logs Directory
     * size limit
     * 
     * @param {boolean} [siteConfig.detailedErrorLoggingEnabled] Detailed error
     * logging enabled
     * 
     * @param {string} [siteConfig.publishingUsername] Publishing user name
     * 
     * @param {string} [siteConfig.publishingPassword] Publishing password
     * 
     * @param {array} [siteConfig.appSettings] Application Settings
     * 
     * @param {array} [siteConfig.metadata] Site Metadata
     * 
     * @param {array} [siteConfig.connectionStrings] Connection strings
     * 
     * @param {array} [siteConfig.handlerMappings] Handler mappings
     * 
     * @param {string} [siteConfig.documentRoot] Document root
     * 
     * @param {string} [siteConfig.scmType] SCM type
     * 
     * @param {boolean} [siteConfig.use32BitWorkerProcess] Use 32 bit worker
     * process
     * 
     * @param {boolean} [siteConfig.webSocketsEnabled] Web socket enabled.
     * 
     * @param {boolean} [siteConfig.alwaysOn] Always On
     * 
     * @param {string} [siteConfig.javaVersion] Java version
     * 
     * @param {string} [siteConfig.javaContainer] Java container
     * 
     * @param {string} [siteConfig.javaContainerVersion] Java container version
     * 
     * @param {string} [siteConfig.appCommandLine] App Command Line to launch
     * 
     * @param {string} [siteConfig.managedPipelineMode] Managed pipeline mode.
     * Possible values include: 'Integrated', 'Classic'
     * 
     * @param {array} [siteConfig.virtualApplications] Virtual applications
     * 
     * @param {string} [siteConfig.loadBalancing] Site load balancing. Possible
     * values include: 'WeightedRoundRobin', 'LeastRequests',
     * 'LeastResponseTime', 'WeightedTotalTraffic', 'RequestHash'
     * 
     * @param {object} [siteConfig.experiments] This is work around for polymophic
     * types
     * 
     * @param {array} [siteConfig.experiments.rampUpRules] List of
     * {Microsoft.Web.Hosting.Administration.RampUpRule} objects.
     * 
     * @param {object} [siteConfig.limits] Site limits
     * 
     * @param {number} [siteConfig.limits.maxPercentageCpu] Maximum allowed CPU
     * usage percentage
     * 
     * @param {number} [siteConfig.limits.maxMemoryInMb] Maximum allowed memory
     * usage in MB
     * 
     * @param {number} [siteConfig.limits.maxDiskSizeInMb] Maximum allowed disk
     * size usage in MB
     * 
     * @param {boolean} [siteConfig.autoHealEnabled] Auto heal enabled
     * 
     * @param {object} [siteConfig.autoHealRules] Auto heal rules
     * 
     * @param {object} [siteConfig.autoHealRules.triggers] Triggers - Conditions
     * that describe when to execute the auto-heal actions
     * 
     * @param {object} [siteConfig.autoHealRules.triggers.requests] Requests -
     * Defines a rule based on total requests
     * 
     * @param {number} [siteConfig.autoHealRules.triggers.requests.count] Count
     * 
     * @param {string} [siteConfig.autoHealRules.triggers.requests.timeInterval]
     * TimeInterval
     * 
     * @param {number} [siteConfig.autoHealRules.triggers.privateBytesInKB]
     * PrivateBytesInKB - Defines a rule based on private bytes
     * 
     * @param {array} [siteConfig.autoHealRules.triggers.statusCodes] StatusCodes
     * - Defines a rule based on status codes
     * 
     * @param {object} [siteConfig.autoHealRules.triggers.slowRequests]
     * SlowRequests - Defines a rule based on request execution time
     * 
     * @param {string} [siteConfig.autoHealRules.triggers.slowRequests.timeTaken]
     * TimeTaken
     * 
     * @param {number} [siteConfig.autoHealRules.triggers.slowRequests.count] Count
     * 
     * @param {string}
     * [siteConfig.autoHealRules.triggers.slowRequests.timeInterval] TimeInterval
     * 
     * @param {object} [siteConfig.autoHealRules.actions] Actions - Actions to be
     * executed when a rule is triggered
     * 
     * @param {string} siteConfig.autoHealRules.actions.actionType ActionType -
     * predefined action to be taken. Possible values include: 'Recycle',
     * 'LogEvent', 'CustomAction'
     * 
     * @param {object} [siteConfig.autoHealRules.actions.customAction]
     * CustomAction - custom action to be taken
     * 
     * @param {string} [siteConfig.autoHealRules.actions.customAction.exe]
     * Executable to be run
     * 
     * @param {string} [siteConfig.autoHealRules.actions.customAction.parameters]
     * Parameters for the executable
     * 
     * @param {string} [siteConfig.autoHealRules.actions.minProcessExecutionTime]
     * MinProcessExecutionTime - minimum time the process must execute
     * before taking the action
     * 
     * @param {string} [siteConfig.tracingOptions] Tracing options
     * 
     * @param {string} [siteConfig.vnetName] Vnet name
     * 
     * @param {object} [siteConfig.cors] Cross-Origin Resource Sharing (CORS)
     * settings.
     * 
     * @param {array} [siteConfig.cors.allowedOrigins] Gets or sets the list of
     * origins that should be allowed to make cross-origin
     * calls (for example: http://example.com:12345). Use "*" to allow
     * all.
     * 
     * @param {object} [siteConfig.apiDefinition] Information about the formal API
     * definition for the web app.
     * 
     * @param {string} [siteConfig.apiDefinition.url] The URL of the API
     * definition.
     * 
     * @param {string} [siteConfig.autoSwapSlotName] Auto swap slot name
     * 
     * @param {boolean} [siteConfig.localMySqlEnabled] Local mysql enabled
     * 
     * @param {array} [siteConfig.ipSecurityRestrictions] Ip Security restrictions
     * 
     * @param {string} [siteConfig.id] Resource Id
     * 
     * @param {string} [siteConfig.name] Resource Name
     * 
     * @param {string} [siteConfig.kind] Kind of resource
     * 
     * @param {string} siteConfig.location Resource Location
     * 
     * @param {string} [siteConfig.type] Resource type
     * 
     * @param {object} [siteConfig.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateSiteConfig(resourceGroupName: string, name: string, siteConfig: models.SiteConfig, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteConfig>): void;
    createOrUpdateSiteConfig(resourceGroupName: string, name: string, siteConfig: models.SiteConfig, callback: ServiceCallback<models.SiteConfig>): void;

    /**
     * @summary Update the configuration of web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} siteConfig Request body that contains the configuraiton
     * setting for the web app
     * 
     * @param {number} [siteConfig.numberOfWorkers] Number of workers
     * 
     * @param {array} [siteConfig.defaultDocuments] Default documents
     * 
     * @param {string} [siteConfig.netFrameworkVersion] Net Framework Version
     * 
     * @param {string} [siteConfig.phpVersion] Version of PHP
     * 
     * @param {string} [siteConfig.pythonVersion] Version of Python
     * 
     * @param {string} [siteConfig.nodeVersion] Version of Node
     * 
     * @param {boolean} [siteConfig.requestTracingEnabled] Enable request tracing
     * 
     * @param {date} [siteConfig.requestTracingExpirationTime] Request tracing
     * expiration time
     * 
     * @param {boolean} [siteConfig.remoteDebuggingEnabled] Remote Debugging
     * Enabled
     * 
     * @param {string} [siteConfig.remoteDebuggingVersion] Remote Debugging Version
     * 
     * @param {boolean} [siteConfig.httpLoggingEnabled] HTTP logging Enabled
     * 
     * @param {number} [siteConfig.logsDirectorySizeLimit] HTTP Logs Directory
     * size limit
     * 
     * @param {boolean} [siteConfig.detailedErrorLoggingEnabled] Detailed error
     * logging enabled
     * 
     * @param {string} [siteConfig.publishingUsername] Publishing user name
     * 
     * @param {string} [siteConfig.publishingPassword] Publishing password
     * 
     * @param {array} [siteConfig.appSettings] Application Settings
     * 
     * @param {array} [siteConfig.metadata] Site Metadata
     * 
     * @param {array} [siteConfig.connectionStrings] Connection strings
     * 
     * @param {array} [siteConfig.handlerMappings] Handler mappings
     * 
     * @param {string} [siteConfig.documentRoot] Document root
     * 
     * @param {string} [siteConfig.scmType] SCM type
     * 
     * @param {boolean} [siteConfig.use32BitWorkerProcess] Use 32 bit worker
     * process
     * 
     * @param {boolean} [siteConfig.webSocketsEnabled] Web socket enabled.
     * 
     * @param {boolean} [siteConfig.alwaysOn] Always On
     * 
     * @param {string} [siteConfig.javaVersion] Java version
     * 
     * @param {string} [siteConfig.javaContainer] Java container
     * 
     * @param {string} [siteConfig.javaContainerVersion] Java container version
     * 
     * @param {string} [siteConfig.appCommandLine] App Command Line to launch
     * 
     * @param {string} [siteConfig.managedPipelineMode] Managed pipeline mode.
     * Possible values include: 'Integrated', 'Classic'
     * 
     * @param {array} [siteConfig.virtualApplications] Virtual applications
     * 
     * @param {string} [siteConfig.loadBalancing] Site load balancing. Possible
     * values include: 'WeightedRoundRobin', 'LeastRequests',
     * 'LeastResponseTime', 'WeightedTotalTraffic', 'RequestHash'
     * 
     * @param {object} [siteConfig.experiments] This is work around for polymophic
     * types
     * 
     * @param {array} [siteConfig.experiments.rampUpRules] List of
     * {Microsoft.Web.Hosting.Administration.RampUpRule} objects.
     * 
     * @param {object} [siteConfig.limits] Site limits
     * 
     * @param {number} [siteConfig.limits.maxPercentageCpu] Maximum allowed CPU
     * usage percentage
     * 
     * @param {number} [siteConfig.limits.maxMemoryInMb] Maximum allowed memory
     * usage in MB
     * 
     * @param {number} [siteConfig.limits.maxDiskSizeInMb] Maximum allowed disk
     * size usage in MB
     * 
     * @param {boolean} [siteConfig.autoHealEnabled] Auto heal enabled
     * 
     * @param {object} [siteConfig.autoHealRules] Auto heal rules
     * 
     * @param {object} [siteConfig.autoHealRules.triggers] Triggers - Conditions
     * that describe when to execute the auto-heal actions
     * 
     * @param {object} [siteConfig.autoHealRules.triggers.requests] Requests -
     * Defines a rule based on total requests
     * 
     * @param {number} [siteConfig.autoHealRules.triggers.requests.count] Count
     * 
     * @param {string} [siteConfig.autoHealRules.triggers.requests.timeInterval]
     * TimeInterval
     * 
     * @param {number} [siteConfig.autoHealRules.triggers.privateBytesInKB]
     * PrivateBytesInKB - Defines a rule based on private bytes
     * 
     * @param {array} [siteConfig.autoHealRules.triggers.statusCodes] StatusCodes
     * - Defines a rule based on status codes
     * 
     * @param {object} [siteConfig.autoHealRules.triggers.slowRequests]
     * SlowRequests - Defines a rule based on request execution time
     * 
     * @param {string} [siteConfig.autoHealRules.triggers.slowRequests.timeTaken]
     * TimeTaken
     * 
     * @param {number} [siteConfig.autoHealRules.triggers.slowRequests.count] Count
     * 
     * @param {string}
     * [siteConfig.autoHealRules.triggers.slowRequests.timeInterval] TimeInterval
     * 
     * @param {object} [siteConfig.autoHealRules.actions] Actions - Actions to be
     * executed when a rule is triggered
     * 
     * @param {string} siteConfig.autoHealRules.actions.actionType ActionType -
     * predefined action to be taken. Possible values include: 'Recycle',
     * 'LogEvent', 'CustomAction'
     * 
     * @param {object} [siteConfig.autoHealRules.actions.customAction]
     * CustomAction - custom action to be taken
     * 
     * @param {string} [siteConfig.autoHealRules.actions.customAction.exe]
     * Executable to be run
     * 
     * @param {string} [siteConfig.autoHealRules.actions.customAction.parameters]
     * Parameters for the executable
     * 
     * @param {string} [siteConfig.autoHealRules.actions.minProcessExecutionTime]
     * MinProcessExecutionTime - minimum time the process must execute
     * before taking the action
     * 
     * @param {string} [siteConfig.tracingOptions] Tracing options
     * 
     * @param {string} [siteConfig.vnetName] Vnet name
     * 
     * @param {object} [siteConfig.cors] Cross-Origin Resource Sharing (CORS)
     * settings.
     * 
     * @param {array} [siteConfig.cors.allowedOrigins] Gets or sets the list of
     * origins that should be allowed to make cross-origin
     * calls (for example: http://example.com:12345). Use "*" to allow
     * all.
     * 
     * @param {object} [siteConfig.apiDefinition] Information about the formal API
     * definition for the web app.
     * 
     * @param {string} [siteConfig.apiDefinition.url] The URL of the API
     * definition.
     * 
     * @param {string} [siteConfig.autoSwapSlotName] Auto swap slot name
     * 
     * @param {boolean} [siteConfig.localMySqlEnabled] Local mysql enabled
     * 
     * @param {array} [siteConfig.ipSecurityRestrictions] Ip Security restrictions
     * 
     * @param {string} [siteConfig.id] Resource Id
     * 
     * @param {string} [siteConfig.name] Resource Name
     * 
     * @param {string} [siteConfig.kind] Kind of resource
     * 
     * @param {string} siteConfig.location Resource Location
     * 
     * @param {string} [siteConfig.type] Resource type
     * 
     * @param {object} [siteConfig.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateSiteConfig(resourceGroupName: string, name: string, siteConfig: models.SiteConfig, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteConfig>): void;
    updateSiteConfig(resourceGroupName: string, name: string, siteConfig: models.SiteConfig, callback: ServiceCallback<models.SiteConfig>): void;

    /**
     * @summary Gets the configuration of the web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteConfigSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteConfig>): void;
    getSiteConfigSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.SiteConfig>): void;

    /**
     * @summary Update the configuration of web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} siteConfig Request body that contains the configuraiton
     * setting for the web app
     * 
     * @param {number} [siteConfig.numberOfWorkers] Number of workers
     * 
     * @param {array} [siteConfig.defaultDocuments] Default documents
     * 
     * @param {string} [siteConfig.netFrameworkVersion] Net Framework Version
     * 
     * @param {string} [siteConfig.phpVersion] Version of PHP
     * 
     * @param {string} [siteConfig.pythonVersion] Version of Python
     * 
     * @param {string} [siteConfig.nodeVersion] Version of Node
     * 
     * @param {boolean} [siteConfig.requestTracingEnabled] Enable request tracing
     * 
     * @param {date} [siteConfig.requestTracingExpirationTime] Request tracing
     * expiration time
     * 
     * @param {boolean} [siteConfig.remoteDebuggingEnabled] Remote Debugging
     * Enabled
     * 
     * @param {string} [siteConfig.remoteDebuggingVersion] Remote Debugging Version
     * 
     * @param {boolean} [siteConfig.httpLoggingEnabled] HTTP logging Enabled
     * 
     * @param {number} [siteConfig.logsDirectorySizeLimit] HTTP Logs Directory
     * size limit
     * 
     * @param {boolean} [siteConfig.detailedErrorLoggingEnabled] Detailed error
     * logging enabled
     * 
     * @param {string} [siteConfig.publishingUsername] Publishing user name
     * 
     * @param {string} [siteConfig.publishingPassword] Publishing password
     * 
     * @param {array} [siteConfig.appSettings] Application Settings
     * 
     * @param {array} [siteConfig.metadata] Site Metadata
     * 
     * @param {array} [siteConfig.connectionStrings] Connection strings
     * 
     * @param {array} [siteConfig.handlerMappings] Handler mappings
     * 
     * @param {string} [siteConfig.documentRoot] Document root
     * 
     * @param {string} [siteConfig.scmType] SCM type
     * 
     * @param {boolean} [siteConfig.use32BitWorkerProcess] Use 32 bit worker
     * process
     * 
     * @param {boolean} [siteConfig.webSocketsEnabled] Web socket enabled.
     * 
     * @param {boolean} [siteConfig.alwaysOn] Always On
     * 
     * @param {string} [siteConfig.javaVersion] Java version
     * 
     * @param {string} [siteConfig.javaContainer] Java container
     * 
     * @param {string} [siteConfig.javaContainerVersion] Java container version
     * 
     * @param {string} [siteConfig.appCommandLine] App Command Line to launch
     * 
     * @param {string} [siteConfig.managedPipelineMode] Managed pipeline mode.
     * Possible values include: 'Integrated', 'Classic'
     * 
     * @param {array} [siteConfig.virtualApplications] Virtual applications
     * 
     * @param {string} [siteConfig.loadBalancing] Site load balancing. Possible
     * values include: 'WeightedRoundRobin', 'LeastRequests',
     * 'LeastResponseTime', 'WeightedTotalTraffic', 'RequestHash'
     * 
     * @param {object} [siteConfig.experiments] This is work around for polymophic
     * types
     * 
     * @param {array} [siteConfig.experiments.rampUpRules] List of
     * {Microsoft.Web.Hosting.Administration.RampUpRule} objects.
     * 
     * @param {object} [siteConfig.limits] Site limits
     * 
     * @param {number} [siteConfig.limits.maxPercentageCpu] Maximum allowed CPU
     * usage percentage
     * 
     * @param {number} [siteConfig.limits.maxMemoryInMb] Maximum allowed memory
     * usage in MB
     * 
     * @param {number} [siteConfig.limits.maxDiskSizeInMb] Maximum allowed disk
     * size usage in MB
     * 
     * @param {boolean} [siteConfig.autoHealEnabled] Auto heal enabled
     * 
     * @param {object} [siteConfig.autoHealRules] Auto heal rules
     * 
     * @param {object} [siteConfig.autoHealRules.triggers] Triggers - Conditions
     * that describe when to execute the auto-heal actions
     * 
     * @param {object} [siteConfig.autoHealRules.triggers.requests] Requests -
     * Defines a rule based on total requests
     * 
     * @param {number} [siteConfig.autoHealRules.triggers.requests.count] Count
     * 
     * @param {string} [siteConfig.autoHealRules.triggers.requests.timeInterval]
     * TimeInterval
     * 
     * @param {number} [siteConfig.autoHealRules.triggers.privateBytesInKB]
     * PrivateBytesInKB - Defines a rule based on private bytes
     * 
     * @param {array} [siteConfig.autoHealRules.triggers.statusCodes] StatusCodes
     * - Defines a rule based on status codes
     * 
     * @param {object} [siteConfig.autoHealRules.triggers.slowRequests]
     * SlowRequests - Defines a rule based on request execution time
     * 
     * @param {string} [siteConfig.autoHealRules.triggers.slowRequests.timeTaken]
     * TimeTaken
     * 
     * @param {number} [siteConfig.autoHealRules.triggers.slowRequests.count] Count
     * 
     * @param {string}
     * [siteConfig.autoHealRules.triggers.slowRequests.timeInterval] TimeInterval
     * 
     * @param {object} [siteConfig.autoHealRules.actions] Actions - Actions to be
     * executed when a rule is triggered
     * 
     * @param {string} siteConfig.autoHealRules.actions.actionType ActionType -
     * predefined action to be taken. Possible values include: 'Recycle',
     * 'LogEvent', 'CustomAction'
     * 
     * @param {object} [siteConfig.autoHealRules.actions.customAction]
     * CustomAction - custom action to be taken
     * 
     * @param {string} [siteConfig.autoHealRules.actions.customAction.exe]
     * Executable to be run
     * 
     * @param {string} [siteConfig.autoHealRules.actions.customAction.parameters]
     * Parameters for the executable
     * 
     * @param {string} [siteConfig.autoHealRules.actions.minProcessExecutionTime]
     * MinProcessExecutionTime - minimum time the process must execute
     * before taking the action
     * 
     * @param {string} [siteConfig.tracingOptions] Tracing options
     * 
     * @param {string} [siteConfig.vnetName] Vnet name
     * 
     * @param {object} [siteConfig.cors] Cross-Origin Resource Sharing (CORS)
     * settings.
     * 
     * @param {array} [siteConfig.cors.allowedOrigins] Gets or sets the list of
     * origins that should be allowed to make cross-origin
     * calls (for example: http://example.com:12345). Use "*" to allow
     * all.
     * 
     * @param {object} [siteConfig.apiDefinition] Information about the formal API
     * definition for the web app.
     * 
     * @param {string} [siteConfig.apiDefinition.url] The URL of the API
     * definition.
     * 
     * @param {string} [siteConfig.autoSwapSlotName] Auto swap slot name
     * 
     * @param {boolean} [siteConfig.localMySqlEnabled] Local mysql enabled
     * 
     * @param {array} [siteConfig.ipSecurityRestrictions] Ip Security restrictions
     * 
     * @param {string} [siteConfig.id] Resource Id
     * 
     * @param {string} [siteConfig.name] Resource Name
     * 
     * @param {string} [siteConfig.kind] Kind of resource
     * 
     * @param {string} siteConfig.location Resource Location
     * 
     * @param {string} [siteConfig.type] Resource type
     * 
     * @param {object} [siteConfig.tags] Resource tags
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateSiteConfigSlot(resourceGroupName: string, name: string, siteConfig: models.SiteConfig, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteConfig>): void;
    createOrUpdateSiteConfigSlot(resourceGroupName: string, name: string, siteConfig: models.SiteConfig, slot: string, callback: ServiceCallback<models.SiteConfig>): void;

    /**
     * @summary Update the configuration of web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} siteConfig Request body that contains the configuraiton
     * setting for the web app
     * 
     * @param {number} [siteConfig.numberOfWorkers] Number of workers
     * 
     * @param {array} [siteConfig.defaultDocuments] Default documents
     * 
     * @param {string} [siteConfig.netFrameworkVersion] Net Framework Version
     * 
     * @param {string} [siteConfig.phpVersion] Version of PHP
     * 
     * @param {string} [siteConfig.pythonVersion] Version of Python
     * 
     * @param {string} [siteConfig.nodeVersion] Version of Node
     * 
     * @param {boolean} [siteConfig.requestTracingEnabled] Enable request tracing
     * 
     * @param {date} [siteConfig.requestTracingExpirationTime] Request tracing
     * expiration time
     * 
     * @param {boolean} [siteConfig.remoteDebuggingEnabled] Remote Debugging
     * Enabled
     * 
     * @param {string} [siteConfig.remoteDebuggingVersion] Remote Debugging Version
     * 
     * @param {boolean} [siteConfig.httpLoggingEnabled] HTTP logging Enabled
     * 
     * @param {number} [siteConfig.logsDirectorySizeLimit] HTTP Logs Directory
     * size limit
     * 
     * @param {boolean} [siteConfig.detailedErrorLoggingEnabled] Detailed error
     * logging enabled
     * 
     * @param {string} [siteConfig.publishingUsername] Publishing user name
     * 
     * @param {string} [siteConfig.publishingPassword] Publishing password
     * 
     * @param {array} [siteConfig.appSettings] Application Settings
     * 
     * @param {array} [siteConfig.metadata] Site Metadata
     * 
     * @param {array} [siteConfig.connectionStrings] Connection strings
     * 
     * @param {array} [siteConfig.handlerMappings] Handler mappings
     * 
     * @param {string} [siteConfig.documentRoot] Document root
     * 
     * @param {string} [siteConfig.scmType] SCM type
     * 
     * @param {boolean} [siteConfig.use32BitWorkerProcess] Use 32 bit worker
     * process
     * 
     * @param {boolean} [siteConfig.webSocketsEnabled] Web socket enabled.
     * 
     * @param {boolean} [siteConfig.alwaysOn] Always On
     * 
     * @param {string} [siteConfig.javaVersion] Java version
     * 
     * @param {string} [siteConfig.javaContainer] Java container
     * 
     * @param {string} [siteConfig.javaContainerVersion] Java container version
     * 
     * @param {string} [siteConfig.appCommandLine] App Command Line to launch
     * 
     * @param {string} [siteConfig.managedPipelineMode] Managed pipeline mode.
     * Possible values include: 'Integrated', 'Classic'
     * 
     * @param {array} [siteConfig.virtualApplications] Virtual applications
     * 
     * @param {string} [siteConfig.loadBalancing] Site load balancing. Possible
     * values include: 'WeightedRoundRobin', 'LeastRequests',
     * 'LeastResponseTime', 'WeightedTotalTraffic', 'RequestHash'
     * 
     * @param {object} [siteConfig.experiments] This is work around for polymophic
     * types
     * 
     * @param {array} [siteConfig.experiments.rampUpRules] List of
     * {Microsoft.Web.Hosting.Administration.RampUpRule} objects.
     * 
     * @param {object} [siteConfig.limits] Site limits
     * 
     * @param {number} [siteConfig.limits.maxPercentageCpu] Maximum allowed CPU
     * usage percentage
     * 
     * @param {number} [siteConfig.limits.maxMemoryInMb] Maximum allowed memory
     * usage in MB
     * 
     * @param {number} [siteConfig.limits.maxDiskSizeInMb] Maximum allowed disk
     * size usage in MB
     * 
     * @param {boolean} [siteConfig.autoHealEnabled] Auto heal enabled
     * 
     * @param {object} [siteConfig.autoHealRules] Auto heal rules
     * 
     * @param {object} [siteConfig.autoHealRules.triggers] Triggers - Conditions
     * that describe when to execute the auto-heal actions
     * 
     * @param {object} [siteConfig.autoHealRules.triggers.requests] Requests -
     * Defines a rule based on total requests
     * 
     * @param {number} [siteConfig.autoHealRules.triggers.requests.count] Count
     * 
     * @param {string} [siteConfig.autoHealRules.triggers.requests.timeInterval]
     * TimeInterval
     * 
     * @param {number} [siteConfig.autoHealRules.triggers.privateBytesInKB]
     * PrivateBytesInKB - Defines a rule based on private bytes
     * 
     * @param {array} [siteConfig.autoHealRules.triggers.statusCodes] StatusCodes
     * - Defines a rule based on status codes
     * 
     * @param {object} [siteConfig.autoHealRules.triggers.slowRequests]
     * SlowRequests - Defines a rule based on request execution time
     * 
     * @param {string} [siteConfig.autoHealRules.triggers.slowRequests.timeTaken]
     * TimeTaken
     * 
     * @param {number} [siteConfig.autoHealRules.triggers.slowRequests.count] Count
     * 
     * @param {string}
     * [siteConfig.autoHealRules.triggers.slowRequests.timeInterval] TimeInterval
     * 
     * @param {object} [siteConfig.autoHealRules.actions] Actions - Actions to be
     * executed when a rule is triggered
     * 
     * @param {string} siteConfig.autoHealRules.actions.actionType ActionType -
     * predefined action to be taken. Possible values include: 'Recycle',
     * 'LogEvent', 'CustomAction'
     * 
     * @param {object} [siteConfig.autoHealRules.actions.customAction]
     * CustomAction - custom action to be taken
     * 
     * @param {string} [siteConfig.autoHealRules.actions.customAction.exe]
     * Executable to be run
     * 
     * @param {string} [siteConfig.autoHealRules.actions.customAction.parameters]
     * Parameters for the executable
     * 
     * @param {string} [siteConfig.autoHealRules.actions.minProcessExecutionTime]
     * MinProcessExecutionTime - minimum time the process must execute
     * before taking the action
     * 
     * @param {string} [siteConfig.tracingOptions] Tracing options
     * 
     * @param {string} [siteConfig.vnetName] Vnet name
     * 
     * @param {object} [siteConfig.cors] Cross-Origin Resource Sharing (CORS)
     * settings.
     * 
     * @param {array} [siteConfig.cors.allowedOrigins] Gets or sets the list of
     * origins that should be allowed to make cross-origin
     * calls (for example: http://example.com:12345). Use "*" to allow
     * all.
     * 
     * @param {object} [siteConfig.apiDefinition] Information about the formal API
     * definition for the web app.
     * 
     * @param {string} [siteConfig.apiDefinition.url] The URL of the API
     * definition.
     * 
     * @param {string} [siteConfig.autoSwapSlotName] Auto swap slot name
     * 
     * @param {boolean} [siteConfig.localMySqlEnabled] Local mysql enabled
     * 
     * @param {array} [siteConfig.ipSecurityRestrictions] Ip Security restrictions
     * 
     * @param {string} [siteConfig.id] Resource Id
     * 
     * @param {string} [siteConfig.name] Resource Name
     * 
     * @param {string} [siteConfig.kind] Kind of resource
     * 
     * @param {string} siteConfig.location Resource Location
     * 
     * @param {string} [siteConfig.type] Resource type
     * 
     * @param {object} [siteConfig.tags] Resource tags
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateSiteConfigSlot(resourceGroupName: string, name: string, siteConfig: models.SiteConfig, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteConfig>): void;
    updateSiteConfigSlot(resourceGroupName: string, name: string, siteConfig: models.SiteConfig, slot: string, callback: ServiceCallback<models.SiteConfig>): void;

    /**
     * @summary Get the source control configuration of web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteSourceControl(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteSourceControl>): void;
    getSiteSourceControl(resourceGroupName: string, name: string, callback: ServiceCallback<models.SiteSourceControl>): void;

    /**
     * @summary Update the source control configuration of web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} siteSourceControl Request body that contains the source
     * control parameters
     * 
     * @param {string} [siteSourceControl.repoUrl] Repository or source control url
     * 
     * @param {string} [siteSourceControl.branch] Name of branch to use for
     * deployment
     * 
     * @param {boolean} [siteSourceControl.isManualIntegration] Whether to manual
     * or continuous integration
     * 
     * @param {boolean} [siteSourceControl.deploymentRollbackEnabled] Whether to
     * manual or continuous integration
     * 
     * @param {boolean} [siteSourceControl.isMercurial] Mercurial or Git
     * repository type
     * 
     * @param {string} [siteSourceControl.id] Resource Id
     * 
     * @param {string} [siteSourceControl.name] Resource Name
     * 
     * @param {string} [siteSourceControl.kind] Kind of resource
     * 
     * @param {string} siteSourceControl.location Resource Location
     * 
     * @param {string} [siteSourceControl.type] Resource type
     * 
     * @param {object} [siteSourceControl.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateSiteSourceControl(resourceGroupName: string, name: string, siteSourceControl: models.SiteSourceControl, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteSourceControl>): void;
    createOrUpdateSiteSourceControl(resourceGroupName: string, name: string, siteSourceControl: models.SiteSourceControl, callback: ServiceCallback<models.SiteSourceControl>): void;

    /**
     * @summary Delete source control configuration of web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteSiteSourceControl(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteSiteSourceControl(resourceGroupName: string, name: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Update the source control configuration of web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} siteSourceControl Request body that contains the source
     * control parameters
     * 
     * @param {string} [siteSourceControl.repoUrl] Repository or source control url
     * 
     * @param {string} [siteSourceControl.branch] Name of branch to use for
     * deployment
     * 
     * @param {boolean} [siteSourceControl.isManualIntegration] Whether to manual
     * or continuous integration
     * 
     * @param {boolean} [siteSourceControl.deploymentRollbackEnabled] Whether to
     * manual or continuous integration
     * 
     * @param {boolean} [siteSourceControl.isMercurial] Mercurial or Git
     * repository type
     * 
     * @param {string} [siteSourceControl.id] Resource Id
     * 
     * @param {string} [siteSourceControl.name] Resource Name
     * 
     * @param {string} [siteSourceControl.kind] Kind of resource
     * 
     * @param {string} siteSourceControl.location Resource Location
     * 
     * @param {string} [siteSourceControl.type] Resource type
     * 
     * @param {object} [siteSourceControl.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateSiteSourceControl(resourceGroupName: string, name: string, siteSourceControl: models.SiteSourceControl, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteSourceControl>): void;
    updateSiteSourceControl(resourceGroupName: string, name: string, siteSourceControl: models.SiteSourceControl, callback: ServiceCallback<models.SiteSourceControl>): void;

    /**
     * @summary Get the source control configuration of web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteSourceControlSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteSourceControl>): void;
    getSiteSourceControlSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.SiteSourceControl>): void;

    /**
     * @summary Update the source control configuration of web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} siteSourceControl Request body that contains the source
     * control parameters
     * 
     * @param {string} [siteSourceControl.repoUrl] Repository or source control url
     * 
     * @param {string} [siteSourceControl.branch] Name of branch to use for
     * deployment
     * 
     * @param {boolean} [siteSourceControl.isManualIntegration] Whether to manual
     * or continuous integration
     * 
     * @param {boolean} [siteSourceControl.deploymentRollbackEnabled] Whether to
     * manual or continuous integration
     * 
     * @param {boolean} [siteSourceControl.isMercurial] Mercurial or Git
     * repository type
     * 
     * @param {string} [siteSourceControl.id] Resource Id
     * 
     * @param {string} [siteSourceControl.name] Resource Name
     * 
     * @param {string} [siteSourceControl.kind] Kind of resource
     * 
     * @param {string} siteSourceControl.location Resource Location
     * 
     * @param {string} [siteSourceControl.type] Resource type
     * 
     * @param {object} [siteSourceControl.tags] Resource tags
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateSiteSourceControlSlot(resourceGroupName: string, name: string, siteSourceControl: models.SiteSourceControl, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteSourceControl>): void;
    createOrUpdateSiteSourceControlSlot(resourceGroupName: string, name: string, siteSourceControl: models.SiteSourceControl, slot: string, callback: ServiceCallback<models.SiteSourceControl>): void;

    /**
     * @summary Delete source control configuration of web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteSiteSourceControlSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteSiteSourceControlSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Update the source control configuration of web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} siteSourceControl Request body that contains the source
     * control parameters
     * 
     * @param {string} [siteSourceControl.repoUrl] Repository or source control url
     * 
     * @param {string} [siteSourceControl.branch] Name of branch to use for
     * deployment
     * 
     * @param {boolean} [siteSourceControl.isManualIntegration] Whether to manual
     * or continuous integration
     * 
     * @param {boolean} [siteSourceControl.deploymentRollbackEnabled] Whether to
     * manual or continuous integration
     * 
     * @param {boolean} [siteSourceControl.isMercurial] Mercurial or Git
     * repository type
     * 
     * @param {string} [siteSourceControl.id] Resource Id
     * 
     * @param {string} [siteSourceControl.name] Resource Name
     * 
     * @param {string} [siteSourceControl.kind] Kind of resource
     * 
     * @param {string} siteSourceControl.location Resource Location
     * 
     * @param {string} [siteSourceControl.type] Resource type
     * 
     * @param {object} [siteSourceControl.tags] Resource tags
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateSiteSourceControlSlot(resourceGroupName: string, name: string, siteSourceControl: models.SiteSourceControl, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteSourceControl>): void;
    updateSiteSourceControlSlot(resourceGroupName: string, name: string, siteSourceControl: models.SiteSourceControl, slot: string, callback: ServiceCallback<models.SiteSourceControl>): void;

    /**
     * @summary Gets the application settings of web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listSiteAppSettingsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StringDictionary>): void;
    listSiteAppSettingsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.StringDictionary>): void;

    /**
     * @summary Gets the application settings of web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listSiteAppSettings(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StringDictionary>): void;
    listSiteAppSettings(resourceGroupName: string, name: string, callback: ServiceCallback<models.StringDictionary>): void;

    /**
     * @summary Updates the application settings of web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} appSettings Application settings of web app
     * 
     * @param {object} [appSettings.properties] Settings
     * 
     * @param {string} [appSettings.id] Resource Id
     * 
     * @param {string} [appSettings.name] Resource Name
     * 
     * @param {string} [appSettings.kind] Kind of resource
     * 
     * @param {string} appSettings.location Resource Location
     * 
     * @param {string} [appSettings.type] Resource type
     * 
     * @param {object} [appSettings.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateSiteAppSettings(resourceGroupName: string, name: string, appSettings: models.StringDictionary, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StringDictionary>): void;
    updateSiteAppSettings(resourceGroupName: string, name: string, appSettings: models.StringDictionary, callback: ServiceCallback<models.StringDictionary>): void;

    /**
     * @summary Updates the application settings of web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} appSettings Application settings of web app
     * 
     * @param {object} [appSettings.properties] Settings
     * 
     * @param {string} [appSettings.id] Resource Id
     * 
     * @param {string} [appSettings.name] Resource Name
     * 
     * @param {string} [appSettings.kind] Kind of resource
     * 
     * @param {string} appSettings.location Resource Location
     * 
     * @param {string} [appSettings.type] Resource type
     * 
     * @param {object} [appSettings.tags] Resource tags
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateSiteAppSettingsSlot(resourceGroupName: string, name: string, appSettings: models.StringDictionary, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StringDictionary>): void;
    updateSiteAppSettingsSlot(resourceGroupName: string, name: string, appSettings: models.StringDictionary, slot: string, callback: ServiceCallback<models.StringDictionary>): void;

    /**
     * @summary Gets the connection strings associated with web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listSiteConnectionStrings(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectionStringDictionary>): void;
    listSiteConnectionStrings(resourceGroupName: string, name: string, callback: ServiceCallback<models.ConnectionStringDictionary>): void;

    /**
     * @summary Gets the connection strings associated with web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listSiteConnectionStringsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectionStringDictionary>): void;
    listSiteConnectionStringsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.ConnectionStringDictionary>): void;

    /**
     * @summary Updates the connection strings associated with web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} connectionStrings Connection strings associated with web app
     * 
     * @param {object} [connectionStrings.properties] Connection strings
     * 
     * @param {string} [connectionStrings.id] Resource Id
     * 
     * @param {string} [connectionStrings.name] Resource Name
     * 
     * @param {string} [connectionStrings.kind] Kind of resource
     * 
     * @param {string} connectionStrings.location Resource Location
     * 
     * @param {string} [connectionStrings.type] Resource type
     * 
     * @param {object} [connectionStrings.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateSiteConnectionStrings(resourceGroupName: string, name: string, connectionStrings: models.ConnectionStringDictionary, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectionStringDictionary>): void;
    updateSiteConnectionStrings(resourceGroupName: string, name: string, connectionStrings: models.ConnectionStringDictionary, callback: ServiceCallback<models.ConnectionStringDictionary>): void;

    /**
     * @summary Updates the connection strings associated with web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} connectionStrings Connection strings associated with web app
     * 
     * @param {object} [connectionStrings.properties] Connection strings
     * 
     * @param {string} [connectionStrings.id] Resource Id
     * 
     * @param {string} [connectionStrings.name] Resource Name
     * 
     * @param {string} [connectionStrings.kind] Kind of resource
     * 
     * @param {string} connectionStrings.location Resource Location
     * 
     * @param {string} [connectionStrings.type] Resource type
     * 
     * @param {object} [connectionStrings.tags] Resource tags
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateSiteConnectionStringsSlot(resourceGroupName: string, name: string, connectionStrings: models.ConnectionStringDictionary, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectionStringDictionary>): void;
    updateSiteConnectionStringsSlot(resourceGroupName: string, name: string, connectionStrings: models.ConnectionStringDictionary, slot: string, callback: ServiceCallback<models.ConnectionStringDictionary>): void;

    /**
     * @summary Gets the Authentication / Authorization settings associated with
     * web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listSiteAuthSettings(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteAuthSettings>): void;
    listSiteAuthSettings(resourceGroupName: string, name: string, callback: ServiceCallback<models.SiteAuthSettings>): void;

    /**
     * @summary Gets the Authentication / Authorization settings associated with
     * web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listSiteAuthSettingsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteAuthSettings>): void;
    listSiteAuthSettingsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.SiteAuthSettings>): void;

    /**
     * @summary Updates the Authentication / Authorization settings associated
     * with web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} siteAuthSettings Auth settings associated with web app
     * 
     * @param {boolean} [siteAuthSettings.enabled] Gets or sets a value indicating
     * whether the Authentication / Authorization feature is enabled for the
     * current app.
     * 
     * @param {string} [siteAuthSettings.httpApiPrefixPath] Gets or sets the
     * relative path prefix used by platform HTTP APIs.
     * Changing this value is not recommended except for compatibility
     * reasons.
     * 
     * @param {string} [siteAuthSettings.unauthenticatedClientAction] Gets or sets
     * the action to take when an unauthenticated client attempts to access the
     * app. Possible values include: 'RedirectToLoginPage', 'AllowAnonymous'
     * 
     * @param {boolean} [siteAuthSettings.tokenStoreEnabled] Gets or sets a value
     * indicating whether to durably store platform-specific security tokens
     * obtained during login flows. This capability is disabled by
     * default.
     * 
     * @param {array} [siteAuthSettings.allowedExternalRedirectUrls] Gets or sets
     * a collection of external URLs that can be redirected to as part of logging
     * in
     * or logging out of the web app. Note that the query string part
     * of the URL is ignored.
     * This is an advanced setting typically only needed by Windows
     * Store application backends.
     * Note that URLs within the current domain are always implicitly
     * allowed.
     * 
     * @param {string} [siteAuthSettings.defaultProvider] Gets or sets the default
     * authentication provider to use when multiple providers are configured.
     * This setting is only needed if multiple providers are
     * configured and the unauthenticated client
     * action is set to "RedirectToLoginPage". Possible values
     * include: 'AzureActiveDirectory', 'Facebook', 'Google', 'MicrosoftAccount',
     * 'Twitter'
     * 
     * @param {number} [siteAuthSettings.tokenRefreshExtensionHours] Gets or sets
     * the number of hours after session token expiration that a session token
     * can be used to
     * call the token refresh API. The default is 72 hours.
     * 
     * @param {string} [siteAuthSettings.clientId] Gets or sets the Client ID of
     * this relying party application, known as the client_id.
     * This setting is required for enabling OpenID Connection
     * authentication with Azure Active Directory or
     * other 3rd party OpenID Connect providers.
     * More information on OpenID Connect:
     * http://openid.net/specs/openid-connect-core-1_0.html
     * 
     * @param {string} [siteAuthSettings.clientSecret] Gets or sets the Client
     * Secret of this relying party application (in Azure Active Directory, this
     * is also referred to as the Key).
     * This setting is optional. If no client secret is configured,
     * the OpenID Connect implicit auth flow is used to authenticate end users.
     * Otherwise, the OpenID Connect Authorization Code Flow is used
     * to authenticate end users.
     * More information on OpenID Connect:
     * http://openid.net/specs/openid-connect-core-1_0.html
     * 
     * @param {string} [siteAuthSettings.issuer] Gets or sets the OpenID Connect
     * Issuer URI that represents the entity which issues access tokens for this
     * application.
     * When using Azure Active Directory, this value is the URI of the
     * directory tenant, e.g. https://sts.windows.net/{tenant-guid}/.
     * This URI is a case-sensitive identifier for the token issuer.
     * More information on OpenID Connect Discovery:
     * http://openid.net/specs/openid-connect-discovery-1_0.html
     * 
     * @param {array} [siteAuthSettings.allowedAudiences] Gets or sets a list of
     * allowed audience values to consider when validating JWTs issued by
     * Azure Active Directory. Note that the
     * {Microsoft.Web.Hosting.Administration.SiteAuthSettings.ClientId} value is
     * always considered an
     * allowed audience, regardless of this setting.
     * 
     * @param {array} [siteAuthSettings.additionalLoginParams] Gets or sets a list
     * of login parameters to send to the OpenID Connect authorization endpoint
     * when
     * a user logs in. Each parameter must be in the form "key=value".
     * 
     * @param {string} [siteAuthSettings.aadClientId]
     * 
     * @param {string} [siteAuthSettings.openIdIssuer]
     * 
     * @param {string} [siteAuthSettings.googleClientId] Gets or sets the OpenID
     * Connect Client ID for the Google web application.
     * This setting is required for enabling Google Sign-In.
     * Google Sign-In documentation:
     * https://developers.google.com/identity/sign-in/web/
     * 
     * @param {string} [siteAuthSettings.googleClientSecret] Gets or sets the
     * client secret associated with the Google web application.
     * This setting is required for enabling Google Sign-In.
     * Google Sign-In documentation:
     * https://developers.google.com/identity/sign-in/web/
     * 
     * @param {array} [siteAuthSettings.googleOAuthScopes] Gets or sets the OAuth
     * 2.0 scopes that will be requested as part of Google Sign-In
     * authentication.
     * This setting is optional. If not specified, "openid",
     * "profile", and "email" are used as default scopes.
     * Google Sign-In documentation:
     * https://developers.google.com/identity/sign-in/web/
     * 
     * @param {string} [siteAuthSettings.facebookAppId] Gets or sets the App ID of
     * the Facebook app used for login.
     * This setting is required for enabling Facebook Login.
     * Facebook Login documentation:
     * https://developers.facebook.com/docs/facebook-login
     * 
     * @param {string} [siteAuthSettings.facebookAppSecret] Gets or sets the App
     * Secret of the Facebook app used for Facebook Login.
     * This setting is required for enabling Facebook Login.
     * Facebook Login documentation:
     * https://developers.facebook.com/docs/facebook-login
     * 
     * @param {array} [siteAuthSettings.facebookOAuthScopes] Gets or sets the
     * OAuth 2.0 scopes that will be requested as part of Facebook Login
     * authentication.
     * This setting is optional.
     * Facebook Login documentation:
     * https://developers.facebook.com/docs/facebook-login
     * 
     * @param {string} [siteAuthSettings.twitterConsumerKey] Gets or sets the
     * OAuth 1.0a consumer key of the Twitter application used for sign-in.
     * This setting is required for enabling Twitter Sign-In.
     * Twitter Sign-In documentation:
     * https://dev.twitter.com/web/sign-in
     * 
     * @param {string} [siteAuthSettings.twitterConsumerSecret] Gets or sets the
     * OAuth 1.0a consumer secret of the Twitter application used for sign-in.
     * This setting is required for enabling Twitter Sign-In.
     * Twitter Sign-In documentation:
     * https://dev.twitter.com/web/sign-in
     * 
     * @param {string} [siteAuthSettings.microsoftAccountClientId] Gets or sets
     * the OAuth 2.0 client ID that was created for the app used for
     * authentication.
     * This setting is required for enabling Microsoft Account
     * authentication.
     * Microsoft Account OAuth documentation:
     * https://dev.onedrive.com/auth/msa_oauth.htm
     * 
     * @param {string} [siteAuthSettings.microsoftAccountClientSecret] Gets or
     * sets the OAuth 2.0 client secret that was created for the app used for
     * authentication.
     * This setting is required for enabling Microsoft Account
     * authentication.
     * Microsoft Account OAuth documentation:
     * https://dev.onedrive.com/auth/msa_oauth.htm
     * 
     * @param {array} [siteAuthSettings.microsoftAccountOAuthScopes] Gets or sets
     * the OAuth 2.0 scopes that will be requested as part of Microsoft Account
     * authentication.
     * This setting is optional. If not specified, "wl.basic" is used
     * as the default scope.
     * Microsoft Account Scopes and permissions documentation:
     * https://msdn.microsoft.com/en-us/library/dn631845.aspx
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateSiteAuthSettings(resourceGroupName: string, name: string, siteAuthSettings: models.SiteAuthSettings, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteAuthSettings>): void;
    updateSiteAuthSettings(resourceGroupName: string, name: string, siteAuthSettings: models.SiteAuthSettings, callback: ServiceCallback<models.SiteAuthSettings>): void;

    /**
     * @summary Updates the Authentication / Authorization settings associated
     * with web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} siteAuthSettings Auth settings associated with web app
     * 
     * @param {boolean} [siteAuthSettings.enabled] Gets or sets a value indicating
     * whether the Authentication / Authorization feature is enabled for the
     * current app.
     * 
     * @param {string} [siteAuthSettings.httpApiPrefixPath] Gets or sets the
     * relative path prefix used by platform HTTP APIs.
     * Changing this value is not recommended except for compatibility
     * reasons.
     * 
     * @param {string} [siteAuthSettings.unauthenticatedClientAction] Gets or sets
     * the action to take when an unauthenticated client attempts to access the
     * app. Possible values include: 'RedirectToLoginPage', 'AllowAnonymous'
     * 
     * @param {boolean} [siteAuthSettings.tokenStoreEnabled] Gets or sets a value
     * indicating whether to durably store platform-specific security tokens
     * obtained during login flows. This capability is disabled by
     * default.
     * 
     * @param {array} [siteAuthSettings.allowedExternalRedirectUrls] Gets or sets
     * a collection of external URLs that can be redirected to as part of logging
     * in
     * or logging out of the web app. Note that the query string part
     * of the URL is ignored.
     * This is an advanced setting typically only needed by Windows
     * Store application backends.
     * Note that URLs within the current domain are always implicitly
     * allowed.
     * 
     * @param {string} [siteAuthSettings.defaultProvider] Gets or sets the default
     * authentication provider to use when multiple providers are configured.
     * This setting is only needed if multiple providers are
     * configured and the unauthenticated client
     * action is set to "RedirectToLoginPage". Possible values
     * include: 'AzureActiveDirectory', 'Facebook', 'Google', 'MicrosoftAccount',
     * 'Twitter'
     * 
     * @param {number} [siteAuthSettings.tokenRefreshExtensionHours] Gets or sets
     * the number of hours after session token expiration that a session token
     * can be used to
     * call the token refresh API. The default is 72 hours.
     * 
     * @param {string} [siteAuthSettings.clientId] Gets or sets the Client ID of
     * this relying party application, known as the client_id.
     * This setting is required for enabling OpenID Connection
     * authentication with Azure Active Directory or
     * other 3rd party OpenID Connect providers.
     * More information on OpenID Connect:
     * http://openid.net/specs/openid-connect-core-1_0.html
     * 
     * @param {string} [siteAuthSettings.clientSecret] Gets or sets the Client
     * Secret of this relying party application (in Azure Active Directory, this
     * is also referred to as the Key).
     * This setting is optional. If no client secret is configured,
     * the OpenID Connect implicit auth flow is used to authenticate end users.
     * Otherwise, the OpenID Connect Authorization Code Flow is used
     * to authenticate end users.
     * More information on OpenID Connect:
     * http://openid.net/specs/openid-connect-core-1_0.html
     * 
     * @param {string} [siteAuthSettings.issuer] Gets or sets the OpenID Connect
     * Issuer URI that represents the entity which issues access tokens for this
     * application.
     * When using Azure Active Directory, this value is the URI of the
     * directory tenant, e.g. https://sts.windows.net/{tenant-guid}/.
     * This URI is a case-sensitive identifier for the token issuer.
     * More information on OpenID Connect Discovery:
     * http://openid.net/specs/openid-connect-discovery-1_0.html
     * 
     * @param {array} [siteAuthSettings.allowedAudiences] Gets or sets a list of
     * allowed audience values to consider when validating JWTs issued by
     * Azure Active Directory. Note that the
     * {Microsoft.Web.Hosting.Administration.SiteAuthSettings.ClientId} value is
     * always considered an
     * allowed audience, regardless of this setting.
     * 
     * @param {array} [siteAuthSettings.additionalLoginParams] Gets or sets a list
     * of login parameters to send to the OpenID Connect authorization endpoint
     * when
     * a user logs in. Each parameter must be in the form "key=value".
     * 
     * @param {string} [siteAuthSettings.aadClientId]
     * 
     * @param {string} [siteAuthSettings.openIdIssuer]
     * 
     * @param {string} [siteAuthSettings.googleClientId] Gets or sets the OpenID
     * Connect Client ID for the Google web application.
     * This setting is required for enabling Google Sign-In.
     * Google Sign-In documentation:
     * https://developers.google.com/identity/sign-in/web/
     * 
     * @param {string} [siteAuthSettings.googleClientSecret] Gets or sets the
     * client secret associated with the Google web application.
     * This setting is required for enabling Google Sign-In.
     * Google Sign-In documentation:
     * https://developers.google.com/identity/sign-in/web/
     * 
     * @param {array} [siteAuthSettings.googleOAuthScopes] Gets or sets the OAuth
     * 2.0 scopes that will be requested as part of Google Sign-In
     * authentication.
     * This setting is optional. If not specified, "openid",
     * "profile", and "email" are used as default scopes.
     * Google Sign-In documentation:
     * https://developers.google.com/identity/sign-in/web/
     * 
     * @param {string} [siteAuthSettings.facebookAppId] Gets or sets the App ID of
     * the Facebook app used for login.
     * This setting is required for enabling Facebook Login.
     * Facebook Login documentation:
     * https://developers.facebook.com/docs/facebook-login
     * 
     * @param {string} [siteAuthSettings.facebookAppSecret] Gets or sets the App
     * Secret of the Facebook app used for Facebook Login.
     * This setting is required for enabling Facebook Login.
     * Facebook Login documentation:
     * https://developers.facebook.com/docs/facebook-login
     * 
     * @param {array} [siteAuthSettings.facebookOAuthScopes] Gets or sets the
     * OAuth 2.0 scopes that will be requested as part of Facebook Login
     * authentication.
     * This setting is optional.
     * Facebook Login documentation:
     * https://developers.facebook.com/docs/facebook-login
     * 
     * @param {string} [siteAuthSettings.twitterConsumerKey] Gets or sets the
     * OAuth 1.0a consumer key of the Twitter application used for sign-in.
     * This setting is required for enabling Twitter Sign-In.
     * Twitter Sign-In documentation:
     * https://dev.twitter.com/web/sign-in
     * 
     * @param {string} [siteAuthSettings.twitterConsumerSecret] Gets or sets the
     * OAuth 1.0a consumer secret of the Twitter application used for sign-in.
     * This setting is required for enabling Twitter Sign-In.
     * Twitter Sign-In documentation:
     * https://dev.twitter.com/web/sign-in
     * 
     * @param {string} [siteAuthSettings.microsoftAccountClientId] Gets or sets
     * the OAuth 2.0 client ID that was created for the app used for
     * authentication.
     * This setting is required for enabling Microsoft Account
     * authentication.
     * Microsoft Account OAuth documentation:
     * https://dev.onedrive.com/auth/msa_oauth.htm
     * 
     * @param {string} [siteAuthSettings.microsoftAccountClientSecret] Gets or
     * sets the OAuth 2.0 client secret that was created for the app used for
     * authentication.
     * This setting is required for enabling Microsoft Account
     * authentication.
     * Microsoft Account OAuth documentation:
     * https://dev.onedrive.com/auth/msa_oauth.htm
     * 
     * @param {array} [siteAuthSettings.microsoftAccountOAuthScopes] Gets or sets
     * the OAuth 2.0 scopes that will be requested as part of Microsoft Account
     * authentication.
     * This setting is optional. If not specified, "wl.basic" is used
     * as the default scope.
     * Microsoft Account Scopes and permissions documentation:
     * https://msdn.microsoft.com/en-us/library/dn631845.aspx
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateSiteAuthSettingsSlot(resourceGroupName: string, name: string, siteAuthSettings: models.SiteAuthSettings, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteAuthSettings>): void;
    updateSiteAuthSettingsSlot(resourceGroupName: string, name: string, siteAuthSettings: models.SiteAuthSettings, slot: string, callback: ServiceCallback<models.SiteAuthSettings>): void;

    /**
     * @summary Gets the web app publishing credentials
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listSitePublishingCredentials(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.User>): void;
    listSitePublishingCredentials(resourceGroupName: string, name: string, callback: ServiceCallback<models.User>): void;

    /**
     * @summary Gets the web app publishing credentials
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginListSitePublishingCredentials(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.User>): void;
    beginListSitePublishingCredentials(resourceGroupName: string, name: string, callback: ServiceCallback<models.User>): void;

    /**
     * @summary Gets the web app publishing credentials
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listSitePublishingCredentialsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.User>): void;
    listSitePublishingCredentialsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.User>): void;

    /**
     * @summary Gets the web app publishing credentials
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginListSitePublishingCredentialsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.User>): void;
    beginListSitePublishingCredentialsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.User>): void;

    /**
     * @summary Gets the web app meta data.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listSiteMetadata(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StringDictionary>): void;
    listSiteMetadata(resourceGroupName: string, name: string, callback: ServiceCallback<models.StringDictionary>): void;

    /**
     * @summary Gets the web app meta data.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listSiteMetadataSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StringDictionary>): void;
    listSiteMetadataSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.StringDictionary>): void;

    /**
     * @summary Updates the meta data for web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} metadata Meta data of web app
     * 
     * @param {object} [metadata.properties] Settings
     * 
     * @param {string} [metadata.id] Resource Id
     * 
     * @param {string} [metadata.name] Resource Name
     * 
     * @param {string} [metadata.kind] Kind of resource
     * 
     * @param {string} metadata.location Resource Location
     * 
     * @param {string} [metadata.type] Resource type
     * 
     * @param {object} [metadata.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateSiteMetadata(resourceGroupName: string, name: string, metadata: models.StringDictionary, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StringDictionary>): void;
    updateSiteMetadata(resourceGroupName: string, name: string, metadata: models.StringDictionary, callback: ServiceCallback<models.StringDictionary>): void;

    /**
     * @summary Updates the meta data for web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} metadata Meta data of web app
     * 
     * @param {object} [metadata.properties] Settings
     * 
     * @param {string} [metadata.id] Resource Id
     * 
     * @param {string} [metadata.name] Resource Name
     * 
     * @param {string} [metadata.kind] Kind of resource
     * 
     * @param {string} metadata.location Resource Location
     * 
     * @param {string} [metadata.type] Resource type
     * 
     * @param {object} [metadata.tags] Resource tags
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateSiteMetadataSlot(resourceGroupName: string, name: string, metadata: models.StringDictionary, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StringDictionary>): void;
    updateSiteMetadataSlot(resourceGroupName: string, name: string, metadata: models.StringDictionary, slot: string, callback: ServiceCallback<models.StringDictionary>): void;

    /**
     * @summary Gets the web app logs configuration
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteLogsConfig(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteLogsConfig>): void;
    getSiteLogsConfig(resourceGroupName: string, name: string, callback: ServiceCallback<models.SiteLogsConfig>): void;

    /**
     * @summary Updates the meta data for web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} siteLogsConfig Site logs configuration
     * 
     * @param {object} [siteLogsConfig.applicationLogs] Application logs
     * configuration
     * 
     * @param {object} [siteLogsConfig.applicationLogs.fileSystem] Application
     * logs to file system configuration
     * 
     * @param {string} [siteLogsConfig.applicationLogs.fileSystem.level] Log
     * level. Possible values include: 'Off', 'Verbose', 'Information',
     * 'Warning', 'Error'
     * 
     * @param {object} [siteLogsConfig.applicationLogs.azureTableStorage]
     * Application logs to azure table storage configuration
     * 
     * @param {string} [siteLogsConfig.applicationLogs.azureTableStorage.level]
     * Log level. Possible values include: 'Off', 'Verbose', 'Information',
     * 'Warning', 'Error'
     * 
     * @param {string} [siteLogsConfig.applicationLogs.azureTableStorage.sasUrl]
     * SAS url to an azure table with add/query/delete permissions
     * 
     * @param {object} [siteLogsConfig.applicationLogs.azureBlobStorage]
     * Application logs to blob storage configuration
     * 
     * @param {string} [siteLogsConfig.applicationLogs.azureBlobStorage.level] Log
     * level. Possible values include: 'Off', 'Verbose', 'Information',
     * 'Warning', 'Error'
     * 
     * @param {string} [siteLogsConfig.applicationLogs.azureBlobStorage.sasUrl]
     * SAS url to a azure blob container with read/write/list/delete permissions
     * 
     * @param {number}
     * [siteLogsConfig.applicationLogs.azureBlobStorage.retentionInDays]
     * Retention in days.
     * Remove blobs older than X days.
     * 0 or lower means no retention.
     * 
     * @param {object} [siteLogsConfig.httpLogs] Http logs configuration
     * 
     * @param {object} [siteLogsConfig.httpLogs.fileSystem] Http logs to file
     * system configuration
     * 
     * @param {number} [siteLogsConfig.httpLogs.fileSystem.retentionInMb] Maximum
     * size in megabytes that http log files can use.
     * When reached old log files will be removed to make space for
     * new ones.
     * Value can range between 25 and 100.
     * 
     * @param {number} [siteLogsConfig.httpLogs.fileSystem.retentionInDays]
     * Retention in days.
     * Remove files older than X days.
     * 0 or lower means no retention.
     * 
     * @param {boolean} [siteLogsConfig.httpLogs.fileSystem.enabled] Enabled
     * 
     * @param {object} [siteLogsConfig.httpLogs.azureBlobStorage] Http logs to
     * azure blob storage configuration
     * 
     * @param {string} [siteLogsConfig.httpLogs.azureBlobStorage.sasUrl] SAS url
     * to a azure blob container with read/write/list/delete permissions
     * 
     * @param {number} [siteLogsConfig.httpLogs.azureBlobStorage.retentionInDays]
     * Retention in days.
     * Remove blobs older than X days.
     * 0 or lower means no retention.
     * 
     * @param {boolean} [siteLogsConfig.httpLogs.azureBlobStorage.enabled] Enabled
     * 
     * @param {object} [siteLogsConfig.failedRequestsTracing] Failed requests
     * tracing configuration
     * 
     * @param {object} [siteLogsConfig.detailedErrorMessages] Detailed error
     * messages configuration
     * 
     * @param {boolean} [siteLogsConfig.detailedErrorMessages.enabled] Enabled
     * 
     * @param {string} [siteLogsConfig.id] Resource Id
     * 
     * @param {string} [siteLogsConfig.name] Resource Name
     * 
     * @param {string} [siteLogsConfig.kind] Kind of resource
     * 
     * @param {string} siteLogsConfig.location Resource Location
     * 
     * @param {string} [siteLogsConfig.type] Resource type
     * 
     * @param {object} [siteLogsConfig.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateSiteLogsConfig(resourceGroupName: string, name: string, siteLogsConfig: models.SiteLogsConfig, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteLogsConfig>): void;
    updateSiteLogsConfig(resourceGroupName: string, name: string, siteLogsConfig: models.SiteLogsConfig, callback: ServiceCallback<models.SiteLogsConfig>): void;

    /**
     * @summary Gets the web app logs configuration
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteLogsConfigSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteLogsConfig>): void;
    getSiteLogsConfigSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.SiteLogsConfig>): void;

    /**
     * @summary Updates the meta data for web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} siteLogsConfig Site logs configuration
     * 
     * @param {object} [siteLogsConfig.applicationLogs] Application logs
     * configuration
     * 
     * @param {object} [siteLogsConfig.applicationLogs.fileSystem] Application
     * logs to file system configuration
     * 
     * @param {string} [siteLogsConfig.applicationLogs.fileSystem.level] Log
     * level. Possible values include: 'Off', 'Verbose', 'Information',
     * 'Warning', 'Error'
     * 
     * @param {object} [siteLogsConfig.applicationLogs.azureTableStorage]
     * Application logs to azure table storage configuration
     * 
     * @param {string} [siteLogsConfig.applicationLogs.azureTableStorage.level]
     * Log level. Possible values include: 'Off', 'Verbose', 'Information',
     * 'Warning', 'Error'
     * 
     * @param {string} [siteLogsConfig.applicationLogs.azureTableStorage.sasUrl]
     * SAS url to an azure table with add/query/delete permissions
     * 
     * @param {object} [siteLogsConfig.applicationLogs.azureBlobStorage]
     * Application logs to blob storage configuration
     * 
     * @param {string} [siteLogsConfig.applicationLogs.azureBlobStorage.level] Log
     * level. Possible values include: 'Off', 'Verbose', 'Information',
     * 'Warning', 'Error'
     * 
     * @param {string} [siteLogsConfig.applicationLogs.azureBlobStorage.sasUrl]
     * SAS url to a azure blob container with read/write/list/delete permissions
     * 
     * @param {number}
     * [siteLogsConfig.applicationLogs.azureBlobStorage.retentionInDays]
     * Retention in days.
     * Remove blobs older than X days.
     * 0 or lower means no retention.
     * 
     * @param {object} [siteLogsConfig.httpLogs] Http logs configuration
     * 
     * @param {object} [siteLogsConfig.httpLogs.fileSystem] Http logs to file
     * system configuration
     * 
     * @param {number} [siteLogsConfig.httpLogs.fileSystem.retentionInMb] Maximum
     * size in megabytes that http log files can use.
     * When reached old log files will be removed to make space for
     * new ones.
     * Value can range between 25 and 100.
     * 
     * @param {number} [siteLogsConfig.httpLogs.fileSystem.retentionInDays]
     * Retention in days.
     * Remove files older than X days.
     * 0 or lower means no retention.
     * 
     * @param {boolean} [siteLogsConfig.httpLogs.fileSystem.enabled] Enabled
     * 
     * @param {object} [siteLogsConfig.httpLogs.azureBlobStorage] Http logs to
     * azure blob storage configuration
     * 
     * @param {string} [siteLogsConfig.httpLogs.azureBlobStorage.sasUrl] SAS url
     * to a azure blob container with read/write/list/delete permissions
     * 
     * @param {number} [siteLogsConfig.httpLogs.azureBlobStorage.retentionInDays]
     * Retention in days.
     * Remove blobs older than X days.
     * 0 or lower means no retention.
     * 
     * @param {boolean} [siteLogsConfig.httpLogs.azureBlobStorage.enabled] Enabled
     * 
     * @param {object} [siteLogsConfig.failedRequestsTracing] Failed requests
     * tracing configuration
     * 
     * @param {object} [siteLogsConfig.detailedErrorMessages] Detailed error
     * messages configuration
     * 
     * @param {boolean} [siteLogsConfig.detailedErrorMessages.enabled] Enabled
     * 
     * @param {string} [siteLogsConfig.id] Resource Id
     * 
     * @param {string} [siteLogsConfig.name] Resource Name
     * 
     * @param {string} [siteLogsConfig.kind] Kind of resource
     * 
     * @param {string} siteLogsConfig.location Resource Location
     * 
     * @param {string} [siteLogsConfig.type] Resource type
     * 
     * @param {object} [siteLogsConfig.tags] Resource tags
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateSiteLogsConfigSlot(resourceGroupName: string, name: string, siteLogsConfig: models.SiteLogsConfig, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteLogsConfig>): void;
    updateSiteLogsConfigSlot(resourceGroupName: string, name: string, siteLogsConfig: models.SiteLogsConfig, slot: string, callback: ServiceCallback<models.SiteLogsConfig>): void;

    /**
     * @param {string} resourceGroupName
     * 
     * @param {string} name
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listSitePremierAddOns(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    listSitePremierAddOns(resourceGroupName: string, name: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} resourceGroupName
     * 
     * @param {string} name
     * 
     * @param {string} slot
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listSitePremierAddOnsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    listSitePremierAddOnsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} resourceGroupName
     * 
     * @param {string} name
     * 
     * @param {string} premierAddOnName
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSitePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getSitePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} resourceGroupName
     * 
     * @param {string} name
     * 
     * @param {string} premierAddOnName
     * 
     * @param {object} premierAddOn
     * 
     * @param {string} [premierAddOn.location] Geo region resource belongs to e.g.
     * SouthCentralUS, SouthEastAsia
     * 
     * @param {object} [premierAddOn.tags] Tags associated with resource
     * 
     * @param {object} [premierAddOn.plan] Azure resource manager plan
     * 
     * @param {string} [premierAddOn.plan.name] The name
     * 
     * @param {string} [premierAddOn.plan.publisher] The publisher
     * 
     * @param {string} [premierAddOn.plan.product] The product
     * 
     * @param {string} [premierAddOn.plan.promotionCode] The promotion code
     * 
     * @param {string} [premierAddOn.plan.version] Version of product
     * 
     * @param {object} [premierAddOn.properties] Resource specific properties
     * 
     * @param {object} [premierAddOn.sku] Sku description of the resource
     * 
     * @param {string} [premierAddOn.sku.name] Name of the resource sku
     * 
     * @param {string} [premierAddOn.sku.tier] Service Tier of the resource sku
     * 
     * @param {string} [premierAddOn.sku.size] Size specifier of the resource sku
     * 
     * @param {string} [premierAddOn.sku.family] Family code of the resource sku
     * 
     * @param {number} [premierAddOn.sku.capacity] Current number of instances
     * assigned to the resource
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    addSitePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: models.PremierAddOnRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    addSitePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: models.PremierAddOnRequest, callback: ServiceCallback<any>): void;

    /**
     * @param {string} resourceGroupName
     * 
     * @param {string} name
     * 
     * @param {string} premierAddOnName
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteSitePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteSitePremierAddOn(resourceGroupName: string, name: string, premierAddOnName: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} resourceGroupName
     * 
     * @param {string} name
     * 
     * @param {string} premierAddOnName
     * 
     * @param {string} slot
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSitePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getSitePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, slot: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} resourceGroupName
     * 
     * @param {string} name
     * 
     * @param {string} premierAddOnName
     * 
     * @param {object} premierAddOn
     * 
     * @param {string} [premierAddOn.location] Geo region resource belongs to e.g.
     * SouthCentralUS, SouthEastAsia
     * 
     * @param {object} [premierAddOn.tags] Tags associated with resource
     * 
     * @param {object} [premierAddOn.plan] Azure resource manager plan
     * 
     * @param {string} [premierAddOn.plan.name] The name
     * 
     * @param {string} [premierAddOn.plan.publisher] The publisher
     * 
     * @param {string} [premierAddOn.plan.product] The product
     * 
     * @param {string} [premierAddOn.plan.promotionCode] The promotion code
     * 
     * @param {string} [premierAddOn.plan.version] Version of product
     * 
     * @param {object} [premierAddOn.properties] Resource specific properties
     * 
     * @param {object} [premierAddOn.sku] Sku description of the resource
     * 
     * @param {string} [premierAddOn.sku.name] Name of the resource sku
     * 
     * @param {string} [premierAddOn.sku.tier] Service Tier of the resource sku
     * 
     * @param {string} [premierAddOn.sku.size] Size specifier of the resource sku
     * 
     * @param {string} [premierAddOn.sku.family] Family code of the resource sku
     * 
     * @param {number} [premierAddOn.sku.capacity] Current number of instances
     * assigned to the resource
     * 
     * @param {string} slot
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    addSitePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: models.PremierAddOnRequest, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    addSitePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, premierAddOn: models.PremierAddOnRequest, slot: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} resourceGroupName
     * 
     * @param {string} name
     * 
     * @param {string} premierAddOnName
     * 
     * @param {string} slot
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteSitePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteSitePremierAddOnSlot(resourceGroupName: string, name: string, premierAddOnName: string, slot: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Gets the backup configuration for a web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteBackupConfiguration(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupRequest>): void;
    getSiteBackupConfiguration(resourceGroupName: string, name: string, callback: ServiceCallback<models.BackupRequest>): void;

    /**
     * @summary Gets the backup configuration for a web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteBackupConfigurationSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupRequest>): void;
    getSiteBackupConfigurationSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.BackupRequest>): void;

    /**
     * @summary Updates backup configuration of web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} request Information on backup request
     * 
     * @param {string} [request.backupRequestName] Name of the backup
     * 
     * @param {boolean} [request.enabled] True if the backup schedule is enabled
     * (must be included in that case), false if the backup schedule should be
     * disabled
     * 
     * @param {string} [request.storageAccountUrl] SAS URL to the container
     * 
     * @param {object} [request.backupSchedule] Schedule for the backup if it is
     * executed periodically
     * 
     * @param {number} [request.backupSchedule.frequencyInterval] How often should
     * be the backup executed (e.g. for weekly backup, this should be set to 7
     * and FrequencyUnit should be set to Day)
     * 
     * @param {string} request.backupSchedule.frequencyUnit How often should be
     * the backup executed (e.g. for weekly backup, this should be set to Day and
     * FrequencyInterval should be set to 7). Possible values include: 'Day',
     * 'Hour'
     * 
     * @param {boolean} [request.backupSchedule.keepAtLeastOneBackup] True if the
     * retention policy should always keep at least one backup in the storage
     * account, regardless how old it is; false otherwise.
     * 
     * @param {number} [request.backupSchedule.retentionPeriodInDays] After how
     * many days backups should be deleted
     * 
     * @param {date} [request.backupSchedule.startTime] When the schedule should
     * start working
     * 
     * @param {date} [request.backupSchedule.lastExecutionTime] The last time when
     * this schedule was triggered
     * 
     * @param {array} [request.databases] Databases included in the backup
     * 
     * @param {string} [request.backupRequestType] Type of the backup. Possible
     * values include: 'Default', 'Clone', 'Relocation'
     * 
     * @param {string} [request.id] Resource Id
     * 
     * @param {string} [request.name] Resource Name
     * 
     * @param {string} [request.kind] Kind of resource
     * 
     * @param {string} request.location Resource Location
     * 
     * @param {string} [request.type] Resource type
     * 
     * @param {object} [request.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateSiteBackupConfiguration(resourceGroupName: string, name: string, request: models.BackupRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupRequest>): void;
    updateSiteBackupConfiguration(resourceGroupName: string, name: string, request: models.BackupRequest, callback: ServiceCallback<models.BackupRequest>): void;

    /**
     * @summary Updates backup configuration of web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} request Information on backup request
     * 
     * @param {string} [request.backupRequestName] Name of the backup
     * 
     * @param {boolean} [request.enabled] True if the backup schedule is enabled
     * (must be included in that case), false if the backup schedule should be
     * disabled
     * 
     * @param {string} [request.storageAccountUrl] SAS URL to the container
     * 
     * @param {object} [request.backupSchedule] Schedule for the backup if it is
     * executed periodically
     * 
     * @param {number} [request.backupSchedule.frequencyInterval] How often should
     * be the backup executed (e.g. for weekly backup, this should be set to 7
     * and FrequencyUnit should be set to Day)
     * 
     * @param {string} request.backupSchedule.frequencyUnit How often should be
     * the backup executed (e.g. for weekly backup, this should be set to Day and
     * FrequencyInterval should be set to 7). Possible values include: 'Day',
     * 'Hour'
     * 
     * @param {boolean} [request.backupSchedule.keepAtLeastOneBackup] True if the
     * retention policy should always keep at least one backup in the storage
     * account, regardless how old it is; false otherwise.
     * 
     * @param {number} [request.backupSchedule.retentionPeriodInDays] After how
     * many days backups should be deleted
     * 
     * @param {date} [request.backupSchedule.startTime] When the schedule should
     * start working
     * 
     * @param {date} [request.backupSchedule.lastExecutionTime] The last time when
     * this schedule was triggered
     * 
     * @param {array} [request.databases] Databases included in the backup
     * 
     * @param {string} [request.backupRequestType] Type of the backup. Possible
     * values include: 'Default', 'Clone', 'Relocation'
     * 
     * @param {string} [request.id] Resource Id
     * 
     * @param {string} [request.name] Resource Name
     * 
     * @param {string} [request.kind] Kind of resource
     * 
     * @param {string} request.location Resource Location
     * 
     * @param {string} [request.type] Resource type
     * 
     * @param {object} [request.tags] Resource tags
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateSiteBackupConfigurationSlot(resourceGroupName: string, name: string, request: models.BackupRequest, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupRequest>): void;
    updateSiteBackupConfigurationSlot(resourceGroupName: string, name: string, request: models.BackupRequest, slot: string, callback: ServiceCallback<models.BackupRequest>): void;

    /**
     * @summary Creates web app backup
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} request Information on backup request
     * 
     * @param {string} [request.backupRequestName] Name of the backup
     * 
     * @param {boolean} [request.enabled] True if the backup schedule is enabled
     * (must be included in that case), false if the backup schedule should be
     * disabled
     * 
     * @param {string} [request.storageAccountUrl] SAS URL to the container
     * 
     * @param {object} [request.backupSchedule] Schedule for the backup if it is
     * executed periodically
     * 
     * @param {number} [request.backupSchedule.frequencyInterval] How often should
     * be the backup executed (e.g. for weekly backup, this should be set to 7
     * and FrequencyUnit should be set to Day)
     * 
     * @param {string} request.backupSchedule.frequencyUnit How often should be
     * the backup executed (e.g. for weekly backup, this should be set to Day and
     * FrequencyInterval should be set to 7). Possible values include: 'Day',
     * 'Hour'
     * 
     * @param {boolean} [request.backupSchedule.keepAtLeastOneBackup] True if the
     * retention policy should always keep at least one backup in the storage
     * account, regardless how old it is; false otherwise.
     * 
     * @param {number} [request.backupSchedule.retentionPeriodInDays] After how
     * many days backups should be deleted
     * 
     * @param {date} [request.backupSchedule.startTime] When the schedule should
     * start working
     * 
     * @param {date} [request.backupSchedule.lastExecutionTime] The last time when
     * this schedule was triggered
     * 
     * @param {array} [request.databases] Databases included in the backup
     * 
     * @param {string} [request.backupRequestType] Type of the backup. Possible
     * values include: 'Default', 'Clone', 'Relocation'
     * 
     * @param {string} [request.id] Resource Id
     * 
     * @param {string} [request.name] Resource Name
     * 
     * @param {string} [request.kind] Kind of resource
     * 
     * @param {string} request.location Resource Location
     * 
     * @param {string} [request.type] Resource type
     * 
     * @param {object} [request.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    backupSite(resourceGroupName: string, name: string, request: models.BackupRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupItem>): void;
    backupSite(resourceGroupName: string, name: string, request: models.BackupRequest, callback: ServiceCallback<models.BackupItem>): void;

    /**
     * @summary Creates web app backup
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} request Information on backup request
     * 
     * @param {string} [request.backupRequestName] Name of the backup
     * 
     * @param {boolean} [request.enabled] True if the backup schedule is enabled
     * (must be included in that case), false if the backup schedule should be
     * disabled
     * 
     * @param {string} [request.storageAccountUrl] SAS URL to the container
     * 
     * @param {object} [request.backupSchedule] Schedule for the backup if it is
     * executed periodically
     * 
     * @param {number} [request.backupSchedule.frequencyInterval] How often should
     * be the backup executed (e.g. for weekly backup, this should be set to 7
     * and FrequencyUnit should be set to Day)
     * 
     * @param {string} request.backupSchedule.frequencyUnit How often should be
     * the backup executed (e.g. for weekly backup, this should be set to Day and
     * FrequencyInterval should be set to 7). Possible values include: 'Day',
     * 'Hour'
     * 
     * @param {boolean} [request.backupSchedule.keepAtLeastOneBackup] True if the
     * retention policy should always keep at least one backup in the storage
     * account, regardless how old it is; false otherwise.
     * 
     * @param {number} [request.backupSchedule.retentionPeriodInDays] After how
     * many days backups should be deleted
     * 
     * @param {date} [request.backupSchedule.startTime] When the schedule should
     * start working
     * 
     * @param {date} [request.backupSchedule.lastExecutionTime] The last time when
     * this schedule was triggered
     * 
     * @param {array} [request.databases] Databases included in the backup
     * 
     * @param {string} [request.backupRequestType] Type of the backup. Possible
     * values include: 'Default', 'Clone', 'Relocation'
     * 
     * @param {string} [request.id] Resource Id
     * 
     * @param {string} [request.name] Resource Name
     * 
     * @param {string} [request.kind] Kind of resource
     * 
     * @param {string} request.location Resource Location
     * 
     * @param {string} [request.type] Resource type
     * 
     * @param {object} [request.tags] Resource tags
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    backupSiteSlot(resourceGroupName: string, name: string, request: models.BackupRequest, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupItem>): void;
    backupSiteSlot(resourceGroupName: string, name: string, request: models.BackupRequest, slot: string, callback: ServiceCallback<models.BackupItem>): void;

    /**
     * @summary Discovers existing web app backups that can be restored
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} request Information on restore request
     * 
     * @param {string} [request.storageAccountUrl] SAS URL to the container
     * 
     * @param {string} [request.blobName] Name of a blob which contains the backup
     * 
     * @param {boolean} [request.overwrite] True if the restore operation can
     * overwrite target site. "True" needed if trying to restore over an existing
     * site.
     * 
     * @param {string} [request.siteName] Name of a site (Web App)
     * 
     * @param {array} [request.databases] Collection of databses which should be
     * restored. This list has to match the list of databases included in the
     * backup.
     * 
     * @param {boolean} [request.ignoreConflictingHostNames] Changes a logic when
     * restoring a site with custom domains. If "true", custom domains are
     * removed automatically. If "false", custom domains are added to
     * the site object when it is being restored, but that might fail
     * due to conflicts during the operation.
     * 
     * @param {string} [request.operationType] Operation type. Possible values
     * include: 'Default', 'Clone', 'Relocation'
     * 
     * @param {boolean} [request.adjustConnectionStrings] Gets or sets a flag
     * showing if SiteConfig.ConnectionStrings should be set in new site
     * 
     * @param {string} [request.hostingEnvironment] App Service Environment name,
     * if needed (only when restoring a site to an App Service Environment)
     * 
     * @param {string} [request.id] Resource Id
     * 
     * @param {string} [request.name] Resource Name
     * 
     * @param {string} [request.kind] Kind of resource
     * 
     * @param {string} request.location Resource Location
     * 
     * @param {string} [request.type] Resource type
     * 
     * @param {object} [request.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    discoverSiteRestore(resourceGroupName: string, name: string, request: models.RestoreRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RestoreRequest>): void;
    discoverSiteRestore(resourceGroupName: string, name: string, request: models.RestoreRequest, callback: ServiceCallback<models.RestoreRequest>): void;

    /**
     * @summary Discovers existing web app backups that can be restored
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} request Information on restore request
     * 
     * @param {string} [request.storageAccountUrl] SAS URL to the container
     * 
     * @param {string} [request.blobName] Name of a blob which contains the backup
     * 
     * @param {boolean} [request.overwrite] True if the restore operation can
     * overwrite target site. "True" needed if trying to restore over an existing
     * site.
     * 
     * @param {string} [request.siteName] Name of a site (Web App)
     * 
     * @param {array} [request.databases] Collection of databses which should be
     * restored. This list has to match the list of databases included in the
     * backup.
     * 
     * @param {boolean} [request.ignoreConflictingHostNames] Changes a logic when
     * restoring a site with custom domains. If "true", custom domains are
     * removed automatically. If "false", custom domains are added to
     * the site object when it is being restored, but that might fail
     * due to conflicts during the operation.
     * 
     * @param {string} [request.operationType] Operation type. Possible values
     * include: 'Default', 'Clone', 'Relocation'
     * 
     * @param {boolean} [request.adjustConnectionStrings] Gets or sets a flag
     * showing if SiteConfig.ConnectionStrings should be set in new site
     * 
     * @param {string} [request.hostingEnvironment] App Service Environment name,
     * if needed (only when restoring a site to an App Service Environment)
     * 
     * @param {string} [request.id] Resource Id
     * 
     * @param {string} [request.name] Resource Name
     * 
     * @param {string} [request.kind] Kind of resource
     * 
     * @param {string} request.location Resource Location
     * 
     * @param {string} [request.type] Resource type
     * 
     * @param {object} [request.tags] Resource tags
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    discoverSiteRestoreSlot(resourceGroupName: string, name: string, request: models.RestoreRequest, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RestoreRequest>): void;
    discoverSiteRestoreSlot(resourceGroupName: string, name: string, request: models.RestoreRequest, slot: string, callback: ServiceCallback<models.RestoreRequest>): void;

    /**
     * @summary Lists all available backups for web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listSiteBackups(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupItemCollection>): void;
    listSiteBackups(resourceGroupName: string, name: string, callback: ServiceCallback<models.BackupItemCollection>): void;

    /**
     * @summary Lists all available backups for web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listSiteBackupsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupItemCollection>): void;
    listSiteBackupsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.BackupItemCollection>): void;

    /**
     * @summary Gets status of a web app backup that may be in progress.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} backupId Id of backup
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteBackupStatus(resourceGroupName: string, name: string, backupId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupItem>): void;
    getSiteBackupStatus(resourceGroupName: string, name: string, backupId: string, callback: ServiceCallback<models.BackupItem>): void;

    /**
     * @summary Deletes a backup from Azure Storage
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} backupId Id of backup
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteBackup(resourceGroupName: string, name: string, backupId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupItem>): void;
    deleteBackup(resourceGroupName: string, name: string, backupId: string, callback: ServiceCallback<models.BackupItem>): void;

    /**
     * @summary Gets status of a web app backup that may be in progress.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} backupId Id of backup
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteBackupStatusSlot(resourceGroupName: string, name: string, backupId: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupItem>): void;
    getSiteBackupStatusSlot(resourceGroupName: string, name: string, backupId: string, slot: string, callback: ServiceCallback<models.BackupItem>): void;

    /**
     * @summary Deletes a backup from Azure Storage
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} backupId Id of backup
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteBackupSlot(resourceGroupName: string, name: string, backupId: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupItem>): void;
    deleteBackupSlot(resourceGroupName: string, name: string, backupId: string, slot: string, callback: ServiceCallback<models.BackupItem>): void;

    /**
     * @summary Gets status of a web app backup that may be in progress, including
     * secrets associated with the backup, such as the Azure Storage SAS URL.
     * Also can be used to update the SAS URL for the backup if a new URL is
     * passed in the request body.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} backupId Id of backup
     * 
     * @param {object} request Information on backup request
     * 
     * @param {string} [request.backupRequestName] Name of the backup
     * 
     * @param {boolean} [request.enabled] True if the backup schedule is enabled
     * (must be included in that case), false if the backup schedule should be
     * disabled
     * 
     * @param {string} [request.storageAccountUrl] SAS URL to the container
     * 
     * @param {object} [request.backupSchedule] Schedule for the backup if it is
     * executed periodically
     * 
     * @param {number} [request.backupSchedule.frequencyInterval] How often should
     * be the backup executed (e.g. for weekly backup, this should be set to 7
     * and FrequencyUnit should be set to Day)
     * 
     * @param {string} request.backupSchedule.frequencyUnit How often should be
     * the backup executed (e.g. for weekly backup, this should be set to Day and
     * FrequencyInterval should be set to 7). Possible values include: 'Day',
     * 'Hour'
     * 
     * @param {boolean} [request.backupSchedule.keepAtLeastOneBackup] True if the
     * retention policy should always keep at least one backup in the storage
     * account, regardless how old it is; false otherwise.
     * 
     * @param {number} [request.backupSchedule.retentionPeriodInDays] After how
     * many days backups should be deleted
     * 
     * @param {date} [request.backupSchedule.startTime] When the schedule should
     * start working
     * 
     * @param {date} [request.backupSchedule.lastExecutionTime] The last time when
     * this schedule was triggered
     * 
     * @param {array} [request.databases] Databases included in the backup
     * 
     * @param {string} [request.backupRequestType] Type of the backup. Possible
     * values include: 'Default', 'Clone', 'Relocation'
     * 
     * @param {string} [request.id] Resource Id
     * 
     * @param {string} [request.name] Resource Name
     * 
     * @param {string} [request.kind] Kind of resource
     * 
     * @param {string} request.location Resource Location
     * 
     * @param {string} [request.type] Resource type
     * 
     * @param {object} [request.tags] Resource tags
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteBackupStatusSecretsSlot(resourceGroupName: string, name: string, backupId: string, request: models.BackupRequest, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupItem>): void;
    getSiteBackupStatusSecretsSlot(resourceGroupName: string, name: string, backupId: string, request: models.BackupRequest, slot: string, callback: ServiceCallback<models.BackupItem>): void;

    /**
     * @summary Gets status of a web app backup that may be in progress, including
     * secrets associated with the backup, such as the Azure Storage SAS URL.
     * Also can be used to update the SAS URL for the backup if a new URL is
     * passed in the request body.
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} backupId Id of backup
     * 
     * @param {object} request Information on backup request
     * 
     * @param {string} [request.backupRequestName] Name of the backup
     * 
     * @param {boolean} [request.enabled] True if the backup schedule is enabled
     * (must be included in that case), false if the backup schedule should be
     * disabled
     * 
     * @param {string} [request.storageAccountUrl] SAS URL to the container
     * 
     * @param {object} [request.backupSchedule] Schedule for the backup if it is
     * executed periodically
     * 
     * @param {number} [request.backupSchedule.frequencyInterval] How often should
     * be the backup executed (e.g. for weekly backup, this should be set to 7
     * and FrequencyUnit should be set to Day)
     * 
     * @param {string} request.backupSchedule.frequencyUnit How often should be
     * the backup executed (e.g. for weekly backup, this should be set to Day and
     * FrequencyInterval should be set to 7). Possible values include: 'Day',
     * 'Hour'
     * 
     * @param {boolean} [request.backupSchedule.keepAtLeastOneBackup] True if the
     * retention policy should always keep at least one backup in the storage
     * account, regardless how old it is; false otherwise.
     * 
     * @param {number} [request.backupSchedule.retentionPeriodInDays] After how
     * many days backups should be deleted
     * 
     * @param {date} [request.backupSchedule.startTime] When the schedule should
     * start working
     * 
     * @param {date} [request.backupSchedule.lastExecutionTime] The last time when
     * this schedule was triggered
     * 
     * @param {array} [request.databases] Databases included in the backup
     * 
     * @param {string} [request.backupRequestType] Type of the backup. Possible
     * values include: 'Default', 'Clone', 'Relocation'
     * 
     * @param {string} [request.id] Resource Id
     * 
     * @param {string} [request.name] Resource Name
     * 
     * @param {string} [request.kind] Kind of resource
     * 
     * @param {string} request.location Resource Location
     * 
     * @param {string} [request.type] Resource type
     * 
     * @param {object} [request.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteBackupStatusSecrets(resourceGroupName: string, name: string, backupId: string, request: models.BackupRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupItem>): void;
    getSiteBackupStatusSecrets(resourceGroupName: string, name: string, backupId: string, request: models.BackupRequest, callback: ServiceCallback<models.BackupItem>): void;

    /**
     * @summary Restores a web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} backupId Id of backup to restore
     * 
     * @param {object} request Information on restore request
     * 
     * @param {string} [request.storageAccountUrl] SAS URL to the container
     * 
     * @param {string} [request.blobName] Name of a blob which contains the backup
     * 
     * @param {boolean} [request.overwrite] True if the restore operation can
     * overwrite target site. "True" needed if trying to restore over an existing
     * site.
     * 
     * @param {string} [request.siteName] Name of a site (Web App)
     * 
     * @param {array} [request.databases] Collection of databses which should be
     * restored. This list has to match the list of databases included in the
     * backup.
     * 
     * @param {boolean} [request.ignoreConflictingHostNames] Changes a logic when
     * restoring a site with custom domains. If "true", custom domains are
     * removed automatically. If "false", custom domains are added to
     * the site object when it is being restored, but that might fail
     * due to conflicts during the operation.
     * 
     * @param {string} [request.operationType] Operation type. Possible values
     * include: 'Default', 'Clone', 'Relocation'
     * 
     * @param {boolean} [request.adjustConnectionStrings] Gets or sets a flag
     * showing if SiteConfig.ConnectionStrings should be set in new site
     * 
     * @param {string} [request.hostingEnvironment] App Service Environment name,
     * if needed (only when restoring a site to an App Service Environment)
     * 
     * @param {string} [request.id] Resource Id
     * 
     * @param {string} [request.name] Resource Name
     * 
     * @param {string} [request.kind] Kind of resource
     * 
     * @param {string} request.location Resource Location
     * 
     * @param {string} [request.type] Resource type
     * 
     * @param {object} [request.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    restoreSite(resourceGroupName: string, name: string, backupId: string, request: models.RestoreRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RestoreResponse>): void;
    restoreSite(resourceGroupName: string, name: string, backupId: string, request: models.RestoreRequest, callback: ServiceCallback<models.RestoreResponse>): void;

    /**
     * @summary Restores a web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} backupId Id of backup to restore
     * 
     * @param {object} request Information on restore request
     * 
     * @param {string} [request.storageAccountUrl] SAS URL to the container
     * 
     * @param {string} [request.blobName] Name of a blob which contains the backup
     * 
     * @param {boolean} [request.overwrite] True if the restore operation can
     * overwrite target site. "True" needed if trying to restore over an existing
     * site.
     * 
     * @param {string} [request.siteName] Name of a site (Web App)
     * 
     * @param {array} [request.databases] Collection of databses which should be
     * restored. This list has to match the list of databases included in the
     * backup.
     * 
     * @param {boolean} [request.ignoreConflictingHostNames] Changes a logic when
     * restoring a site with custom domains. If "true", custom domains are
     * removed automatically. If "false", custom domains are added to
     * the site object when it is being restored, but that might fail
     * due to conflicts during the operation.
     * 
     * @param {string} [request.operationType] Operation type. Possible values
     * include: 'Default', 'Clone', 'Relocation'
     * 
     * @param {boolean} [request.adjustConnectionStrings] Gets or sets a flag
     * showing if SiteConfig.ConnectionStrings should be set in new site
     * 
     * @param {string} [request.hostingEnvironment] App Service Environment name,
     * if needed (only when restoring a site to an App Service Environment)
     * 
     * @param {string} [request.id] Resource Id
     * 
     * @param {string} [request.name] Resource Name
     * 
     * @param {string} [request.kind] Kind of resource
     * 
     * @param {string} request.location Resource Location
     * 
     * @param {string} [request.type] Resource type
     * 
     * @param {object} [request.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginRestoreSite(resourceGroupName: string, name: string, backupId: string, request: models.RestoreRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RestoreResponse>): void;
    beginRestoreSite(resourceGroupName: string, name: string, backupId: string, request: models.RestoreRequest, callback: ServiceCallback<models.RestoreResponse>): void;

    /**
     * @summary Restores a web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} backupId Id of backup to restore
     * 
     * @param {object} request Information on restore request
     * 
     * @param {string} [request.storageAccountUrl] SAS URL to the container
     * 
     * @param {string} [request.blobName] Name of a blob which contains the backup
     * 
     * @param {boolean} [request.overwrite] True if the restore operation can
     * overwrite target site. "True" needed if trying to restore over an existing
     * site.
     * 
     * @param {string} [request.siteName] Name of a site (Web App)
     * 
     * @param {array} [request.databases] Collection of databses which should be
     * restored. This list has to match the list of databases included in the
     * backup.
     * 
     * @param {boolean} [request.ignoreConflictingHostNames] Changes a logic when
     * restoring a site with custom domains. If "true", custom domains are
     * removed automatically. If "false", custom domains are added to
     * the site object when it is being restored, but that might fail
     * due to conflicts during the operation.
     * 
     * @param {string} [request.operationType] Operation type. Possible values
     * include: 'Default', 'Clone', 'Relocation'
     * 
     * @param {boolean} [request.adjustConnectionStrings] Gets or sets a flag
     * showing if SiteConfig.ConnectionStrings should be set in new site
     * 
     * @param {string} [request.hostingEnvironment] App Service Environment name,
     * if needed (only when restoring a site to an App Service Environment)
     * 
     * @param {string} [request.id] Resource Id
     * 
     * @param {string} [request.name] Resource Name
     * 
     * @param {string} [request.kind] Kind of resource
     * 
     * @param {string} request.location Resource Location
     * 
     * @param {string} [request.type] Resource type
     * 
     * @param {object} [request.tags] Resource tags
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    restoreSiteSlot(resourceGroupName: string, name: string, backupId: string, request: models.RestoreRequest, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RestoreResponse>): void;
    restoreSiteSlot(resourceGroupName: string, name: string, backupId: string, request: models.RestoreRequest, slot: string, callback: ServiceCallback<models.RestoreResponse>): void;

    /**
     * @summary Restores a web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} backupId Id of backup to restore
     * 
     * @param {object} request Information on restore request
     * 
     * @param {string} [request.storageAccountUrl] SAS URL to the container
     * 
     * @param {string} [request.blobName] Name of a blob which contains the backup
     * 
     * @param {boolean} [request.overwrite] True if the restore operation can
     * overwrite target site. "True" needed if trying to restore over an existing
     * site.
     * 
     * @param {string} [request.siteName] Name of a site (Web App)
     * 
     * @param {array} [request.databases] Collection of databses which should be
     * restored. This list has to match the list of databases included in the
     * backup.
     * 
     * @param {boolean} [request.ignoreConflictingHostNames] Changes a logic when
     * restoring a site with custom domains. If "true", custom domains are
     * removed automatically. If "false", custom domains are added to
     * the site object when it is being restored, but that might fail
     * due to conflicts during the operation.
     * 
     * @param {string} [request.operationType] Operation type. Possible values
     * include: 'Default', 'Clone', 'Relocation'
     * 
     * @param {boolean} [request.adjustConnectionStrings] Gets or sets a flag
     * showing if SiteConfig.ConnectionStrings should be set in new site
     * 
     * @param {string} [request.hostingEnvironment] App Service Environment name,
     * if needed (only when restoring a site to an App Service Environment)
     * 
     * @param {string} [request.id] Resource Id
     * 
     * @param {string} [request.name] Resource Name
     * 
     * @param {string} [request.kind] Kind of resource
     * 
     * @param {string} request.location Resource Location
     * 
     * @param {string} [request.type] Resource type
     * 
     * @param {object} [request.tags] Resource tags
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginRestoreSiteSlot(resourceGroupName: string, name: string, backupId: string, request: models.RestoreRequest, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RestoreResponse>): void;
    beginRestoreSiteSlot(resourceGroupName: string, name: string, backupId: string, request: models.RestoreRequest, slot: string, callback: ServiceCallback<models.RestoreResponse>): void;

    /**
     * @summary Gets the quota usage numbers for web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.filter] Return only usages specified in the
     * filter. Filter is specified by using OData syntax. Example:
     * $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime
     * eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and
     * timeGrain eq duration'[Hour|Minute|Day]'.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteUsages(resourceGroupName: string, name: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CsmUsageQuotaCollection>): void;
    getSiteUsages(resourceGroupName: string, name: string, callback: ServiceCallback<models.CsmUsageQuotaCollection>): void;

    /**
     * @summary Gets the quota usage numbers for web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.filter] Return only usages specified in the
     * filter. Filter is specified by using OData syntax. Example:
     * $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime
     * eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and
     * timeGrain eq duration'[Hour|Minute|Day]'.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteUsagesSlot(resourceGroupName: string, name: string, slot: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CsmUsageQuotaCollection>): void;
    getSiteUsagesSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.CsmUsageQuotaCollection>): void;

    /**
     * @summary Gets metrics for web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.details] If true, metric details are included in
     * response
     * 
     * @param {string} [options.filter] Return only usages/metrics specified in
     * the filter. Filter conforms to odata syntax. Example: $filter=(name.value
     * eq 'Metric1' or name.value eq 'Metric2') and startTime eq
     * '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain
     * eq duration'[Hour|Minute|Day]'.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteMetrics(resourceGroupName: string, name: string, options: { details? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricCollection>): void;
    getSiteMetrics(resourceGroupName: string, name: string, callback: ServiceCallback<models.ResourceMetricCollection>): void;

    /**
     * @summary Gets metrics for web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.details] If true, metric details are included in
     * response
     * 
     * @param {string} [options.filter] Return only usages/metrics specified in
     * the filter. Filter conforms to odata syntax. Example: $filter=(name.value
     * eq 'Metric1' or name.value eq 'Metric2') and startTime eq
     * '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain
     * eq duration'[Hour|Minute|Day]'.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteMetricsSlot(resourceGroupName: string, name: string, slot: string, options: { details? : boolean, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricCollection>): void;
    getSiteMetricsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.ResourceMetricCollection>): void;

    /**
     * @summary Gets metric definitions for web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteMetricDefinitionsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricDefinitionCollection>): void;
    getSiteMetricDefinitionsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.MetricDefinitionCollection>): void;

    /**
     * @summary Gets metric definitions for web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteMetricDefinitions(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricDefinitionCollection>): void;
    getSiteMetricDefinitions(resourceGroupName: string, name: string, callback: ServiceCallback<models.MetricDefinitionCollection>): void;

    /**
     * @summary Gets the publishing profile for web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.format] Name of the format. Valid values are:
     * FileZilla3
     * WebDeploy -- default
     * Ftp
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listSitePublishingProfileXml(resourceGroupName: string, name: string, options: { format? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<stream.Readable>): void;
    listSitePublishingProfileXml(resourceGroupName: string, name: string, callback: ServiceCallback<stream.Readable>): void;

    /**
     * @summary Gets the publishing profile for web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.format] Name of the format. Valid values are:
     * FileZilla3
     * WebDeploy -- default
     * Ftp
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listSitePublishingProfileXmlSlot(resourceGroupName: string, name: string, slot: string, options: { format? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<stream.Readable>): void;
    listSitePublishingProfileXmlSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<stream.Readable>): void;

    /**
     * @summary Restarts web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.softRestart] Soft restart applies the
     * configuration settings and restarts the app if necessary. Hard restart
     * always restarts and reprovisions the app
     * 
     * @param {boolean} [options.synchronous] If true then the API will block
     * until the app has been restarted
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    restartSiteSlot(resourceGroupName: string, name: string, slot: string, options: { softRestart? : boolean, synchronous? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    restartSiteSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Restarts web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.softRestart] Soft restart applies the
     * configuration settings and restarts the app if necessary. Hard restart
     * always restarts and reprovisions the app
     * 
     * @param {boolean} [options.synchronous] If true then the API will block
     * until the app has been restarted
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    restartSite(resourceGroupName: string, name: string, options: { softRestart? : boolean, synchronous? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    restartSite(resourceGroupName: string, name: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Starts web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    startSite(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    startSite(resourceGroupName: string, name: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Starts web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    startSiteSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    startSiteSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Stops web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    stopSite(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    stopSite(resourceGroupName: string, name: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Stops web app
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    stopSiteSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    stopSiteSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} resourceGroupName
     * 
     * @param {string} name
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    syncSiteRepository(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    syncSiteRepository(resourceGroupName: string, name: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} resourceGroupName
     * 
     * @param {string} name
     * 
     * @param {string} slot
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    syncSiteRepositorySlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    syncSiteRepositorySlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Generates new random app publishing password
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {string} slot Name of web app slot. If not specified then will
     * default to production slot.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    generateNewSitePublishingPasswordSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    generateNewSitePublishingPasswordSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Generates new random app publishing password
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} name Name of web app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    generateNewSitePublishingPassword(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    generateNewSitePublishingPassword(resourceGroupName: string, name: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Retrieves a Biztalk Hybrid Connection identified by its entity
     * name.
     *
     * @param {string} resourceGroupName The resource group name
     * 
     * @param {string} name The name of the web app
     * 
     * @param {string} entityName The name by which the Hybrid Connection is
     * identified
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RelayServiceConnectionEntity>): void;
    getSiteRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, callback: ServiceCallback<models.RelayServiceConnectionEntity>): void;

    /**
     * @summary Creates a new association to a Biztalk Hybrid Connection, or
     * updates an existing one.
     *
     * @param {string} resourceGroupName The resource group name
     * 
     * @param {string} name The name of the web app
     * 
     * @param {string} entityName The name by which the Hybrid Connection is
     * identified
     * 
     * @param {object} connectionEnvelope The details of the Hybrid Connection
     * 
     * @param {string} [connectionEnvelope.entityName]
     * 
     * @param {string} [connectionEnvelope.entityConnectionString]
     * 
     * @param {string} [connectionEnvelope.resourceType]
     * 
     * @param {string} [connectionEnvelope.resourceConnectionString]
     * 
     * @param {string} [connectionEnvelope.hostname]
     * 
     * @param {number} [connectionEnvelope.port]
     * 
     * @param {string} [connectionEnvelope.biztalkUri]
     * 
     * @param {string} [connectionEnvelope.id] Resource Id
     * 
     * @param {string} [connectionEnvelope.name] Resource Name
     * 
     * @param {string} [connectionEnvelope.kind] Kind of resource
     * 
     * @param {string} connectionEnvelope.location Resource Location
     * 
     * @param {string} [connectionEnvelope.type] Resource type
     * 
     * @param {object} [connectionEnvelope.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateSiteRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: models.RelayServiceConnectionEntity, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RelayServiceConnectionEntity>): void;
    createOrUpdateSiteRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: models.RelayServiceConnectionEntity, callback: ServiceCallback<models.RelayServiceConnectionEntity>): void;

    /**
     * @summary Removes the association to a Biztalk Hybrid Connection, identified
     * by its entity name.
     *
     * @param {string} resourceGroupName The resource group name
     * 
     * @param {string} name The name of the web app
     * 
     * @param {string} entityName The name by which the Hybrid Connection is
     * identified
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteSiteRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteSiteRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Creates a new association to a Biztalk Hybrid Connection, or
     * updates an existing one.
     *
     * @param {string} resourceGroupName The resource group name
     * 
     * @param {string} name The name of the web app
     * 
     * @param {string} entityName The name by which the Hybrid Connection is
     * identified
     * 
     * @param {object} connectionEnvelope The details of the Hybrid Connection
     * 
     * @param {string} [connectionEnvelope.entityName]
     * 
     * @param {string} [connectionEnvelope.entityConnectionString]
     * 
     * @param {string} [connectionEnvelope.resourceType]
     * 
     * @param {string} [connectionEnvelope.resourceConnectionString]
     * 
     * @param {string} [connectionEnvelope.hostname]
     * 
     * @param {number} [connectionEnvelope.port]
     * 
     * @param {string} [connectionEnvelope.biztalkUri]
     * 
     * @param {string} [connectionEnvelope.id] Resource Id
     * 
     * @param {string} [connectionEnvelope.name] Resource Name
     * 
     * @param {string} [connectionEnvelope.kind] Kind of resource
     * 
     * @param {string} connectionEnvelope.location Resource Location
     * 
     * @param {string} [connectionEnvelope.type] Resource type
     * 
     * @param {object} [connectionEnvelope.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateSiteRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: models.RelayServiceConnectionEntity, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RelayServiceConnectionEntity>): void;
    updateSiteRelayServiceConnection(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: models.RelayServiceConnectionEntity, callback: ServiceCallback<models.RelayServiceConnectionEntity>): void;

    /**
     * @summary Retrieves a Biztalk Hybrid Connection identified by its entity
     * name.
     *
     * @param {string} resourceGroupName The resource group name
     * 
     * @param {string} name The name of the web app
     * 
     * @param {string} entityName The name by which the Hybrid Connection is
     * identified
     * 
     * @param {string} slot The name of the slot for the web app.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RelayServiceConnectionEntity>): void;
    getSiteRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, slot: string, callback: ServiceCallback<models.RelayServiceConnectionEntity>): void;

    /**
     * @summary Creates a new association to a Biztalk Hybrid Connection, or
     * updates an existing one.
     *
     * @param {string} resourceGroupName The resource group name
     * 
     * @param {string} name The name of the web app
     * 
     * @param {string} entityName The name by which the Hybrid Connection is
     * identified
     * 
     * @param {object} connectionEnvelope The details of the Hybrid Connection
     * 
     * @param {string} [connectionEnvelope.entityName]
     * 
     * @param {string} [connectionEnvelope.entityConnectionString]
     * 
     * @param {string} [connectionEnvelope.resourceType]
     * 
     * @param {string} [connectionEnvelope.resourceConnectionString]
     * 
     * @param {string} [connectionEnvelope.hostname]
     * 
     * @param {number} [connectionEnvelope.port]
     * 
     * @param {string} [connectionEnvelope.biztalkUri]
     * 
     * @param {string} [connectionEnvelope.id] Resource Id
     * 
     * @param {string} [connectionEnvelope.name] Resource Name
     * 
     * @param {string} [connectionEnvelope.kind] Kind of resource
     * 
     * @param {string} connectionEnvelope.location Resource Location
     * 
     * @param {string} [connectionEnvelope.type] Resource type
     * 
     * @param {object} [connectionEnvelope.tags] Resource tags
     * 
     * @param {string} slot The name of the slot for the web app.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateSiteRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: models.RelayServiceConnectionEntity, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RelayServiceConnectionEntity>): void;
    createOrUpdateSiteRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: models.RelayServiceConnectionEntity, slot: string, callback: ServiceCallback<models.RelayServiceConnectionEntity>): void;

    /**
     * @summary Removes the association to a Biztalk Hybrid Connection, identified
     * by its entity name.
     *
     * @param {string} resourceGroupName The resource group name
     * 
     * @param {string} name The name of the web app
     * 
     * @param {string} entityName The name by which the Hybrid Connection is
     * identified
     * 
     * @param {string} slot The name of the slot for the web app.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteSiteRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteSiteRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, slot: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Creates a new association to a Biztalk Hybrid Connection, or
     * updates an existing one.
     *
     * @param {string} resourceGroupName The resource group name
     * 
     * @param {string} name The name of the web app
     * 
     * @param {string} entityName The name by which the Hybrid Connection is
     * identified
     * 
     * @param {object} connectionEnvelope The details of the Hybrid Connection
     * 
     * @param {string} [connectionEnvelope.entityName]
     * 
     * @param {string} [connectionEnvelope.entityConnectionString]
     * 
     * @param {string} [connectionEnvelope.resourceType]
     * 
     * @param {string} [connectionEnvelope.resourceConnectionString]
     * 
     * @param {string} [connectionEnvelope.hostname]
     * 
     * @param {number} [connectionEnvelope.port]
     * 
     * @param {string} [connectionEnvelope.biztalkUri]
     * 
     * @param {string} [connectionEnvelope.id] Resource Id
     * 
     * @param {string} [connectionEnvelope.name] Resource Name
     * 
     * @param {string} [connectionEnvelope.kind] Kind of resource
     * 
     * @param {string} connectionEnvelope.location Resource Location
     * 
     * @param {string} [connectionEnvelope.type] Resource type
     * 
     * @param {object} [connectionEnvelope.tags] Resource tags
     * 
     * @param {string} slot The name of the slot for the web app.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateSiteRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: models.RelayServiceConnectionEntity, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RelayServiceConnectionEntity>): void;
    updateSiteRelayServiceConnectionSlot(resourceGroupName: string, name: string, entityName: string, connectionEnvelope: models.RelayServiceConnectionEntity, slot: string, callback: ServiceCallback<models.RelayServiceConnectionEntity>): void;

    /**
     * @summary Retrieves all Biztalk Hybrid Connections associated with this web
     * app.
     *
     * @param {string} resourceGroupName The resource group name
     * 
     * @param {string} name The name of the web app
     * 
     * @param {string} slot The name of the slot for the web app.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listSiteRelayServiceConnectionsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RelayServiceConnectionEntity>): void;
    listSiteRelayServiceConnectionsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.RelayServiceConnectionEntity>): void;

    /**
     * @summary Retrieves all Biztalk Hybrid Connections associated with this web
     * app.
     *
     * @param {string} resourceGroupName The resource group name
     * 
     * @param {string} name The name of the web app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listSiteRelayServiceConnections(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RelayServiceConnectionEntity>): void;
    listSiteRelayServiceConnections(resourceGroupName: string, name: string, callback: ServiceCallback<models.RelayServiceConnectionEntity>): void;

    /**
     * @summary Retrieves a Virtual Network connection gateway associated with
     * this web app and virtual network.
     *
     * @param {string} resourceGroupName The resource group name
     * 
     * @param {string} name The name of the web app
     * 
     * @param {string} vnetName The name of the Virtual Network
     * 
     * @param {string} gatewayName The name of the gateway. The only gateway that
     * exists presently is "primary"
     * 
     * @param {string} slot The name of the slot for this web app.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteVnetGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getSiteVnetGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, slot: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Updates the Virtual Network Gateway.
     *
     * @param {string} resourceGroupName The resource group name
     * 
     * @param {string} name The name of the web app
     * 
     * @param {string} vnetName The name of the Virtual Network
     * 
     * @param {string} gatewayName The name of the gateway. The only gateway that
     * exists presently is "primary"
     * 
     * @param {object} connectionEnvelope The properties to update this gateway
     * with.
     * 
     * @param {string} [connectionEnvelope.vnetName] The VNET name.
     * 
     * @param {string} [connectionEnvelope.vpnPackageUri] The URI where the Vpn
     * package can be downloaded
     * 
     * @param {string} [connectionEnvelope.id] Resource Id
     * 
     * @param {string} [connectionEnvelope.name] Resource Name
     * 
     * @param {string} [connectionEnvelope.kind] Kind of resource
     * 
     * @param {string} connectionEnvelope.location Resource Location
     * 
     * @param {string} [connectionEnvelope.type] Resource type
     * 
     * @param {object} [connectionEnvelope.tags] Resource tags
     * 
     * @param {string} slot The name of the slot for this web app.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateSiteVNETConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: models.VnetGateway, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetGateway>): void;
    createOrUpdateSiteVNETConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: models.VnetGateway, slot: string, callback: ServiceCallback<models.VnetGateway>): void;

    /**
     * @summary Updates the Virtual Network Gateway.
     *
     * @param {string} resourceGroupName The resource group name
     * 
     * @param {string} name The name of the web app
     * 
     * @param {string} vnetName The name of the Virtual Network
     * 
     * @param {string} gatewayName The name of the gateway. The only gateway that
     * exists presently is "primary"
     * 
     * @param {object} connectionEnvelope The properties to update this gateway
     * with.
     * 
     * @param {string} [connectionEnvelope.vnetName] The VNET name.
     * 
     * @param {string} [connectionEnvelope.vpnPackageUri] The URI where the Vpn
     * package can be downloaded
     * 
     * @param {string} [connectionEnvelope.id] Resource Id
     * 
     * @param {string} [connectionEnvelope.name] Resource Name
     * 
     * @param {string} [connectionEnvelope.kind] Kind of resource
     * 
     * @param {string} connectionEnvelope.location Resource Location
     * 
     * @param {string} [connectionEnvelope.type] Resource type
     * 
     * @param {object} [connectionEnvelope.tags] Resource tags
     * 
     * @param {string} slot The name of the slot for this web app.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateSiteVNETConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: models.VnetGateway, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetGateway>): void;
    updateSiteVNETConnectionGatewaySlot(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: models.VnetGateway, slot: string, callback: ServiceCallback<models.VnetGateway>): void;

    /**
     * @summary Retrieves a Virtual Network connection gateway associated with
     * this web app and virtual network.
     *
     * @param {string} resourceGroupName The resource group name
     * 
     * @param {string} name The name of the web app
     * 
     * @param {string} vnetName The name of the Virtual Network
     * 
     * @param {string} gatewayName The name of the gateway. The only gateway that
     * exists presently is "primary"
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getSiteVnetGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, callback: ServiceCallback<any>): void;

    /**
     * @summary Updates the Virtual Network Gateway.
     *
     * @param {string} resourceGroupName The resource group name
     * 
     * @param {string} name The name of the web app
     * 
     * @param {string} vnetName The name of the Virtual Network
     * 
     * @param {string} gatewayName The name of the gateway. The only gateway that
     * exists presently is "primary"
     * 
     * @param {object} connectionEnvelope The properties to update this gateway
     * with.
     * 
     * @param {string} [connectionEnvelope.vnetName] The VNET name.
     * 
     * @param {string} [connectionEnvelope.vpnPackageUri] The URI where the Vpn
     * package can be downloaded
     * 
     * @param {string} [connectionEnvelope.id] Resource Id
     * 
     * @param {string} [connectionEnvelope.name] Resource Name
     * 
     * @param {string} [connectionEnvelope.kind] Kind of resource
     * 
     * @param {string} connectionEnvelope.location Resource Location
     * 
     * @param {string} [connectionEnvelope.type] Resource type
     * 
     * @param {object} [connectionEnvelope.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createOrUpdateSiteVNETConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: models.VnetGateway, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetGateway>): void;
    createOrUpdateSiteVNETConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: models.VnetGateway, callback: ServiceCallback<models.VnetGateway>): void;

    /**
     * @summary Updates the Virtual Network Gateway.
     *
     * @param {string} resourceGroupName The resource group name
     * 
     * @param {string} name The name of the web app
     * 
     * @param {string} vnetName The name of the Virtual Network
     * 
     * @param {string} gatewayName The name of the gateway. The only gateway that
     * exists presently is "primary"
     * 
     * @param {object} connectionEnvelope The properties to update this gateway
     * with.
     * 
     * @param {string} [connectionEnvelope.vnetName] The VNET name.
     * 
     * @param {string} [connectionEnvelope.vpnPackageUri] The URI where the Vpn
     * package can be downloaded
     * 
     * @param {string} [connectionEnvelope.id] Resource Id
     * 
     * @param {string} [connectionEnvelope.name] Resource Name
     * 
     * @param {string} [connectionEnvelope.kind] Kind of resource
     * 
     * @param {string} connectionEnvelope.location Resource Location
     * 
     * @param {string} [connectionEnvelope.type] Resource type
     * 
     * @param {object} [connectionEnvelope.tags] Resource tags
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateSiteVNETConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: models.VnetGateway, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetGateway>): void;
    updateSiteVNETConnectionGateway(resourceGroupName: string, name: string, vnetName: string, gatewayName: string, connectionEnvelope: models.VnetGateway, callback: ServiceCallback<models.VnetGateway>): void;

    /**
     * @summary Retrieves a list of all Virtual Network Connections associated
     * with this web app.
     *
     * @param {string} resourceGroupName The resource group name
     * 
     * @param {string} name The name of the web app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteVNETConnections(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetInfo[]>): void;
    getSiteVNETConnections(resourceGroupName: string, name: string, callback: ServiceCallback<models.VnetInfo[]>): void;

    /**
     * @summary Retrieves a list of all Virtual Network Connections associated
     * with this web app.
     *
     * @param {string} resourceGroupName The resource group name
     * 
     * @param {string} name The name of the web app
     * 
     * @param {string} slot The name of the slot for this web app.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteVNETConnectionsSlot(resourceGroupName: string, name: string, slot: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VnetInfo[]>): void;
    getSiteVNETConnectionsSlot(resourceGroupName: string, name: string, slot: string, callback: ServiceCallback<models.VnetInfo[]>): void;

    /**
     * @summary Get the difference in configuration settings between two web app
     * slots
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSlotsDifferencesFromProductionNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SlotDifferenceCollection>): void;
    getSlotsDifferencesFromProductionNext(nextPageLink: string, callback: ServiceCallback<models.SlotDifferenceCollection>): void;

    /**
     * @summary Get the difference in configuration settings between two web app
     * slots
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSlotsDifferencesSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SlotDifferenceCollection>): void;
    getSlotsDifferencesSlotNext(nextPageLink: string, callback: ServiceCallback<models.SlotDifferenceCollection>): void;

    /**
     * @summary Gets all the slots for a web apps
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteSlotsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteCollection>): void;
    getSiteSlotsNext(nextPageLink: string, callback: ServiceCallback<models.SiteCollection>): void;

    /**
     * @summary Gets the web apps for a subscription in the specified resource
     * group
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSitesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteCollection>): void;
    getSitesNext(nextPageLink: string, callback: ServiceCallback<models.SiteCollection>): void;

    /**
     * @summary Gets deleted web apps in subscription
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getDeletedSitesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeletedSiteCollection>): void;
    getDeletedSitesNext(nextPageLink: string, callback: ServiceCallback<models.DeletedSiteCollection>): void;

    /**
     * @summary List deployments
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getDeploymentsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentCollection>): void;
    getDeploymentsNext(nextPageLink: string, callback: ServiceCallback<models.DeploymentCollection>): void;

    /**
     * @summary List deployments
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getDeploymentsSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentCollection>): void;
    getDeploymentsSlotNext(nextPageLink: string, callback: ServiceCallback<models.DeploymentCollection>): void;

    /**
     * @summary List deployments
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getInstanceDeploymentsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentCollection>): void;
    getInstanceDeploymentsNext(nextPageLink: string, callback: ServiceCallback<models.DeploymentCollection>): void;

    /**
     * @summary List deployments
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getInstanceDeploymentsSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DeploymentCollection>): void;
    getInstanceDeploymentsSlotNext(nextPageLink: string, callback: ServiceCallback<models.DeploymentCollection>): void;

    /**
     * @summary Gets all instance of a web app
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteInstanceIdentifiersNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteInstanceCollection>): void;
    getSiteInstanceIdentifiersNext(nextPageLink: string, callback: ServiceCallback<models.SiteInstanceCollection>): void;

    /**
     * @summary Gets all instance of a web app
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteInstanceIdentifiersSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SiteInstanceCollection>): void;
    getSiteInstanceIdentifiersSlotNext(nextPageLink: string, callback: ServiceCallback<models.SiteInstanceCollection>): void;

    /**
     * @summary Get web app hostname bindings
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteHostNameBindingsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HostNameBindingCollection>): void;
    getSiteHostNameBindingsNext(nextPageLink: string, callback: ServiceCallback<models.HostNameBindingCollection>): void;

    /**
     * @summary Get web app hostname bindings
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteHostNameBindingsSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HostNameBindingCollection>): void;
    getSiteHostNameBindingsSlotNext(nextPageLink: string, callback: ServiceCallback<models.HostNameBindingCollection>): void;

    /**
     * @summary Lists all available backups for web app
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listSiteBackupsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupItemCollection>): void;
    listSiteBackupsNext(nextPageLink: string, callback: ServiceCallback<models.BackupItemCollection>): void;

    /**
     * @summary Lists all available backups for web app
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listSiteBackupsSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BackupItemCollection>): void;
    listSiteBackupsSlotNext(nextPageLink: string, callback: ServiceCallback<models.BackupItemCollection>): void;

    /**
     * @summary Gets the quota usage numbers for web app
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteUsagesNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CsmUsageQuotaCollection>): void;
    getSiteUsagesNext(nextPageLink: string, callback: ServiceCallback<models.CsmUsageQuotaCollection>): void;

    /**
     * @summary Gets the quota usage numbers for web app
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteUsagesSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CsmUsageQuotaCollection>): void;
    getSiteUsagesSlotNext(nextPageLink: string, callback: ServiceCallback<models.CsmUsageQuotaCollection>): void;

    /**
     * @summary Gets metrics for web app
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteMetricsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricCollection>): void;
    getSiteMetricsNext(nextPageLink: string, callback: ServiceCallback<models.ResourceMetricCollection>): void;

    /**
     * @summary Gets metrics for web app
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteMetricsSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceMetricCollection>): void;
    getSiteMetricsSlotNext(nextPageLink: string, callback: ServiceCallback<models.ResourceMetricCollection>): void;

    /**
     * @summary Gets metric definitions for web app
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteMetricDefinitionsSlotNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricDefinitionCollection>): void;
    getSiteMetricDefinitionsSlotNext(nextPageLink: string, callback: ServiceCallback<models.MetricDefinitionCollection>): void;

    /**
     * @summary Gets metric definitions for web app
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSiteMetricDefinitionsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MetricDefinitionCollection>): void;
    getSiteMetricDefinitionsNext(nextPageLink: string, callback: ServiceCallback<models.MetricDefinitionCollection>): void;
}

/**
 * @class
 * TopLevelDomains
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the WebSiteManagementClient.
 */
export interface TopLevelDomains {

    /**
     * @summary Lists all top level domains supported for registration
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getGetTopLevelDomains(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TopLevelDomainCollection>): void;
    getGetTopLevelDomains(callback: ServiceCallback<models.TopLevelDomainCollection>): void;

    /**
     * @summary Gets details of a top level domain
     *
     * @param {string} name Name of the top level domain
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getTopLevelDomain(name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TopLevelDomain>): void;
    getTopLevelDomain(name: string, callback: ServiceCallback<models.TopLevelDomain>): void;

    /**
     * @summary Lists legal agreements that user needs to accept before purchasing
     * domain
     *
     * @param {string} name Name of the top level domain
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.includePrivacy] If true then the list of
     * agreements will inclue agreements for domain privacy as well.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listTopLevelDomainAgreements(name: string, options: { includePrivacy? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TldLegalAgreementCollection>): void;
    listTopLevelDomainAgreements(name: string, callback: ServiceCallback<models.TldLegalAgreementCollection>): void;

    /**
     * @summary Lists all top level domains supported for registration
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getGetTopLevelDomainsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TopLevelDomainCollection>): void;
    getGetTopLevelDomainsNext(nextPageLink: string, callback: ServiceCallback<models.TopLevelDomainCollection>): void;

    /**
     * @summary Lists legal agreements that user needs to accept before purchasing
     * domain
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listTopLevelDomainAgreementsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TldLegalAgreementCollection>): void;
    listTopLevelDomainAgreementsNext(nextPageLink: string, callback: ServiceCallback<models.TldLegalAgreementCollection>): void;
}

/**
 * @class
 * UsageOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the WebSiteManagementClient.
 */
export interface UsageOperations {

    /**
     * @summary Returns usage records for specified subscription and resource
     * groups
     *
     * @param {string} resourceGroupName Name of resource group
     * 
     * @param {string} environmentName Environment name
     * 
     * @param {string} lastId Last marker that was returned from the batch
     * 
     * @param {number} batchSize size of the batch to be returned.
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getUsage(resourceGroupName: string, environmentName: string, lastId: string, batchSize: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getUsage(resourceGroupName: string, environmentName: string, lastId: string, batchSize: number, callback: ServiceCallback<any>): void;
}
