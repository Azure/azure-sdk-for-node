/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the SiteCloneability class.
 * @constructor
 * Represents whether or not a web app is cloneable
 *
 * @member {string} result Name of web app. Possible values include:
 * 'Cloneable', 'PartiallyCloneable', 'NotCloneable'
 * 
 * @member {array} [blockingFeatures] List of features enabled on web app that
 * prevent cloning
 * 
 * @member {array} [unsupportedFeatures] List of features enabled on web app
 * that are non-blocking but cannot be cloned. The web app can still be
 * cloned
 * but the features in this list will not be set up on cloned web
 * app.
 * 
 * @member {array} [blockingCharacteristics] List of blocking application
 * characteristics
 * 
 */
function SiteCloneability() {
}

/**
 * Defines the metadata of SiteCloneability
 *
 * @returns {object} metadata of SiteCloneability
 *
 */
SiteCloneability.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'SiteCloneability',
    type: {
      name: 'Composite',
      className: 'SiteCloneability',
      modelProperties: {
        result: {
          required: true,
          serializedName: 'result',
          type: {
            name: 'Enum',
            allowedValues: [ 'Cloneable', 'PartiallyCloneable', 'NotCloneable' ]
          }
        },
        blockingFeatures: {
          required: false,
          serializedName: 'blockingFeatures',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'SiteCloneabilityCriterionElementType',
                type: {
                  name: 'Composite',
                  className: 'SiteCloneabilityCriterion'
                }
            }
          }
        },
        unsupportedFeatures: {
          required: false,
          serializedName: 'unsupportedFeatures',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'SiteCloneabilityCriterionElementType',
                type: {
                  name: 'Composite',
                  className: 'SiteCloneabilityCriterion'
                }
            }
          }
        },
        blockingCharacteristics: {
          required: false,
          serializedName: 'blockingCharacteristics',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'SiteCloneabilityCriterionElementType',
                type: {
                  name: 'Composite',
                  className: 'SiteCloneabilityCriterion'
                }
            }
          }
        }
      }
    }
  };
};

module.exports = SiteCloneability;
