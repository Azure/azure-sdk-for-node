/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ServerFarmWithRichSku class.
 * @constructor
 * App Service Plan Model
 *
 * @member {string} [serverFarmWithRichSkuName] Name for the App Service Plan
 * 
 * @member {string} [workerTierName] Target worker tier assigned to the App
 * Service Plan
 * 
 * @member {string} [status] App Service Plan Status. Possible values include:
 * 'Ready', 'Pending'
 * 
 * @member {string} [subscription] App Service Plan Subscription
 * 
 * @member {string} [adminSiteName] App Service Plan administration site
 * 
 * @member {object} [hostingEnvironmentProfile] Specification for the hosting
 * environment (App Service Environment) to use for the App Service Plan
 * 
 * @member {string} [hostingEnvironmentProfile.id] Resource id of the
 * hostingEnvironment (App Service Environment)
 * 
 * @member {string} [hostingEnvironmentProfile.name] Name of the
 * hostingEnvironment (App Service Environment) (read only)
 * 
 * @member {string} [hostingEnvironmentProfile.type] Resource type of the
 * hostingEnvironment (App Service Environment) (read only)
 * 
 * @member {number} [maximumNumberOfWorkers] Maximum number of instances that
 * can be assigned to this App Service Plan
 * 
 * @member {string} [geoRegion] Geographical location for the App Service Plan
 * 
 * @member {boolean} [perSiteScaling] If True apps assigned to this App
 * Service Plan can be scaled independently
 * If False apps assigned to this App Service Plan will scale to
 * all instances of the plan
 * 
 * @member {number} [numberOfSites] Number of web apps assigned to this App
 * Service Plan
 * 
 * @member {string} [resourceGroup] Resource group of the serverfarm
 * 
 * @member {object} [sku]
 * 
 * @member {string} [sku.name] Name of the resource sku
 * 
 * @member {string} [sku.tier] Service Tier of the resource sku
 * 
 * @member {string} [sku.size] Size specifier of the resource sku
 * 
 * @member {string} [sku.family] Family code of the resource sku
 * 
 * @member {number} [sku.capacity] Current number of instances assigned to the
 * resource
 * 
 */
function ServerFarmWithRichSku() {
  ServerFarmWithRichSku['super_'].call(this);
}

util.inherits(ServerFarmWithRichSku, models['Resource']);

/**
 * Defines the metadata of ServerFarmWithRichSku
 *
 * @returns {object} metadata of ServerFarmWithRichSku
 *
 */
ServerFarmWithRichSku.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'ServerFarmWithRichSku',
    type: {
      name: 'Composite',
      className: 'ServerFarmWithRichSku',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        kind: {
          required: false,
          serializedName: 'kind',
          type: {
            name: 'String'
          }
        },
        location: {
          required: true,
          serializedName: 'location',
          type: {
            name: 'String'
          }
        },
        type: {
          required: false,
          serializedName: 'type',
          type: {
            name: 'String'
          }
        },
        tags: {
          required: false,
          serializedName: 'tags',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        serverFarmWithRichSkuName: {
          required: false,
          serializedName: 'properties.name',
          type: {
            name: 'String'
          }
        },
        workerTierName: {
          required: false,
          serializedName: 'properties.workerTierName',
          type: {
            name: 'String'
          }
        },
        status: {
          required: false,
          readOnly: true,
          serializedName: 'properties.status',
          type: {
            name: 'Enum',
            allowedValues: [ 'Ready', 'Pending' ]
          }
        },
        subscription: {
          required: false,
          readOnly: true,
          serializedName: 'properties.subscription',
          type: {
            name: 'String'
          }
        },
        adminSiteName: {
          required: false,
          serializedName: 'properties.adminSiteName',
          type: {
            name: 'String'
          }
        },
        hostingEnvironmentProfile: {
          required: false,
          serializedName: 'properties.hostingEnvironmentProfile',
          type: {
            name: 'Composite',
            className: 'HostingEnvironmentProfile'
          }
        },
        maximumNumberOfWorkers: {
          required: false,
          serializedName: 'properties.maximumNumberOfWorkers',
          type: {
            name: 'Number'
          }
        },
        geoRegion: {
          required: false,
          readOnly: true,
          serializedName: 'properties.geoRegion',
          type: {
            name: 'String'
          }
        },
        perSiteScaling: {
          required: false,
          serializedName: 'properties.perSiteScaling',
          type: {
            name: 'Boolean'
          }
        },
        numberOfSites: {
          required: false,
          readOnly: true,
          serializedName: 'properties.numberOfSites',
          type: {
            name: 'Number'
          }
        },
        resourceGroup: {
          required: false,
          readOnly: true,
          serializedName: 'properties.resourceGroup',
          type: {
            name: 'String'
          }
        },
        sku: {
          required: false,
          serializedName: 'sku',
          type: {
            name: 'Composite',
            className: 'SkuDescription'
          }
        }
      }
    }
  };
};

module.exports = ServerFarmWithRichSku;
