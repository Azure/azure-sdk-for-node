/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the Certificate class.
 * @constructor
 * App certificate
 *
 * @member {string} [friendlyName] Friendly name of the certificate
 * 
 * @member {string} [subjectName] Subject name of the certificate
 * 
 * @member {array} [hostNames] Host names the certificate applies to
 * 
 * @member {string} [pfxBlob] Pfx blob
 * 
 * @member {string} [siteName] App name
 * 
 * @member {string} [selfLink] Self link
 * 
 * @member {string} [issuer] Certificate issuer
 * 
 * @member {date} [issueDate] Certificate issue Date
 * 
 * @member {date} [expirationDate] Certificate expriration date
 * 
 * @member {string} [password] Certificate password
 * 
 * @member {string} [thumbprint] Certificate thumbprint
 * 
 * @member {boolean} [valid] Is the certificate valid?
 * 
 * @member {string} [cerBlob] Raw bytes of .cer file
 * 
 * @member {string} [publicKeyHash] Public key hash
 * 
 * @member {object} [hostingEnvironmentProfile] Specification for the hosting
 * environment (App Service Environment) to use for the certificate
 * 
 * @member {string} [hostingEnvironmentProfile.id] Resource id of the
 * hostingEnvironment (App Service Environment)
 * 
 * @member {string} [hostingEnvironmentProfile.name] Name of the
 * hostingEnvironment (App Service Environment) (read only)
 * 
 * @member {string} [hostingEnvironmentProfile.type] Resource type of the
 * hostingEnvironment (App Service Environment) (read only)
 * 
 */
function Certificate() {
  Certificate['super_'].call(this);
}

util.inherits(Certificate, models['Resource']);

/**
 * Defines the metadata of Certificate
 *
 * @returns {object} metadata of Certificate
 *
 */
Certificate.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'Certificate',
    type: {
      name: 'Composite',
      className: 'Certificate',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        kind: {
          required: false,
          serializedName: 'kind',
          type: {
            name: 'String'
          }
        },
        location: {
          required: true,
          serializedName: 'location',
          type: {
            name: 'String'
          }
        },
        type: {
          required: false,
          serializedName: 'type',
          type: {
            name: 'String'
          }
        },
        tags: {
          required: false,
          serializedName: 'tags',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        friendlyName: {
          required: false,
          serializedName: 'properties.friendlyName',
          type: {
            name: 'String'
          }
        },
        subjectName: {
          required: false,
          serializedName: 'properties.subjectName',
          type: {
            name: 'String'
          }
        },
        hostNames: {
          required: false,
          serializedName: 'properties.hostNames',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        pfxBlob: {
          required: false,
          serializedName: 'properties.pfxBlob',
          type: {
            name: 'String'
          }
        },
        siteName: {
          required: false,
          serializedName: 'properties.siteName',
          type: {
            name: 'String'
          }
        },
        selfLink: {
          required: false,
          serializedName: 'properties.selfLink',
          type: {
            name: 'String'
          }
        },
        issuer: {
          required: false,
          serializedName: 'properties.issuer',
          type: {
            name: 'String'
          }
        },
        issueDate: {
          required: false,
          serializedName: 'properties.issueDate',
          type: {
            name: 'DateTime'
          }
        },
        expirationDate: {
          required: false,
          serializedName: 'properties.expirationDate',
          type: {
            name: 'DateTime'
          }
        },
        password: {
          required: false,
          serializedName: 'properties.password',
          type: {
            name: 'String'
          }
        },
        thumbprint: {
          required: false,
          serializedName: 'properties.thumbprint',
          type: {
            name: 'String'
          }
        },
        valid: {
          required: false,
          serializedName: 'properties.valid',
          type: {
            name: 'Boolean'
          }
        },
        cerBlob: {
          required: false,
          serializedName: 'properties.cerBlob',
          type: {
            name: 'String'
          }
        },
        publicKeyHash: {
          required: false,
          serializedName: 'properties.publicKeyHash',
          type: {
            name: 'String'
          }
        },
        hostingEnvironmentProfile: {
          required: false,
          serializedName: 'properties.hostingEnvironmentProfile',
          type: {
            name: 'Composite',
            className: 'HostingEnvironmentProfile'
          }
        }
      }
    }
  };
};

module.exports = Certificate;
