/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the VnetInfo class.
 * @constructor
 * VNETInfo contract. This contract is public and is a stripped down version
 * of VNETInfoInternal
 *
 * @member {string} [vnetResourceId] The vnet resource id
 * 
 * @member {string} [certThumbprint] The client certificate thumbprint
 * 
 * @member {string} [certBlob] A certificate file (.cer) blob containing the
 * public key of the private key used to authenticate a
 * Point-To-Site VPN connection.
 * 
 * @member {array} [routes] The routes that this virtual network connection
 * uses.
 * 
 * @member {boolean} [resyncRequired] Flag to determine if a resync is required
 * 
 * @member {string} [dnsServers] Dns servers to be used by this VNET. This
 * should be a comma-separated list of IP addresses.
 * 
 */
function VnetInfo() {
  VnetInfo['super_'].call(this);
}

util.inherits(VnetInfo, models['Resource']);

/**
 * Defines the metadata of VnetInfo
 *
 * @returns {object} metadata of VnetInfo
 *
 */
VnetInfo.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'VnetInfo',
    type: {
      name: 'Composite',
      className: 'VnetInfo',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        kind: {
          required: false,
          serializedName: 'kind',
          type: {
            name: 'String'
          }
        },
        location: {
          required: true,
          serializedName: 'location',
          type: {
            name: 'String'
          }
        },
        type: {
          required: false,
          serializedName: 'type',
          type: {
            name: 'String'
          }
        },
        tags: {
          required: false,
          serializedName: 'tags',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        vnetResourceId: {
          required: false,
          serializedName: 'properties.vnetResourceId',
          type: {
            name: 'String'
          }
        },
        certThumbprint: {
          required: false,
          serializedName: 'properties.certThumbprint',
          type: {
            name: 'String'
          }
        },
        certBlob: {
          required: false,
          serializedName: 'properties.certBlob',
          type: {
            name: 'String'
          }
        },
        routes: {
          required: false,
          serializedName: 'properties.routes',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'VnetRouteElementType',
                type: {
                  name: 'Composite',
                  className: 'VnetRoute'
                }
            }
          }
        },
        resyncRequired: {
          required: false,
          serializedName: 'properties.resyncRequired',
          type: {
            name: 'Boolean'
          }
        },
        dnsServers: {
          required: false,
          serializedName: 'properties.dnsServers',
          type: {
            name: 'String'
          }
        }
      }
    }
  };
};

module.exports = VnetInfo;
