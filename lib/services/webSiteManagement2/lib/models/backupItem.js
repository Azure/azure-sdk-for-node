/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the BackupItem class.
 * @constructor
 * Backup description
 *
 * @member {number} [backupItemId] Id of the backup.
 * 
 * @member {string} [storageAccountUrl] SAS URL for the storage account
 * container which contains this backup
 * 
 * @member {string} [blobName] Name of the blob which contains data for this
 * backup
 * 
 * @member {string} [backupItemName] Name of this backup
 * 
 * @member {string} [status] Backup status. Possible values include:
 * 'InProgress', 'Failed', 'Succeeded', 'TimedOut', 'Created', 'Skipped',
 * 'PartiallySucceeded', 'DeleteInProgress', 'DeleteFailed', 'Deleted'
 * 
 * @member {number} [sizeInBytes] Size of the backup in bytes
 * 
 * @member {date} [created] Timestamp of the backup creation
 * 
 * @member {string} [log] Details regarding this backup. Might contain an
 * error message.
 * 
 * @member {array} [databases] List of databases included in the backup
 * 
 * @member {boolean} [scheduled] True if this backup has been created due to a
 * schedule being triggered.
 * 
 * @member {date} [lastRestoreTimeStamp] Timestamp of a last restore operation
 * which used this backup.
 * 
 * @member {date} [finishedTimeStamp] Timestamp when this backup finished.
 * 
 * @member {string} [correlationId] Unique correlation identifier. Please use
 * this along with the timestamp while communicating with Azure support.
 * 
 * @member {number} [websiteSizeInBytes] Size of the original web app which
 * has been backed up
 * 
 */
function BackupItem() {
  BackupItem['super_'].call(this);
}

util.inherits(BackupItem, models['Resource']);

/**
 * Defines the metadata of BackupItem
 *
 * @returns {object} metadata of BackupItem
 *
 */
BackupItem.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'BackupItem',
    type: {
      name: 'Composite',
      className: 'BackupItem',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        kind: {
          required: false,
          serializedName: 'kind',
          type: {
            name: 'String'
          }
        },
        location: {
          required: true,
          serializedName: 'location',
          type: {
            name: 'String'
          }
        },
        type: {
          required: false,
          serializedName: 'type',
          type: {
            name: 'String'
          }
        },
        tags: {
          required: false,
          serializedName: 'tags',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        backupItemId: {
          required: false,
          serializedName: 'properties.id',
          type: {
            name: 'Number'
          }
        },
        storageAccountUrl: {
          required: false,
          serializedName: 'properties.storageAccountUrl',
          type: {
            name: 'String'
          }
        },
        blobName: {
          required: false,
          serializedName: 'properties.blobName',
          type: {
            name: 'String'
          }
        },
        backupItemName: {
          required: false,
          serializedName: 'properties.name',
          type: {
            name: 'String'
          }
        },
        status: {
          required: false,
          serializedName: 'properties.status',
          type: {
            name: 'Enum',
            allowedValues: [ 'InProgress', 'Failed', 'Succeeded', 'TimedOut', 'Created', 'Skipped', 'PartiallySucceeded', 'DeleteInProgress', 'DeleteFailed', 'Deleted' ]
          }
        },
        sizeInBytes: {
          required: false,
          serializedName: 'properties.sizeInBytes',
          type: {
            name: 'Number'
          }
        },
        created: {
          required: false,
          serializedName: 'properties.created',
          type: {
            name: 'DateTime'
          }
        },
        log: {
          required: false,
          serializedName: 'properties.log',
          type: {
            name: 'String'
          }
        },
        databases: {
          required: false,
          serializedName: 'properties.databases',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'DatabaseBackupSettingElementType',
                type: {
                  name: 'Composite',
                  className: 'DatabaseBackupSetting'
                }
            }
          }
        },
        scheduled: {
          required: false,
          serializedName: 'properties.scheduled',
          type: {
            name: 'Boolean'
          }
        },
        lastRestoreTimeStamp: {
          required: false,
          serializedName: 'properties.lastRestoreTimeStamp',
          type: {
            name: 'DateTime'
          }
        },
        finishedTimeStamp: {
          required: false,
          serializedName: 'properties.finishedTimeStamp',
          type: {
            name: 'DateTime'
          }
        },
        correlationId: {
          required: false,
          serializedName: 'properties.correlationId',
          type: {
            name: 'String'
          }
        },
        websiteSizeInBytes: {
          required: false,
          serializedName: 'properties.websiteSizeInBytes',
          type: {
            name: 'Number'
          }
        }
      }
    }
  };
};

module.exports = BackupItem;
