/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the Csr class.
 * @constructor
 * Certificate signing request object
 *
 * @member {string} [csrName] Name used to locate CSR object
 * 
 * @member {string} [distinguishedName] Distinguished name of certificate to
 * be created
 * 
 * @member {string} [csrString] Actual CSR string created
 * 
 * @member {string} [pfxBlob] PFX certifcate of created certificate
 * 
 * @member {string} [password] PFX password
 * 
 * @member {string} [publicKeyHash] Hash of the certificates public key
 * 
 * @member {string} [hostingEnvironment] Hosting environment
 * 
 */
function Csr() {
  Csr['super_'].call(this);
}

util.inherits(Csr, models['Resource']);

/**
 * Defines the metadata of Csr
 *
 * @returns {object} metadata of Csr
 *
 */
Csr.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'Csr',
    type: {
      name: 'Composite',
      className: 'Csr',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        kind: {
          required: false,
          serializedName: 'kind',
          type: {
            name: 'String'
          }
        },
        location: {
          required: true,
          serializedName: 'location',
          type: {
            name: 'String'
          }
        },
        type: {
          required: false,
          serializedName: 'type',
          type: {
            name: 'String'
          }
        },
        tags: {
          required: false,
          serializedName: 'tags',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        csrName: {
          required: false,
          serializedName: 'properties.name',
          type: {
            name: 'String'
          }
        },
        distinguishedName: {
          required: false,
          serializedName: 'properties.distinguishedName',
          type: {
            name: 'String'
          }
        },
        csrString: {
          required: false,
          serializedName: 'properties.csrString',
          type: {
            name: 'String'
          }
        },
        pfxBlob: {
          required: false,
          serializedName: 'properties.pfxBlob',
          type: {
            name: 'String'
          }
        },
        password: {
          required: false,
          serializedName: 'properties.password',
          type: {
            name: 'String'
          }
        },
        publicKeyHash: {
          required: false,
          serializedName: 'properties.publicKeyHash',
          type: {
            name: 'String'
          }
        },
        hostingEnvironment: {
          required: false,
          serializedName: 'properties.hostingEnvironment',
          type: {
            name: 'String'
          }
        }
      }
    }
  };
};

module.exports = Csr;
