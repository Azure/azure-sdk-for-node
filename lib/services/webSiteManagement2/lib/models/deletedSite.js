/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the DeletedSite class.
 * @constructor
 * Reports deleted site including the timestamp of operation
 *
 * @member {date} [deletedTimestamp] Time when the site was deleted
 * 
 * @member {string} [deletedSiteName] Name of web app
 * 
 * @member {string} [state] State of the web app
 * 
 * @member {array} [hostNames] Hostnames associated with web app
 * 
 * @member {string} [repositorySiteName] Name of repository site
 * 
 * @member {string} [usageState] State indicating whether web app has exceeded
 * its quota usage. Possible values include: 'Normal', 'Exceeded'
 * 
 * @member {boolean} [enabled] True if the site is enabled; otherwise, false.
 * Setting this  value to false disables the site (takes the site off line).
 * 
 * @member {array} [enabledHostNames] Hostnames for the web app that are
 * enabled. Hostnames need to be assigned and enabled. If some hostnames are
 * assigned but not enabled
 * the app is not served on those hostnames
 * 
 * @member {string} [availabilityState] Management information availability
 * state for the web app. Possible values are Normal or Limited.
 * Normal means that the site is running correctly and that
 * management information for the site is available.
 * Limited means that only partial management information for the
 * site is available and that detailed site information is unavailable.
 * Possible values include: 'Normal', 'Limited', 'DisasterRecoveryMode'
 * 
 * @member {array} [hostNameSslStates] Hostname SSL states are  used to manage
 * the SSL bindings for site's hostnames.
 * 
 * @member {string} [serverFarmId]
 * 
 * @member {date} [lastModifiedTimeUtc] Last time web app was modified in UTC
 * 
 * @member {object} [siteConfig] Configuration of web app
 * 
 * @member {number} [siteConfig.numberOfWorkers] Number of workers
 * 
 * @member {array} [siteConfig.defaultDocuments] Default documents
 * 
 * @member {string} [siteConfig.netFrameworkVersion] Net Framework Version
 * 
 * @member {string} [siteConfig.phpVersion] Version of PHP
 * 
 * @member {string} [siteConfig.pythonVersion] Version of Python
 * 
 * @member {string} [siteConfig.nodeVersion] Version of Node
 * 
 * @member {boolean} [siteConfig.requestTracingEnabled] Enable request tracing
 * 
 * @member {date} [siteConfig.requestTracingExpirationTime] Request tracing
 * expiration time
 * 
 * @member {boolean} [siteConfig.remoteDebuggingEnabled] Remote Debugging
 * Enabled
 * 
 * @member {string} [siteConfig.remoteDebuggingVersion] Remote Debugging
 * Version
 * 
 * @member {boolean} [siteConfig.httpLoggingEnabled] HTTP logging Enabled
 * 
 * @member {number} [siteConfig.logsDirectorySizeLimit] HTTP Logs Directory
 * size limit
 * 
 * @member {boolean} [siteConfig.detailedErrorLoggingEnabled] Detailed error
 * logging enabled
 * 
 * @member {string} [siteConfig.publishingUsername] Publishing user name
 * 
 * @member {string} [siteConfig.publishingPassword] Publishing password
 * 
 * @member {array} [siteConfig.appSettings] Application Settings
 * 
 * @member {array} [siteConfig.metadata] Site Metadata
 * 
 * @member {array} [siteConfig.connectionStrings] Connection strings
 * 
 * @member {array} [siteConfig.handlerMappings] Handler mappings
 * 
 * @member {string} [siteConfig.documentRoot] Document root
 * 
 * @member {string} [siteConfig.scmType] SCM type
 * 
 * @member {boolean} [siteConfig.use32BitWorkerProcess] Use 32 bit worker
 * process
 * 
 * @member {boolean} [siteConfig.webSocketsEnabled] Web socket enabled.
 * 
 * @member {boolean} [siteConfig.alwaysOn] Always On
 * 
 * @member {string} [siteConfig.javaVersion] Java version
 * 
 * @member {string} [siteConfig.javaContainer] Java container
 * 
 * @member {string} [siteConfig.javaContainerVersion] Java container version
 * 
 * @member {string} [siteConfig.appCommandLine] App Command Line to launch
 * 
 * @member {string} [siteConfig.managedPipelineMode] Managed pipeline mode.
 * Possible values include: 'Integrated', 'Classic'
 * 
 * @member {array} [siteConfig.virtualApplications] Virtual applications
 * 
 * @member {string} [siteConfig.loadBalancing] Site load balancing. Possible
 * values include: 'WeightedRoundRobin', 'LeastRequests',
 * 'LeastResponseTime', 'WeightedTotalTraffic', 'RequestHash'
 * 
 * @member {object} [siteConfig.experiments] This is work around for
 * polymophic types
 * 
 * @member {array} [siteConfig.experiments.rampUpRules] List of
 * {Microsoft.Web.Hosting.Administration.RampUpRule} objects.
 * 
 * @member {object} [siteConfig.limits] Site limits
 * 
 * @member {number} [siteConfig.limits.maxPercentageCpu] Maximum allowed CPU
 * usage percentage
 * 
 * @member {number} [siteConfig.limits.maxMemoryInMb] Maximum allowed memory
 * usage in MB
 * 
 * @member {number} [siteConfig.limits.maxDiskSizeInMb] Maximum allowed disk
 * size usage in MB
 * 
 * @member {boolean} [siteConfig.autoHealEnabled] Auto heal enabled
 * 
 * @member {object} [siteConfig.autoHealRules] Auto heal rules
 * 
 * @member {object} [siteConfig.autoHealRules.triggers] Triggers - Conditions
 * that describe when to execute the auto-heal actions
 * 
 * @member {object} [siteConfig.autoHealRules.triggers.requests] Requests -
 * Defines a rule based on total requests
 * 
 * @member {number} [siteConfig.autoHealRules.triggers.requests.count] Count
 * 
 * @member {string} [siteConfig.autoHealRules.triggers.requests.timeInterval]
 * TimeInterval
 * 
 * @member {number} [siteConfig.autoHealRules.triggers.privateBytesInKB]
 * PrivateBytesInKB - Defines a rule based on private bytes
 * 
 * @member {array} [siteConfig.autoHealRules.triggers.statusCodes] StatusCodes
 * - Defines a rule based on status codes
 * 
 * @member {object} [siteConfig.autoHealRules.triggers.slowRequests]
 * SlowRequests - Defines a rule based on request execution time
 * 
 * @member {string} [siteConfig.autoHealRules.triggers.slowRequests.timeTaken]
 * TimeTaken
 * 
 * @member {number} [siteConfig.autoHealRules.triggers.slowRequests.count]
 * Count
 * 
 * @member {string}
 * [siteConfig.autoHealRules.triggers.slowRequests.timeInterval] TimeInterval
 * 
 * @member {object} [siteConfig.autoHealRules.actions] Actions - Actions to be
 * executed when a rule is triggered
 * 
 * @member {string} [siteConfig.autoHealRules.actions.actionType] ActionType -
 * predefined action to be taken. Possible values include: 'Recycle',
 * 'LogEvent', 'CustomAction'
 * 
 * @member {object} [siteConfig.autoHealRules.actions.customAction]
 * CustomAction - custom action to be taken
 * 
 * @member {string} [siteConfig.autoHealRules.actions.customAction.exe]
 * Executable to be run
 * 
 * @member {string} [siteConfig.autoHealRules.actions.customAction.parameters]
 * Parameters for the executable
 * 
 * @member {string} [siteConfig.autoHealRules.actions.minProcessExecutionTime]
 * MinProcessExecutionTime - minimum time the process must execute
 * before taking the action
 * 
 * @member {string} [siteConfig.tracingOptions] Tracing options
 * 
 * @member {string} [siteConfig.vnetName] Vnet name
 * 
 * @member {object} [siteConfig.cors] Cross-Origin Resource Sharing (CORS)
 * settings.
 * 
 * @member {array} [siteConfig.cors.allowedOrigins] Gets or sets the list of
 * origins that should be allowed to make cross-origin
 * calls (for example: http://example.com:12345). Use "*" to allow
 * all.
 * 
 * @member {object} [siteConfig.apiDefinition] Information about the formal
 * API definition for the web app.
 * 
 * @member {string} [siteConfig.apiDefinition.url] The URL of the API
 * definition.
 * 
 * @member {string} [siteConfig.autoSwapSlotName] Auto swap slot name
 * 
 * @member {boolean} [siteConfig.localMySqlEnabled] Local mysql enabled
 * 
 * @member {array} [siteConfig.ipSecurityRestrictions] Ip Security restrictions
 * 
 * @member {array} [trafficManagerHostNames] Read-only list of Azure Traffic
 * manager hostnames associated with web app
 * 
 * @member {boolean} [premiumAppDeployed] If set indicates whether web app is
 * deployed as a premium app
 * 
 * @member {boolean} [scmSiteAlsoStopped] If set indicates whether to stop SCM
 * (KUDU) site when the web app is stopped. Default is false.
 * 
 * @member {string} [targetSwapSlot] Read-only property that specifies which
 * slot this app will swap into
 * 
 * @member {object} [hostingEnvironmentProfile] Specification for the hosting
 * environment (App Service Environment) to use for the web app
 * 
 * @member {string} [hostingEnvironmentProfile.id] Resource id of the
 * hostingEnvironment (App Service Environment)
 * 
 * @member {string} [hostingEnvironmentProfile.name] Name of the
 * hostingEnvironment (App Service Environment) (read only)
 * 
 * @member {string} [hostingEnvironmentProfile.type] Resource type of the
 * hostingEnvironment (App Service Environment) (read only)
 * 
 * @member {string} [microService]
 * 
 * @member {string} [gatewaySiteName] Name of gateway app associated with web
 * app
 * 
 * @member {boolean} [clientAffinityEnabled] Specifies if the client affinity
 * is enabled when load balancing http request for multiple instances of the
 * web app
 * 
 * @member {boolean} [clientCertEnabled] Specifies if the client certificate
 * is enabled for the web app
 * 
 * @member {boolean} [hostNamesDisabled] Specifies if the public hostnames are
 * disabled the web app.
 * If set to true the app is only accessible via API Management
 * process
 * 
 * @member {string} [outboundIpAddresses] List of comma separated IP addresses
 * that this web app uses for outbound connections. Those can be used when
 * configuring firewall rules for databases accessed by this web app.
 * 
 * @member {number} [containerSize] Size of a function container
 * 
 * @member {number} [maxNumberOfWorkers] Maximum number of workers
 * This only applies to function container
 * 
 * @member {object} [cloningInfo] This is only valid for web app creation. If
 * specified, web app is cloned from
 * a source web app
 * 
 * @member {string} [cloningInfo.correlationId] Correlation Id of cloning
 * operation. This id ties multiple cloning operations
 * together to use the same snapshot
 * 
 * @member {boolean} [cloningInfo.overwrite] Overwrite destination web app
 * 
 * @member {boolean} [cloningInfo.cloneCustomHostNames] If true, clone custom
 * hostnames from source web app
 * 
 * @member {boolean} [cloningInfo.cloneSourceControl] Clone source control
 * from source web app
 * 
 * @member {string} [cloningInfo.sourceWebAppId] ARM resource id of the source
 * web app. Web app resource id is of the form
 * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}
 * for production slots and
 * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName}
 * for other slots
 * 
 * @member {string} [cloningInfo.hostingEnvironment] Hosting environment
 * 
 * @member {object} [cloningInfo.appSettingsOverrides] Application settings
 * overrides for cloned web app. If specified these settings will override
 * the settings cloned
 * from source web app. If not specified, application settings
 * from source web app are retained.
 * 
 * @member {boolean} [cloningInfo.configureLoadBalancing] If specified
 * configure load balancing for source and clone site
 * 
 * @member {string} [cloningInfo.trafficManagerProfileId] ARM resource id of
 * the traffic manager profile to use if it exists. Traffic manager resource
 * id is of the form
 * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}
 * 
 * @member {string} [cloningInfo.trafficManagerProfileName] Name of traffic
 * manager profile to create. This is only needed if traffic manager profile
 * does not already exist
 * 
 * @member {string} [resourceGroup] Resource group web app belongs to
 * 
 * @member {boolean} [isDefaultContainer] Site is a default container
 * 
 * @member {string} [defaultHostName] Default hostname of the web app
 * 
 */
function DeletedSite() {
  DeletedSite['super_'].call(this);
}

util.inherits(DeletedSite, models['Resource']);

/**
 * Defines the metadata of DeletedSite
 *
 * @returns {object} metadata of DeletedSite
 *
 */
DeletedSite.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'DeletedSite',
    type: {
      name: 'Composite',
      className: 'DeletedSite',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        kind: {
          required: false,
          serializedName: 'kind',
          type: {
            name: 'String'
          }
        },
        location: {
          required: true,
          serializedName: 'location',
          type: {
            name: 'String'
          }
        },
        type: {
          required: false,
          serializedName: 'type',
          type: {
            name: 'String'
          }
        },
        tags: {
          required: false,
          serializedName: 'tags',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        deletedTimestamp: {
          required: false,
          serializedName: 'properties.deletedTimestamp',
          type: {
            name: 'DateTime'
          }
        },
        deletedSiteName: {
          required: false,
          serializedName: 'properties.name',
          type: {
            name: 'String'
          }
        },
        state: {
          required: false,
          readOnly: true,
          serializedName: 'properties.state',
          type: {
            name: 'String'
          }
        },
        hostNames: {
          required: false,
          readOnly: true,
          serializedName: 'properties.hostNames',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        repositorySiteName: {
          required: false,
          readOnly: true,
          serializedName: 'properties.repositorySiteName',
          type: {
            name: 'String'
          }
        },
        usageState: {
          required: false,
          readOnly: true,
          serializedName: 'properties.usageState',
          type: {
            name: 'Enum',
            allowedValues: [ 'Normal', 'Exceeded' ]
          }
        },
        enabled: {
          required: false,
          serializedName: 'properties.enabled',
          type: {
            name: 'Boolean'
          }
        },
        enabledHostNames: {
          required: false,
          readOnly: true,
          serializedName: 'properties.enabledHostNames',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        availabilityState: {
          required: false,
          readOnly: true,
          serializedName: 'properties.availabilityState',
          type: {
            name: 'Enum',
            allowedValues: [ 'Normal', 'Limited', 'DisasterRecoveryMode' ]
          }
        },
        hostNameSslStates: {
          required: false,
          serializedName: 'properties.hostNameSslStates',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'HostNameSslStateElementType',
                type: {
                  name: 'Composite',
                  className: 'HostNameSslState'
                }
            }
          }
        },
        serverFarmId: {
          required: false,
          serializedName: 'properties.serverFarmId',
          type: {
            name: 'String'
          }
        },
        lastModifiedTimeUtc: {
          required: false,
          readOnly: true,
          serializedName: 'properties.lastModifiedTimeUtc',
          type: {
            name: 'DateTime'
          }
        },
        siteConfig: {
          required: false,
          serializedName: 'properties.siteConfig',
          type: {
            name: 'Composite',
            className: 'SiteConfig'
          }
        },
        trafficManagerHostNames: {
          required: false,
          readOnly: true,
          serializedName: 'properties.trafficManagerHostNames',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        premiumAppDeployed: {
          required: false,
          readOnly: true,
          serializedName: 'properties.premiumAppDeployed',
          type: {
            name: 'Boolean'
          }
        },
        scmSiteAlsoStopped: {
          required: false,
          serializedName: 'properties.scmSiteAlsoStopped',
          type: {
            name: 'Boolean'
          }
        },
        targetSwapSlot: {
          required: false,
          readOnly: true,
          serializedName: 'properties.targetSwapSlot',
          type: {
            name: 'String'
          }
        },
        hostingEnvironmentProfile: {
          required: false,
          serializedName: 'properties.hostingEnvironmentProfile',
          type: {
            name: 'Composite',
            className: 'HostingEnvironmentProfile'
          }
        },
        microService: {
          required: false,
          serializedName: 'properties.microService',
          type: {
            name: 'String'
          }
        },
        gatewaySiteName: {
          required: false,
          serializedName: 'properties.gatewaySiteName',
          type: {
            name: 'String'
          }
        },
        clientAffinityEnabled: {
          required: false,
          serializedName: 'properties.clientAffinityEnabled',
          type: {
            name: 'Boolean'
          }
        },
        clientCertEnabled: {
          required: false,
          serializedName: 'properties.clientCertEnabled',
          type: {
            name: 'Boolean'
          }
        },
        hostNamesDisabled: {
          required: false,
          serializedName: 'properties.hostNamesDisabled',
          type: {
            name: 'Boolean'
          }
        },
        outboundIpAddresses: {
          required: false,
          readOnly: true,
          serializedName: 'properties.outboundIpAddresses',
          type: {
            name: 'String'
          }
        },
        containerSize: {
          required: false,
          serializedName: 'properties.containerSize',
          type: {
            name: 'Number'
          }
        },
        maxNumberOfWorkers: {
          required: false,
          serializedName: 'properties.maxNumberOfWorkers',
          type: {
            name: 'Number'
          }
        },
        cloningInfo: {
          required: false,
          serializedName: 'properties.cloningInfo',
          type: {
            name: 'Composite',
            className: 'CloningInfo'
          }
        },
        resourceGroup: {
          required: false,
          readOnly: true,
          serializedName: 'properties.resourceGroup',
          type: {
            name: 'String'
          }
        },
        isDefaultContainer: {
          required: false,
          readOnly: true,
          serializedName: 'properties.isDefaultContainer',
          type: {
            name: 'Boolean'
          }
        },
        defaultHostName: {
          required: false,
          readOnly: true,
          serializedName: 'properties.defaultHostName',
          type: {
            name: 'String'
          }
        }
      }
    }
  };
};

module.exports = DeletedSite;
