/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the RestoreRequest class.
 * @constructor
 * Description of a restore request
 *
 * @member {string} [storageAccountUrl] SAS URL to the container
 * 
 * @member {string} [blobName] Name of a blob which contains the backup
 * 
 * @member {boolean} [overwrite] True if the restore operation can overwrite
 * target site. "True" needed if trying to restore over an existing site.
 * 
 * @member {string} [siteName] Name of a site (Web App)
 * 
 * @member {array} [databases] Collection of databses which should be
 * restored. This list has to match the list of databases included in the
 * backup.
 * 
 * @member {boolean} [ignoreConflictingHostNames] Changes a logic when
 * restoring a site with custom domains. If "true", custom domains are
 * removed automatically. If "false", custom domains are added to
 * the site object when it is being restored, but that might fail
 * due to conflicts during the operation.
 * 
 * @member {string} [operationType] Operation type. Possible values include:
 * 'Default', 'Clone', 'Relocation'
 * 
 * @member {boolean} [adjustConnectionStrings] Gets or sets a flag showing if
 * SiteConfig.ConnectionStrings should be set in new site
 * 
 * @member {string} [hostingEnvironment] App Service Environment name, if
 * needed (only when restoring a site to an App Service Environment)
 * 
 */
function RestoreRequest() {
  RestoreRequest['super_'].call(this);
}

util.inherits(RestoreRequest, models['Resource']);

/**
 * Defines the metadata of RestoreRequest
 *
 * @returns {object} metadata of RestoreRequest
 *
 */
RestoreRequest.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'RestoreRequest',
    type: {
      name: 'Composite',
      className: 'RestoreRequest',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        kind: {
          required: false,
          serializedName: 'kind',
          type: {
            name: 'String'
          }
        },
        location: {
          required: true,
          serializedName: 'location',
          type: {
            name: 'String'
          }
        },
        type: {
          required: false,
          serializedName: 'type',
          type: {
            name: 'String'
          }
        },
        tags: {
          required: false,
          serializedName: 'tags',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        storageAccountUrl: {
          required: false,
          serializedName: 'properties.storageAccountUrl',
          type: {
            name: 'String'
          }
        },
        blobName: {
          required: false,
          serializedName: 'properties.blobName',
          type: {
            name: 'String'
          }
        },
        overwrite: {
          required: false,
          serializedName: 'properties.overwrite',
          type: {
            name: 'Boolean'
          }
        },
        siteName: {
          required: false,
          serializedName: 'properties.siteName',
          type: {
            name: 'String'
          }
        },
        databases: {
          required: false,
          serializedName: 'properties.databases',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'DatabaseBackupSettingElementType',
                type: {
                  name: 'Composite',
                  className: 'DatabaseBackupSetting'
                }
            }
          }
        },
        ignoreConflictingHostNames: {
          required: false,
          serializedName: 'properties.ignoreConflictingHostNames',
          type: {
            name: 'Boolean'
          }
        },
        operationType: {
          required: false,
          serializedName: 'properties.operationType',
          type: {
            name: 'Enum',
            allowedValues: [ 'Default', 'Clone', 'Relocation' ]
          }
        },
        adjustConnectionStrings: {
          required: false,
          serializedName: 'properties.adjustConnectionStrings',
          type: {
            name: 'Boolean'
          }
        },
        hostingEnvironment: {
          required: false,
          serializedName: 'properties.hostingEnvironment',
          type: {
            name: 'String'
          }
        }
      }
    }
  };
};

module.exports = RestoreRequest;
