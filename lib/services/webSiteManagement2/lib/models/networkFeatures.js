/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the NetworkFeatures class.
 * @constructor
 * This is an object used to store a full view of network features (presently
 * VNET integration and Hybrid Connections)
 * for a web app.
 *
 * @member {string} [virtualNetworkName] The Vnet Name
 * 
 * @member {object} [virtualNetworkConnection] The Vnet Summary view
 * 
 * @member {string} [virtualNetworkConnection.vnetResourceId] The vnet
 * resource id
 * 
 * @member {string} [virtualNetworkConnection.certThumbprint] The client
 * certificate thumbprint
 * 
 * @member {string} [virtualNetworkConnection.certBlob] A certificate file
 * (.cer) blob containing the public key of the private key used to
 * authenticate a
 * Point-To-Site VPN connection.
 * 
 * @member {array} [virtualNetworkConnection.routes] The routes that this
 * virtual network connection uses.
 * 
 * @member {boolean} [virtualNetworkConnection.resyncRequired] Flag to
 * determine if a resync is required
 * 
 * @member {string} [virtualNetworkConnection.dnsServers] Dns servers to be
 * used by this VNET. This should be a comma-separated list of IP addresses.
 * 
 * @member {array} [hybridConnections] The Hybrid Connections Summary view
 * 
 */
function NetworkFeatures() {
  NetworkFeatures['super_'].call(this);
}

util.inherits(NetworkFeatures, models['Resource']);

/**
 * Defines the metadata of NetworkFeatures
 *
 * @returns {object} metadata of NetworkFeatures
 *
 */
NetworkFeatures.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'NetworkFeatures',
    type: {
      name: 'Composite',
      className: 'NetworkFeatures',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        kind: {
          required: false,
          serializedName: 'kind',
          type: {
            name: 'String'
          }
        },
        location: {
          required: true,
          serializedName: 'location',
          type: {
            name: 'String'
          }
        },
        type: {
          required: false,
          serializedName: 'type',
          type: {
            name: 'String'
          }
        },
        tags: {
          required: false,
          serializedName: 'tags',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        virtualNetworkName: {
          required: false,
          serializedName: 'properties.virtualNetworkName',
          type: {
            name: 'String'
          }
        },
        virtualNetworkConnection: {
          required: false,
          serializedName: 'properties.virtualNetworkConnection',
          type: {
            name: 'Composite',
            className: 'VnetInfo'
          }
        },
        hybridConnections: {
          required: false,
          serializedName: 'properties.hybridConnections',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'RelayServiceConnectionEntityElementType',
                type: {
                  name: 'Composite',
                  className: 'RelayServiceConnectionEntity'
                }
            }
          }
        }
      }
    }
  };
};

module.exports = NetworkFeatures;
