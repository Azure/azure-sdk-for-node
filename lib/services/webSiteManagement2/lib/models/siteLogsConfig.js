/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the SiteLogsConfig class.
 * @constructor
 * Configuration of Azure web site
 *
 * @member {object} [applicationLogs] Application logs configuration
 * 
 * @member {object} [applicationLogs.fileSystem] Application logs to file
 * system configuration
 * 
 * @member {string} [applicationLogs.fileSystem.level] Log level. Possible
 * values include: 'Off', 'Verbose', 'Information', 'Warning', 'Error'
 * 
 * @member {object} [applicationLogs.azureTableStorage] Application logs to
 * azure table storage configuration
 * 
 * @member {string} [applicationLogs.azureTableStorage.level] Log level.
 * Possible values include: 'Off', 'Verbose', 'Information', 'Warning',
 * 'Error'
 * 
 * @member {string} [applicationLogs.azureTableStorage.sasUrl] SAS url to an
 * azure table with add/query/delete permissions
 * 
 * @member {object} [applicationLogs.azureBlobStorage] Application logs to
 * blob storage configuration
 * 
 * @member {string} [applicationLogs.azureBlobStorage.level] Log level.
 * Possible values include: 'Off', 'Verbose', 'Information', 'Warning',
 * 'Error'
 * 
 * @member {string} [applicationLogs.azureBlobStorage.sasUrl] SAS url to a
 * azure blob container with read/write/list/delete permissions
 * 
 * @member {number} [applicationLogs.azureBlobStorage.retentionInDays]
 * Retention in days.
 * Remove blobs older than X days.
 * 0 or lower means no retention.
 * 
 * @member {object} [httpLogs] Http logs configuration
 * 
 * @member {object} [httpLogs.fileSystem] Http logs to file system
 * configuration
 * 
 * @member {number} [httpLogs.fileSystem.retentionInMb] Maximum size in
 * megabytes that http log files can use.
 * When reached old log files will be removed to make space for
 * new ones.
 * Value can range between 25 and 100.
 * 
 * @member {number} [httpLogs.fileSystem.retentionInDays] Retention in days.
 * Remove files older than X days.
 * 0 or lower means no retention.
 * 
 * @member {boolean} [httpLogs.fileSystem.enabled] Enabled
 * 
 * @member {object} [httpLogs.azureBlobStorage] Http logs to azure blob
 * storage configuration
 * 
 * @member {string} [httpLogs.azureBlobStorage.sasUrl] SAS url to a azure blob
 * container with read/write/list/delete permissions
 * 
 * @member {number} [httpLogs.azureBlobStorage.retentionInDays] Retention in
 * days.
 * Remove blobs older than X days.
 * 0 or lower means no retention.
 * 
 * @member {boolean} [httpLogs.azureBlobStorage.enabled] Enabled
 * 
 * @member {object} [failedRequestsTracing] Failed requests tracing
 * configuration
 * 
 * @member {boolean} [failedRequestsTracing.enabled] Enabled
 * 
 * @member {object} [detailedErrorMessages] Detailed error messages
 * configuration
 * 
 * @member {boolean} [detailedErrorMessages.enabled] Enabled
 * 
 */
function SiteLogsConfig() {
  SiteLogsConfig['super_'].call(this);
}

util.inherits(SiteLogsConfig, models['Resource']);

/**
 * Defines the metadata of SiteLogsConfig
 *
 * @returns {object} metadata of SiteLogsConfig
 *
 */
SiteLogsConfig.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'SiteLogsConfig',
    type: {
      name: 'Composite',
      className: 'SiteLogsConfig',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        kind: {
          required: false,
          serializedName: 'kind',
          type: {
            name: 'String'
          }
        },
        location: {
          required: true,
          serializedName: 'location',
          type: {
            name: 'String'
          }
        },
        type: {
          required: false,
          serializedName: 'type',
          type: {
            name: 'String'
          }
        },
        tags: {
          required: false,
          serializedName: 'tags',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        applicationLogs: {
          required: false,
          serializedName: 'properties.applicationLogs',
          type: {
            name: 'Composite',
            className: 'ApplicationLogsConfig'
          }
        },
        httpLogs: {
          required: false,
          serializedName: 'properties.httpLogs',
          type: {
            name: 'Composite',
            className: 'HttpLogsConfig'
          }
        },
        failedRequestsTracing: {
          required: false,
          serializedName: 'properties.failedRequestsTracing',
          type: {
            name: 'Composite',
            className: 'EnabledConfig'
          }
        },
        detailedErrorMessages: {
          required: false,
          serializedName: 'properties.detailedErrorMessages',
          type: {
            name: 'Composite',
            className: 'EnabledConfig'
          }
        }
      }
    }
  };
};

module.exports = SiteLogsConfig;
