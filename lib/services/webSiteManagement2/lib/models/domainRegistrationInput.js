/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the DomainRegistrationInput class.
 * @constructor
 * Domain registration input for validation Api
 *
 * @member {string} [domainRegistrationInputName] Name of the domain
 * 
 * @member {object} [contactAdmin] Admin contact information
 * 
 * @member {object} [contactAdmin.addressMailing] Mailing address
 * 
 * @member {string} [contactAdmin.addressMailing.address1] Address 1
 * 
 * @member {string} [contactAdmin.addressMailing.address2] Address 2
 * 
 * @member {string} [contactAdmin.addressMailing.city] City
 * 
 * @member {string} [contactAdmin.addressMailing.country] Country
 * 
 * @member {string} [contactAdmin.addressMailing.postalCode] Postal code
 * 
 * @member {string} [contactAdmin.addressMailing.state] State
 * 
 * @member {string} [contactAdmin.email] Email address
 * 
 * @member {string} [contactAdmin.fax] Fax number
 * 
 * @member {string} [contactAdmin.jobTitle] Job title
 * 
 * @member {string} [contactAdmin.nameFirst] First name
 * 
 * @member {string} [contactAdmin.nameLast] Last name
 * 
 * @member {string} [contactAdmin.nameMiddle] Middle name
 * 
 * @member {string} [contactAdmin.organization] Organization
 * 
 * @member {string} [contactAdmin.phone] Phone number
 * 
 * @member {object} [contactBilling] Billing contact information
 * 
 * @member {object} [contactBilling.addressMailing] Mailing address
 * 
 * @member {string} [contactBilling.addressMailing.address1] Address 1
 * 
 * @member {string} [contactBilling.addressMailing.address2] Address 2
 * 
 * @member {string} [contactBilling.addressMailing.city] City
 * 
 * @member {string} [contactBilling.addressMailing.country] Country
 * 
 * @member {string} [contactBilling.addressMailing.postalCode] Postal code
 * 
 * @member {string} [contactBilling.addressMailing.state] State
 * 
 * @member {string} [contactBilling.email] Email address
 * 
 * @member {string} [contactBilling.fax] Fax number
 * 
 * @member {string} [contactBilling.jobTitle] Job title
 * 
 * @member {string} [contactBilling.nameFirst] First name
 * 
 * @member {string} [contactBilling.nameLast] Last name
 * 
 * @member {string} [contactBilling.nameMiddle] Middle name
 * 
 * @member {string} [contactBilling.organization] Organization
 * 
 * @member {string} [contactBilling.phone] Phone number
 * 
 * @member {object} [contactRegistrant] Registrant contact information
 * 
 * @member {object} [contactRegistrant.addressMailing] Mailing address
 * 
 * @member {string} [contactRegistrant.addressMailing.address1] Address 1
 * 
 * @member {string} [contactRegistrant.addressMailing.address2] Address 2
 * 
 * @member {string} [contactRegistrant.addressMailing.city] City
 * 
 * @member {string} [contactRegistrant.addressMailing.country] Country
 * 
 * @member {string} [contactRegistrant.addressMailing.postalCode] Postal code
 * 
 * @member {string} [contactRegistrant.addressMailing.state] State
 * 
 * @member {string} [contactRegistrant.email] Email address
 * 
 * @member {string} [contactRegistrant.fax] Fax number
 * 
 * @member {string} [contactRegistrant.jobTitle] Job title
 * 
 * @member {string} [contactRegistrant.nameFirst] First name
 * 
 * @member {string} [contactRegistrant.nameLast] Last name
 * 
 * @member {string} [contactRegistrant.nameMiddle] Middle name
 * 
 * @member {string} [contactRegistrant.organization] Organization
 * 
 * @member {string} [contactRegistrant.phone] Phone number
 * 
 * @member {object} [contactTech] Technical contact information
 * 
 * @member {object} [contactTech.addressMailing] Mailing address
 * 
 * @member {string} [contactTech.addressMailing.address1] Address 1
 * 
 * @member {string} [contactTech.addressMailing.address2] Address 2
 * 
 * @member {string} [contactTech.addressMailing.city] City
 * 
 * @member {string} [contactTech.addressMailing.country] Country
 * 
 * @member {string} [contactTech.addressMailing.postalCode] Postal code
 * 
 * @member {string} [contactTech.addressMailing.state] State
 * 
 * @member {string} [contactTech.email] Email address
 * 
 * @member {string} [contactTech.fax] Fax number
 * 
 * @member {string} [contactTech.jobTitle] Job title
 * 
 * @member {string} [contactTech.nameFirst] First name
 * 
 * @member {string} [contactTech.nameLast] Last name
 * 
 * @member {string} [contactTech.nameMiddle] Middle name
 * 
 * @member {string} [contactTech.organization] Organization
 * 
 * @member {string} [contactTech.phone] Phone number
 * 
 * @member {string} [registrationStatus] Domain registration status. Possible
 * values include: 'Active', 'Awaiting', 'Cancelled', 'Confiscated',
 * 'Disabled', 'Excluded', 'Expired', 'Failed', 'Held', 'Locked', 'Parked',
 * 'Pending', 'Reserved', 'Reverted', 'Suspended', 'Transferred', 'Unknown',
 * 'Unlocked', 'Unparked', 'Updated', 'JsonConverterFailed'
 * 
 * @member {string} [provisioningState] Domain provisioning state. Possible
 * values include: 'Succeeded', 'Failed', 'Canceled', 'InProgress', 'Deleting'
 * 
 * @member {array} [nameServers] Name servers
 * 
 * @member {boolean} [privacy] If true then domain privacy is enabled for this
 * domain
 * 
 * @member {date} [createdTime] Domain creation timestamp
 * 
 * @member {date} [expirationTime] Domain expiration timestamp
 * 
 * @member {date} [lastRenewedTime] Timestamp when the domain was renewed last
 * time
 * 
 * @member {boolean} [autoRenew] If true then domain will renewed automatically
 * 
 * @member {boolean} [readyForDnsRecordManagement] If true then Azure can
 * assign this domain to Web Apps. This value will be true if domain
 * registration status is active and it is hosted on name servers Azure has
 * programmatic access to
 * 
 * @member {array} [managedHostNames] All hostnames derived from the domain
 * and assigned to Azure resources
 * 
 * @member {object} [consent] Legal agreement consent
 * 
 * @member {array} [consent.agreementKeys] List of applicable legal agreement
 * keys. This list can be retrieved using ListLegalAgreements Api under
 * TopLevelDomain resource
 * 
 * @member {string} [consent.agreedBy] Client IP address
 * 
 * @member {date} [consent.agreedAt] Timestamp when the agreements were
 * accepted
 * 
 * @member {array} [domainNotRenewableReasons] Reasons why domain is not
 * renewable
 * 
 */
function DomainRegistrationInput() {
  DomainRegistrationInput['super_'].call(this);
}

util.inherits(DomainRegistrationInput, models['Resource']);

/**
 * Defines the metadata of DomainRegistrationInput
 *
 * @returns {object} metadata of DomainRegistrationInput
 *
 */
DomainRegistrationInput.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'DomainRegistrationInput',
    type: {
      name: 'Composite',
      className: 'DomainRegistrationInput',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        kind: {
          required: false,
          serializedName: 'kind',
          type: {
            name: 'String'
          }
        },
        location: {
          required: true,
          serializedName: 'location',
          type: {
            name: 'String'
          }
        },
        type: {
          required: false,
          serializedName: 'type',
          type: {
            name: 'String'
          }
        },
        tags: {
          required: false,
          serializedName: 'tags',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        domainRegistrationInputName: {
          required: false,
          serializedName: 'properties.name',
          type: {
            name: 'String'
          }
        },
        contactAdmin: {
          required: false,
          serializedName: 'properties.contactAdmin',
          type: {
            name: 'Composite',
            className: 'Contact'
          }
        },
        contactBilling: {
          required: false,
          serializedName: 'properties.contactBilling',
          type: {
            name: 'Composite',
            className: 'Contact'
          }
        },
        contactRegistrant: {
          required: false,
          serializedName: 'properties.contactRegistrant',
          type: {
            name: 'Composite',
            className: 'Contact'
          }
        },
        contactTech: {
          required: false,
          serializedName: 'properties.contactTech',
          type: {
            name: 'Composite',
            className: 'Contact'
          }
        },
        registrationStatus: {
          required: false,
          serializedName: 'properties.registrationStatus',
          type: {
            name: 'Enum',
            allowedValues: [ 'Active', 'Awaiting', 'Cancelled', 'Confiscated', 'Disabled', 'Excluded', 'Expired', 'Failed', 'Held', 'Locked', 'Parked', 'Pending', 'Reserved', 'Reverted', 'Suspended', 'Transferred', 'Unknown', 'Unlocked', 'Unparked', 'Updated', 'JsonConverterFailed' ]
          }
        },
        provisioningState: {
          required: false,
          serializedName: 'properties.provisioningState',
          type: {
            name: 'Enum',
            allowedValues: [ 'Succeeded', 'Failed', 'Canceled', 'InProgress', 'Deleting' ]
          }
        },
        nameServers: {
          required: false,
          serializedName: 'properties.nameServers',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        privacy: {
          required: false,
          serializedName: 'properties.privacy',
          type: {
            name: 'Boolean'
          }
        },
        createdTime: {
          required: false,
          serializedName: 'properties.createdTime',
          type: {
            name: 'DateTime'
          }
        },
        expirationTime: {
          required: false,
          serializedName: 'properties.expirationTime',
          type: {
            name: 'DateTime'
          }
        },
        lastRenewedTime: {
          required: false,
          serializedName: 'properties.lastRenewedTime',
          type: {
            name: 'DateTime'
          }
        },
        autoRenew: {
          required: false,
          serializedName: 'properties.autoRenew',
          type: {
            name: 'Boolean'
          }
        },
        readyForDnsRecordManagement: {
          required: false,
          serializedName: 'properties.readyForDnsRecordManagement',
          type: {
            name: 'Boolean'
          }
        },
        managedHostNames: {
          required: false,
          serializedName: 'properties.managedHostNames',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'HostNameElementType',
                type: {
                  name: 'Composite',
                  className: 'HostName'
                }
            }
          }
        },
        consent: {
          required: false,
          serializedName: 'properties.consent',
          type: {
            name: 'Composite',
            className: 'DomainPurchaseConsent'
          }
        },
        domainNotRenewableReasons: {
          required: false,
          serializedName: 'properties.domainNotRenewableReasons',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        }
      }
    }
  };
};

module.exports = DomainRegistrationInput;
