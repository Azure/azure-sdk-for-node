/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Metadata for a metric.
 *
 * @extends models['ProxyOnlyResource']
 */
class MetricDefinition extends models['ProxyOnlyResource'] {
  /**
   * Create a MetricDefinition.
   * @member {string} [metricDefinitionName] Name of the metric.
   * @member {string} [unit] Unit of the metric.
   * @member {string} [primaryAggregationType] Primary aggregation type.
   * @member {array} [metricAvailabilities] List of time grains supported for
   * the metric together with retention period.
   * @member {string} [displayName] Friendly name shown in the UI.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of MetricDefinition
   *
   * @returns {object} metadata of MetricDefinition
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'MetricDefinition',
      type: {
        name: 'Composite',
        className: 'MetricDefinition',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          kind: {
            required: false,
            serializedName: 'kind',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          metricDefinitionName: {
            required: false,
            readOnly: true,
            serializedName: 'properties.name',
            type: {
              name: 'String'
            }
          },
          unit: {
            required: false,
            readOnly: true,
            serializedName: 'properties.unit',
            type: {
              name: 'String'
            }
          },
          primaryAggregationType: {
            required: false,
            readOnly: true,
            serializedName: 'properties.primaryAggregationType',
            type: {
              name: 'String'
            }
          },
          metricAvailabilities: {
            required: false,
            readOnly: true,
            serializedName: 'properties.metricAvailabilities',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'MetricAvailabililyElementType',
                  type: {
                    name: 'Composite',
                    className: 'MetricAvailabilily'
                  }
              }
            }
          },
          displayName: {
            required: false,
            readOnly: true,
            serializedName: 'properties.displayName',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = MetricDefinition;
