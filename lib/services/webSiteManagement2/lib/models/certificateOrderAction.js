/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the CertificateOrderAction class.
 * @constructor
 * Represents a certificate action
 *
 * @member {string} [certificateOrderActionType] Type. Possible values
 * include: 'CertificateIssued', 'CertificateOrderCanceled',
 * 'CertificateOrderCreated', 'CertificateRevoked',
 * 'DomainValidationComplete', 'FraudDetected', 'OrgNameChange',
 * 'OrgValidationComplete', 'SanDrop'
 * 
 * @member {date} [createdAt] Time at which the certificate action was
 * performed
 * 
 */
function CertificateOrderAction() {
  CertificateOrderAction['super_'].call(this);
}

util.inherits(CertificateOrderAction, models['Resource']);

/**
 * Defines the metadata of CertificateOrderAction
 *
 * @returns {object} metadata of CertificateOrderAction
 *
 */
CertificateOrderAction.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'CertificateOrderAction',
    type: {
      name: 'Composite',
      className: 'CertificateOrderAction',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        kind: {
          required: false,
          serializedName: 'kind',
          type: {
            name: 'String'
          }
        },
        location: {
          required: true,
          serializedName: 'location',
          type: {
            name: 'String'
          }
        },
        type: {
          required: false,
          serializedName: 'type',
          type: {
            name: 'String'
          }
        },
        tags: {
          required: false,
          serializedName: 'tags',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        certificateOrderActionType: {
          required: false,
          serializedName: 'properties.type',
          type: {
            name: 'Enum',
            allowedValues: [ 'CertificateIssued', 'CertificateOrderCanceled', 'CertificateOrderCreated', 'CertificateRevoked', 'DomainValidationComplete', 'FraudDetected', 'OrgNameChange', 'OrgValidationComplete', 'SanDrop' ]
          }
        },
        createdAt: {
          required: false,
          serializedName: 'properties.createdAt',
          type: {
            name: 'DateTime'
          }
        }
      }
    }
  };
};

module.exports = CertificateOrderAction;
