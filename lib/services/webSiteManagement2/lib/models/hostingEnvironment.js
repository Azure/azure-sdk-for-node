/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the HostingEnvironment class.
 * @constructor
 * Description of an hostingEnvironment (App Service Environment)
 *
 * @member {string} [hostingEnvironmentName] Name of the hostingEnvironment
 * (App Service Environment)
 * 
 * @member {string} [hostingEnvironmentLocation] Location of the
 * hostingEnvironment (App Service Environment), e.g. "West US"
 * 
 * @member {string} [provisioningState] Provisioning state of the
 * hostingEnvironment (App Service Environment). Possible values include:
 * 'Succeeded', 'Failed', 'Canceled', 'InProgress', 'Deleting'
 * 
 * @member {string} [status] Current status of the hostingEnvironment (App
 * Service Environment). Possible values include: 'Preparing', 'Ready',
 * 'Scaling', 'Deleting'
 * 
 * @member {string} [vnetName] Name of the hostingEnvironment's (App Service
 * Environment) virtual network
 * 
 * @member {string} [vnetResourceGroupName] Resource group of the
 * hostingEnvironment's (App Service Environment) virtual network
 * 
 * @member {string} [vnetSubnetName] Subnet of the hostingEnvironment's (App
 * Service Environment) virtual network
 * 
 * @member {object} [virtualNetwork] Description of the hostingEnvironment's
 * (App Service Environment) virtual network
 * 
 * @member {string} [virtualNetwork.id] Resource id of the virtual network
 * 
 * @member {string} [virtualNetwork.name] Name of the virtual network
 * (read-only)
 * 
 * @member {string} [virtualNetwork.type] Resource type of the virtual network
 * (read-only)
 * 
 * @member {string} [virtualNetwork.subnet] Subnet within the virtual network
 * 
 * @member {string} [internalLoadBalancingMode] Specifies which endpoints to
 * serve internally in the hostingEnvironment's (App Service Environment)
 * VNET. Possible values include: 'None', 'Web', 'Publishing'
 * 
 * @member {string} [multiSize] Front-end VM size, e.g. "Medium", "Large"
 * 
 * @member {number} [multiRoleCount] Number of front-end instances
 * 
 * @member {array} [workerPools] Description of worker pools with worker size
 * ids, VM sizes, and number of workers in each pool
 * 
 * @member {number} [ipsslAddressCount] Number of IP SSL addresses reserved
 * for this hostingEnvironment (App Service Environment)
 * 
 * @member {string} [databaseEdition] Edition of the metadata database for the
 * hostingEnvironment (App Service Environment) e.g. "Standard"
 * 
 * @member {string} [databaseServiceObjective] Service objective of the
 * metadata database for the hostingEnvironment (App Service Environment)
 * e.g. "S0"
 * 
 * @member {number} [upgradeDomains] Number of upgrade domains of this
 * hostingEnvironment (App Service Environment)
 * 
 * @member {string} [subscriptionId] Subscription of the hostingEnvironment
 * (App Service Environment)
 * 
 * @member {string} [dnsSuffix] DNS suffix of the hostingEnvironment (App
 * Service Environment)
 * 
 * @member {string} [lastAction] Last deployment action on this
 * hostingEnvironment (App Service Environment)
 * 
 * @member {string} [lastActionResult] Result of the last deployment action on
 * this hostingEnvironment (App Service Environment)
 * 
 * @member {string} [allowedMultiSizes] List of comma separated strings
 * describing which VM sizes are allowed for front-ends
 * 
 * @member {string} [allowedWorkerSizes] List of comma separated strings
 * describing which VM sizes are allowed for workers
 * 
 * @member {number} [maximumNumberOfMachines] Maximum number of VMs in this
 * hostingEnvironment (App Service Environment)
 * 
 * @member {array} [vipMappings] Description of IP SSL mapping for this
 * hostingEnvironment (App Service Environment)
 * 
 * @member {array} [environmentCapacities] Current total, used, and available
 * worker capacities
 * 
 * @member {array} [networkAccessControlList] Access control list for
 * controlling traffic to the hostingEnvironment (App Service Environment)
 * 
 * @member {boolean} [environmentIsHealthy] True/false indicating whether the
 * hostingEnvironment (App Service Environment) is healthy
 * 
 * @member {string} [environmentStatus] Detailed message about with results of
 * the last check of the hostingEnvironment (App Service Environment)
 * 
 * @member {string} [resourceGroup] Resource group of the hostingEnvironment
 * (App Service Environment)
 * 
 * @member {string} [apiManagementAccountId] Api Management Account associated
 * with this Hosting Environment
 * 
 * @member {boolean} [suspended] True/false indicating whether the
 * hostingEnvironment is suspended. The environment can be suspended e.g.
 * when the management endpoint is no longer available
 * (most likely because NSG blocked the incoming traffic)
 * 
 * @member {array} [clusterSettings] Custom settings for changing the behavior
 * of the hosting environment
 * 
 */
function HostingEnvironment() {
  HostingEnvironment['super_'].call(this);
}

util.inherits(HostingEnvironment, models['Resource']);

/**
 * Defines the metadata of HostingEnvironment
 *
 * @returns {object} metadata of HostingEnvironment
 *
 */
HostingEnvironment.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'HostingEnvironment',
    type: {
      name: 'Composite',
      className: 'HostingEnvironment',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        kind: {
          required: false,
          serializedName: 'kind',
          type: {
            name: 'String'
          }
        },
        location: {
          required: true,
          serializedName: 'location',
          type: {
            name: 'String'
          }
        },
        type: {
          required: false,
          serializedName: 'type',
          type: {
            name: 'String'
          }
        },
        tags: {
          required: false,
          serializedName: 'tags',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        hostingEnvironmentName: {
          required: false,
          serializedName: 'properties.name',
          type: {
            name: 'String'
          }
        },
        hostingEnvironmentLocation: {
          required: false,
          serializedName: 'properties.location',
          type: {
            name: 'String'
          }
        },
        provisioningState: {
          required: false,
          serializedName: 'properties.provisioningState',
          type: {
            name: 'Enum',
            allowedValues: [ 'Succeeded', 'Failed', 'Canceled', 'InProgress', 'Deleting' ]
          }
        },
        status: {
          required: false,
          serializedName: 'properties.status',
          type: {
            name: 'Enum',
            allowedValues: [ 'Preparing', 'Ready', 'Scaling', 'Deleting' ]
          }
        },
        vnetName: {
          required: false,
          serializedName: 'properties.vnetName',
          type: {
            name: 'String'
          }
        },
        vnetResourceGroupName: {
          required: false,
          serializedName: 'properties.vnetResourceGroupName',
          type: {
            name: 'String'
          }
        },
        vnetSubnetName: {
          required: false,
          serializedName: 'properties.vnetSubnetName',
          type: {
            name: 'String'
          }
        },
        virtualNetwork: {
          required: false,
          serializedName: 'properties.virtualNetwork',
          type: {
            name: 'Composite',
            className: 'VirtualNetworkProfile'
          }
        },
        internalLoadBalancingMode: {
          required: false,
          serializedName: 'properties.internalLoadBalancingMode',
          type: {
            name: 'Enum',
            allowedValues: [ 'None', 'Web', 'Publishing' ]
          }
        },
        multiSize: {
          required: false,
          serializedName: 'properties.multiSize',
          type: {
            name: 'String'
          }
        },
        multiRoleCount: {
          required: false,
          serializedName: 'properties.multiRoleCount',
          type: {
            name: 'Number'
          }
        },
        workerPools: {
          required: false,
          serializedName: 'properties.workerPools',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'WorkerPoolElementType',
                type: {
                  name: 'Composite',
                  className: 'WorkerPool'
                }
            }
          }
        },
        ipsslAddressCount: {
          required: false,
          serializedName: 'properties.ipsslAddressCount',
          type: {
            name: 'Number'
          }
        },
        databaseEdition: {
          required: false,
          serializedName: 'properties.databaseEdition',
          type: {
            name: 'String'
          }
        },
        databaseServiceObjective: {
          required: false,
          serializedName: 'properties.databaseServiceObjective',
          type: {
            name: 'String'
          }
        },
        upgradeDomains: {
          required: false,
          serializedName: 'properties.upgradeDomains',
          type: {
            name: 'Number'
          }
        },
        subscriptionId: {
          required: false,
          serializedName: 'properties.subscriptionId',
          type: {
            name: 'String'
          }
        },
        dnsSuffix: {
          required: false,
          serializedName: 'properties.dnsSuffix',
          type: {
            name: 'String'
          }
        },
        lastAction: {
          required: false,
          serializedName: 'properties.lastAction',
          type: {
            name: 'String'
          }
        },
        lastActionResult: {
          required: false,
          serializedName: 'properties.lastActionResult',
          type: {
            name: 'String'
          }
        },
        allowedMultiSizes: {
          required: false,
          serializedName: 'properties.allowedMultiSizes',
          type: {
            name: 'String'
          }
        },
        allowedWorkerSizes: {
          required: false,
          serializedName: 'properties.allowedWorkerSizes',
          type: {
            name: 'String'
          }
        },
        maximumNumberOfMachines: {
          required: false,
          serializedName: 'properties.maximumNumberOfMachines',
          type: {
            name: 'Number'
          }
        },
        vipMappings: {
          required: false,
          serializedName: 'properties.vipMappings',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'VirtualIPMappingElementType',
                type: {
                  name: 'Composite',
                  className: 'VirtualIPMapping'
                }
            }
          }
        },
        environmentCapacities: {
          required: false,
          serializedName: 'properties.environmentCapacities',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'StampCapacityElementType',
                type: {
                  name: 'Composite',
                  className: 'StampCapacity'
                }
            }
          }
        },
        networkAccessControlList: {
          required: false,
          serializedName: 'properties.networkAccessControlList',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'NetworkAccessControlEntryElementType',
                type: {
                  name: 'Composite',
                  className: 'NetworkAccessControlEntry'
                }
            }
          }
        },
        environmentIsHealthy: {
          required: false,
          serializedName: 'properties.environmentIsHealthy',
          type: {
            name: 'Boolean'
          }
        },
        environmentStatus: {
          required: false,
          serializedName: 'properties.environmentStatus',
          type: {
            name: 'String'
          }
        },
        resourceGroup: {
          required: false,
          serializedName: 'properties.resourceGroup',
          type: {
            name: 'String'
          }
        },
        apiManagementAccountId: {
          required: false,
          serializedName: 'properties.apiManagementAccountId',
          type: {
            name: 'String'
          }
        },
        suspended: {
          required: false,
          serializedName: 'properties.suspended',
          type: {
            name: 'Boolean'
          }
        },
        clusterSettings: {
          required: false,
          serializedName: 'properties.clusterSettings',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'NameValuePairElementType',
                type: {
                  name: 'Composite',
                  className: 'NameValuePair'
                }
            }
          }
        }
      }
    }
  };
};

module.exports = HostingEnvironment;
