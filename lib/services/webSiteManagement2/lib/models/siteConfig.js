/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the SiteConfig class.
 * @constructor
 * Configuration of Azure web site
 *
 * @member {number} [numberOfWorkers] Number of workers
 * 
 * @member {array} [defaultDocuments] Default documents
 * 
 * @member {string} [netFrameworkVersion] Net Framework Version
 * 
 * @member {string} [phpVersion] Version of PHP
 * 
 * @member {string} [pythonVersion] Version of Python
 * 
 * @member {boolean} [requestTracingEnabled] Enable request tracing
 * 
 * @member {date} [requestTracingExpirationTime] Request tracing expiration
 * time
 * 
 * @member {boolean} [remoteDebuggingEnabled] Remote Debugging Enabled
 * 
 * @member {string} [remoteDebuggingVersion] Remote Debugging Version
 * 
 * @member {boolean} [httpLoggingEnabled] HTTP logging Enabled
 * 
 * @member {number} [logsDirectorySizeLimit] HTTP Logs Directory size limit
 * 
 * @member {boolean} [detailedErrorLoggingEnabled] Detailed error logging
 * enabled
 * 
 * @member {string} [publishingUsername] Publishing user name
 * 
 * @member {string} [publishingPassword] Publishing password
 * 
 * @member {array} [appSettings] Application Settings
 * 
 * @member {array} [metadata] Site Metadata
 * 
 * @member {array} [connectionStrings] Connection strings
 * 
 * @member {array} [handlerMappings] Handler mappings
 * 
 * @member {string} [documentRoot] Document root
 * 
 * @member {string} [scmType] SCM type
 * 
 * @member {boolean} [use32BitWorkerProcess] Use 32 bit worker process
 * 
 * @member {boolean} [webSocketsEnabled] Web socket enabled.
 * 
 * @member {boolean} [alwaysOn] Always On
 * 
 * @member {string} [javaVersion] Java version
 * 
 * @member {string} [javaContainer] Java container
 * 
 * @member {string} [javaContainerVersion] Java container version
 * 
 * @member {string} [managedPipelineMode] Managed pipeline mode. Possible
 * values include: 'Integrated', 'Classic'
 * 
 * @member {array} [virtualApplications] Virtual applications
 * 
 * @member {string} [loadBalancing] Site load balancing. Possible values
 * include: 'WeightedRoundRobin', 'LeastRequests', 'LeastResponseTime',
 * 'WeightedTotalTraffic', 'RequestHash'
 * 
 * @member {object} [experiments] This is work around for polymophic types
 * 
 * @member {array} [experiments.rampUpRules] List of
 * {Microsoft.Web.Hosting.Administration.RampUpRule} objects.
 * 
 * @member {object} [limits] Site limits
 * 
 * @member {number} [limits.maxPercentageCpu] Maximum allowed CPU usage
 * percentage
 * 
 * @member {number} [limits.maxMemoryInMb] Maximum allowed memory usage in MB
 * 
 * @member {number} [limits.maxDiskSizeInMb] Maximum allowed disk size usage
 * in MB
 * 
 * @member {boolean} [autoHealEnabled] Auto heal enabled
 * 
 * @member {object} [autoHealRules] Auto heal rules
 * 
 * @member {object} [autoHealRules.triggers] Triggers - Conditions that
 * describe when to execute the auto-heal actions
 * 
 * @member {object} [autoHealRules.triggers.requests] Requests - Defines a
 * rule based on total requests
 * 
 * @member {number} [autoHealRules.triggers.requests.count] Count
 * 
 * @member {string} [autoHealRules.triggers.requests.timeInterval] TimeInterval
 * 
 * @member {number} [autoHealRules.triggers.privateBytesInKB] PrivateBytesInKB
 * - Defines a rule based on private bytes
 * 
 * @member {array} [autoHealRules.triggers.statusCodes] StatusCodes - Defines
 * a rule based on status codes
 * 
 * @member {object} [autoHealRules.triggers.slowRequests] SlowRequests -
 * Defines a rule based on request execution time
 * 
 * @member {string} [autoHealRules.triggers.slowRequests.timeTaken] TimeTaken
 * 
 * @member {number} [autoHealRules.triggers.slowRequests.count] Count
 * 
 * @member {string} [autoHealRules.triggers.slowRequests.timeInterval]
 * TimeInterval
 * 
 * @member {object} [autoHealRules.actions] Actions - Actions to be executed
 * when a rule is triggered
 * 
 * @member {string} [autoHealRules.actions.actionType] ActionType - predefined
 * action to be taken. Possible values include: 'Recycle', 'LogEvent',
 * 'CustomAction'
 * 
 * @member {object} [autoHealRules.actions.customAction] CustomAction - custom
 * action to be taken
 * 
 * @member {string} [autoHealRules.actions.customAction.exe] Executable to be
 * run
 * 
 * @member {string} [autoHealRules.actions.customAction.parameters] Parameters
 * for the executable
 * 
 * @member {string} [autoHealRules.actions.minProcessExecutionTime]
 * MinProcessExecutionTime - minimum time the process must execute
 * before taking the action
 * 
 * @member {string} [tracingOptions] Tracing options
 * 
 * @member {string} [vnetName] Vnet name
 * 
 * @member {object} [cors] Cross-Origin Resource Sharing (CORS) settings.
 * 
 * @member {array} [cors.allowedOrigins] Gets or sets the list of origins that
 * should be allowed to make cross-origin
 * calls (for example: http://example.com:12345). Use "*" to allow
 * all.
 * 
 * @member {object} [apiDefinition] Information about the formal API
 * definition for the web app.
 * 
 * @member {string} [apiDefinition.url] The URL of the API definition.
 * 
 * @member {string} [autoSwapSlotName] Auto swap slot name
 * 
 * @member {boolean} [localMySqlEnabled] Local mysql enabled
 * 
 * @member {array} [ipSecurityRestrictions] Ip Security restrictions
 * 
 */
function SiteConfig() {
  SiteConfig['super_'].call(this);
}

util.inherits(SiteConfig, models['Resource']);

/**
 * Defines the metadata of SiteConfig
 *
 * @returns {object} metadata of SiteConfig
 *
 */
SiteConfig.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'SiteConfig',
    type: {
      name: 'Composite',
      className: 'SiteConfig',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        kind: {
          required: false,
          serializedName: 'kind',
          type: {
            name: 'String'
          }
        },
        location: {
          required: true,
          serializedName: 'location',
          type: {
            name: 'String'
          }
        },
        type: {
          required: false,
          serializedName: 'type',
          type: {
            name: 'String'
          }
        },
        tags: {
          required: false,
          serializedName: 'tags',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        numberOfWorkers: {
          required: false,
          serializedName: 'properties.numberOfWorkers',
          type: {
            name: 'Number'
          }
        },
        defaultDocuments: {
          required: false,
          serializedName: 'properties.defaultDocuments',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        netFrameworkVersion: {
          required: false,
          serializedName: 'properties.netFrameworkVersion',
          type: {
            name: 'String'
          }
        },
        phpVersion: {
          required: false,
          serializedName: 'properties.phpVersion',
          type: {
            name: 'String'
          }
        },
        pythonVersion: {
          required: false,
          serializedName: 'properties.pythonVersion',
          type: {
            name: 'String'
          }
        },
        requestTracingEnabled: {
          required: false,
          serializedName: 'properties.requestTracingEnabled',
          type: {
            name: 'Boolean'
          }
        },
        requestTracingExpirationTime: {
          required: false,
          serializedName: 'properties.requestTracingExpirationTime',
          type: {
            name: 'DateTime'
          }
        },
        remoteDebuggingEnabled: {
          required: false,
          serializedName: 'properties.remoteDebuggingEnabled',
          type: {
            name: 'Boolean'
          }
        },
        remoteDebuggingVersion: {
          required: false,
          serializedName: 'properties.remoteDebuggingVersion',
          type: {
            name: 'String'
          }
        },
        httpLoggingEnabled: {
          required: false,
          serializedName: 'properties.httpLoggingEnabled',
          type: {
            name: 'Boolean'
          }
        },
        logsDirectorySizeLimit: {
          required: false,
          serializedName: 'properties.logsDirectorySizeLimit',
          type: {
            name: 'Number'
          }
        },
        detailedErrorLoggingEnabled: {
          required: false,
          serializedName: 'properties.detailedErrorLoggingEnabled',
          type: {
            name: 'Boolean'
          }
        },
        publishingUsername: {
          required: false,
          serializedName: 'properties.publishingUsername',
          type: {
            name: 'String'
          }
        },
        publishingPassword: {
          required: false,
          serializedName: 'properties.publishingPassword',
          type: {
            name: 'String'
          }
        },
        appSettings: {
          required: false,
          serializedName: 'properties.appSettings',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'NameValuePairElementType',
                type: {
                  name: 'Composite',
                  className: 'NameValuePair'
                }
            }
          }
        },
        metadata: {
          required: false,
          serializedName: 'properties.metadata',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'NameValuePairElementType',
                type: {
                  name: 'Composite',
                  className: 'NameValuePair'
                }
            }
          }
        },
        connectionStrings: {
          required: false,
          serializedName: 'properties.connectionStrings',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'ConnStringInfoElementType',
                type: {
                  name: 'Composite',
                  className: 'ConnStringInfo'
                }
            }
          }
        },
        handlerMappings: {
          required: false,
          serializedName: 'properties.handlerMappings',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'HandlerMappingElementType',
                type: {
                  name: 'Composite',
                  className: 'HandlerMapping'
                }
            }
          }
        },
        documentRoot: {
          required: false,
          serializedName: 'properties.documentRoot',
          type: {
            name: 'String'
          }
        },
        scmType: {
          required: false,
          serializedName: 'properties.scmType',
          type: {
            name: 'String'
          }
        },
        use32BitWorkerProcess: {
          required: false,
          serializedName: 'properties.use32BitWorkerProcess',
          type: {
            name: 'Boolean'
          }
        },
        webSocketsEnabled: {
          required: false,
          serializedName: 'properties.webSocketsEnabled',
          type: {
            name: 'Boolean'
          }
        },
        alwaysOn: {
          required: false,
          serializedName: 'properties.alwaysOn',
          type: {
            name: 'Boolean'
          }
        },
        javaVersion: {
          required: false,
          serializedName: 'properties.javaVersion',
          type: {
            name: 'String'
          }
        },
        javaContainer: {
          required: false,
          serializedName: 'properties.javaContainer',
          type: {
            name: 'String'
          }
        },
        javaContainerVersion: {
          required: false,
          serializedName: 'properties.javaContainerVersion',
          type: {
            name: 'String'
          }
        },
        managedPipelineMode: {
          required: false,
          serializedName: 'properties.managedPipelineMode',
          type: {
            name: 'Enum',
            allowedValues: [ 'Integrated', 'Classic' ]
          }
        },
        virtualApplications: {
          required: false,
          serializedName: 'properties.virtualApplications',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'VirtualApplicationElementType',
                type: {
                  name: 'Composite',
                  className: 'VirtualApplication'
                }
            }
          }
        },
        loadBalancing: {
          required: false,
          serializedName: 'properties.loadBalancing',
          type: {
            name: 'Enum',
            allowedValues: [ 'WeightedRoundRobin', 'LeastRequests', 'LeastResponseTime', 'WeightedTotalTraffic', 'RequestHash' ]
          }
        },
        experiments: {
          required: false,
          serializedName: 'properties.experiments',
          type: {
            name: 'Composite',
            className: 'Experiments'
          }
        },
        limits: {
          required: false,
          serializedName: 'properties.limits',
          type: {
            name: 'Composite',
            className: 'SiteLimits'
          }
        },
        autoHealEnabled: {
          required: false,
          serializedName: 'properties.autoHealEnabled',
          type: {
            name: 'Boolean'
          }
        },
        autoHealRules: {
          required: false,
          serializedName: 'properties.autoHealRules',
          type: {
            name: 'Composite',
            className: 'AutoHealRules'
          }
        },
        tracingOptions: {
          required: false,
          serializedName: 'properties.tracingOptions',
          type: {
            name: 'String'
          }
        },
        vnetName: {
          required: false,
          serializedName: 'properties.vnetName',
          type: {
            name: 'String'
          }
        },
        cors: {
          required: false,
          serializedName: 'properties.cors',
          type: {
            name: 'Composite',
            className: 'CorsSettings'
          }
        },
        apiDefinition: {
          required: false,
          serializedName: 'properties.apiDefinition',
          type: {
            name: 'Composite',
            className: 'ApiDefinitionInfo'
          }
        },
        autoSwapSlotName: {
          required: false,
          serializedName: 'properties.autoSwapSlotName',
          type: {
            name: 'String'
          }
        },
        localMySqlEnabled: {
          required: false,
          serializedName: 'properties.localMySqlEnabled',
          type: {
            name: 'Boolean'
          }
        },
        ipSecurityRestrictions: {
          required: false,
          serializedName: 'properties.ipSecurityRestrictions',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'IpSecurityRestrictionElementType',
                type: {
                  name: 'Composite',
                  className: 'IpSecurityRestriction'
                }
            }
          }
        }
      }
    }
  };
};

module.exports = SiteConfig;
