/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var util = require('util');
var _ = require('underscore');
var azureCommon = require('azure-common');
var Service = azureCommon.Service;
var WebResource = azureCommon.WebResource;

var WebSiteManagementClient = ( /** @lends WebSiteManagementClient */ function() {
  /**
   * @class
   * The Windows Azure Web Sites management API provides a RESTful set of web
   * services that interact with Windows Azure Web Sites service to manage
   * your web sites. The API has entities that capture the relationship
   * between an end user and the Windows Azure Web Sites service.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn166981.aspx for
   * more information)
   * Initializes a new instance of the WebSiteManagementClient class.
   * @constructor
   * 
   * @param {SubscriptionCloudCredentials} credentials Gets subscription
   * credentials which uniquely identify Microsoft Azure subscription. The
   * subscription ID forms part of the URI for every service call.
   * 
   * @param {string} [credentials.subscriptionId]
   * 
   * @param {string} [baseUri] Gets the URI used as the base for all cloud
   * service requests.
   * 
   * @param {Array} filters
   */
  function WebSiteManagementClient(credentials, baseUri, filters) {
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    
    WebSiteManagementClient['super_'].call(this, credentials, filters);
    
    this.credentials = credentials;
    this.baseUri = baseUri;
    if (this.baseUri === null || this.baseUri === undefined) {
      this.baseUri = 'https://management.core.windows.net';
    }
    if (this.apiVersion === null || this.apiVersion === undefined) {
      this.apiVersion = '2014-04-01';
    }
    if (this.longRunningOperationInitialTimeout === null || this.longRunningOperationInitialTimeout === undefined) {
      this.longRunningOperationInitialTimeout = -1;
    }
    if (this.longRunningOperationRetryTimeout === null || this.longRunningOperationRetryTimeout === undefined) {
      this.longRunningOperationRetryTimeout = -1;
    }
    /**
     * Provides an instance of the
     * [ServerFarmOperations](-ServerFarmOperations.html) object.
     * @type {object}
     */
    this.serverFarms = new ServerFarmOperations(this);
    /**
     * Provides an instance of the [WebSiteOperations](-WebSiteOperations.html)
     * object.
     * @type {object}
     */
    this.webSites = new WebSiteOperations(this);
  }
  
  util.inherits(WebSiteManagementClient, Service);
  
  /**
   * Begins deleting a resource group.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  WebSiteManagementClient.prototype.beginDeletingResourceGroup = function(resourceGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.credentials.subscriptionId ? this.credentials.subscriptionId.trim() : '') + '/resourcegroups/' + resourceGroupName.trim() + '?';
    url2 = url2 + 'api-version=2014-04-01';
    var baseUrl = this.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Creates or updates the resource group.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {ResourceGroupCreateOrUpdateParameters} parameters Parameters
   * supplied to the operation.
   * 
   * @param {string} parameters.location The location of the resource group. It
   * cannot be changed after the resource group has been created. Has to be
   * one of the supported Azure Locations, such as West US, East US, West
   * Europe, East Asia, or on-premise/alternate provider location names.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  WebSiteManagementClient.prototype.createOrUpdateResourceGroup = function(resourceGroupName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.location === null || parameters.location === undefined) {
      return callback(new Error('parameters.location cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.credentials.subscriptionId ? this.credentials.subscriptionId.trim() : '') + '/resourcegroups/' + resourceGroupName.trim() + '?';
    url2 = url2 + 'api-version=2014-04-01';
    var baseUrl = this.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var resourceGroupCreateOrUpdateParametersValue = {};
    requestDoc = resourceGroupCreateOrUpdateParametersValue;
    
    resourceGroupCreateOrUpdateParametersValue['location'] = parameters.location;
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var nameValue = responseDoc['name'];
        if (nameValue) {
          var nameInstance = nameValue;
          result.name = nameInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Gets all resource groups in the subscription.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  WebSiteManagementClient.prototype.getResourceGroups = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.credentials.subscriptionId ? this.credentials.subscriptionId.trim() : '') + '/resourcegroups?';
    url2 = url2 + 'api-version=2014-04-01';
    var baseUrl = this.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Register the resource provider with a subscription.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  WebSiteManagementClient.prototype.registerResourceProvider = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.credentials.subscriptionId ? this.credentials.subscriptionId.trim() : '') + '/providers/Microsoft.Web/register?';
    url2 = url2 + 'api-version=2014-04-01';
    var baseUrl = this.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Unregister the resource provider with a subscription.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  WebSiteManagementClient.prototype.unregisterResourceProvider = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.credentials.subscriptionId ? this.credentials.subscriptionId.trim() : '') + '/providers/Microsoft.Web/unregister?';
    url2 = url2 + 'api-version=2014-04-01';
    var baseUrl = this.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return WebSiteManagementClient;
})();
exports.WebSiteManagementClient = WebSiteManagementClient;

var ServerFarmOperations = ( /** @lends ServerFarmOperations */ function() {
  /**
   * @class
   * Operations for managing the server farm in a resource group.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx for
   * more information)
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [WebSiteManagementClient] {@link
   * WebSiteManagementClient~WebSiteManagementClient}.
   * See [serverFarms] {@link
   * WebSiteManagementClient~WebSiteManagementClient#serverFarms}.
   * Initializes a new instance of the ServerFarmOperations class.
   * @constructor
   * 
   * @param {WebSiteManagementClient} client Reference to the service client.
   */
  function ServerFarmOperations(client) {
    this.client = client;
  }
  
  /**
   * You can create a server farm by issuing an HTTP POST request. Only one
   * server farm per webspace is permitted. You can retrieve server farm
   * details by using HTTP GET, change server farm properties by using HTTP
   * PUT, and delete a server farm by using HTTP DELETE. A request body is
   * required for server farm creation (HTTP POST) and server farm update
   * (HTTP PUT).  Warning: Creating a server farm changes your webspace's
   * Compute Mode from Shared to Dedicated. You will be charged from the
   * moment the server farm is created, even if all your sites are still
   * running in Free mode.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx for
   * more information)
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {ServerFarmCreateOrUpdateParameters} parameters Parameters supplied
   * to the Create Server Farm operation.
   * 
   * @param {ServerFarm} parameters.serverFarm Gets or sets information about a
   * server farm being created of updated.
   * 
   * @param {ServerFarmProperties} [parameters.serverFarm.properties]
   * Represents the properties of the server farm.
   * 
   * @param {number} [parameters.serverFarm.properties.currentNumberOfWorkers]
   * The current number of Virtual Machines (VMs) in the server farm.
   * 
   * @param {ServerFarmWorkerSize}
   * [parameters.serverFarm.properties.currentWorkerSize] The current worker
   * size. Possible values are Small, Medium, or Large.
   * 
   * @param {number} [parameters.serverFarm.properties.numberOfWorkers] The
   * instance count, which is the number of virtual machines dedicated to the
   * farm. Supported values are 1-10.
   * 
   * @param {string} [parameters.serverFarm.properties.sku] The server farm SKU.
   * 
   * @param {ServerFarmWorkerSize}
   * [parameters.serverFarm.properties.workerSize] The instance size. Possible
   * values are Small, Medium, or Large.
   * 
   * @param {ServerFarmStatus} [parameters.serverFarm.properties.status] The
   * server farm status.
   * 
   * @param {string} [parameters.serverFarm.properties.provisioningState] Gets
   * or sets resource provisioning state.
   * 
   * @param {string} [parameters.serverFarm.id] Gets the ID of the resource.
   * 
   * @param {string} [parameters.serverFarm.name] The name of the server farm.
   * 
   * @param {string} parameters.serverFarm.location Gets or sets the location
   * of the resource.
   * 
   * @param {object} [parameters.serverFarm.tags] Gets or sets the tags
   * attached to the resource.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ServerFarmOperations.prototype.createOrUpdate = function(resourceGroupName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.serverFarm === null || parameters.serverFarm === undefined) {
      return callback(new Error('parameters.serverFarm cannot be null.'));
    }
    if (parameters.serverFarm.location === null || parameters.serverFarm.location === undefined) {
      return callback(new Error('parameters.serverFarm.location cannot be null.'));
    }
    if (parameters.serverFarm.properties) {
      if (parameters.serverFarm.properties.numberOfWorkers === null || parameters.serverFarm.properties.numberOfWorkers === undefined) {
        return callback(new Error('parameters.serverFarm.properties.numberOfWorkers cannot be null.'));
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/resourceGroups/' + resourceGroupName.trim() + '/providers/Microsoft.Web/serverFarms/' + parameters.serverFarm.name.trim() + '?';
    url2 = url2 + 'api-version=2014-04-01';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var serverFarmCreateOrUpdateParametersValue = {};
    requestDoc = serverFarmCreateOrUpdateParametersValue;
    
    if (parameters.serverFarm.properties) {
      var propertiesValue = {};
      serverFarmCreateOrUpdateParametersValue['properties'] = propertiesValue;
      
      if (parameters.serverFarm.properties.currentNumberOfWorkers) {
        propertiesValue['currentNumberOfWorkers'] = parameters.serverFarm.properties.currentNumberOfWorkers;
      }
      
      if (parameters.serverFarm.properties.currentWorkerSize) {
        propertiesValue['currentWorkerSize'] = parameters.serverFarm.properties.currentWorkerSize ? parameters.serverFarm.properties.currentWorkerSize.toString() : 'Small';
      }
      
      propertiesValue['numberOfWorkers'] = parameters.serverFarm.properties.numberOfWorkers;
      
      if (parameters.serverFarm.properties.sku) {
        propertiesValue['sku'] = parameters.serverFarm.properties.sku;
      }
      
      propertiesValue['workerSize'] = parameters.serverFarm.properties.workerSize ? parameters.serverFarm.properties.workerSize.toString() : 'Small';
      
      propertiesValue['status'] = parameters.serverFarm.properties.status ? parameters.serverFarm.properties.status.toString() : 'Ready';
      
      if (parameters.serverFarm.properties.provisioningState) {
        propertiesValue['provisioningState'] = parameters.serverFarm.properties.provisioningState;
      }
    }
    
    if (parameters.serverFarm.id) {
      serverFarmCreateOrUpdateParametersValue['id'] = parameters.serverFarm.id;
    }
    
    if (parameters.serverFarm.name) {
      serverFarmCreateOrUpdateParametersValue['name'] = parameters.serverFarm.name;
    }
    
    serverFarmCreateOrUpdateParametersValue['location'] = parameters.serverFarm.location;
    
    var tagsDictionary = {};
    if (parameters.serverFarm.tags) {
      for (var tagsKey in parameters.serverFarm.tags) {
        var tagsValue = parameters.serverFarm.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
    }
    serverFarmCreateOrUpdateParametersValue['tags'] = tagsDictionary;
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      var serverFarmValue = responseDoc['ServerFarm'];
      if (serverFarmValue) {
        var serverFarmInstance = {};
        
        var serverFarmInstance2 = { tags: {} };
        result.serverFarm = serverFarmInstance2;
        
        var propertiesValue2 = serverFarmValue['properties'];
        if (propertiesValue2) {
          var propertiesInstance = {};
          serverFarmInstance2.properties = propertiesInstance;
          
          var currentNumberOfWorkersValue = propertiesValue2['currentNumberOfWorkers'];
          if (currentNumberOfWorkersValue) {
            var currentNumberOfWorkersInstance = currentNumberOfWorkersValue;
            propertiesInstance.currentNumberOfWorkers = currentNumberOfWorkersInstance;
          }
          
          var currentWorkerSizeValue = propertiesValue2['currentWorkerSize'];
          if (currentWorkerSizeValue) {
            var currentWorkerSizeInstance = currentWorkerSizeValue;
            propertiesInstance.currentWorkerSize = currentWorkerSizeInstance;
          }
          
          var numberOfWorkersValue = propertiesValue2['numberOfWorkers'];
          if (numberOfWorkersValue) {
            var numberOfWorkersInstance = numberOfWorkersValue;
            propertiesInstance.numberOfWorkers = numberOfWorkersInstance;
          }
          
          var skuValue = propertiesValue2['sku'];
          if (skuValue) {
            var skuInstance = skuValue;
            propertiesInstance.sku = skuInstance;
          }
          
          var workerSizeValue = propertiesValue2['workerSize'];
          if (workerSizeValue) {
            var workerSizeInstance = workerSizeValue;
            propertiesInstance.workerSize = workerSizeInstance;
          }
          
          var statusValue = propertiesValue2['status'];
          if (statusValue) {
            var statusInstance = statusValue;
            propertiesInstance.status = statusInstance;
          }
          
          var provisioningStateValue = propertiesValue2['provisioningState'];
          if (provisioningStateValue) {
            var provisioningStateInstance = provisioningStateValue;
            propertiesInstance.provisioningState = provisioningStateInstance;
          }
        }
        
        var idValue = serverFarmValue['id'];
        if (idValue) {
          var idInstance = idValue;
          serverFarmInstance2.id = idInstance;
        }
        
        var nameValue = serverFarmValue['name'];
        if (nameValue) {
          var nameInstance = nameValue;
          serverFarmInstance2.name = nameInstance;
        }
        
        var locationValue = serverFarmValue['location'];
        if (locationValue) {
          var locationInstance = locationValue;
          serverFarmInstance2.location = locationInstance;
        }
        
        var tagsSequenceElement = serverFarmValue['tags'];
        if (tagsSequenceElement) {
          for (var property in tagsSequenceElement) {
            var tagsKey2 = property;
            var tagsValue2 = tagsSequenceElement[property];
            serverFarmInstance2.tags[tagsKey2] = tagsValue2;
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * TBD.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} serverFarmName The name of the server farm.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ServerFarmOperations.prototype.delete = function(resourceGroupName, serverFarmName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (serverFarmName === null || serverFarmName === undefined) {
      return callback(new Error('serverFarmName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/resourceGroups/' + resourceGroupName.trim() + '/providers/Microsoft.Web/serverFarms/' + serverFarmName.trim() + '?';
    url2 = url2 + 'api-version=2014-04-01';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * You can create a server farm by issuing an HTTP POST request. Only one
   * server farm per webspace is permitted. You can retrieve server farm
   * details by using HTTP GET, change server farm properties by using HTTP
   * PUT, and delete a server farm by using HTTP DELETE. A request body is
   * required for server farm creation (HTTP POST) and server farm update
   * (HTTP PUT).  Warning: Creating a server farm changes your webspace's
   * Compute Mode from Shared to Dedicated. You will be charged from the
   * moment the server farm is created, even if all your sites are still
   * running in Free mode.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx for
   * more information)
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} serverFarmName The name of the server farm.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ServerFarmOperations.prototype.get = function(resourceGroupName, serverFarmName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (serverFarmName === null || serverFarmName === undefined) {
      return callback(new Error('serverFarmName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/resourceGroups/' + resourceGroupName.trim() + '/providers/Microsoft.Web/serverFarms/' + serverFarmName.trim() + '?';
    url2 = url2 + 'api-version=2014-04-01';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var serverFarmInstance = { tags: {} };
        result.serverFarm = serverFarmInstance;
        
        var propertiesValue = responseDoc['properties'];
        if (propertiesValue) {
          var propertiesInstance = {};
          serverFarmInstance.properties = propertiesInstance;
          
          var currentNumberOfWorkersValue = propertiesValue['currentNumberOfWorkers'];
          if (currentNumberOfWorkersValue) {
            var currentNumberOfWorkersInstance = currentNumberOfWorkersValue;
            propertiesInstance.currentNumberOfWorkers = currentNumberOfWorkersInstance;
          }
          
          var currentWorkerSizeValue = propertiesValue['currentWorkerSize'];
          if (currentWorkerSizeValue) {
            var currentWorkerSizeInstance = currentWorkerSizeValue;
            propertiesInstance.currentWorkerSize = currentWorkerSizeInstance;
          }
          
          var numberOfWorkersValue = propertiesValue['numberOfWorkers'];
          if (numberOfWorkersValue) {
            var numberOfWorkersInstance = numberOfWorkersValue;
            propertiesInstance.numberOfWorkers = numberOfWorkersInstance;
          }
          
          var skuValue = propertiesValue['sku'];
          if (skuValue) {
            var skuInstance = skuValue;
            propertiesInstance.sku = skuInstance;
          }
          
          var workerSizeValue = propertiesValue['workerSize'];
          if (workerSizeValue) {
            var workerSizeInstance = workerSizeValue;
            propertiesInstance.workerSize = workerSizeInstance;
          }
          
          var statusValue = propertiesValue['status'];
          if (statusValue) {
            var statusInstance = statusValue;
            propertiesInstance.status = statusInstance;
          }
          
          var provisioningStateValue = propertiesValue['provisioningState'];
          if (provisioningStateValue) {
            var provisioningStateInstance = provisioningStateValue;
            propertiesInstance.provisioningState = provisioningStateInstance;
          }
        }
        
        var idValue = responseDoc['id'];
        if (idValue) {
          var idInstance = idValue;
          serverFarmInstance.id = idInstance;
        }
        
        var nameValue = responseDoc['name'];
        if (nameValue) {
          var nameInstance = nameValue;
          serverFarmInstance.name = nameInstance;
        }
        
        var locationValue = responseDoc['location'];
        if (locationValue) {
          var locationInstance = locationValue;
          serverFarmInstance.location = locationInstance;
        }
        
        var tagsSequenceElement = responseDoc['tags'];
        if (tagsSequenceElement) {
          for (var property in tagsSequenceElement) {
            var tagsKey = property;
            var tagsValue = tagsSequenceElement[property];
            serverFarmInstance.tags[tagsKey] = tagsValue;
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * You can create a server farm by issuing an HTTP POST request. Only one
   * server farm per webspace is permitted. You can retrieve server farm
   * details by using HTTP GET, change server farm properties by using HTTP
   * PUT, and delete a server farm by using HTTP DELETE. A request body is
   * required for server farm creation (HTTP POST) and server farm update
   * (HTTP PUT).  Warning: Creating a server farm changes your webspace's
   * Compute Mode from Shared to Dedicated. You will be charged from the
   * moment the server farm is created, even if all your sites are still
   * running in Free mode.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx for
   * more information)
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ServerFarmOperations.prototype.list = function(resourceGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/resourceGroups/' + resourceGroupName.trim() + '/providers/Microsoft.Web/serverFarms?';
    url2 = url2 + 'api-version=2014-04-01';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { serverFarms: [] };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var serverFarmsArray = responseDoc;
        if (serverFarmsArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < serverFarmsArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var serverFarmsValue = serverFarmsArray[loweredIndex1];
            var serverFarmInstance = { tags: {} };
            result.serverFarms.push(serverFarmInstance);
            
            var propertiesValue = serverFarmsValue['properties'];
            if (propertiesValue) {
              var propertiesInstance = {};
              serverFarmInstance.properties = propertiesInstance;
              
              var currentNumberOfWorkersValue = propertiesValue['currentNumberOfWorkers'];
              if (currentNumberOfWorkersValue) {
                var currentNumberOfWorkersInstance = currentNumberOfWorkersValue;
                propertiesInstance.currentNumberOfWorkers = currentNumberOfWorkersInstance;
              }
              
              var currentWorkerSizeValue = propertiesValue['currentWorkerSize'];
              if (currentWorkerSizeValue) {
                var currentWorkerSizeInstance = currentWorkerSizeValue;
                propertiesInstance.currentWorkerSize = currentWorkerSizeInstance;
              }
              
              var numberOfWorkersValue = propertiesValue['numberOfWorkers'];
              if (numberOfWorkersValue) {
                var numberOfWorkersInstance = numberOfWorkersValue;
                propertiesInstance.numberOfWorkers = numberOfWorkersInstance;
              }
              
              var skuValue = propertiesValue['sku'];
              if (skuValue) {
                var skuInstance = skuValue;
                propertiesInstance.sku = skuInstance;
              }
              
              var workerSizeValue = propertiesValue['workerSize'];
              if (workerSizeValue) {
                var workerSizeInstance = workerSizeValue;
                propertiesInstance.workerSize = workerSizeInstance;
              }
              
              var statusValue = propertiesValue['status'];
              if (statusValue) {
                var statusInstance = statusValue;
                propertiesInstance.status = statusInstance;
              }
              
              var provisioningStateValue = propertiesValue['provisioningState'];
              if (provisioningStateValue) {
                var provisioningStateInstance = provisioningStateValue;
                propertiesInstance.provisioningState = provisioningStateInstance;
              }
            }
            
            var idValue = serverFarmsValue['id'];
            if (idValue) {
              var idInstance = idValue;
              serverFarmInstance.id = idInstance;
            }
            
            var nameValue = serverFarmsValue['name'];
            if (nameValue) {
              var nameInstance = nameValue;
              serverFarmInstance.name = nameInstance;
            }
            
            var locationValue = serverFarmsValue['location'];
            if (locationValue) {
              var locationInstance = locationValue;
              serverFarmInstance.location = locationInstance;
            }
            
            var tagsSequenceElement = serverFarmsValue['tags'];
            if (tagsSequenceElement) {
              for (var property in tagsSequenceElement) {
                var tagsKey = property;
                var tagsValue = tagsSequenceElement[property];
                serverFarmInstance.tags[tagsKey] = tagsValue;
              }
            }
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return ServerFarmOperations;
})();

var WebSiteOperations = ( /** @lends WebSiteOperations */ function() {
  /**
   * @class
   * Operations for managing the web sites in a web space.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [WebSiteManagementClient] {@link
   * WebSiteManagementClient~WebSiteManagementClient}.
   * See [webSites] {@link
   * WebSiteManagementClient~WebSiteManagementClient#webSites}.
   * Initializes a new instance of the WebSiteOperations class.
   * @constructor
   * 
   * @param {WebSiteManagementClient} client Reference to the service client.
   */
  function WebSiteOperations(client) {
    this.client = client;
  }
  
  /**
   * You can create a web site by using a POST request that includes the name
   * of the web site and other information in the request body.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn166986.aspx for
   * more information)
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {WebSiteCreateOrUpdateParameters} parameters Parameters supplied to
   * the Create Web Site operation.
   * 
   * @param {WebSiteBase} parameters.webSite Gets or sets information about a
   * website being created of updated.
   * 
   * @param {WebSiteBaseProperties} [parameters.webSite.properties] Represents
   * the properties of the website.
   * 
   * @param {array} [parameters.webSite.properties.hostNames] The fully
   * qualified domain name for website. Only one hostname can be specified in
   * the azurewebsites.net domain. The hostname should match the name of the
   * website. Custom domains can only be specified for Shared or Standard
   * websites.
   * 
   * @param {WebSiteComputeMode} [parameters.webSite.properties.computeMode]
   * This value should be Shared for the Free or Paid Shared offerings, or
   * Dedicated for the Standard offering. The default value is Shared. If you
   * set ComputeMode to Dedicated, you must specify a value for the ServerFarm
   * element.
   * 
   * @param {string} [parameters.webSite.properties.serverFarm] The name of the
   * Server Farm associated with this website. This is a required value for
   * Standard mode.
   * 
   * @param {WebSiteMode} [parameters.webSite.properties.siteMode] This value
   * is limited for the Free offering Basic for the Paid Shared offering. The
   * default value is Limited. Note: Standard mode does not use the SiteMode
   * setting; it uses the ComputeMode setting. For more information, see
   * Upgrade or Downgrade a Web Site.
   * 
   * @param {WebSpaceDetails} [parameters.webSite.properties.webSpace]
   * Information about the web space to create.
   * 
   * @param {string} [parameters.webSite.properties.webSpace.geoRegion] The
   * geographical region of the webspace that will be created.
   * 
   * @param {string} [parameters.webSite.properties.webSpace.name] The name of
   * the webspace.
   * 
   * @param {string} [parameters.webSite.properties.webSpace.plan] This value
   * must be VirtualDedicatedPlan.
   * 
   * @param {string} [parameters.webSite.id] Gets the ID of the resource.
   * 
   * @param {string} [parameters.webSite.name] The name of the server farm.
   * 
   * @param {string} parameters.webSite.location Gets or sets the location of
   * the resource.
   * 
   * @param {object} [parameters.webSite.tags] Gets or sets the tags attached
   * to the resource.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  WebSiteOperations.prototype.createOrUpdate = function(resourceGroupName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.webSite === null || parameters.webSite === undefined) {
      return callback(new Error('parameters.webSite cannot be null.'));
    }
    if (parameters.webSite.location === null || parameters.webSite.location === undefined) {
      return callback(new Error('parameters.webSite.location cannot be null.'));
    }
    if (parameters.webSite.properties) {
      if (parameters.webSite.properties.hostNames === null || parameters.webSite.properties.hostNames === undefined) {
        return callback(new Error('parameters.webSite.properties.hostNames cannot be null.'));
      }
      if (parameters.webSite.properties.webSpace) {
        if (parameters.webSite.properties.webSpace.geoRegion === null || parameters.webSite.properties.webSpace.geoRegion === undefined) {
          return callback(new Error('parameters.webSite.properties.webSpace.geoRegion cannot be null.'));
        }
        if (parameters.webSite.properties.webSpace.name === null || parameters.webSite.properties.webSpace.name === undefined) {
          return callback(new Error('parameters.webSite.properties.webSpace.name cannot be null.'));
        }
        if (parameters.webSite.properties.webSpace.plan === null || parameters.webSite.properties.webSpace.plan === undefined) {
          return callback(new Error('parameters.webSite.properties.webSpace.plan cannot be null.'));
        }
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/resourceGroups/' + resourceGroupName.trim() + '/providers/Microsoft.Web/sites/' + parameters.webSite.name.trim() + '?';
    url2 = url2 + 'api-version=2014-04-01';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var webSiteCreateOrUpdateParametersValue = {};
    requestDoc = webSiteCreateOrUpdateParametersValue;
    
    if (parameters.webSite.properties) {
      var propertiesValue = {};
      webSiteCreateOrUpdateParametersValue['properties'] = propertiesValue;
      
      if (parameters.webSite.properties.hostNames) {
        var hostNamesArray = [];
        for (var loweredIndex1 = 0; loweredIndex1 < parameters.webSite.properties.hostNames.length; loweredIndex1 = loweredIndex1 + 1) {
          var hostNamesItem = parameters.webSite.properties.hostNames[loweredIndex1];
          hostNamesArray.push(hostNamesItem);
        }
        propertiesValue['HostNames'] = hostNamesArray;
      }
      
      if (parameters.webSite.properties.computeMode) {
        propertiesValue['ComputeMode'] = parameters.webSite.properties.computeMode ? parameters.webSite.properties.computeMode.toString() : 'Shared';
      }
      
      if (parameters.webSite.properties.serverFarm) {
        propertiesValue['ServerFarm'] = parameters.webSite.properties.serverFarm;
      }
      
      if (parameters.webSite.properties.siteMode) {
        propertiesValue['SiteMode'] = parameters.webSite.properties.siteMode ? parameters.webSite.properties.siteMode.toString() : 'Limited';
      }
      
      if (parameters.webSite.properties.webSpace) {
        var webSpaceToCreateValue = {};
        propertiesValue['WebSpaceToCreate'] = webSpaceToCreateValue;
        
        webSpaceToCreateValue['GeoRegion'] = parameters.webSite.properties.webSpace.geoRegion;
        
        webSpaceToCreateValue['Name'] = parameters.webSite.properties.webSpace.name;
        
        webSpaceToCreateValue['Plan'] = parameters.webSite.properties.webSpace.plan;
      }
    }
    
    if (parameters.webSite.id) {
      webSiteCreateOrUpdateParametersValue['id'] = parameters.webSite.id;
    }
    
    if (parameters.webSite.name) {
      webSiteCreateOrUpdateParametersValue['name'] = parameters.webSite.name;
    }
    
    webSiteCreateOrUpdateParametersValue['location'] = parameters.webSite.location;
    
    var tagsDictionary = {};
    if (parameters.webSite.tags) {
      for (var tagsKey in parameters.webSite.tags) {
        var tagsValue = parameters.webSite.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
    }
    webSiteCreateOrUpdateParametersValue['tags'] = tagsDictionary;
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * A web site repository is essentially a GIT repository that you can use to
   * manage your web site content. By using GIT source control tools, you can
   * push or pull version controlled changes to your site. You can create a
   * repository for your web site by issuing an HTTP POST request, or retrieve
   * information about the repository by using HTTP GET.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx for
   * more information)
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} webSiteName The name of the web site.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  WebSiteOperations.prototype.createRepository = function(resourceGroupName, webSiteName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/resourceGroups/' + resourceGroupName.trim() + '/providers/Microsoft.Web/sites/' + webSiteName.trim() + '/repository?';
    url2 = url2 + 'api-version=2014-04-01';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Length'] = '0';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Deletes the web site.
   * 
   * @param {string} resourceGroupName The name of the resource group..
   * 
   * @param {string} webSiteName The name of the Web Site resource.
   * 
   * @param {WebSiteDeleteParameters} parameters The parameters to delete a web
   * site.
   * 
   * @param {boolean} parameters.deleteEmptyServerFarm If the site being
   * deleted is the last web site in a server farm, you can delete the server
   * farm.
   * 
   * @param {boolean} parameters.deleteMetrics Delete the metrics for the web
   * site.
   * 
   * @param {boolean} parameters.deleteAllSlots Delete all slots for the web
   * site.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  WebSiteOperations.prototype.delete = function(resourceGroupName, webSiteName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.deleteAllSlots === null || parameters.deleteAllSlots === undefined) {
      return callback(new Error('parameters.deleteAllSlots cannot be null.'));
    }
    if (parameters.deleteEmptyServerFarm === null || parameters.deleteEmptyServerFarm === undefined) {
      return callback(new Error('parameters.deleteEmptyServerFarm cannot be null.'));
    }
    if (parameters.deleteMetrics === null || parameters.deleteMetrics === undefined) {
      return callback(new Error('parameters.deleteMetrics cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/resourceGroups/' + resourceGroupName.trim() + '/providers/Microsoft.Web/sites/' + webSiteName.trim() + '?';
    url2 = url2 + 'api-version=2014-04-01';
    url2 = url2 + '&deleteEmptyServerFarm=' + encodeURIComponent(parameters.deleteEmptyServerFarm.toString());
    url2 = url2 + '&deleteMetrics=' + encodeURIComponent(parameters.deleteMetrics.toString());
    url2 = url2 + '&deleteAllSlots=' + encodeURIComponent(parameters.deleteAllSlots.toString());
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * A web site repository is essentially a GIT repository that you can use to
   * manage your web site content. By using GIT source control tools, you can
   * push or pull version controlled changes to your site. You can create a
   * repository for your web site by issuing an HTTP POST request, or retrieve
   * information about the repository by using HTTP GET.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx for
   * more information)
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} webSiteName The name of the web site.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  WebSiteOperations.prototype.deleteRepository = function(resourceGroupName, webSiteName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/resourceGroups/' + resourceGroupName.trim() + '/providers/Microsoft.Web/sites/' + webSiteName.trim() + '/repository?';
    url2 = url2 + 'api-version=2014-04-01';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var uriValue = responseDoc['uri'];
        if (uriValue) {
          var uriInstance = uriValue;
          result.uri = uriInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * You can generate a new random password for publishing a site by issuing an
   * HTTP POST request.  Tip: If you want to verify that the publish password
   * has changed, call HTTP GET on /publishxml before calling /newpassword. In
   * the publish XML, note the hash value in the userPWD attribute. After
   * calling /newpassword, call /publishxml again. You can then compare the
   * new value of userPWD in the Publish XML with the one you noted earlier.
   * (see http://msdn.microsoft.com/en-us/library/windowsazure/dn236428.aspx
   * for more information)
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} webSiteName The name of the web site.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  WebSiteOperations.prototype.generatePassword = function(resourceGroupName, webSiteName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/resourceGroups/' + resourceGroupName.trim() + '/providers/Microsoft.Web/sites/' + webSiteName.trim() + '/newPassword?';
    url2 = url2 + 'api-version=2014-04-01';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Length'] = '0';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * You can retrieve details for a web site by issuing an HTTP GET request.
   * (see http://msdn.microsoft.com/en-us/library/windowsazure/dn167007.aspx
   * for more information)
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} webSiteName The name of the web site.
   * 
   * @param {WebSiteGetParameters} [parametersOrCallback] Additional parameters.
   * 
   * @param {array} [parametersOrCallback.propertiesToInclude] Specifies a list
   * of the names of any addtional parameters to return.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  WebSiteOperations.prototype.get = function(resourceGroupName, webSiteName, parametersOrCallback, callback) {
    var parameters = parametersOrCallback;
    if (_.isFunction(parameters)) {
      callback = parameters;
      parameters = null;
    }
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/resourceGroups/' + resourceGroupName.trim() + '/providers/Microsoft.Web/sites/' + webSiteName.trim() + '?';
    url2 = url2 + 'api-version=2014-04-01';
    if (parameters && parameters.propertiesToInclude && parameters.propertiesToInclude.length > 0) {
      url2 = url2 + '&propertiesToInclude=' + encodeURIComponent(parameters.propertiesToInclude.join(','));
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var webSiteInstance = { tags: {} };
        result.webSite = webSiteInstance;
        
        var propertiesValue = responseDoc['properties'];
        if (propertiesValue) {
          var propertiesInstance = { enabledHostNames: [], hostNames: [], hostNameSslStates: [], sslCertificates: [], trafficManagerHostNames: [] };
          webSiteInstance.properties = propertiesInstance;
          
          var adminEnabledValue = propertiesValue['adminEnabled'];
          if (adminEnabledValue) {
            var adminEnabledInstance = adminEnabledValue;
            propertiesInstance.adminEnabled = adminEnabledInstance;
          }
          
          var availabilityStateValue = propertiesValue['availabilityState'];
          if (availabilityStateValue) {
            var availabilityStateInstance = availabilityStateValue;
            propertiesInstance.availabilityState = availabilityStateInstance;
          }
          
          var computeModeValue = propertiesValue['computeMode'];
          if (computeModeValue) {
            var computeModeInstance = computeModeValue;
            propertiesInstance.computeMode = computeModeInstance;
          }
          
          var enabledValue = propertiesValue['enabled'];
          if (enabledValue) {
            var enabledInstance = enabledValue;
            propertiesInstance.enabled = enabledInstance;
          }
          
          var enabledHostNamesArray = propertiesValue['enabledHostNames'];
          if (enabledHostNamesArray) {
            for (var loweredIndex1 = 0; loweredIndex1 < enabledHostNamesArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var enabledHostNamesValue = enabledHostNamesArray[loweredIndex1];
              propertiesInstance.enabledHostNames.push(enabledHostNamesValue);
            }
          }
          
          var hostNameSslStatesArray = propertiesValue['hostNameSslStates'];
          if (hostNameSslStatesArray) {
            for (var loweredIndex2 = 0; loweredIndex2 < hostNameSslStatesArray.length; loweredIndex2 = loweredIndex2 + 1) {
              var hostNameSslStatesValue = hostNameSslStatesArray[loweredIndex2];
              var webSiteHostNameSslStateInstance = {};
              propertiesInstance.hostNameSslStates.push(webSiteHostNameSslStateInstance);
              
              var nameValue = hostNameSslStatesValue['name'];
              if (nameValue) {
                var nameInstance = nameValue;
                webSiteHostNameSslStateInstance.name = nameInstance;
              }
              
              var sslStateValue = hostNameSslStatesValue['sslState'];
              if (sslStateValue) {
                var sslStateInstance = sslStateValue;
                webSiteHostNameSslStateInstance.sslState = sslStateInstance;
              }
              
              var thumbprintValue = hostNameSslStatesValue['thumbprint'];
              if (thumbprintValue) {
                var thumbprintInstance = thumbprintValue;
                webSiteHostNameSslStateInstance.thumbprint = thumbprintInstance;
              }
              
              var virtualIPValue = hostNameSslStatesValue['virtualIP'];
              if (virtualIPValue) {
                var virtualIPInstance = virtualIPValue;
                webSiteHostNameSslStateInstance.virtualIP = virtualIPInstance;
              }
              
              var ipBasedSslResultValue = hostNameSslStatesValue['ipBasedSslResult'];
              if (ipBasedSslResultValue) {
                var ipBasedSslResultInstance = ipBasedSslResultValue;
                webSiteHostNameSslStateInstance.ipBasedSslResult = ipBasedSslResultInstance;
              }
              
              var toUpdateValue = hostNameSslStatesValue['toUpdate'];
              if (toUpdateValue) {
                var toUpdateInstance = toUpdateValue;
                webSiteHostNameSslStateInstance.toUpdate = toUpdateInstance;
              }
              
              var toUpdateIpBasedSslValue = hostNameSslStatesValue['toUpdateIpBasedSsl'];
              if (toUpdateIpBasedSslValue) {
                var toUpdateIpBasedSslInstance = toUpdateIpBasedSslValue;
                webSiteHostNameSslStateInstance.toUpdateIpBasedSsl = toUpdateIpBasedSslInstance;
              }
            }
          }
          
          var hostNamesArray = propertiesValue['hostNames'];
          if (hostNamesArray) {
            for (var loweredIndex3 = 0; loweredIndex3 < hostNamesArray.length; loweredIndex3 = loweredIndex3 + 1) {
              var hostNamesValue = hostNamesArray[loweredIndex3];
              propertiesInstance.hostNames.push(hostNamesValue);
            }
          }
          
          var lastModifiedTimeUtcValue = propertiesValue['lastModifiedTimeUtc'];
          if (lastModifiedTimeUtcValue) {
            var lastModifiedTimeUtcInstance = lastModifiedTimeUtcValue;
            propertiesInstance.lastModifiedTimeUtc = lastModifiedTimeUtcInstance;
          }
          
          var ownerValue = propertiesValue['owner'];
          if (ownerValue) {
            var ownerInstance = ownerValue;
            propertiesInstance.owner = ownerInstance;
          }
          
          var repositorySiteNameValue = propertiesValue['repositorySiteName'];
          if (repositorySiteNameValue) {
            var repositorySiteNameInstance = repositorySiteNameValue;
            propertiesInstance.repositorySiteName = repositorySiteNameInstance;
          }
          
          var runtimeAvailabilityStateValue = propertiesValue['runtimeAvailabilityState'];
          if (runtimeAvailabilityStateValue) {
            var runtimeAvailabilityStateInstance = runtimeAvailabilityStateValue;
            propertiesInstance.runtimeAvailabilityState = runtimeAvailabilityStateInstance;
          }
          
          var trafficManagerHostNamesArray = propertiesValue['trafficManagerHostNames'];
          if (trafficManagerHostNamesArray) {
            for (var loweredIndex4 = 0; loweredIndex4 < trafficManagerHostNamesArray.length; loweredIndex4 = loweredIndex4 + 1) {
              var trafficManagerHostNamesValue = trafficManagerHostNamesArray[loweredIndex4];
              propertiesInstance.trafficManagerHostNames.push(trafficManagerHostNamesValue);
            }
          }
          
          var sslCertificatesArray = propertiesValue['sslCertificates'];
          if (sslCertificatesArray) {
            for (var loweredIndex5 = 0; loweredIndex5 < sslCertificatesArray.length; loweredIndex5 = loweredIndex5 + 1) {
              var sslCertificatesValue = sslCertificatesArray[loweredIndex5];
              var certificateInstance = { hostNames: [] };
              propertiesInstance.sslCertificates.push(certificateInstance);
              
              var expirationDateValue = sslCertificatesValue['expirationDate'];
              if (expirationDateValue) {
                var expirationDateInstance = expirationDateValue;
                certificateInstance.expirationDate = expirationDateInstance;
              }
              
              var friendlyNameValue = sslCertificatesValue['friendlyName'];
              if (friendlyNameValue) {
                var friendlyNameInstance = friendlyNameValue;
                certificateInstance.friendlyName = friendlyNameInstance;
              }
              
              var hostNamesArray2 = sslCertificatesValue['hostNames'];
              if (hostNamesArray2) {
                for (var loweredIndex6 = 0; loweredIndex6 < hostNamesArray2.length; loweredIndex6 = loweredIndex6 + 1) {
                  var hostNamesValue2 = hostNamesArray2[loweredIndex6];
                  certificateInstance.hostNames.push(hostNamesValue2);
                }
              }
              
              var issueDateValue = sslCertificatesValue['issueDate'];
              if (issueDateValue) {
                var issueDateInstance = issueDateValue;
                certificateInstance.issueDate = issueDateInstance;
              }
              
              var issuerValue = sslCertificatesValue['issuer'];
              if (issuerValue) {
                var issuerInstance = issuerValue;
                certificateInstance.issuer = issuerInstance;
              }
              
              var passwordValue = sslCertificatesValue['password'];
              if (passwordValue) {
                var passwordInstance = passwordValue;
                certificateInstance.password = passwordInstance;
              }
              
              var pfxBlobValue = sslCertificatesValue['pfxBlob'];
              if (pfxBlobValue) {
                var pfxBlobInstance = new Buffer(pfxBlobValue, 'base64').toString('utf8');
                certificateInstance.pfxBlob = pfxBlobInstance;
              }
              
              var selfLinkValue = sslCertificatesValue['selfLink'];
              if (selfLinkValue) {
                var selfLinkInstance = selfLinkValue;
                certificateInstance.selfLinkUri = selfLinkInstance;
              }
              
              var siteNameValue = sslCertificatesValue['siteName'];
              if (siteNameValue) {
                var siteNameInstance = siteNameValue;
                certificateInstance.siteName = siteNameInstance;
              }
              
              var subjectNameValue = sslCertificatesValue['subjectName'];
              if (subjectNameValue) {
                var subjectNameInstance = subjectNameValue;
                certificateInstance.subjectName = subjectNameInstance;
              }
              
              var thumbprintValue2 = sslCertificatesValue['thumbprint'];
              if (thumbprintValue2) {
                var thumbprintInstance2 = thumbprintValue2;
                certificateInstance.thumbprint = thumbprintInstance2;
              }
              
              var toDeleteValue = sslCertificatesValue['toDelete'];
              if (toDeleteValue) {
                var toDeleteInstance = toDeleteValue;
                certificateInstance.toDelete = toDeleteInstance;
              }
              
              var validValue = sslCertificatesValue['valid'];
              if (validValue) {
                var validInstance = validValue;
                certificateInstance.isValid = validInstance;
              }
              
              var cerBlobValue = sslCertificatesValue['cerBlob'];
              if (cerBlobValue) {
                var cerBlobInstance = cerBlobValue;
                certificateInstance.cerBlob = cerBlobInstance;
              }
              
              var publicKeyHashValue = sslCertificatesValue['publicKeyHash'];
              if (publicKeyHashValue) {
                var publicKeyHashInstance = publicKeyHashValue;
                certificateInstance.publicKeyHash = publicKeyHashInstance;
              }
            }
          }
          
          var selfLinkValue2 = propertiesValue['selfLink'];
          if (selfLinkValue2) {
            var selfLinkInstance2 = selfLinkValue2;
            propertiesInstance.uri = selfLinkInstance2;
          }
          
          var serverFarmValue = propertiesValue['serverFarm'];
          if (serverFarmValue) {
            var serverFarmInstance = serverFarmValue;
            propertiesInstance.serverFarm = serverFarmInstance;
          }
          
          var siteModeValue = propertiesValue['siteMode'];
          if (siteModeValue) {
            var siteModeInstance = siteModeValue;
            propertiesInstance.siteMode = siteModeInstance;
          }
          
          var sitePropertiesValue = propertiesValue['siteProperties'];
          if (sitePropertiesValue) {
            var sitePropertiesInstance = { appSettings: {}, metadata: {}, properties: {} };
            propertiesInstance.properties = sitePropertiesInstance;
            
            var appSettingsSequenceElement = sitePropertiesValue['appSettings'];
            if (appSettingsSequenceElement) {
              for (var property in appSettingsSequenceElement) {
                var appSettingsKey = property;
                var appSettingsValue = appSettingsSequenceElement[property];
                sitePropertiesInstance.appSettings[appSettingsKey] = appSettingsValue;
              }
            }
            
            var metadataSequenceElement = sitePropertiesValue['metadata'];
            if (metadataSequenceElement) {
              for (var property2 in metadataSequenceElement) {
                var metadataKey = property2;
                var metadataValue = metadataSequenceElement[property2];
                sitePropertiesInstance.metadata[metadataKey] = metadataValue;
              }
            }
            
            var propertiesSequenceElement = sitePropertiesValue['properties'];
            if (propertiesSequenceElement) {
              for (var property3 in propertiesSequenceElement) {
                var propertiesKey = property3;
                var propertiesValue2 = propertiesSequenceElement[property3];
                sitePropertiesInstance.properties[propertiesKey] = propertiesValue2;
              }
            }
          }
          
          var stateValue = propertiesValue['state'];
          if (stateValue) {
            var stateInstance = stateValue;
            propertiesInstance.state = stateInstance;
          }
          
          var usageStateValue = propertiesValue['usageState'];
          if (usageStateValue) {
            var usageStateInstance = usageStateValue;
            propertiesInstance.usageState = usageStateInstance;
          }
          
          var webSpaceValue = propertiesValue['webSpace'];
          if (webSpaceValue) {
            var webSpaceInstance = webSpaceValue;
            propertiesInstance.webSpace = webSpaceInstance;
          }
          
          var provisioningStateValue = propertiesValue['provisioningState'];
          if (provisioningStateValue) {
            var provisioningStateInstance = provisioningStateValue;
            propertiesInstance.provisioningState = provisioningStateInstance;
          }
        }
        
        var idValue = responseDoc['id'];
        if (idValue) {
          var idInstance = idValue;
          webSiteInstance.id = idInstance;
        }
        
        var nameValue2 = responseDoc['name'];
        if (nameValue2) {
          var nameInstance2 = nameValue2;
          webSiteInstance.name = nameInstance2;
        }
        
        var locationValue = responseDoc['location'];
        if (locationValue) {
          var locationInstance = locationValue;
          webSiteInstance.location = locationInstance;
        }
        
        var tagsSequenceElement = responseDoc['tags'];
        if (tagsSequenceElement) {
          for (var property4 in tagsSequenceElement) {
            var tagsKey = property4;
            var tagsValue = tagsSequenceElement[property4];
            webSiteInstance.tags[tagsKey] = tagsValue;
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * You can retrieve the config settings for a web site by issuing an HTTP GET
   * request, or update them by using HTTP PUT with a request body that
   * contains the settings to be updated.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx for
   * more information)
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} webSiteName The name of the web site.
   * 
   * @param {WebSiteGetConfigurationParameters} [parametersOrCallback]
   * Additional parameters.
   * 
   * @param {array} [parametersOrCallback.propertiesToInclude] Specifies a list
   * of the names of any addtional parameters to return.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  WebSiteOperations.prototype.getConfiguration = function(resourceGroupName, webSiteName, parametersOrCallback, callback) {
    var parameters = parametersOrCallback;
    if (_.isFunction(parameters)) {
      callback = parameters;
      parameters = null;
    }
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/resourceGroups/' + resourceGroupName.trim() + '/providers/Microsoft.Web/sites/' + webSiteName.trim() + '/config?';
    url2 = url2 + 'api-version=2014-04-01';
    if (parameters && parameters.propertiesToInclude && parameters.propertiesToInclude.length > 0) {
      url2 = url2 + '&propertiesToInclude=' + encodeURIComponent(parameters.propertiesToInclude.join(','));
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { appSettings: {}, connectionStrings: [], defaultDocuments: [], handlerMappings: [], metadata: {} };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      var siteConfigValue = responseDoc['SiteConfig'];
      if (siteConfigValue) {
        var siteConfigInstance = { appSettings: {}, connectionStrings: [], defaultDocuments: [], handlerMappings: [], metadata: {} };
        
        var appSettingsSequenceElement = siteConfigValue['appSettings'];
        if (appSettingsSequenceElement) {
          for (var property in appSettingsSequenceElement) {
            var appSettingsKey = property;
            var appSettingsValue = appSettingsSequenceElement[property];
            siteConfigInstance.appSettings[appSettingsKey] = appSettingsValue;
          }
        }
        
        var connectionStringsArray = siteConfigValue['connectionStrings'];
        if (connectionStringsArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < connectionStringsArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var connectionStringsValue = connectionStringsArray[loweredIndex1];
            var connStringInfoInstance = {};
            siteConfigInstance.connectionStrings.push(connStringInfoInstance);
            
            var connectionStringValue = connectionStringsValue['connectionString'];
            if (connectionStringValue) {
              var connectionStringInstance = connectionStringValue;
              connStringInfoInstance.connectionString = connectionStringInstance;
            }
            
            var nameValue = connectionStringsValue['name'];
            if (nameValue) {
              var nameInstance = nameValue;
              connStringInfoInstance.name = nameInstance;
            }
            
            var typeValue = connectionStringsValue['type'];
            if (typeValue) {
              var typeInstance = typeValue;
              connStringInfoInstance.type = typeInstance;
            }
          }
        }
        
        var defaultDocumentsArray = siteConfigValue['defaultDocuments'];
        if (defaultDocumentsArray) {
          for (var loweredIndex2 = 0; loweredIndex2 < defaultDocumentsArray.length; loweredIndex2 = loweredIndex2 + 1) {
            var defaultDocumentsValue = defaultDocumentsArray[loweredIndex2];
            siteConfigInstance.defaultDocuments.push(defaultDocumentsValue);
          }
        }
        
        var detailedErrorLoggingEnabledValue = siteConfigValue['detailedErrorLoggingEnabled'];
        if (detailedErrorLoggingEnabledValue) {
          var detailedErrorLoggingEnabledInstance = detailedErrorLoggingEnabledValue;
          siteConfigInstance.detailedErrorLoggingEnabled = detailedErrorLoggingEnabledInstance;
        }
        
        var documentRootValue = siteConfigValue['documentRoot'];
        if (documentRootValue) {
          var documentRootInstance = documentRootValue;
          siteConfigInstance.documentRoot = documentRootInstance;
        }
        
        var handlerMappingsArray = siteConfigValue['handlerMappings'];
        if (handlerMappingsArray) {
          for (var loweredIndex3 = 0; loweredIndex3 < handlerMappingsArray.length; loweredIndex3 = loweredIndex3 + 1) {
            var handlerMappingsValue = handlerMappingsArray[loweredIndex3];
            var handlerMappingInstance = {};
            siteConfigInstance.handlerMappings.push(handlerMappingInstance);
            
            var argumentsValue = handlerMappingsValue['arguments'];
            if (argumentsValue) {
              var argumentsInstance = argumentsValue;
              handlerMappingInstance.arguments = argumentsInstance;
            }
            
            var extensionValue = handlerMappingsValue['extension'];
            if (extensionValue) {
              var extensionInstance = extensionValue;
              handlerMappingInstance.extension = extensionInstance;
            }
            
            var scriptProcessorValue = handlerMappingsValue['scriptProcessor'];
            if (scriptProcessorValue) {
              var scriptProcessorInstance = scriptProcessorValue;
              handlerMappingInstance.scriptProcessor = scriptProcessorInstance;
            }
          }
        }
        
        var httpLoggingEnabledValue = siteConfigValue['httpLoggingEnabled'];
        if (httpLoggingEnabledValue) {
          var httpLoggingEnabledInstance = httpLoggingEnabledValue;
          siteConfigInstance.httpLoggingEnabled = httpLoggingEnabledInstance;
        }
        
        var logsDirectorySizeLimitValue = siteConfigValue['logsDirectorySizeLimit'];
        if (logsDirectorySizeLimitValue) {
          var logsDirectorySizeLimitInstance = logsDirectorySizeLimitValue;
          siteConfigInstance.logsDirectorySizeLimit = logsDirectorySizeLimitInstance;
        }
        
        var managedPipelineModeValue = siteConfigValue['managedPipelineMode'];
        if (managedPipelineModeValue) {
          var managedPipelineModeInstance = managedPipelineModeValue;
          siteConfigInstance.managedPipelineMode = managedPipelineModeInstance;
        }
        
        var metadataSequenceElement = siteConfigValue['metadata'];
        if (metadataSequenceElement) {
          for (var property2 in metadataSequenceElement) {
            var metadataKey = property2;
            var metadataValue = metadataSequenceElement[property2];
            siteConfigInstance.metadata[metadataKey] = metadataValue;
          }
        }
        
        var netFrameworkVersionValue = siteConfigValue['netFrameworkVersion'];
        if (netFrameworkVersionValue) {
          var netFrameworkVersionInstance = netFrameworkVersionValue;
          siteConfigInstance.netFrameworkVersion = netFrameworkVersionInstance;
        }
        
        var numberOfWorkersValue = siteConfigValue['numberOfWorkers'];
        if (numberOfWorkersValue) {
          var numberOfWorkersInstance = numberOfWorkersValue;
          siteConfigInstance.numberOfWorkers = numberOfWorkersInstance;
        }
        
        var phpVersionValue = siteConfigValue['phpVersion'];
        if (phpVersionValue) {
          var phpVersionInstance = phpVersionValue;
          siteConfigInstance.phpVersion = phpVersionInstance;
        }
        
        var publishingPasswordValue = siteConfigValue['publishingPassword'];
        if (publishingPasswordValue) {
          var publishingPasswordInstance = publishingPasswordValue;
          siteConfigInstance.publishingPassword = publishingPasswordInstance;
        }
        
        var publishingUsernameValue = siteConfigValue['publishingUsername'];
        if (publishingUsernameValue) {
          var publishingUsernameInstance = publishingUsernameValue;
          siteConfigInstance.publishingUserName = publishingUsernameInstance;
        }
        
        var remoteDebuggingEnabledValue = siteConfigValue['RemoteDebuggingEnabled'];
        if (remoteDebuggingEnabledValue) {
          var remoteDebuggingEnabledInstance = remoteDebuggingEnabledValue;
          siteConfigInstance.remoteDebuggingEnabled = remoteDebuggingEnabledInstance;
        }
        
        var remoteDebuggingVersionValue = siteConfigValue['remoteDebuggingVersion'];
        if (remoteDebuggingVersionValue) {
          var remoteDebuggingVersionInstance = remoteDebuggingVersionValue;
          siteConfigInstance.remoteDebuggingVersion = remoteDebuggingVersionInstance;
        }
        
        var requestTracingEnabledValue = siteConfigValue['requestTracingEnabled'];
        if (requestTracingEnabledValue) {
          var requestTracingEnabledInstance = requestTracingEnabledValue;
          siteConfigInstance.requestTracingEnabled = requestTracingEnabledInstance;
        }
        
        var requestTracingExpirationTimeValue = siteConfigValue['requestTracingExpirationTime'];
        if (requestTracingExpirationTimeValue) {
          var requestTracingExpirationTimeInstance = requestTracingExpirationTimeValue;
          siteConfigInstance.requestTracingExpirationTime = requestTracingExpirationTimeInstance;
        }
        
        var scmTypeValue = siteConfigValue['scmType'];
        if (scmTypeValue) {
          var scmTypeInstance = scmTypeValue;
          siteConfigInstance.scmType = scmTypeInstance;
        }
        
        var use32BitWorkerProcessValue = siteConfigValue['use32BitWorkerProcess'];
        if (use32BitWorkerProcessValue) {
          var use32BitWorkerProcessInstance = use32BitWorkerProcessValue;
          siteConfigInstance.use32BitWorkerProcess = use32BitWorkerProcessInstance;
        }
        
        var webSocketsEnabledValue = siteConfigValue['webSocketsEnabled'];
        if (webSocketsEnabledValue) {
          var webSocketsEnabledInstance = webSocketsEnabledValue;
          siteConfigInstance.webSocketsEnabled = webSocketsEnabledInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * You can retrieve historical usage metrics for a site by issuing an HTTP
   * GET request.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn166964.aspx for
   * more information)
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} webSiteName The name of the web site.
   * 
   * @param {WebSiteGetHistoricalUsageMetricsParameters} parameters The Get Web
   * Site Historical Usage Metrics parameters.
   * 
   * @param {array} [parameters.metricNames] Specifies a comma-separated list
   * of the names of the metrics to return. If the names parameter is not
   * specified, then all available metrics are returned.
   * 
   * @param {date} [parameters.startTime] The starting time of the metrics to
   * return. If this parameter is not specified, the beginning of the current
   * hour is used.
   * 
   * @param {date} [parameters.endTime] The ending time of the metrics to
   * return. If this parameter is not specified, the current time is used.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  WebSiteOperations.prototype.getHistoricalUsageMetrics = function(resourceGroupName, webSiteName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/resourceGroups/' + resourceGroupName.trim() + '/providers/Microsoft.Web/sites/' + webSiteName.trim() + '/metrics?';
    url2 = url2 + 'api-version=2014-04-01';
    if (parameters.metricNames && parameters.metricNames.length > 0) {
      url2 = url2 + '&names=' + encodeURIComponent(parameters.metricNames.join(','));
    }
    if (parameters.startTime) {
      url2 = url2 + '&StartTime=' + encodeURIComponent(parameters.startTime.toISOString());
    }
    if (parameters.endTime) {
      url2 = url2 + '&EndTime=' + encodeURIComponent(parameters.endTime.toISOString());
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { usageMetrics: [] };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      var metricResponsesValue = responseDoc['metricResponses'];
      if (metricResponsesValue) {
        var metricResponsesInstance = { usageMetrics: [] };
        
        var usageMetricsArray = metricResponsesValue;
        if (usageMetricsArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < usageMetricsArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var usageMetricsValue = usageMetricsArray[loweredIndex1];
            var metricResponseInstance = {};
            metricResponsesInstance.usageMetrics.push(metricResponseInstance);
            
            var codeValue = usageMetricsValue['code'];
            if (codeValue) {
              var codeInstance = codeValue;
              metricResponseInstance.code = codeInstance;
            }
            
            var dataValue = usageMetricsValue['data'];
            if (dataValue) {
              var dataInstance = { values: [] };
              metricResponseInstance.data = dataInstance;
              
              var displayNameValue = dataValue['displayName'];
              if (displayNameValue) {
                var displayNameInstance = displayNameValue;
                dataInstance.displayName = displayNameInstance;
              }
              
              var endTimeValue = dataValue['EndTime'];
              if (endTimeValue) {
                var endTimeInstance = endTimeValue;
                dataInstance.endTime = endTimeInstance;
              }
              
              var nameValue = dataValue['name'];
              if (nameValue) {
                var nameInstance = nameValue;
                dataInstance.name = nameInstance;
              }
              
              var primaryAggregationTypeValue = dataValue['primaryAggregationType'];
              if (primaryAggregationTypeValue) {
                var primaryAggregationTypeInstance = primaryAggregationTypeValue;
                dataInstance.primaryAggregationType = primaryAggregationTypeInstance;
              }
              
              var startTimeValue = dataValue['startTime'];
              if (startTimeValue) {
                var startTimeInstance = startTimeValue;
                dataInstance.startTime = startTimeInstance;
              }
              
              var timeGrainValue = dataValue['timeGrain'];
              if (timeGrainValue) {
                var timeGrainInstance = timeGrainValue;
                dataInstance.timeGrain = timeGrainInstance;
              }
              
              var unitValue = dataValue['unit'];
              if (unitValue) {
                var unitInstance = unitValue;
                dataInstance.unit = unitInstance;
              }
              
              var valuesArray = dataValue['Values'];
              if (valuesArray) {
                for (var loweredIndex2 = 0; loweredIndex2 < valuesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                  var valuesValue = valuesArray[loweredIndex2];
                  var metricSampleInstance = {};
                  dataInstance.values.push(metricSampleInstance);
                  
                  var countValue = valuesValue['count'];
                  if (countValue) {
                    var countInstance = countValue;
                    metricSampleInstance.count = countInstance;
                  }
                  
                  var maximumValue = valuesValue['maximum'];
                  if (maximumValue) {
                    var maximumInstance = maximumValue;
                    metricSampleInstance.maximum = maximumInstance;
                  }
                  
                  var minimumValue = valuesValue['minimum'];
                  if (minimumValue) {
                    var minimumInstance = minimumValue;
                    metricSampleInstance.minimum = minimumInstance;
                  }
                  
                  var timeCreatedValue = valuesValue['timeCreated'];
                  if (timeCreatedValue) {
                    var timeCreatedInstance = timeCreatedValue;
                    metricSampleInstance.timeCreated = timeCreatedInstance;
                  }
                  
                  var totalValue = valuesValue['total'];
                  if (totalValue) {
                    var totalInstance = totalValue;
                    metricSampleInstance.total = totalInstance;
                  }
                }
              }
            }
            
            var messageValue = usageMetricsValue['message'];
            if (messageValue) {
              var messageInstance = messageValue;
              metricResponseInstance.message = messageInstance;
            }
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Retrieve the publish settings information for a web site.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn166996.aspx for
   * more information)
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} webSiteName The name of the web site.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  WebSiteOperations.prototype.getPublishProfile = function(resourceGroupName, webSiteName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/resourceGroups/' + resourceGroupName.trim() + '/providers/Microsoft.Web/sites/' + webSiteName.trim() + '/publishxml?';
    url2 = url2 + 'api-version=2014-04-01';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { publishProfiles: [] };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      var publishDataValue = responseDoc['publishData'];
      if (publishDataValue) {
        var publishDataInstance = { publishProfiles: [] };
        
        var publishProfilesArray = publishDataValue;
        if (publishProfilesArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < publishProfilesArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var publishProfilesValue = publishProfilesArray[loweredIndex1];
            var publishProfileInstance = { databases: [] };
            publishDataInstance.publishProfiles.push(publishProfileInstance);
            
            var profileNameValue = publishProfilesValue['profileName'];
            if (profileNameValue) {
              var profileNameInstance = profileNameValue;
              publishProfileInstance.profileName = profileNameInstance;
            }
            
            var publishMethodValue = publishProfilesValue['publishMethod'];
            if (publishMethodValue) {
              var publishMethodInstance = publishMethodValue;
              publishProfileInstance.publishMethod = publishMethodInstance;
            }
            
            var publishUrlValue = publishProfilesValue['publishUrl'];
            if (publishUrlValue) {
              var publishUrlInstance = publishUrlValue;
              publishProfileInstance.publishUrl = publishUrlInstance;
            }
            
            var msdeploySiteValue = publishProfilesValue['msdeploySite'];
            if (msdeploySiteValue) {
              var msdeploySiteInstance = msdeploySiteValue;
              publishProfileInstance.mSDeploySite = msdeploySiteInstance;
            }
            
            var ftpPassiveModeValue = publishProfilesValue['ftpPassiveMode'];
            if (ftpPassiveModeValue) {
              var ftpPassiveModeInstance = ftpPassiveModeValue;
              publishProfileInstance.ftpPassiveMode = ftpPassiveModeInstance;
            }
            
            var userNameValue = publishProfilesValue['userName'];
            if (userNameValue) {
              var userNameInstance = userNameValue;
              publishProfileInstance.userName = userNameInstance;
            }
            
            var userPWDValue = publishProfilesValue['userPWD'];
            if (userPWDValue) {
              var userPWDInstance = userPWDValue;
              publishProfileInstance.userPassword = userPWDInstance;
            }
            
            var destinationAppUrlValue = publishProfilesValue['destinationAppUrl'];
            if (destinationAppUrlValue) {
              var destinationAppUrlInstance = destinationAppUrlValue;
              publishProfileInstance.destinationAppUri = destinationAppUrlInstance;
            }
            
            var sQLServerDBConnectionStringValue = publishProfilesValue['SQLServerDBConnectionString'];
            if (sQLServerDBConnectionStringValue) {
              var sQLServerDBConnectionStringInstance = sQLServerDBConnectionStringValue;
              publishProfileInstance.sqlServerConnectionString = sQLServerDBConnectionStringInstance;
            }
            
            var mySQLDBConnectionStringValue = publishProfilesValue['mySQLDBConnectionString'];
            if (mySQLDBConnectionStringValue) {
              var mySQLDBConnectionStringInstance = mySQLDBConnectionStringValue;
              publishProfileInstance.mySqlConnectionString = mySQLDBConnectionStringInstance;
            }
            
            var hostingProviderForumLinkValue = publishProfilesValue['hostingProviderForumLink'];
            if (hostingProviderForumLinkValue) {
              var hostingProviderForumLinkInstance = hostingProviderForumLinkValue;
              publishProfileInstance.hostingProviderForumUri = hostingProviderForumLinkInstance;
            }
            
            var controlPanelLinkValue = publishProfilesValue['controlPanelLink'];
            if (controlPanelLinkValue) {
              var controlPanelLinkInstance = controlPanelLinkValue;
              publishProfileInstance.controlPanelUri = controlPanelLinkInstance;
            }
            
            var databasesArray = publishProfilesValue['databases'];
            if (databasesArray) {
              for (var loweredIndex2 = 0; loweredIndex2 < databasesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                var databasesValue = databasesArray[loweredIndex2];
                var addInstance = {};
                publishProfileInstance.databases.push(addInstance);
                
                var nameValue = databasesValue['name'];
                if (nameValue) {
                  var nameInstance = nameValue;
                  addInstance.name = nameInstance;
                }
                
                var connectionStringValue = databasesValue['connectionString'];
                if (connectionStringValue) {
                  var connectionStringInstance = connectionStringValue;
                  addInstance.connectionString = connectionStringInstance;
                }
                
                var providerNameValue = databasesValue['providerName'];
                if (providerNameValue) {
                  var providerNameInstance = providerNameValue;
                  addInstance.providerName = providerNameInstance;
                }
                
                var typeValue = databasesValue['type'];
                if (typeValue) {
                  var typeInstance = typeValue;
                  addInstance.type = typeInstance;
                }
              }
            }
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * A web site repository is essentially a GIT repository that you can use to
   * manage your web site content. By using GIT source control tools, you can
   * push or pull version controlled changes to your site. You can create a
   * repository for your web site by issuing an HTTP POST request, or retrieve
   * information about the repository by using HTTP GET.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx for
   * more information)
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} webSiteName The name of the web site.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  WebSiteOperations.prototype.getRepository = function(resourceGroupName, webSiteName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/resourceGroups/' + resourceGroupName.trim() + '/providers/Microsoft.Web/sites/' + webSiteName.trim() + '/repository?';
    url2 = url2 + 'api-version=2014-04-01';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = {};
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var uriValue = responseDoc['uri'];
        if (uriValue) {
          var uriInstance = uriValue;
          result.uri = uriInstance;
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Get a web site's current usage metrics. The metrics returned include CPU
   * Time, Data In, Data Out, Local bytes read, Local bytes written, Network
   * bytes read, Network bytes written, WP stop requests, Memory Usage, CPU
   * Time - Minute Limit, and File System Storage.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn166991.aspx for
   * more information)
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} webSiteName The name of the web site.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  WebSiteOperations.prototype.getUsageMetrics = function(resourceGroupName, webSiteName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/resourceGroups/' + resourceGroupName.trim() + '/providers/Microsoft.Web/sites/' + webSiteName.trim() + '/usages?';
    url2 = url2 + 'api-version=2014-04-01';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { usageMetrics: [] };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      var usagesValue = responseDoc['usages'];
      if (usagesValue) {
        var usagesInstance = { usageMetrics: [] };
        
        var usageMetricsArray = usagesValue;
        if (usageMetricsArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < usageMetricsArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var usageMetricsValue = usageMetricsArray[loweredIndex1];
            var usageInstance = {};
            usagesInstance.usageMetrics.push(usageInstance);
            
            var computeModeValue = usageMetricsValue['computeMode'];
            if (computeModeValue) {
              var computeModeInstance = computeModeValue;
              usageInstance.computeMode = computeModeInstance;
            }
            
            var currentValueValue = usageMetricsValue['currentValue'];
            if (currentValueValue) {
              var currentValueInstance = currentValueValue;
              usageInstance.currentValue = currentValueInstance;
            }
            
            var displayNameValue = usageMetricsValue['displayName'];
            if (displayNameValue) {
              var displayNameInstance = displayNameValue;
              usageInstance.displayName = displayNameInstance;
            }
            
            var limitValue = usageMetricsValue['limit'];
            if (limitValue) {
              var limitInstance = limitValue;
              usageInstance.limit = limitInstance;
            }
            
            var nameValue = usageMetricsValue['name'];
            if (nameValue) {
              var nameInstance = nameValue;
              usageInstance.name = nameInstance;
            }
            
            var nextResetTimeValue = usageMetricsValue['nextResetTime'];
            if (nextResetTimeValue) {
              var nextResetTimeInstance = nextResetTimeValue;
              usageInstance.nextResetTime = nextResetTimeInstance;
            }
            
            var resourceNameValue = usageMetricsValue['resourceName'];
            if (resourceNameValue) {
              var resourceNameInstance = resourceNameValue;
              usageInstance.resourceName = resourceNameInstance;
            }
            
            var siteModeValue = usageMetricsValue['siteMode'];
            if (siteModeValue) {
              var siteModeInstance = siteModeValue;
              usageInstance.siteMode = siteModeInstance;
            }
            
            var unitValue = usageMetricsValue['unit'];
            if (unitValue) {
              var unitInstance = unitValue;
              usageInstance.unit = unitInstance;
            }
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * List the Web Sites in a resource group.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {WebSiteListParameters} [parametersOrCallback] Additional
   * parameters.
   * 
   * @param {array} [parametersOrCallback.propertiesToInclude] Specifies a list
   * of the names of any addtional parameters to return.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  WebSiteOperations.prototype.list = function(resourceGroupName, parametersOrCallback, callback) {
    var parameters = parametersOrCallback;
    if (_.isFunction(parameters)) {
      callback = parameters;
      parameters = null;
    }
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/resourceGroups/' + resourceGroupName.trim() + '/providers/Microsoft.Web/sites?';
    url2 = url2 + 'api-version=2014-04-01';
    if (parameters && parameters.propertiesToInclude && parameters.propertiesToInclude.length > 0) {
      url2 = url2 + '&propertiesToInclude=' + encodeURIComponent(parameters.propertiesToInclude.join(','));
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      var responseContent = body;
      result = { webSites: [] };
      var responseDoc = null;
      if (responseContent) {
        responseDoc = JSON.parse(responseContent);
      }
      
      if (responseDoc) {
        var webSitesArray = responseDoc;
        if (webSitesArray) {
          for (var loweredIndex1 = 0; loweredIndex1 < webSitesArray.length; loweredIndex1 = loweredIndex1 + 1) {
            var webSitesValue = webSitesArray[loweredIndex1];
            var webSiteInstance = { tags: {} };
            result.webSites.push(webSiteInstance);
            
            var propertiesValue = webSitesValue['properties'];
            if (propertiesValue) {
              var propertiesInstance = { enabledHostNames: [], hostNames: [], hostNameSslStates: [], sslCertificates: [], trafficManagerHostNames: [] };
              webSiteInstance.properties = propertiesInstance;
              
              var adminEnabledValue = propertiesValue['adminEnabled'];
              if (adminEnabledValue) {
                var adminEnabledInstance = adminEnabledValue;
                propertiesInstance.adminEnabled = adminEnabledInstance;
              }
              
              var availabilityStateValue = propertiesValue['availabilityState'];
              if (availabilityStateValue) {
                var availabilityStateInstance = availabilityStateValue;
                propertiesInstance.availabilityState = availabilityStateInstance;
              }
              
              var computeModeValue = propertiesValue['computeMode'];
              if (computeModeValue) {
                var computeModeInstance = computeModeValue;
                propertiesInstance.computeMode = computeModeInstance;
              }
              
              var enabledValue = propertiesValue['enabled'];
              if (enabledValue) {
                var enabledInstance = enabledValue;
                propertiesInstance.enabled = enabledInstance;
              }
              
              var enabledHostNamesArray = propertiesValue['enabledHostNames'];
              if (enabledHostNamesArray) {
                for (var loweredIndex2 = 0; loweredIndex2 < enabledHostNamesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                  var enabledHostNamesValue = enabledHostNamesArray[loweredIndex2];
                  propertiesInstance.enabledHostNames.push(enabledHostNamesValue);
                }
              }
              
              var hostNameSslStatesArray = propertiesValue['hostNameSslStates'];
              if (hostNameSslStatesArray) {
                for (var loweredIndex3 = 0; loweredIndex3 < hostNameSslStatesArray.length; loweredIndex3 = loweredIndex3 + 1) {
                  var hostNameSslStatesValue = hostNameSslStatesArray[loweredIndex3];
                  var webSiteHostNameSslStateInstance = {};
                  propertiesInstance.hostNameSslStates.push(webSiteHostNameSslStateInstance);
                  
                  var nameValue = hostNameSslStatesValue['name'];
                  if (nameValue) {
                    var nameInstance = nameValue;
                    webSiteHostNameSslStateInstance.name = nameInstance;
                  }
                  
                  var sslStateValue = hostNameSslStatesValue['sslState'];
                  if (sslStateValue) {
                    var sslStateInstance = sslStateValue;
                    webSiteHostNameSslStateInstance.sslState = sslStateInstance;
                  }
                  
                  var thumbprintValue = hostNameSslStatesValue['thumbprint'];
                  if (thumbprintValue) {
                    var thumbprintInstance = thumbprintValue;
                    webSiteHostNameSslStateInstance.thumbprint = thumbprintInstance;
                  }
                  
                  var virtualIPValue = hostNameSslStatesValue['virtualIP'];
                  if (virtualIPValue) {
                    var virtualIPInstance = virtualIPValue;
                    webSiteHostNameSslStateInstance.virtualIP = virtualIPInstance;
                  }
                  
                  var ipBasedSslResultValue = hostNameSslStatesValue['ipBasedSslResult'];
                  if (ipBasedSslResultValue) {
                    var ipBasedSslResultInstance = ipBasedSslResultValue;
                    webSiteHostNameSslStateInstance.ipBasedSslResult = ipBasedSslResultInstance;
                  }
                  
                  var toUpdateValue = hostNameSslStatesValue['toUpdate'];
                  if (toUpdateValue) {
                    var toUpdateInstance = toUpdateValue;
                    webSiteHostNameSslStateInstance.toUpdate = toUpdateInstance;
                  }
                  
                  var toUpdateIpBasedSslValue = hostNameSslStatesValue['toUpdateIpBasedSsl'];
                  if (toUpdateIpBasedSslValue) {
                    var toUpdateIpBasedSslInstance = toUpdateIpBasedSslValue;
                    webSiteHostNameSslStateInstance.toUpdateIpBasedSsl = toUpdateIpBasedSslInstance;
                  }
                }
              }
              
              var hostNamesArray = propertiesValue['hostNames'];
              if (hostNamesArray) {
                for (var loweredIndex4 = 0; loweredIndex4 < hostNamesArray.length; loweredIndex4 = loweredIndex4 + 1) {
                  var hostNamesValue = hostNamesArray[loweredIndex4];
                  propertiesInstance.hostNames.push(hostNamesValue);
                }
              }
              
              var lastModifiedTimeUtcValue = propertiesValue['lastModifiedTimeUtc'];
              if (lastModifiedTimeUtcValue) {
                var lastModifiedTimeUtcInstance = lastModifiedTimeUtcValue;
                propertiesInstance.lastModifiedTimeUtc = lastModifiedTimeUtcInstance;
              }
              
              var ownerValue = propertiesValue['owner'];
              if (ownerValue) {
                var ownerInstance = ownerValue;
                propertiesInstance.owner = ownerInstance;
              }
              
              var repositorySiteNameValue = propertiesValue['repositorySiteName'];
              if (repositorySiteNameValue) {
                var repositorySiteNameInstance = repositorySiteNameValue;
                propertiesInstance.repositorySiteName = repositorySiteNameInstance;
              }
              
              var runtimeAvailabilityStateValue = propertiesValue['runtimeAvailabilityState'];
              if (runtimeAvailabilityStateValue) {
                var runtimeAvailabilityStateInstance = runtimeAvailabilityStateValue;
                propertiesInstance.runtimeAvailabilityState = runtimeAvailabilityStateInstance;
              }
              
              var trafficManagerHostNamesArray = propertiesValue['trafficManagerHostNames'];
              if (trafficManagerHostNamesArray) {
                for (var loweredIndex5 = 0; loweredIndex5 < trafficManagerHostNamesArray.length; loweredIndex5 = loweredIndex5 + 1) {
                  var trafficManagerHostNamesValue = trafficManagerHostNamesArray[loweredIndex5];
                  propertiesInstance.trafficManagerHostNames.push(trafficManagerHostNamesValue);
                }
              }
              
              var sslCertificatesArray = propertiesValue['sslCertificates'];
              if (sslCertificatesArray) {
                for (var loweredIndex6 = 0; loweredIndex6 < sslCertificatesArray.length; loweredIndex6 = loweredIndex6 + 1) {
                  var sslCertificatesValue = sslCertificatesArray[loweredIndex6];
                  var certificateInstance = { hostNames: [] };
                  propertiesInstance.sslCertificates.push(certificateInstance);
                  
                  var expirationDateValue = sslCertificatesValue['expirationDate'];
                  if (expirationDateValue) {
                    var expirationDateInstance = expirationDateValue;
                    certificateInstance.expirationDate = expirationDateInstance;
                  }
                  
                  var friendlyNameValue = sslCertificatesValue['friendlyName'];
                  if (friendlyNameValue) {
                    var friendlyNameInstance = friendlyNameValue;
                    certificateInstance.friendlyName = friendlyNameInstance;
                  }
                  
                  var hostNamesArray2 = sslCertificatesValue['hostNames'];
                  if (hostNamesArray2) {
                    for (var loweredIndex7 = 0; loweredIndex7 < hostNamesArray2.length; loweredIndex7 = loweredIndex7 + 1) {
                      var hostNamesValue2 = hostNamesArray2[loweredIndex7];
                      certificateInstance.hostNames.push(hostNamesValue2);
                    }
                  }
                  
                  var issueDateValue = sslCertificatesValue['issueDate'];
                  if (issueDateValue) {
                    var issueDateInstance = issueDateValue;
                    certificateInstance.issueDate = issueDateInstance;
                  }
                  
                  var issuerValue = sslCertificatesValue['issuer'];
                  if (issuerValue) {
                    var issuerInstance = issuerValue;
                    certificateInstance.issuer = issuerInstance;
                  }
                  
                  var passwordValue = sslCertificatesValue['password'];
                  if (passwordValue) {
                    var passwordInstance = passwordValue;
                    certificateInstance.password = passwordInstance;
                  }
                  
                  var pfxBlobValue = sslCertificatesValue['pfxBlob'];
                  if (pfxBlobValue) {
                    var pfxBlobInstance = new Buffer(pfxBlobValue, 'base64').toString('utf8');
                    certificateInstance.pfxBlob = pfxBlobInstance;
                  }
                  
                  var selfLinkValue = sslCertificatesValue['selfLink'];
                  if (selfLinkValue) {
                    var selfLinkInstance = selfLinkValue;
                    certificateInstance.selfLinkUri = selfLinkInstance;
                  }
                  
                  var siteNameValue = sslCertificatesValue['siteName'];
                  if (siteNameValue) {
                    var siteNameInstance = siteNameValue;
                    certificateInstance.siteName = siteNameInstance;
                  }
                  
                  var subjectNameValue = sslCertificatesValue['subjectName'];
                  if (subjectNameValue) {
                    var subjectNameInstance = subjectNameValue;
                    certificateInstance.subjectName = subjectNameInstance;
                  }
                  
                  var thumbprintValue2 = sslCertificatesValue['thumbprint'];
                  if (thumbprintValue2) {
                    var thumbprintInstance2 = thumbprintValue2;
                    certificateInstance.thumbprint = thumbprintInstance2;
                  }
                  
                  var toDeleteValue = sslCertificatesValue['toDelete'];
                  if (toDeleteValue) {
                    var toDeleteInstance = toDeleteValue;
                    certificateInstance.toDelete = toDeleteInstance;
                  }
                  
                  var validValue = sslCertificatesValue['valid'];
                  if (validValue) {
                    var validInstance = validValue;
                    certificateInstance.isValid = validInstance;
                  }
                  
                  var cerBlobValue = sslCertificatesValue['cerBlob'];
                  if (cerBlobValue) {
                    var cerBlobInstance = cerBlobValue;
                    certificateInstance.cerBlob = cerBlobInstance;
                  }
                  
                  var publicKeyHashValue = sslCertificatesValue['publicKeyHash'];
                  if (publicKeyHashValue) {
                    var publicKeyHashInstance = publicKeyHashValue;
                    certificateInstance.publicKeyHash = publicKeyHashInstance;
                  }
                }
              }
              
              var selfLinkValue2 = propertiesValue['selfLink'];
              if (selfLinkValue2) {
                var selfLinkInstance2 = selfLinkValue2;
                propertiesInstance.uri = selfLinkInstance2;
              }
              
              var serverFarmValue = propertiesValue['serverFarm'];
              if (serverFarmValue) {
                var serverFarmInstance = serverFarmValue;
                propertiesInstance.serverFarm = serverFarmInstance;
              }
              
              var siteModeValue = propertiesValue['siteMode'];
              if (siteModeValue) {
                var siteModeInstance = siteModeValue;
                propertiesInstance.siteMode = siteModeInstance;
              }
              
              var sitePropertiesValue = propertiesValue['siteProperties'];
              if (sitePropertiesValue) {
                var sitePropertiesInstance = { appSettings: {}, metadata: {}, properties: {} };
                propertiesInstance.properties = sitePropertiesInstance;
                
                var appSettingsSequenceElement = sitePropertiesValue['appSettings'];
                if (appSettingsSequenceElement) {
                  for (var property in appSettingsSequenceElement) {
                    var appSettingsKey = property;
                    var appSettingsValue = appSettingsSequenceElement[property];
                    sitePropertiesInstance.appSettings[appSettingsKey] = appSettingsValue;
                  }
                }
                
                var metadataSequenceElement = sitePropertiesValue['metadata'];
                if (metadataSequenceElement) {
                  for (var property2 in metadataSequenceElement) {
                    var metadataKey = property2;
                    var metadataValue = metadataSequenceElement[property2];
                    sitePropertiesInstance.metadata[metadataKey] = metadataValue;
                  }
                }
                
                var propertiesSequenceElement = sitePropertiesValue['properties'];
                if (propertiesSequenceElement) {
                  for (var property3 in propertiesSequenceElement) {
                    var propertiesKey = property3;
                    var propertiesValue2 = propertiesSequenceElement[property3];
                    sitePropertiesInstance.properties[propertiesKey] = propertiesValue2;
                  }
                }
              }
              
              var stateValue = propertiesValue['state'];
              if (stateValue) {
                var stateInstance = stateValue;
                propertiesInstance.state = stateInstance;
              }
              
              var usageStateValue = propertiesValue['usageState'];
              if (usageStateValue) {
                var usageStateInstance = usageStateValue;
                propertiesInstance.usageState = usageStateInstance;
              }
              
              var webSpaceValue = propertiesValue['webSpace'];
              if (webSpaceValue) {
                var webSpaceInstance = webSpaceValue;
                propertiesInstance.webSpace = webSpaceInstance;
              }
              
              var provisioningStateValue = propertiesValue['provisioningState'];
              if (provisioningStateValue) {
                var provisioningStateInstance = provisioningStateValue;
                propertiesInstance.provisioningState = provisioningStateInstance;
              }
            }
            
            var idValue = webSitesValue['id'];
            if (idValue) {
              var idInstance = idValue;
              webSiteInstance.id = idInstance;
            }
            
            var nameValue2 = webSitesValue['name'];
            if (nameValue2) {
              var nameInstance2 = nameValue2;
              webSiteInstance.name = nameInstance2;
            }
            
            var locationValue = webSitesValue['location'];
            if (locationValue) {
              var locationInstance = locationValue;
              webSiteInstance.location = locationInstance;
            }
            
            var tagsSequenceElement = webSitesValue['tags'];
            if (tagsSequenceElement) {
              for (var property4 in tagsSequenceElement) {
                var tagsKey = property4;
                var tagsValue = tagsSequenceElement[property4];
                webSiteInstance.tags[tagsKey] = tagsValue;
              }
            }
          }
        }
      }
      
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Restart the web site.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} webSiteName TBD
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  WebSiteOperations.prototype.restart = function(resourceGroupName, webSiteName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/resourceGroups/' + resourceGroupName.trim() + '/providers/Microsoft.Web/sites/' + webSiteName.trim() + '/restart?';
    url2 = url2 + 'api-version=2014-04-01';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Length'] = '0';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * You can retrieve the config settings for a web site by issuing an HTTP GET
   * request, or update them by using HTTP PUT with a request body that
   * contains the settings to be updated.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx for
   * more information)
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} webSiteName The name of the web site.
   * 
   * @param {WebSiteUpdateConfigurationParameters} parameters The Update Web
   * Site Configuration parameters.
   * 
   * @param {object} [parameters.appSettings] A set of name/value pairs that
   * contain application settings for a site.
   * 
   * @param {array} [parameters.connectionStrings] Contains connection strings
   * for database and other external resources.
   * 
   * @param {array} [parameters.defaultDocuments] Contains one or more string
   * elements that list, in order of preference, the name of the file that a
   * web site returns when the web site's domain name is requested by itself.
   * For example, if the default document for http://contoso.com is
   * default.htm, the page http://www.contoso.com/default.htm is returned when
   * the browser is pointed to http://www.contoso.com.
   * 
   * @param {boolean} [parameters.detailedErrorLoggingEnabled] True if detailed
   * error logging is enabled; otherwise, false.
   * 
   * @param {string} [parameters.documentRoot] The document root.
   * 
   * @param {array} [parameters.handlerMappings] Specifies custom executable
   * programs for handling requests for specific file name extensions.
   * 
   * @param {boolean} [parameters.httpLoggingEnabled] True if HTTP error
   * logging is enabled; otherwise, false.
   * 
   * @param {number} [parameters.logsDirectorySizeLimit] The limit of the logs
   * directory.
   * 
   * @param {ManagedPipelineMode} [parameters.managedPipelineMode] Managed
   * pipeline modes.
   * 
   * @param {object} [parameters.metadata] Contains name/value pairs for source
   * control or other information.
   * 
   * @param {string} [parameters.netFrameworkVersion] The .NET Framework
   * version. Supported values are v2.0 and v4.0.
   * 
   * @param {number} [parameters.numberOfWorkers] The number of web workers
   * allotted to the web site. If the site mode is Free, this value is 1. If
   * the site mode is Shared, this value can range from 1 through 6. If the
   * site mode is Standard, this value can range from 1 through 10.
   * 
   * @param {string} [parameters.phpVersion] Supported values are an empty
   * string (an empty string disables PHP), 5.3, and 5.4.
   * 
   * @param {string} [parameters.publishingPassword] Hash value of the password
   * used for publishing the web site.
   * 
   * @param {string} [parameters.publishingUserName] The username used for
   * publishing the web site. This is normally a dollar sign prepended to the
   * web site name (for example, "$contoso").
   * 
   * @param {boolean} [parameters.remoteDebuggingEnabled] True remote debugging
   * is enabled; otherwise, false.
   * 
   * @param {RemoteDebuggingVersion} parameters.remoteDebuggingVersion True
   * remote debugging version.
   * 
   * @param {boolean} [parameters.requestTracingEnabled] True if request
   * tracing is enabled; otherwise, false.
   * 
   * @param {date} [parameters.requestTracingExpirationTime] Time remaining
   * until request tracing expires.
   * 
   * @param {string} [parameters.scmType] The source control method that the
   * web site is using (for example, Local Git). If deployment from source
   * control has not been set up for the web site, this value is None.
   * 
   * @param {boolean} [parameters.use32BitWorkerProcess] True if 32-bit mode is
   * enabled; otherwise, false.
   * 
   * @param {boolean} [parameters.webSocketsEnabled] True if Web Sockets are
   * enabled; otherwise, false.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  WebSiteOperations.prototype.updateConfiguration = function(resourceGroupName, webSiteName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (webSiteName === null || webSiteName === undefined) {
      return callback(new Error('webSiteName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '/subscriptions/' + (this.client.credentials.subscriptionId ? this.client.credentials.subscriptionId.trim() : '') + '/resourceGroups/' + resourceGroupName.trim() + '/providers/Microsoft.Web/sites/' + webSiteName.trim() + '/config?';
    url2 = url2 + 'api-version=2014-04-01';
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var siteConfigValue = {};
    requestDoc = {};
    requestDoc['siteConfig'] = siteConfigValue;
    
    var appSettingsDictionary = {};
    if (parameters.appSettings) {
      for (var appSettingsKey in parameters.appSettings) {
        var appSettingsValue = parameters.appSettings[appSettingsKey];
        appSettingsDictionary[appSettingsKey] = appSettingsValue;
      }
    }
    siteConfigValue['appSettings'] = appSettingsDictionary;
    
    if (parameters.connectionStrings) {
      var connectionStringsArray = [];
      for (var loweredIndex1 = 0; loweredIndex1 < parameters.connectionStrings.length; loweredIndex1 = loweredIndex1 + 1) {
        var connectionStringsItem = parameters.connectionStrings[loweredIndex1];
        var connStringInfoValue = {};
        connectionStringsArray.push(connStringInfoValue);
        
        if (connectionStringsItem.connectionString) {
          connStringInfoValue['connectionString'] = connectionStringsItem.connectionString;
        }
        
        if (connectionStringsItem.name) {
          connStringInfoValue['name'] = connectionStringsItem.name;
        }
        
        if (connectionStringsItem.type) {
          connStringInfoValue['type'] = connectionStringsItem.type;
        }
      }
      siteConfigValue['connectionStrings'] = connectionStringsArray;
    }
    
    if (parameters.defaultDocuments) {
      var defaultDocumentsArray = [];
      for (var loweredIndex2 = 0; loweredIndex2 < parameters.defaultDocuments.length; loweredIndex2 = loweredIndex2 + 1) {
        var defaultDocumentsItem = parameters.defaultDocuments[loweredIndex2];
        defaultDocumentsArray.push(defaultDocumentsItem);
      }
      siteConfigValue['defaultDocuments'] = defaultDocumentsArray;
    }
    
    if (parameters.detailedErrorLoggingEnabled) {
      siteConfigValue['detailedErrorLoggingEnabled'] = parameters.detailedErrorLoggingEnabled;
    }
    
    if (parameters.documentRoot) {
      siteConfigValue['documentRoot'] = parameters.documentRoot;
    }
    
    if (parameters.handlerMappings) {
      var handlerMappingsArray = [];
      for (var loweredIndex3 = 0; loweredIndex3 < parameters.handlerMappings.length; loweredIndex3 = loweredIndex3 + 1) {
        var handlerMappingsItem = parameters.handlerMappings[loweredIndex3];
        var handlerMappingValue = {};
        handlerMappingsArray.push(handlerMappingValue);
        
        if (handlerMappingsItem.arguments) {
          handlerMappingValue['arguments'] = handlerMappingsItem.arguments;
        }
        
        if (handlerMappingsItem.extension) {
          handlerMappingValue['extension'] = handlerMappingsItem.extension;
        }
        
        if (handlerMappingsItem.scriptProcessor) {
          handlerMappingValue['scriptProcessor'] = handlerMappingsItem.scriptProcessor;
        }
      }
      siteConfigValue['handlerMappings'] = handlerMappingsArray;
    }
    
    if (parameters.httpLoggingEnabled) {
      siteConfigValue['httpLoggingEnabled'] = parameters.httpLoggingEnabled;
    }
    
    if (parameters.logsDirectorySizeLimit) {
      siteConfigValue['logsDirectorySizeLimit'] = parameters.logsDirectorySizeLimit;
    }
    
    if (parameters.managedPipelineMode) {
      siteConfigValue['managedPipelineMode'] = parameters.managedPipelineMode ? parameters.managedPipelineMode.toString() : 'Integrated';
    }
    
    var metadataDictionary = {};
    if (parameters.metadata) {
      for (var metadataKey in parameters.metadata) {
        var metadataValue = parameters.metadata[metadataKey];
        metadataDictionary[metadataKey] = metadataValue;
      }
    }
    siteConfigValue['metadata'] = metadataDictionary;
    
    if (parameters.netFrameworkVersion) {
      siteConfigValue['netFrameworkVersion'] = parameters.netFrameworkVersion;
    }
    
    if (parameters.numberOfWorkers) {
      siteConfigValue['numberOfWorkers'] = parameters.numberOfWorkers;
    }
    
    if (parameters.phpVersion) {
      siteConfigValue['phpVersion'] = parameters.phpVersion;
    }
    
    if (parameters.publishingPassword) {
      siteConfigValue['publishingPassword'] = parameters.publishingPassword;
    }
    
    if (parameters.publishingUserName) {
      siteConfigValue['publishingUsername'] = parameters.publishingUserName;
    }
    
    if (parameters.remoteDebuggingEnabled) {
      siteConfigValue['remoteDebuggingEnabled'] = parameters.remoteDebuggingEnabled;
    }
    
    siteConfigValue['remoteDebuggingVersion'] = parameters.remoteDebuggingVersion ? parameters.remoteDebuggingVersion.toString() : 'VS2012';
    
    if (parameters.requestTracingEnabled) {
      siteConfigValue['requestTracingEnabled'] = parameters.requestTracingEnabled;
    }
    
    if (parameters.requestTracingExpirationTime) {
      siteConfigValue['requestTracingExpirationTime'] = parameters.requestTracingExpirationTime;
    }
    
    if (parameters.scmType) {
      siteConfigValue['scmType'] = parameters.scmType;
    }
    
    if (parameters.use32BitWorkerProcess) {
      siteConfigValue['use32BitWorkerProcess'] = parameters.use32BitWorkerProcess;
    }
    
    if (parameters.webSocketsEnabled) {
      siteConfigValue['webSocketsEnabled'] = parameters.webSocketsEnabled;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return WebSiteOperations;
})();
