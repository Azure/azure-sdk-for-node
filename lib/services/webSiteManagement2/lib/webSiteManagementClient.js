/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

'use strict';

var util = require('util');
var msRest = require('ms-rest');
var msRestAzure = require('ms-rest-azure');
var ServiceClient = msRestAzure.AzureServiceClient;

var models = require('./models');
var operations = require('./operations');

/**
 * @class
 * Initializes a new instance of the WebSiteManagementClient class.
 * @constructor
 *
 * @param {Credentials} credentials The management credentials for Azure.
 *
 * @param {String} subscriptionId Subscription Id
 *
 * @param {string} [baseUri] - The base URI of the service.
 *
 * @param {object} [options] - The parameter options
 *
 * @param {Array} [options.filters] - Filters to be added to the request pipeline
 *
 * @param {object} [options.requestOptions] - Options for the underlying request object
 * {@link https://github.com/request/request#requestoptions-callback Options doc}
 *
 * @param {bool} [options.noRetryPolicy] - If set to true, turn off default retry policy
 */
function WebSiteManagementClient(credentials, subscriptionId, baseUri, options) {
  if (credentials === null || credentials === undefined) {
    throw new Error('\'credentials\' cannot be null.');
  }
  if (subscriptionId === null || subscriptionId === undefined) {
    throw new Error('\'subscriptionId\' cannot be null.');
  }

  if (!options) options = {};

  WebSiteManagementClient['super_'].call(this, credentials, options);
  this.baseUri = baseUri;
  if (!this.baseUri) {
    this.baseUri = 'https://management.azure.com';
  }
  this.credentials = credentials;
  this.subscriptionId = subscriptionId;

  if(!this.apiVersion) {
    this.apiVersion = '2015-08-01';
  }
  if(!this.acceptLanguage) {
    this.acceptLanguage = 'en-US';
  }
  this.certificates = new operations.Certificates(this);
  this.classicMobileServices = new operations.ClassicMobileServices(this);
  this.domains = new operations.Domains(this);
  this.global = new operations.Global(this);
  this.globalDomainRegistration = new operations.GlobalDomainRegistration(this);
  this.globalResourceGroups = new operations.GlobalResourceGroups(this);
  this.hostingEnvironments = new operations.HostingEnvironments(this);
  this.managedHostingEnvironments = new operations.ManagedHostingEnvironments(this);
  this.provider = new operations.Provider(this);
  this.serverFarms = new operations.ServerFarms(this);
  this.sites = new operations.Sites(this);
  this.topLevelDomains = new operations.TopLevelDomains(this);
  this.usageOperations = new operations.UsageOperations(this);
  this.models = models;
  msRest.addSerializationMixin(this);
}

util.inherits(WebSiteManagementClient, ServiceClient);

module.exports = WebSiteManagementClient;
