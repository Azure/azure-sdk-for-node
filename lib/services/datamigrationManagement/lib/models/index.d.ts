/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource } from 'ms-rest-azure';
import { CloudError } from 'ms-rest-azure';
import * as moment from 'moment';

export { BaseResource } from 'ms-rest-azure';
export { CloudError } from 'ms-rest-azure';


/**
 * @class
 * Initializes a new instance of the Resource class.
 * @constructor
 * ARM resource.
 *
 * @member {string} [id] Resource ID.
 * @member {string} [name] Resource name.
 * @member {string} [type] Resource type.
 */
export interface Resource extends BaseResource {
  readonly id?: string;
  readonly name?: string;
  readonly type?: string;
}

/**
 * @class
 * Initializes a new instance of the TrackedResource class.
 * @constructor
 * ARM tracked top level resource.
 *
 * @member {object} [tags] Resource tags.
 * @member {string} location Resource location.
 */
export interface TrackedResource extends Resource {
  tags?: { [propertyName: string]: string };
  location: string;
}

/**
 * @class
 * Initializes a new instance of the ODataError class.
 * @constructor
 * Error information in OData format.
 *
 * @member {string} [code] The machine-readable description of the error, such
 * as 'InvalidRequest' or 'InternalServerError'
 * @member {string} [message] The human-readable description of the error
 * @member {array} [details] Inner errors that caused this error
 */
export interface ODataError {
  code?: string;
  message?: string;
  details?: ODataError[];
}

/**
 * @class
 * Initializes a new instance of the ReportableException class.
 * @constructor
 * Exception object for all custom exceptions
 *
 * @member {string} [message] Error message
 * @member {string} [filePath] The path to the file where exception occurred
 * @member {string} [lineNumber] The line number where exception occurred
 * @member {number} [hResult] Coded numerical value that is assigned to a
 * specific exception
 * @member {string} [stackTrace] Stack trace
 */
export interface ReportableException {
  message?: string;
  filePath?: string;
  lineNumber?: string;
  hResult?: number;
  stackTrace?: string;
}

/**
 * @class
 * Initializes a new instance of the TaskOutput class.
 * @constructor
 * Base class for all DMS task outputs
 *
 * @member {string} [id] Result identifier
 */
export interface TaskOutput {
  readonly id?: string;
}

/**
 * @class
 * Initializes a new instance of the ValidateMigrationInputSqlServerSqlMITaskOutput class.
 * @constructor
 * Output for task that validates migration input for SQL to Azure SQL Managed
 * Instance migrations
 *
 * @member {string} [name] Name of database
 * @member {array} [restoreDatabaseNameErrors] Errors associated with the
 * RestoreDatabaseName
 * @member {array} [backupFolderErrors] Errors associated with the BackupFolder
 * path
 * @member {array} [backupShareCredentialsErrors] Errors associated with backup
 * share user name and password credentials
 * @member {array} [backupStorageAccountErrors] Errors associated with the
 * storage account provided.
 */
export interface ValidateMigrationInputSqlServerSqlMITaskOutput extends TaskOutput {
  readonly name?: string;
  readonly restoreDatabaseNameErrors?: ReportableException[];
  readonly backupFolderErrors?: ReportableException[];
  readonly backupShareCredentialsErrors?: ReportableException[];
  readonly backupStorageAccountErrors?: ReportableException[];
}

/**
 * @class
 * Initializes a new instance of the BlobShare class.
 * @constructor
 * Blob container storage information.
 *
 * @member {string} sasUri SAS URI of Azure Storage Account Container.
 */
export interface BlobShare {
  sasUri: string;
}

/**
 * @class
 * Initializes a new instance of the FileShare class.
 * @constructor
 * File share information with Path, Username, and Password.
 *
 * @member {string} [userName] User name credential to connect to the share
 * location
 * @member {string} [password] Password credential used to connect to the share
 * location.
 * @member {string} path The folder path for this share.
 */
export interface FileShare {
  userName?: string;
  password?: string;
  path: string;
}

/**
 * @class
 * Initializes a new instance of the MigrateSqlServerSqlMIDatabaseInput class.
 * @constructor
 * Database specific information for SQL to Azure SQL DB Managed Instance
 * migration task inputs
 *
 * @member {string} name Name of the database
 * @member {string} restoreDatabaseName Name of the database at destination
 * @member {object} [backupFileShare] Backup file share information for backing
 * up this database.
 * @member {string} [backupFileShare.userName] User name credential to connect
 * to the share location
 * @member {string} [backupFileShare.password] Password credential used to
 * connect to the share location.
 * @member {string} [backupFileShare.path] The folder path for this share.
 */
export interface MigrateSqlServerSqlMIDatabaseInput {
  name: string;
  restoreDatabaseName: string;
  backupFileShare?: FileShare;
}

/**
 * @class
 * Initializes a new instance of the ConnectionInfo class.
 * @constructor
 * Defines the connection properties of a server
 *
 * @member {string} [userName] User name
 * @member {string} [password] Password credential.
 * @member {string} type Polymorphic Discriminator
 */
export interface ConnectionInfo {
  userName?: string;
  password?: string;
  type: string;
}

/**
 * @class
 * Initializes a new instance of the SqlConnectionInfo class.
 * @constructor
 * Information for connecting to SQL database server
 *
 * @member {string} dataSource Data source in the format
 * Protocol:MachineName\SQLServerInstanceName,PortNumber
 * @member {string} [authentication] Authentication type to use for connection.
 * Possible values include: 'None', 'WindowsAuthentication',
 * 'SqlAuthentication', 'ActiveDirectoryIntegrated', 'ActiveDirectoryPassword'
 * @member {boolean} [encryptConnection] Whether to encrypt the connection.
 * Default value: true .
 * @member {string} [additionalSettings] Additional connection settings
 * @member {boolean} [trustServerCertificate] Whether to trust the server
 * certificate. Default value: false .
 */
export interface SqlConnectionInfo extends ConnectionInfo {
  dataSource: string;
  authentication?: string;
  encryptConnection?: boolean;
  additionalSettings?: string;
  trustServerCertificate?: boolean;
}

/**
 * @class
 * Initializes a new instance of the ValidateMigrationInputSqlServerSqlMITaskInput class.
 * @constructor
 * Input for task that validates migration input for SQL to Azure SQL Managed
 * Instance
 *
 * @member {object} targetConnectionInfo Information for connecting to target
 * @member {string} [targetConnectionInfo.dataSource] Data source in the format
 * Protocol:MachineName\SQLServerInstanceName,PortNumber
 * @member {string} [targetConnectionInfo.authentication] Authentication type
 * to use for connection. Possible values include: 'None',
 * 'WindowsAuthentication', 'SqlAuthentication', 'ActiveDirectoryIntegrated',
 * 'ActiveDirectoryPassword'
 * @member {boolean} [targetConnectionInfo.encryptConnection] Whether to
 * encrypt the connection
 * @member {string} [targetConnectionInfo.additionalSettings] Additional
 * connection settings
 * @member {boolean} [targetConnectionInfo.trustServerCertificate] Whether to
 * trust the server certificate
 * @member {array} selectedDatabases Databases to migrate
 * @member {object} [backupFileShare] Backup file share information for all
 * selected databases.
 * @member {string} [backupFileShare.userName] User name credential to connect
 * to the share location
 * @member {string} [backupFileShare.password] Password credential used to
 * connect to the share location.
 * @member {string} [backupFileShare.path] The folder path for this share.
 * @member {object} backupBlobShare SAS URI of Azure Storage Account Container
 * to be used for storing backup files.
 * @member {string} [backupBlobShare.sasUri] SAS URI of Azure Storage Account
 * Container.
 */
export interface ValidateMigrationInputSqlServerSqlMITaskInput {
  targetConnectionInfo: SqlConnectionInfo;
  selectedDatabases: MigrateSqlServerSqlMIDatabaseInput[];
  backupFileShare?: FileShare;
  backupBlobShare: BlobShare;
}

/**
 * @class
 * Initializes a new instance of the ProjectTaskProperties class.
 * @constructor
 * Base class for all types of DMS task properties. If task is not supported by
 * current client, this object is returned.
 *
 * @member {array} [errors] Array of errors. This is ignored if submitted.
 * @member {string} [state] The state of the task. This is ignored if
 * submitted. Possible values include: 'Unknown', 'Queued', 'Running',
 * 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
 * @member {string} taskType Polymorphic Discriminator
 */
export interface ProjectTaskProperties {
  readonly errors?: ODataError[];
  readonly state?: string;
  taskType: string;
}

/**
 * @class
 * Initializes a new instance of the ValidateMigrationInputSqlServerSqlMITaskProperties class.
 * @constructor
 * Properties for task that validates migration input for SQL to Azure SQL
 * Database Managed Instance
 *
 * @member {object} [input] Task input
 * @member {object} [input.targetConnectionInfo] Information for connecting to
 * target
 * @member {string} [input.targetConnectionInfo.dataSource] Data source in the
 * format Protocol:MachineName\SQLServerInstanceName,PortNumber
 * @member {string} [input.targetConnectionInfo.authentication] Authentication
 * type to use for connection. Possible values include: 'None',
 * 'WindowsAuthentication', 'SqlAuthentication', 'ActiveDirectoryIntegrated',
 * 'ActiveDirectoryPassword'
 * @member {boolean} [input.targetConnectionInfo.encryptConnection] Whether to
 * encrypt the connection
 * @member {string} [input.targetConnectionInfo.additionalSettings] Additional
 * connection settings
 * @member {boolean} [input.targetConnectionInfo.trustServerCertificate]
 * Whether to trust the server certificate
 * @member {array} [input.selectedDatabases] Databases to migrate
 * @member {object} [input.backupFileShare] Backup file share information for
 * all selected databases.
 * @member {string} [input.backupFileShare.userName] User name credential to
 * connect to the share location
 * @member {string} [input.backupFileShare.password] Password credential used
 * to connect to the share location.
 * @member {string} [input.backupFileShare.path] The folder path for this
 * share.
 * @member {object} [input.backupBlobShare] SAS URI of Azure Storage Account
 * Container to be used for storing backup files.
 * @member {string} [input.backupBlobShare.sasUri] SAS URI of Azure Storage
 * Account Container.
 * @member {array} [output] Task output. This is ignored if submitted.
 */
export interface ValidateMigrationInputSqlServerSqlMITaskProperties extends ProjectTaskProperties {
  input?: ValidateMigrationInputSqlServerSqlMITaskInput;
  readonly output?: ValidateMigrationInputSqlServerSqlMITaskOutput[];
}

/**
 * @class
 * Initializes a new instance of the ValidationError class.
 * @constructor
 * Description about the errors happen while performing migration validation
 *
 * @member {string} [text] Error Text
 * @member {string} [severity] Severity of the error. Possible values include:
 * 'Message', 'Warning', 'Error'
 */
export interface ValidationError {
  text?: string;
  severity?: string;
}

/**
 * @class
 * Initializes a new instance of the WaitStatistics class.
 * @constructor
 * Wait statistics gathered during query batch execution
 *
 * @member {string} [waitType] Type of the Wait
 * @member {number} [waitTimeMs] Total wait time in millisecond(s) . Default
 * value: 0 .
 * @member {number} [waitCount] Total no. of waits
 */
export interface WaitStatistics {
  waitType?: string;
  waitTimeMs?: number;
  waitCount?: number;
}

/**
 * @class
 * Initializes a new instance of the ExecutionStatistics class.
 * @constructor
 * Description about the errors happen while performing migration validation
 *
 * @member {number} [executionCount] No. of query executions
 * @member {number} [cpuTimeMs] CPU Time in millisecond(s) for the query
 * execution
 * @member {number} [elapsedTimeMs] Time taken in millisecond(s) for executing
 * the query
 * @member {object} [waitStats] Dictionary of sql query execution wait types
 * and the respective statistics
 * @member {boolean} [hasErrors] Indicates whether the query resulted in an
 * error
 * @member {array} [sqlErrors] List of sql Errors
 */
export interface ExecutionStatistics {
  executionCount?: number;
  cpuTimeMs?: number;
  elapsedTimeMs?: number;
  waitStats?: { [propertyName: string]: WaitStatistics };
  hasErrors?: boolean;
  sqlErrors?: string[];
}

/**
 * @class
 * Initializes a new instance of the QueryExecutionResult class.
 * @constructor
 * Describes query analysis results for execution in source and target
 *
 * @member {string} [queryText] Query text retrieved from the source server
 * @member {number} [statementsInBatch] Total no. of statements in the batch
 * @member {object} [sourceResult] Query analysis result from the source
 * @member {number} [sourceResult.executionCount] No. of query executions
 * @member {number} [sourceResult.cpuTimeMs] CPU Time in millisecond(s) for the
 * query execution
 * @member {number} [sourceResult.elapsedTimeMs] Time taken in millisecond(s)
 * for executing the query
 * @member {object} [sourceResult.waitStats] Dictionary of sql query execution
 * wait types and the respective statistics
 * @member {boolean} [sourceResult.hasErrors] Indicates whether the query
 * resulted in an error
 * @member {array} [sourceResult.sqlErrors] List of sql Errors
 * @member {object} [targetResult] Query analysis result from the target
 * @member {number} [targetResult.executionCount] No. of query executions
 * @member {number} [targetResult.cpuTimeMs] CPU Time in millisecond(s) for the
 * query execution
 * @member {number} [targetResult.elapsedTimeMs] Time taken in millisecond(s)
 * for executing the query
 * @member {object} [targetResult.waitStats] Dictionary of sql query execution
 * wait types and the respective statistics
 * @member {boolean} [targetResult.hasErrors] Indicates whether the query
 * resulted in an error
 * @member {array} [targetResult.sqlErrors] List of sql Errors
 */
export interface QueryExecutionResult {
  queryText?: string;
  statementsInBatch?: number;
  sourceResult?: ExecutionStatistics;
  targetResult?: ExecutionStatistics;
}

/**
 * @class
 * Initializes a new instance of the QueryAnalysisValidationResult class.
 * @constructor
 * Results for query analysis comparison between the source and target
 *
 * @member {object} [queryResults] List of queries executed and it's execution
 * results in source and target
 * @member {string} [queryResults.queryText] Query text retrieved from the
 * source server
 * @member {number} [queryResults.statementsInBatch] Total no. of statements in
 * the batch
 * @member {object} [queryResults.sourceResult] Query analysis result from the
 * source
 * @member {number} [queryResults.sourceResult.executionCount] No. of query
 * executions
 * @member {number} [queryResults.sourceResult.cpuTimeMs] CPU Time in
 * millisecond(s) for the query execution
 * @member {number} [queryResults.sourceResult.elapsedTimeMs] Time taken in
 * millisecond(s) for executing the query
 * @member {object} [queryResults.sourceResult.waitStats] Dictionary of sql
 * query execution wait types and the respective statistics
 * @member {boolean} [queryResults.sourceResult.hasErrors] Indicates whether
 * the query resulted in an error
 * @member {array} [queryResults.sourceResult.sqlErrors] List of sql Errors
 * @member {object} [queryResults.targetResult] Query analysis result from the
 * target
 * @member {number} [queryResults.targetResult.executionCount] No. of query
 * executions
 * @member {number} [queryResults.targetResult.cpuTimeMs] CPU Time in
 * millisecond(s) for the query execution
 * @member {number} [queryResults.targetResult.elapsedTimeMs] Time taken in
 * millisecond(s) for executing the query
 * @member {object} [queryResults.targetResult.waitStats] Dictionary of sql
 * query execution wait types and the respective statistics
 * @member {boolean} [queryResults.targetResult.hasErrors] Indicates whether
 * the query resulted in an error
 * @member {array} [queryResults.targetResult.sqlErrors] List of sql Errors
 * @member {object} [validationErrors] Errors that are part of the execution
 * @member {string} [validationErrors.text] Error Text
 * @member {string} [validationErrors.severity] Severity of the error. Possible
 * values include: 'Message', 'Warning', 'Error'
 */
export interface QueryAnalysisValidationResult {
  queryResults?: QueryExecutionResult;
  validationErrors?: ValidationError;
}

/**
 * @class
 * Initializes a new instance of the SchemaComparisonValidationResultType class.
 * @constructor
 * Description about the errors happen while performing migration validation
 *
 * @member {string} [objectName] Name of the object that has the difference
 * @member {string} [objectType] Type of the object that has the difference.
 * e.g (Table/View/StoredProcedure). Possible values include:
 * 'StoredProcedures', 'Table', 'User', 'View', 'Function'
 * @member {string} [updateAction] Update action type with respect to target.
 * Possible values include: 'DeletedOnTarget', 'ChangedOnTarget',
 * 'AddedOnTarget'
 */
export interface SchemaComparisonValidationResultType {
  objectName?: string;
  objectType?: string;
  updateAction?: string;
}

/**
 * @class
 * Initializes a new instance of the SchemaComparisonValidationResult class.
 * @constructor
 * Results for schema comparison between the source and target
 *
 * @member {object} [schemaDifferences] List of schema differences between the
 * source and target databases
 * @member {string} [schemaDifferences.objectName] Name of the object that has
 * the difference
 * @member {string} [schemaDifferences.objectType] Type of the object that has
 * the difference. e.g (Table/View/StoredProcedure). Possible values include:
 * 'StoredProcedures', 'Table', 'User', 'View', 'Function'
 * @member {string} [schemaDifferences.updateAction] Update action type with
 * respect to target. Possible values include: 'DeletedOnTarget',
 * 'ChangedOnTarget', 'AddedOnTarget'
 * @member {object} [validationErrors] List of errors that happened while
 * performing schema compare validation
 * @member {string} [validationErrors.text] Error Text
 * @member {string} [validationErrors.severity] Severity of the error. Possible
 * values include: 'Message', 'Warning', 'Error'
 * @member {object} [sourceDatabaseObjectCount] Count of source database
 * objects
 * @member {object} [targetDatabaseObjectCount] Count of target database
 * objects
 */
export interface SchemaComparisonValidationResult {
  schemaDifferences?: SchemaComparisonValidationResultType;
  validationErrors?: ValidationError;
  sourceDatabaseObjectCount?: { [propertyName: string]: number };
  targetDatabaseObjectCount?: { [propertyName: string]: number };
}

/**
 * @class
 * Initializes a new instance of the DataIntegrityValidationResult class.
 * @constructor
 * Results for checksum based Data Integrity validation results
 *
 * @member {object} [failedObjects] List of failed table names of source and
 * target pair
 * @member {object} [validationErrors] List of errors that happened while
 * performing data integrity validation
 * @member {string} [validationErrors.text] Error Text
 * @member {string} [validationErrors.severity] Severity of the error. Possible
 * values include: 'Message', 'Warning', 'Error'
 */
export interface DataIntegrityValidationResult {
  failedObjects?: { [propertyName: string]: string };
  validationErrors?: ValidationError;
}

/**
 * @class
 * Initializes a new instance of the MigrationValidationDatabaseLevelResult class.
 * @constructor
 * Database level validation results
 *
 * @member {string} [id] Result identifier
 * @member {string} [migrationId] Migration Identifier
 * @member {string} [sourceDatabaseName] Name of the source database
 * @member {string} [targetDatabaseName] Name of the target database
 * @member {date} [startedOn] Validation start time
 * @member {date} [endedOn] Validation end time
 * @member {object} [dataIntegrityValidationResult] Provides data integrity
 * validation result between the source and target tables that are migrated.
 * @member {object} [dataIntegrityValidationResult.failedObjects] List of
 * failed table names of source and target pair
 * @member {object} [dataIntegrityValidationResult.validationErrors] List of
 * errors that happened while performing data integrity validation
 * @member {string} [dataIntegrityValidationResult.validationErrors.text] Error
 * Text
 * @member {string} [dataIntegrityValidationResult.validationErrors.severity]
 * Severity of the error. Possible values include: 'Message', 'Warning',
 * 'Error'
 * @member {object} [schemaValidationResult] Provides schema comparison result
 * between source and target database
 * @member {object} [schemaValidationResult.schemaDifferences] List of schema
 * differences between the source and target databases
 * @member {string} [schemaValidationResult.schemaDifferences.objectName] Name
 * of the object that has the difference
 * @member {string} [schemaValidationResult.schemaDifferences.objectType] Type
 * of the object that has the difference. e.g (Table/View/StoredProcedure).
 * Possible values include: 'StoredProcedures', 'Table', 'User', 'View',
 * 'Function'
 * @member {string} [schemaValidationResult.schemaDifferences.updateAction]
 * Update action type with respect to target. Possible values include:
 * 'DeletedOnTarget', 'ChangedOnTarget', 'AddedOnTarget'
 * @member {object} [schemaValidationResult.validationErrors] List of errors
 * that happened while performing schema compare validation
 * @member {string} [schemaValidationResult.validationErrors.text] Error Text
 * @member {string} [schemaValidationResult.validationErrors.severity] Severity
 * of the error. Possible values include: 'Message', 'Warning', 'Error'
 * @member {object} [schemaValidationResult.sourceDatabaseObjectCount] Count of
 * source database objects
 * @member {object} [schemaValidationResult.targetDatabaseObjectCount] Count of
 * target database objects
 * @member {object} [queryAnalysisValidationResult] Results of some of the
 * query execution result between source and target database
 * @member {object} [queryAnalysisValidationResult.queryResults] List of
 * queries executed and it's execution results in source and target
 * @member {string} [queryAnalysisValidationResult.queryResults.queryText]
 * Query text retrieved from the source server
 * @member {number}
 * [queryAnalysisValidationResult.queryResults.statementsInBatch] Total no. of
 * statements in the batch
 * @member {object} [queryAnalysisValidationResult.queryResults.sourceResult]
 * Query analysis result from the source
 * @member {number}
 * [queryAnalysisValidationResult.queryResults.sourceResult.executionCount] No.
 * of query executions
 * @member {number}
 * [queryAnalysisValidationResult.queryResults.sourceResult.cpuTimeMs] CPU Time
 * in millisecond(s) for the query execution
 * @member {number}
 * [queryAnalysisValidationResult.queryResults.sourceResult.elapsedTimeMs] Time
 * taken in millisecond(s) for executing the query
 * @member {object}
 * [queryAnalysisValidationResult.queryResults.sourceResult.waitStats]
 * Dictionary of sql query execution wait types and the respective statistics
 * @member {boolean}
 * [queryAnalysisValidationResult.queryResults.sourceResult.hasErrors]
 * Indicates whether the query resulted in an error
 * @member {array}
 * [queryAnalysisValidationResult.queryResults.sourceResult.sqlErrors] List of
 * sql Errors
 * @member {object} [queryAnalysisValidationResult.queryResults.targetResult]
 * Query analysis result from the target
 * @member {number}
 * [queryAnalysisValidationResult.queryResults.targetResult.executionCount] No.
 * of query executions
 * @member {number}
 * [queryAnalysisValidationResult.queryResults.targetResult.cpuTimeMs] CPU Time
 * in millisecond(s) for the query execution
 * @member {number}
 * [queryAnalysisValidationResult.queryResults.targetResult.elapsedTimeMs] Time
 * taken in millisecond(s) for executing the query
 * @member {object}
 * [queryAnalysisValidationResult.queryResults.targetResult.waitStats]
 * Dictionary of sql query execution wait types and the respective statistics
 * @member {boolean}
 * [queryAnalysisValidationResult.queryResults.targetResult.hasErrors]
 * Indicates whether the query resulted in an error
 * @member {array}
 * [queryAnalysisValidationResult.queryResults.targetResult.sqlErrors] List of
 * sql Errors
 * @member {object} [queryAnalysisValidationResult.validationErrors] Errors
 * that are part of the execution
 * @member {string} [queryAnalysisValidationResult.validationErrors.text] Error
 * Text
 * @member {string} [queryAnalysisValidationResult.validationErrors.severity]
 * Severity of the error. Possible values include: 'Message', 'Warning',
 * 'Error'
 * @member {string} [status] Current status of validation at the database
 * level. Possible values include: 'Default', 'NotStarted', 'Initialized',
 * 'InProgress', 'Completed', 'CompletedWithIssues', 'Failed', 'Stopped'
 */
export interface MigrationValidationDatabaseLevelResult {
  readonly id?: string;
  readonly migrationId?: string;
  readonly sourceDatabaseName?: string;
  readonly targetDatabaseName?: string;
  readonly startedOn?: Date;
  readonly endedOn?: Date;
  readonly dataIntegrityValidationResult?: DataIntegrityValidationResult;
  readonly schemaValidationResult?: SchemaComparisonValidationResult;
  readonly queryAnalysisValidationResult?: QueryAnalysisValidationResult;
  readonly status?: string;
}

/**
 * @class
 * Initializes a new instance of the MigrationValidationDatabaseSummaryResult class.
 * @constructor
 * Migration Validation Database level summary result
 *
 * @member {string} [id] Result identifier
 * @member {string} [migrationId] Migration Identifier
 * @member {string} [sourceDatabaseName] Name of the source database
 * @member {string} [targetDatabaseName] Name of the target database
 * @member {date} [startedOn] Validation start time
 * @member {date} [endedOn] Validation end time
 * @member {string} [status] Current status of validation at the database
 * level. Possible values include: 'Default', 'NotStarted', 'Initialized',
 * 'InProgress', 'Completed', 'CompletedWithIssues', 'Failed', 'Stopped'
 */
export interface MigrationValidationDatabaseSummaryResult {
  readonly id?: string;
  readonly migrationId?: string;
  readonly sourceDatabaseName?: string;
  readonly targetDatabaseName?: string;
  readonly startedOn?: Date;
  readonly endedOn?: Date;
  readonly status?: string;
}

/**
 * @class
 * Initializes a new instance of the MigrationValidationResult class.
 * @constructor
 * Migration Validation Result
 *
 * @member {string} [id] Migration validation result identifier
 * @member {string} [migrationId] Migration Identifier
 * @member {object} [summaryResults] Validation summary results for each
 * database
 * @member {string} [status] Current status of validation at the migration
 * level. Status from the database validation result status will be aggregated
 * here. Possible values include: 'Default', 'NotStarted', 'Initialized',
 * 'InProgress', 'Completed', 'CompletedWithIssues', 'Failed', 'Stopped'
 */
export interface MigrationValidationResult {
  readonly id?: string;
  readonly migrationId?: string;
  summaryResults?: { [propertyName: string]: MigrationValidationDatabaseSummaryResult };
  readonly status?: string;
}

/**
 * @class
 * Initializes a new instance of the MigrateSqlServerSqlDbTaskOutput class.
 * @constructor
 * Output for the task that migrates on-prem SQL Server databases to Azure SQL
 * Database
 *
 * @member {string} resultType Polymorphic Discriminator
 */
export interface MigrateSqlServerSqlDbTaskOutput extends TaskOutput {
  resultType: string;
}

/**
 * @class
 * Initializes a new instance of the MigrateSqlServerSqlDbTaskOutputError class.
 * @constructor
 * @member {object} [error] Migration error
 * @member {string} [error.message] Error message
 * @member {string} [error.filePath] The path to the file where exception
 * occurred
 * @member {string} [error.lineNumber] The line number where exception occurred
 * @member {number} [error.hResult] Coded numerical value that is assigned to a
 * specific exception
 * @member {string} [error.stackTrace] Stack trace
 */
export interface MigrateSqlServerSqlDbTaskOutputError extends MigrateSqlServerSqlDbTaskOutput {
  readonly error?: ReportableException;
}

/**
 * @class
 * Initializes a new instance of the MigrateSqlServerSqlDbTaskOutputTableLevel class.
 * @constructor
 * @member {string} [objectName] Name of the item
 * @member {date} [startedOn] Migration start time
 * @member {date} [endedOn] Migration end time
 * @member {string} [state] Current state of migration. Possible values
 * include: 'None', 'InProgress', 'Failed', 'Warning', 'Completed', 'Skipped',
 * 'Stopped'
 * @member {string} [statusMessage] Status message
 * @member {number} [itemsCount] Number of items
 * @member {number} [itemsCompletedCount] Number of successfully completed
 * items
 * @member {string} [errorPrefix] Wildcard string prefix to use for querying
 * all errors of the item
 * @member {string} [resultPrefix] Wildcard string prefix to use for querying
 * all sub-tem results of the item
 */
export interface MigrateSqlServerSqlDbTaskOutputTableLevel extends MigrateSqlServerSqlDbTaskOutput {
  readonly objectName?: string;
  readonly startedOn?: Date;
  readonly endedOn?: Date;
  readonly state?: string;
  readonly statusMessage?: string;
  readonly itemsCount?: number;
  readonly itemsCompletedCount?: number;
  readonly errorPrefix?: string;
  readonly resultPrefix?: string;
}

/**
 * @class
 * Initializes a new instance of the DataItemMigrationSummaryResult class.
 * @constructor
 * Basic summary of a data item migration
 *
 * @member {string} [name] Name of the item
 * @member {date} [startedOn] Migration start time
 * @member {date} [endedOn] Migration end time
 * @member {string} [state] Current state of migration. Possible values
 * include: 'None', 'InProgress', 'Failed', 'Warning', 'Completed', 'Skipped',
 * 'Stopped'
 * @member {string} [statusMessage] Status message
 * @member {number} [itemsCount] Number of items
 * @member {number} [itemsCompletedCount] Number of successfully completed
 * items
 * @member {string} [errorPrefix] Wildcard string prefix to use for querying
 * all errors of the item
 * @member {string} [resultPrefix] Wildcard string prefix to use for querying
 * all sub-tem results of the item
 */
export interface DataItemMigrationSummaryResult {
  readonly name?: string;
  readonly startedOn?: Date;
  readonly endedOn?: Date;
  readonly state?: string;
  readonly statusMessage?: string;
  readonly itemsCount?: number;
  readonly itemsCompletedCount?: number;
  readonly errorPrefix?: string;
  readonly resultPrefix?: string;
}

/**
 * @class
 * Initializes a new instance of the MigrateSqlServerSqlDbTaskOutputDatabaseLevel class.
 * @constructor
 * @member {string} [databaseName] Name of the item
 * @member {date} [startedOn] Migration start time
 * @member {date} [endedOn] Migration end time
 * @member {string} [state] Current state of migration. Possible values
 * include: 'None', 'InProgress', 'Failed', 'Warning', 'Completed', 'Skipped',
 * 'Stopped'
 * @member {string} [stage] Migration stage that this database is in. Possible
 * values include: 'None', 'Initialize', 'Backup', 'FileCopy', 'Restore',
 * 'Completed'
 * @member {string} [statusMessage] Status message
 * @member {string} [message] Migration progress message
 * @member {number} [numberOfObjects] Number of objects
 * @member {number} [numberOfObjectsCompleted] Number of successfully completed
 * objects
 * @member {number} [errorCount] Number of database/object errors.
 * @member {string} [errorPrefix] Wildcard string prefix to use for querying
 * all errors of the item
 * @member {string} [resultPrefix] Wildcard string prefix to use for querying
 * all sub-tem results of the item
 * @member {array} [exceptionsAndWarnings] Migration exceptions and warnings.
 * @member {object} [objectSummary] Summary of object results in the migration
 */
export interface MigrateSqlServerSqlDbTaskOutputDatabaseLevel extends MigrateSqlServerSqlDbTaskOutput {
  readonly databaseName?: string;
  readonly startedOn?: Date;
  readonly endedOn?: Date;
  readonly state?: string;
  readonly stage?: string;
  readonly statusMessage?: string;
  readonly message?: string;
  readonly numberOfObjects?: number;
  readonly numberOfObjectsCompleted?: number;
  readonly errorCount?: number;
  readonly errorPrefix?: string;
  readonly resultPrefix?: string;
  readonly exceptionsAndWarnings?: ReportableException[];
  readonly objectSummary?: { [propertyName: string]: DataItemMigrationSummaryResult };
}

/**
 * @class
 * Initializes a new instance of the MigrationReportResult class.
 * @constructor
 * Migration validation report result, contains the url for downloading the
 * generated report.
 *
 * @member {string} [id] Migration validation result identifier
 * @member {string} [reportUrl] The url of the report.
 */
export interface MigrationReportResult {
  id?: string;
  reportUrl?: string;
}

/**
 * @class
 * Initializes a new instance of the DatabaseSummaryResult class.
 * @constructor
 * Summary of database results in the migration
 *
 * @member {number} [sizeMB] Size of the database in megabytes
 */
export interface DatabaseSummaryResult extends DataItemMigrationSummaryResult {
  readonly sizeMB?: number;
}

/**
 * @class
 * Initializes a new instance of the MigrateSqlServerSqlDbTaskOutputMigrationLevel class.
 * @constructor
 * @member {date} [startedOn] Migration start time
 * @member {date} [endedOn] Migration end time
 * @member {number} [durationInSeconds] Duration of task execution in seconds.
 * @member {string} [status] Current status of migration. Possible values
 * include: 'Default', 'Connecting', 'SourceAndTargetSelected', 'SelectLogins',
 * 'Configured', 'Running', 'Error', 'Stopped', 'Completed',
 * 'CompletedWithWarnings'
 * @member {string} [statusMessage] Migration status message
 * @member {string} [message] Migration progress message
 * @member {object} [databases] Selected databases as a map from database name
 * to database id
 * @member {object} [databaseSummary] Summary of database results in the
 * migration
 * @member {object} [migrationReportResult] Migration Report Result, provides
 * unique url for downloading your migration report.
 * @member {string} [migrationReportResult.id] Migration validation result
 * identifier
 * @member {string} [migrationReportResult.reportUrl] The url of the report.
 * @member {string} [sourceServerVersion] Source server version
 * @member {string} [sourceServerBrandVersion] Source server brand version
 * @member {string} [targetServerVersion] Target server version
 * @member {string} [targetServerBrandVersion] Target server brand version
 * @member {array} [exceptionsAndWarnings] Migration exceptions and warnings.
 */
export interface MigrateSqlServerSqlDbTaskOutputMigrationLevel extends MigrateSqlServerSqlDbTaskOutput {
  readonly startedOn?: Date;
  readonly endedOn?: Date;
  readonly durationInSeconds?: number;
  readonly status?: string;
  readonly statusMessage?: string;
  readonly message?: string;
  readonly databases?: { [propertyName: string]: string };
  readonly databaseSummary?: { [propertyName: string]: DatabaseSummaryResult };
  migrationReportResult?: MigrationReportResult;
  readonly sourceServerVersion?: string;
  readonly sourceServerBrandVersion?: string;
  readonly targetServerVersion?: string;
  readonly targetServerBrandVersion?: string;
  readonly exceptionsAndWarnings?: ReportableException[];
}

/**
 * @class
 * Initializes a new instance of the SqlMigrationTaskInput class.
 * @constructor
 * Base class for migration task input
 *
 * @member {object} sourceConnectionInfo Information for connecting to source
 * @member {string} [sourceConnectionInfo.dataSource] Data source in the format
 * Protocol:MachineName\SQLServerInstanceName,PortNumber
 * @member {string} [sourceConnectionInfo.authentication] Authentication type
 * to use for connection. Possible values include: 'None',
 * 'WindowsAuthentication', 'SqlAuthentication', 'ActiveDirectoryIntegrated',
 * 'ActiveDirectoryPassword'
 * @member {boolean} [sourceConnectionInfo.encryptConnection] Whether to
 * encrypt the connection
 * @member {string} [sourceConnectionInfo.additionalSettings] Additional
 * connection settings
 * @member {boolean} [sourceConnectionInfo.trustServerCertificate] Whether to
 * trust the server certificate
 * @member {object} targetConnectionInfo Information for connecting to target
 * @member {string} [targetConnectionInfo.dataSource] Data source in the format
 * Protocol:MachineName\SQLServerInstanceName,PortNumber
 * @member {string} [targetConnectionInfo.authentication] Authentication type
 * to use for connection. Possible values include: 'None',
 * 'WindowsAuthentication', 'SqlAuthentication', 'ActiveDirectoryIntegrated',
 * 'ActiveDirectoryPassword'
 * @member {boolean} [targetConnectionInfo.encryptConnection] Whether to
 * encrypt the connection
 * @member {string} [targetConnectionInfo.additionalSettings] Additional
 * connection settings
 * @member {boolean} [targetConnectionInfo.trustServerCertificate] Whether to
 * trust the server certificate
 */
export interface SqlMigrationTaskInput {
  sourceConnectionInfo: SqlConnectionInfo;
  targetConnectionInfo: SqlConnectionInfo;
}

/**
 * @class
 * Initializes a new instance of the MigrationValidationOptions class.
 * @constructor
 * Types of validations to run after the migration
 *
 * @member {boolean} [enableSchemaValidation] Allows to compare the schema
 * information between source and target.
 * @member {boolean} [enableDataIntegrityValidation] Allows to perform a
 * checksum based data integrity validation between source and target for the
 * selected database / tables .
 * @member {boolean} [enableQueryAnalysisValidation] Allows to perform a quick
 * and intelligent query analysis by retrieving queries from the source
 * database and executes them in the target. The result will have execution
 * statistics for executions in source and target databases for the extracted
 * queries.
 */
export interface MigrationValidationOptions {
  enableSchemaValidation?: boolean;
  enableDataIntegrityValidation?: boolean;
  enableQueryAnalysisValidation?: boolean;
}

/**
 * @class
 * Initializes a new instance of the MigrateSqlServerSqlDbDatabaseInput class.
 * @constructor
 * Database specific information for SQL to Azure SQL DB migration task inputs
 *
 * @member {string} [name] Name of the database
 * @member {string} [targetDatabaseName] Name of target database. Note: Target
 * database will be truncated before starting migration.
 * @member {boolean} [makeSourceDbReadOnly] Whether to set database read only
 * before migration
 * @member {object} [tableMap] Mapping of source to target tables
 */
export interface MigrateSqlServerSqlDbDatabaseInput {
  name?: string;
  targetDatabaseName?: string;
  makeSourceDbReadOnly?: boolean;
  tableMap?: { [propertyName: string]: string };
}

/**
 * @class
 * Initializes a new instance of the MigrateSqlServerSqlDbTaskInput class.
 * @constructor
 * Input for the task that migrates on-prem SQL Server databases to Azure SQL
 * Database
 *
 * @member {array} selectedDatabases Databases to migrate
 * @member {object} [validationOptions] Options for enabling various post
 * migration validations. Available options,
 * 1.) Data Integrity Check: Performs a checksum based comparison on source and
 * target tables after the migration to ensure the correctness of the data.
 * 2.) Schema Validation: Performs a thorough schema comparison between the
 * source and target tables and provides a list of differences between the
 * source and target database, 3.) Query Analysis: Executes a set of queries
 * picked up automatically either from the Query Plan Cache or Query Store and
 * execute them and compares the execution time between the source and target
 * database.
 * @member {boolean} [validationOptions.enableSchemaValidation] Allows to
 * compare the schema information between source and target.
 * @member {boolean} [validationOptions.enableDataIntegrityValidation] Allows
 * to perform a checksum based data integrity validation between source and
 * target for the selected database / tables .
 * @member {boolean} [validationOptions.enableQueryAnalysisValidation] Allows
 * to perform a quick and intelligent query analysis by retrieving queries from
 * the source database and executes them in the target. The result will have
 * execution statistics for executions in source and target databases for the
 * extracted queries.
 */
export interface MigrateSqlServerSqlDbTaskInput extends SqlMigrationTaskInput {
  selectedDatabases: MigrateSqlServerSqlDbDatabaseInput[];
  validationOptions?: MigrationValidationOptions;
}

/**
 * @class
 * Initializes a new instance of the MigrateSqlServerSqlDbTaskProperties class.
 * @constructor
 * Properties for the task that migrates on-prem SQL Server databases to Azure
 * SQL Database
 *
 * @member {object} [input] Task input
 * @member {array} [input.selectedDatabases] Databases to migrate
 * @member {object} [input.validationOptions] Options for enabling various post
 * migration validations. Available options,
 * 1.) Data Integrity Check: Performs a checksum based comparison on source and
 * target tables after the migration to ensure the correctness of the data.
 * 2.) Schema Validation: Performs a thorough schema comparison between the
 * source and target tables and provides a list of differences between the
 * source and target database, 3.) Query Analysis: Executes a set of queries
 * picked up automatically either from the Query Plan Cache or Query Store and
 * execute them and compares the execution time between the source and target
 * database.
 * @member {boolean} [input.validationOptions.enableSchemaValidation] Allows to
 * compare the schema information between source and target.
 * @member {boolean} [input.validationOptions.enableDataIntegrityValidation]
 * Allows to perform a checksum based data integrity validation between source
 * and target for the selected database / tables .
 * @member {boolean} [input.validationOptions.enableQueryAnalysisValidation]
 * Allows to perform a quick and intelligent query analysis by retrieving
 * queries from the source database and executes them in the target. The result
 * will have execution statistics for executions in source and target databases
 * for the extracted queries.
 * @member {array} [output] Task output. This is ignored if submitted.
 */
export interface MigrateSqlServerSqlDbTaskProperties extends ProjectTaskProperties {
  input?: MigrateSqlServerSqlDbTaskInput;
  readonly output?: MigrateSqlServerSqlDbTaskOutput[];
}

/**
 * @class
 * Initializes a new instance of the MigrateSqlServerSqlMITaskOutput class.
 * @constructor
 * Output for task that migrates SQL Server databases to Azure SQL Database
 * Managed Instance.
 *
 * @member {string} resultType Polymorphic Discriminator
 */
export interface MigrateSqlServerSqlMITaskOutput extends TaskOutput {
  resultType: string;
}

/**
 * @class
 * Initializes a new instance of the MigrateSqlServerSqlMITaskOutputError class.
 * @constructor
 * @member {object} [error] Migration error
 * @member {string} [error.message] Error message
 * @member {string} [error.filePath] The path to the file where exception
 * occurred
 * @member {string} [error.lineNumber] The line number where exception occurred
 * @member {number} [error.hResult] Coded numerical value that is assigned to a
 * specific exception
 * @member {string} [error.stackTrace] Stack trace
 */
export interface MigrateSqlServerSqlMITaskOutputError extends MigrateSqlServerSqlMITaskOutput {
  readonly error?: ReportableException;
}

/**
 * @class
 * Initializes a new instance of the MigrateSqlServerSqlMITaskOutputDatabaseLevel class.
 * @constructor
 * @member {string} [databaseName] Name of the database
 * @member {string} [state] Current state of migration. Possible values
 * include: 'None', 'InProgress', 'Failed', 'Warning', 'Completed', 'Skipped',
 * 'Stopped'
 * @member {string} [stage] Current stage of migration. Possible values
 * include: 'None', 'Initialize', 'Backup', 'FileCopy', 'Restore', 'Completed'
 * @member {date} [startedOn] Migration start time
 * @member {date} [endedOn] Migration end time
 * @member {string} [message] Migration progress message
 * @member {array} [exceptionsAndWarnings] Migration exceptions and warnings
 */
export interface MigrateSqlServerSqlMITaskOutputDatabaseLevel extends MigrateSqlServerSqlMITaskOutput {
  readonly databaseName?: string;
  readonly state?: string;
  readonly stage?: string;
  readonly startedOn?: Date;
  readonly endedOn?: Date;
  readonly message?: string;
  readonly exceptionsAndWarnings?: ReportableException[];
}

/**
 * @class
 * Initializes a new instance of the MigrateSqlServerSqlMITaskOutputMigrationLevel class.
 * @constructor
 * @member {date} [startedOn] Migration start time
 * @member {date} [endedOn] Migration end time
 * @member {string} [status] Current status of migration. Possible values
 * include: 'Default', 'Connecting', 'SourceAndTargetSelected', 'SelectLogins',
 * 'Configured', 'Running', 'Error', 'Stopped', 'Completed',
 * 'CompletedWithWarnings'
 * @member {string} [state] Current state of migration. Possible values
 * include: 'None', 'InProgress', 'Failed', 'Warning', 'Completed', 'Skipped',
 * 'Stopped'
 * @member {string} [message] Migration progress message
 * @member {object} [databases] Selected databases as a map from database name
 * to database id
 * @member {string} [sourceServerVersion] Source server version
 * @member {string} [sourceServerBrandVersion] Source server brand version
 * @member {string} [targetServerVersion] Target server version
 * @member {string} [targetServerBrandVersion] Target server brand version
 * @member {array} [exceptionsAndWarnings] Migration exceptions and warnings.
 */
export interface MigrateSqlServerSqlMITaskOutputMigrationLevel extends MigrateSqlServerSqlMITaskOutput {
  readonly startedOn?: Date;
  readonly endedOn?: Date;
  readonly status?: string;
  readonly state?: string;
  readonly message?: string;
  readonly databases?: { [propertyName: string]: string };
  readonly sourceServerVersion?: string;
  readonly sourceServerBrandVersion?: string;
  readonly targetServerVersion?: string;
  readonly targetServerBrandVersion?: string;
  readonly exceptionsAndWarnings?: ReportableException[];
}

/**
 * @class
 * Initializes a new instance of the MigrateSqlServerSqlMITaskInput class.
 * @constructor
 * Input for task that migrates SQL Server databases to Azure SQL Database
 * Managed Instance.
 *
 * @member {array} selectedDatabases Databases to migrate
 * @member {object} [backupFileShare] Backup file share information for all
 * selected databases.
 * @member {string} [backupFileShare.userName] User name credential to connect
 * to the share location
 * @member {string} [backupFileShare.password] Password credential used to
 * connect to the share location.
 * @member {string} [backupFileShare.path] The folder path for this share.
 * @member {object} backupBlobShare SAS URI of Azure Storage Account Container
 * to be used for storing backup files.
 * @member {string} [backupBlobShare.sasUri] SAS URI of Azure Storage Account
 * Container.
 */
export interface MigrateSqlServerSqlMITaskInput extends SqlMigrationTaskInput {
  selectedDatabases: MigrateSqlServerSqlMIDatabaseInput[];
  backupFileShare?: FileShare;
  backupBlobShare: BlobShare;
}

/**
 * @class
 * Initializes a new instance of the MigrateSqlServerSqlMITaskProperties class.
 * @constructor
 * Properties for task that migrates SQL Server databases to Azure SQL Database
 * Managed Instance
 *
 * @member {object} [input] Task input
 * @member {array} [input.selectedDatabases] Databases to migrate
 * @member {object} [input.backupFileShare] Backup file share information for
 * all selected databases.
 * @member {string} [input.backupFileShare.userName] User name credential to
 * connect to the share location
 * @member {string} [input.backupFileShare.password] Password credential used
 * to connect to the share location.
 * @member {string} [input.backupFileShare.path] The folder path for this
 * share.
 * @member {object} [input.backupBlobShare] SAS URI of Azure Storage Account
 * Container to be used for storing backup files.
 * @member {string} [input.backupBlobShare.sasUri] SAS URI of Azure Storage
 * Account Container.
 * @member {array} [output] Task output. This is ignored if submitted.
 */
export interface MigrateSqlServerSqlMITaskProperties extends ProjectTaskProperties {
  input?: MigrateSqlServerSqlMITaskInput;
  readonly output?: MigrateSqlServerSqlMITaskOutput[];
}

/**
 * @class
 * Initializes a new instance of the DatabaseTable class.
 * @constructor
 * Table properties
 *
 * @member {boolean} [hasRows] Indicates whether table is empty or not
 * @member {string} [name] Schema-qualified name of the table
 */
export interface DatabaseTable {
  readonly hasRows?: boolean;
  readonly name?: string;
}

/**
 * @class
 * Initializes a new instance of the GetUserTablesSqlTaskOutput class.
 * @constructor
 * Output of the task that collects user tables for the given list of databases
 *
 * @member {object} [databasesToTables] Mapping from database name to list of
 * tables
 * @member {array} [validationErrors] Validation errors
 */
export interface GetUserTablesSqlTaskOutput extends TaskOutput {
  readonly databasesToTables?: { [propertyName: string]: DatabaseTable[] };
  readonly validationErrors?: ReportableException[];
}

/**
 * @class
 * Initializes a new instance of the GetUserTablesSqlTaskInput class.
 * @constructor
 * Input for the task that collects user tables for the given list of databases
 *
 * @member {object} connectionInfo Connection information for SQL Server
 * @member {string} [connectionInfo.dataSource] Data source in the format
 * Protocol:MachineName\SQLServerInstanceName,PortNumber
 * @member {string} [connectionInfo.authentication] Authentication type to use
 * for connection. Possible values include: 'None', 'WindowsAuthentication',
 * 'SqlAuthentication', 'ActiveDirectoryIntegrated', 'ActiveDirectoryPassword'
 * @member {boolean} [connectionInfo.encryptConnection] Whether to encrypt the
 * connection
 * @member {string} [connectionInfo.additionalSettings] Additional connection
 * settings
 * @member {boolean} [connectionInfo.trustServerCertificate] Whether to trust
 * the server certificate
 * @member {array} selectedDatabases List of database names to collect tables
 * for
 */
export interface GetUserTablesSqlTaskInput {
  connectionInfo: SqlConnectionInfo;
  selectedDatabases: string[];
}

/**
 * @class
 * Initializes a new instance of the GetUserTablesSqlTaskProperties class.
 * @constructor
 * Properties for the task that collects user tables for the given list of
 * databases
 *
 * @member {object} [input] Task input
 * @member {object} [input.connectionInfo] Connection information for SQL
 * Server
 * @member {string} [input.connectionInfo.dataSource] Data source in the format
 * Protocol:MachineName\SQLServerInstanceName,PortNumber
 * @member {string} [input.connectionInfo.authentication] Authentication type
 * to use for connection. Possible values include: 'None',
 * 'WindowsAuthentication', 'SqlAuthentication', 'ActiveDirectoryIntegrated',
 * 'ActiveDirectoryPassword'
 * @member {boolean} [input.connectionInfo.encryptConnection] Whether to
 * encrypt the connection
 * @member {string} [input.connectionInfo.additionalSettings] Additional
 * connection settings
 * @member {boolean} [input.connectionInfo.trustServerCertificate] Whether to
 * trust the server certificate
 * @member {array} [input.selectedDatabases] List of database names to collect
 * tables for
 * @member {array} [output] Task output. This is ignored if submitted.
 */
export interface GetUserTablesSqlTaskProperties extends ProjectTaskProperties {
  input?: GetUserTablesSqlTaskInput;
  readonly output?: GetUserTablesSqlTaskOutput[];
}

/**
 * @class
 * Initializes a new instance of the ConnectToTargetSqlDbTaskOutput class.
 * @constructor
 * Output for the task that validates connection to SQL DB and target server
 * requirements
 *
 * @member {object} [databases] Source databases as a map from database name to
 * database id
 * @member {string} [targetServerVersion] Version of the target server
 * @member {string} [targetServerBrandVersion] Target server brand version
 */
export interface ConnectToTargetSqlDbTaskOutput extends TaskOutput {
  readonly databases?: { [propertyName: string]: string };
  readonly targetServerVersion?: string;
  readonly targetServerBrandVersion?: string;
}

/**
 * @class
 * Initializes a new instance of the ConnectToTargetSqlDbTaskInput class.
 * @constructor
 * Input for the task that validates connection to SQL DB and target server
 * requirements
 *
 * @member {object} targetConnectionInfo Connection information for target SQL
 * DB
 * @member {string} [targetConnectionInfo.dataSource] Data source in the format
 * Protocol:MachineName\SQLServerInstanceName,PortNumber
 * @member {string} [targetConnectionInfo.authentication] Authentication type
 * to use for connection. Possible values include: 'None',
 * 'WindowsAuthentication', 'SqlAuthentication', 'ActiveDirectoryIntegrated',
 * 'ActiveDirectoryPassword'
 * @member {boolean} [targetConnectionInfo.encryptConnection] Whether to
 * encrypt the connection
 * @member {string} [targetConnectionInfo.additionalSettings] Additional
 * connection settings
 * @member {boolean} [targetConnectionInfo.trustServerCertificate] Whether to
 * trust the server certificate
 */
export interface ConnectToTargetSqlDbTaskInput {
  targetConnectionInfo: SqlConnectionInfo;
}

/**
 * @class
 * Initializes a new instance of the ConnectToTargetSqlDbTaskProperties class.
 * @constructor
 * Properties for the task that validates connection to SQL DB and target
 * server requirements
 *
 * @member {object} [input] Task input
 * @member {object} [input.targetConnectionInfo] Connection information for
 * target SQL DB
 * @member {string} [input.targetConnectionInfo.dataSource] Data source in the
 * format Protocol:MachineName\SQLServerInstanceName,PortNumber
 * @member {string} [input.targetConnectionInfo.authentication] Authentication
 * type to use for connection. Possible values include: 'None',
 * 'WindowsAuthentication', 'SqlAuthentication', 'ActiveDirectoryIntegrated',
 * 'ActiveDirectoryPassword'
 * @member {boolean} [input.targetConnectionInfo.encryptConnection] Whether to
 * encrypt the connection
 * @member {string} [input.targetConnectionInfo.additionalSettings] Additional
 * connection settings
 * @member {boolean} [input.targetConnectionInfo.trustServerCertificate]
 * Whether to trust the server certificate
 * @member {array} [output] Task output. This is ignored if submitted.
 */
export interface ConnectToTargetSqlDbTaskProperties extends ProjectTaskProperties {
  input?: ConnectToTargetSqlDbTaskInput;
  readonly output?: ConnectToTargetSqlDbTaskOutput[];
}

/**
 * @class
 * Initializes a new instance of the ConnectToTargetSqlMITaskOutput class.
 * @constructor
 * Output for the task that validates connection to Azure SQL Database Managed
 * Instance.
 *
 * @member {string} [targetServerVersion] Target server version
 * @member {string} [targetServerBrandVersion] Target server brand version
 * @member {array} [validationErrors] Validation errors
 */
export interface ConnectToTargetSqlMITaskOutput extends TaskOutput {
  readonly targetServerVersion?: string;
  readonly targetServerBrandVersion?: string;
  readonly validationErrors?: ReportableException[];
}

/**
 * @class
 * Initializes a new instance of the ConnectToTargetSqlMITaskInput class.
 * @constructor
 * Input for the task that validates connection to Azure SQL Database Managed
 * Instance.
 *
 * @member {object} targetConnectionInfo Connection information for target SQL
 * Server
 * @member {string} [targetConnectionInfo.dataSource] Data source in the format
 * Protocol:MachineName\SQLServerInstanceName,PortNumber
 * @member {string} [targetConnectionInfo.authentication] Authentication type
 * to use for connection. Possible values include: 'None',
 * 'WindowsAuthentication', 'SqlAuthentication', 'ActiveDirectoryIntegrated',
 * 'ActiveDirectoryPassword'
 * @member {boolean} [targetConnectionInfo.encryptConnection] Whether to
 * encrypt the connection
 * @member {string} [targetConnectionInfo.additionalSettings] Additional
 * connection settings
 * @member {boolean} [targetConnectionInfo.trustServerCertificate] Whether to
 * trust the server certificate
 */
export interface ConnectToTargetSqlMITaskInput {
  targetConnectionInfo: SqlConnectionInfo;
}

/**
 * @class
 * Initializes a new instance of the ConnectToTargetSqlMITaskProperties class.
 * @constructor
 * Properties for the task that validates connection to Azure SQL Database
 * Managed Instance
 *
 * @member {object} [input] Task input
 * @member {object} [input.targetConnectionInfo] Connection information for
 * target SQL Server
 * @member {string} [input.targetConnectionInfo.dataSource] Data source in the
 * format Protocol:MachineName\SQLServerInstanceName,PortNumber
 * @member {string} [input.targetConnectionInfo.authentication] Authentication
 * type to use for connection. Possible values include: 'None',
 * 'WindowsAuthentication', 'SqlAuthentication', 'ActiveDirectoryIntegrated',
 * 'ActiveDirectoryPassword'
 * @member {boolean} [input.targetConnectionInfo.encryptConnection] Whether to
 * encrypt the connection
 * @member {string} [input.targetConnectionInfo.additionalSettings] Additional
 * connection settings
 * @member {boolean} [input.targetConnectionInfo.trustServerCertificate]
 * Whether to trust the server certificate
 * @member {array} [output] Task output. This is ignored if submitted.
 */
export interface ConnectToTargetSqlMITaskProperties extends ProjectTaskProperties {
  input?: ConnectToTargetSqlMITaskInput;
  readonly output?: ConnectToTargetSqlMITaskOutput[];
}

/**
 * @class
 * Initializes a new instance of the DatabaseFileInfo class.
 * @constructor
 * Database file specific information
 *
 * @member {string} [databaseName] Name of the database
 * @member {string} [id] Unique identifier for database file
 * @member {string} [logicalName] Logical name of the file
 * @member {string} [physicalFullName] Operating-system full path of the file
 * @member {string} [restoreFullName] Suggested full path of the file for
 * restoring
 * @member {string} [fileType] Database file type. Possible values include:
 * 'Rows', 'Log', 'Filestream', 'NotSupported', 'Fulltext'
 * @member {number} [sizeMB] Size of the file in megabytes
 */
export interface DatabaseFileInfo {
  databaseName?: string;
  id?: string;
  logicalName?: string;
  physicalFullName?: string;
  restoreFullName?: string;
  fileType?: string;
  sizeMB?: number;
}

/**
 * @class
 * Initializes a new instance of the ConnectToSourceSqlServerTaskOutput class.
 * @constructor
 * Output for the task that validates connection to SQL Server and also
 * validates source server requirements
 *
 * @member {string} resultType Polymorphic Discriminator
 */
export interface ConnectToSourceSqlServerTaskOutput extends TaskOutput {
  resultType: string;
}

/**
 * @class
 * Initializes a new instance of the ConnectToSourceSqlServerTaskOutputDatabaseLevel class.
 * @constructor
 * Database level output for the task that validates connection to SQL Server
 * and also validates source server requirements
 *
 * @member {string} [name] Database name
 * @member {number} [sizeMB] Size of the file in megabytes
 * @member {array} [databaseFiles] The list of database files
 * @member {string} [compatibilityLevel] SQL Server compatibility level of
 * database. Possible values include: 'CompatLevel80', 'CompatLevel90',
 * 'CompatLevel100', 'CompatLevel110', 'CompatLevel120', 'CompatLevel130',
 * 'CompatLevel140'
 * @member {string} [databaseState] State of the database. Possible values
 * include: 'Online', 'Restoring', 'Recovering', 'RecoveryPending', 'Suspect',
 * 'Emergency', 'Offline', 'Copying', 'OfflineSecondary'
 */
export interface ConnectToSourceSqlServerTaskOutputDatabaseLevel extends ConnectToSourceSqlServerTaskOutput {
  readonly name?: string;
  readonly sizeMB?: number;
  readonly databaseFiles?: DatabaseFileInfo[];
  readonly compatibilityLevel?: string;
  readonly databaseState?: string;
}

/**
 * @class
 * Initializes a new instance of the ConnectToSourceSqlServerTaskOutputTaskLevel class.
 * @constructor
 * Task level output for the task that validates connection to SQL Server and
 * also validates source server requirements
 *
 * @member {object} [databases] Source databases as a map from database name to
 * database id
 * @member {string} [sourceServerVersion] Source server version
 * @member {string} [sourceServerBrandVersion] Source server brand version
 * @member {array} [validationErrors] Validation errors
 */
export interface ConnectToSourceSqlServerTaskOutputTaskLevel extends ConnectToSourceSqlServerTaskOutput {
  readonly databases?: { [propertyName: string]: string };
  readonly sourceServerVersion?: string;
  readonly sourceServerBrandVersion?: string;
  readonly validationErrors?: ReportableException[];
}

/**
 * @class
 * Initializes a new instance of the ConnectToSourceSqlServerTaskInput class.
 * @constructor
 * Input for the task that validates connection to SQL Server and also
 * validates source server requirements
 *
 * @member {object} sourceConnectionInfo Connection information for Source SQL
 * Server
 * @member {string} [sourceConnectionInfo.dataSource] Data source in the format
 * Protocol:MachineName\SQLServerInstanceName,PortNumber
 * @member {string} [sourceConnectionInfo.authentication] Authentication type
 * to use for connection. Possible values include: 'None',
 * 'WindowsAuthentication', 'SqlAuthentication', 'ActiveDirectoryIntegrated',
 * 'ActiveDirectoryPassword'
 * @member {boolean} [sourceConnectionInfo.encryptConnection] Whether to
 * encrypt the connection
 * @member {string} [sourceConnectionInfo.additionalSettings] Additional
 * connection settings
 * @member {boolean} [sourceConnectionInfo.trustServerCertificate] Whether to
 * trust the server certificate
 * @member {string} [checkPermissionsGroup] Permission group for validations.
 * Possible values include: 'Default', 'MigrationFromSqlServerToAzureDB'
 */
export interface ConnectToSourceSqlServerTaskInput {
  sourceConnectionInfo: SqlConnectionInfo;
  checkPermissionsGroup?: string;
}

/**
 * @class
 * Initializes a new instance of the ConnectToSourceSqlServerTaskProperties class.
 * @constructor
 * Properties for the task that validates connection to SQL Server and also
 * validates source server requirements
 *
 * @member {object} [input] Task input
 * @member {object} [input.sourceConnectionInfo] Connection information for
 * Source SQL Server
 * @member {string} [input.sourceConnectionInfo.dataSource] Data source in the
 * format Protocol:MachineName\SQLServerInstanceName,PortNumber
 * @member {string} [input.sourceConnectionInfo.authentication] Authentication
 * type to use for connection. Possible values include: 'None',
 * 'WindowsAuthentication', 'SqlAuthentication', 'ActiveDirectoryIntegrated',
 * 'ActiveDirectoryPassword'
 * @member {boolean} [input.sourceConnectionInfo.encryptConnection] Whether to
 * encrypt the connection
 * @member {string} [input.sourceConnectionInfo.additionalSettings] Additional
 * connection settings
 * @member {boolean} [input.sourceConnectionInfo.trustServerCertificate]
 * Whether to trust the server certificate
 * @member {string} [input.checkPermissionsGroup] Permission group for
 * validations. Possible values include: 'Default',
 * 'MigrationFromSqlServerToAzureDB'
 * @member {array} [output] Task output. This is ignored if submitted.
 */
export interface ConnectToSourceSqlServerTaskProperties extends ProjectTaskProperties {
  input?: ConnectToSourceSqlServerTaskInput;
  readonly output?: ConnectToSourceSqlServerTaskOutput[];
}

/**
 * @class
 * Initializes a new instance of the ProjectTask class.
 * @constructor
 * A task resource
 *
 * @member {string} [etag] HTTP strong entity tag value. This is ignored if
 * submitted.
 * @member {object} [properties] Custom task properties
 * @member {array} [properties.errors] Array of errors. This is ignored if
 * submitted.
 * @member {string} [properties.state] The state of the task. This is ignored
 * if submitted. Possible values include: 'Unknown', 'Queued', 'Running',
 * 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
 * @member {string} [properties.taskType] Polymorphic Discriminator
 */
export interface ProjectTask extends Resource {
  etag?: string;
  properties?: ProjectTaskProperties;
}

/**
 * @class
 * Initializes a new instance of the ServiceSku class.
 * @constructor
 * An Azure SKU instance
 *
 * @member {string} [name] The unique name of the SKU, such as 'P3'
 * @member {string} [tier] The tier of the SKU, such as 'Free', 'Basic',
 * 'Standard', or 'Premium'
 * @member {string} [family] The SKU family, used when the service has multiple
 * performance classes within a tier, such as 'A', 'D', etc. for virtual
 * machines
 * @member {string} [size] The size of the SKU, used when the name alone does
 * not denote a service size or when a SKU has multiple performance classes
 * within a family, e.g. 'A1' for virtual machines
 * @member {number} [capacity] The capacity of the SKU, if it supports scaling
 */
export interface ServiceSku {
  name?: string;
  tier?: string;
  family?: string;
  size?: string;
  capacity?: number;
}

/**
 * @class
 * Initializes a new instance of the DataMigrationService class.
 * @constructor
 * A Data Migration Service resource
 *
 * @member {string} [etag] HTTP strong entity tag value. Ignored if submitted
 * @member {string} [kind] The resource kind. Only 'vm' (the default) is
 * supported.
 * @member {string} [provisioningState] The resource's provisioning state.
 * Possible values include: 'Accepted', 'Deleting', 'Deploying', 'Stopped',
 * 'Stopping', 'Starting', 'FailedToStart', 'FailedToStop', 'Succeeded',
 * 'Failed'
 * @member {string} [publicKey] The public key of the service, used to encrypt
 * secrets sent to the service
 * @member {string} virtualSubnetId The ID of the
 * Microsoft.Network/virtualNetworks/subnets resource to which the service
 * should be joined
 * @member {object} [sku] Service SKU
 * @member {string} [sku.name] The unique name of the SKU, such as 'P3'
 * @member {string} [sku.tier] The tier of the SKU, such as 'Free', 'Basic',
 * 'Standard', or 'Premium'
 * @member {string} [sku.family] The SKU family, used when the service has
 * multiple performance classes within a tier, such as 'A', 'D', etc. for
 * virtual machines
 * @member {string} [sku.size] The size of the SKU, used when the name alone
 * does not denote a service size or when a SKU has multiple performance
 * classes within a family, e.g. 'A1' for virtual machines
 * @member {number} [sku.capacity] The capacity of the SKU, if it supports
 * scaling
 */
export interface DataMigrationService extends TrackedResource {
  etag?: string;
  kind?: string;
  readonly provisioningState?: string;
  publicKey?: string;
  virtualSubnetId: string;
  sku?: ServiceSku;
}

/**
 * @class
 * Initializes a new instance of the NameAvailabilityRequest class.
 * @constructor
 * A resource type and proposed name
 *
 * @member {string} [name] The proposed resource name
 * @member {string} [type] The resource type chain (e.g.
 * virtualMachines/extensions)
 */
export interface NameAvailabilityRequest {
  name?: string;
  type?: string;
}

/**
 * @class
 * Initializes a new instance of the DatabaseInfo class.
 * @constructor
 * Project Database Details
 *
 * @member {string} sourceDatabaseName Name of the database
 */
export interface DatabaseInfo {
  sourceDatabaseName: string;
}

/**
 * @class
 * Initializes a new instance of the Project class.
 * @constructor
 * A project resource
 *
 * @member {string} sourcePlatform Source platform for the project. Possible
 * values include: 'SQL', 'Unknown'
 * @member {string} targetPlatform Target platform for the project. Possible
 * values include: 'SQLDB', 'Unknown'
 * @member {date} [creationTime] UTC Date and time when project was created
 * @member {object} [sourceConnectionInfo] Information for connecting to source
 * @member {string} [sourceConnectionInfo.userName] User name
 * @member {string} [sourceConnectionInfo.password] Password credential.
 * @member {string} [sourceConnectionInfo.type] Polymorphic Discriminator
 * @member {object} [targetConnectionInfo] Information for connecting to target
 * @member {string} [targetConnectionInfo.userName] User name
 * @member {string} [targetConnectionInfo.password] Password credential.
 * @member {string} [targetConnectionInfo.type] Polymorphic Discriminator
 * @member {array} [databasesInfo] List of DatabaseInfo
 * @member {string} [provisioningState] The project's provisioning state.
 * Possible values include: 'Deleting', 'Succeeded'
 */
export interface Project extends TrackedResource {
  sourcePlatform: string;
  targetPlatform: string;
  readonly creationTime?: Date;
  sourceConnectionInfo?: ConnectionInfo;
  targetConnectionInfo?: ConnectionInfo;
  databasesInfo?: DatabaseInfo[];
  readonly provisioningState?: string;
}

/**
 * @class
 * Initializes a new instance of the ApiError class.
 * @constructor
 * Error information.
 *
 * @member {object} [error] Error information in OData format
 * @member {string} [error.code] The machine-readable description of the error,
 * such as 'InvalidRequest' or 'InternalServerError'
 * @member {string} [error.message] The human-readable description of the error
 * @member {array} [error.details] Inner errors that caused this error
 */
export interface ApiError {
  error?: ODataError;
}

/**
 * @class
 * Initializes a new instance of the ServiceOperationDisplay class.
 * @constructor
 * Localized display text
 *
 * @member {string} [provider] The localized resource provider name
 * @member {string} [resource] The localized resource type name
 * @member {string} [operation] The localized operation name
 * @member {string} [description] The localized operation description
 */
export interface ServiceOperationDisplay {
  provider?: string;
  resource?: string;
  operation?: string;
  description?: string;
}

/**
 * @class
 * Initializes a new instance of the ServiceOperation class.
 * @constructor
 * Description of an action supported by the Data Migration Service
 *
 * @member {string} [name] The fully qualified action name, e.g.
 * Microsoft.DataMigration/services/read
 * @member {object} [display] Localized display text
 * @member {string} [display.provider] The localized resource provider name
 * @member {string} [display.resource] The localized resource type name
 * @member {string} [display.operation] The localized operation name
 * @member {string} [display.description] The localized operation description
 */
export interface ServiceOperation {
  name?: string;
  display?: ServiceOperationDisplay;
}

/**
 * @class
 * Initializes a new instance of the QuotaName class.
 * @constructor
 * The name of the quota
 *
 * @member {string} [localizedValue] The localized name of the quota
 * @member {string} [value] The unlocalized name (or ID) of the quota
 */
export interface QuotaName {
  localizedValue?: string;
  value?: string;
}

/**
 * @class
 * Initializes a new instance of the Quota class.
 * @constructor
 * Describes a quota for or usage details about a resource
 *
 * @member {number} [currentValue] The current value of the quota. If null or
 * missing, the current value cannot be determined in the context of the
 * request.
 * @member {string} [id] The resource ID of the quota object
 * @member {number} [limit] The maximum value of the quota. If null or missing,
 * the quota has no maximum, in which case it merely tracks usage.
 * @member {object} [name] The name of the quota
 * @member {string} [name.localizedValue] The localized name of the quota
 * @member {string} [name.value] The unlocalized name (or ID) of the quota
 * @member {string} [unit] The unit for the quota, such as Count, Bytes,
 * BytesPerSecond, etc.
 */
export interface Quota {
  currentValue?: number;
  id?: string;
  limit?: number;
  name?: QuotaName;
  unit?: string;
}

/**
 * @class
 * Initializes a new instance of the NameAvailabilityResponse class.
 * @constructor
 * Indicates whether a proposed resource name is available
 *
 * @member {boolean} [nameAvailable] If true, the name is valid and available.
 * If false, 'reason' describes why not.
 * @member {string} [reason] The reason why the name is not available, if
 * nameAvailable is false. Possible values include: 'AlreadyExists', 'Invalid'
 * @member {string} [message] The localized reason why the name is not
 * available, if nameAvailable is false
 */
export interface NameAvailabilityResponse {
  nameAvailable?: boolean;
  reason?: string;
  message?: string;
}

/**
 * @class
 * Initializes a new instance of the AvailableServiceSkuSku class.
 * @constructor
 * SKU name, tier, etc.
 *
 * @member {string} [name] The name of the SKU
 * @member {string} [family] SKU family
 * @member {string} [size] SKU size
 * @member {string} [tier] The tier of the SKU, such as "Free", "Basic",
 * "Standard", or "Premium"
 */
export interface AvailableServiceSkuSku {
  name?: string;
  family?: string;
  size?: string;
  tier?: string;
}

/**
 * @class
 * Initializes a new instance of the AvailableServiceSkuCapacity class.
 * @constructor
 * A description of the scaling capacities of the SKU
 *
 * @member {number} [minimum] The minimum capacity, usually 0 or 1.
 * @member {number} [maximum] The maximum capacity
 * @member {number} [default] The default capacity
 * @member {string} [scaleType] The scalability approach. Possible values
 * include: 'none', 'manual', 'automatic'
 */
export interface AvailableServiceSkuCapacity {
  minimum?: number;
  maximum?: number;
  default?: number;
  scaleType?: string;
}

/**
 * @class
 * Initializes a new instance of the AvailableServiceSku class.
 * @constructor
 * Describes the available service SKU.
 *
 * @member {string} [resourceType] The resource type, including the provider
 * namespace
 * @member {object} [sku] SKU name, tier, etc.
 * @member {string} [sku.name] The name of the SKU
 * @member {string} [sku.family] SKU family
 * @member {string} [sku.size] SKU size
 * @member {string} [sku.tier] The tier of the SKU, such as "Free", "Basic",
 * "Standard", or "Premium"
 * @member {object} [capacity] A description of the scaling capacities of the
 * SKU
 * @member {number} [capacity.minimum] The minimum capacity, usually 0 or 1.
 * @member {number} [capacity.maximum] The maximum capacity
 * @member {number} [capacity.default] The default capacity
 * @member {string} [capacity.scaleType] The scalability approach. Possible
 * values include: 'none', 'manual', 'automatic'
 */
export interface AvailableServiceSku {
  resourceType?: string;
  sku?: AvailableServiceSkuSku;
  capacity?: AvailableServiceSkuCapacity;
}

/**
 * @class
 * Initializes a new instance of the DataMigrationServiceStatusResponse class.
 * @constructor
 * Service health status
 *
 * @member {string} [agentVersion] The DMS instance agent version
 * @member {string} [status] The machine-readable status, such as
 * 'Initializing', 'Offline', 'Online', 'Deploying', 'Deleting', 'Stopped',
 * 'Stopping', 'Starting', 'FailedToStart', 'FailedToStop' or 'Failed'
 * @member {string} [vmSize] The services virtual machine size, such as
 * 'Standard_D2_v2'
 * @member {array} [supportedTaskTypes] The list of supported task types
 */
export interface DataMigrationServiceStatusResponse {
  agentVersion?: string;
  status?: string;
  vmSize?: string;
  supportedTaskTypes?: string[];
}

/**
 * @class
 * Initializes a new instance of the ResourceSkuRestrictions class.
 * @constructor
 * Describes scaling information of a SKU.
 *
 * @member {string} [type] The type of restrictions. Possible values include:
 * 'location'
 * @member {array} [values] The value of restrictions. If the restriction type
 * is set to location. This would be different locations where the SKU is
 * restricted.
 * @member {string} [reasonCode] The reason code for restriction. Possible
 * values include: 'QuotaId', 'NotAvailableForSubscription'
 */
export interface ResourceSkuRestrictions {
  readonly type?: string;
  readonly values?: string[];
  readonly reasonCode?: string;
}

/**
 * @class
 * Initializes a new instance of the ResourceSkuCapabilities class.
 * @constructor
 * Describes The SKU capabilites object.
 *
 * @member {string} [name] An invariant to describe the feature.
 * @member {string} [value] An invariant if the feature is measured by
 * quantity.
 */
export interface ResourceSkuCapabilities {
  readonly name?: string;
  readonly value?: string;
}

/**
 * @class
 * Initializes a new instance of the ResourceSkuCosts class.
 * @constructor
 * Describes metadata for retrieving price info.
 *
 * @member {string} [meterID] Used for querying price from commerce.
 * @member {number} [quantity] The multiplier is needed to extend the base
 * metered cost.
 * @member {string} [extendedUnit] An invariant to show the extended unit.
 */
export interface ResourceSkuCosts {
  readonly meterID?: string;
  readonly quantity?: number;
  readonly extendedUnit?: string;
}

/**
 * @class
 * Initializes a new instance of the ResourceSkuCapacity class.
 * @constructor
 * Describes scaling information of a SKU.
 *
 * @member {number} [minimum] The minimum capacity.
 * @member {number} [maximum] The maximum capacity.
 * @member {number} [default] The default capacity.
 * @member {string} [scaleType] The scale type applicable to the SKU. Possible
 * values include: 'Automatic', 'Manual', 'None'
 */
export interface ResourceSkuCapacity {
  readonly minimum?: number;
  readonly maximum?: number;
  readonly default?: number;
  readonly scaleType?: string;
}

/**
 * @class
 * Initializes a new instance of the ResourceSku class.
 * @constructor
 * Describes an available DMS SKU.
 *
 * @member {string} [resourceType] The type of resource the SKU applies to.
 * @member {string} [name] The name of SKU.
 * @member {string} [tier] Specifies the tier of DMS in a scale set.
 * @member {string} [size] The Size of the SKU.
 * @member {string} [family] The Family of this particular SKU.
 * @member {string} [kind] The Kind of resources that are supported in this
 * SKU.
 * @member {object} [capacity] Not used.
 * @member {number} [capacity.minimum] The minimum capacity.
 * @member {number} [capacity.maximum] The maximum capacity.
 * @member {number} [capacity.default] The default capacity.
 * @member {string} [capacity.scaleType] The scale type applicable to the SKU.
 * Possible values include: 'Automatic', 'Manual', 'None'
 * @member {array} [locations] The set of locations that the SKU is available.
 * @member {array} [apiVersions] The api versions that support this SKU.
 * @member {array} [costs] Metadata for retrieving price info.
 * @member {array} [capabilities] A name value pair to describe the capability.
 * @member {array} [restrictions] The restrictions because of which SKU cannot
 * be used. This is empty if there are no restrictions.
 */
export interface ResourceSku {
  readonly resourceType?: string;
  readonly name?: string;
  readonly tier?: string;
  readonly size?: string;
  readonly family?: string;
  readonly kind?: string;
  readonly capacity?: ResourceSkuCapacity;
  readonly locations?: string[];
  readonly apiVersions?: string[];
  readonly costs?: ResourceSkuCosts[];
  readonly capabilities?: ResourceSkuCapabilities[];
  readonly restrictions?: ResourceSkuRestrictions[];
}

/**
 * @class
 * Initializes a new instance of the Database class.
 * @constructor
 * Information about a single database
 *
 * @member {string} [id] Unique identifier for the database
 * @member {string} [name] Name of the database
 * @member {string} [compatibilityLevel] SQL Server compatibility level of
 * database. Possible values include: 'CompatLevel80', 'CompatLevel90',
 * 'CompatLevel100', 'CompatLevel110', 'CompatLevel120', 'CompatLevel130',
 * 'CompatLevel140'
 * @member {string} [collation] Collation name of the database
 * @member {string} [serverName] Name of the server
 * @member {string} [fqdn] Fully qualified name
 * @member {string} [installId] Install id of the database
 * @member {string} [serverVersion] Version of the server
 * @member {string} [serverEdition] Edition of the server
 * @member {string} [serverLevel] Product level of the server (RTM, SP, CTP).
 * @member {string} [serverDefaultDataPath] Default path of the data files
 * @member {string} [serverDefaultLogPath] Default path of the log files
 * @member {string} [serverDefaultBackupPath] Default path of the backup folder
 * @member {number} [serverCoreCount] Number of cores on the server
 * @member {number} [serverVisibleOnlineCoreCount] Number of cores on the
 * server that have VISIBLE ONLINE status
 * @member {string} [databaseState] State of the database. Possible values
 * include: 'Online', 'Restoring', 'Recovering', 'RecoveryPending', 'Suspect',
 * 'Emergency', 'Offline', 'Copying', 'OfflineSecondary'
 * @member {string} [serverId] The unique Server Id
 */
export interface Database {
  id?: string;
  name?: string;
  compatibilityLevel?: string;
  collation?: string;
  serverName?: string;
  fqdn?: string;
  installId?: string;
  serverVersion?: string;
  serverEdition?: string;
  serverLevel?: string;
  serverDefaultDataPath?: string;
  serverDefaultLogPath?: string;
  serverDefaultBackupPath?: string;
  serverCoreCount?: number;
  serverVisibleOnlineCoreCount?: number;
  databaseState?: string;
  serverId?: string;
}

/**
 * @class
 * Initializes a new instance of the DatabaseObjectName class.
 * @constructor
 * A representation of the name of an object in a database
 *
 * @member {string} [databaseName] The unescaped name of the database
 * containing the object
 * @member {string} [objectName] The unescaped name of the object
 * @member {string} [schemaName] The unescaped name of the schema containing
 * the object
 * @member {string} [objectType] Type of the object in the database. Possible
 * values include: 'StoredProcedures', 'Table', 'User', 'View', 'Function'
 */
export interface DatabaseObjectName {
  readonly databaseName?: string;
  readonly objectName?: string;
  readonly schemaName?: string;
  objectType?: string;
}

/**
 * @class
 * Initializes a new instance of the MigrationTableMetadata class.
 * @constructor
 * Metadata for tables selected in migration project
 *
 * @member {string} [sourceTableName] Source table name
 * @member {string} [targetTableName] Target table name
 */
export interface MigrationTableMetadata {
  readonly sourceTableName?: string;
  readonly targetTableName?: string;
}

/**
 * @class
 * Initializes a new instance of the DataMigrationProjectMetadata class.
 * @constructor
 * Common metadata for migration projects
 *
 * @member {string} [sourceServerName] Source server name
 * @member {string} [sourceServerPort] Source server port number
 * @member {string} [sourceUsername] Source username
 * @member {string} [targetServerName] Target server name
 * @member {string} [targetUsername] Target username
 * @member {string} [targetDbName] Target database name
 * @member {boolean} [targetUsingWinAuth] Whether target connection is Windows
 * authentication
 * @member {array} [selectedMigrationTables] List of tables selected for
 * migration
 */
export interface DataMigrationProjectMetadata {
  readonly sourceServerName?: string;
  readonly sourceServerPort?: string;
  readonly sourceUsername?: string;
  readonly targetServerName?: string;
  readonly targetUsername?: string;
  readonly targetDbName?: string;
  readonly targetUsingWinAuth?: boolean;
  readonly selectedMigrationTables?: MigrationTableMetadata[];
}

/**
 * @class
 * Initializes a new instance of the DataMigrationError class.
 * @constructor
 * Migration Task errors
 *
 * @member {string} [message] Error description
 * @member {string} [type] Possible values include: 'Default', 'Warning',
 * 'Error'
 */
export interface DataMigrationError {
  readonly message?: string;
  type?: string;
}

/**
 * @class
 * Initializes a new instance of the DatabaseFileInput class.
 * @constructor
 * Database file specific information for input
 *
 * @member {string} [id] Unique identifier for database file
 * @member {string} [logicalName] Logical name of the file
 * @member {string} [physicalFullName] Operating-system full path of the file
 * @member {string} [restoreFullName] Suggested full path of the file for
 * restoring
 * @member {string} [fileType] Database file type. Possible values include:
 * 'Rows', 'Log', 'Filestream', 'NotSupported', 'Fulltext'
 */
export interface DatabaseFileInput {
  id?: string;
  logicalName?: string;
  physicalFullName?: string;
  restoreFullName?: string;
  fileType?: string;
}

/**
 * @class
 * Initializes a new instance of the MigrateSqlServerSqlServerDatabaseInput class.
 * @constructor
 * Database specific information for SQL to SQL migration task inputs
 *
 * @member {string} [name] Name of the database
 * @member {string} [restoreDatabaseName] Name of the database at destination
 * @member {object} [backupFileShare] Backup file share information for this
 * database.
 * @member {string} [backupFileShare.userName] User name credential to connect
 * to the share location
 * @member {string} [backupFileShare.password] Password credential used to
 * connect to the share location.
 * @member {string} [backupFileShare.path] The folder path for this share.
 * @member {array} [databaseFiles] The list of database files
 */
export interface MigrateSqlServerSqlServerDatabaseInput {
  name?: string;
  restoreDatabaseName?: string;
  backupFileShare?: FileShare;
  databaseFiles?: DatabaseFileInput[];
}


/**
 * @class
 * Initializes a new instance of the ResourceSkusResult class.
 * @constructor
 * The DMS List SKUs operation response.
 *
 * @member {string} [nextLink] The uri to fetch the next page of DMS SKUs. Call
 * ListNext() with this to fetch the next page of DMS SKUs.
 */
export interface ResourceSkusResult extends Array<ResourceSku> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the ServiceSkuList class.
 * @constructor
 * OData page of available SKUs
 *
 * @member {string} [nextLink] URL to load the next page of service SKUs
 */
export interface ServiceSkuList extends Array<AvailableServiceSku> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the DataMigrationServiceList class.
 * @constructor
 * OData page of service objects
 *
 * @member {string} [nextLink] URL to load the next page of services
 */
export interface DataMigrationServiceList extends Array<DataMigrationService> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the TaskList class.
 * @constructor
 * OData page of tasks
 *
 * @member {string} [nextLink] URL to load the next page of tasks
 */
export interface TaskList extends Array<ProjectTask> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the ProjectList class.
 * @constructor
 * OData page of project resources
 *
 * @member {string} [nextLink] URL to load the next page of projects
 */
export interface ProjectList extends Array<Project> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the QuotaList class.
 * @constructor
 * OData page of quota objects
 *
 * @member {string} [nextLink] URL to load the next page of quotas, or null or
 * missing if this is the last page
 */
export interface QuotaList extends Array<Quota> {
  nextLink?: string;
}

/**
 * @class
 * Initializes a new instance of the ServiceOperationList class.
 * @constructor
 * OData page of action (operation) objects
 *
 * @member {string} [nextLink] URL to load the next page of actions
 */
export interface ServiceOperationList extends Array<ServiceOperation> {
  nextLink?: string;
}
