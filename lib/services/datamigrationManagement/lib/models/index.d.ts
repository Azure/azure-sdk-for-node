/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError } from "ms-rest-azure";
import * as moment from "moment";

export {

  BaseResource,
  CloudError
};

/**
 * ARM resource.
 */
export interface Resource extends BaseResource {
  /**
   * Resource ID.
   */
  readonly id?: string;
  /**
   * Resource name.
   */
  readonly name?: string;
  /**
   * Resource type.
   */
  readonly type?: string;
}

/**
 * ARM tracked top level resource.
 */
export interface TrackedResource extends Resource {
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Resource location.
   */
  location: string;
}

/**
 * Base class for file properties.
 */
export interface ProjectFileProperties {
  /**
   * Optional File extension. If submitted it should not have a leading period and must match the
   * extension from filePath.
   */
  extension?: string;
  /**
   * Relative path of this file resource. This property can be set when creating or updating the
   * file resource.
   */
  filePath?: string;
  /**
   * Modification DateTime.
   */
  readonly lastModified?: Date;
  /**
   * File content type. This property can be modified to reflect the file content type.
   */
  mediaType?: string;
  /**
   * File size.
   */
  readonly size?: number;
}

/**
 * A file resource
 */
export interface ProjectFile extends Resource {
  /**
   * HTTP strong entity tag value. This is ignored if submitted.
   */
  etag?: string;
  /**
   * Custom file properties
   */
  properties?: ProjectFileProperties;
}

/**
 * Error information in OData format.
 */
export interface ODataError {
  /**
   * The machine-readable description of the error, such as 'InvalidRequest' or
   * 'InternalServerError'
   */
  code?: string;
  /**
   * The human-readable description of the error
   */
  message?: string;
  /**
   * Inner errors that caused this error
   */
  details?: ODataError[];
}

/**
 * Exception object for all custom exceptions
 */
export interface ReportableException {
  /**
   * Error message
   */
  message?: string;
  /**
   * Actionable steps for this exception
   */
  actionableMessage?: string;
  /**
   * The path to the file where exception occurred
   */
  filePath?: string;
  /**
   * The line number where exception occurred
   */
  lineNumber?: string;
  /**
   * Coded numerical value that is assigned to a specific exception
   */
  hResult?: number;
  /**
   * Stack trace
   */
  stackTrace?: string;
}

/**
 * Output for command that completes online migration for an Azure SQL Database Managed Instance.
 */
export interface MigrateMISyncCompleteCommandOutput {
  /**
   * List of errors that happened during the command execution
   */
  errors?: ReportableException[];
}

/**
 * Input for command that completes online migration for an Azure SQL Database Managed Instance.
 */
export interface MigrateMISyncCompleteCommandInput {
  /**
   * Name of managed instance database
   */
  sourceDatabaseName: string;
}

/**
 * Base class for all types of DMS command properties. If command is not supported by current
 * client, this object is returned.
 */
export interface CommandProperties {
  /**
   * Array of errors. This is ignored if submitted.
   */
  readonly errors?: ODataError[];
  /**
   * The state of the command. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Accepted', 'Running', 'Succeeded', 'Failed'
   */
  readonly state?: string;
  /**
   * Polymorphic Discriminator
   */
  commandType: string;
}

/**
 * Properties for the command that completes online migration for an Azure SQL Database Managed
 * Instance.
 */
export interface MigrateMISyncCompleteCommandProperties extends CommandProperties {
  /**
   * Command input
   */
  input?: MigrateMISyncCompleteCommandInput;
  /**
   * Command output. This is ignored if submitted.
   */
  readonly output?: MigrateMISyncCompleteCommandOutput;
}

/**
 * Output for command that completes sync migration for a database.
 */
export interface MigrateSyncCompleteCommandOutput {
  /**
   * Result identifier
   */
  readonly id?: string;
  /**
   * List of errors that happened during the command execution
   */
  readonly errors?: ReportableException[];
}

/**
 * Input for command that completes sync migration for a database.
 */
export interface MigrateSyncCompleteCommandInput {
  /**
   * Name of database
   */
  databaseName: string;
  /**
   * Time stamp to complete
   */
  commitTimeStamp?: Date;
}

/**
 * Properties for the command that completes sync migration for a database.
 */
export interface MigrateSyncCompleteCommandProperties extends CommandProperties {
  /**
   * Command input
   */
  input?: MigrateSyncCompleteCommandInput;
  /**
   * Command output. This is ignored if submitted.
   */
  readonly output?: MigrateSyncCompleteCommandOutput;
}

/**
 * Output of the task that gets TDE certificates in Base64 encoded format.
 */
export interface GetTdeCertificatesSqlTaskOutput {
  /**
   * Mapping from certificate name to base 64 encoded format.
   */
  readonly base64EncodedCertificates?: { [propertyName: string]: string[] };
  /**
   * Validation errors
   */
  readonly validationErrors?: ReportableException[];
}

/**
 * Info for certificate to be exported for TDE enabled databases.
 */
export interface SelectedCertificateInput {
  /**
   * Name of certificate to be exported.
   */
  certificateName: string;
  /**
   * Password to use for encrypting the exported certificate.
   */
  password: string;
}

/**
 * File share information with Path, Username, and Password.
 */
export interface FileShare {
  /**
   * User name credential to connect to the share location
   */
  userName?: string;
  /**
   * Password credential used to connect to the share location.
   */
  password?: string;
  /**
   * The folder path for this share.
   */
  path: string;
}

/**
 * Defines the connection properties of a server
 */
export interface ConnectionInfo {
  /**
   * User name
   */
  userName?: string;
  /**
   * Password credential.
   */
  password?: string;
  /**
   * Polymorphic Discriminator
   */
  type: string;
}

/**
 * Properties required to create a connection to Azure SQL database Managed instance
 */
export interface MiSqlConnectionInfo extends ConnectionInfo {
  /**
   * Resource id for Azure SQL database Managed instance
   */
  managedInstanceResourceId: string;
}

/**
 * Information for connecting to PostgreSQL server
 */
export interface PostgreSqlConnectionInfo extends ConnectionInfo {
  /**
   * Name of the server
   */
  serverName: string;
  /**
   * Name of the database
   */
  databaseName?: string;
  /**
   * Port for Server
   */
  port: number;
}

/**
 * Information for connecting to MySQL server
 */
export interface MySqlConnectionInfo extends ConnectionInfo {
  /**
   * Name of the server
   */
  serverName: string;
  /**
   * Port for Server
   */
  port: number;
}

/**
 * Describes a connection to a MongoDB data source
 */
export interface MongoDbConnectionInfo extends ConnectionInfo {
  /**
   * A MongoDB connection string or blob container URL. The user name and password can be specified
   * here or in the userName and password properties
   */
  connectionString: string;
}

/**
 * Information for connecting to SQL database server
 */
export interface SqlConnectionInfo extends ConnectionInfo {
  /**
   * Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
   */
  dataSource: string;
  /**
   * Authentication type to use for connection. Possible values include: 'None',
   * 'WindowsAuthentication', 'SqlAuthentication', 'ActiveDirectoryIntegrated',
   * 'ActiveDirectoryPassword'
   */
  authentication?: string;
  /**
   * Whether to encrypt the connection
   */
  encryptConnection?: boolean;
  /**
   * Additional connection settings
   */
  additionalSettings?: string;
  /**
   * Whether to trust the server certificate
   */
  trustServerCertificate?: boolean;
  /**
   * Server platform type for connection. Possible values include: 'SqlOnPrem'
   */
  platform?: string;
}

/**
 * Input for the task that gets TDE certificates in Base64 encoded format.
 */
export interface GetTdeCertificatesSqlTaskInput {
  /**
   * Connection information for SQL Server
   */
  connectionInfo: SqlConnectionInfo;
  /**
   * Backup file share information for file share to be used for temporarily storing files.
   */
  backupFileShare: FileShare;
  /**
   * List containing certificate names and corresponding password to use for encrypting the
   * exported certificate.
   */
  selectedCertificates: SelectedCertificateInput[];
}

/**
 * Base class for all types of DMS task properties. If task is not supported by current client,
 * this object is returned.
 */
export interface ProjectTaskProperties {
  /**
   * Array of errors. This is ignored if submitted.
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   */
  readonly state?: string;
  /**
   * Array of command properties.
   */
  readonly commands?: CommandProperties[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  /**
   * Polymorphic Discriminator
   */
  taskType: string;
}

/**
 * Properties for the task that gets TDE certificates in Base64 encoded format.
 */
export interface GetTdeCertificatesSqlTaskProperties extends ProjectTaskProperties {
  /**
   * Task input
   */
  input?: GetTdeCertificatesSqlTaskInput;
  /**
   * Task output. This is ignored if submitted.
   */
  readonly output?: GetTdeCertificatesSqlTaskOutput[];
}

/**
 * Describes an error or warning that occurred during a MongoDB migration
 */
export interface MongoDbError {
  /**
   * The non-localized, machine-readable code that describes the error or warning
   */
  code?: string;
  /**
   * The number of times the error or warning has occurred
   */
  count?: number;
  /**
   * The localized, human-readable message that describes the error or warning
   */
  message?: string;
  /**
   * The type of error or warning. Possible values include: 'Error', 'ValidationError', 'Warning'
   */
  type?: string;
}

/**
 * Base class for MongoDB migration outputs
 */
export interface MongoDbProgress {
  /**
   * The number of document bytes copied during the Copying stage
   */
  bytesCopied: number;
  /**
   * The number of documents copied during the Copying stage
   */
  documentsCopied: number;
  /**
   * The elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format)
   */
  elapsedTime: string;
  /**
   * The errors and warnings that have occurred for the current object. The keys are the error
   * codes.
   */
  errors: { [propertyName: string]: MongoDbError };
  /**
   * The number of oplog events awaiting replay
   */
  eventsPending: number;
  /**
   * The number of oplog events replayed so far
   */
  eventsReplayed: number;
  /**
   * The timestamp of the last oplog event received, or null if no oplog event has been received
   * yet
   */
  lastEventTime?: Date;
  /**
   * The timestamp of the last oplog event replayed, or null if no oplog event has been replayed
   * yet
   */
  lastReplayTime?: Date;
  /**
   * The name of the progress object. For a collection, this is the unqualified collection name.
   * For a database, this is the database name. For the overall migration, this is null.
   */
  name?: string;
  /**
   * The qualified name of the progress object. For a collection, this is the database-qualified
   * name. For a database, this is the database name. For the overall migration, this is null.
   */
  qualifiedName?: string;
  /**
   * The type of progress object. Possible values include: 'Migration', 'Database', 'Collection'
   */
  resultType: string;
  /**
   * Possible values include: 'NotStarted', 'ValidatingInput', 'Initializing', 'Restarting',
   * 'Copying', 'InitialReplay', 'Replaying', 'Finalizing', 'Complete', 'Canceled', 'Failed'
   */
  state: string;
  /**
   * The total number of document bytes on the source at the beginning of the Copying stage, or -1
   * if the total size was unknown
   */
  totalBytes: number;
  /**
   * The total number of documents on the source at the beginning of the Copying stage, or -1 if
   * the total count was unknown
   */
  totalDocuments: number;
}

/**
 * Describes the progress of a collection
 */
export interface MongoDbCollectionProgress extends MongoDbProgress {
}

/**
 * Describes the progress of a database
 */
export interface MongoDbDatabaseProgress extends MongoDbProgress {
  /**
   * The progress of the collections in the database. The keys are the unqualified names of the
   * collections
   */
  collections?: { [propertyName: string]: MongoDbCollectionProgress };
}

/**
 * Describes the progress of the overall migration
 */
export interface MongoDbMigrationProgress extends MongoDbProgress {
  /**
   * The progress of the databases in the migration. The keys are the names of the databases
   */
  databases?: { [propertyName: string]: MongoDbDatabaseProgress };
}

/**
 * Specifies resource limits for the migration
 */
export interface MongoDbThrottlingSettings {
  /**
   * The percentage of CPU time that the migrator will try to avoid using, from 0 to 100
   */
  minFreeCpu?: number;
  /**
   * The number of megabytes of RAM that the migrator will try to avoid using
   */
  minFreeMemoryMb?: number;
  /**
   * The maximum number of work items (e.g. collection copies) that will be processed in parallel
   */
  maxParallelism?: number;
}

/**
 * Describes a field reference within a MongoDB shard key
 */
export interface MongoDbShardKeyField {
  /**
   * The name of the field
   */
  name: string;
  /**
   * The field ordering. Possible values include: 'Forward', 'Reverse', 'Hashed'
   */
  order: string;
}

/**
 * Describes a MongoDB shard key
 */
export interface MongoDbShardKeySetting {
  /**
   * The fields within the shard key
   */
  fields: MongoDbShardKeyField[];
  /**
   * Whether the shard key is unique
   */
  isUnique: boolean;
}

/**
 * Describes how an individual MongoDB collection should be migrated
 */
export interface MongoDbCollectionSettings {
  /**
   * Whether the migrator is allowed to drop the target collection in the course of performing a
   * migration. The default is true.
   */
  canDelete?: boolean;
  shardKey?: MongoDbShardKeySetting;
  /**
   * The RUs that should be configured on a CosmosDB target, or null to use the default. This has
   * no effect on non-CosmosDB targets.
  */
  targetRUs?: number;
}

/**
 * Describes how an individual MongoDB database should be migrated
*/
export interface MongoDbDatabaseSettings {
  /**
   * The collections on the source database to migrate to the target. The keys are the unqualified
   * names of the collections.
  */
  collections: { [propertyName: string]: MongoDbCollectionSettings };
  /**
   * The RUs that should be configured on a CosmosDB target, or null to use the default, or 0 if
   * throughput should not be provisioned for the database. This has no effect on non-CosmosDB
   * targets.
  */
  targetRUs?: number;
}

/**
 * Describes how a MongoDB data migration should be performed
*/
export interface MongoDbMigrationSettings {
  /**
   * The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower)
   * during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default
   * boost (which is generally the maximum), or null to not boost the RUs. This setting has no
   * effect on non-CosmosDB targets.
  */
  boostRUs?: number;
  /**
   * The databases on the source cluster to migrate to the target. The keys are the names of the
   * databases.
  */
  databases: { [propertyName: string]: MongoDbDatabaseSettings };
  /**
   * Describes how changes will be replicated from the source to the target. The default is
   * OneTime. Possible values include: 'Disabled', 'OneTime', 'Continuous'
  */
  replication?: string;
  /**
   * Settings used to connect to the source cluster
  */
  source: MongoDbConnectionInfo;
  /**
   * Settings used to connect to the target cluster
  */
  target: MongoDbConnectionInfo;
  /**
   * Settings used to limit the resource usage of the migration
  */
  throttling?: MongoDbThrottlingSettings;
}

/**
 * Properties for the task that validates a migration between MongoDB data sources
*/
export interface ValidateMongoDbTaskProperties extends ProjectTaskProperties {
  input?: MongoDbMigrationSettings;
  /**
   * An array containing a single MongoDbMigrationProgress object
  */
  readonly output?: MongoDbMigrationProgress[];
}

/**
 * Output for task that validates migration input for Azure SQL Database Managed Instance online
 * migration
*/
export interface ValidateMigrationInputSqlServerSqlMISyncTaskOutput {
  /**
   * Database identifier
  */
  readonly id?: string;
  /**
   * Name of database
  */
  readonly name?: string;
  /**
   * Errors associated with a selected database object
  */
  readonly validationErrors?: ReportableException[];
}

/**
 * Azure Active Directory Application
*/
export interface AzureActiveDirectoryApp {
  /**
   * Application ID of the Azure Active Directory Application
  */
  applicationId: string;
  /**
   * Key used to authenticate to the Azure Active Directory Application
  */
  appKey: string;
  /**
   * Tenant id of the customer
  */
  tenantId: string;
}

/**
 * Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
*/
export interface MigrateSqlServerSqlMIDatabaseInput {
  /**
   * Name of the database
  */
  name: string;
  /**
   * Name of the database at destination
  */
  restoreDatabaseName: string;
  /**
   * Backup file share information for backing up this database.
  */
  backupFileShare?: FileShare;
  /**
   * The list of backup files to be used in case of existing backups.
  */
  backupFilePaths?: string[];
}

/**
 * Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online
 * scenario.
*/
export interface SqlServerSqlMISyncTaskInput {
  /**
   * Databases to migrate
  */
  selectedDatabases: MigrateSqlServerSqlMIDatabaseInput[];
  /**
   * Backup file share information for all selected databases.
  */
  backupFileShare?: FileShare;
  /**
   * Fully qualified resourceId of storage
  */
  storageResourceId: string;
  /**
   * Connection information for source SQL Server
  */
  sourceConnectionInfo: SqlConnectionInfo;
  /**
   * Connection information for Azure SQL Database Managed Instance
  */
  targetConnectionInfo: MiSqlConnectionInfo;
  /**
   * Azure Active Directory Application the DMS instance will use to connect to the target instance
   * of Azure SQL Database Managed Instance and the Azure Storage Account
  */
  azureApp: AzureActiveDirectoryApp;
}

/**
 * Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online
 * scenario.
*/
export interface ValidateMigrationInputSqlServerSqlMISyncTaskInput extends
SqlServerSqlMISyncTaskInput {
}

/**
 * Properties for task that validates migration input for SQL to Azure SQL Database Managed
 * Instance sync scenario
*/
export interface ValidateMigrationInputSqlServerSqlMISyncTaskProperties extends
ProjectTaskProperties {
  /**
   * Task input
  */
  input?: ValidateMigrationInputSqlServerSqlMISyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
  */
  readonly output?: ValidateMigrationInputSqlServerSqlMISyncTaskOutput[];
}

/**
 * Information about backup files when existing backup mode is used.
*/
export interface DatabaseBackupInfo {
  /**
   * Database name.
  */
  readonly databaseName?: string;
  /**
   * Backup Type. Possible values include: 'Database', 'TransactionLog', 'File',
   * 'DifferentialDatabase', 'DifferentialFile', 'Partial', 'DifferentialPartial'
  */
  readonly backupType?: string;
  /**
   * The list of backup files for the current database.
  */
  readonly backupFiles?: string[];
  /**
   * Position of current database backup in the file.
  */
  readonly position?: number;
  /**
   * Database was damaged when backed up, but the backup operation was requested to continue
   * despite errors.
  */
  readonly isDamaged?: boolean;
  /**
   * Whether the backup set is compressed
  */
  readonly isCompressed?: boolean;
  /**
   * Number of files in the backup set.
  */
  readonly familyCount?: number;
  /**
   * Date and time when the backup operation finished.
  */
  readonly backupFinishDate?: Date;
}

/**
 * Output for task that validates migration input for SQL to Azure SQL Managed Instance migrations
*/
export interface ValidateMigrationInputSqlServerSqlMITaskOutput {
  /**
   * Result identifier
  */
  readonly id?: string;
  /**
   * Name of database
  */
  readonly name?: string;
  /**
   * Errors associated with the RestoreDatabaseName
  */
  readonly restoreDatabaseNameErrors?: ReportableException[];
  /**
   * Errors associated with the BackupFolder path
  */
  readonly backupFolderErrors?: ReportableException[];
  /**
   * Errors associated with backup share user name and password credentials
  */
  readonly backupShareCredentialsErrors?: ReportableException[];
  /**
   * Errors associated with the storage account provided.
  */
  readonly backupStorageAccountErrors?: ReportableException[];
  /**
   * Errors associated with existing backup files.
  */
  readonly existingBackupErrors?: ReportableException[];
  /**
   * Information about backup files when existing backup mode is used.
  */
  databaseBackupInfo?: DatabaseBackupInfo;
}

/**
 * Blob container storage information.
*/
export interface BlobShare {
  /**
   * SAS URI of Azure Storage Account Container.
  */
  sasUri: string;
}

/**
 * Input for task that validates migration input for SQL to Azure SQL Managed Instance
*/
export interface ValidateMigrationInputSqlServerSqlMITaskInput {
  /**
   * Information for connecting to source
  */
  sourceConnectionInfo: SqlConnectionInfo;
  /**
   * Information for connecting to target
  */
  targetConnectionInfo: SqlConnectionInfo;
  /**
   * Databases to migrate
  */
  selectedDatabases: MigrateSqlServerSqlMIDatabaseInput[];
  /**
   * Logins to migrate
  */
  selectedLogins?: string[];
  /**
   * Backup file share information for all selected databases.
  */
  backupFileShare?: FileShare;
  /**
   * SAS URI of Azure Storage Account Container to be used for storing backup files.
  */
  backupBlobShare: BlobShare;
  /**
   * Backup Mode to specify whether to use existing backup or create new backup. Possible values
   * include: 'CreateBackup', 'ExistingBackup'
  */
  backupMode?: string;
}

/**
 * Properties for task that validates migration input for SQL to Azure SQL Database Managed
 * Instance
*/
export interface ValidateMigrationInputSqlServerSqlMITaskProperties extends ProjectTaskProperties {
  /**
   * Task input
  */
  input?: ValidateMigrationInputSqlServerSqlMITaskInput;
  /**
   * Task output. This is ignored if submitted.
  */
  readonly output?: ValidateMigrationInputSqlServerSqlMITaskOutput[];
}

/**
 * Output for task that validates migration input for SQL sync migrations
*/
export interface ValidateSyncMigrationInputSqlServerTaskOutput {
  /**
   * Database identifier
  */
  readonly id?: string;
  /**
   * Name of database
  */
  readonly name?: string;
  /**
   * Errors associated with a selected database object
  */
  readonly validationErrors?: ReportableException[];
}

/**
 * Database specific information for SQL to Azure SQL DB sync migration task inputs
*/
export interface MigrateSqlServerSqlDbSyncDatabaseInput {
  /**
   * Unique identifier for database
  */
  id?: string;
  /**
   * Name of database
  */
  name?: string;
  /**
   * Target database name
  */
  targetDatabaseName?: string;
  /**
   * Schema name to be migrated
  */
  schemaName?: string;
  /**
   * Mapping of source to target tables
  */
  tableMap?: { [propertyName: string]: string };
  /**
   * Migration settings which tune the migration behavior
  */
  migrationSetting?: { [propertyName: string]: string };
  /**
   * Source settings to tune source endpoint migration behavior
  */
  sourceSetting?: { [propertyName: string]: string };
  /**
   * Target settings to tune target endpoint migration behavior
  */
  targetSetting?: { [propertyName: string]: string };
}

/**
 * Input for task that validates migration input for SQL sync migrations
*/
export interface ValidateSyncMigrationInputSqlServerTaskInput {
  /**
   * Information for connecting to source SQL server
  */
  sourceConnectionInfo: SqlConnectionInfo;
  /**
   * Information for connecting to target
  */
  targetConnectionInfo: SqlConnectionInfo;
  /**
   * Databases to migrate
  */
  selectedDatabases: MigrateSqlServerSqlDbSyncDatabaseInput[];
}

/**
 * Properties for task that validates migration input for SQL to Azure SQL DB sync migrations
*/
export interface ValidateMigrationInputSqlServerSqlDbSyncTaskProperties extends
ProjectTaskProperties {
  /**
   * Task input
  */
  input?: ValidateSyncMigrationInputSqlServerTaskInput;
  /**
   * Task output. This is ignored if submitted.
  */
  readonly output?: ValidateSyncMigrationInputSqlServerTaskOutput[];
}

/**
 * Database migration errors for online migration
*/
export interface SyncMigrationDatabaseErrorEvent {
  /**
   * String value of timestamp.
  */
  readonly timestampString?: string;
  /**
   * Event type.
  */
  readonly eventTypeString?: string;
  /**
   * Event text.
  */
  readonly eventText?: string;
}

/**
 * Output for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for
 * online migrations
*/
export interface MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput {
  /**
   * Result identifier
  */
  readonly id?: string;
  /**
   * Polymorphic Discriminator
  */
  resultType: string;
}

export interface MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseError extends
MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput {
  /**
   * Error message
  */
  errorMessage?: string;
  /**
   * List of error events.
  */
  events?: SyncMigrationDatabaseErrorEvent[];
}

export interface MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputError extends
MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput {
  /**
   * Migration error
  */
  readonly error?: ReportableException;
}

export interface MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevel extends
MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput {
  /**
   * Name of the table
  */
  readonly tableName?: string;
  /**
   * Name of the database
  */
  readonly databaseName?: string;
  /**
   * Number of applied inserts
  */
  readonly cdcInsertCounter?: number;
  /**
   * Number of applied updates
  */
  readonly cdcUpdateCounter?: number;
  /**
   * Number of applied deletes
  */
  readonly cdcDeleteCounter?: number;
  /**
   * Estimate to finish full load
  */
  readonly fullLoadEstFinishTime?: Date;
  /**
   * Full load start time
  */
  readonly fullLoadStartedOn?: Date;
  /**
   * Full load end time
  */
  readonly fullLoadEndedOn?: Date;
  /**
   * Number of rows applied in full load
  */
  readonly fullLoadTotalRows?: number;
  /**
   * Current state of the table migration. Possible values include: 'BEFORE_LOAD', 'FULL_LOAD',
   * 'COMPLETED', 'CANCELED', 'ERROR', 'FAILED'
  */
  readonly state?: string;
  /**
   * Total number of applied changes
  */
  readonly totalChangesApplied?: number;
  /**
   * Number of data errors occurred
  */
  readonly dataErrorsCounter?: number;
  /**
   * Last modified time on target
  */
  readonly lastModifiedTime?: Date;
}

export interface MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel extends
MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput {
  /**
   * Name of the database
  */
  readonly databaseName?: string;
  /**
   * Migration start time
  */
  readonly startedOn?: Date;
  /**
   * Migration end time
  */
  readonly endedOn?: Date;
  /**
   * Migration state that this database is in. Possible values include: 'UNDEFINED', 'CONFIGURING',
   * 'INITIALIAZING', 'STARTING', 'RUNNING', 'READY_TO_COMPLETE', 'COMPLETING', 'COMPLETE',
   * 'CANCELLING', 'CANCELLED', 'FAILED'
  */
  readonly migrationState?: string;
  /**
   * Number of incoming changes
  */
  readonly incomingChanges?: number;
  /**
   * Number of applied changes
  */
  readonly appliedChanges?: number;
  /**
   * Number of cdc inserts
  */
  readonly cdcInsertCounter?: number;
  /**
   * Number of cdc deletes
  */
  readonly cdcDeleteCounter?: number;
  /**
   * Number of cdc updates
  */
  readonly cdcUpdateCounter?: number;
  /**
   * Number of tables completed in full load
  */
  readonly fullLoadCompletedTables?: number;
  /**
   * Number of tables loading in full load
  */
  readonly fullLoadLoadingTables?: number;
  /**
   * Number of tables queued in full load
  */
  readonly fullLoadQueuedTables?: number;
  /**
   * Number of tables errored in full load
  */
  readonly fullLoadErroredTables?: number;
  /**
   * Indicates if initial load (full load) has been completed
  */
  readonly initializationCompleted?: boolean;
  /**
   * CDC apply latency
  */
  readonly latency?: number;
}

export interface MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevel extends
MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput {
  /**
   * Migration start time
  */
  readonly startedOn?: Date;
  /**
   * Migration end time
  */
  readonly endedOn?: Date;
  /**
   * Source server version
  */
  readonly sourceServerVersion?: string;
  /**
   * Source server name
  */
  readonly sourceServer?: string;
  /**
   * Target server version
  */
  readonly targetServerVersion?: string;
  /**
   * Target server name
  */
  readonly targetServer?: string;
}

/**
 * Database specific information for PostgreSQL to Azure Database for PostgreSQL migration task
 * inputs
*/
export interface MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput {
  /**
   * Name of the database
  */
  name?: string;
  /**
   * Name of target database. Note: Target database will be truncated before starting migration.
  */
  targetDatabaseName?: string;
  /**
   * Migration settings which tune the migration behavior
  */
  migrationSetting?: { [propertyName: string]: string };
  /**
   * Source settings to tune source endpoint migration behavior
  */
  sourceSetting?: { [propertyName: string]: string };
  /**
   * Target settings to tune target endpoint migration behavior
  */
  targetSetting?: { [propertyName: string]: string };
}

/**
 * Input for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for
 * online migrations
*/
export interface MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput {
  /**
   * Databases to migrate
  */
  selectedDatabases: MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput[];
  /**
   * Connection information for target Azure Database for PostgreSQL
  */
  targetConnectionInfo: PostgreSqlConnectionInfo;
  /**
   * Connection information for source PostgreSQL
  */
  sourceConnectionInfo: PostgreSqlConnectionInfo;
}

/**
 * Properties for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for
 * online migrations
*/
export interface MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties extends
ProjectTaskProperties {
  /**
   * Task input
  */
  input?: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
  */
  readonly output?: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput[];
}

/**
 * Output for the task that migrates MySQL databases to Azure Database for MySQL for online
 * migrations
*/
export interface MigrateMySqlAzureDbForMySqlSyncTaskOutput {
  /**
   * Result identifier
  */
  readonly id?: string;
  /**
   * Polymorphic Discriminator
  */
  resultType: string;
}

export interface MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseError extends
MigrateMySqlAzureDbForMySqlSyncTaskOutput {
  /**
   * Error message
  */
  errorMessage?: string;
  /**
   * List of error events.
  */
  events?: SyncMigrationDatabaseErrorEvent[];
}

export interface MigrateMySqlAzureDbForMySqlSyncTaskOutputError extends
MigrateMySqlAzureDbForMySqlSyncTaskOutput {
  /**
   * Migration error
  */
  readonly error?: ReportableException;
}

export interface MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevel extends
MigrateMySqlAzureDbForMySqlSyncTaskOutput {
  /**
   * Name of the table
  */
  readonly tableName?: string;
  /**
   * Name of the database
  */
  readonly databaseName?: string;
  /**
   * Number of applied inserts
  */
  readonly cdcInsertCounter?: string;
  /**
   * Number of applied updates
  */
  readonly cdcUpdateCounter?: string;
  /**
   * Number of applied deletes
  */
  readonly cdcDeleteCounter?: string;
  /**
   * Estimate to finish full load
  */
  readonly fullLoadEstFinishTime?: Date;
  /**
   * Full load start time
  */
  readonly fullLoadStartedOn?: Date;
  /**
   * Full load end time
  */
  readonly fullLoadEndedOn?: Date;
  /**
   * Number of rows applied in full load
  */
  readonly fullLoadTotalRows?: number;
  /**
   * Current state of the table migration. Possible values include: 'BEFORE_LOAD', 'FULL_LOAD',
   * 'COMPLETED', 'CANCELED', 'ERROR', 'FAILED'
  */
  readonly state?: string;
  /**
   * Total number of applied changes
  */
  readonly totalChangesApplied?: number;
  /**
   * Number of data errors occurred
  */
  readonly dataErrorsCounter?: number;
  /**
   * Last modified time on target
  */
  readonly lastModifiedTime?: Date;
}

export interface MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevel extends
MigrateMySqlAzureDbForMySqlSyncTaskOutput {
  /**
   * Name of the database
  */
  readonly databaseName?: string;
  /**
   * Migration start time
  */
  readonly startedOn?: Date;
  /**
   * Migration end time
  */
  readonly endedOn?: Date;
  /**
   * Migration state that this database is in. Possible values include: 'UNDEFINED', 'CONFIGURING',
   * 'INITIALIAZING', 'STARTING', 'RUNNING', 'READY_TO_COMPLETE', 'COMPLETING', 'COMPLETE',
   * 'CANCELLING', 'CANCELLED', 'FAILED'
  */
  readonly migrationState?: string;
  /**
   * Number of incoming changes
  */
  readonly incomingChanges?: number;
  /**
   * Number of applied changes
  */
  readonly appliedChanges?: number;
  /**
   * Number of cdc inserts
  */
  readonly cdcInsertCounter?: number;
  /**
   * Number of cdc deletes
  */
  readonly cdcDeleteCounter?: number;
  /**
   * Number of cdc updates
  */
  readonly cdcUpdateCounter?: number;
  /**
   * Number of tables completed in full load
  */
  readonly fullLoadCompletedTables?: number;
  /**
   * Number of tables loading in full load
  */
  readonly fullLoadLoadingTables?: number;
  /**
   * Number of tables queued in full load
  */
  readonly fullLoadQueuedTables?: number;
  /**
   * Number of tables errored in full load
  */
  readonly fullLoadErroredTables?: number;
  /**
   * Indicates if initial load (full load) has been completed
  */
  readonly initializationCompleted?: boolean;
  /**
   * CDC apply latency
  */
  readonly latency?: number;
}

export interface MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevel extends
MigrateMySqlAzureDbForMySqlSyncTaskOutput {
  /**
   * Migration start time
  */
  readonly startedOn?: Date;
  /**
   * Migration end time
  */
  readonly endedOn?: Date;
  /**
   * Source server version
  */
  readonly sourceServerVersion?: string;
  /**
   * Source server name
  */
  readonly sourceServer?: string;
  /**
   * Target server version
  */
  readonly targetServerVersion?: string;
  /**
   * Target server name
  */
  readonly targetServer?: string;
}

/**
 * Database specific information for MySQL to Azure Database for MySQL migration task inputs
*/
export interface MigrateMySqlAzureDbForMySqlSyncDatabaseInput {
  /**
   * Name of the database
  */
  name?: string;
  /**
   * Name of target database. Note: Target database will be truncated before starting migration.
  */
  targetDatabaseName?: string;
  /**
   * Migration settings which tune the migration behavior
  */
  migrationSetting?: { [propertyName: string]: string };
  /**
   * Source settings to tune source endpoint migration behavior
  */
  sourceSetting?: { [propertyName: string]: string };
  /**
   * Target settings to tune target endpoint migration behavior
  */
  targetSetting?: { [propertyName: string]: string };
}

/**
 * Input for the task that migrates MySQL databases to Azure Database for MySQL for online
 * migrations
*/
export interface MigrateMySqlAzureDbForMySqlSyncTaskInput {
  /**
   * Connection information for source MySQL
  */
  sourceConnectionInfo: MySqlConnectionInfo;
  /**
   * Connection information for target Azure Database for MySQL
  */
  targetConnectionInfo: MySqlConnectionInfo;
  /**
   * Databases to migrate
  */
  selectedDatabases: MigrateMySqlAzureDbForMySqlSyncDatabaseInput[];
}

/**
 * Properties for the task that migrates MySQL databases to Azure Database for MySQL for online
 * migrations
*/
export interface MigrateMySqlAzureDbForMySqlSyncTaskProperties extends ProjectTaskProperties {
  /**
   * Task input
  */
  input?: MigrateMySqlAzureDbForMySqlSyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
  */
  readonly output?: MigrateMySqlAzureDbForMySqlSyncTaskOutput[];
}

/**
 * Output for the task that migrates on-prem SQL Server databases to Azure SQL Database for online
 * migrations
*/
export interface MigrateSqlServerSqlDbSyncTaskOutput {
  /**
   * Result identifier
  */
  readonly id?: string;
  /**
   * Polymorphic Discriminator
  */
  resultType: string;
}

export interface MigrateSqlServerSqlDbSyncTaskOutputDatabaseError extends
MigrateSqlServerSqlDbSyncTaskOutput {
  /**
   * Error message
  */
  errorMessage?: string;
  /**
   * List of error events.
  */
  events?: SyncMigrationDatabaseErrorEvent[];
}

export interface MigrateSqlServerSqlDbSyncTaskOutputError extends
MigrateSqlServerSqlDbSyncTaskOutput {
  /**
   * Migration error
  */
  readonly error?: ReportableException;
}

export interface MigrateSqlServerSqlDbSyncTaskOutputTableLevel extends
MigrateSqlServerSqlDbSyncTaskOutput {
  /**
   * Name of the table
  */
  readonly tableName?: string;
  /**
   * Name of the database
  */
  readonly databaseName?: string;
  /**
   * Number of applied inserts
  */
  readonly cdcInsertCounter?: number;
  /**
   * Number of applied updates
  */
  readonly cdcUpdateCounter?: number;
  /**
   * Number of applied deletes
  */
  readonly cdcDeleteCounter?: number;
  /**
   * Estimate to finish full load
  */
  readonly fullLoadEstFinishTime?: Date;
  /**
   * Full load start time
  */
  readonly fullLoadStartedOn?: Date;
  /**
   * Full load end time
  */
  readonly fullLoadEndedOn?: Date;
  /**
   * Number of rows applied in full load
  */
  readonly fullLoadTotalRows?: number;
  /**
   * Current state of the table migration. Possible values include: 'BEFORE_LOAD', 'FULL_LOAD',
   * 'COMPLETED', 'CANCELED', 'ERROR', 'FAILED'
  */
  readonly state?: string;
  /**
   * Total number of applied changes
  */
  readonly totalChangesApplied?: number;
  /**
   * Number of data errors occurred
  */
  readonly dataErrorsCounter?: number;
  /**
   * Last modified time on target
  */
  readonly lastModifiedTime?: Date;
}

export interface MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevel extends
MigrateSqlServerSqlDbSyncTaskOutput {
  /**
   * Name of the database
  */
  readonly databaseName?: string;
  /**
   * Migration start time
  */
  readonly startedOn?: Date;
  /**
   * Migration end time
  */
  readonly endedOn?: Date;
  /**
   * Migration state that this database is in. Possible values include: 'UNDEFINED', 'CONFIGURING',
   * 'INITIALIAZING', 'STARTING', 'RUNNING', 'READY_TO_COMPLETE', 'COMPLETING', 'COMPLETE',
   * 'CANCELLING', 'CANCELLED', 'FAILED'
  */
  readonly migrationState?: string;
  /**
   * Number of incoming changes
  */
  readonly incomingChanges?: number;
  /**
   * Number of applied changes
  */
  readonly appliedChanges?: number;
  /**
   * Number of cdc inserts
  */
  readonly cdcInsertCounter?: number;
  /**
   * Number of cdc deletes
  */
  readonly cdcDeleteCounter?: number;
  /**
   * Number of cdc updates
  */
  readonly cdcUpdateCounter?: number;
  /**
   * Number of tables completed in full load
  */
  readonly fullLoadCompletedTables?: number;
  /**
   * Number of tables loading in full load
  */
  readonly fullLoadLoadingTables?: number;
  /**
   * Number of tables queued in full load
  */
  readonly fullLoadQueuedTables?: number;
  /**
   * Number of tables errored in full load
  */
  readonly fullLoadErroredTables?: number;
  /**
   * Indicates if initial load (full load) has been completed
  */
  readonly initializationCompleted?: boolean;
  /**
   * CDC apply latency
  */
  readonly latency?: number;
}

export interface MigrateSqlServerSqlDbSyncTaskOutputMigrationLevel extends
MigrateSqlServerSqlDbSyncTaskOutput {
  /**
   * Migration start time
  */
  readonly startedOn?: Date;
  /**
   * Migration end time
  */
  readonly endedOn?: Date;
  /**
   * Source server version
  */
  readonly sourceServerVersion?: string;
  /**
   * Source server name
  */
  readonly sourceServer?: string;
  /**
   * Target server version
  */
  readonly targetServerVersion?: string;
  /**
   * Target server name
  */
  readonly targetServer?: string;
  /**
   * Count of databases
  */
  readonly databaseCount?: number;
}

/**
 * Base class for migration task input
*/
export interface SqlMigrationTaskInput {
  /**
   * Information for connecting to source
  */
  sourceConnectionInfo: SqlConnectionInfo;
  /**
   * Information for connecting to target
  */
  targetConnectionInfo: SqlConnectionInfo;
}

/**
 * Types of validations to run after the migration
*/
export interface MigrationValidationOptions {
  /**
   * Allows to compare the schema information between source and target.
  */
  enableSchemaValidation?: boolean;
  /**
   * Allows to perform a checksum based data integrity validation between source and target for the
   * selected database / tables .
  */
  enableDataIntegrityValidation?: boolean;
  /**
   * Allows to perform a quick and intelligent query analysis by retrieving queries from the source
   * database and executes them in the target. The result will have execution statistics for
   * executions in source and target databases for the extracted queries.
  */
  enableQueryAnalysisValidation?: boolean;
}

/**
 * Input for the task that migrates on-prem SQL Server databases to Azure SQL Database for online
 * migrations
*/
export interface MigrateSqlServerSqlDbSyncTaskInput extends SqlMigrationTaskInput {
  /**
   * Databases to migrate
  */
  selectedDatabases: MigrateSqlServerSqlDbSyncDatabaseInput[];
  /**
   * Validation options
  */
  validationOptions?: MigrationValidationOptions;
}

/**
 * Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database for
 * online migrations
*/
export interface MigrateSqlServerSqlDbSyncTaskProperties extends ProjectTaskProperties {
  /**
   * Task input
  */
  input?: MigrateSqlServerSqlDbSyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
  */
  readonly output?: MigrateSqlServerSqlDbSyncTaskOutput[];
}

/**
 * Description about the errors happen while performing migration validation
*/
export interface ValidationError {
  /**
   * Error Text
  */
  text?: string;
  /**
   * Severity of the error. Possible values include: 'Message', 'Warning', 'Error'
  */
  severity?: string;
}

/**
 * Wait statistics gathered during query batch execution
*/
export interface WaitStatistics {
  /**
   * Type of the Wait
  */
  waitType?: string;
  /**
   * Total wait time in millisecond(s)
  */
  waitTimeMs?: number;
  /**
   * Total no. of waits
  */
  waitCount?: number;
}

/**
 * Description about the errors happen while performing migration validation
*/
export interface ExecutionStatistics {
  /**
   * No. of query executions
  */
  executionCount?: number;
  /**
   * CPU Time in millisecond(s) for the query execution
  */
  cpuTimeMs?: number;
  /**
   * Time taken in millisecond(s) for executing the query
  */
  elapsedTimeMs?: number;
  /**
   * Dictionary of sql query execution wait types and the respective statistics
  */
  waitStats?: { [propertyName: string]: WaitStatistics };
  /**
   * Indicates whether the query resulted in an error
  */
  hasErrors?: boolean;
  /**
   * List of sql Errors
  */
  sqlErrors?: string[];
}

/**
 * Describes query analysis results for execution in source and target
*/
export interface QueryExecutionResult {
  /**
   * Query text retrieved from the source server
  */
  queryText?: string;
  /**
   * Total no. of statements in the batch
  */
  statementsInBatch?: number;
  /**
   * Query analysis result from the source
  */
  sourceResult?: ExecutionStatistics;
  /**
   * Query analysis result from the target
  */
  targetResult?: ExecutionStatistics;
}

/**
 * Results for query analysis comparison between the source and target
*/
export interface QueryAnalysisValidationResult {
  /**
   * List of queries executed and it's execution results in source and target
  */
  queryResults?: QueryExecutionResult;
  /**
   * Errors that are part of the execution
  */
  validationErrors?: ValidationError;
}

/**
 * Description about the errors happen while performing migration validation
*/
export interface SchemaComparisonValidationResultType {
  /**
   * Name of the object that has the difference
  */
  objectName?: string;
  /**
   * Type of the object that has the difference. e.g (Table/View/StoredProcedure). Possible values
   * include: 'StoredProcedures', 'Table', 'User', 'View', 'Function'
  */
  objectType?: string;
  /**
   * Update action type with respect to target. Possible values include: 'DeletedOnTarget',
   * 'ChangedOnTarget', 'AddedOnTarget'
  */
  updateAction?: string;
}

/**
 * Results for schema comparison between the source and target
*/
export interface SchemaComparisonValidationResult {
  /**
   * List of schema differences between the source and target databases
  */
  schemaDifferences?: SchemaComparisonValidationResultType;
  /**
   * List of errors that happened while performing schema compare validation
  */
  validationErrors?: ValidationError;
  /**
   * Count of source database objects
  */
  sourceDatabaseObjectCount?: { [propertyName: string]: number };
  /**
   * Count of target database objects
  */
  targetDatabaseObjectCount?: { [propertyName: string]: number };
}

/**
 * Results for checksum based Data Integrity validation results
*/
export interface DataIntegrityValidationResult {
  /**
   * List of failed table names of source and target pair
  */
  failedObjects?: { [propertyName: string]: string };
  /**
   * List of errors that happened while performing data integrity validation
  */
  validationErrors?: ValidationError;
}

/**
 * Database level validation results
*/
export interface MigrationValidationDatabaseLevelResult {
  /**
   * Result identifier
  */
  readonly id?: string;
  /**
   * Migration Identifier
  */
  readonly migrationId?: string;
  /**
   * Name of the source database
  */
  readonly sourceDatabaseName?: string;
  /**
   * Name of the target database
  */
  readonly targetDatabaseName?: string;
  /**
   * Validation start time
  */
  readonly startedOn?: Date;
  /**
   * Validation end time
  */
  readonly endedOn?: Date;
  /**
   * Provides data integrity validation result between the source and target tables that are
   * migrated.
  */
  readonly dataIntegrityValidationResult?: DataIntegrityValidationResult;
  /**
   * Provides schema comparison result between source and target database
  */
  readonly schemaValidationResult?: SchemaComparisonValidationResult;
  /**
   * Results of some of the query execution result between source and target database
  */
  readonly queryAnalysisValidationResult?: QueryAnalysisValidationResult;
  /**
   * Current status of validation at the database level. Possible values include: 'Default',
   * 'NotStarted', 'Initialized', 'InProgress', 'Completed', 'CompletedWithIssues', 'Stopped',
   * 'Failed'
  */
  readonly status?: string;
}

/**
 * Migration Validation Database level summary result
*/
export interface MigrationValidationDatabaseSummaryResult {
  /**
   * Result identifier
  */
  readonly id?: string;
  /**
   * Migration Identifier
  */
  readonly migrationId?: string;
  /**
   * Name of the source database
  */
  readonly sourceDatabaseName?: string;
  /**
   * Name of the target database
  */
  readonly targetDatabaseName?: string;
  /**
   * Validation start time
  */
  readonly startedOn?: Date;
  /**
   * Validation end time
  */
  readonly endedOn?: Date;
  /**
   * Current status of validation at the database level. Possible values include: 'Default',
   * 'NotStarted', 'Initialized', 'InProgress', 'Completed', 'CompletedWithIssues', 'Stopped',
   * 'Failed'
  */
  readonly status?: string;
}

/**
 * Migration Validation Result
*/
export interface MigrationValidationResult {
  /**
   * Migration validation result identifier
  */
  readonly id?: string;
  /**
   * Migration Identifier
  */
  readonly migrationId?: string;
  /**
   * Validation summary results for each database
  */
  summaryResults?: { [propertyName: string]: MigrationValidationDatabaseSummaryResult };
  /**
   * Current status of validation at the migration level. Status from the database validation
   * result status will be aggregated here. Possible values include: 'Default', 'NotStarted',
   * 'Initialized', 'InProgress', 'Completed', 'CompletedWithIssues', 'Stopped', 'Failed'
  */
  readonly status?: string;
}

/**
 * Output for the task that migrates on-prem SQL Server databases to Azure SQL Database
*/
export interface MigrateSqlServerSqlDbTaskOutput {
  /**
   * Result identifier
  */
  readonly id?: string;
  /**
   * Polymorphic Discriminator
  */
  resultType: string;
}

export interface MigrateSqlServerSqlDbTaskOutputError extends MigrateSqlServerSqlDbTaskOutput {
  /**
   * Migration error
  */
  readonly error?: ReportableException;
}

export interface MigrateSqlServerSqlDbTaskOutputTableLevel extends MigrateSqlServerSqlDbTaskOutput
{
  /**
   * Name of the item
  */
  readonly objectName?: string;
  /**
   * Migration start time
  */
  readonly startedOn?: Date;
  /**
   * Migration end time
  */
  readonly endedOn?: Date;
  /**
   * Current state of migration. Possible values include: 'None', 'InProgress', 'Failed',
   * 'Warning', 'Completed', 'Skipped', 'Stopped'
  */
  readonly state?: string;
  /**
   * Status message
  */
  readonly statusMessage?: string;
  /**
   * Number of items
  */
  readonly itemsCount?: number;
  /**
   * Number of successfully completed items
  */
  readonly itemsCompletedCount?: number;
  /**
   * Wildcard string prefix to use for querying all errors of the item
  */
  readonly errorPrefix?: string;
  /**
   * Wildcard string prefix to use for querying all sub-tem results of the item
  */
  readonly resultPrefix?: string;
}

/**
 * Basic summary of a data item migration
*/
export interface DataItemMigrationSummaryResult {
  /**
   * Name of the item
  */
  readonly name?: string;
  /**
   * Migration start time
  */
  readonly startedOn?: Date;
  /**
   * Migration end time
  */
  readonly endedOn?: Date;
  /**
   * Current state of migration. Possible values include: 'None', 'InProgress', 'Failed',
   * 'Warning', 'Completed', 'Skipped', 'Stopped'
  */
  readonly state?: string;
  /**
   * Status message
  */
  readonly statusMessage?: string;
  /**
   * Number of items
  */
  readonly itemsCount?: number;
  /**
   * Number of successfully completed items
  */
  readonly itemsCompletedCount?: number;
  /**
   * Wildcard string prefix to use for querying all errors of the item
  */
  readonly errorPrefix?: string;
  /**
   * Wildcard string prefix to use for querying all sub-tem results of the item
  */
  readonly resultPrefix?: string;
}

export interface MigrateSqlServerSqlDbTaskOutputDatabaseLevel extends
MigrateSqlServerSqlDbTaskOutput {
  /**
   * Name of the item
  */
  readonly databaseName?: string;
  /**
   * Migration start time
  */
  readonly startedOn?: Date;
  /**
   * Migration end time
  */
  readonly endedOn?: Date;
  /**
   * Current state of migration. Possible values include: 'None', 'InProgress', 'Failed',
   * 'Warning', 'Completed', 'Skipped', 'Stopped'
  */
  readonly state?: string;
  /**
   * Migration stage that this database is in. Possible values include: 'None', 'Initialize',
   * 'Backup', 'FileCopy', 'Restore', 'Completed'
  */
  readonly stage?: string;
  /**
   * Status message
  */
  readonly statusMessage?: string;
  /**
   * Migration progress message
  */
  readonly message?: string;
  /**
   * Number of objects
  */
  readonly numberOfObjects?: number;
  /**
   * Number of successfully completed objects
  */
  readonly numberOfObjectsCompleted?: number;
  /**
   * Number of database/object errors.
  */
  readonly errorCount?: number;
  /**
   * Wildcard string prefix to use for querying all errors of the item
  */
  readonly errorPrefix?: string;
  /**
   * Wildcard string prefix to use for querying all sub-tem results of the item
  */
  readonly resultPrefix?: string;
  /**
   * Migration exceptions and warnings.
  */
  readonly exceptionsAndWarnings?: ReportableException[];
  /**
   * Summary of object results in the migration
  */
  readonly objectSummary?: { [propertyName: string]: DataItemMigrationSummaryResult };
}

/**
 * Migration validation report result, contains the url for downloading the generated report.
*/
export interface MigrationReportResult {
  /**
   * Migration validation result identifier
  */
  id?: string;
  /**
   * The url of the report.
  */
  reportUrl?: string;
}

/**
 * Summary of database results in the migration
*/
export interface DatabaseSummaryResult extends DataItemMigrationSummaryResult {
  /**
   * Size of the database in megabytes
  */
  readonly sizeMB?: number;
}

export interface MigrateSqlServerSqlDbTaskOutputMigrationLevel extends
MigrateSqlServerSqlDbTaskOutput {
  /**
   * Migration start time
  */
  readonly startedOn?: Date;
  /**
   * Migration end time
  */
  readonly endedOn?: Date;
  /**
   * Duration of task execution in seconds.
  */
  readonly durationInSeconds?: number;
  /**
   * Current status of migration. Possible values include: 'Default', 'Connecting',
   * 'SourceAndTargetSelected', 'SelectLogins', 'Configured', 'Running', 'Error', 'Stopped',
   * 'Completed', 'CompletedWithWarnings'
  */
  readonly status?: string;
  /**
   * Migration status message
  */
  readonly statusMessage?: string;
  /**
   * Migration progress message
  */
  readonly message?: string;
  /**
   * Selected databases as a map from database name to database id
  */
  readonly databases?: { [propertyName: string]: string };
  /**
   * Summary of database results in the migration
  */
  readonly databaseSummary?: { [propertyName: string]: DatabaseSummaryResult };
  /**
   * Migration Validation Results
  */
  migrationValidationResult?: MigrationValidationResult;
  /**
   * Migration Report Result, provides unique url for downloading your migration report.
  */
  migrationReportResult?: MigrationReportResult;
  /**
   * Source server version
  */
  readonly sourceServerVersion?: string;
  /**
   * Source server brand version
  */
  readonly sourceServerBrandVersion?: string;
  /**
   * Target server version
  */
  readonly targetServerVersion?: string;
  /**
   * Target server brand version
  */
  readonly targetServerBrandVersion?: string;
  /**
   * Migration exceptions and warnings.
  */
  readonly exceptionsAndWarnings?: ReportableException[];
}

/**
 * Database specific information for SQL to Azure SQL DB migration task inputs
*/
export interface MigrateSqlServerSqlDbDatabaseInput {
  /**
   * Name of the database
  */
  name?: string;
  /**
   * Name of target database. Note: Target database will be truncated before starting migration.
  */
  targetDatabaseName?: string;
  /**
   * Whether to set database read only before migration
  */
  makeSourceDbReadOnly?: boolean;
  /**
   * Mapping of source to target tables
  */
  tableMap?: { [propertyName: string]: string };
}

/**
 * Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
*/
export interface MigrateSqlServerSqlDbTaskInput extends SqlMigrationTaskInput {
  /**
   * Databases to migrate
  */
  selectedDatabases: MigrateSqlServerSqlDbDatabaseInput[];
  /**
   * Options for enabling various post migration validations. Available options,
   * 1.) Data Integrity Check: Performs a checksum based comparison on source and target tables
   * after the migration to ensure the correctness of the data.
   * 2.) Schema Validation: Performs a thorough schema comparison between the source and target
   * tables and provides a list of differences between the source and target database, 3.) Query
   * Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache
   * or Query Store and execute them and compares the execution time between the source and target
   * database.
  */
  validationOptions?: MigrationValidationOptions;
}

/**
 * Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
*/
export interface MigrateSqlServerSqlDbTaskProperties extends ProjectTaskProperties {
  /**
   * Task input
  */
  input?: MigrateSqlServerSqlDbTaskInput;
  /**
   * Task output. This is ignored if submitted.
  */
  readonly output?: MigrateSqlServerSqlDbTaskOutput[];
}

/**
 * Output for task that migrates SQL Server databases to Azure SQL Database Managed Instance using
 * Log Replay Service.
*/
export interface MigrateSqlServerSqlMISyncTaskOutput {
  /**
   * Result identifier
  */
  readonly id?: string;
  /**
   * Polymorphic Discriminator
  */
  resultType: string;
}

export interface MigrateSqlServerSqlMISyncTaskOutputError extends
MigrateSqlServerSqlMISyncTaskOutput {
  /**
   * Migration error
  */
  readonly error?: ReportableException;
}

/**
 * Information of the backup file
*/
export interface BackupFileInfo {
  /**
   * Location of the backup file in shared folder
  */
  fileLocation?: string;
  /**
   * Sequence number of the backup file in the backup set
  */
  familySequenceNumber?: number;
  /**
   * Status of the backup file during migration. Possible values include: 'Arrived', 'Queued',
   * 'Uploading', 'Uploaded', 'Restoring', 'Restored', 'Cancelled'
  */
  status?: string;
}

/**
 * Information of backup set
*/
export interface BackupSetInfo {
  /**
   * Id for the set of backup files
  */
  backupSetId?: string;
  /**
   * First log sequence number of the backup file
  */
  firstLsn?: string;
  /**
   * Last log sequence number of the backup file
  */
  lastLsn?: string;
  /**
   * Last modified time of the backup file in share location
  */
  lastModifiedTime?: Date;
  /**
   * Enum of the different backup types. Possible values include: 'Database', 'TransactionLog',
   * 'File', 'DifferentialDatabase', 'DifferentialFile', 'Partial', 'DifferentialPartial'
  */
  backupType?: string;
  /**
   * List of files in the backup set
  */
  listOfBackupFiles?: BackupFileInfo[];
  /**
   * Name of the database to which the backup set belongs
  */
  databaseName?: string;
  /**
   * Date and time that the backup operation began
  */
  backupStartDate?: Date;
  /**
   * Date and time that the backup operation finished
  */
  backupFinishedDate?: Date;
  /**
   * Whether the backup set is restored or not
  */
  isBackupRestored?: boolean;
}

export interface MigrateSqlServerSqlMISyncTaskOutputDatabaseLevel extends
MigrateSqlServerSqlMISyncTaskOutput {
  /**
   * Name of the database
  */
  readonly sourceDatabaseName?: string;
  /**
   * Current state of database. Possible values include: 'UNDEFINED', 'INITIAL',
   * 'FULL_BACKUP_UPLOAD_START', 'LOG_SHIPPING_START', 'UPLOAD_LOG_FILES_START', 'CUTOVER_START',
   * 'POST_CUTOVER_COMPLETE', 'COMPLETED', 'CANCELLED', 'FAILED'
  */
  readonly migrationState?: string;
  /**
   * Database migration start time
  */
  readonly startedOn?: Date;
  /**
   * Database migration end time
  */
  readonly endedOn?: Date;
  /**
   * Details of full backup set
  */
  readonly fullBackupSetInfo?: BackupSetInfo;
  /**
   * Last applied backup set information
  */
  readonly lastRestoredBackupSetInfo?: BackupSetInfo;
  /**
   * Backup sets that are currently active (Either being uploaded or getting restored)
  */
  readonly activeBackupSets?: BackupSetInfo[];
  /**
   * Name of container created in the Azure Storage account where backups are copied to
  */
  readonly containerName?: string;
  /**
   * prefix string to use for querying errors for this database
  */
  readonly errorPrefix?: string;
  /**
   * Whether full backup has been applied to the target database or not
  */
  readonly isFullBackupRestored?: boolean;
  /**
   * Migration exceptions and warnings
  */
  readonly exceptionsAndWarnings?: ReportableException[];
}

export interface MigrateSqlServerSqlMISyncTaskOutputMigrationLevel extends
MigrateSqlServerSqlMISyncTaskOutput {
  /**
   * Count of databases
  */
  readonly databaseCount?: number;
  /**
   * Current state of migration. Possible values include: 'None', 'InProgress', 'Failed',
   * 'Warning', 'Completed', 'Skipped', 'Stopped'
  */
  readonly state?: string;
  /**
   * Migration start time
  */
  readonly startedOn?: Date;
  /**
   * Migration end time
  */
  readonly endedOn?: Date;
  /**
   * Source server name
  */
  readonly sourceServerName?: string;
  /**
   * Source server version
  */
  readonly sourceServerVersion?: string;
  /**
   * Source server brand version
  */
  readonly sourceServerBrandVersion?: string;
  /**
   * Target server name
  */
  readonly targetServerName?: string;
  /**
   * Target server version
  */
  readonly targetServerVersion?: string;
  /**
   * Target server brand version
  */
  readonly targetServerBrandVersion?: string;
  /**
   * Number of database level errors
  */
  readonly databaseErrorCount?: number;
}

/**
 * Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online
 * scenario.
*/
export interface MigrateSqlServerSqlMISyncTaskInput extends SqlServerSqlMISyncTaskInput {
}

/**
 * Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
 * sync scenario
*/
export interface MigrateSqlServerSqlMISyncTaskProperties extends ProjectTaskProperties {
  /**
   * Task input
  */
  input?: MigrateSqlServerSqlMISyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
  */
  readonly output?: MigrateSqlServerSqlMISyncTaskOutput[];
}

/**
 * Output for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
*/
export interface MigrateSqlServerSqlMITaskOutput {
  /**
   * Result identifier
  */
  readonly id?: string;
  /**
   * Polymorphic Discriminator
  */
  resultType: string;
}

export interface MigrateSqlServerSqlMITaskOutputError extends MigrateSqlServerSqlMITaskOutput {
  /**
   * Migration error
  */
  readonly error?: ReportableException;
}

export interface MigrateSqlServerSqlMITaskOutputLoginLevel extends MigrateSqlServerSqlMITaskOutput
{
  /**
   * Login name.
  */
  readonly loginName?: string;
  /**
   * Current state of login. Possible values include: 'None', 'InProgress', 'Failed', 'Warning',
   * 'Completed', 'Skipped', 'Stopped'
  */
  readonly state?: string;
  /**
   * Current stage of login. Possible values include: 'None', 'Initialize', 'LoginMigration',
   * 'EstablishUserMapping', 'AssignRoleMembership', 'AssignRoleOwnership',
   * 'EstablishServerPermissions', 'EstablishObjectPermissions', 'Completed'
  */
  readonly stage?: string;
  /**
   * Login migration start time
  */
  readonly startedOn?: Date;
  /**
   * Login migration end time
  */
  readonly endedOn?: Date;
  /**
   * Login migration progress message
  */
  readonly message?: string;
  /**
   * Login migration errors and warnings per login
  */
  readonly exceptionsAndWarnings?: ReportableException[];
}

export interface MigrateSqlServerSqlMITaskOutputAgentJobLevel extends
MigrateSqlServerSqlMITaskOutput {
  /**
   * Agent Job name.
  */
  readonly name?: string;
  /**
   * The state of the original Agent Job.
  */
  readonly isEnabled?: boolean;
  /**
   * Current state of migration. Possible values include: 'None', 'InProgress', 'Failed',
   * 'Warning', 'Completed', 'Skipped', 'Stopped'
  */
  readonly state?: string;
  /**
   * Migration start time
  */
  readonly startedOn?: Date;
  /**
   * Migration end time
  */
  readonly endedOn?: Date;
  /**
   * Migration progress message
  */
  readonly message?: string;
  /**
   * Migration errors and warnings per job
  */
  readonly exceptionsAndWarnings?: ReportableException[];
}

export interface MigrateSqlServerSqlMITaskOutputDatabaseLevel extends
MigrateSqlServerSqlMITaskOutput {
  /**
   * Name of the database
  */
  readonly databaseName?: string;
  /**
   * Size of the database in megabytes
  */
  readonly sizeMB?: number;
  /**
   * Current state of migration. Possible values include: 'None', 'InProgress', 'Failed',
   * 'Warning', 'Completed', 'Skipped', 'Stopped'
  */
  readonly state?: string;
  /**
   * Current stage of migration. Possible values include: 'None', 'Initialize', 'Backup',
   * 'FileCopy', 'Restore', 'Completed'
  */
  readonly stage?: string;
  /**
   * Migration start time
  */
  readonly startedOn?: Date;
  /**
   * Migration end time
  */
  readonly endedOn?: Date;
  /**
   * Migration progress message
  */
  readonly message?: string;
  /**
   * Migration exceptions and warnings
  */
  readonly exceptionsAndWarnings?: ReportableException[];
}

/**
 * Information of orphaned users on the SQL server database.
*/
export interface OrphanedUserInfo {
  /**
   * Name of the orphaned user
  */
  name?: string;
  /**
   * Parent database of the user
  */
  databaseName?: string;
}

/**
 * Server role migration result
*/
export interface StartMigrationScenarioServerRoleResult {
  /**
   * Name of server role.
  */
  readonly name?: string;
  /**
   * Current state of migration. Possible values include: 'None', 'InProgress', 'Failed',
   * 'Warning', 'Completed', 'Skipped', 'Stopped'
  */
  readonly state?: string;
  /**
   * Migration exceptions and warnings.
  */
  readonly exceptionsAndWarnings?: ReportableException[];
}

export interface MigrateSqlServerSqlMITaskOutputMigrationLevel extends
MigrateSqlServerSqlMITaskOutput {
  /**
   * Migration start time
  */
  readonly startedOn?: Date;
  /**
   * Migration end time
  */
  readonly endedOn?: Date;
  /**
   * Current status of migration. Possible values include: 'Default', 'Connecting',
   * 'SourceAndTargetSelected', 'SelectLogins', 'Configured', 'Running', 'Error', 'Stopped',
   * 'Completed', 'CompletedWithWarnings'
  */
  readonly status?: string;
  /**
   * Current state of migration. Possible values include: 'None', 'InProgress', 'Failed',
   * 'Warning', 'Completed', 'Skipped', 'Stopped'
  */
  readonly state?: string;
  /**
   * Selected agent jobs as a map from name to id
  */
  readonly agentJobs?: { [propertyName: string]: string };
  /**
   * Selected logins as a map from name to id
  */
  readonly logins?: { [propertyName: string]: string };
  /**
   * Migration progress message
  */
  readonly message?: string;
  /**
   * Map of server role migration results.
  */
  readonly serverRoleResults?: { [propertyName: string]: StartMigrationScenarioServerRoleResult };
  /**
   * List of orphaned users.
  */
  readonly orphanedUsersInfo?: OrphanedUserInfo[];
  /**
   * Selected databases as a map from database name to database id
  */
  readonly databases?: { [propertyName: string]: string };
  /**
   * Source server version
  */
  readonly sourceServerVersion?: string;
  /**
   * Source server brand version
  */
  readonly sourceServerBrandVersion?: string;
  /**
   * Target server version
  */
  readonly targetServerVersion?: string;
  /**
   * Target server brand version
  */
  readonly targetServerBrandVersion?: string;
  /**
   * Migration exceptions and warnings.
  */
  readonly exceptionsAndWarnings?: ReportableException[];
}

/**
 * Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
*/
export interface MigrateSqlServerSqlMITaskInput extends SqlMigrationTaskInput {
  /**
   * Databases to migrate
  */
  selectedDatabases: MigrateSqlServerSqlMIDatabaseInput[];
  /**
   * Logins to migrate.
  */
  selectedLogins?: string[];
  /**
   * Agent Jobs to migrate.
  */
  selectedAgentJobs?: string[];
  /**
   * Backup file share information for all selected databases.
  */
  backupFileShare?: FileShare;
  /**
   * SAS URI of Azure Storage Account Container to be used for storing backup files.
  */
  backupBlobShare: BlobShare;
  /**
   * Backup Mode to specify whether to use existing backup or create new backup. If using existing
   * backups, backup file paths are required to be provided in selectedDatabases. Possible values
   * include: 'CreateBackup', 'ExistingBackup'
  */
  backupMode?: string;
}

/**
 * Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
*/
export interface MigrateSqlServerSqlMITaskProperties extends ProjectTaskProperties {
  /**
   * Task input
  */
  input?: MigrateSqlServerSqlMITaskInput;
  /**
   * Task output. This is ignored if submitted.
  */
  readonly output?: MigrateSqlServerSqlMITaskOutput[];
}

/**
 * Properties for the task that migrates data between MongoDB data sources
*/
export interface MigrateMongoDbTaskProperties extends ProjectTaskProperties {
  input?: MongoDbMigrationSettings;
  readonly output?: MongoDbProgress[];
}

/**
 * Output for the task that validates connection to Azure Database for MySQL and target server
 * requirements
*/
export interface ConnectToTargetAzureDbForMySqlTaskOutput {
  /**
   * Result identifier
  */
  readonly id?: string;
  /**
   * Version of the target server
  */
  readonly serverVersion?: string;
  /**
   * List of databases on target server
  */
  readonly databases?: string[];
  /**
   * Target server brand version
  */
  readonly targetServerBrandVersion?: string;
  /**
   * Validation errors associated with the task
  */
  readonly validationErrors?: ReportableException[];
}

/**
 * Input for the task that validates connection to Azure Database for MySQL and target server
 * requirements
*/
export interface ConnectToTargetAzureDbForMySqlTaskInput {
  /**
   * Connection information for source MySQL server
  */
  sourceConnectionInfo: MySqlConnectionInfo;
  /**
   * Connection information for target Azure Database for MySQL server
  */
  targetConnectionInfo: MySqlConnectionInfo;
}

/**
 * Properties for the task that validates connection to Azure Database for MySQL and target server
 * requirements
*/
export interface ConnectToTargetAzureDbForMySqlTaskProperties extends ProjectTaskProperties {
  /**
   * Task input
  */
  input?: ConnectToTargetAzureDbForMySqlTaskInput;
  /**
   * Task output. This is ignored if submitted.
  */
  readonly output?: ConnectToTargetAzureDbForMySqlTaskOutput[];
}

/**
 * Output for the task that validates connection to Azure SQL Database Managed Instance.
*/
export interface ConnectToTargetSqlMISyncTaskOutput {
  /**
   * Target server version
  */
  readonly targetServerVersion?: string;
  /**
   * Target server brand version
  */
  readonly targetServerBrandVersion?: string;
  /**
   * Validation errors
  */
  readonly validationErrors?: ReportableException[];
}

/**
 * Input for the task that validates connection to Azure SQL Database Managed Instance online
 * scenario.
*/
export interface ConnectToTargetSqlMISyncTaskInput {
  /**
   * Connection information for Azure SQL Database Managed Instance
  */
  targetConnectionInfo: MiSqlConnectionInfo;
  /**
   * Azure Active Directory Application the DMS instance will use to connect to the target instance
   * of Azure SQL Database Managed Instance and the Azure Storage Account
  */
  azureApp: AzureActiveDirectoryApp;
}

/**
 * Properties for the task that validates connection to Azure SQL Database Managed Instance
*/
export interface ConnectToTargetSqlMISyncTaskProperties extends ProjectTaskProperties {
  /**
   * Task input
  */
  input?: ConnectToTargetSqlMISyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
  */
  readonly output?: ConnectToTargetSqlMISyncTaskOutput[];
}

/**
 * Output for the task that validates connection to Azure SQL Database Managed Instance.
*/
export interface ConnectToTargetSqlMITaskOutput {
  /**
   * Result identifier
  */
  readonly id?: string;
  /**
   * Target server version
  */
  readonly targetServerVersion?: string;
  /**
   * Target server brand version
  */
  readonly targetServerBrandVersion?: string;
  /**
   * List of logins on the target server.
  */
  readonly logins?: string[];
  /**
   * List of agent jobs on the target server.
  */
  readonly agentJobs?: string[];
  /**
   * Validation errors
  */
  readonly validationErrors?: ReportableException[];
}

/**
 * Input for the task that validates connection to Azure SQL Database Managed Instance.
*/
export interface ConnectToTargetSqlMITaskInput {
  /**
   * Connection information for target SQL Server
  */
  targetConnectionInfo: SqlConnectionInfo;
}

/**
 * Properties for the task that validates connection to Azure SQL Database Managed Instance
*/
export interface ConnectToTargetSqlMITaskProperties extends ProjectTaskProperties {
  /**
   * Task input
  */
  input?: ConnectToTargetSqlMITaskInput;
  /**
   * Task output. This is ignored if submitted.
  */
  readonly output?: ConnectToTargetSqlMITaskOutput[];
}

/**
 * Table properties
*/
export interface DatabaseTable {
  /**
   * Indicates whether table is empty or not
  */
  readonly hasRows?: boolean;
  /**
   * Schema-qualified name of the table
  */
  readonly name?: string;
}

/**
 * Output of the task that collects user tables for the given list of databases
*/
export interface GetUserTablesSqlSyncTaskOutput {
  /**
   * Mapping from database name to list of source tables
  */
  readonly databasesToSourceTables?: { [propertyName: string]: DatabaseTable[] };
  /**
   * Mapping from database name to list of target tables
  */
  readonly databasesToTargetTables?: { [propertyName: string]: DatabaseTable[] };
  /**
   * Mapping from database name to list of validation errors
  */
  readonly tableValidationErrors?: { [propertyName: string]: string[] };
  /**
   * Validation errors
  */
  readonly validationErrors?: ReportableException[];
}

/**
 * Input for the task that collects user tables for the given list of databases
*/
export interface GetUserTablesSqlSyncTaskInput {
  /**
   * Connection information for SQL Server
  */
  sourceConnectionInfo: SqlConnectionInfo;
  /**
   * Connection information for SQL DB
  */
  targetConnectionInfo: SqlConnectionInfo;
  /**
   * List of source database names to collect tables for
  */
  selectedSourceDatabases: string[];
  /**
   * List of target database names to collect tables for
  */
  selectedTargetDatabases: string[];
}

/**
 * Properties for the task that collects user tables for the given list of databases
*/
export interface GetUserTablesSqlSyncTaskProperties extends ProjectTaskProperties {
  /**
   * Task input
  */
  input?: GetUserTablesSqlSyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
  */
  readonly output?: GetUserTablesSqlSyncTaskOutput[];
}

/**
 * Output of the task that collects user tables for the given list of databases
*/
export interface GetUserTablesSqlTaskOutput {
  /**
   * Result identifier
  */
  readonly id?: string;
  /**
   * Mapping from database name to list of tables
  */
  readonly databasesToTables?: { [propertyName: string]: DatabaseTable[] };
  /**
   * Validation errors
  */
  readonly validationErrors?: ReportableException[];
}

/**
 * Input for the task that collects user tables for the given list of databases
*/
export interface GetUserTablesSqlTaskInput {
  /**
   * Connection information for SQL Server
  */
  connectionInfo: SqlConnectionInfo;
  /**
   * List of database names to collect tables for
  */
  selectedDatabases: string[];
}

/**
 * Properties for the task that collects user tables for the given list of databases
*/
export interface GetUserTablesSqlTaskProperties extends ProjectTaskProperties {
  /**
   * Task input
  */
  input?: GetUserTablesSqlTaskInput;
  /**
   * Task output. This is ignored if submitted.
  */
  readonly output?: GetUserTablesSqlTaskOutput[];
}

/**
 * Output for the task that validates connection to Azure Database for PostgreSQL and target server
 * requirements
*/
export interface ConnectToTargetAzureDbForPostgreSqlSyncTaskOutput {
  /**
   * Result identifier
  */
  readonly id?: string;
  /**
   * Version of the target server
  */
  readonly targetServerVersion?: string;
  /**
   * List of databases on target server
  */
  readonly databases?: string[];
  /**
   * Target server brand version
  */
  readonly targetServerBrandVersion?: string;
  /**
   * Validation errors associated with the task
  */
  readonly validationErrors?: ReportableException[];
}

/**
 * Input for the task that validates connection to Azure Database for PostgreSQL and target server
 * requirements
*/
export interface ConnectToTargetAzureDbForPostgreSqlSyncTaskInput {
  /**
   * Connection information for source PostgreSQL server
  */
  sourceConnectionInfo: PostgreSqlConnectionInfo;
  /**
   * Connection information for target Azure Database for PostgreSQL server
  */
  targetConnectionInfo: PostgreSqlConnectionInfo;
}

/**
 * Properties for the task that validates connection to Azure Database For PostgreSQL server and
 * target server requirements for online migration
*/
export interface ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties extends
ProjectTaskProperties {
  /**
   * Task input
  */
  input?: ConnectToTargetAzureDbForPostgreSqlSyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
  */
  readonly output?: ConnectToTargetAzureDbForPostgreSqlSyncTaskOutput[];
}

/**
 * Output for the task that validates connection to SQL DB and target server requirements
*/
export interface ConnectToTargetSqlDbTaskOutput {
  /**
   * Result identifier
  */
  readonly id?: string;
  /**
   * Source databases as a map from database name to database id
  */
  readonly databases?: { [propertyName: string]: string };
  /**
   * Version of the target server
  */
  readonly targetServerVersion?: string;
  /**
   * Target server brand version
  */
  readonly targetServerBrandVersion?: string;
}

/**
 * Input for the task that validates connection to Azure SQL DB and target server requirements
*/
export interface ConnectToTargetSqlSqlDbSyncTaskInput {
  /**
   * Connection information for source SQL Server
  */
  sourceConnectionInfo: SqlConnectionInfo;
  /**
   * Connection information for target SQL DB
  */
  targetConnectionInfo: SqlConnectionInfo;
}

/**
 * Properties for the task that validates connection to SQL DB and target server requirements for
 * online migration
*/
export interface ConnectToTargetSqlSqlDbSyncTaskProperties extends ProjectTaskProperties {
  /**
   * Task input
  */
  input?: ConnectToTargetSqlSqlDbSyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
  */
  readonly output?: ConnectToTargetSqlDbTaskOutput[];
}

/**
 * Input for the task that validates connection to SQL DB and target server requirements
*/
export interface ConnectToTargetSqlDbTaskInput {
  /**
   * Connection information for target SQL DB
  */
  targetConnectionInfo: SqlConnectionInfo;
}

/**
 * Properties for the task that validates connection to SQL DB and target server requirements
*/
export interface ConnectToTargetSqlDbTaskProperties extends ProjectTaskProperties {
  /**
   * Task input
  */
  input?: ConnectToTargetSqlDbTaskInput;
  /**
   * Task output. This is ignored if submitted.
  */
  readonly output?: ConnectToTargetSqlDbTaskOutput[];
}

/**
 * Output for the task that validates connection to PostgreSQL and source server requirements
*/
export interface ConnectToSourcePostgreSqlSyncTaskOutput {
  /**
   * Result identifier
  */
  readonly id?: string;
  /**
   * Version of the source server
  */
  readonly sourceServerVersion?: string;
  /**
   * List of databases on source server
  */
  readonly databases?: string[];
  /**
   * Source server brand version
  */
  readonly sourceServerBrandVersion?: string;
  /**
   * Validation errors associated with the task
  */
  readonly validationErrors?: ReportableException[];
}

/**
 * Input for the task that validates connection to PostgreSQL and source server requirements
*/
export interface ConnectToSourcePostgreSqlSyncTaskInput {
  /**
   * Connection information for source PostgreSQL server
  */
  sourceConnectionInfo: PostgreSqlConnectionInfo;
}

/**
 * Properties for the task that validates connection to PostgreSQL server and source server
 * requirements for online migration
*/
export interface ConnectToSourcePostgreSqlSyncTaskProperties extends ProjectTaskProperties {
  /**
   * Task input
  */
  input?: ConnectToSourcePostgreSqlSyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
  */
  readonly output?: ConnectToSourcePostgreSqlSyncTaskOutput[];
}

/**
 * Information about migration eligibility of a server object
*/
export interface MigrationEligibilityInfo {
  /**
   * Whether object is eligible for migration or not.
  */
  readonly isEligibileForMigration?: boolean;
  /**
   * Information about eligibility failure for the server object.
  */
  readonly validationMessages?: string[];
}

/**
 * Output for the task that validates connection to SQL Server and also validates source server
 * requirements
*/
export interface ConnectToSourceSqlServerTaskOutput {
  /**
   * Result identifier
  */
  readonly id?: string;
  /**
   * Polymorphic Discriminator
  */
  resultType: string;
}

/**
 * Agent Job level output for the task that validates connection to SQL Server and also validates
 * source server requirements
*/
export interface ConnectToSourceSqlServerTaskOutputAgentJobLevel extends
ConnectToSourceSqlServerTaskOutput {
  /**
   * Agent Job name
  */
  readonly name?: string;
  /**
   * The type of Agent Job.
  */
  readonly jobCategory?: string;
  /**
   * The state of the original Agent Job.
  */
  readonly isEnabled?: boolean;
  /**
   * The owner of the Agent Job
  */
  readonly jobOwner?: string;
  /**
   * UTC Date and time when the Agent Job was last executed.
  */
  readonly lastExecutedOn?: Date;
  /**
   * Validation errors
  */
  readonly validationErrors?: ReportableException[];
  /**
   * Information about eligibility of agent job for migration.
  */
  readonly migrationEligibility?: MigrationEligibilityInfo;
}

/**
 * Login level output for the task that validates connection to SQL Server and also validates
 * source server requirements
*/
export interface ConnectToSourceSqlServerTaskOutputLoginLevel extends
ConnectToSourceSqlServerTaskOutput {
  /**
   * Login name.
  */
  readonly name?: string;
  /**
   * The type of login. Possible values include: 'WindowsUser', 'WindowsGroup', 'SqlLogin',
   * 'Certificate', 'AsymmetricKey', 'ExternalUser', 'ExternalGroup'
  */
  readonly loginType?: string;
  /**
   * The default database for the login.
  */
  readonly defaultDatabase?: string;
  /**
   * The state of the login.
  */
  readonly isEnabled?: boolean;
  /**
   * Information about eligibility of login for migration.
  */
  readonly migrationEligibility?: MigrationEligibilityInfo;
}

/**
 * Database file specific information
*/
export interface DatabaseFileInfo {
  /**
   * Name of the database
  */
  databaseName?: string;
  /**
   * Unique identifier for database file
  */
  id?: string;
  /**
   * Logical name of the file
  */
  logicalName?: string;
  /**
   * Operating-system full path of the file
  */
  physicalFullName?: string;
  /**
   * Suggested full path of the file for restoring
  */
  restoreFullName?: string;
  /**
   * Database file type. Possible values include: 'Rows', 'Log', 'Filestream', 'NotSupported',
   * 'Fulltext'
  */
  fileType?: string;
  /**
   * Size of the file in megabytes
  */
  sizeMB?: number;
}

/**
 * Database level output for the task that validates connection to SQL Server and also validates
 * source server requirements
*/
export interface ConnectToSourceSqlServerTaskOutputDatabaseLevel extends
ConnectToSourceSqlServerTaskOutput {
  /**
   * Database name
  */
  readonly name?: string;
  /**
   * Size of the file in megabytes
  */
  readonly sizeMB?: number;
  /**
   * The list of database files
  */
  readonly databaseFiles?: DatabaseFileInfo[];
  /**
   * SQL Server compatibility level of database. Possible values include: 'CompatLevel80',
   * 'CompatLevel90', 'CompatLevel100', 'CompatLevel110', 'CompatLevel120', 'CompatLevel130',
   * 'CompatLevel140'
  */
  readonly compatibilityLevel?: string;
  /**
   * State of the database. Possible values include: 'Online', 'Restoring', 'Recovering',
   * 'RecoveryPending', 'Suspect', 'Emergency', 'Offline', 'Copying', 'OfflineSecondary'
  */
  readonly databaseState?: string;
}

/**
 * Task level output for the task that validates connection to SQL Server and also validates source
 * server requirements
*/
export interface ConnectToSourceSqlServerTaskOutputTaskLevel extends
ConnectToSourceSqlServerTaskOutput {
  /**
   * Source databases as a map from database name to database id
  */
  readonly databases?: { [propertyName: string]: string };
  /**
   * Source logins as a map from login name to login id.
  */
  readonly logins?: { [propertyName: string]: string };
  /**
   * Source agent jobs as a map from agent job name to id.
  */
  readonly agentJobs?: { [propertyName: string]: string };
  /**
   * Mapping from database name to TDE certificate name, if applicable
  */
  readonly databaseTdeCertificateMapping?: { [propertyName: string]: string };
  /**
   * Source server version
  */
  readonly sourceServerVersion?: string;
  /**
   * Source server brand version
  */
  readonly sourceServerBrandVersion?: string;
  /**
   * Validation errors
  */
  readonly validationErrors?: ReportableException[];
}

/**
 * Input for the task that validates connection to SQL Server and also validates source server
 * requirements
*/
export interface ConnectToSourceSqlServerTaskInput {
  /**
   * Connection information for Source SQL Server
  */
  sourceConnectionInfo: SqlConnectionInfo;
  /**
   * Permission group for validations. Possible values include: 'Default',
   * 'MigrationFromSqlServerToAzureDB', 'MigrationFromSqlServerToAzureMI',
   * 'MigrationFromMySQLToAzureDBForMySQL'
  */
  checkPermissionsGroup?: string;
  /**
   * Flag for whether to collect logins from source server.
  */
  collectLogins?: boolean;
  /**
   * Flag for whether to collect agent jobs from source server.
  */
  collectAgentJobs?: boolean;
  /**
   * Flag for whether to collect TDE Certificate names from source server.
  */
  collectTdeCertificateInfo?: boolean;
}

/**
 * Properties for the task that validates connection to SQL Server and source server requirements
 * for online migration
*/
export interface ConnectToSourceSqlServerSyncTaskProperties extends ProjectTaskProperties {
  /**
   * Task input
  */
  input?: ConnectToSourceSqlServerTaskInput;
  /**
   * Task output. This is ignored if submitted.
  */
  readonly output?: ConnectToSourceSqlServerTaskOutput[];
}

/**
 * Properties for the task that validates connection to SQL Server and also validates source server
 * requirements
*/
export interface ConnectToSourceSqlServerTaskProperties extends ProjectTaskProperties {
  /**
   * Task input
  */
  input?: ConnectToSourceSqlServerTaskInput;
  /**
   * Task output. This is ignored if submitted.
  */
  readonly output?: ConnectToSourceSqlServerTaskOutput[];
}

/**
 * Describes a MongoDB shard key
*/
export interface MongoDbShardKeyInfo {
  /**
   * The fields within the shard key
  */
  fields: MongoDbShardKeyField[];
  /**
   * Whether the shard key is unique
  */
  isUnique: boolean;
}

/**
 * Describes a database or collection within a MongoDB data source
*/
export interface MongoDbObjectInfo {
  /**
   * The average document size, or -1 if the average size is unknown
  */
  averageDocumentSize: number;
  /**
   * The estimated total data size, in bytes, or -1 if the size is unknown.
  */
  dataSize: number;
  /**
   * The estimated total number of documents, or -1 if the document count is unknown
  */
  documentCount: number;
  /**
   * The unqualified name of the database or collection
  */
  name: string;
  /**
   * The qualified name of the database or collection. For a collection, this is the
   * database-qualified name.
  */
  qualifiedName: string;
}

/**
 * Describes a supported collection within a MongoDB database
*/
export interface MongoDbCollectionInfo extends MongoDbObjectInfo {
  /**
   * The name of the database containing the collection
  */
  databaseName: string;
  /**
   * Whether the collection is a capped collection (i.e. whether it has a fixed size and acts like
   * a circular buffer)
  */
  isCapped: boolean;
  /**
   * Whether the collection is system collection
  */
  isSystemCollection: boolean;
  /**
   * Whether the collection is a view of another collection
  */
  isView: boolean;
  /**
   * The shard key on the collection, or null if the collection is not sharded
  */
  shardKey?: MongoDbShardKeyInfo;
  /**
   * Whether the database has sharding enabled. Note that the migration task will enable sharding
   * on the target if necessary.
  */
  supportsSharding: boolean;
  /**
   * The name of the collection that this is a view of, if IsView is true
  */
  viewOf?: string;
}

/**
 * Describes a database within a MongoDB data source
*/
export interface MongoDbDatabaseInfo extends MongoDbObjectInfo {
  /**
   * A list of supported collections in a MongoDB database
  */
  collections: MongoDbCollectionInfo[];
  /**
   * Whether the database has sharding enabled. Note that the migration task will enable sharding
   * on the target if necessary.
  */
  supportsSharding: boolean;
}

/**
 * Describes a MongoDB data source
*/
export interface MongoDbClusterInfo {
  /**
   * A list of non-system databases in the cluster
  */
  databases: MongoDbDatabaseInfo[];
  /**
   * Whether the cluster supports sharded collections
  */
  supportsSharding: boolean;
  /**
   * The type of data source. Possible values include: 'BlobContainer', 'CosmosDb', 'MongoDb'
  */
  type: string;
  /**
   * The version of the data source in the form x.y.z (e.g. 3.6.7). Not used if Type is
   * BlobContainer.
  */
  version: string;
}

/**
 * Properties for the task that validates the connection to and provides information about a
 * MongoDB server
*/
export interface ConnectToMongoDbTaskProperties extends ProjectTaskProperties {
  input?: MongoDbConnectionInfo;
  /**
   * An array containing a single MongoDbClusterInfo object
  */
  readonly output?: MongoDbClusterInfo[];
}

/**
 * A task resource
*/
export interface ProjectTask extends Resource {
  /**
   * HTTP strong entity tag value. This is ignored if submitted.
  */
  etag?: string;
  /**
   * Custom task properties
  */
  properties?: ProjectTaskProperties;
}

/**
 * An Azure SKU instance
*/
export interface ServiceSku {
  /**
   * The unique name of the SKU, such as 'P3'
  */
  name?: string;
  /**
   * The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical'
  */
  tier?: string;
  /**
   * The SKU family, used when the service has multiple performance classes within a tier, such as
   * 'A', 'D', etc. for virtual machines
  */
  family?: string;
  /**
   * The size of the SKU, used when the name alone does not denote a service size or when a SKU has
   * multiple performance classes within a family, e.g. 'A1' for virtual machines
  */
  size?: string;
  /**
   * The capacity of the SKU, if it supports scaling
  */
  capacity?: number;
}

/**
 * A Database Migration Service resource
*/
export interface DataMigrationService extends TrackedResource {
  /**
   * HTTP strong entity tag value. Ignored if submitted
  */
  etag?: string;
  /**
   * The resource kind. Only 'vm' (the default) is supported.
  */
  kind?: string;
  /**
   * The resource's provisioning state. Possible values include: 'Accepted', 'Deleting',
   * 'Deploying', 'Stopped', 'Stopping', 'Starting', 'FailedToStart', 'FailedToStop', 'Succeeded',
   * 'Failed'
  */
  readonly provisioningState?: string;
  /**
   * The public key of the service, used to encrypt secrets sent to the service
  */
  publicKey?: string;
  /**
   * The ID of the Microsoft.Network/virtualNetworks/subnets resource to which the service should
   * be joined
  */
  virtualSubnetId: string;
  /**
   * Service SKU
  */
  sku?: ServiceSku;
}

/**
 * A resource type and proposed name
*/
export interface NameAvailabilityRequest {
  /**
   * The proposed resource name
  */
  name?: string;
  /**
   * The resource type chain (e.g. virtualMachines/extensions)
  */
  type?: string;
}

/**
 * Project Database Details
*/
export interface DatabaseInfo {
  /**
   * Name of the database
  */
  sourceDatabaseName: string;
}

/**
 * A project resource
*/
export interface Project extends TrackedResource {
  /**
   * Source platform for the project. Possible values include: 'SQL', 'MySQL', 'PostgreSql',
   * 'MongoDb', 'Unknown'
  */
  sourcePlatform: string;
  /**
   * Target platform for the project. Possible values include: 'SQLDB', 'SQLMI', 'AzureDbForMySql',
   * 'AzureDbForPostgreSql', 'MongoDb', 'Unknown'
  */
  targetPlatform: string;
  /**
   * UTC Date and time when project was created
  */
  readonly creationTime?: Date;
  /**
   * Information for connecting to source
  */
  sourceConnectionInfo?: ConnectionInfo;
  /**
   * Information for connecting to target
  */
  targetConnectionInfo?: ConnectionInfo;
  /**
   * List of DatabaseInfo
  */
  databasesInfo?: DatabaseInfo[];
  /**
   * The project's provisioning state. Possible values include: 'Deleting', 'Succeeded'
  */
  readonly provisioningState?: string;
}

/**
 * Error information.
*/
export interface ApiError {
  /**
   * Error information in OData format
  */
  error?: ODataError;
}

/**
 * File storage information.
*/
export interface FileStorageInfo {
  /**
   * A URI that can be used to access the file content.
  */
  uri?: string;
  headers?: { [propertyName: string]: string };
}

/**
 * Localized display text
*/
export interface ServiceOperationDisplay {
  /**
   * The localized resource provider name
  */
  provider?: string;
  /**
   * The localized resource type name
  */
  resource?: string;
  /**
   * The localized operation name
  */
  operation?: string;
  /**
   * The localized operation description
  */
  description?: string;
}

/**
 * Description of an action supported by the Database Migration Service
*/
export interface ServiceOperation {
  /**
   * The fully qualified action name, e.g. Microsoft.DataMigration/services/read
  */
  name?: string;
  /**
   * Localized display text
  */
  display?: ServiceOperationDisplay;
}

/**
 * The name of the quota
*/
export interface QuotaName {
  /**
   * The localized name of the quota
  */
  localizedValue?: string;
  /**
   * The unlocalized name (or ID) of the quota
  */
  value?: string;
}

/**
 * Describes a quota for or usage details about a resource
*/
export interface Quota {
  /**
   * The current value of the quota. If null or missing, the current value cannot be determined in
   * the context of the request.
  */
  currentValue?: number;
  /**
   * The resource ID of the quota object
  */
  id?: string;
  /**
   * The maximum value of the quota. If null or missing, the quota has no maximum, in which case it
   * merely tracks usage.
  */
  limit?: number;
  /**
   * The name of the quota
  */
  name?: QuotaName;
  /**
   * The unit for the quota, such as Count, Bytes, BytesPerSecond, etc.
  */
  unit?: string;
}

/**
 * Indicates whether a proposed resource name is available
*/
export interface NameAvailabilityResponse {
  /**
   * If true, the name is valid and available. If false, 'reason' describes why not.
  */
  nameAvailable?: boolean;
  /**
   * The reason why the name is not available, if nameAvailable is false. Possible values include:
   * 'AlreadyExists', 'Invalid'
  */
  reason?: string;
  /**
   * The localized reason why the name is not available, if nameAvailable is false
  */
  message?: string;
}

/**
 * SKU name, tier, etc.
*/
export interface AvailableServiceSkuSku {
  /**
   * The name of the SKU
  */
  name?: string;
  /**
   * SKU family
  */
  family?: string;
  /**
   * SKU size
  */
  size?: string;
  /**
   * The tier of the SKU, such as "Basic", "General Purpose", or "Business Critical"
  */
  tier?: string;
}

/**
 * A description of the scaling capacities of the SKU
*/
export interface AvailableServiceSkuCapacity {
  /**
   * The minimum capacity, usually 0 or 1.
  */
  minimum?: number;
  /**
   * The maximum capacity
  */
  maximum?: number;
  /**
   * The default capacity
  */
  default?: number;
  /**
   * The scalability approach. Possible values include: 'none', 'manual', 'automatic'
  */
  scaleType?: string;
}

/**
 * Describes the available service SKU.
*/
export interface AvailableServiceSku {
  /**
   * The resource type, including the provider namespace
  */
  resourceType?: string;
  /**
   * SKU name, tier, etc.
  */
  sku?: AvailableServiceSkuSku;
  /**
   * A description of the scaling capacities of the SKU
  */
  capacity?: AvailableServiceSkuCapacity;
}

/**
 * Service health status
*/
export interface DataMigrationServiceStatusResponse {
  /**
   * The DMS instance agent version
  */
  agentVersion?: string;
  /**
   * The machine-readable status, such as 'Initializing', 'Offline', 'Online', 'Deploying',
   * 'Deleting', 'Stopped', 'Stopping', 'Starting', 'FailedToStart', 'FailedToStop' or 'Failed'
  */
  status?: string;
  /**
   * The services virtual machine size, such as 'Standard_D2_v2'
  */
  vmSize?: string;
  /**
   * The list of supported task types
  */
  supportedTaskTypes?: string[];
}

/**
 * Describes scaling information of a SKU.
*/
export interface ResourceSkuRestrictions {
  /**
   * The type of restrictions. Possible values include: 'location'
  */
  readonly type?: string;
  /**
   * The value of restrictions. If the restriction type is set to location. This would be different
   * locations where the SKU is restricted.
  */
  readonly values?: string[];
  /**
   * The reason code for restriction. Possible values include: 'QuotaId',
   * 'NotAvailableForSubscription'
  */
  readonly reasonCode?: string;
}

/**
 * Describes The SKU capabilities object.
*/
export interface ResourceSkuCapabilities {
  /**
   * An invariant to describe the feature.
  */
  readonly name?: string;
  /**
   * An invariant if the feature is measured by quantity.
  */
  readonly value?: string;
}

/**
 * Describes metadata for retrieving price info.
*/
export interface ResourceSkuCosts {
  /**
   * Used for querying price from commerce.
  */
  readonly meterID?: string;
  /**
   * The multiplier is needed to extend the base metered cost.
  */
  readonly quantity?: number;
  /**
   * An invariant to show the extended unit.
  */
  readonly extendedUnit?: string;
}

/**
 * Describes scaling information of a SKU.
*/
export interface ResourceSkuCapacity {
  /**
   * The minimum capacity.
  */
  readonly minimum?: number;
  /**
   * The maximum capacity.
  */
  readonly maximum?: number;
  /**
   * The default capacity.
  */
  readonly default?: number;
  /**
   * The scale type applicable to the SKU. Possible values include: 'Automatic', 'Manual', 'None'
  */
  readonly scaleType?: string;
}

/**
 * Describes an available DMS SKU.
*/
export interface ResourceSku {
  /**
   * The type of resource the SKU applies to.
  */
  readonly resourceType?: string;
  /**
   * The name of SKU.
  */
  readonly name?: string;
  /**
   * Specifies the tier of DMS in a scale set.
  */
  readonly tier?: string;
  /**
   * The Size of the SKU.
  */
  readonly size?: string;
  /**
   * The Family of this particular SKU.
  */
  readonly family?: string;
  /**
   * The Kind of resources that are supported in this SKU.
  */
  readonly kind?: string;
  /**
   * Not used.
  */
  readonly capacity?: ResourceSkuCapacity;
  /**
   * The set of locations that the SKU is available.
  */
  readonly locations?: string[];
  /**
   * The api versions that support this SKU.
  */
  readonly apiVersions?: string[];
  /**
   * Metadata for retrieving price info.
  */
  readonly costs?: ResourceSkuCosts[];
  /**
   * A name value pair to describe the capability.
  */
  readonly capabilities?: ResourceSkuCapabilities[];
  /**
   * The restrictions because of which SKU cannot be used. This is empty if there are no
   * restrictions.
  */
  readonly restrictions?: ResourceSkuRestrictions[];
}

/**
 * Input for the task that validates MySQL database connection
*/
export interface ConnectToSourceMySqlTaskInput {
  /**
   * Information for connecting to MySQL source
  */
  sourceConnectionInfo: MySqlConnectionInfo;
  /**
   * Target Platform for the migration. Possible values include: 'SqlServer', 'AzureDbForMySQL'
  */
  targetPlatform?: string;
  /**
   * Permission group for validations. Possible values include: 'Default',
   * 'MigrationFromSqlServerToAzureDB', 'MigrationFromSqlServerToAzureMI',
   * 'MigrationFromMySQLToAzureDBForMySQL'
  */
  checkPermissionsGroup?: string;
}

/**
 * Server properties for Oracle, MySQL type source
*/
export interface ServerProperties {
  /**
   * Name of the server platform
  */
  readonly serverPlatform?: string;
  /**
   * Name of the server
  */
  readonly serverName?: string;
  /**
   * Version of the database server
  */
  readonly serverVersion?: string;
  /**
   * Edition of the database server
  */
  readonly serverEdition?: string;
  /**
   * Version of the operating system
  */
  readonly serverOperatingSystemVersion?: string;
  /**
   * Number of databases in the server
  */
  readonly serverDatabaseCount?: number;
}

/**
 * Output for connect to Oracle, MySQL type source
*/
export interface ConnectToSourceNonSqlTaskOutput {
  /**
   * Result identifier
  */
  readonly id?: string;
  /**
   * Server brand version
  */
  readonly sourceServerBrandVersion?: string;
  /**
   * Server properties
  */
  readonly serverProperties?: ServerProperties;
  /**
   * List of databases on the server
  */
  readonly databases?: string[];
  /**
   * Validation errors associated with the task
  */
  readonly validationErrors?: ReportableException[];
}

/**
 * Properties for the task that validates MySQL database connection
*/
export interface ConnectToSourceMySqlTaskProperties extends ProjectTaskProperties {
  /**
   * Task input
  */
  input?: ConnectToSourceMySqlTaskInput;
  /**
   * Task output. This is ignored if submitted.
  */
  readonly output?: ConnectToSourceNonSqlTaskOutput[];
}

/**
 * Settings for migrating schema from source to target
*/
export interface SchemaMigrationSetting {
  /**
   * Option on how to migrate the schema. Possible values include: 'None', 'ExtractFromSource',
   * 'UseStorageFile'
  */
  schemaOption?: string;
  /**
   * Resource Identifier of a file resource containing the uploaded schema file
  */
  fileId?: string;
}

/**
 * Database input for migrate schema Sql Server to Azure SQL Server scenario
*/
export interface MigrateSchemaSqlServerSqlDbDatabaseInput {
  /**
   * Name of source database
  */
  name?: string;
  /**
   * Name of target database
  */
  targetDatabaseName?: string;
  /**
   * Database schema migration settings
  */
  schemaSetting?: SchemaMigrationSetting;
}

/**
 * Input for task that migrates Schema for SQL Server databases to Azure SQL databases
*/
export interface MigrateSchemaSqlServerSqlDbTaskInput extends SqlMigrationTaskInput {
  /**
   * Databases to migrate
  */
  selectedDatabases: MigrateSchemaSqlServerSqlDbDatabaseInput[];
}

/**
 * Output for the task that migrates Schema for SQL Server databases to Azure SQL databases
*/
export interface MigrateSchemaSqlServerSqlDbTaskOutput {
  /**
   * Result identifier
  */
  readonly id?: string;
  /**
   * Polymorphic Discriminator
  */
  resultType: string;
}

/**
 * Properties for task that migrates Schema for SQL Server databases to Azure SQL databases
*/
export interface MigrateSchemaSqlServerSqlDbTaskProperties extends ProjectTaskProperties {
  /**
   * Task input
  */
  input?: MigrateSchemaSqlServerSqlDbTaskInput;
  /**
   * Task output. This is ignored if submitted.
  */
  readonly output?: MigrateSchemaSqlServerSqlDbTaskOutput[];
}

export interface MigrateSchemaSqlServerSqlDbTaskOutputMigrationLevel extends
MigrateSchemaSqlServerSqlDbTaskOutput {
  /**
   * Overall state of the schema migration. Possible values include: 'None', 'InProgress',
   * 'Failed', 'Warning', 'Completed', 'Skipped', 'Stopped'
  */
  readonly state?: string;
  /**
   * Migration start time
  */
  readonly startedOn?: Date;
  /**
   * Migration end time
  */
  readonly endedOn?: Date;
  /**
   * Source server version
  */
  readonly sourceServerVersion?: string;
  /**
   * Source server brand version
  */
  readonly sourceServerBrandVersion?: string;
  /**
   * Target server version
  */
  readonly targetServerVersion?: string;
  /**
   * Target server brand version
  */
  readonly targetServerBrandVersion?: string;
}

export interface MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel extends
MigrateSchemaSqlServerSqlDbTaskOutput {
  /**
   * The name of the database
  */
  readonly databaseName?: string;
  /**
   * State of the schema migration for this database. Possible values include: 'None',
   * 'InProgress', 'Failed', 'Warning', 'Completed', 'Skipped', 'Stopped'
  */
  readonly state?: string;
  /**
   * Schema migration stage for this database. Possible values include: 'NotStarted',
   * 'ValidatingInputs', 'CollectingObjects', 'DownloadingScript', 'GeneratingScript',
   * 'UploadingScript', 'DeployingSchema', 'Completed', 'CompletedWithWarnings', 'Failed'
  */
  readonly stage?: string;
  /**
   * Migration start time
  */
  readonly startedOn?: Date;
  /**
   * Migration end time
  */
  readonly endedOn?: Date;
  /**
   * Prefix string to use for querying errors for this database
  */
  readonly databaseErrorResultPrefix?: string;
  /**
   * Prefix string to use for querying schema errors for this database
  */
  readonly schemaErrorResultPrefix?: string;
  /**
   * Number of successful operations for this database
  */
  readonly numberOfSuccessfulOperations?: number;
  /**
   * Number of failed operations for this database
  */
  readonly numberOfFailedOperations?: number;
  /**
   * Identifier for the file resource containing the schema of this database
  */
  readonly fileId?: string;
}

export interface MigrateSchemaSqlServerSqlDbTaskOutputError extends
MigrateSchemaSqlServerSqlDbTaskOutput {
  /**
   * Schema command which failed
  */
  readonly commandText?: string;
  /**
   * Reason of failure
  */
  readonly errorText?: string;
}

export interface MigrateSchemaSqlTaskOutputError extends MigrateSchemaSqlServerSqlDbTaskOutput {
  /**
   * Migration error
  */
  readonly error?: ReportableException;
}

/**
 * Describes the input to the 'cancel' and 'restart' MongoDB migration commands
*/
export interface MongoDbCommandInput {
  /**
   * The qualified name of a database or collection to act upon, or null to act upon the entire
   * migration
  */
  objectName?: string;
}

/**
 * Properties for the command that cancels a migration in whole or in part
*/
export interface MongoDbCancelCommand extends CommandProperties {
  /**
   * Command input
  */
  input?: MongoDbCommandInput;
}

/**
 * Describes the input to the 'finish' MongoDB migration command
*/
export interface MongoDbFinishCommandInput extends MongoDbCommandInput {
  /**
   * If true, replication for the affected objects will be stopped immediately. If false, the
   * migrator will finish replaying queued events before finishing the replication.
  */
  immediate: boolean;
}

/**
 * Properties for the command that finishes a migration in whole or in part
*/
export interface MongoDbFinishCommand extends CommandProperties {
  /**
   * Command input
  */
  input?: MongoDbFinishCommandInput;
}

/**
 * Properties for the command that restarts a migration in whole or in part
*/
export interface MongoDbRestartCommand extends CommandProperties {
  /**
   * Command input
  */
  input?: MongoDbCommandInput;
}

/**
 * Information about a single database
*/
export interface Database {
  /**
   * Unique identifier for the database
  */
  id?: string;
  /**
   * Name of the database
  */
  name?: string;
  /**
   * SQL Server compatibility level of database. Possible values include: 'CompatLevel80',
   * 'CompatLevel90', 'CompatLevel100', 'CompatLevel110', 'CompatLevel120', 'CompatLevel130',
   * 'CompatLevel140'
  */
  compatibilityLevel?: string;
  /**
   * Collation name of the database
  */
  collation?: string;
  /**
   * Name of the server
  */
  serverName?: string;
  /**
   * Fully qualified name
  */
  fqdn?: string;
  /**
   * Install id of the database
  */
  installId?: string;
  /**
   * Version of the server
  */
  serverVersion?: string;
  /**
   * Edition of the server
  */
  serverEdition?: string;
  /**
   * Product level of the server (RTM, SP, CTP).
  */
  serverLevel?: string;
  /**
   * Default path of the data files
  */
  serverDefaultDataPath?: string;
  /**
   * Default path of the log files
  */
  serverDefaultLogPath?: string;
  /**
   * Default path of the backup folder
  */
  serverDefaultBackupPath?: string;
  /**
   * Number of cores on the server
  */
  serverCoreCount?: number;
  /**
   * Number of cores on the server that have VISIBLE ONLINE status
  */
  serverVisibleOnlineCoreCount?: number;
  /**
   * State of the database. Possible values include: 'Online', 'Restoring', 'Recovering',
   * 'RecoveryPending', 'Suspect', 'Emergency', 'Offline', 'Copying', 'OfflineSecondary'
  */
  databaseState?: string;
  /**
   * The unique Server Id
  */
  serverId?: string;
}

/**
 * A representation of the name of an object in a database
*/
export interface DatabaseObjectName {
  /**
   * The unescaped name of the database containing the object
  */
  readonly databaseName?: string;
  /**
   * The unescaped name of the object
  */
  readonly objectName?: string;
  /**
   * The unescaped name of the schema containing the object
  */
  readonly schemaName?: string;
  /**
   * Type of the object in the database. Possible values include: 'StoredProcedures', 'Table',
   * 'User', 'View', 'Function'
  */
  objectType?: string;
}

/**
 * Metadata for tables selected in migration project
*/
export interface MigrationTableMetadata {
  /**
   * Source table name
  */
  readonly sourceTableName?: string;
  /**
   * Target table name
  */
  readonly targetTableName?: string;
}

/**
 * Common metadata for migration projects
*/
export interface DataMigrationProjectMetadata {
  /**
   * Source server name
  */
  readonly sourceServerName?: string;
  /**
   * Source server port number
  */
  readonly sourceServerPort?: string;
  /**
   * Source username
  */
  readonly sourceUsername?: string;
  /**
   * Target server name
  */
  readonly targetServerName?: string;
  /**
   * Target username
  */
  readonly targetUsername?: string;
  /**
   * Target database name
  */
  readonly targetDbName?: string;
  /**
   * Whether target connection is Windows authentication
  */
  readonly targetUsingWinAuth?: boolean;
  /**
   * List of tables selected for migration
  */
  readonly selectedMigrationTables?: MigrationTableMetadata[];
}

/**
 * Input for the task that reads configuration from project artifacts
*/
export interface GetProjectDetailsNonSqlTaskInput {
  /**
   * Name of the migration project
  */
  projectName: string;
  /**
   * A URL that points to the location to access project artifacts
  */
  projectLocation: string;
}

/**
 * Defines metadata for table to be migrated
*/
export interface NonSqlDataMigrationTable {
  /**
   * Source table name
  */
  sourceName?: string;
}

/**
 * Base class for non sql migration task input
*/
export interface NonSqlMigrationTaskInput {
  /**
   * Information for connecting to target
  */
  targetConnectionInfo: SqlConnectionInfo;
  /**
   * Target database name
  */
  targetDatabaseName: string;
  /**
   * Name of the migration project
  */
  projectName: string;
  /**
   * A URL that points to the drop location to access project artifacts
  */
  projectLocation: string;
  /**
   * Metadata of the tables selected for migration
  */
  selectedTables: NonSqlDataMigrationTable[];
}

/**
 * Migration Task errors
*/
export interface DataMigrationError {
  /**
   * Error description
  */
  readonly message?: string;
  /**
   * Possible values include: 'Default', 'Warning', 'Error'
  */
  type?: string;
}

/**
 * Object used to report the data migration results of a table
*/
export interface NonSqlDataMigrationTableResult {
  /**
   * Result code of the data migration. Possible values include: 'Initial', 'Completed',
   * 'ObjectNotExistsInSource', 'ObjectNotExistsInTarget', 'TargetObjectIsInaccessible',
   * 'FatalError'
  */
  readonly resultCode?: string;
  /**
   * Name of the source table
  */
  readonly sourceName?: string;
  /**
   * Name of the target table
  */
  readonly targetName?: string;
  /**
   * Number of rows in the source table
  */
  readonly sourceRowCount?: number;
  /**
   * Number of rows in the target table
  */
  readonly targetRowCount?: number;
  /**
   * Time taken to migrate the data
  */
  readonly elapsedTimeInMiliseconds?: number;
  /**
   * List of errors, if any, during migration
  */
  readonly errors?: DataMigrationError[];
}

/**
 * Base class for non sql migration task output
*/
export interface NonSqlMigrationTaskOutput {
  /**
   * Result identifier
  */
  readonly id?: string;
  /**
   * Migration start time
  */
  readonly startedOn?: Date;
  /**
   * Migration end time
  */
  readonly endedOn?: Date;
  /**
   * Current state of migration. Possible values include: 'Default', 'Connecting',
   * 'SourceAndTargetSelected', 'SelectLogins', 'Configured', 'Running', 'Error', 'Stopped',
   * 'Completed', 'CompletedWithWarnings'
  */
  readonly status?: string;
  /**
   * Results of the migration. The key contains the table name and the value the table result
   * object
  */
  readonly dataMigrationTableResults?: { [propertyName: string]: NonSqlDataMigrationTableResult };
  /**
   * Message about the progress of the migration
  */
  readonly progressMessage?: string;
  /**
   * Name of source server
  */
  readonly sourceServerName?: string;
  /**
   * Name of target server
  */
  readonly targetServerName?: string;
}

/**
 * Database file specific information for input
*/
export interface DatabaseFileInput {
  /**
   * Unique identifier for database file
  */
  id?: string;
  /**
   * Logical name of the file
  */
  logicalName?: string;
  /**
   * Operating-system full path of the file
  */
  physicalFullName?: string;
  /**
   * Suggested full path of the file for restoring
  */
  restoreFullName?: string;
  /**
   * Database file type. Possible values include: 'Rows', 'Log', 'Filestream', 'NotSupported',
   * 'Fulltext'
  */
  fileType?: string;
}

/**
 * Database specific information for SQL to SQL migration task inputs
*/
export interface MigrateSqlServerSqlServerDatabaseInput {
  /**
   * Name of the database
  */
  name?: string;
  /**
   * Name of the database at destination
  */
  restoreDatabaseName?: string;
  /**
   * The backup and restore folder
  */
  backupAndRestoreFolder?: string;
  /**
   * The list of database files
  */
  databaseFiles?: DatabaseFileInput[];
}

/**
 * The DMS List SKUs operation response.
*/
export interface ResourceSkusResult extends Array<ResourceSku> {
  /**
   * The uri to fetch the next page of DMS SKUs. Call ListNext() with this to fetch the next page
   * of DMS SKUs.
  */
  nextLink?: string;
}

/**
 * OData page of available SKUs
*/
export interface ServiceSkuList extends Array<AvailableServiceSku> {
  /**
   * URL to load the next page of service SKUs
  */
  nextLink?: string;
}

/**
 * OData page of service objects
*/
export interface DataMigrationServiceList extends Array<DataMigrationService> {
  /**
   * URL to load the next page of services
  */
  nextLink?: string;
}

/**
 * OData page of tasks
*/
export interface TaskList extends Array<ProjectTask> {
  /**
   * URL to load the next page of tasks
  */
  nextLink?: string;
}

/**
 * OData page of project resources
*/
export interface ProjectList extends Array<Project> {
  /**
   * URL to load the next page of projects
  */
  nextLink?: string;
}

/**
 * OData page of quota objects
*/
export interface QuotaList extends Array<Quota> {
  /**
   * URL to load the next page of quotas, or null or missing if this is the last page
  */
  nextLink?: string;
}

/**
 * OData page of action (operation) objects
*/
export interface ServiceOperationList extends Array<ServiceOperation> {
  /**
   * URL to load the next page of actions
  */
  nextLink?: string;
}

/**
 * OData page of files
*/
export interface FileList extends Array<ProjectFile> {
  /**
   * URL to load the next page of files
  */
  nextLink?: string;
}
