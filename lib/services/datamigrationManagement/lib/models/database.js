/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Information about a single database
 *
 */
class Database {
  /**
   * Create a Database.
   * @property {string} [id] Unique identifier for the database
   * @property {string} [name] Name of the database
   * @property {string} [compatibilityLevel] SQL Server compatibility level of
   * database. Possible values include: 'CompatLevel80', 'CompatLevel90',
   * 'CompatLevel100', 'CompatLevel110', 'CompatLevel120', 'CompatLevel130',
   * 'CompatLevel140'
   * @property {string} [collation] Collation name of the database
   * @property {string} [serverName] Name of the server
   * @property {string} [fqdn] Fully qualified name
   * @property {string} [installId] Install id of the database
   * @property {string} [serverVersion] Version of the server
   * @property {string} [serverEdition] Edition of the server
   * @property {string} [serverLevel] Product level of the server (RTM, SP,
   * CTP).
   * @property {string} [serverDefaultDataPath] Default path of the data files
   * @property {string} [serverDefaultLogPath] Default path of the log files
   * @property {string} [serverDefaultBackupPath] Default path of the backup
   * folder
   * @property {number} [serverCoreCount] Number of cores on the server
   * @property {number} [serverVisibleOnlineCoreCount] Number of cores on the
   * server that have VISIBLE ONLINE status
   * @property {string} [databaseState] State of the database. Possible values
   * include: 'Online', 'Restoring', 'Recovering', 'RecoveryPending',
   * 'Suspect', 'Emergency', 'Offline', 'Copying', 'OfflineSecondary'
   * @property {string} [serverId] The unique Server Id
   */
  constructor() {
  }

  /**
   * Defines the metadata of Database
   *
   * @returns {object} metadata of Database
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Database',
      type: {
        name: 'Composite',
        className: 'Database',
        modelProperties: {
          id: {
            required: false,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          compatibilityLevel: {
            required: false,
            serializedName: 'compatibilityLevel',
            type: {
              name: 'String'
            }
          },
          collation: {
            required: false,
            serializedName: 'collation',
            type: {
              name: 'String'
            }
          },
          serverName: {
            required: false,
            serializedName: 'serverName',
            type: {
              name: 'String'
            }
          },
          fqdn: {
            required: false,
            serializedName: 'fqdn',
            type: {
              name: 'String'
            }
          },
          installId: {
            required: false,
            serializedName: 'installId',
            type: {
              name: 'String'
            }
          },
          serverVersion: {
            required: false,
            serializedName: 'serverVersion',
            type: {
              name: 'String'
            }
          },
          serverEdition: {
            required: false,
            serializedName: 'serverEdition',
            type: {
              name: 'String'
            }
          },
          serverLevel: {
            required: false,
            serializedName: 'serverLevel',
            type: {
              name: 'String'
            }
          },
          serverDefaultDataPath: {
            required: false,
            serializedName: 'serverDefaultDataPath',
            type: {
              name: 'String'
            }
          },
          serverDefaultLogPath: {
            required: false,
            serializedName: 'serverDefaultLogPath',
            type: {
              name: 'String'
            }
          },
          serverDefaultBackupPath: {
            required: false,
            serializedName: 'serverDefaultBackupPath',
            type: {
              name: 'String'
            }
          },
          serverCoreCount: {
            required: false,
            serializedName: 'serverCoreCount',
            type: {
              name: 'Number'
            }
          },
          serverVisibleOnlineCoreCount: {
            required: false,
            serializedName: 'serverVisibleOnlineCoreCount',
            type: {
              name: 'Number'
            }
          },
          databaseState: {
            required: false,
            serializedName: 'databaseState',
            type: {
              name: 'String'
            }
          },
          serverId: {
            required: false,
            serializedName: 'serverId',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = Database;
