/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Describes a supported collection within a MongoDB database
 *
 * @extends models['MongoDbObjectInfo']
 */
class MongoDbCollectionInfo extends models['MongoDbObjectInfo'] {
  /**
   * Create a MongoDbCollectionInfo.
   * @property {string} databaseName The name of the database containing the
   * collection
   * @property {boolean} isCapped Whether the collection is a capped collection
   * (i.e. whether it has a fixed size and acts like a circular buffer)
   * @property {boolean} isSystemCollection Whether the collection is system
   * collection
   * @property {boolean} isView Whether the collection is a view of another
   * collection
   * @property {object} [shardKey] The shard key on the collection, or null if
   * the collection is not sharded
   * @property {array} [shardKey.fields] The fields within the shard key
   * @property {boolean} [shardKey.isUnique] Whether the shard key is unique
   * @property {boolean} supportsSharding Whether the database has sharding
   * enabled. Note that the migration task will enable sharding on the target
   * if necessary.
   * @property {string} [viewOf] The name of the collection that this is a view
   * of, if IsView is true
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of MongoDbCollectionInfo
   *
   * @returns {object} metadata of MongoDbCollectionInfo
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'MongoDbCollectionInfo',
      type: {
        name: 'Composite',
        className: 'MongoDbCollectionInfo',
        modelProperties: {
          averageDocumentSize: {
            required: true,
            serializedName: 'averageDocumentSize',
            type: {
              name: 'Number'
            }
          },
          dataSize: {
            required: true,
            serializedName: 'dataSize',
            type: {
              name: 'Number'
            }
          },
          documentCount: {
            required: true,
            serializedName: 'documentCount',
            type: {
              name: 'Number'
            }
          },
          name: {
            required: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          qualifiedName: {
            required: true,
            serializedName: 'qualifiedName',
            type: {
              name: 'String'
            }
          },
          databaseName: {
            required: true,
            serializedName: 'databaseName',
            type: {
              name: 'String'
            }
          },
          isCapped: {
            required: true,
            serializedName: 'isCapped',
            type: {
              name: 'Boolean'
            }
          },
          isSystemCollection: {
            required: true,
            serializedName: 'isSystemCollection',
            type: {
              name: 'Boolean'
            }
          },
          isView: {
            required: true,
            serializedName: 'isView',
            type: {
              name: 'Boolean'
            }
          },
          shardKey: {
            required: false,
            serializedName: 'shardKey',
            type: {
              name: 'Composite',
              className: 'MongoDbShardKeyInfo'
            }
          },
          supportsSharding: {
            required: true,
            serializedName: 'supportsSharding',
            type: {
              name: 'Boolean'
            }
          },
          viewOf: {
            required: false,
            serializedName: 'viewOf',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = MongoDbCollectionInfo;
