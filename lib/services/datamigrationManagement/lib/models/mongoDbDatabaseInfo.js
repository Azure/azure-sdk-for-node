/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Describes a database within a MongoDB data source
 *
 * @extends models['MongoDbObjectInfo']
 */
class MongoDbDatabaseInfo extends models['MongoDbObjectInfo'] {
  /**
   * Create a MongoDbDatabaseInfo.
   * @member {array} collections A list of supported collections in a MongoDB
   * database
   * @member {boolean} supportsSharding Whether the database has sharding
   * enabled. Note that the migration task will enable sharding on the target
   * if necessary.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of MongoDbDatabaseInfo
   *
   * @returns {object} metadata of MongoDbDatabaseInfo
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'MongoDbDatabaseInfo',
      type: {
        name: 'Composite',
        className: 'MongoDbDatabaseInfo',
        modelProperties: {
          averageDocumentSize: {
            required: true,
            serializedName: 'averageDocumentSize',
            type: {
              name: 'Number'
            }
          },
          dataSize: {
            required: true,
            serializedName: 'dataSize',
            type: {
              name: 'Number'
            }
          },
          documentCount: {
            required: true,
            serializedName: 'documentCount',
            type: {
              name: 'Number'
            }
          },
          name: {
            required: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          qualifiedName: {
            required: true,
            serializedName: 'qualifiedName',
            type: {
              name: 'String'
            }
          },
          collections: {
            required: true,
            serializedName: 'collections',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'MongoDbCollectionInfoElementType',
                  type: {
                    name: 'Composite',
                    className: 'MongoDbCollectionInfo'
                  }
              }
            }
          },
          supportsSharding: {
            required: true,
            serializedName: 'supportsSharding',
            type: {
              name: 'Boolean'
            }
          }
        }
      }
    };
  }
}

module.exports = MongoDbDatabaseInfo;
