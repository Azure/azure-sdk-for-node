/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Properties for the task that validates a migration between MongoDB data
 * sources
 *
 * @extends models['ProjectTaskProperties']
 */
class ValidateMongoDbTaskProperties extends models['ProjectTaskProperties'] {
  /**
   * Create a ValidateMongoDbTaskProperties.
   * @property {object} [input]
   * @property {number} [input.boostRUs] The RU limit on a CosmosDB target that
   * collections will be temporarily increased to (if lower) during the initial
   * copy of a migration, from 10,000 to 1,000,000, or 0 to use the default
   * boost (which is generally the maximum), or null to not boost the RUs. This
   * setting has no effect on non-CosmosDB targets.
   * @property {object} [input.databases] The databases on the source cluster
   * to migrate to the target. The keys are the names of the databases.
   * @property {string} [input.replication] Describes how changes will be
   * replicated from the source to the target. The default is OneTime. Possible
   * values include: 'Disabled', 'OneTime', 'Continuous'
   * @property {object} [input.source] Settings used to connect to the source
   * cluster
   * @property {string} [input.source.connectionString] A MongoDB connection
   * string or blob container URL. The user name and password can be specified
   * here or in the userName and password properties
   * @property {object} [input.target] Settings used to connect to the target
   * cluster
   * @property {string} [input.target.connectionString] A MongoDB connection
   * string or blob container URL. The user name and password can be specified
   * here or in the userName and password properties
   * @property {object} [input.throttling] Settings used to limit the resource
   * usage of the migration
   * @property {number} [input.throttling.minFreeCpu] The percentage of CPU
   * time that the migrator will try to avoid using, from 0 to 100
   * @property {number} [input.throttling.minFreeMemoryMb] The number of
   * megabytes of RAM that the migrator will try to avoid using
   * @property {number} [input.throttling.maxParallelism] The maximum number of
   * work items (e.g. collection copies) that will be processed in parallel
   * @property {array} [output] An array containing a single
   * MongoDbMigrationProgress object
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ValidateMongoDbTaskProperties
   *
   * @returns {object} metadata of ValidateMongoDbTaskProperties
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Validate.MongoDb',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'taskType',
          clientName: 'taskType'
        },
        uberParent: 'ProjectTaskProperties',
        className: 'ValidateMongoDbTaskProperties',
        modelProperties: {
          errors: {
            required: false,
            readOnly: true,
            serializedName: 'errors',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ODataErrorElementType',
                  type: {
                    name: 'Composite',
                    className: 'ODataError'
                  }
              }
            }
          },
          state: {
            required: false,
            readOnly: true,
            serializedName: 'state',
            type: {
              name: 'String'
            }
          },
          commands: {
            required: false,
            readOnly: true,
            serializedName: 'commands',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'CommandPropertiesElementType',
                  type: {
                    name: 'Composite',
                    polymorphicDiscriminator: {
                      serializedName: 'commandType',
                      clientName: 'commandType'
                    },
                    uberParent: 'CommandProperties',
                    className: 'CommandProperties'
                  }
              }
            }
          },
          clientData: {
            required: false,
            serializedName: 'clientData',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          taskType: {
            required: true,
            serializedName: 'taskType',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          input: {
            required: false,
            serializedName: 'input',
            type: {
              name: 'Composite',
              className: 'MongoDbMigrationSettings'
            }
          },
          output: {
            required: false,
            readOnly: true,
            serializedName: 'output',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'MongoDbMigrationProgressElementType',
                  type: {
                    name: 'Composite',
                    className: 'MongoDbMigrationProgress'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = ValidateMongoDbTaskProperties;
