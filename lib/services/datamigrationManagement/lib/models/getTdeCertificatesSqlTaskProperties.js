/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Properties for the task that gets TDE certificates in Base64 encoded format.
 *
 * @extends models['ProjectTaskProperties']
 */
class GetTdeCertificatesSqlTaskProperties extends models['ProjectTaskProperties'] {
  /**
   * Create a GetTdeCertificatesSqlTaskProperties.
   * @member {object} [input] Task input
   * @member {object} [input.connectionInfo] Connection information for SQL
   * Server
   * @member {string} [input.connectionInfo.dataSource] Data source in the
   * format Protocol:MachineName\SQLServerInstanceName,PortNumber
   * @member {string} [input.connectionInfo.authentication] Authentication type
   * to use for connection. Possible values include: 'None',
   * 'WindowsAuthentication', 'SqlAuthentication', 'ActiveDirectoryIntegrated',
   * 'ActiveDirectoryPassword'
   * @member {boolean} [input.connectionInfo.encryptConnection] Whether to
   * encrypt the connection
   * @member {string} [input.connectionInfo.additionalSettings] Additional
   * connection settings
   * @member {boolean} [input.connectionInfo.trustServerCertificate] Whether to
   * trust the server certificate
   * @member {string} [input.connectionInfo.platform] Server platform type for
   * connection. Possible values include: 'SqlOnPrem'
   * @member {object} [input.backupFileShare] Backup file share information for
   * file share to be used for temporarily storing files.
   * @member {string} [input.backupFileShare.userName] User name credential to
   * connect to the share location
   * @member {string} [input.backupFileShare.password] Password credential used
   * to connect to the share location.
   * @member {string} [input.backupFileShare.path] The folder path for this
   * share.
   * @member {array} [input.selectedCertificates] List containing certificate
   * names and corresponding password to use for encrypting the exported
   * certificate.
   * @member {array} [output] Task output. This is ignored if submitted.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of GetTdeCertificatesSqlTaskProperties
   *
   * @returns {object} metadata of GetTdeCertificatesSqlTaskProperties
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'GetTDECertificates.Sql',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'taskType',
          clientName: 'taskType'
        },
        uberParent: 'ProjectTaskProperties',
        className: 'GetTdeCertificatesSqlTaskProperties',
        modelProperties: {
          errors: {
            required: false,
            readOnly: true,
            serializedName: 'errors',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ODataErrorElementType',
                  type: {
                    name: 'Composite',
                    className: 'ODataError'
                  }
              }
            }
          },
          state: {
            required: false,
            readOnly: true,
            serializedName: 'state',
            type: {
              name: 'String'
            }
          },
          commands: {
            required: false,
            readOnly: true,
            serializedName: 'commands',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'CommandPropertiesElementType',
                  type: {
                    name: 'Composite',
                    polymorphicDiscriminator: {
                      serializedName: 'commandType',
                      clientName: 'commandType'
                    },
                    uberParent: 'CommandProperties',
                    className: 'CommandProperties'
                  }
              }
            }
          },
          taskType: {
            required: true,
            serializedName: 'taskType',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          input: {
            required: false,
            serializedName: 'input',
            type: {
              name: 'Composite',
              className: 'GetTdeCertificatesSqlTaskInput'
            }
          },
          output: {
            required: false,
            readOnly: true,
            serializedName: 'output',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'GetTdeCertificatesSqlTaskOutputElementType',
                  type: {
                    name: 'Composite',
                    className: 'GetTdeCertificatesSqlTaskOutput'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = GetTdeCertificatesSqlTaskProperties;
