/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * A project resource
 *
 * @extends models['TrackedResource']
 */
class Project extends models['TrackedResource'] {
  /**
   * Create a Project.
   * @member {string} sourcePlatform Source platform for the project. Possible
   * values include: 'SQL', 'MySQL', 'PostgreSql', 'Unknown'
   * @member {string} targetPlatform Target platform for the project. Possible
   * values include: 'SQLDB', 'SQLMI', 'AzureDbForMySql',
   * 'AzureDbForPostgreSql', 'Unknown'
   * @member {date} [creationTime] UTC Date and time when project was created
   * @member {object} [sourceConnectionInfo] Information for connecting to
   * source
   * @member {string} [sourceConnectionInfo.userName] User name
   * @member {string} [sourceConnectionInfo.password] Password credential.
   * @member {string} [sourceConnectionInfo.type] Polymorphic Discriminator
   * @member {object} [targetConnectionInfo] Information for connecting to
   * target
   * @member {string} [targetConnectionInfo.userName] User name
   * @member {string} [targetConnectionInfo.password] Password credential.
   * @member {string} [targetConnectionInfo.type] Polymorphic Discriminator
   * @member {array} [databasesInfo] List of DatabaseInfo
   * @member {string} [provisioningState] The project's provisioning state.
   * Possible values include: 'Deleting', 'Succeeded'
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Project
   *
   * @returns {object} metadata of Project
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Project',
      type: {
        name: 'Composite',
        className: 'Project',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          location: {
            required: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          sourcePlatform: {
            required: true,
            serializedName: 'properties.sourcePlatform',
            type: {
              name: 'String'
            }
          },
          targetPlatform: {
            required: true,
            serializedName: 'properties.targetPlatform',
            type: {
              name: 'String'
            }
          },
          creationTime: {
            required: false,
            readOnly: true,
            serializedName: 'properties.creationTime',
            type: {
              name: 'DateTime'
            }
          },
          sourceConnectionInfo: {
            required: false,
            serializedName: 'properties.sourceConnectionInfo',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: 'type',
                clientName: 'type'
              },
              uberParent: 'ConnectionInfo',
              className: 'ConnectionInfo'
            }
          },
          targetConnectionInfo: {
            required: false,
            serializedName: 'properties.targetConnectionInfo',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: 'type',
                clientName: 'type'
              },
              uberParent: 'ConnectionInfo',
              className: 'ConnectionInfo'
            }
          },
          databasesInfo: {
            required: false,
            serializedName: 'properties.databasesInfo',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'DatabaseInfoElementType',
                  type: {
                    name: 'Composite',
                    className: 'DatabaseInfo'
                  }
              }
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = Project;
