/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Base class for MongoDB migration outputs
 *
 */
class MongoDbProgress {
  /**
   * Create a MongoDbProgress.
   * @property {number} bytesCopied The number of document bytes copied during
   * the Copying stage
   * @property {number} documentsCopied The number of documents copied during
   * the Copying stage
   * @property {string} elapsedTime The elapsed time in the format
   * [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format)
   * @property {object} errors The errors and warnings that have occurred for
   * the current object. The keys are the error codes.
   * @property {number} eventsPending The number of oplog events awaiting
   * replay
   * @property {number} eventsReplayed The number of oplog events replayed so
   * far
   * @property {date} [lastEventTime] The timestamp of the last oplog event
   * received, or null if no oplog event has been received yet
   * @property {date} [lastReplayTime] The timestamp of the last oplog event
   * replayed, or null if no oplog event has been replayed yet
   * @property {string} [name] The name of the progress object. For a
   * collection, this is the unqualified collection name. For a database, this
   * is the database name. For the overall migration, this is null.
   * @property {string} [qualifiedName] The qualified name of the progress
   * object. For a collection, this is the database-qualified name. For a
   * database, this is the database name. For the overall migration, this is
   * null.
   * @property {string} resultType The type of progress object. Possible values
   * include: 'Migration', 'Database', 'Collection'
   * @property {string} state Possible values include: 'NotStarted',
   * 'ValidatingInput', 'Initializing', 'Restarting', 'Copying',
   * 'InitialReplay', 'Replaying', 'Finalizing', 'Complete', 'Canceled',
   * 'Failed'
   * @property {number} totalBytes The total number of document bytes on the
   * source at the beginning of the Copying stage, or -1 if the total size was
   * unknown
   * @property {number} totalDocuments The total number of documents on the
   * source at the beginning of the Copying stage, or -1 if the total count was
   * unknown
   */
  constructor() {
  }

  /**
   * Defines the metadata of MongoDbProgress
   *
   * @returns {object} metadata of MongoDbProgress
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'MongoDbProgress',
      type: {
        name: 'Composite',
        className: 'MongoDbProgress',
        modelProperties: {
          bytesCopied: {
            required: true,
            serializedName: 'bytesCopied',
            type: {
              name: 'Number'
            }
          },
          documentsCopied: {
            required: true,
            serializedName: 'documentsCopied',
            type: {
              name: 'Number'
            }
          },
          elapsedTime: {
            required: true,
            serializedName: 'elapsedTime',
            type: {
              name: 'String'
            }
          },
          errors: {
            required: true,
            serializedName: 'errors',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'MongoDbErrorElementType',
                  type: {
                    name: 'Composite',
                    className: 'MongoDbError'
                  }
              }
            }
          },
          eventsPending: {
            required: true,
            serializedName: 'eventsPending',
            type: {
              name: 'Number'
            }
          },
          eventsReplayed: {
            required: true,
            serializedName: 'eventsReplayed',
            type: {
              name: 'Number'
            }
          },
          lastEventTime: {
            required: false,
            serializedName: 'lastEventTime',
            type: {
              name: 'DateTime'
            }
          },
          lastReplayTime: {
            required: false,
            serializedName: 'lastReplayTime',
            type: {
              name: 'DateTime'
            }
          },
          name: {
            required: false,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          qualifiedName: {
            required: false,
            serializedName: 'qualifiedName',
            type: {
              name: 'String'
            }
          },
          resultType: {
            required: true,
            serializedName: 'resultType',
            type: {
              name: 'String'
            }
          },
          state: {
            required: true,
            serializedName: 'state',
            type: {
              name: 'String'
            }
          },
          totalBytes: {
            required: true,
            serializedName: 'totalBytes',
            type: {
              name: 'Number'
            }
          },
          totalDocuments: {
            required: true,
            serializedName: 'totalDocuments',
            type: {
              name: 'Number'
            }
          }
        }
      }
    };
  }
}

module.exports = MongoDbProgress;
