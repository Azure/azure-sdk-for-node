/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Task level output for the task that validates connection to SQL Server and
 * also validates source server requirements
 *
 * @extends models['ConnectToSourceSqlServerTaskOutput']
 */
class ConnectToSourceSqlServerTaskOutputTaskLevel extends models['ConnectToSourceSqlServerTaskOutput'] {
  /**
   * Create a ConnectToSourceSqlServerTaskOutputTaskLevel.
   * @member {object} [databases] Source databases as a map from database name
   * to database id
   * @member {object} [logins] Source logins as a map from login name to login
   * id.
   * @member {object} [agentJobs] Source agent jobs as a map from agent job
   * name to id.
   * @member {object} [databaseTdeCertificateMapping] Mapping from database
   * name to TDE certificate name, if applicable
   * @member {string} [sourceServerVersion] Source server version
   * @member {string} [sourceServerBrandVersion] Source server brand version
   * @member {array} [validationErrors] Validation errors
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ConnectToSourceSqlServerTaskOutputTaskLevel
   *
   * @returns {object} metadata of ConnectToSourceSqlServerTaskOutputTaskLevel
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'TaskLevelOutput',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'resultType',
          clientName: 'resultType'
        },
        uberParent: 'ConnectToSourceSqlServerTaskOutput',
        className: 'ConnectToSourceSqlServerTaskOutputTaskLevel',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          resultType: {
            required: true,
            serializedName: 'resultType',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          databases: {
            required: false,
            readOnly: true,
            serializedName: 'databases',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          logins: {
            required: false,
            readOnly: true,
            serializedName: 'logins',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          agentJobs: {
            required: false,
            readOnly: true,
            serializedName: 'agentJobs',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          databaseTdeCertificateMapping: {
            required: false,
            readOnly: true,
            serializedName: 'databaseTdeCertificateMapping',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          sourceServerVersion: {
            required: false,
            readOnly: true,
            serializedName: 'sourceServerVersion',
            type: {
              name: 'String'
            }
          },
          sourceServerBrandVersion: {
            required: false,
            readOnly: true,
            serializedName: 'sourceServerBrandVersion',
            type: {
              name: 'String'
            }
          },
          validationErrors: {
            required: false,
            readOnly: true,
            serializedName: 'validationErrors',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ReportableExceptionElementType',
                  type: {
                    name: 'Composite',
                    className: 'ReportableException'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = ConnectToSourceSqlServerTaskOutputTaskLevel;
