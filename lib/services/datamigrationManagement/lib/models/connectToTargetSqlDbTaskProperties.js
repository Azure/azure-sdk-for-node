/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Properties for the task that validates connection to SQL DB and target
 * server requirements
 *
 * @extends models['ProjectTaskProperties']
 */
class ConnectToTargetSqlDbTaskProperties extends models['ProjectTaskProperties'] {
  /**
   * Create a ConnectToTargetSqlDbTaskProperties.
   * @member {object} [input] Task input
   * @member {object} [input.targetConnectionInfo] Connection information for
   * target SQL DB
   * @member {string} [input.targetConnectionInfo.dataSource] Data source in
   * the format Protocol:MachineName\SQLServerInstanceName,PortNumber
   * @member {string} [input.targetConnectionInfo.authentication]
   * Authentication type to use for connection. Possible values include:
   * 'None', 'WindowsAuthentication', 'SqlAuthentication',
   * 'ActiveDirectoryIntegrated', 'ActiveDirectoryPassword'
   * @member {boolean} [input.targetConnectionInfo.encryptConnection] Whether
   * to encrypt the connection
   * @member {string} [input.targetConnectionInfo.additionalSettings]
   * Additional connection settings
   * @member {boolean} [input.targetConnectionInfo.trustServerCertificate]
   * Whether to trust the server certificate
   * @member {array} [output] Task output. This is ignored if submitted.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ConnectToTargetSqlDbTaskProperties
   *
   * @returns {object} metadata of ConnectToTargetSqlDbTaskProperties
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ConnectToTarget.SqlDb',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'taskType',
          clientName: 'taskType'
        },
        uberParent: 'ProjectTaskProperties',
        className: 'ConnectToTargetSqlDbTaskProperties',
        modelProperties: {
          errors: {
            required: false,
            readOnly: true,
            serializedName: 'errors',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ODataErrorElementType',
                  type: {
                    name: 'Composite',
                    className: 'ODataError'
                  }
              }
            }
          },
          state: {
            required: false,
            readOnly: true,
            serializedName: 'state',
            type: {
              name: 'String'
            }
          },
          taskType: {
            required: true,
            serializedName: 'taskType',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          input: {
            required: false,
            serializedName: 'input',
            type: {
              name: 'Composite',
              className: 'ConnectToTargetSqlDbTaskInput'
            }
          },
          output: {
            required: false,
            readOnly: true,
            serializedName: 'output',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ConnectToTargetSqlDbTaskOutputElementType',
                  type: {
                    name: 'Composite',
                    className: 'ConnectToTargetSqlDbTaskOutput'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = ConnectToTargetSqlDbTaskProperties;
