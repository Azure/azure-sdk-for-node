/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * A Database Migration Service resource
 *
 * @extends models['TrackedResource']
 */
class DataMigrationService extends models['TrackedResource'] {
  /**
   * Create a DataMigrationService.
   * @property {string} [etag] HTTP strong entity tag value. Ignored if
   * submitted
   * @property {string} [kind] The resource kind. Only 'vm' (the default) is
   * supported.
   * @property {string} [provisioningState] The resource's provisioning state.
   * Possible values include: 'Accepted', 'Deleting', 'Deploying', 'Stopped',
   * 'Stopping', 'Starting', 'FailedToStart', 'FailedToStop', 'Succeeded',
   * 'Failed'
   * @property {string} [publicKey] The public key of the service, used to
   * encrypt secrets sent to the service
   * @property {string} virtualSubnetId The ID of the
   * Microsoft.Network/virtualNetworks/subnets resource to which the service
   * should be joined
   * @property {object} [sku] Service SKU
   * @property {string} [sku.name] The unique name of the SKU, such as 'P3'
   * @property {string} [sku.tier] The tier of the SKU, such as 'Basic',
   * 'General Purpose', or 'Business Critical'
   * @property {string} [sku.family] The SKU family, used when the service has
   * multiple performance classes within a tier, such as 'A', 'D', etc. for
   * virtual machines
   * @property {string} [sku.size] The size of the SKU, used when the name
   * alone does not denote a service size or when a SKU has multiple
   * performance classes within a family, e.g. 'A1' for virtual machines
   * @property {number} [sku.capacity] The capacity of the SKU, if it supports
   * scaling
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of DataMigrationService
   *
   * @returns {object} metadata of DataMigrationService
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DataMigrationService',
      type: {
        name: 'Composite',
        className: 'DataMigrationService',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          location: {
            required: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          etag: {
            required: false,
            serializedName: 'etag',
            type: {
              name: 'String'
            }
          },
          kind: {
            required: false,
            serializedName: 'kind',
            type: {
              name: 'String'
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          publicKey: {
            required: false,
            serializedName: 'properties.publicKey',
            type: {
              name: 'String'
            }
          },
          virtualSubnetId: {
            required: true,
            serializedName: 'properties.virtualSubnetId',
            type: {
              name: 'String'
            }
          },
          sku: {
            required: false,
            serializedName: 'sku',
            type: {
              name: 'Composite',
              className: 'ServiceSku'
            }
          }
        }
      }
    };
  }
}

module.exports = DataMigrationService;
