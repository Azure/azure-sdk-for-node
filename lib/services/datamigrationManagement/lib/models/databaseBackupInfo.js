/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Information about backup files when existing backup mode is used.
 *
 */
class DatabaseBackupInfo {
  /**
   * Create a DatabaseBackupInfo.
   * @property {string} [databaseName] Database name.
   * @property {string} [backupType] Backup Type. Possible values include:
   * 'Database', 'TransactionLog', 'File', 'DifferentialDatabase',
   * 'DifferentialFile', 'Partial', 'DifferentialPartial'
   * @property {array} [backupFiles] The list of backup files for the current
   * database.
   * @property {number} [position] Position of current database backup in the
   * file.
   * @property {boolean} [isDamaged] Database was damaged when backed up, but
   * the backup operation was requested to continue despite errors.
   * @property {boolean} [isCompressed] Whether the backup set is compressed
   * @property {number} [familyCount] Number of files in the backup set.
   * @property {date} [backupFinishDate] Date and time when the backup
   * operation finished.
   */
  constructor() {
  }

  /**
   * Defines the metadata of DatabaseBackupInfo
   *
   * @returns {object} metadata of DatabaseBackupInfo
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DatabaseBackupInfo',
      type: {
        name: 'Composite',
        className: 'DatabaseBackupInfo',
        modelProperties: {
          databaseName: {
            required: false,
            readOnly: true,
            serializedName: 'databaseName',
            type: {
              name: 'String'
            }
          },
          backupType: {
            required: false,
            readOnly: true,
            serializedName: 'backupType',
            type: {
              name: 'String'
            }
          },
          backupFiles: {
            required: false,
            readOnly: true,
            serializedName: 'backupFiles',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          position: {
            required: false,
            readOnly: true,
            serializedName: 'position',
            type: {
              name: 'Number'
            }
          },
          isDamaged: {
            required: false,
            readOnly: true,
            serializedName: 'isDamaged',
            type: {
              name: 'Boolean'
            }
          },
          isCompressed: {
            required: false,
            readOnly: true,
            serializedName: 'isCompressed',
            type: {
              name: 'Boolean'
            }
          },
          familyCount: {
            required: false,
            readOnly: true,
            serializedName: 'familyCount',
            type: {
              name: 'Number'
            }
          },
          backupFinishDate: {
            required: false,
            readOnly: true,
            serializedName: 'backupFinishDate',
            type: {
              name: 'DateTime'
            }
          }
        }
      }
    };
  }
}

module.exports = DatabaseBackupInfo;
