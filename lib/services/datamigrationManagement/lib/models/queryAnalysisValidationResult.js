/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Results for query analysis comparison between the source and target
 *
 */
class QueryAnalysisValidationResult {
  /**
   * Create a QueryAnalysisValidationResult.
   * @member {object} [queryResults] List of queries executed and it's
   * execution results in source and target
   * @member {string} [queryResults.queryText] Query text retrieved from the
   * source server
   * @member {number} [queryResults.statementsInBatch] Total no. of statements
   * in the batch
   * @member {object} [queryResults.sourceResult] Query analysis result from
   * the source
   * @member {number} [queryResults.sourceResult.executionCount] No. of query
   * executions
   * @member {number} [queryResults.sourceResult.cpuTimeMs] CPU Time in
   * millisecond(s) for the query execution
   * @member {number} [queryResults.sourceResult.elapsedTimeMs] Time taken in
   * millisecond(s) for executing the query
   * @member {object} [queryResults.sourceResult.waitStats] Dictionary of sql
   * query execution wait types and the respective statistics
   * @member {boolean} [queryResults.sourceResult.hasErrors] Indicates whether
   * the query resulted in an error
   * @member {array} [queryResults.sourceResult.sqlErrors] List of sql Errors
   * @member {object} [queryResults.targetResult] Query analysis result from
   * the target
   * @member {number} [queryResults.targetResult.executionCount] No. of query
   * executions
   * @member {number} [queryResults.targetResult.cpuTimeMs] CPU Time in
   * millisecond(s) for the query execution
   * @member {number} [queryResults.targetResult.elapsedTimeMs] Time taken in
   * millisecond(s) for executing the query
   * @member {object} [queryResults.targetResult.waitStats] Dictionary of sql
   * query execution wait types and the respective statistics
   * @member {boolean} [queryResults.targetResult.hasErrors] Indicates whether
   * the query resulted in an error
   * @member {array} [queryResults.targetResult.sqlErrors] List of sql Errors
   * @member {object} [validationErrors] Errors that are part of the execution
   * @member {string} [validationErrors.text] Error Text
   * @member {string} [validationErrors.severity] Severity of the error.
   * Possible values include: 'Message', 'Warning', 'Error'
   */
  constructor() {
  }

  /**
   * Defines the metadata of QueryAnalysisValidationResult
   *
   * @returns {object} metadata of QueryAnalysisValidationResult
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'QueryAnalysisValidationResult',
      type: {
        name: 'Composite',
        className: 'QueryAnalysisValidationResult',
        modelProperties: {
          queryResults: {
            required: false,
            serializedName: 'queryResults',
            type: {
              name: 'Composite',
              className: 'QueryExecutionResult'
            }
          },
          validationErrors: {
            required: false,
            serializedName: 'validationErrors',
            type: {
              name: 'Composite',
              className: 'ValidationError'
            }
          }
        }
      }
    };
  }
}

module.exports = QueryAnalysisValidationResult;
