/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Output for task that validates migration input for SQL to Azure SQL Managed
 * Instance migrations
 *
 */
class ValidateMigrationInputSqlServerSqlMITaskOutput {
  /**
   * Create a ValidateMigrationInputSqlServerSqlMITaskOutput.
   * @member {string} [id] Result identifier
   * @member {string} [name] Name of database
   * @member {array} [restoreDatabaseNameErrors] Errors associated with the
   * RestoreDatabaseName
   * @member {array} [backupFolderErrors] Errors associated with the
   * BackupFolder path
   * @member {array} [backupShareCredentialsErrors] Errors associated with
   * backup share user name and password credentials
   * @member {array} [backupStorageAccountErrors] Errors associated with the
   * storage account provided.
   * @member {array} [existingBackupErrors] Errors associated with existing
   * backup files.
   * @member {object} [databaseBackupInfo] Information about backup files when
   * existing backup mode is used.
   * @member {string} [databaseBackupInfo.databaseName] Database name.
   * @member {string} [databaseBackupInfo.backupType] Backup Type. Possible
   * values include: 'Database', 'TransactionLog', 'File',
   * 'DifferentialDatabase', 'DifferentialFile', 'Partial',
   * 'DifferentialPartial'
   * @member {array} [databaseBackupInfo.backupFiles] The list of backup files
   * for the current database.
   * @member {number} [databaseBackupInfo.position] Position of current
   * database backup in the file.
   * @member {boolean} [databaseBackupInfo.isDamaged] Database was damaged when
   * backed up, but the backup operation was requested to continue despite
   * errors.
   * @member {boolean} [databaseBackupInfo.isCompressed] Whether the backup set
   * is compressed
   * @member {number} [databaseBackupInfo.familyCount] Number of files in the
   * backup set.
   * @member {date} [databaseBackupInfo.backupFinishDate] Date and time when
   * the backup operation finished.
   */
  constructor() {
  }

  /**
   * Defines the metadata of ValidateMigrationInputSqlServerSqlMITaskOutput
   *
   * @returns {object} metadata of ValidateMigrationInputSqlServerSqlMITaskOutput
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ValidateMigrationInputSqlServerSqlMITaskOutput',
      type: {
        name: 'Composite',
        className: 'ValidateMigrationInputSqlServerSqlMITaskOutput',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          restoreDatabaseNameErrors: {
            required: false,
            readOnly: true,
            serializedName: 'restoreDatabaseNameErrors',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ReportableExceptionElementType',
                  type: {
                    name: 'Composite',
                    className: 'ReportableException'
                  }
              }
            }
          },
          backupFolderErrors: {
            required: false,
            readOnly: true,
            serializedName: 'backupFolderErrors',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ReportableExceptionElementType',
                  type: {
                    name: 'Composite',
                    className: 'ReportableException'
                  }
              }
            }
          },
          backupShareCredentialsErrors: {
            required: false,
            readOnly: true,
            serializedName: 'backupShareCredentialsErrors',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ReportableExceptionElementType',
                  type: {
                    name: 'Composite',
                    className: 'ReportableException'
                  }
              }
            }
          },
          backupStorageAccountErrors: {
            required: false,
            readOnly: true,
            serializedName: 'backupStorageAccountErrors',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ReportableExceptionElementType',
                  type: {
                    name: 'Composite',
                    className: 'ReportableException'
                  }
              }
            }
          },
          existingBackupErrors: {
            required: false,
            readOnly: true,
            serializedName: 'existingBackupErrors',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ReportableExceptionElementType',
                  type: {
                    name: 'Composite',
                    className: 'ReportableException'
                  }
              }
            }
          },
          databaseBackupInfo: {
            required: false,
            serializedName: 'databaseBackupInfo',
            type: {
              name: 'Composite',
              className: 'DatabaseBackupInfo'
            }
          }
        }
      }
    };
  }
}

module.exports = ValidateMigrationInputSqlServerSqlMITaskOutput;
