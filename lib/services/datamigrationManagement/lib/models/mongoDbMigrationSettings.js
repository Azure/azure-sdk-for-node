/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Describes how a MongoDB data migration should be performed
 *
 */
class MongoDbMigrationSettings {
  /**
   * Create a MongoDbMigrationSettings.
   * @property {number} [boostRUs] The RU limit on a CosmosDB target that
   * collections will be temporarily increased to (if lower) during the initial
   * copy of a migration, from 10,000 to 1,000,000, or 0 to use the default
   * boost (which is generally the maximum), or null to not boost the RUs. This
   * setting has no effect on non-CosmosDB targets.
   * @property {object} databases The databases on the source cluster to
   * migrate to the target. The keys are the names of the databases.
   * @property {string} [replication] Describes how changes will be replicated
   * from the source to the target. The default is OneTime. Possible values
   * include: 'Disabled', 'OneTime', 'Continuous'
   * @property {object} source Settings used to connect to the source cluster
   * @property {string} [source.connectionString] A MongoDB connection string
   * or blob container URL. The user name and password can be specified here or
   * in the userName and password properties
   * @property {object} target Settings used to connect to the target cluster
   * @property {string} [target.connectionString] A MongoDB connection string
   * or blob container URL. The user name and password can be specified here or
   * in the userName and password properties
   * @property {object} [throttling] Settings used to limit the resource usage
   * of the migration
   * @property {number} [throttling.minFreeCpu] The percentage of CPU time that
   * the migrator will try to avoid using, from 0 to 100
   * @property {number} [throttling.minFreeMemoryMb] The number of megabytes of
   * RAM that the migrator will try to avoid using
   * @property {number} [throttling.maxParallelism] The maximum number of work
   * items (e.g. collection copies) that will be processed in parallel
   */
  constructor() {
  }

  /**
   * Defines the metadata of MongoDbMigrationSettings
   *
   * @returns {object} metadata of MongoDbMigrationSettings
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'MongoDbMigrationSettings',
      type: {
        name: 'Composite',
        className: 'MongoDbMigrationSettings',
        modelProperties: {
          boostRUs: {
            required: false,
            serializedName: 'boostRUs',
            type: {
              name: 'Number'
            }
          },
          databases: {
            required: true,
            serializedName: 'databases',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'MongoDbDatabaseSettingsElementType',
                  type: {
                    name: 'Composite',
                    className: 'MongoDbDatabaseSettings'
                  }
              }
            }
          },
          replication: {
            required: false,
            serializedName: 'replication',
            type: {
              name: 'String'
            }
          },
          source: {
            required: true,
            serializedName: 'source',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: 'type',
                clientName: 'type'
              },
              uberParent: 'ConnectionInfo',
              className: 'MongoDbConnectionInfo'
            }
          },
          target: {
            required: true,
            serializedName: 'target',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: 'type',
                clientName: 'type'
              },
              uberParent: 'ConnectionInfo',
              className: 'MongoDbConnectionInfo'
            }
          },
          throttling: {
            required: false,
            serializedName: 'throttling',
            type: {
              name: 'Composite',
              className: 'MongoDbThrottlingSettings'
            }
          }
        }
      }
    };
  }
}

module.exports = MongoDbMigrationSettings;
