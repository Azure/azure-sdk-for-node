/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Class representing a MigrateSqlServerSqlDbTaskOutputMigrationLevel.
 * @extends models['MigrateSqlServerSqlDbTaskOutput']
 */
class MigrateSqlServerSqlDbTaskOutputMigrationLevel extends models['MigrateSqlServerSqlDbTaskOutput'] {
  /**
   * Create a MigrateSqlServerSqlDbTaskOutputMigrationLevel.
   * @property {date} [startedOn] Migration start time
   * @property {date} [endedOn] Migration end time
   * @property {number} [durationInSeconds] Duration of task execution in
   * seconds.
   * @property {string} [status] Current status of migration. Possible values
   * include: 'Default', 'Connecting', 'SourceAndTargetSelected',
   * 'SelectLogins', 'Configured', 'Running', 'Error', 'Stopped', 'Completed',
   * 'CompletedWithWarnings'
   * @property {string} [statusMessage] Migration status message
   * @property {string} [message] Migration progress message
   * @property {object} [databases] Selected databases as a map from database
   * name to database id
   * @property {object} [databaseSummary] Summary of database results in the
   * migration
   * @property {object} [migrationValidationResult] Migration Validation
   * Results
   * @property {string} [migrationValidationResult.id] Migration validation
   * result identifier
   * @property {string} [migrationValidationResult.migrationId] Migration
   * Identifier
   * @property {object} [migrationValidationResult.summaryResults] Validation
   * summary results for each database
   * @property {string} [migrationValidationResult.status] Current status of
   * validation at the migration level. Status from the database validation
   * result status will be aggregated here. Possible values include: 'Default',
   * 'NotStarted', 'Initialized', 'InProgress', 'Completed',
   * 'CompletedWithIssues', 'Stopped', 'Failed'
   * @property {object} [migrationReportResult] Migration Report Result,
   * provides unique url for downloading your migration report.
   * @property {string} [migrationReportResult.id] Migration validation result
   * identifier
   * @property {string} [migrationReportResult.reportUrl] The url of the
   * report.
   * @property {string} [sourceServerVersion] Source server version
   * @property {string} [sourceServerBrandVersion] Source server brand version
   * @property {string} [targetServerVersion] Target server version
   * @property {string} [targetServerBrandVersion] Target server brand version
   * @property {array} [exceptionsAndWarnings] Migration exceptions and
   * warnings.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of MigrateSqlServerSqlDbTaskOutputMigrationLevel
   *
   * @returns {object} metadata of MigrateSqlServerSqlDbTaskOutputMigrationLevel
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'MigrationLevelOutput',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'resultType',
          clientName: 'resultType'
        },
        uberParent: 'MigrateSqlServerSqlDbTaskOutput',
        className: 'MigrateSqlServerSqlDbTaskOutputMigrationLevel',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          resultType: {
            required: true,
            serializedName: 'resultType',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          startedOn: {
            required: false,
            readOnly: true,
            serializedName: 'startedOn',
            type: {
              name: 'DateTime'
            }
          },
          endedOn: {
            required: false,
            readOnly: true,
            serializedName: 'endedOn',
            type: {
              name: 'DateTime'
            }
          },
          durationInSeconds: {
            required: false,
            readOnly: true,
            serializedName: 'durationInSeconds',
            type: {
              name: 'Number'
            }
          },
          status: {
            required: false,
            readOnly: true,
            serializedName: 'status',
            type: {
              name: 'String'
            }
          },
          statusMessage: {
            required: false,
            readOnly: true,
            serializedName: 'statusMessage',
            type: {
              name: 'String'
            }
          },
          message: {
            required: false,
            readOnly: true,
            serializedName: 'message',
            type: {
              name: 'String'
            }
          },
          databases: {
            required: false,
            readOnly: true,
            serializedName: 'databases',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          databaseSummary: {
            required: false,
            readOnly: true,
            serializedName: 'databaseSummary',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'DatabaseSummaryResultElementType',
                  type: {
                    name: 'Composite',
                    className: 'DatabaseSummaryResult'
                  }
              }
            }
          },
          migrationValidationResult: {
            required: false,
            serializedName: 'migrationValidationResult',
            type: {
              name: 'Composite',
              className: 'MigrationValidationResult'
            }
          },
          migrationReportResult: {
            required: false,
            serializedName: 'migrationReportResult',
            type: {
              name: 'Composite',
              className: 'MigrationReportResult'
            }
          },
          sourceServerVersion: {
            required: false,
            readOnly: true,
            serializedName: 'sourceServerVersion',
            type: {
              name: 'String'
            }
          },
          sourceServerBrandVersion: {
            required: false,
            readOnly: true,
            serializedName: 'sourceServerBrandVersion',
            type: {
              name: 'String'
            }
          },
          targetServerVersion: {
            required: false,
            readOnly: true,
            serializedName: 'targetServerVersion',
            type: {
              name: 'String'
            }
          },
          targetServerBrandVersion: {
            required: false,
            readOnly: true,
            serializedName: 'targetServerBrandVersion',
            type: {
              name: 'String'
            }
          },
          exceptionsAndWarnings: {
            required: false,
            readOnly: true,
            serializedName: 'exceptionsAndWarnings',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ReportableExceptionElementType',
                  type: {
                    name: 'Composite',
                    className: 'ReportableException'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = MigrateSqlServerSqlDbTaskOutputMigrationLevel;
