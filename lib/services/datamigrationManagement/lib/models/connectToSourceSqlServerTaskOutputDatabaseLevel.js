/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Database level output for the task that validates connection to SQL Server
 * and also validates source server requirements
 *
 * @extends models['ConnectToSourceSqlServerTaskOutput']
 */
class ConnectToSourceSqlServerTaskOutputDatabaseLevel extends models['ConnectToSourceSqlServerTaskOutput'] {
  /**
   * Create a ConnectToSourceSqlServerTaskOutputDatabaseLevel.
   * @member {string} [name] Database name
   * @member {number} [sizeMB] Size of the file in megabytes
   * @member {array} [databaseFiles] The list of database files
   * @member {string} [compatibilityLevel] SQL Server compatibility level of
   * database. Possible values include: 'CompatLevel80', 'CompatLevel90',
   * 'CompatLevel100', 'CompatLevel110', 'CompatLevel120', 'CompatLevel130',
   * 'CompatLevel140'
   * @member {string} [databaseState] State of the database. Possible values
   * include: 'Online', 'Restoring', 'Recovering', 'RecoveryPending',
   * 'Suspect', 'Emergency', 'Offline', 'Copying', 'OfflineSecondary'
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ConnectToSourceSqlServerTaskOutputDatabaseLevel
   *
   * @returns {object} metadata of ConnectToSourceSqlServerTaskOutputDatabaseLevel
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DatabaseLevelOutput',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'resultType',
          clientName: 'resultType'
        },
        uberParent: 'ConnectToSourceSqlServerTaskOutput',
        className: 'ConnectToSourceSqlServerTaskOutputDatabaseLevel',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          resultType: {
            required: true,
            serializedName: 'resultType',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          sizeMB: {
            required: false,
            readOnly: true,
            serializedName: 'sizeMB',
            type: {
              name: 'Number'
            }
          },
          databaseFiles: {
            required: false,
            readOnly: true,
            serializedName: 'databaseFiles',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'DatabaseFileInfoElementType',
                  type: {
                    name: 'Composite',
                    className: 'DatabaseFileInfo'
                  }
              }
            }
          },
          compatibilityLevel: {
            required: false,
            readOnly: true,
            serializedName: 'compatibilityLevel',
            type: {
              name: 'String'
            }
          },
          databaseState: {
            required: false,
            readOnly: true,
            serializedName: 'databaseState',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ConnectToSourceSqlServerTaskOutputDatabaseLevel;
