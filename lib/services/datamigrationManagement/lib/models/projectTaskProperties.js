/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Base class for all types of DMS task properties. If task is not supported by
 * current client, this object is returned.
 *
 */
class ProjectTaskProperties {
  /**
   * Create a ProjectTaskProperties.
   * @member {array} [errors] Array of errors. This is ignored if submitted.
   * @member {string} [state] The state of the task. This is ignored if
   * submitted. Possible values include: 'Unknown', 'Queued', 'Running',
   * 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * @member {array} [commands] Array of command properties.
   * @member {string} taskType Polymorphic Discriminator
   */
  constructor() {
  }

  /**
   * Defines the metadata of ProjectTaskProperties
   *
   * @returns {object} metadata of ProjectTaskProperties
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Unknown',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'taskType',
          clientName: 'taskType'
        },
        uberParent: 'ProjectTaskProperties',
        className: 'ProjectTaskProperties',
        modelProperties: {
          errors: {
            required: false,
            readOnly: true,
            serializedName: 'errors',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ODataErrorElementType',
                  type: {
                    name: 'Composite',
                    className: 'ODataError'
                  }
              }
            }
          },
          state: {
            required: false,
            readOnly: true,
            serializedName: 'state',
            type: {
              name: 'String'
            }
          },
          commands: {
            required: false,
            readOnly: true,
            serializedName: 'commands',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'CommandPropertiesElementType',
                  type: {
                    name: 'Composite',
                    polymorphicDiscriminator: {
                      serializedName: 'commandType',
                      clientName: 'commandType'
                    },
                    uberParent: 'CommandProperties',
                    className: 'CommandProperties'
                  }
              }
            }
          },
          taskType: {
            required: true,
            serializedName: 'taskType',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ProjectTaskProperties;
