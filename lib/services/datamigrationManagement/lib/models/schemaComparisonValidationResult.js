/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Results for schema comparison between the source and target
 *
 */
class SchemaComparisonValidationResult {
  /**
   * Create a SchemaComparisonValidationResult.
   * @member {object} [schemaDifferences] List of schema differences between
   * the source and target databases
   * @member {string} [schemaDifferences.objectName] Name of the object that
   * has the difference
   * @member {string} [schemaDifferences.objectType] Type of the object that
   * has the difference. e.g (Table/View/StoredProcedure). Possible values
   * include: 'StoredProcedures', 'Table', 'User', 'View', 'Function'
   * @member {string} [schemaDifferences.updateAction] Update action type with
   * respect to target. Possible values include: 'DeletedOnTarget',
   * 'ChangedOnTarget', 'AddedOnTarget'
   * @member {object} [validationErrors] List of errors that happened while
   * performing schema compare validation
   * @member {string} [validationErrors.text] Error Text
   * @member {string} [validationErrors.severity] Severity of the error.
   * Possible values include: 'Message', 'Warning', 'Error'
   * @member {object} [sourceDatabaseObjectCount] Count of source database
   * objects
   * @member {object} [targetDatabaseObjectCount] Count of target database
   * objects
   */
  constructor() {
  }

  /**
   * Defines the metadata of SchemaComparisonValidationResult
   *
   * @returns {object} metadata of SchemaComparisonValidationResult
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'SchemaComparisonValidationResult',
      type: {
        name: 'Composite',
        className: 'SchemaComparisonValidationResult',
        modelProperties: {
          schemaDifferences: {
            required: false,
            serializedName: 'schemaDifferences',
            type: {
              name: 'Composite',
              className: 'SchemaComparisonValidationResultType'
            }
          },
          validationErrors: {
            required: false,
            serializedName: 'validationErrors',
            type: {
              name: 'Composite',
              className: 'ValidationError'
            }
          },
          sourceDatabaseObjectCount: {
            required: false,
            serializedName: 'sourceDatabaseObjectCount',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'NumberElementType',
                  type: {
                    name: 'Number'
                  }
              }
            }
          },
          targetDatabaseObjectCount: {
            required: false,
            serializedName: 'targetDatabaseObjectCount',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'NumberElementType',
                  type: {
                    name: 'Number'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = SchemaComparisonValidationResult;
