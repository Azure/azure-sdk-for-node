/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Input for the task that validates connection to SQL Server and also
 * validates source server requirements
 *
 */
class ConnectToSourceSqlServerTaskInput {
  /**
   * Create a ConnectToSourceSqlServerTaskInput.
   * @property {object} sourceConnectionInfo Connection information for Source
   * SQL Server
   * @property {string} [sourceConnectionInfo.dataSource] Data source in the
   * format Protocol:MachineName\SQLServerInstanceName,PortNumber
   * @property {string} [sourceConnectionInfo.authentication] Authentication
   * type to use for connection. Possible values include: 'None',
   * 'WindowsAuthentication', 'SqlAuthentication', 'ActiveDirectoryIntegrated',
   * 'ActiveDirectoryPassword'
   * @property {boolean} [sourceConnectionInfo.encryptConnection] Whether to
   * encrypt the connection
   * @property {string} [sourceConnectionInfo.additionalSettings] Additional
   * connection settings
   * @property {boolean} [sourceConnectionInfo.trustServerCertificate] Whether
   * to trust the server certificate
   * @property {string} [sourceConnectionInfo.platform] Server platform type
   * for connection. Possible values include: 'SqlOnPrem'
   * @property {string} [checkPermissionsGroup] Permission group for
   * validations. Possible values include: 'Default',
   * 'MigrationFromSqlServerToAzureDB', 'MigrationFromSqlServerToAzureMI',
   * 'MigrationFromMySQLToAzureDBForMySQL'
   * @property {boolean} [collectLogins] Flag for whether to collect logins
   * from source server. Default value: false .
   * @property {boolean} [collectAgentJobs] Flag for whether to collect agent
   * jobs from source server. Default value: false .
   * @property {boolean} [collectTdeCertificateInfo] Flag for whether to
   * collect TDE Certificate names from source server. Default value: false .
   */
  constructor() {
  }

  /**
   * Defines the metadata of ConnectToSourceSqlServerTaskInput
   *
   * @returns {object} metadata of ConnectToSourceSqlServerTaskInput
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ConnectToSourceSqlServerTaskInput',
      type: {
        name: 'Composite',
        className: 'ConnectToSourceSqlServerTaskInput',
        modelProperties: {
          sourceConnectionInfo: {
            required: true,
            serializedName: 'sourceConnectionInfo',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: 'type',
                clientName: 'type'
              },
              uberParent: 'ConnectionInfo',
              className: 'SqlConnectionInfo'
            }
          },
          checkPermissionsGroup: {
            required: false,
            serializedName: 'checkPermissionsGroup',
            type: {
              name: 'String'
            }
          },
          collectLogins: {
            required: false,
            serializedName: 'collectLogins',
            defaultValue: false,
            type: {
              name: 'Boolean'
            }
          },
          collectAgentJobs: {
            required: false,
            serializedName: 'collectAgentJobs',
            defaultValue: false,
            type: {
              name: 'Boolean'
            }
          },
          collectTdeCertificateInfo: {
            required: false,
            serializedName: 'collectTdeCertificateInfo',
            defaultValue: false,
            type: {
              name: 'Boolean'
            }
          }
        }
      }
    };
  }
}

module.exports = ConnectToSourceSqlServerTaskInput;
