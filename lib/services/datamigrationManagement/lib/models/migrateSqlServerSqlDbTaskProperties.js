/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Properties for the task that migrates on-prem SQL Server databases to Azure
 * SQL Database
 *
 * @extends models['ProjectTaskProperties']
 */
class MigrateSqlServerSqlDbTaskProperties extends models['ProjectTaskProperties'] {
  /**
   * Create a MigrateSqlServerSqlDbTaskProperties.
   * @property {object} [input] Task input
   * @property {array} [input.selectedDatabases] Databases to migrate
   * @property {object} [input.validationOptions] Options for enabling various
   * post migration validations. Available options,
   * 1.) Data Integrity Check: Performs a checksum based comparison on source
   * and target tables after the migration to ensure the correctness of the
   * data.
   * 2.) Schema Validation: Performs a thorough schema comparison between the
   * source and target tables and provides a list of differences between the
   * source and target database, 3.) Query Analysis: Executes a set of queries
   * picked up automatically either from the Query Plan Cache or Query Store
   * and execute them and compares the execution time between the source and
   * target database.
   * @property {boolean} [input.validationOptions.enableSchemaValidation]
   * Allows to compare the schema information between source and target.
   * @property {boolean}
   * [input.validationOptions.enableDataIntegrityValidation] Allows to perform
   * a checksum based data integrity validation between source and target for
   * the selected database / tables .
   * @property {boolean}
   * [input.validationOptions.enableQueryAnalysisValidation] Allows to perform
   * a quick and intelligent query analysis by retrieving queries from the
   * source database and executes them in the target. The result will have
   * execution statistics for executions in source and target databases for the
   * extracted queries.
   * @property {array} [output] Task output. This is ignored if submitted.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of MigrateSqlServerSqlDbTaskProperties
   *
   * @returns {object} metadata of MigrateSqlServerSqlDbTaskProperties
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Migrate.SqlServer.SqlDb',
      type: {
        name: 'Composite',
        polymorphicDiscriminator: {
          serializedName: 'taskType',
          clientName: 'taskType'
        },
        uberParent: 'ProjectTaskProperties',
        className: 'MigrateSqlServerSqlDbTaskProperties',
        modelProperties: {
          errors: {
            required: false,
            readOnly: true,
            serializedName: 'errors',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ODataErrorElementType',
                  type: {
                    name: 'Composite',
                    className: 'ODataError'
                  }
              }
            }
          },
          state: {
            required: false,
            readOnly: true,
            serializedName: 'state',
            type: {
              name: 'String'
            }
          },
          commands: {
            required: false,
            readOnly: true,
            serializedName: 'commands',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'CommandPropertiesElementType',
                  type: {
                    name: 'Composite',
                    polymorphicDiscriminator: {
                      serializedName: 'commandType',
                      clientName: 'commandType'
                    },
                    uberParent: 'CommandProperties',
                    className: 'CommandProperties'
                  }
              }
            }
          },
          clientData: {
            required: false,
            serializedName: 'clientData',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          taskType: {
            required: true,
            serializedName: 'taskType',
            isPolymorphicDiscriminator: true,
            type: {
              name: 'String'
            }
          },
          input: {
            required: false,
            serializedName: 'input',
            type: {
              name: 'Composite',
              className: 'MigrateSqlServerSqlDbTaskInput'
            }
          },
          output: {
            required: false,
            readOnly: true,
            serializedName: 'output',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'MigrateSqlServerSqlDbTaskOutputElementType',
                  type: {
                    name: 'Composite',
                    polymorphicDiscriminator: {
                      serializedName: 'resultType',
                      clientName: 'resultType'
                    },
                    uberParent: 'MigrateSqlServerSqlDbTaskOutput',
                    className: 'MigrateSqlServerSqlDbTaskOutput'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = MigrateSqlServerSqlDbTaskProperties;
