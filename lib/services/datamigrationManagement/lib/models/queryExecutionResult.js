/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Describes query analysis results for execution in source and target
 *
 */
class QueryExecutionResult {
  /**
   * Create a QueryExecutionResult.
   * @member {string} [queryText] Query text retrieved from the source server
   * @member {number} [statementsInBatch] Total no. of statements in the batch
   * @member {object} [sourceResult] Query analysis result from the source
   * @member {number} [sourceResult.executionCount] No. of query executions
   * @member {number} [sourceResult.cpuTimeMs] CPU Time in millisecond(s) for
   * the query execution
   * @member {number} [sourceResult.elapsedTimeMs] Time taken in millisecond(s)
   * for executing the query
   * @member {object} [sourceResult.waitStats] Dictionary of sql query
   * execution wait types and the respective statistics
   * @member {boolean} [sourceResult.hasErrors] Indicates whether the query
   * resulted in an error
   * @member {array} [sourceResult.sqlErrors] List of sql Errors
   * @member {object} [targetResult] Query analysis result from the target
   * @member {number} [targetResult.executionCount] No. of query executions
   * @member {number} [targetResult.cpuTimeMs] CPU Time in millisecond(s) for
   * the query execution
   * @member {number} [targetResult.elapsedTimeMs] Time taken in millisecond(s)
   * for executing the query
   * @member {object} [targetResult.waitStats] Dictionary of sql query
   * execution wait types and the respective statistics
   * @member {boolean} [targetResult.hasErrors] Indicates whether the query
   * resulted in an error
   * @member {array} [targetResult.sqlErrors] List of sql Errors
   */
  constructor() {
  }

  /**
   * Defines the metadata of QueryExecutionResult
   *
   * @returns {object} metadata of QueryExecutionResult
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'QueryExecutionResult',
      type: {
        name: 'Composite',
        className: 'QueryExecutionResult',
        modelProperties: {
          queryText: {
            required: false,
            serializedName: 'queryText',
            type: {
              name: 'String'
            }
          },
          statementsInBatch: {
            required: false,
            serializedName: 'statementsInBatch',
            type: {
              name: 'Number'
            }
          },
          sourceResult: {
            required: false,
            serializedName: 'sourceResult',
            type: {
              name: 'Composite',
              className: 'ExecutionStatistics'
            }
          },
          targetResult: {
            required: false,
            serializedName: 'targetResult',
            type: {
              name: 'Composite',
              className: 'ExecutionStatistics'
            }
          }
        }
      }
    };
  }
}

module.exports = QueryExecutionResult;
