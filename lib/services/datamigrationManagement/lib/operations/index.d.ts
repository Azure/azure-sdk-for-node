/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * ResourceSkus
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataMigrationServiceClient.
 */
export interface ResourceSkus {


    /**
     * @summary Get supported SKUs
     *
     * The skus action returns the list of SKUs that DMS supports.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceSkusResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSkusWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceSkusResult>>;

    /**
     * @summary Get supported SKUs
     *
     * The skus action returns the list of SKUs that DMS supports.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceSkusResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceSkusResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceSkusResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSkus(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceSkusResult>;
    listSkus(callback: ServiceCallback<models.ResourceSkusResult>): void;
    listSkus(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceSkusResult>): void;


    /**
     * @summary Get supported SKUs
     *
     * The skus action returns the list of SKUs that DMS supports.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResourceSkusResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSkusNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResourceSkusResult>>;

    /**
     * @summary Get supported SKUs
     *
     * The skus action returns the list of SKUs that DMS supports.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResourceSkusResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResourceSkusResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResourceSkusResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSkusNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResourceSkusResult>;
    listSkusNext(nextPageLink: string, callback: ServiceCallback<models.ResourceSkusResult>): void;
    listSkusNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResourceSkusResult>): void;
}

/**
 * @class
 * Services
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataMigrationServiceClient.
 */
export interface Services {


    /**
     * @summary Create or update DMS Instance
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. The PUT method creates a new service or updates an
     * existing one. When a service is updated, existing child resources (i.e.
     * tasks) are unaffected. Services currently support a single kind, "vm", which
     * refers to a VM-based service, although other kinds may be added in the
     * future. This method can change the kind, SKU, and network of the service,
     * but if tasks are currently running (i.e. the service is busy), this will
     * fail with 400 Bad Request ("ServiceIsBusy"). The provider will reply when
     * successful with 200 OK or 201 Created. Long-running operations use the
     * provisioningState property.
     *
     * @param {object} parameters Information about the service
     *
     * @param {string} [parameters.etag] HTTP strong entity tag value. Ignored if
     * submitted
     *
     * @param {string} [parameters.kind] The resource kind. Only 'vm' (the default)
     * is supported.
     *
     * @param {string} [parameters.publicKey] The public key of the service, used
     * to encrypt secrets sent to the service
     *
     * @param {string} parameters.virtualSubnetId The ID of the
     * Microsoft.Network/virtualNetworks/subnets resource to which the service
     * should be joined
     *
     * @param {object} [parameters.sku] Service SKU
     *
     * @param {string} [parameters.sku.name] The unique name of the SKU, such as
     * 'P3'
     *
     * @param {string} [parameters.sku.tier] The tier of the SKU, such as 'Basic',
     * 'General Purpose', or 'Business Critical'
     *
     * @param {string} [parameters.sku.family] The SKU family, used when the
     * service has multiple performance classes within a tier, such as 'A', 'D',
     * etc. for virtual machines
     *
     * @param {string} [parameters.sku.size] The size of the SKU, used when the
     * name alone does not denote a service size or when a SKU has multiple
     * performance classes within a family, e.g. 'A1' for virtual machines
     *
     * @param {number} [parameters.sku.capacity] The capacity of the SKU, if it
     * supports scaling
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataMigrationService>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(parameters: models.DataMigrationService, groupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataMigrationService>>;

    /**
     * @summary Create or update DMS Instance
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. The PUT method creates a new service or updates an
     * existing one. When a service is updated, existing child resources (i.e.
     * tasks) are unaffected. Services currently support a single kind, "vm", which
     * refers to a VM-based service, although other kinds may be added in the
     * future. This method can change the kind, SKU, and network of the service,
     * but if tasks are currently running (i.e. the service is busy), this will
     * fail with 400 Bad Request ("ServiceIsBusy"). The provider will reply when
     * successful with 200 OK or 201 Created. Long-running operations use the
     * provisioningState property.
     *
     * @param {object} parameters Information about the service
     *
     * @param {string} [parameters.etag] HTTP strong entity tag value. Ignored if
     * submitted
     *
     * @param {string} [parameters.kind] The resource kind. Only 'vm' (the default)
     * is supported.
     *
     * @param {string} [parameters.publicKey] The public key of the service, used
     * to encrypt secrets sent to the service
     *
     * @param {string} parameters.virtualSubnetId The ID of the
     * Microsoft.Network/virtualNetworks/subnets resource to which the service
     * should be joined
     *
     * @param {object} [parameters.sku] Service SKU
     *
     * @param {string} [parameters.sku.name] The unique name of the SKU, such as
     * 'P3'
     *
     * @param {string} [parameters.sku.tier] The tier of the SKU, such as 'Basic',
     * 'General Purpose', or 'Business Critical'
     *
     * @param {string} [parameters.sku.family] The SKU family, used when the
     * service has multiple performance classes within a tier, such as 'A', 'D',
     * etc. for virtual machines
     *
     * @param {string} [parameters.sku.size] The size of the SKU, used when the
     * name alone does not denote a service size or when a SKU has multiple
     * performance classes within a family, e.g. 'A1' for virtual machines
     *
     * @param {number} [parameters.sku.capacity] The capacity of the SKU, if it
     * supports scaling
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataMigrationService} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataMigrationService} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataMigrationService} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(parameters: models.DataMigrationService, groupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataMigrationService>;
    createOrUpdate(parameters: models.DataMigrationService, groupName: string, serviceName: string, callback: ServiceCallback<models.DataMigrationService>): void;
    createOrUpdate(parameters: models.DataMigrationService, groupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataMigrationService>): void;


    /**
     * @summary Get DMS Service Instance
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. The GET method retrieves information about a service
     * instance.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataMigrationService>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(groupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataMigrationService>>;

    /**
     * @summary Get DMS Service Instance
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. The GET method retrieves information about a service
     * instance.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataMigrationService} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataMigrationService} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataMigrationService} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(groupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataMigrationService>;
    get(groupName: string, serviceName: string, callback: ServiceCallback<models.DataMigrationService>): void;
    get(groupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataMigrationService>): void;


    /**
     * @summary Delete DMS Service Instance
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. The DELETE method deletes a service. Any running tasks
     * will be canceled.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.deleteRunningTasks] Delete the resource even if it
     * contains running tasks
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(groupName: string, serviceName: string, options?: { deleteRunningTasks? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete DMS Service Instance
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. The DELETE method deletes a service. Any running tasks
     * will be canceled.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.deleteRunningTasks] Delete the resource even if it
     * contains running tasks
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(groupName: string, serviceName: string, options?: { deleteRunningTasks? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(groupName: string, serviceName: string, callback: ServiceCallback<void>): void;
    deleteMethod(groupName: string, serviceName: string, options: { deleteRunningTasks? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Create or update DMS Service Instance
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. The PATCH method updates an existing service. This method
     * can change the kind, SKU, and network of the service, but if tasks are
     * currently running (i.e. the service is busy), this will fail with 400 Bad
     * Request ("ServiceIsBusy").
     *
     * @param {object} parameters Information about the service
     *
     * @param {string} [parameters.etag] HTTP strong entity tag value. Ignored if
     * submitted
     *
     * @param {string} [parameters.kind] The resource kind. Only 'vm' (the default)
     * is supported.
     *
     * @param {string} [parameters.publicKey] The public key of the service, used
     * to encrypt secrets sent to the service
     *
     * @param {string} parameters.virtualSubnetId The ID of the
     * Microsoft.Network/virtualNetworks/subnets resource to which the service
     * should be joined
     *
     * @param {object} [parameters.sku] Service SKU
     *
     * @param {string} [parameters.sku.name] The unique name of the SKU, such as
     * 'P3'
     *
     * @param {string} [parameters.sku.tier] The tier of the SKU, such as 'Basic',
     * 'General Purpose', or 'Business Critical'
     *
     * @param {string} [parameters.sku.family] The SKU family, used when the
     * service has multiple performance classes within a tier, such as 'A', 'D',
     * etc. for virtual machines
     *
     * @param {string} [parameters.sku.size] The size of the SKU, used when the
     * name alone does not denote a service size or when a SKU has multiple
     * performance classes within a family, e.g. 'A1' for virtual machines
     *
     * @param {number} [parameters.sku.capacity] The capacity of the SKU, if it
     * supports scaling
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataMigrationService>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(parameters: models.DataMigrationService, groupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataMigrationService>>;

    /**
     * @summary Create or update DMS Service Instance
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. The PATCH method updates an existing service. This method
     * can change the kind, SKU, and network of the service, but if tasks are
     * currently running (i.e. the service is busy), this will fail with 400 Bad
     * Request ("ServiceIsBusy").
     *
     * @param {object} parameters Information about the service
     *
     * @param {string} [parameters.etag] HTTP strong entity tag value. Ignored if
     * submitted
     *
     * @param {string} [parameters.kind] The resource kind. Only 'vm' (the default)
     * is supported.
     *
     * @param {string} [parameters.publicKey] The public key of the service, used
     * to encrypt secrets sent to the service
     *
     * @param {string} parameters.virtualSubnetId The ID of the
     * Microsoft.Network/virtualNetworks/subnets resource to which the service
     * should be joined
     *
     * @param {object} [parameters.sku] Service SKU
     *
     * @param {string} [parameters.sku.name] The unique name of the SKU, such as
     * 'P3'
     *
     * @param {string} [parameters.sku.tier] The tier of the SKU, such as 'Basic',
     * 'General Purpose', or 'Business Critical'
     *
     * @param {string} [parameters.sku.family] The SKU family, used when the
     * service has multiple performance classes within a tier, such as 'A', 'D',
     * etc. for virtual machines
     *
     * @param {string} [parameters.sku.size] The size of the SKU, used when the
     * name alone does not denote a service size or when a SKU has multiple
     * performance classes within a family, e.g. 'A1' for virtual machines
     *
     * @param {number} [parameters.sku.capacity] The capacity of the SKU, if it
     * supports scaling
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataMigrationService} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataMigrationService} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataMigrationService} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(parameters: models.DataMigrationService, groupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataMigrationService>;
    update(parameters: models.DataMigrationService, groupName: string, serviceName: string, callback: ServiceCallback<models.DataMigrationService>): void;
    update(parameters: models.DataMigrationService, groupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataMigrationService>): void;


    /**
     * @summary Check service health status
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. This action performs a health check and returns the
     * status of the service and virtual machine size.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataMigrationServiceStatusResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkStatusWithHttpOperationResponse(groupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataMigrationServiceStatusResponse>>;

    /**
     * @summary Check service health status
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. This action performs a health check and returns the
     * status of the service and virtual machine size.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataMigrationServiceStatusResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataMigrationServiceStatusResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataMigrationServiceStatusResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkStatus(groupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataMigrationServiceStatusResponse>;
    checkStatus(groupName: string, serviceName: string, callback: ServiceCallback<models.DataMigrationServiceStatusResponse>): void;
    checkStatus(groupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataMigrationServiceStatusResponse>): void;


    /**
     * @summary Start service
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. This action starts the service and the service can be
     * used for data migration.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    startWithHttpOperationResponse(groupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Start service
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. This action starts the service and the service can be
     * used for data migration.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    start(groupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    start(groupName: string, serviceName: string, callback: ServiceCallback<void>): void;
    start(groupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Stop service
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. This action stops the service and the service cannot be
     * used for data migration. The service owner won't be billed when the service
     * is stopped.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    stopWithHttpOperationResponse(groupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Stop service
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. This action stops the service and the service cannot be
     * used for data migration. The service owner won't be billed when the service
     * is stopped.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    stop(groupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    stop(groupName: string, serviceName: string, callback: ServiceCallback<void>): void;
    stop(groupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Get compatible SKUs
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. The skus action returns the list of SKUs that a service
     * resource can be updated to.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceSkuList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSkusWithHttpOperationResponse(groupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceSkuList>>;

    /**
     * @summary Get compatible SKUs
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. The skus action returns the list of SKUs that a service
     * resource can be updated to.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceSkuList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceSkuList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceSkuList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSkus(groupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceSkuList>;
    listSkus(groupName: string, serviceName: string, callback: ServiceCallback<models.ServiceSkuList>): void;
    listSkus(groupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceSkuList>): void;


    /**
     * @summary Check nested resource name validity and availability
     *
     * This method checks whether a proposed nested resource name is valid and
     * available.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {object} parameters Requested name to validate
     *
     * @param {string} [parameters.name] The proposed resource name
     *
     * @param {string} [parameters.type] The resource type chain (e.g.
     * virtualMachines/extensions)
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NameAvailabilityResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkChildrenNameAvailabilityWithHttpOperationResponse(groupName: string, serviceName: string, parameters: models.NameAvailabilityRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NameAvailabilityResponse>>;

    /**
     * @summary Check nested resource name validity and availability
     *
     * This method checks whether a proposed nested resource name is valid and
     * available.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {object} parameters Requested name to validate
     *
     * @param {string} [parameters.name] The proposed resource name
     *
     * @param {string} [parameters.type] The resource type chain (e.g.
     * virtualMachines/extensions)
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NameAvailabilityResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NameAvailabilityResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NameAvailabilityResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkChildrenNameAvailability(groupName: string, serviceName: string, parameters: models.NameAvailabilityRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NameAvailabilityResponse>;
    checkChildrenNameAvailability(groupName: string, serviceName: string, parameters: models.NameAvailabilityRequest, callback: ServiceCallback<models.NameAvailabilityResponse>): void;
    checkChildrenNameAvailability(groupName: string, serviceName: string, parameters: models.NameAvailabilityRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NameAvailabilityResponse>): void;


    /**
     * @summary Get services in resource group
     *
     * The Services resource is the top-level resource that represents the Database
     * Migration Service. This method returns a list of service resources in a
     * resource group.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataMigrationServiceList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(groupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataMigrationServiceList>>;

    /**
     * @summary Get services in resource group
     *
     * The Services resource is the top-level resource that represents the Database
     * Migration Service. This method returns a list of service resources in a
     * resource group.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataMigrationServiceList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataMigrationServiceList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataMigrationServiceList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(groupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataMigrationServiceList>;
    listByResourceGroup(groupName: string, callback: ServiceCallback<models.DataMigrationServiceList>): void;
    listByResourceGroup(groupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataMigrationServiceList>): void;


    /**
     * @summary Get services in subscription
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. This method returns a list of service resources in a
     * subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataMigrationServiceList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataMigrationServiceList>>;

    /**
     * @summary Get services in subscription
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. This method returns a list of service resources in a
     * subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataMigrationServiceList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataMigrationServiceList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataMigrationServiceList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataMigrationServiceList>;
    list(callback: ServiceCallback<models.DataMigrationServiceList>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataMigrationServiceList>): void;


    /**
     * @summary Check name validity and availability
     *
     * This method checks whether a proposed top-level resource name is valid and
     * available.
     *
     * @param {string} location The Azure region of the operation
     *
     * @param {object} parameters Requested name to validate
     *
     * @param {string} [parameters.name] The proposed resource name
     *
     * @param {string} [parameters.type] The resource type chain (e.g.
     * virtualMachines/extensions)
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NameAvailabilityResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    checkNameAvailabilityWithHttpOperationResponse(location: string, parameters: models.NameAvailabilityRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NameAvailabilityResponse>>;

    /**
     * @summary Check name validity and availability
     *
     * This method checks whether a proposed top-level resource name is valid and
     * available.
     *
     * @param {string} location The Azure region of the operation
     *
     * @param {object} parameters Requested name to validate
     *
     * @param {string} [parameters.name] The proposed resource name
     *
     * @param {string} [parameters.type] The resource type chain (e.g.
     * virtualMachines/extensions)
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NameAvailabilityResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NameAvailabilityResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NameAvailabilityResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    checkNameAvailability(location: string, parameters: models.NameAvailabilityRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NameAvailabilityResponse>;
    checkNameAvailability(location: string, parameters: models.NameAvailabilityRequest, callback: ServiceCallback<models.NameAvailabilityResponse>): void;
    checkNameAvailability(location: string, parameters: models.NameAvailabilityRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NameAvailabilityResponse>): void;


    /**
     * @summary Create or update DMS Instance
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. The PUT method creates a new service or updates an
     * existing one. When a service is updated, existing child resources (i.e.
     * tasks) are unaffected. Services currently support a single kind, "vm", which
     * refers to a VM-based service, although other kinds may be added in the
     * future. This method can change the kind, SKU, and network of the service,
     * but if tasks are currently running (i.e. the service is busy), this will
     * fail with 400 Bad Request ("ServiceIsBusy"). The provider will reply when
     * successful with 200 OK or 201 Created. Long-running operations use the
     * provisioningState property.
     *
     * @param {object} parameters Information about the service
     *
     * @param {string} [parameters.etag] HTTP strong entity tag value. Ignored if
     * submitted
     *
     * @param {string} [parameters.kind] The resource kind. Only 'vm' (the default)
     * is supported.
     *
     * @param {string} [parameters.publicKey] The public key of the service, used
     * to encrypt secrets sent to the service
     *
     * @param {string} parameters.virtualSubnetId The ID of the
     * Microsoft.Network/virtualNetworks/subnets resource to which the service
     * should be joined
     *
     * @param {object} [parameters.sku] Service SKU
     *
     * @param {string} [parameters.sku.name] The unique name of the SKU, such as
     * 'P3'
     *
     * @param {string} [parameters.sku.tier] The tier of the SKU, such as 'Basic',
     * 'General Purpose', or 'Business Critical'
     *
     * @param {string} [parameters.sku.family] The SKU family, used when the
     * service has multiple performance classes within a tier, such as 'A', 'D',
     * etc. for virtual machines
     *
     * @param {string} [parameters.sku.size] The size of the SKU, used when the
     * name alone does not denote a service size or when a SKU has multiple
     * performance classes within a family, e.g. 'A1' for virtual machines
     *
     * @param {number} [parameters.sku.capacity] The capacity of the SKU, if it
     * supports scaling
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataMigrationService>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(parameters: models.DataMigrationService, groupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataMigrationService>>;

    /**
     * @summary Create or update DMS Instance
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. The PUT method creates a new service or updates an
     * existing one. When a service is updated, existing child resources (i.e.
     * tasks) are unaffected. Services currently support a single kind, "vm", which
     * refers to a VM-based service, although other kinds may be added in the
     * future. This method can change the kind, SKU, and network of the service,
     * but if tasks are currently running (i.e. the service is busy), this will
     * fail with 400 Bad Request ("ServiceIsBusy"). The provider will reply when
     * successful with 200 OK or 201 Created. Long-running operations use the
     * provisioningState property.
     *
     * @param {object} parameters Information about the service
     *
     * @param {string} [parameters.etag] HTTP strong entity tag value. Ignored if
     * submitted
     *
     * @param {string} [parameters.kind] The resource kind. Only 'vm' (the default)
     * is supported.
     *
     * @param {string} [parameters.publicKey] The public key of the service, used
     * to encrypt secrets sent to the service
     *
     * @param {string} parameters.virtualSubnetId The ID of the
     * Microsoft.Network/virtualNetworks/subnets resource to which the service
     * should be joined
     *
     * @param {object} [parameters.sku] Service SKU
     *
     * @param {string} [parameters.sku.name] The unique name of the SKU, such as
     * 'P3'
     *
     * @param {string} [parameters.sku.tier] The tier of the SKU, such as 'Basic',
     * 'General Purpose', or 'Business Critical'
     *
     * @param {string} [parameters.sku.family] The SKU family, used when the
     * service has multiple performance classes within a tier, such as 'A', 'D',
     * etc. for virtual machines
     *
     * @param {string} [parameters.sku.size] The size of the SKU, used when the
     * name alone does not denote a service size or when a SKU has multiple
     * performance classes within a family, e.g. 'A1' for virtual machines
     *
     * @param {number} [parameters.sku.capacity] The capacity of the SKU, if it
     * supports scaling
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataMigrationService} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataMigrationService} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataMigrationService} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(parameters: models.DataMigrationService, groupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataMigrationService>;
    beginCreateOrUpdate(parameters: models.DataMigrationService, groupName: string, serviceName: string, callback: ServiceCallback<models.DataMigrationService>): void;
    beginCreateOrUpdate(parameters: models.DataMigrationService, groupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataMigrationService>): void;


    /**
     * @summary Delete DMS Service Instance
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. The DELETE method deletes a service. Any running tasks
     * will be canceled.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.deleteRunningTasks] Delete the resource even if it
     * contains running tasks
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(groupName: string, serviceName: string, options?: { deleteRunningTasks? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete DMS Service Instance
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. The DELETE method deletes a service. Any running tasks
     * will be canceled.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.deleteRunningTasks] Delete the resource even if it
     * contains running tasks
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(groupName: string, serviceName: string, options?: { deleteRunningTasks? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(groupName: string, serviceName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(groupName: string, serviceName: string, options: { deleteRunningTasks? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Create or update DMS Service Instance
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. The PATCH method updates an existing service. This method
     * can change the kind, SKU, and network of the service, but if tasks are
     * currently running (i.e. the service is busy), this will fail with 400 Bad
     * Request ("ServiceIsBusy").
     *
     * @param {object} parameters Information about the service
     *
     * @param {string} [parameters.etag] HTTP strong entity tag value. Ignored if
     * submitted
     *
     * @param {string} [parameters.kind] The resource kind. Only 'vm' (the default)
     * is supported.
     *
     * @param {string} [parameters.publicKey] The public key of the service, used
     * to encrypt secrets sent to the service
     *
     * @param {string} parameters.virtualSubnetId The ID of the
     * Microsoft.Network/virtualNetworks/subnets resource to which the service
     * should be joined
     *
     * @param {object} [parameters.sku] Service SKU
     *
     * @param {string} [parameters.sku.name] The unique name of the SKU, such as
     * 'P3'
     *
     * @param {string} [parameters.sku.tier] The tier of the SKU, such as 'Basic',
     * 'General Purpose', or 'Business Critical'
     *
     * @param {string} [parameters.sku.family] The SKU family, used when the
     * service has multiple performance classes within a tier, such as 'A', 'D',
     * etc. for virtual machines
     *
     * @param {string} [parameters.sku.size] The size of the SKU, used when the
     * name alone does not denote a service size or when a SKU has multiple
     * performance classes within a family, e.g. 'A1' for virtual machines
     *
     * @param {number} [parameters.sku.capacity] The capacity of the SKU, if it
     * supports scaling
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataMigrationService>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(parameters: models.DataMigrationService, groupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataMigrationService>>;

    /**
     * @summary Create or update DMS Service Instance
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. The PATCH method updates an existing service. This method
     * can change the kind, SKU, and network of the service, but if tasks are
     * currently running (i.e. the service is busy), this will fail with 400 Bad
     * Request ("ServiceIsBusy").
     *
     * @param {object} parameters Information about the service
     *
     * @param {string} [parameters.etag] HTTP strong entity tag value. Ignored if
     * submitted
     *
     * @param {string} [parameters.kind] The resource kind. Only 'vm' (the default)
     * is supported.
     *
     * @param {string} [parameters.publicKey] The public key of the service, used
     * to encrypt secrets sent to the service
     *
     * @param {string} parameters.virtualSubnetId The ID of the
     * Microsoft.Network/virtualNetworks/subnets resource to which the service
     * should be joined
     *
     * @param {object} [parameters.sku] Service SKU
     *
     * @param {string} [parameters.sku.name] The unique name of the SKU, such as
     * 'P3'
     *
     * @param {string} [parameters.sku.tier] The tier of the SKU, such as 'Basic',
     * 'General Purpose', or 'Business Critical'
     *
     * @param {string} [parameters.sku.family] The SKU family, used when the
     * service has multiple performance classes within a tier, such as 'A', 'D',
     * etc. for virtual machines
     *
     * @param {string} [parameters.sku.size] The size of the SKU, used when the
     * name alone does not denote a service size or when a SKU has multiple
     * performance classes within a family, e.g. 'A1' for virtual machines
     *
     * @param {number} [parameters.sku.capacity] The capacity of the SKU, if it
     * supports scaling
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataMigrationService} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataMigrationService} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataMigrationService} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(parameters: models.DataMigrationService, groupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataMigrationService>;
    beginUpdate(parameters: models.DataMigrationService, groupName: string, serviceName: string, callback: ServiceCallback<models.DataMigrationService>): void;
    beginUpdate(parameters: models.DataMigrationService, groupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataMigrationService>): void;


    /**
     * @summary Start service
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. This action starts the service and the service can be
     * used for data migration.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginStartWithHttpOperationResponse(groupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Start service
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. This action starts the service and the service can be
     * used for data migration.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginStart(groupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginStart(groupName: string, serviceName: string, callback: ServiceCallback<void>): void;
    beginStart(groupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Stop service
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. This action stops the service and the service cannot be
     * used for data migration. The service owner won't be billed when the service
     * is stopped.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginStopWithHttpOperationResponse(groupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Stop service
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. This action stops the service and the service cannot be
     * used for data migration. The service owner won't be billed when the service
     * is stopped.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginStop(groupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginStop(groupName: string, serviceName: string, callback: ServiceCallback<void>): void;
    beginStop(groupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Get compatible SKUs
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. The skus action returns the list of SKUs that a service
     * resource can be updated to.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceSkuList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSkusNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceSkuList>>;

    /**
     * @summary Get compatible SKUs
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. The skus action returns the list of SKUs that a service
     * resource can be updated to.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceSkuList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceSkuList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceSkuList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listSkusNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceSkuList>;
    listSkusNext(nextPageLink: string, callback: ServiceCallback<models.ServiceSkuList>): void;
    listSkusNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceSkuList>): void;


    /**
     * @summary Get services in resource group
     *
     * The Services resource is the top-level resource that represents the Database
     * Migration Service. This method returns a list of service resources in a
     * resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataMigrationServiceList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataMigrationServiceList>>;

    /**
     * @summary Get services in resource group
     *
     * The Services resource is the top-level resource that represents the Database
     * Migration Service. This method returns a list of service resources in a
     * resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataMigrationServiceList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataMigrationServiceList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataMigrationServiceList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataMigrationServiceList>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.DataMigrationServiceList>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataMigrationServiceList>): void;


    /**
     * @summary Get services in subscription
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. This method returns a list of service resources in a
     * subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DataMigrationServiceList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DataMigrationServiceList>>;

    /**
     * @summary Get services in subscription
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. This method returns a list of service resources in a
     * subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DataMigrationServiceList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DataMigrationServiceList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DataMigrationServiceList} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DataMigrationServiceList>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.DataMigrationServiceList>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DataMigrationServiceList>): void;
}

/**
 * @class
 * Tasks
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataMigrationServiceClient.
 */
export interface Tasks {


    /**
     * @summary Get tasks in a service
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. This method returns a list of tasks owned by a service
     * resource. Some tasks may have a status of Unknown, which indicates that an
     * error occurred while querying the status of that task.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.taskType] Filter tasks by task type
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TaskList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(groupName: string, serviceName: string, projectName: string, options?: { taskType? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TaskList>>;

    /**
     * @summary Get tasks in a service
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. This method returns a list of tasks owned by a service
     * resource. Some tasks may have a status of Unknown, which indicates that an
     * error occurred while querying the status of that task.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.taskType] Filter tasks by task type
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TaskList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TaskList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TaskList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(groupName: string, serviceName: string, projectName: string, options?: { taskType? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.TaskList>;
    list(groupName: string, serviceName: string, projectName: string, callback: ServiceCallback<models.TaskList>): void;
    list(groupName: string, serviceName: string, projectName: string, options: { taskType? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TaskList>): void;


    /**
     * @summary Create or update task
     *
     * The tasks resource is a nested, proxy-only resource representing work
     * performed by a DMS instance. The PUT method creates a new task or updates an
     * existing one, although since tasks have no mutable custom properties, there
     * is little reason to update an existing one.
     *
     * @param {object} parameters Information about the task
     *
     * @param {string} [parameters.etag] HTTP strong entity tag value. This is
     * ignored if submitted.
     *
     * @param {object} [parameters.properties] Custom task properties
     *
     * @param {object} [parameters.properties.clientData] Key value pairs of client
     * data to attach meta data information to task
     *
     * @param {string} parameters.properties.taskType Polymorphic Discriminator
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {string} taskName Name of the Task
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProjectTask>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(parameters: models.ProjectTask, groupName: string, serviceName: string, projectName: string, taskName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProjectTask>>;

    /**
     * @summary Create or update task
     *
     * The tasks resource is a nested, proxy-only resource representing work
     * performed by a DMS instance. The PUT method creates a new task or updates an
     * existing one, although since tasks have no mutable custom properties, there
     * is little reason to update an existing one.
     *
     * @param {object} parameters Information about the task
     *
     * @param {string} [parameters.etag] HTTP strong entity tag value. This is
     * ignored if submitted.
     *
     * @param {object} [parameters.properties] Custom task properties
     *
     * @param {object} [parameters.properties.clientData] Key value pairs of client
     * data to attach meta data information to task
     *
     * @param {string} parameters.properties.taskType Polymorphic Discriminator
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {string} taskName Name of the Task
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProjectTask} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProjectTask} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProjectTask} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(parameters: models.ProjectTask, groupName: string, serviceName: string, projectName: string, taskName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProjectTask>;
    createOrUpdate(parameters: models.ProjectTask, groupName: string, serviceName: string, projectName: string, taskName: string, callback: ServiceCallback<models.ProjectTask>): void;
    createOrUpdate(parameters: models.ProjectTask, groupName: string, serviceName: string, projectName: string, taskName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProjectTask>): void;


    /**
     * @summary Get task information
     *
     * The tasks resource is a nested, proxy-only resource representing work
     * performed by a DMS instance. The GET method retrieves information about a
     * task.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {string} taskName Name of the Task
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expand the response
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProjectTask>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(groupName: string, serviceName: string, projectName: string, taskName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProjectTask>>;

    /**
     * @summary Get task information
     *
     * The tasks resource is a nested, proxy-only resource representing work
     * performed by a DMS instance. The GET method retrieves information about a
     * task.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {string} taskName Name of the Task
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Expand the response
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProjectTask} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProjectTask} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProjectTask} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(groupName: string, serviceName: string, projectName: string, taskName: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ProjectTask>;
    get(groupName: string, serviceName: string, projectName: string, taskName: string, callback: ServiceCallback<models.ProjectTask>): void;
    get(groupName: string, serviceName: string, projectName: string, taskName: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProjectTask>): void;


    /**
     * @summary Delete task
     *
     * The tasks resource is a nested, proxy-only resource representing work
     * performed by a DMS instance. The DELETE method deletes a task, canceling it
     * first if it's running.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {string} taskName Name of the Task
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.deleteRunningTasks] Delete the resource even if it
     * contains running tasks
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(groupName: string, serviceName: string, projectName: string, taskName: string, options?: { deleteRunningTasks? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete task
     *
     * The tasks resource is a nested, proxy-only resource representing work
     * performed by a DMS instance. The DELETE method deletes a task, canceling it
     * first if it's running.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {string} taskName Name of the Task
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.deleteRunningTasks] Delete the resource even if it
     * contains running tasks
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(groupName: string, serviceName: string, projectName: string, taskName: string, options?: { deleteRunningTasks? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(groupName: string, serviceName: string, projectName: string, taskName: string, callback: ServiceCallback<void>): void;
    deleteMethod(groupName: string, serviceName: string, projectName: string, taskName: string, options: { deleteRunningTasks? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Create or update task
     *
     * The tasks resource is a nested, proxy-only resource representing work
     * performed by a DMS instance. The PATCH method updates an existing task, but
     * since tasks have no mutable custom properties, there is little reason to do
     * so.
     *
     * @param {object} parameters Information about the task
     *
     * @param {string} [parameters.etag] HTTP strong entity tag value. This is
     * ignored if submitted.
     *
     * @param {object} [parameters.properties] Custom task properties
     *
     * @param {object} [parameters.properties.clientData] Key value pairs of client
     * data to attach meta data information to task
     *
     * @param {string} parameters.properties.taskType Polymorphic Discriminator
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {string} taskName Name of the Task
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProjectTask>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(parameters: models.ProjectTask, groupName: string, serviceName: string, projectName: string, taskName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProjectTask>>;

    /**
     * @summary Create or update task
     *
     * The tasks resource is a nested, proxy-only resource representing work
     * performed by a DMS instance. The PATCH method updates an existing task, but
     * since tasks have no mutable custom properties, there is little reason to do
     * so.
     *
     * @param {object} parameters Information about the task
     *
     * @param {string} [parameters.etag] HTTP strong entity tag value. This is
     * ignored if submitted.
     *
     * @param {object} [parameters.properties] Custom task properties
     *
     * @param {object} [parameters.properties.clientData] Key value pairs of client
     * data to attach meta data information to task
     *
     * @param {string} parameters.properties.taskType Polymorphic Discriminator
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {string} taskName Name of the Task
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProjectTask} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProjectTask} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProjectTask} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(parameters: models.ProjectTask, groupName: string, serviceName: string, projectName: string, taskName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProjectTask>;
    update(parameters: models.ProjectTask, groupName: string, serviceName: string, projectName: string, taskName: string, callback: ServiceCallback<models.ProjectTask>): void;
    update(parameters: models.ProjectTask, groupName: string, serviceName: string, projectName: string, taskName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProjectTask>): void;


    /**
     * @summary Cancel a task
     *
     * The tasks resource is a nested, proxy-only resource representing work
     * performed by a DMS instance. This method cancels a task if it's currently
     * queued or running.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {string} taskName Name of the Task
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProjectTask>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    cancelWithHttpOperationResponse(groupName: string, serviceName: string, projectName: string, taskName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProjectTask>>;

    /**
     * @summary Cancel a task
     *
     * The tasks resource is a nested, proxy-only resource representing work
     * performed by a DMS instance. This method cancels a task if it's currently
     * queued or running.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {string} taskName Name of the Task
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProjectTask} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProjectTask} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProjectTask} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    cancel(groupName: string, serviceName: string, projectName: string, taskName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProjectTask>;
    cancel(groupName: string, serviceName: string, projectName: string, taskName: string, callback: ServiceCallback<models.ProjectTask>): void;
    cancel(groupName: string, serviceName: string, projectName: string, taskName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProjectTask>): void;


    /**
     * @summary Execute a command on a task
     *
     * The tasks resource is a nested, proxy-only resource representing work
     * performed by a DMS instance. This method executes a command on a running
     * task.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {string} taskName Name of the Task
     *
     * @param {object} parameters Command to execute
     *
     * @param {string} parameters.commandType Polymorphic Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CommandProperties>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    commandWithHttpOperationResponse(groupName: string, serviceName: string, projectName: string, taskName: string, parameters: models.CommandProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CommandProperties>>;

    /**
     * @summary Execute a command on a task
     *
     * The tasks resource is a nested, proxy-only resource representing work
     * performed by a DMS instance. This method executes a command on a running
     * task.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {string} taskName Name of the Task
     *
     * @param {object} parameters Command to execute
     *
     * @param {string} parameters.commandType Polymorphic Discriminator
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CommandProperties} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CommandProperties} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CommandProperties} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    command(groupName: string, serviceName: string, projectName: string, taskName: string, parameters: models.CommandProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CommandProperties>;
    command(groupName: string, serviceName: string, projectName: string, taskName: string, parameters: models.CommandProperties, callback: ServiceCallback<models.CommandProperties>): void;
    command(groupName: string, serviceName: string, projectName: string, taskName: string, parameters: models.CommandProperties, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CommandProperties>): void;


    /**
     * @summary Get tasks in a service
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. This method returns a list of tasks owned by a service
     * resource. Some tasks may have a status of Unknown, which indicates that an
     * error occurred while querying the status of that task.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TaskList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TaskList>>;

    /**
     * @summary Get tasks in a service
     *
     * The services resource is the top-level resource that represents the Database
     * Migration Service. This method returns a list of tasks owned by a service
     * resource. Some tasks may have a status of Unknown, which indicates that an
     * error occurred while querying the status of that task.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TaskList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TaskList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TaskList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TaskList>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.TaskList>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TaskList>): void;
}

/**
 * @class
 * Projects
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataMigrationServiceClient.
 */
export interface Projects {


    /**
     * @summary Get projects in a service
     *
     * The project resource is a nested resource representing a stored migration
     * project. This method returns a list of projects owned by a service resource.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProjectList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(groupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProjectList>>;

    /**
     * @summary Get projects in a service
     *
     * The project resource is a nested resource representing a stored migration
     * project. This method returns a list of projects owned by a service resource.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProjectList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProjectList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProjectList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(groupName: string, serviceName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProjectList>;
    list(groupName: string, serviceName: string, callback: ServiceCallback<models.ProjectList>): void;
    list(groupName: string, serviceName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProjectList>): void;


    /**
     * @summary Create or update project
     *
     * The project resource is a nested resource representing a stored migration
     * project. The PUT method creates a new project or updates an existing one.
     *
     * @param {object} parameters Information about the project
     *
     * @param {string} parameters.sourcePlatform Source platform for the project.
     * Possible values include: 'SQL', 'MySQL', 'PostgreSql', 'MongoDb', 'Unknown'
     *
     * @param {string} parameters.targetPlatform Target platform for the project.
     * Possible values include: 'SQLDB', 'SQLMI', 'AzureDbForMySql',
     * 'AzureDbForPostgreSql', 'MongoDb', 'Unknown'
     *
     * @param {object} [parameters.sourceConnectionInfo] Information for connecting
     * to source
     *
     * @param {object} [parameters.targetConnectionInfo] Information for connecting
     * to target
     *
     * @param {string} [parameters.targetConnectionInfo.userName] User name
     *
     * @param {string} [parameters.targetConnectionInfo.password] Password
     * credential.
     *
     * @param {string} parameters.targetConnectionInfo.type Polymorphic
     * Discriminator
     *
     * @param {array} [parameters.databasesInfo] List of DatabaseInfo
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Project>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(parameters: models.Project, groupName: string, serviceName: string, projectName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Project>>;

    /**
     * @summary Create or update project
     *
     * The project resource is a nested resource representing a stored migration
     * project. The PUT method creates a new project or updates an existing one.
     *
     * @param {object} parameters Information about the project
     *
     * @param {string} parameters.sourcePlatform Source platform for the project.
     * Possible values include: 'SQL', 'MySQL', 'PostgreSql', 'MongoDb', 'Unknown'
     *
     * @param {string} parameters.targetPlatform Target platform for the project.
     * Possible values include: 'SQLDB', 'SQLMI', 'AzureDbForMySql',
     * 'AzureDbForPostgreSql', 'MongoDb', 'Unknown'
     *
     * @param {object} [parameters.sourceConnectionInfo] Information for connecting
     * to source
     *
     * @param {object} [parameters.targetConnectionInfo] Information for connecting
     * to target
     *
     * @param {string} [parameters.targetConnectionInfo.userName] User name
     *
     * @param {string} [parameters.targetConnectionInfo.password] Password
     * credential.
     *
     * @param {string} parameters.targetConnectionInfo.type Polymorphic
     * Discriminator
     *
     * @param {array} [parameters.databasesInfo] List of DatabaseInfo
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Project} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Project} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Project} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(parameters: models.Project, groupName: string, serviceName: string, projectName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Project>;
    createOrUpdate(parameters: models.Project, groupName: string, serviceName: string, projectName: string, callback: ServiceCallback<models.Project>): void;
    createOrUpdate(parameters: models.Project, groupName: string, serviceName: string, projectName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Project>): void;


    /**
     * @summary Get project information
     *
     * The project resource is a nested resource representing a stored migration
     * project. The GET method retrieves information about a project.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Project>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(groupName: string, serviceName: string, projectName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Project>>;

    /**
     * @summary Get project information
     *
     * The project resource is a nested resource representing a stored migration
     * project. The GET method retrieves information about a project.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Project} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Project} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Project} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(groupName: string, serviceName: string, projectName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Project>;
    get(groupName: string, serviceName: string, projectName: string, callback: ServiceCallback<models.Project>): void;
    get(groupName: string, serviceName: string, projectName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Project>): void;


    /**
     * @summary Delete project
     *
     * The project resource is a nested resource representing a stored migration
     * project. The DELETE method deletes a project.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.deleteRunningTasks] Delete the resource even if it
     * contains running tasks
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(groupName: string, serviceName: string, projectName: string, options?: { deleteRunningTasks? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete project
     *
     * The project resource is a nested resource representing a stored migration
     * project. The DELETE method deletes a project.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.deleteRunningTasks] Delete the resource even if it
     * contains running tasks
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(groupName: string, serviceName: string, projectName: string, options?: { deleteRunningTasks? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(groupName: string, serviceName: string, projectName: string, callback: ServiceCallback<void>): void;
    deleteMethod(groupName: string, serviceName: string, projectName: string, options: { deleteRunningTasks? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Update project
     *
     * The project resource is a nested resource representing a stored migration
     * project. The PATCH method updates an existing project.
     *
     * @param {object} parameters Information about the project
     *
     * @param {string} parameters.sourcePlatform Source platform for the project.
     * Possible values include: 'SQL', 'MySQL', 'PostgreSql', 'MongoDb', 'Unknown'
     *
     * @param {string} parameters.targetPlatform Target platform for the project.
     * Possible values include: 'SQLDB', 'SQLMI', 'AzureDbForMySql',
     * 'AzureDbForPostgreSql', 'MongoDb', 'Unknown'
     *
     * @param {object} [parameters.sourceConnectionInfo] Information for connecting
     * to source
     *
     * @param {object} [parameters.targetConnectionInfo] Information for connecting
     * to target
     *
     * @param {string} [parameters.targetConnectionInfo.userName] User name
     *
     * @param {string} [parameters.targetConnectionInfo.password] Password
     * credential.
     *
     * @param {string} parameters.targetConnectionInfo.type Polymorphic
     * Discriminator
     *
     * @param {array} [parameters.databasesInfo] List of DatabaseInfo
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Project>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(parameters: models.Project, groupName: string, serviceName: string, projectName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Project>>;

    /**
     * @summary Update project
     *
     * The project resource is a nested resource representing a stored migration
     * project. The PATCH method updates an existing project.
     *
     * @param {object} parameters Information about the project
     *
     * @param {string} parameters.sourcePlatform Source platform for the project.
     * Possible values include: 'SQL', 'MySQL', 'PostgreSql', 'MongoDb', 'Unknown'
     *
     * @param {string} parameters.targetPlatform Target platform for the project.
     * Possible values include: 'SQLDB', 'SQLMI', 'AzureDbForMySql',
     * 'AzureDbForPostgreSql', 'MongoDb', 'Unknown'
     *
     * @param {object} [parameters.sourceConnectionInfo] Information for connecting
     * to source
     *
     * @param {object} [parameters.targetConnectionInfo] Information for connecting
     * to target
     *
     * @param {string} [parameters.targetConnectionInfo.userName] User name
     *
     * @param {string} [parameters.targetConnectionInfo.password] Password
     * credential.
     *
     * @param {string} parameters.targetConnectionInfo.type Polymorphic
     * Discriminator
     *
     * @param {array} [parameters.databasesInfo] List of DatabaseInfo
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Project} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Project} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Project} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(parameters: models.Project, groupName: string, serviceName: string, projectName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Project>;
    update(parameters: models.Project, groupName: string, serviceName: string, projectName: string, callback: ServiceCallback<models.Project>): void;
    update(parameters: models.Project, groupName: string, serviceName: string, projectName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Project>): void;


    /**
     * @summary Get projects in a service
     *
     * The project resource is a nested resource representing a stored migration
     * project. This method returns a list of projects owned by a service resource.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProjectList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProjectList>>;

    /**
     * @summary Get projects in a service
     *
     * The project resource is a nested resource representing a stored migration
     * project. This method returns a list of projects owned by a service resource.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProjectList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProjectList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProjectList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProjectList>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ProjectList>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProjectList>): void;
}

/**
 * @class
 * Usages
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataMigrationServiceClient.
 */
export interface Usages {


    /**
     * @summary Get resource quotas and usage information
     *
     * This method returns region-specific quotas and resource usage information
     * for the Database Migration Service.
     *
     * @param {string} location The Azure region of the operation
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<QuotaList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(location: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.QuotaList>>;

    /**
     * @summary Get resource quotas and usage information
     *
     * This method returns region-specific quotas and resource usage information
     * for the Database Migration Service.
     *
     * @param {string} location The Azure region of the operation
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {QuotaList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {QuotaList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link QuotaList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(location: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.QuotaList>;
    list(location: string, callback: ServiceCallback<models.QuotaList>): void;
    list(location: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.QuotaList>): void;


    /**
     * @summary Get resource quotas and usage information
     *
     * This method returns region-specific quotas and resource usage information
     * for the Database Migration Service.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<QuotaList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.QuotaList>>;

    /**
     * @summary Get resource quotas and usage information
     *
     * This method returns region-specific quotas and resource usage information
     * for the Database Migration Service.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {QuotaList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {QuotaList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link QuotaList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.QuotaList>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.QuotaList>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.QuotaList>): void;
}

/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataMigrationServiceClient.
 */
export interface Operations {


    /**
     * @summary Get available resource provider actions (operations)
     *
     * Lists all available actions exposed by the Database Migration Service
     * resource provider.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceOperationList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceOperationList>>;

    /**
     * @summary Get available resource provider actions (operations)
     *
     * Lists all available actions exposed by the Database Migration Service
     * resource provider.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceOperationList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceOperationList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceOperationList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceOperationList>;
    list(callback: ServiceCallback<models.ServiceOperationList>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceOperationList>): void;


    /**
     * @summary Get available resource provider actions (operations)
     *
     * Lists all available actions exposed by the Database Migration Service
     * resource provider.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceOperationList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceOperationList>>;

    /**
     * @summary Get available resource provider actions (operations)
     *
     * Lists all available actions exposed by the Database Migration Service
     * resource provider.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceOperationList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceOperationList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceOperationList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceOperationList>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ServiceOperationList>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceOperationList>): void;
}

/**
 * @class
 * Files
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DataMigrationServiceClient.
 */
export interface Files {


    /**
     * @summary Get files in a project
     *
     * The project resource is a nested resource representing a stored migration
     * project. This method returns a list of files owned by a project resource.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FileList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(groupName: string, serviceName: string, projectName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FileList>>;

    /**
     * @summary Get files in a project
     *
     * The project resource is a nested resource representing a stored migration
     * project. This method returns a list of files owned by a project resource.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FileList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FileList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FileList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(groupName: string, serviceName: string, projectName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FileList>;
    list(groupName: string, serviceName: string, projectName: string, callback: ServiceCallback<models.FileList>): void;
    list(groupName: string, serviceName: string, projectName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FileList>): void;


    /**
     * @summary Get file information
     *
     * The files resource is a nested, proxy-only resource representing a file
     * stored under the project resource. This method retrieves information about a
     * file.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {string} fileName Name of the File
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProjectFile>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(groupName: string, serviceName: string, projectName: string, fileName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProjectFile>>;

    /**
     * @summary Get file information
     *
     * The files resource is a nested, proxy-only resource representing a file
     * stored under the project resource. This method retrieves information about a
     * file.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {string} fileName Name of the File
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProjectFile} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProjectFile} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProjectFile} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(groupName: string, serviceName: string, projectName: string, fileName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProjectFile>;
    get(groupName: string, serviceName: string, projectName: string, fileName: string, callback: ServiceCallback<models.ProjectFile>): void;
    get(groupName: string, serviceName: string, projectName: string, fileName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProjectFile>): void;


    /**
     * @summary Create a file resource
     *
     * The PUT method creates a new file or updates an existing one.
     *
     * @param {object} parameters Information about the file
     *
     * @param {string} [parameters.etag] HTTP strong entity tag value. This is
     * ignored if submitted.
     *
     * @param {object} [parameters.properties] Custom file properties
     *
     * @param {string} [parameters.properties.extension] Optional File extension.
     * If submitted it should not have a leading period and must match the
     * extension from filePath.
     *
     * @param {string} [parameters.properties.filePath] Relative path of this file
     * resource. This property can be set when creating or updating the file
     * resource.
     *
     * @param {string} [parameters.properties.mediaType] File content type. This
     * property can be modified to reflect the file content type.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {string} fileName Name of the File
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProjectFile>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(parameters: models.ProjectFile, groupName: string, serviceName: string, projectName: string, fileName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProjectFile>>;

    /**
     * @summary Create a file resource
     *
     * The PUT method creates a new file or updates an existing one.
     *
     * @param {object} parameters Information about the file
     *
     * @param {string} [parameters.etag] HTTP strong entity tag value. This is
     * ignored if submitted.
     *
     * @param {object} [parameters.properties] Custom file properties
     *
     * @param {string} [parameters.properties.extension] Optional File extension.
     * If submitted it should not have a leading period and must match the
     * extension from filePath.
     *
     * @param {string} [parameters.properties.filePath] Relative path of this file
     * resource. This property can be set when creating or updating the file
     * resource.
     *
     * @param {string} [parameters.properties.mediaType] File content type. This
     * property can be modified to reflect the file content type.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {string} fileName Name of the File
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProjectFile} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProjectFile} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProjectFile} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(parameters: models.ProjectFile, groupName: string, serviceName: string, projectName: string, fileName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProjectFile>;
    createOrUpdate(parameters: models.ProjectFile, groupName: string, serviceName: string, projectName: string, fileName: string, callback: ServiceCallback<models.ProjectFile>): void;
    createOrUpdate(parameters: models.ProjectFile, groupName: string, serviceName: string, projectName: string, fileName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProjectFile>): void;


    /**
     * @summary Delete file
     *
     * This method deletes a file.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {string} fileName Name of the File
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(groupName: string, serviceName: string, projectName: string, fileName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete file
     *
     * This method deletes a file.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {string} fileName Name of the File
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(groupName: string, serviceName: string, projectName: string, fileName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(groupName: string, serviceName: string, projectName: string, fileName: string, callback: ServiceCallback<void>): void;
    deleteMethod(groupName: string, serviceName: string, projectName: string, fileName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Update a file
     *
     * This method updates an existing file.
     *
     * @param {object} parameters Information about the file
     *
     * @param {string} [parameters.etag] HTTP strong entity tag value. This is
     * ignored if submitted.
     *
     * @param {object} [parameters.properties] Custom file properties
     *
     * @param {string} [parameters.properties.extension] Optional File extension.
     * If submitted it should not have a leading period and must match the
     * extension from filePath.
     *
     * @param {string} [parameters.properties.filePath] Relative path of this file
     * resource. This property can be set when creating or updating the file
     * resource.
     *
     * @param {string} [parameters.properties.mediaType] File content type. This
     * property can be modified to reflect the file content type.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {string} fileName Name of the File
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProjectFile>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(parameters: models.ProjectFile, groupName: string, serviceName: string, projectName: string, fileName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProjectFile>>;

    /**
     * @summary Update a file
     *
     * This method updates an existing file.
     *
     * @param {object} parameters Information about the file
     *
     * @param {string} [parameters.etag] HTTP strong entity tag value. This is
     * ignored if submitted.
     *
     * @param {object} [parameters.properties] Custom file properties
     *
     * @param {string} [parameters.properties.extension] Optional File extension.
     * If submitted it should not have a leading period and must match the
     * extension from filePath.
     *
     * @param {string} [parameters.properties.filePath] Relative path of this file
     * resource. This property can be set when creating or updating the file
     * resource.
     *
     * @param {string} [parameters.properties.mediaType] File content type. This
     * property can be modified to reflect the file content type.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {string} fileName Name of the File
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProjectFile} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProjectFile} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProjectFile} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(parameters: models.ProjectFile, groupName: string, serviceName: string, projectName: string, fileName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProjectFile>;
    update(parameters: models.ProjectFile, groupName: string, serviceName: string, projectName: string, fileName: string, callback: ServiceCallback<models.ProjectFile>): void;
    update(parameters: models.ProjectFile, groupName: string, serviceName: string, projectName: string, fileName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProjectFile>): void;


    /**
     * @summary Request storage information for downloading the file content
     *
     * This method is used for requesting storage information using which contents
     * of the file can be downloaded.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {string} fileName Name of the File
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FileStorageInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    readWithHttpOperationResponse(groupName: string, serviceName: string, projectName: string, fileName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FileStorageInfo>>;

    /**
     * @summary Request storage information for downloading the file content
     *
     * This method is used for requesting storage information using which contents
     * of the file can be downloaded.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {string} fileName Name of the File
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FileStorageInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FileStorageInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FileStorageInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    read(groupName: string, serviceName: string, projectName: string, fileName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FileStorageInfo>;
    read(groupName: string, serviceName: string, projectName: string, fileName: string, callback: ServiceCallback<models.FileStorageInfo>): void;
    read(groupName: string, serviceName: string, projectName: string, fileName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FileStorageInfo>): void;


    /**
     * @summary Request information for reading and writing file content.
     *
     * This method is used for requesting information for reading and writing the
     * file content.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {string} fileName Name of the File
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FileStorageInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    readWriteWithHttpOperationResponse(groupName: string, serviceName: string, projectName: string, fileName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FileStorageInfo>>;

    /**
     * @summary Request information for reading and writing file content.
     *
     * This method is used for requesting information for reading and writing the
     * file content.
     *
     * @param {string} groupName Name of the resource group
     *
     * @param {string} serviceName Name of the service
     *
     * @param {string} projectName Name of the project
     *
     * @param {string} fileName Name of the File
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FileStorageInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FileStorageInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FileStorageInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    readWrite(groupName: string, serviceName: string, projectName: string, fileName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FileStorageInfo>;
    readWrite(groupName: string, serviceName: string, projectName: string, fileName: string, callback: ServiceCallback<models.FileStorageInfo>): void;
    readWrite(groupName: string, serviceName: string, projectName: string, fileName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FileStorageInfo>): void;


    /**
     * @summary Get files in a project
     *
     * The project resource is a nested resource representing a stored migration
     * project. This method returns a list of files owned by a project resource.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FileList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FileList>>;

    /**
     * @summary Get files in a project
     *
     * The project resource is a nested resource representing a stored migration
     * project. This method returns a list of files owned by a project resource.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FileList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FileList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FileList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FileList>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.FileList>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FileList>): void;
}
