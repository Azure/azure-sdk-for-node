/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { ServiceClient, ServiceClientOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from "./models";

export default class TrainingAPIClient extends ServiceClient {
  /**
   * @class
   * Initializes a new instance of the TrainingAPIClient class.
   * @constructor
   *
   * @param {string} apiKey -
   *
   * @param {string} endpoint - Supported Cognitive Services endpoints
   *
   * @param {object} [options] - The parameter options
   *
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   *
   * @param {object} [options.requestOptions] - Options for the underlying request object
   * {@link https://github.com/request/request#requestoptions-callback Options doc}
   *
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   *
   */
  constructor(apiKey: string, endpoint: string, options?: ServiceClientOptions);

  apiKey: string;

  endpoint: string;


  /**
   * @summary Get a list of the available domains.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDomainsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Domain[]>>;

  /**
   * @summary Get a list of the available domains.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDomains(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Domain[]>;
  getDomains(callback: ServiceCallback<models.Domain[]>): void;
  getDomains(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Domain[]>): void;


  /**
   * @summary Get information about a specific domain.
   *
   * @param {uuid} domainId The id of the domain to get information about.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Domain>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDomainWithHttpOperationResponse(domainId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Domain>>;

  /**
   * @summary Get information about a specific domain.
   *
   * @param {uuid} domainId The id of the domain to get information about.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Domain} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Domain} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Domain} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDomain(domainId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Domain>;
  getDomain(domainId: string, callback: ServiceCallback<models.Domain>): void;
  getDomain(domainId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Domain>): void;


  /**
   * @summary Gets the number of images tagged with the provided {tagIds}.
   *
   * The filtering is on an and/or relationship. For example, if the provided tag
   * ids are for the "Dog" and
   * "Cat" tags, then only images tagged with Dog and/or Cat will be returned
   *
   * @param {uuid} projectId The project id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {uuid} [options.iterationId] The iteration id. Defaults to workspace.
   *
   * @param {array} [options.tagIds] A list of tags ids to filter the images to
   * count. Defaults to all tags when null.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Number>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getTaggedImageCountWithHttpOperationResponse(projectId: string, options?: { iterationId? : string, tagIds? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<number>>;

  /**
   * @summary Gets the number of images tagged with the provided {tagIds}.
   *
   * The filtering is on an and/or relationship. For example, if the provided tag
   * ids are for the "Dog" and
   * "Cat" tags, then only images tagged with Dog and/or Cat will be returned
   *
   * @param {uuid} projectId The project id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {uuid} [options.iterationId] The iteration id. Defaults to workspace.
   *
   * @param {array} [options.tagIds] A list of tags ids to filter the images to
   * count. Defaults to all tags when null.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Number} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Number} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getTaggedImageCount(projectId: string, options?: { iterationId? : string, tagIds? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<number>;
  getTaggedImageCount(projectId: string, callback: ServiceCallback<number>): void;
  getTaggedImageCount(projectId: string, options: { iterationId? : string, tagIds? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<number>): void;


  /**
   * @summary Gets the number of untagged images.
   *
   * This API returns the images which have no tags for a given project and
   * optionally an iteration. If no iteration is specified the
   * current workspace is used.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {uuid} [options.iterationId] The iteration id. Defaults to workspace.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Number>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getUntaggedImageCountWithHttpOperationResponse(projectId: string, options?: { iterationId? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<number>>;

  /**
   * @summary Gets the number of untagged images.
   *
   * This API returns the images which have no tags for a given project and
   * optionally an iteration. If no iteration is specified the
   * current workspace is used.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {uuid} [options.iterationId] The iteration id. Defaults to workspace.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Number} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Number} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getUntaggedImageCount(projectId: string, options?: { iterationId? : string, customHeaders? : { [headerName: string]: string; } }): Promise<number>;
  getUntaggedImageCount(projectId: string, callback: ServiceCallback<number>): void;
  getUntaggedImageCount(projectId: string, options: { iterationId? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<number>): void;


  /**
   * @summary Associate a set of images with a set of tags.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {object} batch Batch of image tags. Limited to 128 tags per batch.
   *
   * @param {array} [batch.tags] Image Tag entries to include in this batch.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ImageTagCreateSummary>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createImageTagsWithHttpOperationResponse(projectId: string, batch: models.ImageTagCreateBatch, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImageTagCreateSummary>>;

  /**
   * @summary Associate a set of images with a set of tags.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {object} batch Batch of image tags. Limited to 128 tags per batch.
   *
   * @param {array} [batch.tags] Image Tag entries to include in this batch.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ImageTagCreateSummary} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ImageTagCreateSummary} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ImageTagCreateSummary} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createImageTags(projectId: string, batch: models.ImageTagCreateBatch, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ImageTagCreateSummary>;
  createImageTags(projectId: string, batch: models.ImageTagCreateBatch, callback: ServiceCallback<models.ImageTagCreateSummary>): void;
  createImageTags(projectId: string, batch: models.ImageTagCreateBatch, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImageTagCreateSummary>): void;


  /**
   * @summary Remove a set of tags from a set of images.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {array} imageIds Image ids. Limited to 64 images.
   *
   * @param {array} tagIds Tags to be deleted from the specified images. Limited
   * to 20 tags.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteImageTagsWithHttpOperationResponse(projectId: string, imageIds: string[], tagIds: string[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Remove a set of tags from a set of images.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {array} imageIds Image ids. Limited to 64 images.
   *
   * @param {array} tagIds Tags to be deleted from the specified images. Limited
   * to 20 tags.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteImageTags(projectId: string, imageIds: string[], tagIds: string[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  deleteImageTags(projectId: string, imageIds: string[], tagIds: string[], callback: ServiceCallback<void>): void;
  deleteImageTags(projectId: string, imageIds: string[], tagIds: string[], options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Create a set of image regions.
   *
   * This API accepts a batch of image regions, and optionally tags, to update
   * existing images with region information.
   * There is a limit of 64 entries in the batch.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {object} batch Batch of image regions which include a tag and
   * bounding box. Limited to 64.
   *
   * @param {array} [batch.regions]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ImageRegionCreateSummary>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createImageRegionsWithHttpOperationResponse(projectId: string, batch: models.ImageRegionCreateBatch, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImageRegionCreateSummary>>;

  /**
   * @summary Create a set of image regions.
   *
   * This API accepts a batch of image regions, and optionally tags, to update
   * existing images with region information.
   * There is a limit of 64 entries in the batch.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {object} batch Batch of image regions which include a tag and
   * bounding box. Limited to 64.
   *
   * @param {array} [batch.regions]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ImageRegionCreateSummary} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ImageRegionCreateSummary} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ImageRegionCreateSummary} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createImageRegions(projectId: string, batch: models.ImageRegionCreateBatch, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ImageRegionCreateSummary>;
  createImageRegions(projectId: string, batch: models.ImageRegionCreateBatch, callback: ServiceCallback<models.ImageRegionCreateSummary>): void;
  createImageRegions(projectId: string, batch: models.ImageRegionCreateBatch, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImageRegionCreateSummary>): void;


  /**
   * @summary Delete a set of image regions.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {array} regionIds Regions to delete. Limited to 64.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteImageRegionsWithHttpOperationResponse(projectId: string, regionIds: string[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Delete a set of image regions.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {array} regionIds Regions to delete. Limited to 64.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteImageRegions(projectId: string, regionIds: string[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  deleteImageRegions(projectId: string, regionIds: string[], callback: ServiceCallback<void>): void;
  deleteImageRegions(projectId: string, regionIds: string[], options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Get tagged images for a given project iteration.
   *
   * This API supports batching and range selection. By default it will only
   * return first 50 images matching images.
   * Use the {take} and {skip} parameters to control how many images to return in
   * a given batch.
   * The filtering is on an and/or relationship. For example, if the provided tag
   * ids are for the "Dog" and
   * "Cat" tags, then only images tagged with Dog and/or Cat will be returned
   *
   * @param {uuid} projectId The project id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {uuid} [options.iterationId] The iteration id. Defaults to workspace.
   *
   * @param {array} [options.tagIds] A list of tags ids to filter the images.
   * Defaults to all tagged images when null. Limited to 20.
   *
   * @param {string} [options.orderBy] The ordering. Defaults to newest. Possible
   * values include: 'Newest', 'Oldest'
   *
   * @param {number} [options.take] Maximum number of images to return. Defaults
   * to 50, limited to 256.
   *
   * @param {number} [options.skip] Number of images to skip before beginning the
   * image batch. Defaults to 0.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getTaggedImagesWithHttpOperationResponse(projectId: string, options?: { iterationId? : string, tagIds? : string[], orderBy? : string, take? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Image[]>>;

  /**
   * @summary Get tagged images for a given project iteration.
   *
   * This API supports batching and range selection. By default it will only
   * return first 50 images matching images.
   * Use the {take} and {skip} parameters to control how many images to return in
   * a given batch.
   * The filtering is on an and/or relationship. For example, if the provided tag
   * ids are for the "Dog" and
   * "Cat" tags, then only images tagged with Dog and/or Cat will be returned
   *
   * @param {uuid} projectId The project id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {uuid} [options.iterationId] The iteration id. Defaults to workspace.
   *
   * @param {array} [options.tagIds] A list of tags ids to filter the images.
   * Defaults to all tagged images when null. Limited to 20.
   *
   * @param {string} [options.orderBy] The ordering. Defaults to newest. Possible
   * values include: 'Newest', 'Oldest'
   *
   * @param {number} [options.take] Maximum number of images to return. Defaults
   * to 50, limited to 256.
   *
   * @param {number} [options.skip] Number of images to skip before beginning the
   * image batch. Defaults to 0.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getTaggedImages(projectId: string, options?: { iterationId? : string, tagIds? : string[], orderBy? : string, take? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.Image[]>;
  getTaggedImages(projectId: string, callback: ServiceCallback<models.Image[]>): void;
  getTaggedImages(projectId: string, options: { iterationId? : string, tagIds? : string[], orderBy? : string, take? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Image[]>): void;


  /**
   * @summary Get untagged images for a given project iteration.
   *
   * This API supports batching and range selection. By default it will only
   * return first 50 images matching images.
   * Use the {take} and {skip} parameters to control how many images to return in
   * a given batch.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {uuid} [options.iterationId] The iteration id. Defaults to workspace.
   *
   * @param {string} [options.orderBy] The ordering. Defaults to newest. Possible
   * values include: 'Newest', 'Oldest'
   *
   * @param {number} [options.take] Maximum number of images to return. Defaults
   * to 50, limited to 256.
   *
   * @param {number} [options.skip] Number of images to skip before beginning the
   * image batch. Defaults to 0.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getUntaggedImagesWithHttpOperationResponse(projectId: string, options?: { iterationId? : string, orderBy? : string, take? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Image[]>>;

  /**
   * @summary Get untagged images for a given project iteration.
   *
   * This API supports batching and range selection. By default it will only
   * return first 50 images matching images.
   * Use the {take} and {skip} parameters to control how many images to return in
   * a given batch.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {uuid} [options.iterationId] The iteration id. Defaults to workspace.
   *
   * @param {string} [options.orderBy] The ordering. Defaults to newest. Possible
   * values include: 'Newest', 'Oldest'
   *
   * @param {number} [options.take] Maximum number of images to return. Defaults
   * to 50, limited to 256.
   *
   * @param {number} [options.skip] Number of images to skip before beginning the
   * image batch. Defaults to 0.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getUntaggedImages(projectId: string, options?: { iterationId? : string, orderBy? : string, take? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.Image[]>;
  getUntaggedImages(projectId: string, callback: ServiceCallback<models.Image[]>): void;
  getUntaggedImages(projectId: string, options: { iterationId? : string, orderBy? : string, take? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Image[]>): void;


  /**
   * @summary Get images by id for a given project iteration.
   *
   * This API will return a set of Images for the specified tags and optionally
   * iteration. If no iteration is specified the
   * current workspace is used.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.imageIds] The list of image ids to retrieve. Limited
   * to 256.
   *
   * @param {uuid} [options.iterationId] The iteration id. Defaults to workspace.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getImagesByIdsWithHttpOperationResponse(projectId: string, options?: { imageIds? : string[], iterationId? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Image[]>>;

  /**
   * @summary Get images by id for a given project iteration.
   *
   * This API will return a set of Images for the specified tags and optionally
   * iteration. If no iteration is specified the
   * current workspace is used.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.imageIds] The list of image ids to retrieve. Limited
   * to 256.
   *
   * @param {uuid} [options.iterationId] The iteration id. Defaults to workspace.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getImagesByIds(projectId: string, options?: { imageIds? : string[], iterationId? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Image[]>;
  getImagesByIds(projectId: string, callback: ServiceCallback<models.Image[]>): void;
  getImagesByIds(projectId: string, options: { imageIds? : string[], iterationId? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Image[]>): void;


  /**
   * @summary Add the provided images to the set of training images.
   *
   * This API accepts body content as multipart/form-data and
   * application/octet-stream. When using multipart
   * multiple image files can be sent at once, with a maximum of 64 files
   *
   * @param {uuid} projectId The project id.
   *
   * @param {object} imageData Binary image data.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.tagIds] The tags ids with which to tag each image.
   * Limited to 20.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ImageCreateSummary>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createImagesFromDataWithHttpOperationResponse(projectId: string, imageData: stream.Readable, options?: { tagIds? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImageCreateSummary>>;

  /**
   * @summary Add the provided images to the set of training images.
   *
   * This API accepts body content as multipart/form-data and
   * application/octet-stream. When using multipart
   * multiple image files can be sent at once, with a maximum of 64 files
   *
   * @param {uuid} projectId The project id.
   *
   * @param {object} imageData Binary image data.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.tagIds] The tags ids with which to tag each image.
   * Limited to 20.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ImageCreateSummary} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ImageCreateSummary} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ImageCreateSummary} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createImagesFromData(projectId: string, imageData: stream.Readable, options?: { tagIds? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<models.ImageCreateSummary>;
  createImagesFromData(projectId: string, imageData: stream.Readable, callback: ServiceCallback<models.ImageCreateSummary>): void;
  createImagesFromData(projectId: string, imageData: stream.Readable, options: { tagIds? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImageCreateSummary>): void;


  /**
   * @summary Delete images from the set of training images.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {array} imageIds Ids of the images to be deleted. Limited to 256
   * images per batch.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteImagesWithHttpOperationResponse(projectId: string, imageIds: string[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Delete images from the set of training images.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {array} imageIds Ids of the images to be deleted. Limited to 256
   * images per batch.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteImages(projectId: string, imageIds: string[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  deleteImages(projectId: string, imageIds: string[], callback: ServiceCallback<void>): void;
  deleteImages(projectId: string, imageIds: string[], options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Add the provided batch of images to the set of training images.
   *
   * This API accepts a batch of files, and optionally tags, to create images.
   * There is a limit of 64 images and 20 tags.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {object} batch The batch of image files to add. Limited to 64 images
   * and 20 tags per batch.
   *
   * @param {array} [batch.images]
   *
   * @param {array} [batch.tagIds]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ImageCreateSummary>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createImagesFromFilesWithHttpOperationResponse(projectId: string, batch: models.ImageFileCreateBatch, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImageCreateSummary>>;

  /**
   * @summary Add the provided batch of images to the set of training images.
   *
   * This API accepts a batch of files, and optionally tags, to create images.
   * There is a limit of 64 images and 20 tags.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {object} batch The batch of image files to add. Limited to 64 images
   * and 20 tags per batch.
   *
   * @param {array} [batch.images]
   *
   * @param {array} [batch.tagIds]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ImageCreateSummary} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ImageCreateSummary} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ImageCreateSummary} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createImagesFromFiles(projectId: string, batch: models.ImageFileCreateBatch, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ImageCreateSummary>;
  createImagesFromFiles(projectId: string, batch: models.ImageFileCreateBatch, callback: ServiceCallback<models.ImageCreateSummary>): void;
  createImagesFromFiles(projectId: string, batch: models.ImageFileCreateBatch, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImageCreateSummary>): void;


  /**
   * @summary Add the provided images urls to the set of training images.
   *
   * This API accepts a batch of urls, and optionally tags, to create images.
   * There is a limit of 64 images and 20 tags.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {object} batch Image urls and tag ids. Limited to 64 images and 20
   * tags per batch.
   *
   * @param {array} [batch.images]
   *
   * @param {array} [batch.tagIds]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ImageCreateSummary>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createImagesFromUrlsWithHttpOperationResponse(projectId: string, batch: models.ImageUrlCreateBatch, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImageCreateSummary>>;

  /**
   * @summary Add the provided images urls to the set of training images.
   *
   * This API accepts a batch of urls, and optionally tags, to create images.
   * There is a limit of 64 images and 20 tags.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {object} batch Image urls and tag ids. Limited to 64 images and 20
   * tags per batch.
   *
   * @param {array} [batch.images]
   *
   * @param {array} [batch.tagIds]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ImageCreateSummary} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ImageCreateSummary} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ImageCreateSummary} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createImagesFromUrls(projectId: string, batch: models.ImageUrlCreateBatch, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ImageCreateSummary>;
  createImagesFromUrls(projectId: string, batch: models.ImageUrlCreateBatch, callback: ServiceCallback<models.ImageCreateSummary>): void;
  createImagesFromUrls(projectId: string, batch: models.ImageUrlCreateBatch, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImageCreateSummary>): void;


  /**
   * @summary Add the specified predicted images to the set of training images.
   *
   * This API creates a batch of images from predicted images specified. There is
   * a limit of 64 images and 20 tags.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {object} batch Image and tag ids. Limited to 64 images and 20 tags
   * per batch.
   *
   * @param {array} [batch.images]
   *
   * @param {array} [batch.tagIds]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ImageCreateSummary>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createImagesFromPredictionsWithHttpOperationResponse(projectId: string, batch: models.ImageIdCreateBatch, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImageCreateSummary>>;

  /**
   * @summary Add the specified predicted images to the set of training images.
   *
   * This API creates a batch of images from predicted images specified. There is
   * a limit of 64 images and 20 tags.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {object} batch Image and tag ids. Limited to 64 images and 20 tags
   * per batch.
   *
   * @param {array} [batch.images]
   *
   * @param {array} [batch.tagIds]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ImageCreateSummary} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ImageCreateSummary} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ImageCreateSummary} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createImagesFromPredictions(projectId: string, batch: models.ImageIdCreateBatch, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ImageCreateSummary>;
  createImagesFromPredictions(projectId: string, batch: models.ImageIdCreateBatch, callback: ServiceCallback<models.ImageCreateSummary>): void;
  createImagesFromPredictions(projectId: string, batch: models.ImageIdCreateBatch, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImageCreateSummary>): void;


  /**
   * @summary Get region proposals for an image. Returns empty array if no
   * proposals are found.
   *
   * This API will get region proposals for an image along with confidences for
   * the region. It returns an empty array if no proposals are found.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {uuid} imageId The image id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ImageRegionProposal>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getImageRegionProposalsWithHttpOperationResponse(projectId: string, imageId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImageRegionProposal>>;

  /**
   * @summary Get region proposals for an image. Returns empty array if no
   * proposals are found.
   *
   * This API will get region proposals for an image along with confidences for
   * the region. It returns an empty array if no proposals are found.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {uuid} imageId The image id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ImageRegionProposal} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ImageRegionProposal} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ImageRegionProposal} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getImageRegionProposals(projectId: string, imageId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ImageRegionProposal>;
  getImageRegionProposals(projectId: string, imageId: string, callback: ServiceCallback<models.ImageRegionProposal>): void;
  getImageRegionProposals(projectId: string, imageId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImageRegionProposal>): void;


  /**
   * @summary Delete a set of predicted images and their associated prediction
   * results.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {array} ids The prediction ids. Limited to 64.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deletePredictionWithHttpOperationResponse(projectId: string, ids: string[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Delete a set of predicted images and their associated prediction
   * results.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {array} ids The prediction ids. Limited to 64.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deletePrediction(projectId: string, ids: string[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  deletePrediction(projectId: string, ids: string[], callback: ServiceCallback<void>): void;
  deletePrediction(projectId: string, ids: string[], options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Quick test an image url.
   *
   * @param {uuid} projectId The project to evaluate against.
   *
   * @param {object} imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the
   * url of the image to be evaluated.
   *
   * @param {string} [imageUrl.url]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {uuid} [options.iterationId] Optional. Specifies the id of a
   * particular iteration to evaluate against.
   * The default iteration for the project will be used when not specified.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ImagePrediction>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  quickTestImageUrlWithHttpOperationResponse(projectId: string, imageUrl: models.ImageUrl, options?: { iterationId? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImagePrediction>>;

  /**
   * @summary Quick test an image url.
   *
   * @param {uuid} projectId The project to evaluate against.
   *
   * @param {object} imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the
   * url of the image to be evaluated.
   *
   * @param {string} [imageUrl.url]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {uuid} [options.iterationId] Optional. Specifies the id of a
   * particular iteration to evaluate against.
   * The default iteration for the project will be used when not specified.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ImagePrediction} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ImagePrediction} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ImagePrediction} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  quickTestImageUrl(projectId: string, imageUrl: models.ImageUrl, options?: { iterationId? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ImagePrediction>;
  quickTestImageUrl(projectId: string, imageUrl: models.ImageUrl, callback: ServiceCallback<models.ImagePrediction>): void;
  quickTestImageUrl(projectId: string, imageUrl: models.ImageUrl, options: { iterationId? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImagePrediction>): void;


  /**
   * @summary Quick test an image.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {object} imageData Binary image data.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {uuid} [options.iterationId] Optional. Specifies the id of a
   * particular iteration to evaluate against.
   * The default iteration for the project will be used when not specified.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ImagePrediction>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  quickTestImageWithHttpOperationResponse(projectId: string, imageData: stream.Readable, options?: { iterationId? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImagePrediction>>;

  /**
   * @summary Quick test an image.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {object} imageData Binary image data.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {uuid} [options.iterationId] Optional. Specifies the id of a
   * particular iteration to evaluate against.
   * The default iteration for the project will be used when not specified.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ImagePrediction} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ImagePrediction} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ImagePrediction} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  quickTestImage(projectId: string, imageData: stream.Readable, options?: { iterationId? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ImagePrediction>;
  quickTestImage(projectId: string, imageData: stream.Readable, callback: ServiceCallback<models.ImagePrediction>): void;
  quickTestImage(projectId: string, imageData: stream.Readable, options: { iterationId? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImagePrediction>): void;


  /**
   * @summary Get images that were sent to your prediction endpoint.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {object} query Parameters used to query the predictions. Limited to
   * combining 2 tags.
   *
   * @param {string} [query.session]
   *
   * @param {string} [query.continuation]
   *
   * @param {number} [query.maxCount]
   *
   * @param {string} [query.orderBy] Possible values include: 'Newest', 'Oldest',
   * 'Suggested'
   *
   * @param {array} [query.tags]
   *
   * @param {uuid} [query.iterationId]
   *
   * @param {date} [query.startTime]
   *
   * @param {date} [query.endTime]
   *
   * @param {string} [query.application]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PredictionQueryResult>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  queryPredictionsWithHttpOperationResponse(projectId: string, query: models.PredictionQueryToken, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PredictionQueryResult>>;

  /**
   * @summary Get images that were sent to your prediction endpoint.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {object} query Parameters used to query the predictions. Limited to
   * combining 2 tags.
   *
   * @param {string} [query.session]
   *
   * @param {string} [query.continuation]
   *
   * @param {number} [query.maxCount]
   *
   * @param {string} [query.orderBy] Possible values include: 'Newest', 'Oldest',
   * 'Suggested'
   *
   * @param {array} [query.tags]
   *
   * @param {uuid} [query.iterationId]
   *
   * @param {date} [query.startTime]
   *
   * @param {date} [query.endTime]
   *
   * @param {string} [query.application]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {PredictionQueryResult} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {PredictionQueryResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PredictionQueryResult} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  queryPredictions(projectId: string, query: models.PredictionQueryToken, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PredictionQueryResult>;
  queryPredictions(projectId: string, query: models.PredictionQueryToken, callback: ServiceCallback<models.PredictionQueryResult>): void;
  queryPredictions(projectId: string, query: models.PredictionQueryToken, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PredictionQueryResult>): void;


  /**
   * @summary Get detailed performance information about an iteration.
   *
   * @param {uuid} projectId The id of the project the iteration belongs to.
   *
   * @param {uuid} iterationId The id of the iteration to get.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.threshold] The threshold used to determine true
   * predictions.
   *
   * @param {number} [options.overlapThreshold] If applicable, the bounding box
   * overlap threshold used to determine true predictions.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<IterationPerformance>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getIterationPerformanceWithHttpOperationResponse(projectId: string, iterationId: string, options?: { threshold? : number, overlapThreshold? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.IterationPerformance>>;

  /**
   * @summary Get detailed performance information about an iteration.
   *
   * @param {uuid} projectId The id of the project the iteration belongs to.
   *
   * @param {uuid} iterationId The id of the iteration to get.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.threshold] The threshold used to determine true
   * predictions.
   *
   * @param {number} [options.overlapThreshold] If applicable, the bounding box
   * overlap threshold used to determine true predictions.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {IterationPerformance} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {IterationPerformance} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link IterationPerformance} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getIterationPerformance(projectId: string, iterationId: string, options?: { threshold? : number, overlapThreshold? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.IterationPerformance>;
  getIterationPerformance(projectId: string, iterationId: string, callback: ServiceCallback<models.IterationPerformance>): void;
  getIterationPerformance(projectId: string, iterationId: string, options: { threshold? : number, overlapThreshold? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.IterationPerformance>): void;


  /**
   * @summary Get image with its prediction for a given project iteration.
   *
   * This API supports batching and range selection. By default it will only
   * return first 50 images matching images.
   * Use the {take} and {skip} parameters to control how many images to return in
   * a given batch.
   * The filtering is on an and/or relationship. For example, if the provided tag
   * ids are for the "Dog" and
   * "Cat" tags, then only images tagged with Dog and/or Cat will be returned
   *
   * @param {uuid} projectId The project id.
   *
   * @param {uuid} iterationId The iteration id. Defaults to workspace.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.tagIds] A list of tags ids to filter the images.
   * Defaults to all tagged images when null. Limited to 20.
   *
   * @param {string} [options.orderBy] The ordering. Defaults to newest. Possible
   * values include: 'Newest', 'Oldest'
   *
   * @param {number} [options.take] Maximum number of images to return. Defaults
   * to 50, limited to 256.
   *
   * @param {number} [options.skip] Number of images to skip before beginning the
   * image batch. Defaults to 0.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getImagePerformancesWithHttpOperationResponse(projectId: string, iterationId: string, options?: { tagIds? : string[], orderBy? : string, take? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImagePerformance[]>>;

  /**
   * @summary Get image with its prediction for a given project iteration.
   *
   * This API supports batching and range selection. By default it will only
   * return first 50 images matching images.
   * Use the {take} and {skip} parameters to control how many images to return in
   * a given batch.
   * The filtering is on an and/or relationship. For example, if the provided tag
   * ids are for the "Dog" and
   * "Cat" tags, then only images tagged with Dog and/or Cat will be returned
   *
   * @param {uuid} projectId The project id.
   *
   * @param {uuid} iterationId The iteration id. Defaults to workspace.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.tagIds] A list of tags ids to filter the images.
   * Defaults to all tagged images when null. Limited to 20.
   *
   * @param {string} [options.orderBy] The ordering. Defaults to newest. Possible
   * values include: 'Newest', 'Oldest'
   *
   * @param {number} [options.take] Maximum number of images to return. Defaults
   * to 50, limited to 256.
   *
   * @param {number} [options.skip] Number of images to skip before beginning the
   * image batch. Defaults to 0.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getImagePerformances(projectId: string, iterationId: string, options?: { tagIds? : string[], orderBy? : string, take? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.ImagePerformance[]>;
  getImagePerformances(projectId: string, iterationId: string, callback: ServiceCallback<models.ImagePerformance[]>): void;
  getImagePerformances(projectId: string, iterationId: string, options: { tagIds? : string[], orderBy? : string, take? : number, skip? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImagePerformance[]>): void;


  /**
   * @summary Gets the number of images tagged with the provided {tagIds} that
   * have prediction results from
   * training for the provided iteration {iterationId}.
   *
   * The filtering is on an and/or relationship. For example, if the provided tag
   * ids are for the "Dog" and
   * "Cat" tags, then only images tagged with Dog and/or Cat will be returned
   *
   * @param {uuid} projectId The project id.
   *
   * @param {uuid} iterationId The iteration id. Defaults to workspace.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.tagIds] A list of tags ids to filter the images to
   * count. Defaults to all tags when null.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Number>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getImagePerformanceCountWithHttpOperationResponse(projectId: string, iterationId: string, options?: { tagIds? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<number>>;

  /**
   * @summary Gets the number of images tagged with the provided {tagIds} that
   * have prediction results from
   * training for the provided iteration {iterationId}.
   *
   * The filtering is on an and/or relationship. For example, if the provided tag
   * ids are for the "Dog" and
   * "Cat" tags, then only images tagged with Dog and/or Cat will be returned
   *
   * @param {uuid} projectId The project id.
   *
   * @param {uuid} iterationId The iteration id. Defaults to workspace.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {array} [options.tagIds] A list of tags ids to filter the images to
   * count. Defaults to all tags when null.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Number} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Number} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getImagePerformanceCount(projectId: string, iterationId: string, options?: { tagIds? : string[], customHeaders? : { [headerName: string]: string; } }): Promise<number>;
  getImagePerformanceCount(projectId: string, iterationId: string, callback: ServiceCallback<number>): void;
  getImagePerformanceCount(projectId: string, iterationId: string, options: { tagIds? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<number>): void;


  /**
   * @summary Get your projects.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getProjectsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Project[]>>;

  /**
   * @summary Get your projects.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getProjects(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Project[]>;
  getProjects(callback: ServiceCallback<models.Project[]>): void;
  getProjects(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Project[]>): void;


  /**
   * @summary Create a project.
   *
   * @param {string} name Name of the project.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.description] The description of the project.
   *
   * @param {uuid} [options.domainId] The id of the domain to use for this
   * project. Defaults to General.
   *
   * @param {string} [options.classificationType] The type of classifier to
   * create for this project. Possible values include: 'Multiclass', 'Multilabel'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Project>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createProjectWithHttpOperationResponse(name: string, options?: { description? : string, domainId? : string, classificationType? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Project>>;

  /**
   * @summary Create a project.
   *
   * @param {string} name Name of the project.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.description] The description of the project.
   *
   * @param {uuid} [options.domainId] The id of the domain to use for this
   * project. Defaults to General.
   *
   * @param {string} [options.classificationType] The type of classifier to
   * create for this project. Possible values include: 'Multiclass', 'Multilabel'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Project} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Project} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Project} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createProject(name: string, options?: { description? : string, domainId? : string, classificationType? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Project>;
  createProject(name: string, callback: ServiceCallback<models.Project>): void;
  createProject(name: string, options: { description? : string, domainId? : string, classificationType? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Project>): void;


  /**
   * @summary Get a specific project.
   *
   * @param {uuid} projectId The id of the project to get.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Project>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getProjectWithHttpOperationResponse(projectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Project>>;

  /**
   * @summary Get a specific project.
   *
   * @param {uuid} projectId The id of the project to get.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Project} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Project} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Project} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getProject(projectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Project>;
  getProject(projectId: string, callback: ServiceCallback<models.Project>): void;
  getProject(projectId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Project>): void;


  /**
   * @summary Delete a specific project.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteProjectWithHttpOperationResponse(projectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Delete a specific project.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteProject(projectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  deleteProject(projectId: string, callback: ServiceCallback<void>): void;
  deleteProject(projectId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Update a specific project.
   *
   * @param {uuid} projectId The id of the project to update.
   *
   * @param {object} updatedProject The updated project model.
   *
   * @param {string} [updatedProject.name] Gets or sets the name of the project.
   *
   * @param {string} [updatedProject.description] Gets or sets the description of
   * the project.
   *
   * @param {object} [updatedProject.settings] Gets or sets the project settings.
   *
   * @param {uuid} [updatedProject.settings.domainId] Gets or sets the id of the
   * Domain to use with this project.
   *
   * @param {string} [updatedProject.settings.classificationType] Gets or sets
   * the classification type of the project. Possible values include:
   * 'Multiclass', 'Multilabel'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Project>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateProjectWithHttpOperationResponse(projectId: string, updatedProject: models.Project, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Project>>;

  /**
   * @summary Update a specific project.
   *
   * @param {uuid} projectId The id of the project to update.
   *
   * @param {object} updatedProject The updated project model.
   *
   * @param {string} [updatedProject.name] Gets or sets the name of the project.
   *
   * @param {string} [updatedProject.description] Gets or sets the description of
   * the project.
   *
   * @param {object} [updatedProject.settings] Gets or sets the project settings.
   *
   * @param {uuid} [updatedProject.settings.domainId] Gets or sets the id of the
   * Domain to use with this project.
   *
   * @param {string} [updatedProject.settings.classificationType] Gets or sets
   * the classification type of the project. Possible values include:
   * 'Multiclass', 'Multilabel'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Project} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Project} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Project} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateProject(projectId: string, updatedProject: models.Project, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Project>;
  updateProject(projectId: string, updatedProject: models.Project, callback: ServiceCallback<models.Project>): void;
  updateProject(projectId: string, updatedProject: models.Project, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Project>): void;


  /**
   * @summary Get iterations for the project.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getIterationsWithHttpOperationResponse(projectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Iteration[]>>;

  /**
   * @summary Get iterations for the project.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getIterations(projectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Iteration[]>;
  getIterations(projectId: string, callback: ServiceCallback<models.Iteration[]>): void;
  getIterations(projectId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Iteration[]>): void;


  /**
   * @summary Get a specific iteration.
   *
   * @param {uuid} projectId The id of the project the iteration belongs to.
   *
   * @param {uuid} iterationId The id of the iteration to get.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Iteration>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getIterationWithHttpOperationResponse(projectId: string, iterationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Iteration>>;

  /**
   * @summary Get a specific iteration.
   *
   * @param {uuid} projectId The id of the project the iteration belongs to.
   *
   * @param {uuid} iterationId The id of the iteration to get.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Iteration} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Iteration} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Iteration} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getIteration(projectId: string, iterationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Iteration>;
  getIteration(projectId: string, iterationId: string, callback: ServiceCallback<models.Iteration>): void;
  getIteration(projectId: string, iterationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Iteration>): void;


  /**
   * @summary Delete a specific iteration of a project.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {uuid} iterationId The iteration id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteIterationWithHttpOperationResponse(projectId: string, iterationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Delete a specific iteration of a project.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {uuid} iterationId The iteration id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteIteration(projectId: string, iterationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  deleteIteration(projectId: string, iterationId: string, callback: ServiceCallback<void>): void;
  deleteIteration(projectId: string, iterationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Update a specific iteration.
   *
   * @param {uuid} projectId Project id.
   *
   * @param {uuid} iterationId Iteration id.
   *
   * @param {object} updatedIteration The updated iteration model.
   *
   * @param {string} [updatedIteration.name] Gets or sets the name of the
   * iteration.
   *
   * @param {boolean} [updatedIteration.isDefault] Gets or sets a value
   * indicating whether the iteration is the default iteration for the project.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Iteration>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateIterationWithHttpOperationResponse(projectId: string, iterationId: string, updatedIteration: models.Iteration, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Iteration>>;

  /**
   * @summary Update a specific iteration.
   *
   * @param {uuid} projectId Project id.
   *
   * @param {uuid} iterationId Iteration id.
   *
   * @param {object} updatedIteration The updated iteration model.
   *
   * @param {string} [updatedIteration.name] Gets or sets the name of the
   * iteration.
   *
   * @param {boolean} [updatedIteration.isDefault] Gets or sets a value
   * indicating whether the iteration is the default iteration for the project.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Iteration} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Iteration} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Iteration} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateIteration(projectId: string, iterationId: string, updatedIteration: models.Iteration, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Iteration>;
  updateIteration(projectId: string, iterationId: string, updatedIteration: models.Iteration, callback: ServiceCallback<models.Iteration>): void;
  updateIteration(projectId: string, iterationId: string, updatedIteration: models.Iteration, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Iteration>): void;


  /**
   * @summary Queues project for training.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Iteration>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  trainProjectWithHttpOperationResponse(projectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Iteration>>;

  /**
   * @summary Queues project for training.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Iteration} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Iteration} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Iteration} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  trainProject(projectId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Iteration>;
  trainProject(projectId: string, callback: ServiceCallback<models.Iteration>): void;
  trainProject(projectId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Iteration>): void;


  /**
   * @summary Get the list of exports for a specific iteration.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {uuid} iterationId The iteration id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getExportsWithHttpOperationResponse(projectId: string, iterationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExportModel[]>>;

  /**
   * @summary Get the list of exports for a specific iteration.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {uuid} iterationId The iteration id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getExports(projectId: string, iterationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ExportModel[]>;
  getExports(projectId: string, iterationId: string, callback: ServiceCallback<models.ExportModel[]>): void;
  getExports(projectId: string, iterationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExportModel[]>): void;


  /**
   * @summary Export a trained iteration.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {uuid} iterationId The iteration id.
   *
   * @param {string} platform The target platform. Possible values include:
   * 'CoreML', 'TensorFlow', 'DockerFile', 'ONNX'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.flavor] The flavor of the target platform. Possible
   * values include: 'Linux', 'Windows', 'ONNX10', 'ONNX12'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ExportModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  exportIterationWithHttpOperationResponse(projectId: string, iterationId: string, platform: string, options?: { flavor? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ExportModel>>;

  /**
   * @summary Export a trained iteration.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {uuid} iterationId The iteration id.
   *
   * @param {string} platform The target platform. Possible values include:
   * 'CoreML', 'TensorFlow', 'DockerFile', 'ONNX'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.flavor] The flavor of the target platform. Possible
   * values include: 'Linux', 'Windows', 'ONNX10', 'ONNX12'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ExportModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ExportModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ExportModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  exportIteration(projectId: string, iterationId: string, platform: string, options?: { flavor? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ExportModel>;
  exportIteration(projectId: string, iterationId: string, platform: string, callback: ServiceCallback<models.ExportModel>): void;
  exportIteration(projectId: string, iterationId: string, platform: string, options: { flavor? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ExportModel>): void;


  /**
   * @summary Get information about a specific tag.
   *
   * @param {uuid} projectId The project this tag belongs to.
   *
   * @param {uuid} tagId The tag id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {uuid} [options.iterationId] The iteration to retrieve this tag from.
   * Optional, defaults to current training set.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Tag>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getTagWithHttpOperationResponse(projectId: string, tagId: string, options?: { iterationId? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Tag>>;

  /**
   * @summary Get information about a specific tag.
   *
   * @param {uuid} projectId The project this tag belongs to.
   *
   * @param {uuid} tagId The tag id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {uuid} [options.iterationId] The iteration to retrieve this tag from.
   * Optional, defaults to current training set.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Tag} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Tag} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Tag} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getTag(projectId: string, tagId: string, options?: { iterationId? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Tag>;
  getTag(projectId: string, tagId: string, callback: ServiceCallback<models.Tag>): void;
  getTag(projectId: string, tagId: string, options: { iterationId? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Tag>): void;


  /**
   * @summary Delete a tag from the project.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {uuid} tagId Id of the tag to be deleted.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteTagWithHttpOperationResponse(projectId: string, tagId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Delete a tag from the project.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {uuid} tagId Id of the tag to be deleted.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteTag(projectId: string, tagId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  deleteTag(projectId: string, tagId: string, callback: ServiceCallback<void>): void;
  deleteTag(projectId: string, tagId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Update a tag.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {uuid} tagId The id of the target tag.
   *
   * @param {object} updatedTag The updated tag model.
   *
   * @param {string} [updatedTag.name] Gets or sets the name of the tag.
   *
   * @param {string} [updatedTag.description] Gets or sets the description of the
   * tag.
   *
   * @param {string} [updatedTag.type] Gets or sets the type of the tag. Possible
   * values include: 'Regular', 'Negative'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Tag>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateTagWithHttpOperationResponse(projectId: string, tagId: string, updatedTag: models.Tag, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Tag>>;

  /**
   * @summary Update a tag.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {uuid} tagId The id of the target tag.
   *
   * @param {object} updatedTag The updated tag model.
   *
   * @param {string} [updatedTag.name] Gets or sets the name of the tag.
   *
   * @param {string} [updatedTag.description] Gets or sets the description of the
   * tag.
   *
   * @param {string} [updatedTag.type] Gets or sets the type of the tag. Possible
   * values include: 'Regular', 'Negative'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Tag} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Tag} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Tag} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateTag(projectId: string, tagId: string, updatedTag: models.Tag, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Tag>;
  updateTag(projectId: string, tagId: string, updatedTag: models.Tag, callback: ServiceCallback<models.Tag>): void;
  updateTag(projectId: string, tagId: string, updatedTag: models.Tag, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Tag>): void;


  /**
   * @summary Get the tags for a given project and iteration.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {uuid} [options.iterationId] The iteration id. Defaults to workspace.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getTagsWithHttpOperationResponse(projectId: string, options?: { iterationId? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Tag[]>>;

  /**
   * @summary Get the tags for a given project and iteration.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {uuid} [options.iterationId] The iteration id. Defaults to workspace.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getTags(projectId: string, options?: { iterationId? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Tag[]>;
  getTags(projectId: string, callback: ServiceCallback<models.Tag[]>): void;
  getTags(projectId: string, options: { iterationId? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Tag[]>): void;


  /**
   * @summary Create a tag for the project.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {string} name The tag name.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.description] Optional description for the tag.
   *
   * @param {string} [options.type] Optional type for the tag. Possible values
   * include: 'Regular', 'Negative'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Tag>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createTagWithHttpOperationResponse(projectId: string, name: string, options?: { description? : string, type? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Tag>>;

  /**
   * @summary Create a tag for the project.
   *
   * @param {uuid} projectId The project id.
   *
   * @param {string} name The tag name.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.description] Optional description for the tag.
   *
   * @param {string} [options.type] Optional type for the tag. Possible values
   * include: 'Regular', 'Negative'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Tag} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Tag} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Tag} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createTag(projectId: string, name: string, options?: { description? : string, type? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Tag>;
  createTag(projectId: string, name: string, callback: ServiceCallback<models.Tag>): void;
  createTag(projectId: string, name: string, options: { description? : string, type? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Tag>): void;
}

export { TrainingAPIClient, models as TrainingAPIModels };
