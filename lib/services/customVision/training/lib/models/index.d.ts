/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as moment from "moment";

export interface Domain {
  readonly id?: string;
  readonly name?: string;
  /**
   * Possible values include: 'Classification', 'ObjectDetection'
  */
  readonly type?: string;
  readonly exportable?: boolean;
  readonly enabled?: boolean;
}

/**
 * Entry associating a tag to an image.
*/
export interface ImageTagCreateEntry {
  /**
   * Id of the image.
  */
  imageId?: string;
  /**
   * Id of the tag.
  */
  tagId?: string;
}

/**
 * Batch of image tags.
*/
export interface ImageTagCreateBatch {
  /**
   * Image Tag entries to include in this batch.
  */
  tags?: ImageTagCreateEntry[];
}

export interface ImageTagCreateSummary {
  created?: ImageTagCreateEntry[];
  duplicated?: ImageTagCreateEntry[];
  exceeded?: ImageTagCreateEntry[];
}

/**
 * Entry associating a region to an image.
*/
export interface ImageRegionCreateEntry {
  /**
   * Id of the image.
  */
  imageId: string;
  /**
   * Id of the tag associated with this region.
  */
  tagId: string;
  /**
   * Coordinate of the left boundary.
  */
  left: number;
  /**
   * Coordinate of the top boundary.
  */
  top: number;
  /**
   * Width.
  */
  width: number;
  /**
   * Height.
  */
  height: number;
}

/**
 * Batch of image region information to create.
*/
export interface ImageRegionCreateBatch {
  regions?: ImageRegionCreateEntry[];
}

export interface ImageRegionCreateResult {
  readonly imageId?: string;
  readonly regionId?: string;
  readonly tagName?: string;
  readonly created?: Date;
  /**
   * Id of the tag associated with this region.
  */
  tagId: string;
  /**
   * Coordinate of the left boundary.
  */
  left: number;
  /**
   * Coordinate of the top boundary.
  */
  top: number;
  /**
   * Width.
  */
  width: number;
  /**
   * Height.
  */
  height: number;
}

export interface ImageRegionCreateSummary {
  created?: ImageRegionCreateResult[];
  duplicated?: ImageRegionCreateEntry[];
  exceeded?: ImageRegionCreateEntry[];
}

export interface ImageTag {
  readonly tagId?: string;
  readonly tagName?: string;
  readonly created?: Date;
}

export interface ImageRegion {
  readonly regionId?: string;
  readonly tagName?: string;
  readonly created?: Date;
  /**
   * Id of the tag associated with this region.
  */
  tagId: string;
  /**
   * Coordinate of the left boundary.
  */
  left: number;
  /**
   * Coordinate of the top boundary.
  */
  top: number;
  /**
   * Width.
  */
  width: number;
  /**
   * Height.
  */
  height: number;
}

/**
 * Image model to be sent as JSON.
*/
export interface Image {
  /**
   * Id of the image.
  */
  readonly id?: string;
  /**
   * Date the image was created.
  */
  readonly created?: Date;
  /**
   * Width of the image.
  */
  readonly width?: number;
  /**
   * Height of the image.
  */
  readonly height?: number;
  /**
   * The URI to the (resized) image used for training.
  */
  readonly resizedImageUri?: string;
  /**
   * The URI to the thumbnail of the original image.
  */
  readonly thumbnailUri?: string;
  /**
   * The URI to the original uploaded image.
  */
  readonly originalImageUri?: string;
  /**
   * Tags associated with this image.
  */
  readonly tags?: ImageTag[];
  /**
   * Regions associated with this image.
  */
  readonly regions?: ImageRegion[];
}

export interface ImageCreateResult {
  /**
   * Source URL of the image.
  */
  readonly sourceUrl?: string;
  /**
   * Status of the image creation. Possible values include: 'OK', 'OKDuplicate', 'ErrorSource',
   * 'ErrorImageFormat', 'ErrorImageSize', 'ErrorStorage', 'ErrorLimitExceed',
   * 'ErrorTagLimitExceed', 'ErrorRegionLimitExceed', 'ErrorUnknown',
   * 'ErrorNegativeAndRegularTagOnSameImage'
  */
  readonly status?: string;
  /**
   * The image.
  */
  readonly image?: Image;
}

export interface ImageCreateSummary {
  /**
   * True if all of the images in the batch were created successfully, otherwise false.
  */
  readonly isBatchSuccessful?: boolean;
  /**
   * List of the image creation results.
  */
  readonly images?: ImageCreateResult[];
}

export interface Region {
  /**
   * Id of the tag associated with this region.
  */
  tagId: string;
  /**
   * Coordinate of the left boundary.
  */
  left: number;
  /**
   * Coordinate of the top boundary.
  */
  top: number;
  /**
   * Width.
  */
  width: number;
  /**
   * Height.
  */
  height: number;
}

export interface ImageFileCreateEntry {
  name?: string;
  contents?: Buffer;
  tagIds?: string[];
  regions?: Region[];
}

export interface ImageFileCreateBatch {
  images?: ImageFileCreateEntry[];
  tagIds?: string[];
}

export interface ImageUrlCreateEntry {
  /**
   * Url of the image.
  */
  url: string;
  tagIds?: string[];
  regions?: Region[];
}

export interface ImageUrlCreateBatch {
  images?: ImageUrlCreateEntry[];
  tagIds?: string[];
}

export interface ImageIdCreateEntry {
  /**
   * Id of the image.
  */
  id?: string;
  tagIds?: string[];
  regions?: Region[];
}

export interface ImageIdCreateBatch {
  images?: ImageIdCreateEntry[];
  tagIds?: string[];
}

/**
 * Bounding box that defines a region of an image.
*/
export interface BoundingBox {
  /**
   * Coordinate of the left boundary.
  */
  left: number;
  /**
   * Coordinate of the top boundary.
  */
  top: number;
  /**
   * Width.
  */
  width: number;
  /**
   * Height.
  */
  height: number;
}

export interface RegionProposal {
  readonly confidence?: number;
  readonly boundingBox?: BoundingBox;
}

export interface ImageRegionProposal {
  readonly projectId?: string;
  readonly imageId?: string;
  readonly proposals?: RegionProposal[];
}

/**
 * Image url.
*/
export interface ImageUrl {
  /**
   * Url of the image.
  */
  url: string;
}

/**
 * Prediction result.
*/
export interface Prediction {
  /**
   * Probability of the tag.
  */
  readonly probability?: number;
  /**
   * Id of the predicted tag.
  */
  readonly tagId?: string;
  /**
   * Name of the predicted tag.
  */
  readonly tagName?: string;
  /**
   * Bounding box of the prediction.
  */
  readonly boundingBox?: BoundingBox;
}

/**
 * Result of an image prediction request.
*/
export interface ImagePrediction {
  /**
   * Prediction Id.
  */
  readonly id?: string;
  /**
   * Project Id.
  */
  readonly project?: string;
  /**
   * Iteration Id.
  */
  readonly iteration?: string;
  /**
   * Date this prediction was created.
  */
  readonly created?: Date;
  /**
   * List of predictions.
  */
  readonly predictions?: Prediction[];
}

export interface PredictionQueryTag {
  readonly id?: string;
  readonly minThreshold?: number;
  readonly maxThreshold?: number;
}

export interface PredictionQueryToken {
  session?: string;
  continuation?: string;
  maxCount?: number;
  /**
   * Possible values include: 'Newest', 'Oldest', 'Suggested'
  */
  orderBy?: string;
  tags?: PredictionQueryTag[];
  iterationId?: string;
  startTime?: Date;
  endTime?: Date;
  application?: string;
}

/**
 * result of an image classification request.
*/
export interface StoredImagePrediction {
  /**
   * The URI to the (resized) prediction image.
  */
  readonly resizedImageUri?: string;
  /**
   * The URI to the thumbnail of the original prediction image.
  */
  readonly thumbnailUri?: string;
  /**
   * The URI to the original prediction image.
  */
  readonly originalImageUri?: string;
  /**
   * Domain used for the prediction.
  */
  readonly domain?: string;
  /**
   * Prediction Id.
  */
  readonly id?: string;
  /**
   * Project Id.
  */
  readonly project?: string;
  /**
   * Iteration Id.
  */
  readonly iteration?: string;
  /**
   * Date this prediction was created.
  */
  readonly created?: Date;
  /**
   * List of predictions.
  */
  readonly predictions?: Prediction[];
}

export interface PredictionQueryResult {
  readonly token?: PredictionQueryToken;
  readonly results?: StoredImagePrediction[];
}

/**
 * Represents performance data for a particular tag in a trained iteration.
*/
export interface TagPerformance {
  readonly id?: string;
  readonly name?: string;
  /**
   * Gets the precision.
  */
  readonly precision?: number;
  /**
   * Gets the standard deviation for the precision.
  */
  readonly precisionStdDeviation?: number;
  /**
   * Gets the recall.
  */
  readonly recall?: number;
  /**
   * Gets the standard deviation for the recall.
  */
  readonly recallStdDeviation?: number;
  /**
   * Gets the average precision when applicable.
  */
  readonly averagePrecision?: number;
}

/**
 * Represents the detailed performance data for a trained iteration.
*/
export interface IterationPerformance {
  /**
   * Gets the per-tag performance details for this iteration.
  */
  readonly perTagPerformance?: TagPerformance[];
  /**
   * Gets the precision.
  */
  readonly precision?: number;
  /**
   * Gets the standard deviation for the precision.
  */
  readonly precisionStdDeviation?: number;
  /**
   * Gets the recall.
  */
  readonly recall?: number;
  /**
   * Gets the standard deviation for the recall.
  */
  readonly recallStdDeviation?: number;
  /**
   * Gets the average precision when applicable.
  */
  readonly averagePrecision?: number;
}

/**
 * Image performance model.
*/
export interface ImagePerformance {
  readonly predictions?: Prediction[];
  readonly id?: string;
  readonly created?: Date;
  readonly width?: number;
  readonly height?: number;
  readonly imageUri?: string;
  readonly thumbnailUri?: string;
  readonly tags?: ImageTag[];
  readonly regions?: ImageRegion[];
}

/**
 * Represents settings associated with a project.
*/
export interface ProjectSettings {
  /**
   * Gets or sets the id of the Domain to use with this project.
  */
  domainId?: string;
  /**
   * Gets or sets the classification type of the project. Possible values include: 'Multiclass',
   * 'Multilabel'
  */
  classificationType?: string;
  /**
   * A list of ExportPlatform that the trained model should be able to support.
  */
  targetExportPlatforms?: string[];
}

/**
 * Represents a project.
*/
export interface Project {
  /**
   * Gets the project id.
  */
  readonly id?: string;
  /**
   * Gets or sets the name of the project.
  */
  name: string;
  /**
   * Gets or sets the description of the project.
  */
  description: string;
  /**
   * Gets or sets the project settings.
  */
  settings: ProjectSettings;
  /**
   * Gets the date this project was created.
  */
  readonly created?: Date;
  /**
   * Gets the date this project was last modified.
  */
  readonly lastModified?: Date;
  /**
   * Gets the thumbnail url representing the image.
  */
  readonly thumbnailUri?: string;
  /**
   * Gets if the DR mode is on.
  */
  readonly drModeEnabled?: boolean;
}

/**
 * Iteration model to be sent over JSON.
*/
export interface Iteration {
  /**
   * Gets the id of the iteration.
  */
  readonly id?: string;
  /**
   * Gets or sets the name of the iteration.
  */
  name: string;
  /**
   * Gets the current iteration status.
  */
  readonly status?: string;
  /**
   * Gets the time this iteration was completed.
  */
  readonly created?: Date;
  /**
   * Gets the time this iteration was last modified.
  */
  readonly lastModified?: Date;
  /**
   * Gets the time this iteration was last modified.
  */
  readonly trainedAt?: Date;
  /**
   * Gets the project id of the iteration.
  */
  readonly projectId?: string;
  /**
   * Whether the iteration can be exported to another format for download.
  */
  readonly exportable?: boolean;
  /**
   * A set of platforms this iteration can export to.
  */
  readonly exportableTo?: string[];
  /**
   * Get or sets a guid of the domain the iteration has been trained on.
  */
  readonly domainId?: string;
  /**
   * Gets the classification type of the project. Possible values include: 'Multiclass',
   * 'Multilabel'
  */
  readonly classificationType?: string;
  /**
   * Gets the training type of the iteration. Possible values include: 'Regular', 'Advanced'
  */
  readonly trainingType?: string;
  /**
   * Gets the reserved advanced training budget for the iteration.
  */
  readonly reservedBudgetInHours?: number;
  /**
   * Name of the published model.
  */
  readonly publishName?: string;
  /**
   * Resource Provider Id this iteration was originally published to.
  */
  readonly originalPublishResourceId?: string;
}

export interface ExportModel {
  /**
   * Platform of the export. Possible values include: 'CoreML', 'TensorFlow', 'DockerFile', 'ONNX',
   * 'VAIDK'
  */
  readonly platform?: string;
  /**
   * Status of the export. Possible values include: 'Exporting', 'Failed', 'Done'
  */
  readonly status?: string;
  /**
   * URI used to download the model.
  */
  readonly downloadUri?: string;
  /**
   * Flavor of the export. Possible values include: 'Linux', 'Windows', 'ONNX10', 'ONNX12', 'ARM'
  */
  readonly flavor?: string;
  /**
   * Indicates an updated version of the export package is available and should be re-exported for
   * the latest changes.
  */
  readonly newerVersionAvailable?: boolean;
}

/**
 * Represents a Tag.
*/
export interface Tag {
  /**
   * Gets the Tag ID.
  */
  readonly id?: string;
  /**
   * Gets or sets the name of the tag.
  */
  name: string;
  /**
   * Gets or sets the description of the tag.
  */
  description: string;
  /**
   * Gets or sets the type of the tag. Possible values include: 'Regular', 'Negative'
  */
  type: string;
  /**
   * Gets the number of images with this tag.
  */
  readonly imageCount?: number;
}

export interface CustomVisionError {
  /**
   * The error code. Possible values include: 'NoError', 'BadRequest',
   * 'BadRequestExceededBatchSize', 'BadRequestNotSupported', 'BadRequestInvalidIds',
   * 'BadRequestProjectName', 'BadRequestProjectNameNotUnique', 'BadRequestProjectDescription',
   * 'BadRequestProjectUnknownDomain', 'BadRequestProjectUnknownClassification',
   * 'BadRequestProjectUnsupportedDomainTypeChange', 'BadRequestProjectUnsupportedExportPlatform',
   * 'BadRequestIterationName', 'BadRequestIterationNameNotUnique',
   * 'BadRequestIterationDescription', 'BadRequestIterationIsNotTrained',
   * 'BadRequestWorkspaceCannotBeModified', 'BadRequestWorkspaceNotDeletable', 'BadRequestTagName',
   * 'BadRequestTagNameNotUnique', 'BadRequestTagDescription', 'BadRequestTagType',
   * 'BadRequestMultipleNegativeTag', 'BadRequestImageTags', 'BadRequestImageRegions',
   * 'BadRequestNegativeAndRegularTagOnSameImage', 'BadRequestRequiredParamIsNull',
   * 'BadRequestIterationIsPublished', 'BadRequestInvalidPublishName',
   * 'BadRequestInvalidPublishTarget', 'BadRequestUnpublishFailed',
   * 'BadRequestIterationNotPublished', 'BadRequestSubscriptionApi',
   * 'BadRequestExceedProjectLimit', 'BadRequestExceedIterationPerProjectLimit',
   * 'BadRequestExceedTagPerProjectLimit', 'BadRequestExceedTagPerImageLimit',
   * 'BadRequestExceededQuota', 'BadRequestCannotMigrateProjectWithName',
   * 'BadRequestNotLimitedTrial', 'BadRequestImageBatch', 'BadRequestImageStream',
   * 'BadRequestImageUrl', 'BadRequestImageFormat', 'BadRequestImageSizeBytes',
   * 'BadRequestImageExceededCount', 'BadRequestTrainingNotNeeded',
   * 'BadRequestTrainingNotNeededButTrainingPipelineUpdated', 'BadRequestTrainingValidationFailed',
   * 'BadRequestClassificationTrainingValidationFailed',
   * 'BadRequestMultiClassClassificationTrainingValidationFailed',
   * 'BadRequestMultiLabelClassificationTrainingValidationFailed',
   * 'BadRequestDetectionTrainingValidationFailed', 'BadRequestTrainingAlreadyInProgress',
   * 'BadRequestDetectionTrainingNotAllowNegativeTag', 'BadRequestInvalidEmailAddress',
   * 'BadRequestDomainNotSupportedForAdvancedTraining',
   * 'BadRequestExportPlatformNotSupportedForAdvancedTraining',
   * 'BadRequestReservedBudgetInHoursNotEnoughForAdvancedTraining',
   * 'BadRequestExportValidationFailed', 'BadRequestExportAlreadyInProgress',
   * 'BadRequestPredictionIdsMissing', 'BadRequestPredictionIdsExceededCount',
   * 'BadRequestPredictionTagsExceededCount', 'BadRequestPredictionResultsExceededCount',
   * 'BadRequestPredictionInvalidApplicationName', 'BadRequestPredictionInvalidQueryParameters',
   * 'BadRequestInvalid', 'UnsupportedMediaType', 'Forbidden', 'ForbiddenUser',
   * 'ForbiddenUserResource', 'ForbiddenUserSignupDisabled',
   * 'ForbiddenUserSignupAllowanceExceeded', 'ForbiddenUserDoesNotExist', 'ForbiddenUserDisabled',
   * 'ForbiddenUserInsufficientCapability', 'ForbiddenDRModeEnabled', 'ForbiddenInvalid',
   * 'NotFound', 'NotFoundProject', 'NotFoundProjectDefaultIteration', 'NotFoundIteration',
   * 'NotFoundIterationPerformance', 'NotFoundTag', 'NotFoundImage', 'NotFoundDomain',
   * 'NotFoundApimSubscription', 'NotFoundInvalid', 'Conflict', 'ConflictInvalid', 'ErrorUnknown',
   * 'ErrorProjectInvalidWorkspace', 'ErrorProjectInvalidPipelineConfiguration',
   * 'ErrorProjectInvalidDomain', 'ErrorProjectTrainingRequestFailed',
   * 'ErrorProjectExportRequestFailed', 'ErrorFeaturizationServiceUnavailable',
   * 'ErrorFeaturizationQueueTimeout', 'ErrorFeaturizationInvalidFeaturizer',
   * 'ErrorFeaturizationAugmentationUnavailable', 'ErrorFeaturizationUnrecognizedJob',
   * 'ErrorFeaturizationAugmentationError', 'ErrorExporterInvalidPlatform',
   * 'ErrorExporterInvalidFeaturizer', 'ErrorExporterInvalidClassifier',
   * 'ErrorPredictionServiceUnavailable', 'ErrorPredictionModelNotFound',
   * 'ErrorPredictionModelNotCached', 'ErrorPrediction', 'ErrorPredictionStorage',
   * 'ErrorRegionProposal', 'ErrorInvalid'
  */
  code: string;
  /**
   * A message explaining the error reported by the service.
  */
  message: string;
}
