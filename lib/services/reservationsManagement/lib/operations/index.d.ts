/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * ReservationOrder
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AzureReservationAPI.
 */
export interface ReservationOrder {


    /**
     * @summary Calculate price for a `ReservationOrder`.
     *
     * Calculate price for placing a `ReservationOrder`.
     *
     * @param {object} body Information needed for calculate or purchase
     * reservation
     *
     * @param {object} [body.sku]
     *
     * @param {string} [body.sku.name]
     *
     * @param {string} [body.location] The Azure Region where the reserved resource
     * lives.
     *
     * @param {string} [body.reservedResourceType] Possible values include:
     * 'VirtualMachines', 'SqlDatabases', 'SuseLinux', 'CosmosDb'
     *
     * @param {string} [body.billingScopeId]
     *
     * @param {string} [body.term] Possible values include: 'P1Y', 'P3Y'
     *
     * @param {number} [body.quantity]
     *
     * @param {string} [body.displayName] Friendly name of the Reservation
     *
     * @param {string} [body.appliedScopeType] Possible values include: 'Single',
     * 'Shared'
     *
     * @param {array} [body.appliedScopes]
     *
     * @param {object} [body.reservedResourceProperties] Properties specific to
     * each reserved resource type. Not required if not applicable.
     *
     * @param {string} [body.reservedResourceProperties.instanceFlexibility]
     * Possible values include: 'On', 'Off'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CalculatePriceResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    calculateWithHttpOperationResponse(body: models.PurchaseRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CalculatePriceResponse>>;

    /**
     * @summary Calculate price for a `ReservationOrder`.
     *
     * Calculate price for placing a `ReservationOrder`.
     *
     * @param {object} body Information needed for calculate or purchase
     * reservation
     *
     * @param {object} [body.sku]
     *
     * @param {string} [body.sku.name]
     *
     * @param {string} [body.location] The Azure Region where the reserved resource
     * lives.
     *
     * @param {string} [body.reservedResourceType] Possible values include:
     * 'VirtualMachines', 'SqlDatabases', 'SuseLinux', 'CosmosDb'
     *
     * @param {string} [body.billingScopeId]
     *
     * @param {string} [body.term] Possible values include: 'P1Y', 'P3Y'
     *
     * @param {number} [body.quantity]
     *
     * @param {string} [body.displayName] Friendly name of the Reservation
     *
     * @param {string} [body.appliedScopeType] Possible values include: 'Single',
     * 'Shared'
     *
     * @param {array} [body.appliedScopes]
     *
     * @param {object} [body.reservedResourceProperties] Properties specific to
     * each reserved resource type. Not required if not applicable.
     *
     * @param {string} [body.reservedResourceProperties.instanceFlexibility]
     * Possible values include: 'On', 'Off'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CalculatePriceResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CalculatePriceResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CalculatePriceResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    calculate(body: models.PurchaseRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CalculatePriceResponse>;
    calculate(body: models.PurchaseRequest, callback: ServiceCallback<models.CalculatePriceResponse>): void;
    calculate(body: models.PurchaseRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CalculatePriceResponse>): void;


    /**
     * @summary Get all `ReservationOrder`s.
     *
     * List of all the `ReservationOrder`s that the user has access to in the
     * current tenant.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReservationOrderList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReservationOrderList>>;

    /**
     * @summary Get all `ReservationOrder`s.
     *
     * List of all the `ReservationOrder`s that the user has access to in the
     * current tenant.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReservationOrderList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReservationOrderList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReservationOrderList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ReservationOrderList>;
    list(callback: ServiceCallback<models.ReservationOrderList>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReservationOrderList>): void;


    /**
     * @summary Purchase `ReservationOrder`
     *
     * Purchase `ReservationOrder` and create resource under the specified URI.
     *
     * @param {string} reservationOrderId Order Id of the reservation
     *
     * @param {object} body Information needed for calculate or purchase
     * reservation
     *
     * @param {object} [body.sku]
     *
     * @param {string} [body.sku.name]
     *
     * @param {string} [body.location] The Azure Region where the reserved resource
     * lives.
     *
     * @param {string} [body.reservedResourceType] Possible values include:
     * 'VirtualMachines', 'SqlDatabases', 'SuseLinux', 'CosmosDb'
     *
     * @param {string} [body.billingScopeId]
     *
     * @param {string} [body.term] Possible values include: 'P1Y', 'P3Y'
     *
     * @param {number} [body.quantity]
     *
     * @param {string} [body.displayName] Friendly name of the Reservation
     *
     * @param {string} [body.appliedScopeType] Possible values include: 'Single',
     * 'Shared'
     *
     * @param {array} [body.appliedScopes]
     *
     * @param {object} [body.reservedResourceProperties] Properties specific to
     * each reserved resource type. Not required if not applicable.
     *
     * @param {string} [body.reservedResourceProperties.instanceFlexibility]
     * Possible values include: 'On', 'Off'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReservationOrderResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    purchaseWithHttpOperationResponse(reservationOrderId: string, body: models.PurchaseRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReservationOrderResponse>>;

    /**
     * @summary Purchase `ReservationOrder`
     *
     * Purchase `ReservationOrder` and create resource under the specified URI.
     *
     * @param {string} reservationOrderId Order Id of the reservation
     *
     * @param {object} body Information needed for calculate or purchase
     * reservation
     *
     * @param {object} [body.sku]
     *
     * @param {string} [body.sku.name]
     *
     * @param {string} [body.location] The Azure Region where the reserved resource
     * lives.
     *
     * @param {string} [body.reservedResourceType] Possible values include:
     * 'VirtualMachines', 'SqlDatabases', 'SuseLinux', 'CosmosDb'
     *
     * @param {string} [body.billingScopeId]
     *
     * @param {string} [body.term] Possible values include: 'P1Y', 'P3Y'
     *
     * @param {number} [body.quantity]
     *
     * @param {string} [body.displayName] Friendly name of the Reservation
     *
     * @param {string} [body.appliedScopeType] Possible values include: 'Single',
     * 'Shared'
     *
     * @param {array} [body.appliedScopes]
     *
     * @param {object} [body.reservedResourceProperties] Properties specific to
     * each reserved resource type. Not required if not applicable.
     *
     * @param {string} [body.reservedResourceProperties.instanceFlexibility]
     * Possible values include: 'On', 'Off'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReservationOrderResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReservationOrderResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReservationOrderResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    purchase(reservationOrderId: string, body: models.PurchaseRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ReservationOrderResponse>;
    purchase(reservationOrderId: string, body: models.PurchaseRequest, callback: ServiceCallback<models.ReservationOrderResponse>): void;
    purchase(reservationOrderId: string, body: models.PurchaseRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReservationOrderResponse>): void;


    /**
     * @summary Get a specific `ReservationOrder`.
     *
     * Get the details of the `ReservationOrder`.
     *
     * @param {string} reservationOrderId Order Id of the reservation
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReservationOrderResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(reservationOrderId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReservationOrderResponse>>;

    /**
     * @summary Get a specific `ReservationOrder`.
     *
     * Get the details of the `ReservationOrder`.
     *
     * @param {string} reservationOrderId Order Id of the reservation
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReservationOrderResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReservationOrderResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReservationOrderResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(reservationOrderId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ReservationOrderResponse>;
    get(reservationOrderId: string, callback: ServiceCallback<models.ReservationOrderResponse>): void;
    get(reservationOrderId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReservationOrderResponse>): void;


    /**
     * @summary Purchase `ReservationOrder`
     *
     * Purchase `ReservationOrder` and create resource under the specified URI.
     *
     * @param {string} reservationOrderId Order Id of the reservation
     *
     * @param {object} body Information needed for calculate or purchase
     * reservation
     *
     * @param {object} [body.sku]
     *
     * @param {string} [body.sku.name]
     *
     * @param {string} [body.location] The Azure Region where the reserved resource
     * lives.
     *
     * @param {string} [body.reservedResourceType] Possible values include:
     * 'VirtualMachines', 'SqlDatabases', 'SuseLinux', 'CosmosDb'
     *
     * @param {string} [body.billingScopeId]
     *
     * @param {string} [body.term] Possible values include: 'P1Y', 'P3Y'
     *
     * @param {number} [body.quantity]
     *
     * @param {string} [body.displayName] Friendly name of the Reservation
     *
     * @param {string} [body.appliedScopeType] Possible values include: 'Single',
     * 'Shared'
     *
     * @param {array} [body.appliedScopes]
     *
     * @param {object} [body.reservedResourceProperties] Properties specific to
     * each reserved resource type. Not required if not applicable.
     *
     * @param {string} [body.reservedResourceProperties.instanceFlexibility]
     * Possible values include: 'On', 'Off'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReservationOrderResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginPurchaseWithHttpOperationResponse(reservationOrderId: string, body: models.PurchaseRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReservationOrderResponse>>;

    /**
     * @summary Purchase `ReservationOrder`
     *
     * Purchase `ReservationOrder` and create resource under the specified URI.
     *
     * @param {string} reservationOrderId Order Id of the reservation
     *
     * @param {object} body Information needed for calculate or purchase
     * reservation
     *
     * @param {object} [body.sku]
     *
     * @param {string} [body.sku.name]
     *
     * @param {string} [body.location] The Azure Region where the reserved resource
     * lives.
     *
     * @param {string} [body.reservedResourceType] Possible values include:
     * 'VirtualMachines', 'SqlDatabases', 'SuseLinux', 'CosmosDb'
     *
     * @param {string} [body.billingScopeId]
     *
     * @param {string} [body.term] Possible values include: 'P1Y', 'P3Y'
     *
     * @param {number} [body.quantity]
     *
     * @param {string} [body.displayName] Friendly name of the Reservation
     *
     * @param {string} [body.appliedScopeType] Possible values include: 'Single',
     * 'Shared'
     *
     * @param {array} [body.appliedScopes]
     *
     * @param {object} [body.reservedResourceProperties] Properties specific to
     * each reserved resource type. Not required if not applicable.
     *
     * @param {string} [body.reservedResourceProperties.instanceFlexibility]
     * Possible values include: 'On', 'Off'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReservationOrderResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReservationOrderResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReservationOrderResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginPurchase(reservationOrderId: string, body: models.PurchaseRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ReservationOrderResponse>;
    beginPurchase(reservationOrderId: string, body: models.PurchaseRequest, callback: ServiceCallback<models.ReservationOrderResponse>): void;
    beginPurchase(reservationOrderId: string, body: models.PurchaseRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReservationOrderResponse>): void;


    /**
     * @summary Get all `ReservationOrder`s.
     *
     * List of all the `ReservationOrder`s that the user has access to in the
     * current tenant.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReservationOrderList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReservationOrderList>>;

    /**
     * @summary Get all `ReservationOrder`s.
     *
     * List of all the `ReservationOrder`s that the user has access to in the
     * current tenant.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReservationOrderList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReservationOrderList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReservationOrderList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ReservationOrderList>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ReservationOrderList>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReservationOrderList>): void;
}

/**
 * @class
 * Reservation
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AzureReservationAPI.
 */
export interface Reservation {


    /**
     * @summary Split the `Reservation`.
     *
     * Split a `Reservation` into two `Reservation`s with specified quantity
     * distribution.
     *
     * @param {string} reservationOrderId Order Id of the reservation
     *
     * @param {object} body Information needed to Split a reservation item
     *
     * @param {array} [body.quantities] List of the quantities in the new
     * reservations to create.
     *
     * @param {string} [body.reservationId] Resource id of the reservation to be
     * split. Format of the resource id should be
     * /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    splitWithHttpOperationResponse(reservationOrderId: string, body: models.SplitRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReservationResponse[]>>;

    /**
     * @summary Split the `Reservation`.
     *
     * Split a `Reservation` into two `Reservation`s with specified quantity
     * distribution.
     *
     * @param {string} reservationOrderId Order Id of the reservation
     *
     * @param {object} body Information needed to Split a reservation item
     *
     * @param {array} [body.quantities] List of the quantities in the new
     * reservations to create.
     *
     * @param {string} [body.reservationId] Resource id of the reservation to be
     * split. Format of the resource id should be
     * /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    split(reservationOrderId: string, body: models.SplitRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ReservationResponse[]>;
    split(reservationOrderId: string, body: models.SplitRequest, callback: ServiceCallback<models.ReservationResponse[]>): void;
    split(reservationOrderId: string, body: models.SplitRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReservationResponse[]>): void;


    /**
     * @summary Merges two `Reservation`s.
     *
     * Merge the specified `Reservation`s into a new `Reservation`. The two
     * `Reservation`s being merged must have same properties.
     *
     * @param {string} reservationOrderId Order Id of the reservation
     *
     * @param {object} body Information needed for commercial request for a
     * reservation
     *
     * @param {array} [body.sources] Format of the resource id should be
     * /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    mergeWithHttpOperationResponse(reservationOrderId: string, body: models.MergeRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReservationResponse[]>>;

    /**
     * @summary Merges two `Reservation`s.
     *
     * Merge the specified `Reservation`s into a new `Reservation`. The two
     * `Reservation`s being merged must have same properties.
     *
     * @param {string} reservationOrderId Order Id of the reservation
     *
     * @param {object} body Information needed for commercial request for a
     * reservation
     *
     * @param {array} [body.sources] Format of the resource id should be
     * /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    merge(reservationOrderId: string, body: models.MergeRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ReservationResponse[]>;
    merge(reservationOrderId: string, body: models.MergeRequest, callback: ServiceCallback<models.ReservationResponse[]>): void;
    merge(reservationOrderId: string, body: models.MergeRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReservationResponse[]>): void;


    /**
     * @summary Get `Reservation`s in a given reservation Order
     *
     * List `Reservation`s within a single `ReservationOrder`.
     *
     * @param {string} reservationOrderId Order Id of the reservation
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReservationList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(reservationOrderId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReservationList>>;

    /**
     * @summary Get `Reservation`s in a given reservation Order
     *
     * List `Reservation`s within a single `ReservationOrder`.
     *
     * @param {string} reservationOrderId Order Id of the reservation
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReservationList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReservationList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReservationList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(reservationOrderId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ReservationList>;
    list(reservationOrderId: string, callback: ServiceCallback<models.ReservationList>): void;
    list(reservationOrderId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReservationList>): void;


    /**
     * @summary Get `Reservation` details.
     *
     * Get specific `Reservation` details.
     *
     * @param {string} reservationId Id of the Reservation Item
     *
     * @param {string} reservationOrderId Order Id of the reservation
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReservationResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(reservationId: string, reservationOrderId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReservationResponse>>;

    /**
     * @summary Get `Reservation` details.
     *
     * Get specific `Reservation` details.
     *
     * @param {string} reservationId Id of the Reservation Item
     *
     * @param {string} reservationOrderId Order Id of the reservation
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReservationResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReservationResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReservationResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(reservationId: string, reservationOrderId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ReservationResponse>;
    get(reservationId: string, reservationOrderId: string, callback: ServiceCallback<models.ReservationResponse>): void;
    get(reservationId: string, reservationOrderId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReservationResponse>): void;


    /**
     * @summary Updates a `Reservation`.
     *
     * Updates the applied scopes of the `Reservation`.
     *
     * @param {string} reservationOrderId Order Id of the reservation
     *
     * @param {string} reservationId Id of the Reservation Item
     *
     * @param {object} parameters Information needed to patch a reservation item
     *
     * @param {string} [parameters.appliedScopeType] Possible values include:
     * 'Single', 'Shared'
     *
     * @param {array} [parameters.appliedScopes]
     *
     * @param {string} [parameters.instanceFlexibility] Possible values include:
     * 'On', 'Off'
     *
     * @param {string} [parameters.name] Name of the Reservation
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReservationResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(reservationOrderId: string, reservationId: string, parameters: models.Patch, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReservationResponse>>;

    /**
     * @summary Updates a `Reservation`.
     *
     * Updates the applied scopes of the `Reservation`.
     *
     * @param {string} reservationOrderId Order Id of the reservation
     *
     * @param {string} reservationId Id of the Reservation Item
     *
     * @param {object} parameters Information needed to patch a reservation item
     *
     * @param {string} [parameters.appliedScopeType] Possible values include:
     * 'Single', 'Shared'
     *
     * @param {array} [parameters.appliedScopes]
     *
     * @param {string} [parameters.instanceFlexibility] Possible values include:
     * 'On', 'Off'
     *
     * @param {string} [parameters.name] Name of the Reservation
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReservationResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReservationResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReservationResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(reservationOrderId: string, reservationId: string, parameters: models.Patch, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ReservationResponse>;
    update(reservationOrderId: string, reservationId: string, parameters: models.Patch, callback: ServiceCallback<models.ReservationResponse>): void;
    update(reservationOrderId: string, reservationId: string, parameters: models.Patch, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReservationResponse>): void;


    /**
     * @summary Get `Reservation` revisions.
     *
     * List of all the revisions for the `Reservation`.
     *
     * @param {string} reservationId Id of the Reservation Item
     *
     * @param {string} reservationOrderId Order Id of the reservation
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReservationList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listRevisionsWithHttpOperationResponse(reservationId: string, reservationOrderId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReservationList>>;

    /**
     * @summary Get `Reservation` revisions.
     *
     * List of all the revisions for the `Reservation`.
     *
     * @param {string} reservationId Id of the Reservation Item
     *
     * @param {string} reservationOrderId Order Id of the reservation
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReservationList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReservationList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReservationList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listRevisions(reservationId: string, reservationOrderId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ReservationList>;
    listRevisions(reservationId: string, reservationOrderId: string, callback: ServiceCallback<models.ReservationList>): void;
    listRevisions(reservationId: string, reservationOrderId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReservationList>): void;


    /**
     * @summary Split the `Reservation`.
     *
     * Split a `Reservation` into two `Reservation`s with specified quantity
     * distribution.
     *
     * @param {string} reservationOrderId Order Id of the reservation
     *
     * @param {object} body Information needed to Split a reservation item
     *
     * @param {array} [body.quantities] List of the quantities in the new
     * reservations to create.
     *
     * @param {string} [body.reservationId] Resource id of the reservation to be
     * split. Format of the resource id should be
     * /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginSplitWithHttpOperationResponse(reservationOrderId: string, body: models.SplitRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReservationResponse[]>>;

    /**
     * @summary Split the `Reservation`.
     *
     * Split a `Reservation` into two `Reservation`s with specified quantity
     * distribution.
     *
     * @param {string} reservationOrderId Order Id of the reservation
     *
     * @param {object} body Information needed to Split a reservation item
     *
     * @param {array} [body.quantities] List of the quantities in the new
     * reservations to create.
     *
     * @param {string} [body.reservationId] Resource id of the reservation to be
     * split. Format of the resource id should be
     * /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginSplit(reservationOrderId: string, body: models.SplitRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ReservationResponse[]>;
    beginSplit(reservationOrderId: string, body: models.SplitRequest, callback: ServiceCallback<models.ReservationResponse[]>): void;
    beginSplit(reservationOrderId: string, body: models.SplitRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReservationResponse[]>): void;


    /**
     * @summary Merges two `Reservation`s.
     *
     * Merge the specified `Reservation`s into a new `Reservation`. The two
     * `Reservation`s being merged must have same properties.
     *
     * @param {string} reservationOrderId Order Id of the reservation
     *
     * @param {object} body Information needed for commercial request for a
     * reservation
     *
     * @param {array} [body.sources] Format of the resource id should be
     * /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginMergeWithHttpOperationResponse(reservationOrderId: string, body: models.MergeRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReservationResponse[]>>;

    /**
     * @summary Merges two `Reservation`s.
     *
     * Merge the specified `Reservation`s into a new `Reservation`. The two
     * `Reservation`s being merged must have same properties.
     *
     * @param {string} reservationOrderId Order Id of the reservation
     *
     * @param {object} body Information needed for commercial request for a
     * reservation
     *
     * @param {array} [body.sources] Format of the resource id should be
     * /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginMerge(reservationOrderId: string, body: models.MergeRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ReservationResponse[]>;
    beginMerge(reservationOrderId: string, body: models.MergeRequest, callback: ServiceCallback<models.ReservationResponse[]>): void;
    beginMerge(reservationOrderId: string, body: models.MergeRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReservationResponse[]>): void;


    /**
     * @summary Updates a `Reservation`.
     *
     * Updates the applied scopes of the `Reservation`.
     *
     * @param {string} reservationOrderId Order Id of the reservation
     *
     * @param {string} reservationId Id of the Reservation Item
     *
     * @param {object} parameters Information needed to patch a reservation item
     *
     * @param {string} [parameters.appliedScopeType] Possible values include:
     * 'Single', 'Shared'
     *
     * @param {array} [parameters.appliedScopes]
     *
     * @param {string} [parameters.instanceFlexibility] Possible values include:
     * 'On', 'Off'
     *
     * @param {string} [parameters.name] Name of the Reservation
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReservationResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(reservationOrderId: string, reservationId: string, parameters: models.Patch, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReservationResponse>>;

    /**
     * @summary Updates a `Reservation`.
     *
     * Updates the applied scopes of the `Reservation`.
     *
     * @param {string} reservationOrderId Order Id of the reservation
     *
     * @param {string} reservationId Id of the Reservation Item
     *
     * @param {object} parameters Information needed to patch a reservation item
     *
     * @param {string} [parameters.appliedScopeType] Possible values include:
     * 'Single', 'Shared'
     *
     * @param {array} [parameters.appliedScopes]
     *
     * @param {string} [parameters.instanceFlexibility] Possible values include:
     * 'On', 'Off'
     *
     * @param {string} [parameters.name] Name of the Reservation
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReservationResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReservationResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReservationResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(reservationOrderId: string, reservationId: string, parameters: models.Patch, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ReservationResponse>;
    beginUpdate(reservationOrderId: string, reservationId: string, parameters: models.Patch, callback: ServiceCallback<models.ReservationResponse>): void;
    beginUpdate(reservationOrderId: string, reservationId: string, parameters: models.Patch, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReservationResponse>): void;


    /**
     * @summary Get `Reservation`s in a given reservation Order
     *
     * List `Reservation`s within a single `ReservationOrder`.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReservationList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReservationList>>;

    /**
     * @summary Get `Reservation`s in a given reservation Order
     *
     * List `Reservation`s within a single `ReservationOrder`.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReservationList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReservationList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReservationList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ReservationList>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ReservationList>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReservationList>): void;


    /**
     * @summary Get `Reservation` revisions.
     *
     * List of all the revisions for the `Reservation`.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ReservationList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listRevisionsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ReservationList>>;

    /**
     * @summary Get `Reservation` revisions.
     *
     * List of all the revisions for the `Reservation`.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ReservationList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ReservationList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ReservationList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listRevisionsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ReservationList>;
    listRevisionsNext(nextPageLink: string, callback: ServiceCallback<models.ReservationList>): void;
    listRevisionsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ReservationList>): void;
}

/**
 * @class
 * Operation
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AzureReservationAPI.
 */
export interface Operation {


    /**
     * @summary Get operations.
     *
     * List all the operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationList>>;

    /**
     * @summary Get operations.
     *
     * List all the operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationList>;
    list(callback: ServiceCallback<models.OperationList>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationList>): void;


    /**
     * @summary Get operations.
     *
     * List all the operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationList>>;

    /**
     * @summary Get operations.
     *
     * List all the operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationList>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.OperationList>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationList>): void;
}
