/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError } from "ms-rest-azure";
import * as moment from "moment";

export {

  BaseResource,
  CloudError
};

export interface SkuName {
  name?: string;
}

export interface SkuProperty {
  /**
   * An invariant to describe the feature.
  */
  name?: string;
  /**
   * An invariant if the feature is measured by quantity.
  */
  value?: string;
}

export interface SkuRestriction {
  /**
   * The type of restrictions.
  */
  type?: string;
  /**
   * The value of restrictions. If the restriction type is set to location. This would be different
   * locations where the SKU is restricted.
  */
  values?: string[];
  /**
   * The reason for restriction.
  */
  reasonCode?: string;
}

export interface Catalog {
  /**
   * The type of resource the SKU applies to.
  */
  readonly resourceType?: string;
  /**
   * The name of SKU
  */
  readonly name?: string;
  /**
   * Available reservation terms for this resource
  */
  readonly terms?: string[];
  readonly locations?: string[];
  readonly skuProperties?: SkuProperty[];
  readonly restrictions?: SkuRestriction[];
}

export interface ExtendedStatusInfo {
  /**
   * Possible values include: 'None', 'Pending', 'Active', 'PurchaseError',
   * 'PaymentInstrumentError', 'Split', 'Merged', 'Expired', 'Succeeded'
  */
  statusCode?: string;
  /**
   * The message giving detailed information about the status code.
  */
  message?: string;
}

export interface ReservationSplitProperties {
  /**
   * List of destination Resource Id that are created due to split. Format of the resource Id is
   * /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}
  */
  splitDestinations?: string[];
  /**
   * Resource Id of the Reservation from which this is split. Format of the resource Id is
   * /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}
  */
  splitSource?: string;
}

export interface ReservationMergeProperties {
  /**
   * Reservation Resource Id Created due to the merge. Format of the resource Id is
   * /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}
  */
  mergeDestination?: string;
  /**
   * Resource Ids of the Source Reservation's merged to form this Reservation. Format of the
   * resource Id is
   * /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}
  */
  mergeSources?: string[];
}

export interface ReservationProperties {
  /**
   * Possible values include: 'VirtualMachines', 'SqlDatabases', 'SuseLinux', 'CosmosDb'
  */
  reservedResourceType?: string;
  /**
   * Possible values include: 'On', 'Off'
  */
  instanceFlexibility?: string;
  /**
   * Friendly name for user to easily identify the reservation
  */
  displayName?: string;
  appliedScopes?: string[];
  /**
   * Possible values include: 'Single', 'Shared'
  */
  appliedScopeType?: string;
  quantity?: number;
  /**
   * Current state of the reservation.
  */
  provisioningState?: string;
  /**
   * DateTime of the Reservation starting when this version is effective from.
  */
  effectiveDateTime?: Date;
  /**
   * DateTime of the last time the Reservation was updated.
  */
  readonly lastUpdatedDateTime?: Date;
  /**
   * This is the date when the Reservation will expire.
  */
  expiryDate?: Date;
  /**
   * Description of the SKU in english.
  */
  skuDescription?: string;
  extendedStatusInfo?: ExtendedStatusInfo;
  splitProperties?: ReservationSplitProperties;
  mergeProperties?: ReservationMergeProperties;
}

export interface ReservationResponse extends BaseResource {
  /**
   * The Azure Region where the reserved resource lives.
  */
  readonly location?: string;
  etag?: number;
  /**
   * Identifier of the reservation
  */
  readonly id?: string;
  /**
   * Name of the reservation
  */
  readonly name?: string;
  sku?: SkuName;
  properties?: ReservationProperties;
  /**
   * Type of resource. "Microsoft.Capacity/reservationOrders/reservations"
  */
  readonly type?: string;
}

export interface ReservationOrderResponse extends BaseResource {
  etag?: number;
  /**
   * Identifier of the reservation
  */
  readonly id?: string;
  /**
   * Name of the reservation
  */
  readonly name?: string;
  /**
   * Friendly name for user to easily identified the reservation.
  */
  displayName?: string;
  /**
   * This is the DateTime when the reservation was initially requested for purchase.
  */
  requestDateTime?: Date;
  /**
   * This is the DateTime when the reservation was created.
  */
  createdDateTime?: Date;
  /**
   * This is the date when the Reservation will expire.
  */
  expiryDate?: Date;
  originalQuantity?: number;
  /**
   * Possible values include: 'P1Y', 'P3Y'
  */
  term?: string;
  /**
   * Current state of the reservation.
  */
  provisioningState?: string;
  reservations?: ReservationResponse[];
  /**
   * Type of resource. "Microsoft.Capacity/reservations"
  */
  readonly type?: string;
}

/**
 * Currency and amount that customer will be charged in customer's local currency. Tax is not
 * included.
*/
export interface CalculatePriceResponsePropertiesBillingCurrencyTotal {
  currencyCode?: string;
  amount?: number;
}

/**
 * Amount that Microsoft uses for record. Used during refund for calculating refund limit. Tax is
 * not included.
*/
export interface CalculatePriceResponsePropertiesPricingCurrencyTotal {
  currencyCode?: string;
  amount?: number;
}

export interface CalculatePriceResponseProperties {
  /**
   * Currency and amount that customer will be charged in customer's local currency. Tax is not
   * included.
  */
  billingCurrencyTotal?: CalculatePriceResponsePropertiesBillingCurrencyTotal;
  /**
   * True if billing is managed by Microsoft Partner. Used only for CSP accounts.
  */
  isBillingPartnerManaged?: boolean;
  /**
   * GUID that represents reservation order that can be placed after calculating price.
  */
  reservationOrderId?: string;
  /**
   * Title of SKU that is being purchased.
  */
  skuTitle?: string;
  /**
   * Description of SKU that is being purchased.
  */
  skuDescription?: string;
  /**
   * Amount that Microsoft uses for record. Used during refund for calculating refund limit. Tax is
   * not included.
  */
  pricingCurrencyTotal?: CalculatePriceResponsePropertiesPricingCurrencyTotal;
}

export interface CalculatePriceResponse {
  properties?: CalculatePriceResponseProperties;
}

/**
 * Properties specific to each reserved resource type. Not required if not applicable.
*/
export interface PurchaseRequestPropertiesReservedResourceProperties {
  /**
   * Possible values include: 'On', 'Off'
  */
  instanceFlexibility?: string;
}

export interface MergeRequest {
  /**
   * Format of the resource id should be
   * /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}
  */
  sources?: string[];
}

export interface PurchaseRequest {
  sku?: SkuName;
  /**
   * The Azure Region where the reserved resource lives.
  */
  location?: string;
  /**
   * Possible values include: 'VirtualMachines', 'SqlDatabases', 'SuseLinux', 'CosmosDb'
  */
  reservedResourceType?: string;
  billingScopeId?: string;
  /**
   * Possible values include: 'P1Y', 'P3Y'
  */
  term?: string;
  quantity?: number;
  /**
   * Friendly name of the Reservation
  */
  displayName?: string;
  /**
   * Possible values include: 'Single', 'Shared'
  */
  appliedScopeType?: string;
  appliedScopes?: string[];
  /**
   * Properties specific to each reserved resource type. Not required if not applicable.
  */
  reservedResourceProperties?: PurchaseRequestPropertiesReservedResourceProperties;
}

export interface Patch {
  /**
   * Possible values include: 'Single', 'Shared'
  */
  appliedScopeType?: string;
  appliedScopes?: string[];
  /**
   * Possible values include: 'On', 'Off'
  */
  instanceFlexibility?: string;
  /**
   * Name of the Reservation
  */
  name?: string;
}

export interface SplitRequest {
  /**
   * List of the quantities in the new reservations to create.
  */
  quantities?: number[];
  /**
   * Resource id of the reservation to be split. Format of the resource id should be
   * /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}
  */
  reservationId?: string;
}

export interface ExtendedErrorInfo {
  /**
   * Possible values include: 'NotSpecified', 'InternalServerError', 'ServerTimeout',
   * 'AuthorizationFailed', 'BadRequest', 'ClientCertificateThumbprintNotSet',
   * 'InvalidRequestContent', 'OperationFailed', 'HttpMethodNotSupported', 'InvalidRequestUri',
   * 'MissingTenantId', 'InvalidTenantId', 'InvalidReservationOrderId', 'InvalidReservationId',
   * 'ReservationIdNotInReservationOrder', 'ReservationOrderNotFound', 'InvalidSubscriptionId',
   * 'InvalidAccessToken', 'InvalidLocationId', 'UnauthenticatedRequestsThrottled',
   * 'InvalidHealthCheckType', 'Forbidden', 'BillingScopeIdCannotBeChanged',
   * 'AppliedScopesNotAssociatedWithCommerceAccount', 'PatchValuesSameAsExisting',
   * 'RoleAssignmentCreationFailed', 'ReservationOrderCreationFailed',
   * 'ReservationOrderNotEnabled', 'CapacityUpdateScopesFailed', 'UnsupportedReservationTerm',
   * 'ReservationOrderIdAlreadyExists', 'RiskCheckFailed', 'CreateQuoteFailed',
   * 'ActivateQuoteFailed', 'NonsupportedAccountId', 'PaymentInstrumentNotFound',
   * 'MissingAppliedScopesForSingle', 'NoValidReservationsToReRate', 'ReRateOnlyAllowedForEA',
   * 'OperationCannotBePerformedInCurrentState', 'InvalidSingleAppliedScopesCount',
   * 'InvalidFulfillmentRequestParameters', 'NotSupportedCountry', 'InvalidRefundQuantity',
   * 'PurchaseError', 'BillingCustomerInputError', 'BillingPaymentInstrumentSoftError',
   * 'BillingPaymentInstrumentHardError', 'BillingTransientError', 'BillingError',
   * 'FulfillmentConfigurationError', 'FulfillmentOutOfStockError', 'FulfillmentTransientError',
   * 'FulfillmentError', 'CalculatePriceFailed'
  */
  code?: string;
  message?: string;
}

export interface ErrorModel {
  error?: ExtendedErrorInfo;
}

export interface AppliedReservationList {
  value?: string[];
  /**
   * Url to get the next page of reservations
  */
  nextLink?: string;
}

export interface AppliedReservations {
  /**
   * Identifier of the applied reservations
  */
  readonly id?: string;
  /**
   * Name of resource
  */
  readonly name?: string;
  /**
   * Type of resource. "Microsoft.Capacity/AppliedReservations"
  */
  readonly type?: string;
  reservationOrderIds?: AppliedReservationList;
}

export interface OperationDisplay {
  provider?: string;
  resource?: string;
  operation?: string;
  description?: string;
}

export interface OperationResponse {
  name?: string;
  display?: OperationDisplay;
  origin?: string;
}

export interface ReservationOrderList extends Array<ReservationOrderResponse> {
  /**
   * Url to get the next page of reservationOrders.
  */
  nextLink?: string;
}

export interface ReservationList extends Array<ReservationResponse> {
  /**
   * Url to get the next page of reservations.
  */
  nextLink?: string;
}

export interface OperationList extends Array<OperationResponse> {
  /**
   * Url to get the next page of items.
  */
  nextLink?: string;
}
