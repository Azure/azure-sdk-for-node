/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Class representing a ErrorModel.
 */
class ErrorModel {
  /**
   * Create a ErrorModel.
   * @property {object} [error]
   * @property {string} [error.code] Possible values include: 'NotSpecified',
   * 'InternalServerError', 'ServerTimeout', 'AuthorizationFailed',
   * 'BadRequest', 'ClientCertificateThumbprintNotSet',
   * 'InvalidRequestContent', 'OperationFailed', 'HttpMethodNotSupported',
   * 'InvalidRequestUri', 'MissingTenantId', 'InvalidTenantId',
   * 'InvalidReservationOrderId', 'InvalidReservationId',
   * 'ReservationIdNotInReservationOrder', 'ReservationOrderNotFound',
   * 'InvalidSubscriptionId', 'InvalidAccessToken', 'InvalidLocationId',
   * 'UnauthenticatedRequestsThrottled', 'InvalidHealthCheckType', 'Forbidden',
   * 'BillingScopeIdCannotBeChanged',
   * 'AppliedScopesNotAssociatedWithCommerceAccount',
   * 'PatchValuesSameAsExisting', 'RoleAssignmentCreationFailed',
   * 'ReservationOrderCreationFailed', 'ReservationOrderNotEnabled',
   * 'CapacityUpdateScopesFailed', 'UnsupportedReservationTerm',
   * 'ReservationOrderIdAlreadyExists', 'RiskCheckFailed', 'CreateQuoteFailed',
   * 'ActivateQuoteFailed', 'NonsupportedAccountId',
   * 'PaymentInstrumentNotFound', 'MissingAppliedScopesForSingle',
   * 'NoValidReservationsToReRate', 'ReRateOnlyAllowedForEA',
   * 'OperationCannotBePerformedInCurrentState',
   * 'InvalidSingleAppliedScopesCount', 'InvalidFulfillmentRequestParameters',
   * 'NotSupportedCountry', 'InvalidRefundQuantity', 'PurchaseError',
   * 'BillingCustomerInputError', 'BillingPaymentInstrumentSoftError',
   * 'BillingPaymentInstrumentHardError', 'BillingTransientError',
   * 'BillingError', 'FulfillmentConfigurationError',
   * 'FulfillmentOutOfStockError', 'FulfillmentTransientError',
   * 'FulfillmentError', 'CalculatePriceFailed'
   * @property {string} [error.message]
   */
  constructor() {
  }

  /**
   * Defines the metadata of ErrorModel
   *
   * @returns {object} metadata of ErrorModel
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Error',
      type: {
        name: 'Composite',
        className: 'ErrorModel',
        modelProperties: {
          error: {
            required: false,
            serializedName: 'error',
            type: {
              name: 'Composite',
              className: 'ExtendedErrorInfo'
            }
          }
        }
      }
    };
  }
}

module.exports = ErrorModel;
