/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const WebResource = msRest.WebResource;

/**
 * @summary Detect profanity and match against custom and shared blacklists
 *
 * Detects profanity in more than 100 languages and match against custom and
 * shared blacklists.
 *
 * @param {string} textContentType The content type. Possible values include:
 * 'text/plain', 'text/html', 'text/xml', 'text/markdown'
 *
 * @param {object} textContent Content to screen.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.language] Language of the text.
 *
 * @param {boolean} [options.autocorrect] Autocorrect text.
 *
 * @param {boolean} [options.pII] Detect personal identifiable information.
 *
 * @param {string} [options.listId] The list Id.
 *
 * @param {boolean} [options.classify] Classify input.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Screen} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _screenText(textContentType, textContent, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let language = (options && options.language !== undefined) ? options.language : undefined;
  let autocorrect = (options && options.autocorrect !== undefined) ? options.autocorrect : false;
  let pII = (options && options.pII !== undefined) ? options.pII : false;
  let listId = (options && options.listId !== undefined) ? options.listId : undefined;
  let classify = (options && options.classify !== undefined) ? options.classify : false;
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (language !== null && language !== undefined && typeof language.valueOf() !== 'string') {
      throw new Error('language must be of type string.');
    }
    if (autocorrect !== null && autocorrect !== undefined && typeof autocorrect !== 'boolean') {
      throw new Error('autocorrect must be of type boolean.');
    }
    if (pII !== null && pII !== undefined && typeof pII !== 'boolean') {
      throw new Error('pII must be of type boolean.');
    }
    if (listId !== null && listId !== undefined && typeof listId.valueOf() !== 'string') {
      throw new Error('listId must be of type string.');
    }
    if (classify !== null && classify !== undefined && typeof classify !== 'boolean') {
      throw new Error('classify must be of type boolean.');
    }
    if (textContentType === null || textContentType === undefined || typeof textContentType.valueOf() !== 'string') {
      throw new Error('textContentType cannot be null or undefined and it must be of type string.');
    }
    if (textContent === null || textContent === undefined) {
      throw new Error('textContent cannot be null or undefined and it must be of type object.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'contentmoderator/moderate/v1.0/ProcessText/Screen/';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  let queryParameters = [];
  if (language !== null && language !== undefined) {
    queryParameters.push('language=' + encodeURIComponent(language));
  }
  if (autocorrect !== null && autocorrect !== undefined) {
    queryParameters.push('autocorrect=' + encodeURIComponent(autocorrect.toString()));
  }
  if (pII !== null && pII !== undefined) {
    queryParameters.push('PII=' + encodeURIComponent(pII.toString()));
  }
  if (listId !== null && listId !== undefined) {
    queryParameters.push('listId=' + encodeURIComponent(listId));
  }
  if (classify !== null && classify !== undefined) {
    queryParameters.push('classify=' + encodeURIComponent(classify.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'text/plain';
  if (textContentType !== undefined && textContentType !== null) {
    httpRequest.headers['Content-Type'] = textContentType;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = textContent;
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Screen']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * This operation will detect the language of given input content. Returns the
 * <a href="http://www-01.sil.org/iso639-3/codes.asp">ISO 639-3 code</a> for
 * the predominant language comprising the submitted text. Over 110 languages
 * supported.
 *
 * @param {string} textContentType The content type. Possible values include:
 * 'text/plain', 'text/html', 'text/xml', 'text/markdown'
 *
 * @param {object} textContent Content to screen.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link DetectedLanguage} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _detectLanguage(textContentType, textContent, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (textContentType === null || textContentType === undefined || typeof textContentType.valueOf() !== 'string') {
      throw new Error('textContentType cannot be null or undefined and it must be of type string.');
    }
    if (textContent === null || textContent === undefined) {
      throw new Error('textContent cannot be null or undefined and it must be of type object.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'contentmoderator/moderate/v1.0/ProcessText/DetectLanguage';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'text/plain';
  if (textContentType !== undefined && textContentType !== null) {
    httpRequest.headers['Content-Type'] = textContentType;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = textContent;
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['DetectedLanguage']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a TextModeration. */
class TextModeration {
  /**
   * Create a TextModeration.
   * @param {ContentModeratorClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._screenText = _screenText;
    this._detectLanguage = _detectLanguage;
  }

  /**
   * @summary Detect profanity and match against custom and shared blacklists
   *
   * Detects profanity in more than 100 languages and match against custom and
   * shared blacklists.
   *
   * @param {string} textContentType The content type. Possible values include:
   * 'text/plain', 'text/html', 'text/xml', 'text/markdown'
   *
   * @param {object} textContent Content to screen.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.language] Language of the text.
   *
   * @param {boolean} [options.autocorrect] Autocorrect text.
   *
   * @param {boolean} [options.pII] Detect personal identifiable information.
   *
   * @param {string} [options.listId] The list Id.
   *
   * @param {boolean} [options.classify] Classify input.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Screen>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  screenTextWithHttpOperationResponse(textContentType, textContent, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._screenText(textContentType, textContent, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Detect profanity and match against custom and shared blacklists
   *
   * Detects profanity in more than 100 languages and match against custom and
   * shared blacklists.
   *
   * @param {string} textContentType The content type. Possible values include:
   * 'text/plain', 'text/html', 'text/xml', 'text/markdown'
   *
   * @param {object} textContent Content to screen.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.language] Language of the text.
   *
   * @param {boolean} [options.autocorrect] Autocorrect text.
   *
   * @param {boolean} [options.pII] Detect personal identifiable information.
   *
   * @param {string} [options.listId] The list Id.
   *
   * @param {boolean} [options.classify] Classify input.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Screen} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Screen} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  screenText(textContentType, textContent, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._screenText(textContentType, textContent, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._screenText(textContentType, textContent, options, optionalCallback);
    }
  }

  /**
   * This operation will detect the language of given input content. Returns the
   * <a href="http://www-01.sil.org/iso639-3/codes.asp">ISO 639-3 code</a> for
   * the predominant language comprising the submitted text. Over 110 languages
   * supported.
   *
   * @param {string} textContentType The content type. Possible values include:
   * 'text/plain', 'text/html', 'text/xml', 'text/markdown'
   *
   * @param {object} textContent Content to screen.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DetectedLanguage>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  detectLanguageWithHttpOperationResponse(textContentType, textContent, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._detectLanguage(textContentType, textContent, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * This operation will detect the language of given input content. Returns the
   * <a href="http://www-01.sil.org/iso639-3/codes.asp">ISO 639-3 code</a> for
   * the predominant language comprising the submitted text. Over 110 languages
   * supported.
   *
   * @param {string} textContentType The content type. Possible values include:
   * 'text/plain', 'text/html', 'text/xml', 'text/markdown'
   *
   * @param {object} textContent Content to screen.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {DetectedLanguage} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DetectedLanguage} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  detectLanguage(textContentType, textContent, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._detectLanguage(textContentType, textContent, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._detectLanguage(textContentType, textContent, options, optionalCallback);
    }
  }

}

module.exports = TextModeration;
