/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as stream from 'stream';
import * as models from '../models';


/**
 * @class
 * ImageModeration
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ContentModeratorClient.
 */
export interface ImageModeration {


    /**
     * Returns the list of faces found.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.cacheImage] Whether to retain the submitted image
     * for future use; defaults to false if omitted.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FoundFaces>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    findFacesWithHttpOperationResponse(options?: { cacheImage? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FoundFaces>>;

    /**
     * Returns the list of faces found.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.cacheImage] Whether to retain the submitted image
     * for future use; defaults to false if omitted.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FoundFaces} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FoundFaces} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FoundFaces} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    findFaces(options?: { cacheImage? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.FoundFaces>;
    findFaces(callback: ServiceCallback<models.FoundFaces>): void;
    findFaces(options: { cacheImage? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FoundFaces>): void;


    /**
     * Returns any text found in the image for the language specified. If no
     * language is specified in input then the detection defaults to English.
     *
     * @param {string} language Language of the terms.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.cacheImage] Whether to retain the submitted image
     * for future use; defaults to false if omitted.
     *
     * @param {boolean} [options.enhanced] When set to True, the image goes through
     * additional processing to come with additional candidates.
     *
     * image/tiff is not supported when enhanced is set to true
     *
     * Note: This impacts the response time.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OCR>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    oCRMethodWithHttpOperationResponse(language: string, options?: { cacheImage? : boolean, enhanced? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OCR>>;

    /**
     * Returns any text found in the image for the language specified. If no
     * language is specified in input then the detection defaults to English.
     *
     * @param {string} language Language of the terms.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.cacheImage] Whether to retain the submitted image
     * for future use; defaults to false if omitted.
     *
     * @param {boolean} [options.enhanced] When set to True, the image goes through
     * additional processing to come with additional candidates.
     *
     * image/tiff is not supported when enhanced is set to true
     *
     * Note: This impacts the response time.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OCR} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OCR} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OCR} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    oCRMethod(language: string, options?: { cacheImage? : boolean, enhanced? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.OCR>;
    oCRMethod(language: string, callback: ServiceCallback<models.OCR>): void;
    oCRMethod(language: string, options: { cacheImage? : boolean, enhanced? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OCR>): void;


    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.cacheImage] Whether to retain the submitted image
     * for future use; defaults to false if omitted.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Evaluate>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    evaluateMethodWithHttpOperationResponse(options?: { cacheImage? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Evaluate>>;

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.cacheImage] Whether to retain the submitted image
     * for future use; defaults to false if omitted.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Evaluate} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Evaluate} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Evaluate} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    evaluateMethod(options?: { cacheImage? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.Evaluate>;
    evaluateMethod(callback: ServiceCallback<models.Evaluate>): void;
    evaluateMethod(options: { cacheImage? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Evaluate>): void;


    /**
     * Fuzzily match an image against one of your custom Image Lists. You can
     * create and manage your custom image lists using <a
     * href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe">this</a>
     * API.
     *
     * Returns ID and tags of matching image.<br/>
     * <br/>
     * Note: Refresh Index must be run on the corresponding Image List before
     * additions and removals are reflected in the response.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.listId] The list Id.
     *
     * @param {boolean} [options.cacheImage] Whether to retain the submitted image
     * for future use; defaults to false if omitted.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MatchResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    matchMethodWithHttpOperationResponse(options?: { listId? : string, cacheImage? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MatchResponse>>;

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can
     * create and manage your custom image lists using <a
     * href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe">this</a>
     * API.
     *
     * Returns ID and tags of matching image.<br/>
     * <br/>
     * Note: Refresh Index must be run on the corresponding Image List before
     * additions and removals are reflected in the response.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.listId] The list Id.
     *
     * @param {boolean} [options.cacheImage] Whether to retain the submitted image
     * for future use; defaults to false if omitted.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MatchResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MatchResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MatchResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    matchMethod(options?: { listId? : string, cacheImage? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.MatchResponse>;
    matchMethod(callback: ServiceCallback<models.MatchResponse>): void;
    matchMethod(options: { listId? : string, cacheImage? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MatchResponse>): void;


    /**
     * Returns the list of faces found.
     *
     * @param {object} imageStream The image file.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.cacheImage] Whether to retain the submitted image
     * for future use; defaults to false if omitted.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FoundFaces>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    findFacesFileInputWithHttpOperationResponse(imageStream: stream.Readable, options?: { cacheImage? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FoundFaces>>;

    /**
     * Returns the list of faces found.
     *
     * @param {object} imageStream The image file.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.cacheImage] Whether to retain the submitted image
     * for future use; defaults to false if omitted.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FoundFaces} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FoundFaces} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FoundFaces} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    findFacesFileInput(imageStream: stream.Readable, options?: { cacheImage? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.FoundFaces>;
    findFacesFileInput(imageStream: stream.Readable, callback: ServiceCallback<models.FoundFaces>): void;
    findFacesFileInput(imageStream: stream.Readable, options: { cacheImage? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FoundFaces>): void;


    /**
     * Returns the list of faces found.
     *
     * @param {string} contentType The content type.
     *
     * @param {object} imageUrl The image url.
     *
     * @param {string} [imageUrl.dataRepresentation]
     *
     * @param {string} [imageUrl.value]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.cacheImage] Whether to retain the submitted image
     * for future use; defaults to false if omitted.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<FoundFaces>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    findFacesUrlInputWithHttpOperationResponse(contentType: string, imageUrl: models.BodyModel, options?: { cacheImage? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FoundFaces>>;

    /**
     * Returns the list of faces found.
     *
     * @param {string} contentType The content type.
     *
     * @param {object} imageUrl The image url.
     *
     * @param {string} [imageUrl.dataRepresentation]
     *
     * @param {string} [imageUrl.value]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.cacheImage] Whether to retain the submitted image
     * for future use; defaults to false if omitted.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {FoundFaces} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {FoundFaces} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link FoundFaces} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    findFacesUrlInput(contentType: string, imageUrl: models.BodyModel, options?: { cacheImage? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.FoundFaces>;
    findFacesUrlInput(contentType: string, imageUrl: models.BodyModel, callback: ServiceCallback<models.FoundFaces>): void;
    findFacesUrlInput(contentType: string, imageUrl: models.BodyModel, options: { cacheImage? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FoundFaces>): void;


    /**
     * Returns any text found in the image for the language specified. If no
     * language is specified in input then the detection defaults to English.
     *
     * @param {string} language Language of the terms.
     *
     * @param {string} contentType The content type.
     *
     * @param {object} imageUrl The image url.
     *
     * @param {string} [imageUrl.dataRepresentation]
     *
     * @param {string} [imageUrl.value]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.cacheImage] Whether to retain the submitted image
     * for future use; defaults to false if omitted.
     *
     * @param {boolean} [options.enhanced] When set to True, the image goes through
     * additional processing to come with additional candidates.
     *
     * image/tiff is not supported when enhanced is set to true
     *
     * Note: This impacts the response time.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OCR>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    oCRUrlInputWithHttpOperationResponse(language: string, contentType: string, imageUrl: models.BodyModel, options?: { cacheImage? : boolean, enhanced? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OCR>>;

    /**
     * Returns any text found in the image for the language specified. If no
     * language is specified in input then the detection defaults to English.
     *
     * @param {string} language Language of the terms.
     *
     * @param {string} contentType The content type.
     *
     * @param {object} imageUrl The image url.
     *
     * @param {string} [imageUrl.dataRepresentation]
     *
     * @param {string} [imageUrl.value]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.cacheImage] Whether to retain the submitted image
     * for future use; defaults to false if omitted.
     *
     * @param {boolean} [options.enhanced] When set to True, the image goes through
     * additional processing to come with additional candidates.
     *
     * image/tiff is not supported when enhanced is set to true
     *
     * Note: This impacts the response time.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OCR} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OCR} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OCR} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    oCRUrlInput(language: string, contentType: string, imageUrl: models.BodyModel, options?: { cacheImage? : boolean, enhanced? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.OCR>;
    oCRUrlInput(language: string, contentType: string, imageUrl: models.BodyModel, callback: ServiceCallback<models.OCR>): void;
    oCRUrlInput(language: string, contentType: string, imageUrl: models.BodyModel, options: { cacheImage? : boolean, enhanced? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OCR>): void;


    /**
     * Returns any text found in the image for the language specified. If no
     * language is specified in input then the detection defaults to English.
     *
     * @param {string} language Language of the terms.
     *
     * @param {object} imageStream The image file.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.cacheImage] Whether to retain the submitted image
     * for future use; defaults to false if omitted.
     *
     * @param {boolean} [options.enhanced] When set to True, the image goes through
     * additional processing to come with additional candidates.
     *
     * image/tiff is not supported when enhanced is set to true
     *
     * Note: This impacts the response time.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OCR>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    oCRFileInputWithHttpOperationResponse(language: string, imageStream: stream.Readable, options?: { cacheImage? : boolean, enhanced? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OCR>>;

    /**
     * Returns any text found in the image for the language specified. If no
     * language is specified in input then the detection defaults to English.
     *
     * @param {string} language Language of the terms.
     *
     * @param {object} imageStream The image file.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.cacheImage] Whether to retain the submitted image
     * for future use; defaults to false if omitted.
     *
     * @param {boolean} [options.enhanced] When set to True, the image goes through
     * additional processing to come with additional candidates.
     *
     * image/tiff is not supported when enhanced is set to true
     *
     * Note: This impacts the response time.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OCR} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OCR} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OCR} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    oCRFileInput(language: string, imageStream: stream.Readable, options?: { cacheImage? : boolean, enhanced? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.OCR>;
    oCRFileInput(language: string, imageStream: stream.Readable, callback: ServiceCallback<models.OCR>): void;
    oCRFileInput(language: string, imageStream: stream.Readable, options: { cacheImage? : boolean, enhanced? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OCR>): void;


    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param {object} imageStream The image file.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.cacheImage] Whether to retain the submitted image
     * for future use; defaults to false if omitted.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Evaluate>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    evaluateFileInputWithHttpOperationResponse(imageStream: stream.Readable, options?: { cacheImage? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Evaluate>>;

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param {object} imageStream The image file.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.cacheImage] Whether to retain the submitted image
     * for future use; defaults to false if omitted.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Evaluate} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Evaluate} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Evaluate} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    evaluateFileInput(imageStream: stream.Readable, options?: { cacheImage? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.Evaluate>;
    evaluateFileInput(imageStream: stream.Readable, callback: ServiceCallback<models.Evaluate>): void;
    evaluateFileInput(imageStream: stream.Readable, options: { cacheImage? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Evaluate>): void;


    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param {string} contentType The content type.
     *
     * @param {object} imageUrl The image url.
     *
     * @param {string} [imageUrl.dataRepresentation]
     *
     * @param {string} [imageUrl.value]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.cacheImage] Whether to retain the submitted image
     * for future use; defaults to false if omitted.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Evaluate>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    evaluateUrlInputWithHttpOperationResponse(contentType: string, imageUrl: models.BodyModel, options?: { cacheImage? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Evaluate>>;

    /**
     * Returns probabilities of the image containing racy or adult content.
     *
     * @param {string} contentType The content type.
     *
     * @param {object} imageUrl The image url.
     *
     * @param {string} [imageUrl.dataRepresentation]
     *
     * @param {string} [imageUrl.value]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {boolean} [options.cacheImage] Whether to retain the submitted image
     * for future use; defaults to false if omitted.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Evaluate} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Evaluate} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Evaluate} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    evaluateUrlInput(contentType: string, imageUrl: models.BodyModel, options?: { cacheImage? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.Evaluate>;
    evaluateUrlInput(contentType: string, imageUrl: models.BodyModel, callback: ServiceCallback<models.Evaluate>): void;
    evaluateUrlInput(contentType: string, imageUrl: models.BodyModel, options: { cacheImage? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Evaluate>): void;


    /**
     * Fuzzily match an image against one of your custom Image Lists. You can
     * create and manage your custom image lists using <a
     * href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe">this</a>
     * API.
     *
     * Returns ID and tags of matching image.<br/>
     * <br/>
     * Note: Refresh Index must be run on the corresponding Image List before
     * additions and removals are reflected in the response.
     *
     * @param {string} contentType The content type.
     *
     * @param {object} imageUrl The image url.
     *
     * @param {string} [imageUrl.dataRepresentation]
     *
     * @param {string} [imageUrl.value]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.listId] The list Id.
     *
     * @param {boolean} [options.cacheImage] Whether to retain the submitted image
     * for future use; defaults to false if omitted.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MatchResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    matchUrlInputWithHttpOperationResponse(contentType: string, imageUrl: models.BodyModel, options?: { listId? : string, cacheImage? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MatchResponse>>;

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can
     * create and manage your custom image lists using <a
     * href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe">this</a>
     * API.
     *
     * Returns ID and tags of matching image.<br/>
     * <br/>
     * Note: Refresh Index must be run on the corresponding Image List before
     * additions and removals are reflected in the response.
     *
     * @param {string} contentType The content type.
     *
     * @param {object} imageUrl The image url.
     *
     * @param {string} [imageUrl.dataRepresentation]
     *
     * @param {string} [imageUrl.value]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.listId] The list Id.
     *
     * @param {boolean} [options.cacheImage] Whether to retain the submitted image
     * for future use; defaults to false if omitted.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MatchResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MatchResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MatchResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    matchUrlInput(contentType: string, imageUrl: models.BodyModel, options?: { listId? : string, cacheImage? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.MatchResponse>;
    matchUrlInput(contentType: string, imageUrl: models.BodyModel, callback: ServiceCallback<models.MatchResponse>): void;
    matchUrlInput(contentType: string, imageUrl: models.BodyModel, options: { listId? : string, cacheImage? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MatchResponse>): void;


    /**
     * Fuzzily match an image against one of your custom Image Lists. You can
     * create and manage your custom image lists using <a
     * href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe">this</a>
     * API.
     *
     * Returns ID and tags of matching image.<br/>
     * <br/>
     * Note: Refresh Index must be run on the corresponding Image List before
     * additions and removals are reflected in the response.
     *
     * @param {object} imageStream The image file.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.listId] The list Id.
     *
     * @param {boolean} [options.cacheImage] Whether to retain the submitted image
     * for future use; defaults to false if omitted.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<MatchResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    matchFileInputWithHttpOperationResponse(imageStream: stream.Readable, options?: { listId? : string, cacheImage? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.MatchResponse>>;

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can
     * create and manage your custom image lists using <a
     * href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe">this</a>
     * API.
     *
     * Returns ID and tags of matching image.<br/>
     * <br/>
     * Note: Refresh Index must be run on the corresponding Image List before
     * additions and removals are reflected in the response.
     *
     * @param {object} imageStream The image file.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.listId] The list Id.
     *
     * @param {boolean} [options.cacheImage] Whether to retain the submitted image
     * for future use; defaults to false if omitted.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {MatchResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {MatchResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link MatchResponse} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    matchFileInput(imageStream: stream.Readable, options?: { listId? : string, cacheImage? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.MatchResponse>;
    matchFileInput(imageStream: stream.Readable, callback: ServiceCallback<models.MatchResponse>): void;
    matchFileInput(imageStream: stream.Readable, options: { listId? : string, cacheImage? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.MatchResponse>): void;
}

/**
 * @class
 * TextModeration
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ContentModeratorClient.
 */
export interface TextModeration {


    /**
     * @summary Detect profanity and match against custom and shared blacklists
     *
     * Detects profanity in more than 100 languages and match against custom and
     * shared blacklists.
     *
     * @param {string} textContentType The content type. Possible values include:
     * 'text/plain', 'text/html', 'text/xml', 'text/markdown'
     *
     * @param {object} textContent Content to screen.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.language] Language of the text.
     *
     * @param {boolean} [options.autocorrect] Autocorrect text.
     *
     * @param {boolean} [options.pII] Detect personal identifiable information.
     *
     * @param {string} [options.listId] The list Id.
     *
     * @param {boolean} [options.classify] Classify input.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Screen>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    screenTextWithHttpOperationResponse(textContentType: string, textContent: stream.Readable, options?: { language? : string, autocorrect? : boolean, pII? : boolean, listId? : string, classify? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Screen>>;

    /**
     * @summary Detect profanity and match against custom and shared blacklists
     *
     * Detects profanity in more than 100 languages and match against custom and
     * shared blacklists.
     *
     * @param {string} textContentType The content type. Possible values include:
     * 'text/plain', 'text/html', 'text/xml', 'text/markdown'
     *
     * @param {object} textContent Content to screen.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.language] Language of the text.
     *
     * @param {boolean} [options.autocorrect] Autocorrect text.
     *
     * @param {boolean} [options.pII] Detect personal identifiable information.
     *
     * @param {string} [options.listId] The list Id.
     *
     * @param {boolean} [options.classify] Classify input.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Screen} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Screen} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Screen} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    screenText(textContentType: string, textContent: stream.Readable, options?: { language? : string, autocorrect? : boolean, pII? : boolean, listId? : string, classify? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.Screen>;
    screenText(textContentType: string, textContent: stream.Readable, callback: ServiceCallback<models.Screen>): void;
    screenText(textContentType: string, textContent: stream.Readable, options: { language? : string, autocorrect? : boolean, pII? : boolean, listId? : string, classify? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Screen>): void;


    /**
     * This operation will detect the language of given input content. Returns the
     * <a href="http://www-01.sil.org/iso639-3/codes.asp">ISO 639-3 code</a> for
     * the predominant language comprising the submitted text. Over 110 languages
     * supported.
     *
     * @param {string} textContentType The content type. Possible values include:
     * 'text/plain', 'text/html', 'text/xml', 'text/markdown'
     *
     * @param {object} textContent Content to screen.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DetectedLanguage>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    detectLanguageWithHttpOperationResponse(textContentType: string, textContent: stream.Readable, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DetectedLanguage>>;

    /**
     * This operation will detect the language of given input content. Returns the
     * <a href="http://www-01.sil.org/iso639-3/codes.asp">ISO 639-3 code</a> for
     * the predominant language comprising the submitted text. Over 110 languages
     * supported.
     *
     * @param {string} textContentType The content type. Possible values include:
     * 'text/plain', 'text/html', 'text/xml', 'text/markdown'
     *
     * @param {object} textContent Content to screen.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DetectedLanguage} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DetectedLanguage} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DetectedLanguage} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    detectLanguage(textContentType: string, textContent: stream.Readable, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DetectedLanguage>;
    detectLanguage(textContentType: string, textContent: stream.Readable, callback: ServiceCallback<models.DetectedLanguage>): void;
    detectLanguage(textContentType: string, textContent: stream.Readable, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DetectedLanguage>): void;
}

/**
 * @class
 * ListManagementImageLists
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ContentModeratorClient.
 */
export interface ListManagementImageLists {


    /**
     * Returns the details of the image list with list Id equal to list Id passed.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ImageList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getDetailsWithHttpOperationResponse(listId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImageList>>;

    /**
     * Returns the details of the image list with list Id equal to list Id passed.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ImageList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ImageList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ImageList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getDetails(listId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ImageList>;
    getDetails(listId: string, callback: ServiceCallback<models.ImageList>): void;
    getDetails(listId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImageList>): void;


    /**
     * Deletes image list with the list Id equal to list Id passed.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(listId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Deletes image list with the list Id equal to list Id passed.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(listId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    deleteMethod(listId: string, callback: ServiceCallback<string>): void;
    deleteMethod(listId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * Updates an image list with list Id equal to list Id passed.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {string} contentType The content type.
     *
     * @param {object} body Schema of the body.
     *
     * @param {string} [body.name] Name of the list.
     *
     * @param {string} [body.description] Description of the list.
     *
     * @param {object} [body.metadata] Metadata of the list.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ImageList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(listId: string, contentType: string, body: models.Body, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImageList>>;

    /**
     * Updates an image list with list Id equal to list Id passed.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {string} contentType The content type.
     *
     * @param {object} body Schema of the body.
     *
     * @param {string} [body.name] Name of the list.
     *
     * @param {string} [body.description] Description of the list.
     *
     * @param {object} [body.metadata] Metadata of the list.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ImageList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ImageList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ImageList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(listId: string, contentType: string, body: models.Body, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ImageList>;
    update(listId: string, contentType: string, body: models.Body, callback: ServiceCallback<models.ImageList>): void;
    update(listId: string, contentType: string, body: models.Body, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImageList>): void;


    /**
     * Creates an image list.
     *
     * @param {string} contentType The content type.
     *
     * @param {object} body Schema of the body.
     *
     * @param {string} [body.name] Name of the list.
     *
     * @param {string} [body.description] Description of the list.
     *
     * @param {object} [body.metadata] Metadata of the list.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ImageList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(contentType: string, body: models.Body, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImageList>>;

    /**
     * Creates an image list.
     *
     * @param {string} contentType The content type.
     *
     * @param {object} body Schema of the body.
     *
     * @param {string} [body.name] Name of the list.
     *
     * @param {string} [body.description] Description of the list.
     *
     * @param {object} [body.metadata] Metadata of the list.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ImageList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ImageList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ImageList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(contentType: string, body: models.Body, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ImageList>;
    create(contentType: string, body: models.Body, callback: ServiceCallback<models.ImageList>): void;
    create(contentType: string, body: models.Body, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImageList>): void;


    /**
     * Gets all the Image Lists.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAllImageListsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImageList[]>>;

    /**
     * Gets all the Image Lists.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAllImageLists(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ImageList[]>;
    getAllImageLists(callback: ServiceCallback<models.ImageList[]>): void;
    getAllImageLists(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImageList[]>): void;


    /**
     * Refreshes the index of the list with list Id equal to list Id passed.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RefreshIndex>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    refreshIndexMethodWithHttpOperationResponse(listId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RefreshIndex>>;

    /**
     * Refreshes the index of the list with list Id equal to list Id passed.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RefreshIndex} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RefreshIndex} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RefreshIndex} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    refreshIndexMethod(listId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RefreshIndex>;
    refreshIndexMethod(listId: string, callback: ServiceCallback<models.RefreshIndex>): void;
    refreshIndexMethod(listId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RefreshIndex>): void;
}

/**
 * @class
 * ListManagementTermLists
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ContentModeratorClient.
 */
export interface ListManagementTermLists {


    /**
     * Returns list Id details of the term list with list Id equal to list Id
     * passed.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TermList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getDetailsWithHttpOperationResponse(listId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TermList>>;

    /**
     * Returns list Id details of the term list with list Id equal to list Id
     * passed.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TermList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TermList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TermList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getDetails(listId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TermList>;
    getDetails(listId: string, callback: ServiceCallback<models.TermList>): void;
    getDetails(listId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TermList>): void;


    /**
     * Deletes term list with the list Id equal to list Id passed.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(listId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Deletes term list with the list Id equal to list Id passed.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(listId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    deleteMethod(listId: string, callback: ServiceCallback<string>): void;
    deleteMethod(listId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * Updates an Term List.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {string} contentType The content type.
     *
     * @param {object} body Schema of the body.
     *
     * @param {string} [body.name] Name of the list.
     *
     * @param {string} [body.description] Description of the list.
     *
     * @param {object} [body.metadata] Metadata of the list.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TermList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(listId: string, contentType: string, body: models.Body, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TermList>>;

    /**
     * Updates an Term List.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {string} contentType The content type.
     *
     * @param {object} body Schema of the body.
     *
     * @param {string} [body.name] Name of the list.
     *
     * @param {string} [body.description] Description of the list.
     *
     * @param {object} [body.metadata] Metadata of the list.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TermList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TermList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TermList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(listId: string, contentType: string, body: models.Body, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TermList>;
    update(listId: string, contentType: string, body: models.Body, callback: ServiceCallback<models.TermList>): void;
    update(listId: string, contentType: string, body: models.Body, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TermList>): void;


    /**
     * Creates a Term List
     *
     * @param {string} contentType The content type.
     *
     * @param {object} body Schema of the body.
     *
     * @param {string} [body.name] Name of the list.
     *
     * @param {string} [body.description] Description of the list.
     *
     * @param {object} [body.metadata] Metadata of the list.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<TermList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(contentType: string, body: models.Body, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TermList>>;

    /**
     * Creates a Term List
     *
     * @param {string} contentType The content type.
     *
     * @param {object} body Schema of the body.
     *
     * @param {string} [body.name] Name of the list.
     *
     * @param {string} [body.description] Description of the list.
     *
     * @param {object} [body.metadata] Metadata of the list.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {TermList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {TermList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link TermList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(contentType: string, body: models.Body, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TermList>;
    create(contentType: string, body: models.Body, callback: ServiceCallback<models.TermList>): void;
    create(contentType: string, body: models.Body, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TermList>): void;


    /**
     * gets all the Term Lists
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAllTermListsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TermList[]>>;

    /**
     * gets all the Term Lists
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAllTermLists(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TermList[]>;
    getAllTermLists(callback: ServiceCallback<models.TermList[]>): void;
    getAllTermLists(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TermList[]>): void;


    /**
     * Refreshes the index of the list with list Id equal to list ID passed.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {string} language Language of the terms.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RefreshIndex>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    refreshIndexMethodWithHttpOperationResponse(listId: string, language: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RefreshIndex>>;

    /**
     * Refreshes the index of the list with list Id equal to list ID passed.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {string} language Language of the terms.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RefreshIndex} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RefreshIndex} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RefreshIndex} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    refreshIndexMethod(listId: string, language: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RefreshIndex>;
    refreshIndexMethod(listId: string, language: string, callback: ServiceCallback<models.RefreshIndex>): void;
    refreshIndexMethod(listId: string, language: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RefreshIndex>): void;
}

/**
 * @class
 * ListManagementImage
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ContentModeratorClient.
 */
export interface ListManagementImage {


    /**
     * Add an image to the list with list Id equal to list Id passed.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.tag] Tag for the image.
     *
     * @param {string} [options.label] The image label.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Image>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addImageWithHttpOperationResponse(listId: string, options?: { tag? : number, label? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Image>>;

    /**
     * Add an image to the list with list Id equal to list Id passed.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.tag] Tag for the image.
     *
     * @param {string} [options.label] The image label.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Image} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Image} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Image} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addImage(listId: string, options?: { tag? : number, label? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Image>;
    addImage(listId: string, callback: ServiceCallback<models.Image>): void;
    addImage(listId: string, options: { tag? : number, label? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Image>): void;


    /**
     * Deletes all images from the list with list Id equal to list Id passed.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteAllImagesWithHttpOperationResponse(listId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Deletes all images from the list with list Id equal to list Id passed.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteAllImages(listId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    deleteAllImages(listId: string, callback: ServiceCallback<string>): void;
    deleteAllImages(listId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * Gets all image Ids from the list with list Id equal to list Id passed.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ImageIds>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAllImageIdsWithHttpOperationResponse(listId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImageIds>>;

    /**
     * Gets all image Ids from the list with list Id equal to list Id passed.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ImageIds} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ImageIds} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ImageIds} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAllImageIds(listId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ImageIds>;
    getAllImageIds(listId: string, callback: ServiceCallback<models.ImageIds>): void;
    getAllImageIds(listId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImageIds>): void;


    /**
     * Deletes an image from the list with list Id and image Id passed.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {string} imageId Id of the image.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteImageWithHttpOperationResponse(listId: string, imageId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Deletes an image from the list with list Id and image Id passed.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {string} imageId Id of the image.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteImage(listId: string, imageId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    deleteImage(listId: string, imageId: string, callback: ServiceCallback<string>): void;
    deleteImage(listId: string, imageId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * Add an image to the list with list Id equal to list Id passed.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {string} contentType The content type.
     *
     * @param {object} imageUrl The image url.
     *
     * @param {string} [imageUrl.dataRepresentation]
     *
     * @param {string} [imageUrl.value]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.tag] Tag for the image.
     *
     * @param {string} [options.label] The image label.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Image>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addImageUrlInputWithHttpOperationResponse(listId: string, contentType: string, imageUrl: models.BodyModel, options?: { tag? : number, label? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Image>>;

    /**
     * Add an image to the list with list Id equal to list Id passed.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {string} contentType The content type.
     *
     * @param {object} imageUrl The image url.
     *
     * @param {string} [imageUrl.dataRepresentation]
     *
     * @param {string} [imageUrl.value]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.tag] Tag for the image.
     *
     * @param {string} [options.label] The image label.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Image} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Image} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Image} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addImageUrlInput(listId: string, contentType: string, imageUrl: models.BodyModel, options?: { tag? : number, label? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Image>;
    addImageUrlInput(listId: string, contentType: string, imageUrl: models.BodyModel, callback: ServiceCallback<models.Image>): void;
    addImageUrlInput(listId: string, contentType: string, imageUrl: models.BodyModel, options: { tag? : number, label? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Image>): void;


    /**
     * Add an image to the list with list Id equal to list Id passed.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {object} imageStream The image file.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.tag] Tag for the image.
     *
     * @param {string} [options.label] The image label.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Image>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addImageFileInputWithHttpOperationResponse(listId: string, imageStream: stream.Readable, options?: { tag? : number, label? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Image>>;

    /**
     * Add an image to the list with list Id equal to list Id passed.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {object} imageStream The image file.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.tag] Tag for the image.
     *
     * @param {string} [options.label] The image label.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Image} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Image} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Image} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addImageFileInput(listId: string, imageStream: stream.Readable, options?: { tag? : number, label? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Image>;
    addImageFileInput(listId: string, imageStream: stream.Readable, callback: ServiceCallback<models.Image>): void;
    addImageFileInput(listId: string, imageStream: stream.Readable, options: { tag? : number, label? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Image>): void;
}

/**
 * @class
 * ListManagementTerm
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ContentModeratorClient.
 */
export interface ListManagementTerm {


    /**
     * Add a term to the term list with list Id equal to list Id passed.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {string} term Term to be deleted
     *
     * @param {string} language Language of the terms.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addTermWithHttpOperationResponse(listId: string, term: string, language: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<any>>;

    /**
     * Add a term to the term list with list Id equal to list Id passed.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {string} term Term to be deleted
     *
     * @param {string} language Language of the terms.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addTerm(listId: string, term: string, language: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<any>;
    addTerm(listId: string, term: string, language: string, callback: ServiceCallback<any>): void;
    addTerm(listId: string, term: string, language: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;


    /**
     * Deletes a term from the list with list Id equal to the list Id passed.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {string} term Term to be deleted
     *
     * @param {string} language Language of the terms.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteTermWithHttpOperationResponse(listId: string, term: string, language: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Deletes a term from the list with list Id equal to the list Id passed.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {string} term Term to be deleted
     *
     * @param {string} language Language of the terms.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteTerm(listId: string, term: string, language: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    deleteTerm(listId: string, term: string, language: string, callback: ServiceCallback<string>): void;
    deleteTerm(listId: string, term: string, language: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


    /**
     * Gets all terms from the list with list Id equal to the list Id passed.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {string} language Language of the terms.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.offset] The pagination start index.
     *
     * @param {number} [options.limit] The max limit.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Terms>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAllTermsWithHttpOperationResponse(listId: string, language: string, options?: { offset? : number, limit? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Terms>>;

    /**
     * Gets all terms from the list with list Id equal to the list Id passed.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {string} language Language of the terms.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.offset] The pagination start index.
     *
     * @param {number} [options.limit] The max limit.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Terms} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Terms} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Terms} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAllTerms(listId: string, language: string, options?: { offset? : number, limit? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.Terms>;
    getAllTerms(listId: string, language: string, callback: ServiceCallback<models.Terms>): void;
    getAllTerms(listId: string, language: string, options: { offset? : number, limit? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Terms>): void;


    /**
     * Deletes all terms from the list with list Id equal to the list Id passed.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {string} language Language of the terms.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<String>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteAllTermsWithHttpOperationResponse(listId: string, language: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

    /**
     * Deletes all terms from the list with list Id equal to the list Id passed.
     *
     * @param {string} listId List Id of the image list.
     *
     * @param {string} language Language of the terms.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {String} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {String} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteAllTerms(listId: string, language: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
    deleteAllTerms(listId: string, language: string, callback: ServiceCallback<string>): void;
    deleteAllTerms(listId: string, language: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;
}

/**
 * @class
 * Reviews
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ContentModeratorClient.
 */
export interface Reviews {


    /**
     * Returns review details for the review Id passed.
     *
     * @param {string} teamName Your Team Name.
     *
     * @param {string} reviewId Id of the review.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Review>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getReviewWithHttpOperationResponse(teamName: string, reviewId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Review>>;

    /**
     * Returns review details for the review Id passed.
     *
     * @param {string} teamName Your Team Name.
     *
     * @param {string} reviewId Id of the review.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Review} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Review} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Review} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getReview(teamName: string, reviewId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Review>;
    getReview(teamName: string, reviewId: string, callback: ServiceCallback<models.Review>): void;
    getReview(teamName: string, reviewId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Review>): void;


    /**
     * Get the Job Details for a Job Id.
     *
     * @param {string} teamName Your Team Name.
     *
     * @param {string} jobId Id of the job.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Job>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getJobDetailsWithHttpOperationResponse(teamName: string, jobId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Job>>;

    /**
     * Get the Job Details for a Job Id.
     *
     * @param {string} teamName Your Team Name.
     *
     * @param {string} jobId Id of the job.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Job} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Job} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Job} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getJobDetails(teamName: string, jobId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Job>;
    getJobDetails(teamName: string, jobId: string, callback: ServiceCallback<models.Job>): void;
    getJobDetails(teamName: string, jobId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Job>): void;


    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers
     * complete reviewing, results of the Review would be POSTED (i.e. HTTP POST)
     * on the specified CallBackEndpoint.
     *
     * <h3>CallBack Schemas </h3>
     * <h4>Review Completion CallBack Sample</h4>
     * <p>
     * {<br/>
     * "ReviewId": "<Review Id>",<br/>
     * "ModifiedOn": "2016-10-11T22:36:32.9934851Z",<br/>
     * "ModifiedBy": "<Name of the Reviewer>",<br/>
     * "CallBackType": "Review",<br/>
     * "ContentId": "<The ContentId that was specified input>",<br/>
     * "Metadata": {<br/>
     * "adultscore": "0.xxx",<br/>
     * "a": "False",<br/>
     * "racyscore": "0.xxx",<br/>
     * "r": "True"<br/>
     * },<br/>
     * "ReviewerResultTags": {<br/>
     * "a": "False",<br/>
     * "r": "True"<br/>
     * }<br/>
     * }<br/>
     *
     * </p>.
     *
     * @param {string} urlContentType The content type.
     *
     * @param {string} teamName Your team name.
     *
     * @param {array} createReviewBody Body for create reviews API
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.subTeam] SubTeam of your team, you want to assign
     * the created review to.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createReviewsWithHttpOperationResponse(urlContentType: string, teamName: string, createReviewBody: models.CreateReviewBodyItem[], options?: { subTeam? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string[]>>;

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers
     * complete reviewing, results of the Review would be POSTED (i.e. HTTP POST)
     * on the specified CallBackEndpoint.
     *
     * <h3>CallBack Schemas </h3>
     * <h4>Review Completion CallBack Sample</h4>
     * <p>
     * {<br/>
     * "ReviewId": "<Review Id>",<br/>
     * "ModifiedOn": "2016-10-11T22:36:32.9934851Z",<br/>
     * "ModifiedBy": "<Name of the Reviewer>",<br/>
     * "CallBackType": "Review",<br/>
     * "ContentId": "<The ContentId that was specified input>",<br/>
     * "Metadata": {<br/>
     * "adultscore": "0.xxx",<br/>
     * "a": "False",<br/>
     * "racyscore": "0.xxx",<br/>
     * "r": "True"<br/>
     * },<br/>
     * "ReviewerResultTags": {<br/>
     * "a": "False",<br/>
     * "r": "True"<br/>
     * }<br/>
     * }<br/>
     *
     * </p>.
     *
     * @param {string} urlContentType The content type.
     *
     * @param {string} teamName Your team name.
     *
     * @param {array} createReviewBody Body for create reviews API
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.subTeam] SubTeam of your team, you want to assign
     * the created review to.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createReviews(urlContentType: string, teamName: string, createReviewBody: models.CreateReviewBodyItem[], options?: { subTeam? : string, customHeaders? : { [headerName: string]: string; } }): Promise<string[]>;
    createReviews(urlContentType: string, teamName: string, createReviewBody: models.CreateReviewBodyItem[], callback: ServiceCallback<string[]>): void;
    createReviews(urlContentType: string, teamName: string, createReviewBody: models.CreateReviewBodyItem[], options: { subTeam? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string[]>): void;


    /**
     * A job Id will be returned for the content posted on this endpoint.
     *
     * Once the content is evaluated against the Workflow provided the review will
     * be created or ignored based on the workflow expression.
     *
     * <h3>CallBack Schemas </h3>
     *
     * <p>
     * <h4>Job Completion CallBack Sample</h4><br/>
     *
     * {<br/>
     * "JobId": "<Job Id>,<br/>
     * "ReviewId": "<Review Id, if the Job resulted in a Review to be
     * created>",<br/>
     * "WorkFlowId": "default",<br/>
     * "Status": "<This will be one of Complete, InProgress, Error>",<br/>
     * "ContentType": "Image",<br/>
     * "ContentId": "<This is the ContentId that was specified on input>",<br/>
     * "CallBackType": "Job",<br/>
     * "Metadata": {<br/>
     * "adultscore": "0.xxx",<br/>
     * "a": "False",<br/>
     * "racyscore": "0.xxx",<br/>
     * "r": "True"<br/>
     * }<br/>
     * }<br/>
     *
     * </p>
     * <p>
     * <h4>Review Completion CallBack Sample</h4><br/>
     *
     * {
     * "ReviewId": "<Review Id>",<br/>
     * "ModifiedOn": "2016-10-11T22:36:32.9934851Z",<br/>
     * "ModifiedBy": "<Name of the Reviewer>",<br/>
     * "CallBackType": "Review",<br/>
     * "ContentId": "<The ContentId that was specified input>",<br/>
     * "Metadata": {<br/>
     * "adultscore": "0.xxx",
     * "a": "False",<br/>
     * "racyscore": "0.xxx",<br/>
     * "r": "True"<br/>
     * },<br/>
     * "ReviewerResultTags": {<br/>
     * "a": "False",<br/>
     * "r": "True"<br/>
     * }<br/>
     * }<br/>
     *
     * </p>.
     *
     * @param {string} teamName Your team name.
     *
     * @param {string} contentType Image, Text or Video. Possible values include:
     * 'Image', 'Text', 'Video'
     *
     * @param {string} contentId Id/Name to identify the content submitted.
     *
     * @param {string} workflowName Workflow Name that you want to invoke.
     *
     * @param {string} jobContentType The content type. Possible values include:
     * 'application/json', 'image/jpeg'
     *
     * @param {object} content Content to evaluate.
     *
     * @param {string} content.contentValue Content to evaluate for a job.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.callBackEndpoint] Callback endpoint for posting the
     * create job result.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<JobId>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createJobWithHttpOperationResponse(teamName: string, contentType: string, contentId: string, workflowName: string, jobContentType: string, content: models.Content, options?: { callBackEndpoint? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.JobId>>;

    /**
     * A job Id will be returned for the content posted on this endpoint.
     *
     * Once the content is evaluated against the Workflow provided the review will
     * be created or ignored based on the workflow expression.
     *
     * <h3>CallBack Schemas </h3>
     *
     * <p>
     * <h4>Job Completion CallBack Sample</h4><br/>
     *
     * {<br/>
     * "JobId": "<Job Id>,<br/>
     * "ReviewId": "<Review Id, if the Job resulted in a Review to be
     * created>",<br/>
     * "WorkFlowId": "default",<br/>
     * "Status": "<This will be one of Complete, InProgress, Error>",<br/>
     * "ContentType": "Image",<br/>
     * "ContentId": "<This is the ContentId that was specified on input>",<br/>
     * "CallBackType": "Job",<br/>
     * "Metadata": {<br/>
     * "adultscore": "0.xxx",<br/>
     * "a": "False",<br/>
     * "racyscore": "0.xxx",<br/>
     * "r": "True"<br/>
     * }<br/>
     * }<br/>
     *
     * </p>
     * <p>
     * <h4>Review Completion CallBack Sample</h4><br/>
     *
     * {
     * "ReviewId": "<Review Id>",<br/>
     * "ModifiedOn": "2016-10-11T22:36:32.9934851Z",<br/>
     * "ModifiedBy": "<Name of the Reviewer>",<br/>
     * "CallBackType": "Review",<br/>
     * "ContentId": "<The ContentId that was specified input>",<br/>
     * "Metadata": {<br/>
     * "adultscore": "0.xxx",
     * "a": "False",<br/>
     * "racyscore": "0.xxx",<br/>
     * "r": "True"<br/>
     * },<br/>
     * "ReviewerResultTags": {<br/>
     * "a": "False",<br/>
     * "r": "True"<br/>
     * }<br/>
     * }<br/>
     *
     * </p>.
     *
     * @param {string} teamName Your team name.
     *
     * @param {string} contentType Image, Text or Video. Possible values include:
     * 'Image', 'Text', 'Video'
     *
     * @param {string} contentId Id/Name to identify the content submitted.
     *
     * @param {string} workflowName Workflow Name that you want to invoke.
     *
     * @param {string} jobContentType The content type. Possible values include:
     * 'application/json', 'image/jpeg'
     *
     * @param {object} content Content to evaluate.
     *
     * @param {string} content.contentValue Content to evaluate for a job.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.callBackEndpoint] Callback endpoint for posting the
     * create job result.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {JobId} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {JobId} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link JobId} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createJob(teamName: string, contentType: string, contentId: string, workflowName: string, jobContentType: string, content: models.Content, options?: { callBackEndpoint? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.JobId>;
    createJob(teamName: string, contentType: string, contentId: string, workflowName: string, jobContentType: string, content: models.Content, callback: ServiceCallback<models.JobId>): void;
    createJob(teamName: string, contentType: string, contentId: string, workflowName: string, jobContentType: string, content: models.Content, options: { callBackEndpoint? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.JobId>): void;


    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers
     * complete reviewing, results of the Review would be POSTED (i.e. HTTP POST)
     * on the specified CallBackEndpoint.
     *
     * <h3>CallBack Schemas </h3>
     * <h4>Review Completion CallBack Sample</h4>
     * <p>
     * {<br/>
     * "ReviewId": "<Review Id>",<br/>
     * "ModifiedOn": "2016-10-11T22:36:32.9934851Z",<br/>
     * "ModifiedBy": "<Name of the Reviewer>",<br/>
     * "CallBackType": "Review",<br/>
     * "ContentId": "<The ContentId that was specified input>",<br/>
     * "Metadata": {<br/>
     * "adultscore": "0.xxx",<br/>
     * "a": "False",<br/>
     * "racyscore": "0.xxx",<br/>
     * "r": "True"<br/>
     * },<br/>
     * "ReviewerResultTags": {<br/>
     * "a": "False",<br/>
     * "r": "True"<br/>
     * }<br/>
     * }<br/>
     *
     * </p>.
     *
     * @param {string} teamName Your team name.
     *
     * @param {string} reviewId Id of the review.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.timescale] Timescale of the video you are adding
     * frames to.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addVideoFrameWithHttpOperationResponse(teamName: string, reviewId: string, options?: { timescale? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers
     * complete reviewing, results of the Review would be POSTED (i.e. HTTP POST)
     * on the specified CallBackEndpoint.
     *
     * <h3>CallBack Schemas </h3>
     * <h4>Review Completion CallBack Sample</h4>
     * <p>
     * {<br/>
     * "ReviewId": "<Review Id>",<br/>
     * "ModifiedOn": "2016-10-11T22:36:32.9934851Z",<br/>
     * "ModifiedBy": "<Name of the Reviewer>",<br/>
     * "CallBackType": "Review",<br/>
     * "ContentId": "<The ContentId that was specified input>",<br/>
     * "Metadata": {<br/>
     * "adultscore": "0.xxx",<br/>
     * "a": "False",<br/>
     * "racyscore": "0.xxx",<br/>
     * "r": "True"<br/>
     * },<br/>
     * "ReviewerResultTags": {<br/>
     * "a": "False",<br/>
     * "r": "True"<br/>
     * }<br/>
     * }<br/>
     *
     * </p>.
     *
     * @param {string} teamName Your team name.
     *
     * @param {string} reviewId Id of the review.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.timescale] Timescale of the video you are adding
     * frames to.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addVideoFrame(teamName: string, reviewId: string, options?: { timescale? : number, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    addVideoFrame(teamName: string, reviewId: string, callback: ServiceCallback<void>): void;
    addVideoFrame(teamName: string, reviewId: string, options: { timescale? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers
     * complete reviewing, results of the Review would be POSTED (i.e. HTTP POST)
     * on the specified CallBackEndpoint.
     *
     * <h3>CallBack Schemas </h3>
     * <h4>Review Completion CallBack Sample</h4>
     * <p>
     * {<br/>
     * "ReviewId": "<Review Id>",<br/>
     * "ModifiedOn": "2016-10-11T22:36:32.9934851Z",<br/>
     * "ModifiedBy": "<Name of the Reviewer>",<br/>
     * "CallBackType": "Review",<br/>
     * "ContentId": "<The ContentId that was specified input>",<br/>
     * "Metadata": {<br/>
     * "adultscore": "0.xxx",<br/>
     * "a": "False",<br/>
     * "racyscore": "0.xxx",<br/>
     * "r": "True"<br/>
     * },<br/>
     * "ReviewerResultTags": {<br/>
     * "a": "False",<br/>
     * "r": "True"<br/>
     * }<br/>
     * }<br/>
     *
     * </p>.
     *
     * @param {string} teamName Your team name.
     *
     * @param {string} reviewId Id of the review.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.startSeed] Time stamp of the frame from where you
     * want to start fetching the frames.
     *
     * @param {number} [options.noOfRecords] Number of frames to fetch.
     *
     * @param {string} [options.filter] Get frames filtered by tags.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Frames>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getVideoFramesWithHttpOperationResponse(teamName: string, reviewId: string, options?: { startSeed? : number, noOfRecords? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Frames>>;

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers
     * complete reviewing, results of the Review would be POSTED (i.e. HTTP POST)
     * on the specified CallBackEndpoint.
     *
     * <h3>CallBack Schemas </h3>
     * <h4>Review Completion CallBack Sample</h4>
     * <p>
     * {<br/>
     * "ReviewId": "<Review Id>",<br/>
     * "ModifiedOn": "2016-10-11T22:36:32.9934851Z",<br/>
     * "ModifiedBy": "<Name of the Reviewer>",<br/>
     * "CallBackType": "Review",<br/>
     * "ContentId": "<The ContentId that was specified input>",<br/>
     * "Metadata": {<br/>
     * "adultscore": "0.xxx",<br/>
     * "a": "False",<br/>
     * "racyscore": "0.xxx",<br/>
     * "r": "True"<br/>
     * },<br/>
     * "ReviewerResultTags": {<br/>
     * "a": "False",<br/>
     * "r": "True"<br/>
     * }<br/>
     * }<br/>
     *
     * </p>.
     *
     * @param {string} teamName Your team name.
     *
     * @param {string} reviewId Id of the review.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.startSeed] Time stamp of the frame from where you
     * want to start fetching the frames.
     *
     * @param {number} [options.noOfRecords] Number of frames to fetch.
     *
     * @param {string} [options.filter] Get frames filtered by tags.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Frames} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Frames} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Frames} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getVideoFrames(teamName: string, reviewId: string, options?: { startSeed? : number, noOfRecords? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Frames>;
    getVideoFrames(teamName: string, reviewId: string, callback: ServiceCallback<models.Frames>): void;
    getVideoFrames(teamName: string, reviewId: string, options: { startSeed? : number, noOfRecords? : number, filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Frames>): void;


    /**
     * Publish video review to make it available for review.
     *
     * @param {string} teamName Your team name.
     *
     * @param {string} reviewId Id of the review.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    publishVideoReviewWithHttpOperationResponse(teamName: string, reviewId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Publish video review to make it available for review.
     *
     * @param {string} teamName Your team name.
     *
     * @param {string} reviewId Id of the review.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    publishVideoReview(teamName: string, reviewId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    publishVideoReview(teamName: string, reviewId: string, callback: ServiceCallback<void>): void;
    publishVideoReview(teamName: string, reviewId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * This API adds a transcript screen text result file for a video review.
     * Transcript screen text result file is a result of Screen Text API . In order
     * to generate transcript screen text result file , a transcript file has to be
     * screened for profanity using Screen Text API.
     *
     * @param {string} contentType The content type.
     *
     * @param {string} teamName Your team name.
     *
     * @param {string} reviewId Id of the review.
     *
     * @param {array} transcriptModerationBody Body for add video transcript
     * moderation result API
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addVideoTranscriptModerationResultWithHttpOperationResponse(contentType: string, teamName: string, reviewId: string, transcriptModerationBody: models.TranscriptModerationBodyItem[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * This API adds a transcript screen text result file for a video review.
     * Transcript screen text result file is a result of Screen Text API . In order
     * to generate transcript screen text result file , a transcript file has to be
     * screened for profanity using Screen Text API.
     *
     * @param {string} contentType The content type.
     *
     * @param {string} teamName Your team name.
     *
     * @param {string} reviewId Id of the review.
     *
     * @param {array} transcriptModerationBody Body for add video transcript
     * moderation result API
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addVideoTranscriptModerationResult(contentType: string, teamName: string, reviewId: string, transcriptModerationBody: models.TranscriptModerationBodyItem[], options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    addVideoTranscriptModerationResult(contentType: string, teamName: string, reviewId: string, transcriptModerationBody: models.TranscriptModerationBodyItem[], callback: ServiceCallback<void>): void;
    addVideoTranscriptModerationResult(contentType: string, teamName: string, reviewId: string, transcriptModerationBody: models.TranscriptModerationBodyItem[], options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * This API adds a transcript file (text version of all the words spoken in a
     * video) to a video review. The file should be a valid WebVTT format.
     *
     * @param {string} teamName Your team name.
     *
     * @param {string} reviewId Id of the review.
     *
     * @param {object} vTTfile Transcript file of the video.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addVideoTranscriptWithHttpOperationResponse(teamName: string, reviewId: string, vTTfile: stream.Readable, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * This API adds a transcript file (text version of all the words spoken in a
     * video) to a video review. The file should be a valid WebVTT format.
     *
     * @param {string} teamName Your team name.
     *
     * @param {string} reviewId Id of the review.
     *
     * @param {object} vTTfile Transcript file of the video.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addVideoTranscript(teamName: string, reviewId: string, vTTfile: stream.Readable, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    addVideoTranscript(teamName: string, reviewId: string, vTTfile: stream.Readable, callback: ServiceCallback<void>): void;
    addVideoTranscript(teamName: string, reviewId: string, vTTfile: stream.Readable, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers
     * complete reviewing, results of the Review would be POSTED (i.e. HTTP POST)
     * on the specified CallBackEndpoint.
     *
     * <h3>CallBack Schemas </h3>
     * <h4>Review Completion CallBack Sample</h4>
     * <p>
     * {<br/>
     * "ReviewId": "<Review Id>",<br/>
     * "ModifiedOn": "2016-10-11T22:36:32.9934851Z",<br/>
     * "ModifiedBy": "<Name of the Reviewer>",<br/>
     * "CallBackType": "Review",<br/>
     * "ContentId": "<The ContentId that was specified input>",<br/>
     * "Metadata": {<br/>
     * "adultscore": "0.xxx",<br/>
     * "a": "False",<br/>
     * "racyscore": "0.xxx",<br/>
     * "r": "True"<br/>
     * },<br/>
     * "ReviewerResultTags": {<br/>
     * "a": "False",<br/>
     * "r": "True"<br/>
     * }<br/>
     * }<br/>
     *
     * </p>.
     *
     * @param {string} contentType The content type.
     *
     * @param {string} teamName Your team name.
     *
     * @param {array} createVideoReviewsBody Body for create reviews API
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.subTeam] SubTeam of your team, you want to assign
     * the created review to.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createVideoReviewsWithHttpOperationResponse(contentType: string, teamName: string, createVideoReviewsBody: models.CreateVideoReviewsBodyItem[], options?: { subTeam? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string[]>>;

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers
     * complete reviewing, results of the Review would be POSTED (i.e. HTTP POST)
     * on the specified CallBackEndpoint.
     *
     * <h3>CallBack Schemas </h3>
     * <h4>Review Completion CallBack Sample</h4>
     * <p>
     * {<br/>
     * "ReviewId": "<Review Id>",<br/>
     * "ModifiedOn": "2016-10-11T22:36:32.9934851Z",<br/>
     * "ModifiedBy": "<Name of the Reviewer>",<br/>
     * "CallBackType": "Review",<br/>
     * "ContentId": "<The ContentId that was specified input>",<br/>
     * "Metadata": {<br/>
     * "adultscore": "0.xxx",<br/>
     * "a": "False",<br/>
     * "racyscore": "0.xxx",<br/>
     * "r": "True"<br/>
     * },<br/>
     * "ReviewerResultTags": {<br/>
     * "a": "False",<br/>
     * "r": "True"<br/>
     * }<br/>
     * }<br/>
     *
     * </p>.
     *
     * @param {string} contentType The content type.
     *
     * @param {string} teamName Your team name.
     *
     * @param {array} createVideoReviewsBody Body for create reviews API
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.subTeam] SubTeam of your team, you want to assign
     * the created review to.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createVideoReviews(contentType: string, teamName: string, createVideoReviewsBody: models.CreateVideoReviewsBodyItem[], options?: { subTeam? : string, customHeaders? : { [headerName: string]: string; } }): Promise<string[]>;
    createVideoReviews(contentType: string, teamName: string, createVideoReviewsBody: models.CreateVideoReviewsBodyItem[], callback: ServiceCallback<string[]>): void;
    createVideoReviews(contentType: string, teamName: string, createVideoReviewsBody: models.CreateVideoReviewsBodyItem[], options: { subTeam? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string[]>): void;


    /**
     * Use this method to add frames for a video review.Timescale: This parameter
     * is a factor which is used to convert the timestamp on a frame into
     * milliseconds. Timescale is provided in the output of the Content Moderator
     * video media processor on the Azure Media Services platform.Timescale in the
     * Video Moderation output is Ticks/Second.
     *
     * @param {string} contentType The content type.
     *
     * @param {string} teamName Your team name.
     *
     * @param {string} reviewId Id of the review.
     *
     * @param {array} videoFrameBody Body for add video frames API
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.timescale] Timescale of the video.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addVideoFrameUrlWithHttpOperationResponse(contentType: string, teamName: string, reviewId: string, videoFrameBody: models.VideoFrameBodyItem[], options?: { timescale? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Use this method to add frames for a video review.Timescale: This parameter
     * is a factor which is used to convert the timestamp on a frame into
     * milliseconds. Timescale is provided in the output of the Content Moderator
     * video media processor on the Azure Media Services platform.Timescale in the
     * Video Moderation output is Ticks/Second.
     *
     * @param {string} contentType The content type.
     *
     * @param {string} teamName Your team name.
     *
     * @param {string} reviewId Id of the review.
     *
     * @param {array} videoFrameBody Body for add video frames API
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.timescale] Timescale of the video.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addVideoFrameUrl(contentType: string, teamName: string, reviewId: string, videoFrameBody: models.VideoFrameBodyItem[], options?: { timescale? : number, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    addVideoFrameUrl(contentType: string, teamName: string, reviewId: string, videoFrameBody: models.VideoFrameBodyItem[], callback: ServiceCallback<void>): void;
    addVideoFrameUrl(contentType: string, teamName: string, reviewId: string, videoFrameBody: models.VideoFrameBodyItem[], options: { timescale? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Use this method to add frames for a video review.Timescale: This parameter
     * is a factor which is used to convert the timestamp on a frame into
     * milliseconds. Timescale is provided in the output of the Content Moderator
     * video media processor on the Azure Media Services platform.Timescale in the
     * Video Moderation output is Ticks/Second.
     *
     * @param {string} contentType The content type.
     *
     * @param {string} teamName Your team name.
     *
     * @param {string} reviewId Id of the review.
     *
     * @param {object} frameImageZip Zip file containing frame images.
     *
     * @param {string} frameMetadata Metadata of the frame.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.timescale] Timescale of the video .
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addVideoFrameStreamWithHttpOperationResponse(contentType: string, teamName: string, reviewId: string, frameImageZip: stream.Readable, frameMetadata: string, options?: { timescale? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Use this method to add frames for a video review.Timescale: This parameter
     * is a factor which is used to convert the timestamp on a frame into
     * milliseconds. Timescale is provided in the output of the Content Moderator
     * video media processor on the Azure Media Services platform.Timescale in the
     * Video Moderation output is Ticks/Second.
     *
     * @param {string} contentType The content type.
     *
     * @param {string} teamName Your team name.
     *
     * @param {string} reviewId Id of the review.
     *
     * @param {object} frameImageZip Zip file containing frame images.
     *
     * @param {string} frameMetadata Metadata of the frame.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.timescale] Timescale of the video .
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addVideoFrameStream(contentType: string, teamName: string, reviewId: string, frameImageZip: stream.Readable, frameMetadata: string, options?: { timescale? : number, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    addVideoFrameStream(contentType: string, teamName: string, reviewId: string, frameImageZip: stream.Readable, frameMetadata: string, callback: ServiceCallback<void>): void;
    addVideoFrameStream(contentType: string, teamName: string, reviewId: string, frameImageZip: stream.Readable, frameMetadata: string, options: { timescale? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}
