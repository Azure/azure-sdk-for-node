/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const WebResource = msRest.WebResource;

/**
 * Returns the list of faces found.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {boolean} [options.cacheImage] Whether to retain the submitted image
 * for future use; defaults to false if omitted.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link FoundFaces} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _findFaces(options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let cacheImage = (options && options.cacheImage !== undefined) ? options.cacheImage : undefined;
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (cacheImage !== null && cacheImage !== undefined && typeof cacheImage !== 'boolean') {
      throw new Error('cacheImage must be of type boolean.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'contentmoderator/moderate/v1.0/ProcessImage/FindFaces';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  let queryParameters = [];
  if (cacheImage !== null && cacheImage !== undefined) {
    queryParameters.push('CacheImage=' + encodeURIComponent(cacheImage.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['FoundFaces']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Returns any text found in the image for the language specified. If no
 * language is specified in input then the detection defaults to English.
 *
 * @param {string} language Language of the terms.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {boolean} [options.cacheImage] Whether to retain the submitted image
 * for future use; defaults to false if omitted.
 *
 * @param {boolean} [options.enhanced] When set to True, the image goes through
 * additional processing to come with additional candidates.
 *
 * image/tiff is not supported when enhanced is set to true
 *
 * Note: This impacts the response time.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OCR} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _oCRMethod(language, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let cacheImage = (options && options.cacheImage !== undefined) ? options.cacheImage : undefined;
  let enhanced = (options && options.enhanced !== undefined) ? options.enhanced : false;
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (language === null || language === undefined || typeof language.valueOf() !== 'string') {
      throw new Error('language cannot be null or undefined and it must be of type string.');
    }
    if (cacheImage !== null && cacheImage !== undefined && typeof cacheImage !== 'boolean') {
      throw new Error('cacheImage must be of type boolean.');
    }
    if (enhanced !== null && enhanced !== undefined && typeof enhanced !== 'boolean') {
      throw new Error('enhanced must be of type boolean.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'contentmoderator/moderate/v1.0/ProcessImage/OCR';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  let queryParameters = [];
  queryParameters.push('language=' + encodeURIComponent(language));
  if (cacheImage !== null && cacheImage !== undefined) {
    queryParameters.push('CacheImage=' + encodeURIComponent(cacheImage.toString()));
  }
  if (enhanced !== null && enhanced !== undefined) {
    queryParameters.push('enhanced=' + encodeURIComponent(enhanced.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OCR']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Returns probabilities of the image containing racy or adult content.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {boolean} [options.cacheImage] Whether to retain the submitted image
 * for future use; defaults to false if omitted.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Evaluate} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _evaluateMethod(options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let cacheImage = (options && options.cacheImage !== undefined) ? options.cacheImage : undefined;
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (cacheImage !== null && cacheImage !== undefined && typeof cacheImage !== 'boolean') {
      throw new Error('cacheImage must be of type boolean.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'contentmoderator/moderate/v1.0/ProcessImage/Evaluate';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  let queryParameters = [];
  if (cacheImage !== null && cacheImage !== undefined) {
    queryParameters.push('CacheImage=' + encodeURIComponent(cacheImage.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Evaluate']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Fuzzily match an image against one of your custom Image Lists. You can
 * create and manage your custom image lists using <a
 * href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe">this</a>
 * API.
 *
 * Returns ID and tags of matching image.<br/>
 * <br/>
 * Note: Refresh Index must be run on the corresponding Image List before
 * additions and removals are reflected in the response.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.listId] The list Id.
 *
 * @param {boolean} [options.cacheImage] Whether to retain the submitted image
 * for future use; defaults to false if omitted.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link MatchResponse} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _matchMethod(options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let listId = (options && options.listId !== undefined) ? options.listId : undefined;
  let cacheImage = (options && options.cacheImage !== undefined) ? options.cacheImage : undefined;
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (listId !== null && listId !== undefined && typeof listId.valueOf() !== 'string') {
      throw new Error('listId must be of type string.');
    }
    if (cacheImage !== null && cacheImage !== undefined && typeof cacheImage !== 'boolean') {
      throw new Error('cacheImage must be of type boolean.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'contentmoderator/moderate/v1.0/ProcessImage/Match';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  let queryParameters = [];
  if (listId !== null && listId !== undefined) {
    queryParameters.push('listId=' + encodeURIComponent(listId));
  }
  if (cacheImage !== null && cacheImage !== undefined) {
    queryParameters.push('CacheImage=' + encodeURIComponent(cacheImage.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['MatchResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Returns the list of faces found.
 *
 * @param {object} imageStream The image file.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {boolean} [options.cacheImage] Whether to retain the submitted image
 * for future use; defaults to false if omitted.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link FoundFaces} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _findFacesFileInput(imageStream, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let cacheImage = (options && options.cacheImage !== undefined) ? options.cacheImage : undefined;
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (cacheImage !== null && cacheImage !== undefined && typeof cacheImage !== 'boolean') {
      throw new Error('cacheImage must be of type boolean.');
    }
    if (imageStream === null || imageStream === undefined) {
      throw new Error('imageStream cannot be null or undefined and it must be of type object.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'contentmoderator/moderate/v1.0/ProcessImage/FindFaces';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  let queryParameters = [];
  if (cacheImage !== null && cacheImage !== undefined) {
    queryParameters.push('CacheImage=' + encodeURIComponent(cacheImage.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'image/gif';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = imageStream;
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['FoundFaces']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Returns the list of faces found.
 *
 * @param {string} contentType The content type.
 *
 * @param {object} imageUrl The image url.
 *
 * @param {string} [imageUrl.dataRepresentation]
 *
 * @param {string} [imageUrl.value]
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {boolean} [options.cacheImage] Whether to retain the submitted image
 * for future use; defaults to false if omitted.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link FoundFaces} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _findFacesUrlInput(contentType, imageUrl, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let cacheImage = (options && options.cacheImage !== undefined) ? options.cacheImage : undefined;
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (cacheImage !== null && cacheImage !== undefined && typeof cacheImage !== 'boolean') {
      throw new Error('cacheImage must be of type boolean.');
    }
    if (contentType === null || contentType === undefined || typeof contentType.valueOf() !== 'string') {
      throw new Error('contentType cannot be null or undefined and it must be of type string.');
    }
    if (imageUrl === null || imageUrl === undefined) {
      throw new Error('imageUrl cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'contentmoderator/moderate/v1.0/ProcessImage/FindFaces';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  let queryParameters = [];
  if (cacheImage !== null && cacheImage !== undefined) {
    queryParameters.push('CacheImage=' + encodeURIComponent(cacheImage.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (contentType !== undefined && contentType !== null) {
    httpRequest.headers['Content-Type'] = contentType;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (imageUrl !== null && imageUrl !== undefined) {
      let requestModelMapper = new client.models['BodyModel']().mapper();
      requestModel = client.serialize(requestModelMapper, imageUrl, 'imageUrl');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(imageUrl, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['FoundFaces']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Returns any text found in the image for the language specified. If no
 * language is specified in input then the detection defaults to English.
 *
 * @param {string} language Language of the terms.
 *
 * @param {string} contentType The content type.
 *
 * @param {object} imageUrl The image url.
 *
 * @param {string} [imageUrl.dataRepresentation]
 *
 * @param {string} [imageUrl.value]
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {boolean} [options.cacheImage] Whether to retain the submitted image
 * for future use; defaults to false if omitted.
 *
 * @param {boolean} [options.enhanced] When set to True, the image goes through
 * additional processing to come with additional candidates.
 *
 * image/tiff is not supported when enhanced is set to true
 *
 * Note: This impacts the response time.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OCR} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _oCRUrlInput(language, contentType, imageUrl, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let cacheImage = (options && options.cacheImage !== undefined) ? options.cacheImage : undefined;
  let enhanced = (options && options.enhanced !== undefined) ? options.enhanced : false;
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (language === null || language === undefined || typeof language.valueOf() !== 'string') {
      throw new Error('language cannot be null or undefined and it must be of type string.');
    }
    if (cacheImage !== null && cacheImage !== undefined && typeof cacheImage !== 'boolean') {
      throw new Error('cacheImage must be of type boolean.');
    }
    if (enhanced !== null && enhanced !== undefined && typeof enhanced !== 'boolean') {
      throw new Error('enhanced must be of type boolean.');
    }
    if (contentType === null || contentType === undefined || typeof contentType.valueOf() !== 'string') {
      throw new Error('contentType cannot be null or undefined and it must be of type string.');
    }
    if (imageUrl === null || imageUrl === undefined) {
      throw new Error('imageUrl cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'contentmoderator/moderate/v1.0/ProcessImage/OCR';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  let queryParameters = [];
  queryParameters.push('language=' + encodeURIComponent(language));
  if (cacheImage !== null && cacheImage !== undefined) {
    queryParameters.push('CacheImage=' + encodeURIComponent(cacheImage.toString()));
  }
  if (enhanced !== null && enhanced !== undefined) {
    queryParameters.push('enhanced=' + encodeURIComponent(enhanced.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (contentType !== undefined && contentType !== null) {
    httpRequest.headers['Content-Type'] = contentType;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (imageUrl !== null && imageUrl !== undefined) {
      let requestModelMapper = new client.models['BodyModel']().mapper();
      requestModel = client.serialize(requestModelMapper, imageUrl, 'imageUrl');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(imageUrl, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OCR']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Returns any text found in the image for the language specified. If no
 * language is specified in input then the detection defaults to English.
 *
 * @param {string} language Language of the terms.
 *
 * @param {object} imageStream The image file.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {boolean} [options.cacheImage] Whether to retain the submitted image
 * for future use; defaults to false if omitted.
 *
 * @param {boolean} [options.enhanced] When set to True, the image goes through
 * additional processing to come with additional candidates.
 *
 * image/tiff is not supported when enhanced is set to true
 *
 * Note: This impacts the response time.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link OCR} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _oCRFileInput(language, imageStream, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let cacheImage = (options && options.cacheImage !== undefined) ? options.cacheImage : undefined;
  let enhanced = (options && options.enhanced !== undefined) ? options.enhanced : false;
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (language === null || language === undefined || typeof language.valueOf() !== 'string') {
      throw new Error('language cannot be null or undefined and it must be of type string.');
    }
    if (cacheImage !== null && cacheImage !== undefined && typeof cacheImage !== 'boolean') {
      throw new Error('cacheImage must be of type boolean.');
    }
    if (enhanced !== null && enhanced !== undefined && typeof enhanced !== 'boolean') {
      throw new Error('enhanced must be of type boolean.');
    }
    if (imageStream === null || imageStream === undefined) {
      throw new Error('imageStream cannot be null or undefined and it must be of type object.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'contentmoderator/moderate/v1.0/ProcessImage/OCR';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  let queryParameters = [];
  queryParameters.push('language=' + encodeURIComponent(language));
  if (cacheImage !== null && cacheImage !== undefined) {
    queryParameters.push('CacheImage=' + encodeURIComponent(cacheImage.toString()));
  }
  if (enhanced !== null && enhanced !== undefined) {
    queryParameters.push('enhanced=' + encodeURIComponent(enhanced.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'image/gif';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = imageStream;
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['OCR']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Returns probabilities of the image containing racy or adult content.
 *
 * @param {object} imageStream The image file.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {boolean} [options.cacheImage] Whether to retain the submitted image
 * for future use; defaults to false if omitted.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Evaluate} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _evaluateFileInput(imageStream, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let cacheImage = (options && options.cacheImage !== undefined) ? options.cacheImage : undefined;
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (cacheImage !== null && cacheImage !== undefined && typeof cacheImage !== 'boolean') {
      throw new Error('cacheImage must be of type boolean.');
    }
    if (imageStream === null || imageStream === undefined) {
      throw new Error('imageStream cannot be null or undefined and it must be of type object.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'contentmoderator/moderate/v1.0/ProcessImage/Evaluate';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  let queryParameters = [];
  if (cacheImage !== null && cacheImage !== undefined) {
    queryParameters.push('CacheImage=' + encodeURIComponent(cacheImage.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'image/gif';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = imageStream;
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Evaluate']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Returns probabilities of the image containing racy or adult content.
 *
 * @param {string} contentType The content type.
 *
 * @param {object} imageUrl The image url.
 *
 * @param {string} [imageUrl.dataRepresentation]
 *
 * @param {string} [imageUrl.value]
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {boolean} [options.cacheImage] Whether to retain the submitted image
 * for future use; defaults to false if omitted.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Evaluate} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _evaluateUrlInput(contentType, imageUrl, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let cacheImage = (options && options.cacheImage !== undefined) ? options.cacheImage : undefined;
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (cacheImage !== null && cacheImage !== undefined && typeof cacheImage !== 'boolean') {
      throw new Error('cacheImage must be of type boolean.');
    }
    if (contentType === null || contentType === undefined || typeof contentType.valueOf() !== 'string') {
      throw new Error('contentType cannot be null or undefined and it must be of type string.');
    }
    if (imageUrl === null || imageUrl === undefined) {
      throw new Error('imageUrl cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'contentmoderator/moderate/v1.0/ProcessImage/Evaluate';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  let queryParameters = [];
  if (cacheImage !== null && cacheImage !== undefined) {
    queryParameters.push('CacheImage=' + encodeURIComponent(cacheImage.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (contentType !== undefined && contentType !== null) {
    httpRequest.headers['Content-Type'] = contentType;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (imageUrl !== null && imageUrl !== undefined) {
      let requestModelMapper = new client.models['BodyModel']().mapper();
      requestModel = client.serialize(requestModelMapper, imageUrl, 'imageUrl');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(imageUrl, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Evaluate']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Fuzzily match an image against one of your custom Image Lists. You can
 * create and manage your custom image lists using <a
 * href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe">this</a>
 * API.
 *
 * Returns ID and tags of matching image.<br/>
 * <br/>
 * Note: Refresh Index must be run on the corresponding Image List before
 * additions and removals are reflected in the response.
 *
 * @param {string} contentType The content type.
 *
 * @param {object} imageUrl The image url.
 *
 * @param {string} [imageUrl.dataRepresentation]
 *
 * @param {string} [imageUrl.value]
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.listId] The list Id.
 *
 * @param {boolean} [options.cacheImage] Whether to retain the submitted image
 * for future use; defaults to false if omitted.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link MatchResponse} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _matchUrlInput(contentType, imageUrl, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let listId = (options && options.listId !== undefined) ? options.listId : undefined;
  let cacheImage = (options && options.cacheImage !== undefined) ? options.cacheImage : undefined;
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (listId !== null && listId !== undefined && typeof listId.valueOf() !== 'string') {
      throw new Error('listId must be of type string.');
    }
    if (cacheImage !== null && cacheImage !== undefined && typeof cacheImage !== 'boolean') {
      throw new Error('cacheImage must be of type boolean.');
    }
    if (contentType === null || contentType === undefined || typeof contentType.valueOf() !== 'string') {
      throw new Error('contentType cannot be null or undefined and it must be of type string.');
    }
    if (imageUrl === null || imageUrl === undefined) {
      throw new Error('imageUrl cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'contentmoderator/moderate/v1.0/ProcessImage/Match';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  let queryParameters = [];
  if (listId !== null && listId !== undefined) {
    queryParameters.push('listId=' + encodeURIComponent(listId));
  }
  if (cacheImage !== null && cacheImage !== undefined) {
    queryParameters.push('CacheImage=' + encodeURIComponent(cacheImage.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (contentType !== undefined && contentType !== null) {
    httpRequest.headers['Content-Type'] = contentType;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (imageUrl !== null && imageUrl !== undefined) {
      let requestModelMapper = new client.models['BodyModel']().mapper();
      requestModel = client.serialize(requestModelMapper, imageUrl, 'imageUrl');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(imageUrl, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['MatchResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Fuzzily match an image against one of your custom Image Lists. You can
 * create and manage your custom image lists using <a
 * href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe">this</a>
 * API.
 *
 * Returns ID and tags of matching image.<br/>
 * <br/>
 * Note: Refresh Index must be run on the corresponding Image List before
 * additions and removals are reflected in the response.
 *
 * @param {object} imageStream The image file.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.listId] The list Id.
 *
 * @param {boolean} [options.cacheImage] Whether to retain the submitted image
 * for future use; defaults to false if omitted.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link MatchResponse} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _matchFileInput(imageStream, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let listId = (options && options.listId !== undefined) ? options.listId : undefined;
  let cacheImage = (options && options.cacheImage !== undefined) ? options.cacheImage : undefined;
  // Validate
  try {
    if (this.client.endpoint === null || this.client.endpoint === undefined || typeof this.client.endpoint.valueOf() !== 'string') {
      throw new Error('this.client.endpoint cannot be null or undefined and it must be of type string.');
    }
    if (listId !== null && listId !== undefined && typeof listId.valueOf() !== 'string') {
      throw new Error('listId must be of type string.');
    }
    if (cacheImage !== null && cacheImage !== undefined && typeof cacheImage !== 'boolean') {
      throw new Error('cacheImage must be of type boolean.');
    }
    if (imageStream === null || imageStream === undefined) {
      throw new Error('imageStream cannot be null or undefined and it must be of type object.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'contentmoderator/moderate/v1.0/ProcessImage/Match';
  requestUrl = requestUrl.replace('{Endpoint}', this.client.endpoint);
  let queryParameters = [];
  if (listId !== null && listId !== undefined) {
    queryParameters.push('listId=' + encodeURIComponent(listId));
  }
  if (cacheImage !== null && cacheImage !== undefined) {
    queryParameters.push('CacheImage=' + encodeURIComponent(cacheImage.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'image/gif';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = imageStream;
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['APIError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['MatchResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a ImageModeration. */
class ImageModeration {
  /**
   * Create a ImageModeration.
   * @param {ContentModeratorClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._findFaces = _findFaces;
    this._oCRMethod = _oCRMethod;
    this._evaluateMethod = _evaluateMethod;
    this._matchMethod = _matchMethod;
    this._findFacesFileInput = _findFacesFileInput;
    this._findFacesUrlInput = _findFacesUrlInput;
    this._oCRUrlInput = _oCRUrlInput;
    this._oCRFileInput = _oCRFileInput;
    this._evaluateFileInput = _evaluateFileInput;
    this._evaluateUrlInput = _evaluateUrlInput;
    this._matchUrlInput = _matchUrlInput;
    this._matchFileInput = _matchFileInput;
  }

  /**
   * Returns the list of faces found.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.cacheImage] Whether to retain the submitted image
   * for future use; defaults to false if omitted.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<FoundFaces>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  findFacesWithHttpOperationResponse(options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._findFaces(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Returns the list of faces found.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.cacheImage] Whether to retain the submitted image
   * for future use; defaults to false if omitted.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {FoundFaces} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link FoundFaces} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  findFaces(options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._findFaces(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._findFaces(options, optionalCallback);
    }
  }

  /**
   * Returns any text found in the image for the language specified. If no
   * language is specified in input then the detection defaults to English.
   *
   * @param {string} language Language of the terms.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.cacheImage] Whether to retain the submitted image
   * for future use; defaults to false if omitted.
   *
   * @param {boolean} [options.enhanced] When set to True, the image goes through
   * additional processing to come with additional candidates.
   *
   * image/tiff is not supported when enhanced is set to true
   *
   * Note: This impacts the response time.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OCR>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  oCRMethodWithHttpOperationResponse(language, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._oCRMethod(language, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Returns any text found in the image for the language specified. If no
   * language is specified in input then the detection defaults to English.
   *
   * @param {string} language Language of the terms.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.cacheImage] Whether to retain the submitted image
   * for future use; defaults to false if omitted.
   *
   * @param {boolean} [options.enhanced] When set to True, the image goes through
   * additional processing to come with additional candidates.
   *
   * image/tiff is not supported when enhanced is set to true
   *
   * Note: This impacts the response time.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OCR} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OCR} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  oCRMethod(language, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._oCRMethod(language, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._oCRMethod(language, options, optionalCallback);
    }
  }

  /**
   * Returns probabilities of the image containing racy or adult content.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.cacheImage] Whether to retain the submitted image
   * for future use; defaults to false if omitted.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Evaluate>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  evaluateMethodWithHttpOperationResponse(options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._evaluateMethod(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Returns probabilities of the image containing racy or adult content.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.cacheImage] Whether to retain the submitted image
   * for future use; defaults to false if omitted.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Evaluate} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Evaluate} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  evaluateMethod(options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._evaluateMethod(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._evaluateMethod(options, optionalCallback);
    }
  }

  /**
   * Fuzzily match an image against one of your custom Image Lists. You can
   * create and manage your custom image lists using <a
   * href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe">this</a>
   * API.
   *
   * Returns ID and tags of matching image.<br/>
   * <br/>
   * Note: Refresh Index must be run on the corresponding Image List before
   * additions and removals are reflected in the response.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.listId] The list Id.
   *
   * @param {boolean} [options.cacheImage] Whether to retain the submitted image
   * for future use; defaults to false if omitted.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<MatchResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  matchMethodWithHttpOperationResponse(options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._matchMethod(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Fuzzily match an image against one of your custom Image Lists. You can
   * create and manage your custom image lists using <a
   * href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe">this</a>
   * API.
   *
   * Returns ID and tags of matching image.<br/>
   * <br/>
   * Note: Refresh Index must be run on the corresponding Image List before
   * additions and removals are reflected in the response.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.listId] The list Id.
   *
   * @param {boolean} [options.cacheImage] Whether to retain the submitted image
   * for future use; defaults to false if omitted.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {MatchResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link MatchResponse} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  matchMethod(options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._matchMethod(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._matchMethod(options, optionalCallback);
    }
  }

  /**
   * Returns the list of faces found.
   *
   * @param {object} imageStream The image file.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.cacheImage] Whether to retain the submitted image
   * for future use; defaults to false if omitted.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<FoundFaces>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  findFacesFileInputWithHttpOperationResponse(imageStream, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._findFacesFileInput(imageStream, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Returns the list of faces found.
   *
   * @param {object} imageStream The image file.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.cacheImage] Whether to retain the submitted image
   * for future use; defaults to false if omitted.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {FoundFaces} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link FoundFaces} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  findFacesFileInput(imageStream, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._findFacesFileInput(imageStream, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._findFacesFileInput(imageStream, options, optionalCallback);
    }
  }

  /**
   * Returns the list of faces found.
   *
   * @param {string} contentType The content type.
   *
   * @param {object} imageUrl The image url.
   *
   * @param {string} [imageUrl.dataRepresentation]
   *
   * @param {string} [imageUrl.value]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.cacheImage] Whether to retain the submitted image
   * for future use; defaults to false if omitted.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<FoundFaces>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  findFacesUrlInputWithHttpOperationResponse(contentType, imageUrl, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._findFacesUrlInput(contentType, imageUrl, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Returns the list of faces found.
   *
   * @param {string} contentType The content type.
   *
   * @param {object} imageUrl The image url.
   *
   * @param {string} [imageUrl.dataRepresentation]
   *
   * @param {string} [imageUrl.value]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.cacheImage] Whether to retain the submitted image
   * for future use; defaults to false if omitted.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {FoundFaces} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link FoundFaces} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  findFacesUrlInput(contentType, imageUrl, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._findFacesUrlInput(contentType, imageUrl, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._findFacesUrlInput(contentType, imageUrl, options, optionalCallback);
    }
  }

  /**
   * Returns any text found in the image for the language specified. If no
   * language is specified in input then the detection defaults to English.
   *
   * @param {string} language Language of the terms.
   *
   * @param {string} contentType The content type.
   *
   * @param {object} imageUrl The image url.
   *
   * @param {string} [imageUrl.dataRepresentation]
   *
   * @param {string} [imageUrl.value]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.cacheImage] Whether to retain the submitted image
   * for future use; defaults to false if omitted.
   *
   * @param {boolean} [options.enhanced] When set to True, the image goes through
   * additional processing to come with additional candidates.
   *
   * image/tiff is not supported when enhanced is set to true
   *
   * Note: This impacts the response time.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OCR>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  oCRUrlInputWithHttpOperationResponse(language, contentType, imageUrl, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._oCRUrlInput(language, contentType, imageUrl, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Returns any text found in the image for the language specified. If no
   * language is specified in input then the detection defaults to English.
   *
   * @param {string} language Language of the terms.
   *
   * @param {string} contentType The content type.
   *
   * @param {object} imageUrl The image url.
   *
   * @param {string} [imageUrl.dataRepresentation]
   *
   * @param {string} [imageUrl.value]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.cacheImage] Whether to retain the submitted image
   * for future use; defaults to false if omitted.
   *
   * @param {boolean} [options.enhanced] When set to True, the image goes through
   * additional processing to come with additional candidates.
   *
   * image/tiff is not supported when enhanced is set to true
   *
   * Note: This impacts the response time.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OCR} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OCR} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  oCRUrlInput(language, contentType, imageUrl, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._oCRUrlInput(language, contentType, imageUrl, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._oCRUrlInput(language, contentType, imageUrl, options, optionalCallback);
    }
  }

  /**
   * Returns any text found in the image for the language specified. If no
   * language is specified in input then the detection defaults to English.
   *
   * @param {string} language Language of the terms.
   *
   * @param {object} imageStream The image file.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.cacheImage] Whether to retain the submitted image
   * for future use; defaults to false if omitted.
   *
   * @param {boolean} [options.enhanced] When set to True, the image goes through
   * additional processing to come with additional candidates.
   *
   * image/tiff is not supported when enhanced is set to true
   *
   * Note: This impacts the response time.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<OCR>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  oCRFileInputWithHttpOperationResponse(language, imageStream, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._oCRFileInput(language, imageStream, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Returns any text found in the image for the language specified. If no
   * language is specified in input then the detection defaults to English.
   *
   * @param {string} language Language of the terms.
   *
   * @param {object} imageStream The image file.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.cacheImage] Whether to retain the submitted image
   * for future use; defaults to false if omitted.
   *
   * @param {boolean} [options.enhanced] When set to True, the image goes through
   * additional processing to come with additional candidates.
   *
   * image/tiff is not supported when enhanced is set to true
   *
   * Note: This impacts the response time.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {OCR} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link OCR} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  oCRFileInput(language, imageStream, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._oCRFileInput(language, imageStream, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._oCRFileInput(language, imageStream, options, optionalCallback);
    }
  }

  /**
   * Returns probabilities of the image containing racy or adult content.
   *
   * @param {object} imageStream The image file.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.cacheImage] Whether to retain the submitted image
   * for future use; defaults to false if omitted.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Evaluate>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  evaluateFileInputWithHttpOperationResponse(imageStream, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._evaluateFileInput(imageStream, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Returns probabilities of the image containing racy or adult content.
   *
   * @param {object} imageStream The image file.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.cacheImage] Whether to retain the submitted image
   * for future use; defaults to false if omitted.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Evaluate} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Evaluate} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  evaluateFileInput(imageStream, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._evaluateFileInput(imageStream, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._evaluateFileInput(imageStream, options, optionalCallback);
    }
  }

  /**
   * Returns probabilities of the image containing racy or adult content.
   *
   * @param {string} contentType The content type.
   *
   * @param {object} imageUrl The image url.
   *
   * @param {string} [imageUrl.dataRepresentation]
   *
   * @param {string} [imageUrl.value]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.cacheImage] Whether to retain the submitted image
   * for future use; defaults to false if omitted.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Evaluate>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  evaluateUrlInputWithHttpOperationResponse(contentType, imageUrl, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._evaluateUrlInput(contentType, imageUrl, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Returns probabilities of the image containing racy or adult content.
   *
   * @param {string} contentType The content type.
   *
   * @param {object} imageUrl The image url.
   *
   * @param {string} [imageUrl.dataRepresentation]
   *
   * @param {string} [imageUrl.value]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.cacheImage] Whether to retain the submitted image
   * for future use; defaults to false if omitted.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Evaluate} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Evaluate} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  evaluateUrlInput(contentType, imageUrl, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._evaluateUrlInput(contentType, imageUrl, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._evaluateUrlInput(contentType, imageUrl, options, optionalCallback);
    }
  }

  /**
   * Fuzzily match an image against one of your custom Image Lists. You can
   * create and manage your custom image lists using <a
   * href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe">this</a>
   * API.
   *
   * Returns ID and tags of matching image.<br/>
   * <br/>
   * Note: Refresh Index must be run on the corresponding Image List before
   * additions and removals are reflected in the response.
   *
   * @param {string} contentType The content type.
   *
   * @param {object} imageUrl The image url.
   *
   * @param {string} [imageUrl.dataRepresentation]
   *
   * @param {string} [imageUrl.value]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.listId] The list Id.
   *
   * @param {boolean} [options.cacheImage] Whether to retain the submitted image
   * for future use; defaults to false if omitted.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<MatchResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  matchUrlInputWithHttpOperationResponse(contentType, imageUrl, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._matchUrlInput(contentType, imageUrl, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Fuzzily match an image against one of your custom Image Lists. You can
   * create and manage your custom image lists using <a
   * href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe">this</a>
   * API.
   *
   * Returns ID and tags of matching image.<br/>
   * <br/>
   * Note: Refresh Index must be run on the corresponding Image List before
   * additions and removals are reflected in the response.
   *
   * @param {string} contentType The content type.
   *
   * @param {object} imageUrl The image url.
   *
   * @param {string} [imageUrl.dataRepresentation]
   *
   * @param {string} [imageUrl.value]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.listId] The list Id.
   *
   * @param {boolean} [options.cacheImage] Whether to retain the submitted image
   * for future use; defaults to false if omitted.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {MatchResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link MatchResponse} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  matchUrlInput(contentType, imageUrl, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._matchUrlInput(contentType, imageUrl, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._matchUrlInput(contentType, imageUrl, options, optionalCallback);
    }
  }

  /**
   * Fuzzily match an image against one of your custom Image Lists. You can
   * create and manage your custom image lists using <a
   * href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe">this</a>
   * API.
   *
   * Returns ID and tags of matching image.<br/>
   * <br/>
   * Note: Refresh Index must be run on the corresponding Image List before
   * additions and removals are reflected in the response.
   *
   * @param {object} imageStream The image file.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.listId] The list Id.
   *
   * @param {boolean} [options.cacheImage] Whether to retain the submitted image
   * for future use; defaults to false if omitted.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<MatchResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  matchFileInputWithHttpOperationResponse(imageStream, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._matchFileInput(imageStream, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Fuzzily match an image against one of your custom Image Lists. You can
   * create and manage your custom image lists using <a
   * href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe">this</a>
   * API.
   *
   * Returns ID and tags of matching image.<br/>
   * <br/>
   * Note: Refresh Index must be run on the corresponding Image List before
   * additions and removals are reflected in the response.
   *
   * @param {object} imageStream The image file.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.listId] The list Id.
   *
   * @param {boolean} [options.cacheImage] Whether to retain the submitted image
   * for future use; defaults to false if omitted.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {MatchResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link MatchResponse} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  matchFileInput(imageStream, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._matchFileInput(imageStream, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._matchFileInput(imageStream, options, optionalCallback);
    }
  }

}

module.exports = ImageModeration;
