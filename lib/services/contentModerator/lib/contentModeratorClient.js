/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

'use strict';

const msRest = require('ms-rest');
const ServiceClient = msRest.ServiceClient;

const models = require('./models');
const operations = require('./operations');


/** Class representing a ContentModeratorClient. */
class ContentModeratorClient extends ServiceClient {
  /**
   * Create a ContentModeratorClient.
   * @param {credentials} credentials - Subscription credentials which uniquely identify client subscription.
   * @param {string} endpoint - Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus.api.cognitive.microsoft.com).
   * @param {object} [options] - The parameter options
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   * @param {object} [options.requestOptions] - Options for the underlying request object
   * {@link https://github.com/request/request#requestoptions-callback Options doc}
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   */
  constructor(credentials, endpoint, options) {
    if (credentials === null || credentials === undefined) {
      throw new Error('\'credentials\' cannot be null.');
    }
    if (endpoint === null || endpoint === undefined) {
      throw new Error('\'endpoint\' cannot be null.');
    }

    if (!options) options = {};

    super(credentials, options);

    this.baseUri = '{Endpoint}';
    this.credentials = credentials;
    this.endpoint = endpoint;

    let packageInfo = this.getPackageJsonInfo(__dirname);
    this.addUserAgentInfo(`${packageInfo.name}/${packageInfo.version}`);
    this.imageModeration = new operations.ImageModeration(this);
    this.textModeration = new operations.TextModeration(this);
    this.listManagementImageLists = new operations.ListManagementImageLists(this);
    this.listManagementTermLists = new operations.ListManagementTermLists(this);
    this.listManagementImage = new operations.ListManagementImage(this);
    this.listManagementTerm = new operations.ListManagementTerm(this);
    this.reviews = new operations.Reviews(this);
    this.models = models;
    msRest.addSerializationMixin(this);
  }

}

module.exports = ContentModeratorClient;
module.exports['default'] = ContentModeratorClient;
module.exports.ContentModeratorClient = ContentModeratorClient;
module.exports.ContentModeratorModels = models;
