/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Labs
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DevTestLabsClient.
 */
export interface Labs {


    /**
     * List labs in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=defaultStorageAccount)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationLab>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySubscriptionWithHttpOperationResponse(options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationLab>>;

    /**
     * List labs in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=defaultStorageAccount)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationLab} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationLab} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationLab} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySubscription(options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationLab>;
    listBySubscription(callback: ServiceCallback<models.ResponseWithContinuationLab>): void;
    listBySubscription(options: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationLab>): void;


    /**
     * List labs in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=defaultStorageAccount)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationLab>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationLab>>;

    /**
     * List labs in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=defaultStorageAccount)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationLab} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationLab} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationLab} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationLab>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.ResponseWithContinuationLab>): void;
    listByResourceGroup(resourceGroupName: string, options: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationLab>): void;


    /**
     * Get lab.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=defaultStorageAccount)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Lab>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Lab>>;

    /**
     * Get lab.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=defaultStorageAccount)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Lab} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Lab} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Lab} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Lab>;
    get(resourceGroupName: string, name: string, callback: ServiceCallback<models.Lab>): void;
    get(resourceGroupName: string, name: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Lab>): void;


    /**
     * Create or replace an existing lab. This operation can take a while to
     * complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the lab.
     *
     * @param {object} lab A lab.
     *
     * @param {string} [lab.labStorageType] Type of storage used by the lab. It can
     * be either Premium or Standard. Default is Premium. Possible values include:
     * 'Standard', 'Premium'
     *
     * @param {string} [lab.premiumDataDisks] The setting to enable usage of
     * premium data disks.
     * When its value is 'Enabled', creation of standard or premium data disks is
     * allowed.
     * When its value is 'Disabled', only creation of standard data disks is
     * allowed. Possible values include: 'Disabled', 'Enabled'
     *
     * @param {string} [lab.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [lab.uniqueIdentifier] The unique immutable identifier of a
     * resource (Guid).
     *
     * @param {string} [lab.location] The location of the resource.
     *
     * @param {object} [lab.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Lab>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, name: string, lab: models.Lab, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Lab>>;

    /**
     * Create or replace an existing lab. This operation can take a while to
     * complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the lab.
     *
     * @param {object} lab A lab.
     *
     * @param {string} [lab.labStorageType] Type of storage used by the lab. It can
     * be either Premium or Standard. Default is Premium. Possible values include:
     * 'Standard', 'Premium'
     *
     * @param {string} [lab.premiumDataDisks] The setting to enable usage of
     * premium data disks.
     * When its value is 'Enabled', creation of standard or premium data disks is
     * allowed.
     * When its value is 'Disabled', only creation of standard data disks is
     * allowed. Possible values include: 'Disabled', 'Enabled'
     *
     * @param {string} [lab.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [lab.uniqueIdentifier] The unique immutable identifier of a
     * resource (Guid).
     *
     * @param {string} [lab.location] The location of the resource.
     *
     * @param {object} [lab.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Lab} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Lab} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Lab} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, name: string, lab: models.Lab, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Lab>;
    createOrUpdate(resourceGroupName: string, name: string, lab: models.Lab, callback: ServiceCallback<models.Lab>): void;
    createOrUpdate(resourceGroupName: string, name: string, lab: models.Lab, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Lab>): void;


    /**
     * Delete lab. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete lab. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, name: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Modify properties of labs.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the lab.
     *
     * @param {object} lab A lab.
     *
     * @param {string} [lab.labStorageType] Type of storage used by the lab. It can
     * be either Premium or Standard. Default is Premium. Possible values include:
     * 'Standard', 'Premium'
     *
     * @param {string} [lab.premiumDataDisks] The setting to enable usage of
     * premium data disks.
     * When its value is 'Enabled', creation of standard or premium data disks is
     * allowed.
     * When its value is 'Disabled', only creation of standard data disks is
     * allowed. Possible values include: 'Disabled', 'Enabled'
     *
     * @param {string} [lab.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [lab.uniqueIdentifier] The unique immutable identifier of a
     * resource (Guid).
     *
     * @param {string} [lab.location] The location of the resource.
     *
     * @param {object} [lab.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Lab>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, name: string, lab: models.LabFragment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Lab>>;

    /**
     * Modify properties of labs.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the lab.
     *
     * @param {object} lab A lab.
     *
     * @param {string} [lab.labStorageType] Type of storage used by the lab. It can
     * be either Premium or Standard. Default is Premium. Possible values include:
     * 'Standard', 'Premium'
     *
     * @param {string} [lab.premiumDataDisks] The setting to enable usage of
     * premium data disks.
     * When its value is 'Enabled', creation of standard or premium data disks is
     * allowed.
     * When its value is 'Disabled', only creation of standard data disks is
     * allowed. Possible values include: 'Disabled', 'Enabled'
     *
     * @param {string} [lab.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [lab.uniqueIdentifier] The unique immutable identifier of a
     * resource (Guid).
     *
     * @param {string} [lab.location] The location of the resource.
     *
     * @param {object} [lab.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Lab} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Lab} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Lab} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, name: string, lab: models.LabFragment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Lab>;
    update(resourceGroupName: string, name: string, lab: models.LabFragment, callback: ServiceCallback<models.Lab>): void;
    update(resourceGroupName: string, name: string, lab: models.LabFragment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Lab>): void;


    /**
     * Claim a random claimable virtual machine in the lab. This operation can take
     * a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    claimAnyVmWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Claim a random claimable virtual machine in the lab. This operation can take
     * a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    claimAnyVm(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    claimAnyVm(resourceGroupName: string, name: string, callback: ServiceCallback<void>): void;
    claimAnyVm(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Create virtual machines in a lab. This operation can take a while to
     * complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the lab.
     *
     * @param {object} labVirtualMachineCreationParameter Properties for creating a
     * virtual machine.
     *
     * @param {object} [labVirtualMachineCreationParameter.bulkCreationParameters]
     * The number of virtual machine instances to create.
     *
     * @param {number}
     * [labVirtualMachineCreationParameter.bulkCreationParameters.instanceCount]
     * The number of virtual machine instances to create.
     *
     * @param {string} [labVirtualMachineCreationParameter.notes] The notes of the
     * virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.ownerObjectId] The
     * object identifier of the owner of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.ownerUserPrincipalName]
     * The user principal name of the virtual machine owner.
     *
     * @param {string} [labVirtualMachineCreationParameter.createdByUserId] The
     * object identifier of the creator of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.createdByUser] The email
     * address of creator of the virtual machine.
     *
     * @param {date} [labVirtualMachineCreationParameter.createdDate] The creation
     * date of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.customImageId] The
     * custom image identifier of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.osType] The OS type of
     * the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.size] The size of the
     * virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.userName] The user name
     * of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.password] The password
     * of the virtual machine administrator.
     *
     * @param {string} [labVirtualMachineCreationParameter.sshKey] The SSH key of
     * the virtual machine administrator.
     *
     * @param {boolean}
     * [labVirtualMachineCreationParameter.isAuthenticationWithSshKey] Indicates
     * whether this virtual machine uses an SSH key for authentication.
     *
     * @param {string} [labVirtualMachineCreationParameter.fqdn] The
     * fully-qualified domain name of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.labSubnetName] The lab
     * subnet name of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.labVirtualNetworkId] The
     * lab virtual network identifier of the virtual machine.
     *
     * @param {boolean}
     * [labVirtualMachineCreationParameter.disallowPublicIpAddress] Indicates
     * whether the virtual machine is to be created without a public IP address.
     *
     * @param {array} [labVirtualMachineCreationParameter.artifacts] The artifacts
     * to be installed on the virtual machine.
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.artifactDeploymentStatus] The artifact
     * deployment status for the virtual machine.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.artifactDeploymentStatus.deploymentStatus]
     * The deployment status of the artifact.
     *
     * @param {number}
     * [labVirtualMachineCreationParameter.artifactDeploymentStatus.artifactsApplied]
     * The total count of the artifacts that were successfully applied.
     *
     * @param {number}
     * [labVirtualMachineCreationParameter.artifactDeploymentStatus.totalArtifacts]
     * The total count of the artifacts that were tentatively applied.
     *
     * @param {object} [labVirtualMachineCreationParameter.galleryImageReference]
     * The Microsoft Azure Marketplace image reference of the virtual machine.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.galleryImageReference.offer] The offer
     * of the gallery image.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.galleryImageReference.publisher] The
     * publisher of the gallery image.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.galleryImageReference.sku] The SKU of
     * the gallery image.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.galleryImageReference.osType] The OS
     * type of the gallery image.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.galleryImageReference.version] The
     * version of the gallery image.
     *
     * @param {object} [labVirtualMachineCreationParameter.computeVm] The compute
     * virtual machine properties.
     *
     * @param {array} [labVirtualMachineCreationParameter.computeVm.statuses] Gets
     * the statuses of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.computeVm.osType] Gets
     * the OS type of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.computeVm.vmSize] Gets
     * the size of the virtual machine.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.computeVm.networkInterfaceId] Gets the
     * network interface ID of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.computeVm.osDiskId] Gets
     * OS disk blob uri for the virtual machine.
     *
     * @param {array} [labVirtualMachineCreationParameter.computeVm.dataDiskIds]
     * Gets data disks blob uri for the virtual machine.
     *
     * @param {array} [labVirtualMachineCreationParameter.computeVm.dataDisks] Gets
     * all data disks attached to the virtual machine.
     *
     * @param {object} [labVirtualMachineCreationParameter.networkInterface] The
     * network interface properties.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.networkInterface.virtualNetworkId] The
     * resource ID of the virtual network.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.networkInterface.subnetId] The resource
     * ID of the sub net.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.networkInterface.publicIpAddressId] The
     * resource ID of the public IP address.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.networkInterface.publicIpAddress] The
     * public IP address.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.networkInterface.privateIpAddress] The
     * private IP address.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.networkInterface.dnsName] The DNS name.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.networkInterface.rdpAuthority] The
     * RdpAuthority property is a server DNS host name or IP address followed by
     * the service port number for RDP (Remote Desktop Protocol).
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.networkInterface.sshAuthority] The
     * SshAuthority property is a server DNS host name or IP address followed by
     * the service port number for SSH.
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.networkInterface.sharedPublicIpAddressConfiguration]
     * The configuration for sharing a public IP address across multiple virtual
     * machines.
     *
     * @param {array}
     * [labVirtualMachineCreationParameter.networkInterface.sharedPublicIpAddressConfiguration.inboundNatRules]
     * The incoming NAT rules
     *
     * @param {object} [labVirtualMachineCreationParameter.applicableSchedule] The
     * applicable schedule for the virtual machine.
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsShutdown] The
     * auto-shutdown schedule, if one has been set at the lab or lab resource
     * level.
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup] The
     * auto-startup schedule, if one has been set at the lab or lab resource level.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.status]
     * The status of the schedule (i.e. Enabled, Disabled). Possible values
     * include: 'Enabled', 'Disabled'
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.taskType]
     * The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.weeklyRecurrence]
     * If the schedule will occur only some days of the week, specify the weekly
     * recurrence.
     *
     * @param {array}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.weeklyRecurrence.weekdays]
     * The days of the week for which the schedule is set (e.g. Sunday, Monday,
     * Tuesday, etc.).
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.weeklyRecurrence.time]
     * The time of the day the schedule will occur.
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.dailyRecurrence]
     * If the schedule will occur once each day of the week, specify the daily
     * recurrence.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.dailyRecurrence.time]
     * The time of day the schedule will occur.
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.hourlyRecurrence]
     * If the schedule will occur multiple times a day, specify the hourly
     * recurrence.
     *
     * @param {number}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.hourlyRecurrence.minute]
     * Minutes of the hour the schedule will run.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.timeZoneId]
     * The time zone ID (e.g. Pacific Standard time).
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.notificationSettings]
     * Notification settings.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.notificationSettings.status]
     * If notifications are enabled for this schedule (i.e. Enabled, Disabled).
     * Possible values include: 'Disabled', 'Enabled'
     *
     * @param {number}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.notificationSettings.timeInMinutes]
     * Time in minutes before event at which notification will be sent.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.notificationSettings.webhookUrl]
     * The webhook URL to which the notification will be sent.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.targetResourceId]
     * The resource ID to which the schedule belongs
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.provisioningState]
     * The provisioning status of the resource.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.uniqueIdentifier]
     * The unique immutable identifier of a resource (Guid).
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.location]
     * The location of the resource.
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.tags]
     * The tags of the resource.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.location] The
     * location of the resource.
     *
     * @param {object} [labVirtualMachineCreationParameter.applicableSchedule.tags]
     * The tags of the resource.
     *
     * @param {date} [labVirtualMachineCreationParameter.expirationDate] The
     * expiration date for VM.
     *
     * @param {boolean} [labVirtualMachineCreationParameter.allowClaim] Indicates
     * whether another user can take ownership of the virtual machine
     *
     * @param {string} [labVirtualMachineCreationParameter.storageType] Storage
     * type to use for virtual machine (i.e. Standard, Premium).
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.virtualMachineCreationSource] Tells
     * source of creation of lab virtual machine. Output property only. Possible
     * values include: 'FromCustomImage', 'FromGalleryImage'
     *
     * @param {string} [labVirtualMachineCreationParameter.environmentId] The
     * resource ID of the environment that contains this virtual machine, if any.
     *
     * @param {string} [labVirtualMachineCreationParameter.provisioningState] The
     * provisioning status of the resource.
     *
     * @param {string} [labVirtualMachineCreationParameter.uniqueIdentifier] The
     * unique immutable identifier of a resource (Guid).
     *
     * @param {string} [labVirtualMachineCreationParameter.name] The name of the
     * virtual machine or environment
     *
     * @param {string} [labVirtualMachineCreationParameter.location] The location
     * of the new virtual machine or environment
     *
     * @param {object} [labVirtualMachineCreationParameter.tags] The tags of the
     * resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createEnvironmentWithHttpOperationResponse(resourceGroupName: string, name: string, labVirtualMachineCreationParameter: models.LabVirtualMachineCreationParameter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Create virtual machines in a lab. This operation can take a while to
     * complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the lab.
     *
     * @param {object} labVirtualMachineCreationParameter Properties for creating a
     * virtual machine.
     *
     * @param {object} [labVirtualMachineCreationParameter.bulkCreationParameters]
     * The number of virtual machine instances to create.
     *
     * @param {number}
     * [labVirtualMachineCreationParameter.bulkCreationParameters.instanceCount]
     * The number of virtual machine instances to create.
     *
     * @param {string} [labVirtualMachineCreationParameter.notes] The notes of the
     * virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.ownerObjectId] The
     * object identifier of the owner of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.ownerUserPrincipalName]
     * The user principal name of the virtual machine owner.
     *
     * @param {string} [labVirtualMachineCreationParameter.createdByUserId] The
     * object identifier of the creator of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.createdByUser] The email
     * address of creator of the virtual machine.
     *
     * @param {date} [labVirtualMachineCreationParameter.createdDate] The creation
     * date of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.customImageId] The
     * custom image identifier of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.osType] The OS type of
     * the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.size] The size of the
     * virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.userName] The user name
     * of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.password] The password
     * of the virtual machine administrator.
     *
     * @param {string} [labVirtualMachineCreationParameter.sshKey] The SSH key of
     * the virtual machine administrator.
     *
     * @param {boolean}
     * [labVirtualMachineCreationParameter.isAuthenticationWithSshKey] Indicates
     * whether this virtual machine uses an SSH key for authentication.
     *
     * @param {string} [labVirtualMachineCreationParameter.fqdn] The
     * fully-qualified domain name of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.labSubnetName] The lab
     * subnet name of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.labVirtualNetworkId] The
     * lab virtual network identifier of the virtual machine.
     *
     * @param {boolean}
     * [labVirtualMachineCreationParameter.disallowPublicIpAddress] Indicates
     * whether the virtual machine is to be created without a public IP address.
     *
     * @param {array} [labVirtualMachineCreationParameter.artifacts] The artifacts
     * to be installed on the virtual machine.
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.artifactDeploymentStatus] The artifact
     * deployment status for the virtual machine.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.artifactDeploymentStatus.deploymentStatus]
     * The deployment status of the artifact.
     *
     * @param {number}
     * [labVirtualMachineCreationParameter.artifactDeploymentStatus.artifactsApplied]
     * The total count of the artifacts that were successfully applied.
     *
     * @param {number}
     * [labVirtualMachineCreationParameter.artifactDeploymentStatus.totalArtifacts]
     * The total count of the artifacts that were tentatively applied.
     *
     * @param {object} [labVirtualMachineCreationParameter.galleryImageReference]
     * The Microsoft Azure Marketplace image reference of the virtual machine.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.galleryImageReference.offer] The offer
     * of the gallery image.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.galleryImageReference.publisher] The
     * publisher of the gallery image.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.galleryImageReference.sku] The SKU of
     * the gallery image.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.galleryImageReference.osType] The OS
     * type of the gallery image.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.galleryImageReference.version] The
     * version of the gallery image.
     *
     * @param {object} [labVirtualMachineCreationParameter.computeVm] The compute
     * virtual machine properties.
     *
     * @param {array} [labVirtualMachineCreationParameter.computeVm.statuses] Gets
     * the statuses of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.computeVm.osType] Gets
     * the OS type of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.computeVm.vmSize] Gets
     * the size of the virtual machine.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.computeVm.networkInterfaceId] Gets the
     * network interface ID of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.computeVm.osDiskId] Gets
     * OS disk blob uri for the virtual machine.
     *
     * @param {array} [labVirtualMachineCreationParameter.computeVm.dataDiskIds]
     * Gets data disks blob uri for the virtual machine.
     *
     * @param {array} [labVirtualMachineCreationParameter.computeVm.dataDisks] Gets
     * all data disks attached to the virtual machine.
     *
     * @param {object} [labVirtualMachineCreationParameter.networkInterface] The
     * network interface properties.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.networkInterface.virtualNetworkId] The
     * resource ID of the virtual network.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.networkInterface.subnetId] The resource
     * ID of the sub net.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.networkInterface.publicIpAddressId] The
     * resource ID of the public IP address.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.networkInterface.publicIpAddress] The
     * public IP address.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.networkInterface.privateIpAddress] The
     * private IP address.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.networkInterface.dnsName] The DNS name.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.networkInterface.rdpAuthority] The
     * RdpAuthority property is a server DNS host name or IP address followed by
     * the service port number for RDP (Remote Desktop Protocol).
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.networkInterface.sshAuthority] The
     * SshAuthority property is a server DNS host name or IP address followed by
     * the service port number for SSH.
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.networkInterface.sharedPublicIpAddressConfiguration]
     * The configuration for sharing a public IP address across multiple virtual
     * machines.
     *
     * @param {array}
     * [labVirtualMachineCreationParameter.networkInterface.sharedPublicIpAddressConfiguration.inboundNatRules]
     * The incoming NAT rules
     *
     * @param {object} [labVirtualMachineCreationParameter.applicableSchedule] The
     * applicable schedule for the virtual machine.
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsShutdown] The
     * auto-shutdown schedule, if one has been set at the lab or lab resource
     * level.
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup] The
     * auto-startup schedule, if one has been set at the lab or lab resource level.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.status]
     * The status of the schedule (i.e. Enabled, Disabled). Possible values
     * include: 'Enabled', 'Disabled'
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.taskType]
     * The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.weeklyRecurrence]
     * If the schedule will occur only some days of the week, specify the weekly
     * recurrence.
     *
     * @param {array}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.weeklyRecurrence.weekdays]
     * The days of the week for which the schedule is set (e.g. Sunday, Monday,
     * Tuesday, etc.).
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.weeklyRecurrence.time]
     * The time of the day the schedule will occur.
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.dailyRecurrence]
     * If the schedule will occur once each day of the week, specify the daily
     * recurrence.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.dailyRecurrence.time]
     * The time of day the schedule will occur.
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.hourlyRecurrence]
     * If the schedule will occur multiple times a day, specify the hourly
     * recurrence.
     *
     * @param {number}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.hourlyRecurrence.minute]
     * Minutes of the hour the schedule will run.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.timeZoneId]
     * The time zone ID (e.g. Pacific Standard time).
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.notificationSettings]
     * Notification settings.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.notificationSettings.status]
     * If notifications are enabled for this schedule (i.e. Enabled, Disabled).
     * Possible values include: 'Disabled', 'Enabled'
     *
     * @param {number}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.notificationSettings.timeInMinutes]
     * Time in minutes before event at which notification will be sent.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.notificationSettings.webhookUrl]
     * The webhook URL to which the notification will be sent.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.targetResourceId]
     * The resource ID to which the schedule belongs
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.provisioningState]
     * The provisioning status of the resource.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.uniqueIdentifier]
     * The unique immutable identifier of a resource (Guid).
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.location]
     * The location of the resource.
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.tags]
     * The tags of the resource.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.location] The
     * location of the resource.
     *
     * @param {object} [labVirtualMachineCreationParameter.applicableSchedule.tags]
     * The tags of the resource.
     *
     * @param {date} [labVirtualMachineCreationParameter.expirationDate] The
     * expiration date for VM.
     *
     * @param {boolean} [labVirtualMachineCreationParameter.allowClaim] Indicates
     * whether another user can take ownership of the virtual machine
     *
     * @param {string} [labVirtualMachineCreationParameter.storageType] Storage
     * type to use for virtual machine (i.e. Standard, Premium).
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.virtualMachineCreationSource] Tells
     * source of creation of lab virtual machine. Output property only. Possible
     * values include: 'FromCustomImage', 'FromGalleryImage'
     *
     * @param {string} [labVirtualMachineCreationParameter.environmentId] The
     * resource ID of the environment that contains this virtual machine, if any.
     *
     * @param {string} [labVirtualMachineCreationParameter.provisioningState] The
     * provisioning status of the resource.
     *
     * @param {string} [labVirtualMachineCreationParameter.uniqueIdentifier] The
     * unique immutable identifier of a resource (Guid).
     *
     * @param {string} [labVirtualMachineCreationParameter.name] The name of the
     * virtual machine or environment
     *
     * @param {string} [labVirtualMachineCreationParameter.location] The location
     * of the new virtual machine or environment
     *
     * @param {object} [labVirtualMachineCreationParameter.tags] The tags of the
     * resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createEnvironment(resourceGroupName: string, name: string, labVirtualMachineCreationParameter: models.LabVirtualMachineCreationParameter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    createEnvironment(resourceGroupName: string, name: string, labVirtualMachineCreationParameter: models.LabVirtualMachineCreationParameter, callback: ServiceCallback<void>): void;
    createEnvironment(resourceGroupName: string, name: string, labVirtualMachineCreationParameter: models.LabVirtualMachineCreationParameter, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Exports the lab resource usage into a storage account This operation can
     * take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the lab.
     *
     * @param {object} exportResourceUsageParameters The parameters of the export
     * operation.
     *
     * @param {string} [exportResourceUsageParameters.blobStorageAbsoluteSasUri]
     * The blob storage absolute sas uri with write permission to the container
     * which the usage data needs to be uploaded to.
     *
     * @param {date} [exportResourceUsageParameters.usageStartDate] The start time
     * of the usage. If not provided, usage will be reported since the beginning of
     * data collection.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    exportResourceUsageWithHttpOperationResponse(resourceGroupName: string, name: string, exportResourceUsageParameters: models.ExportResourceUsageParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Exports the lab resource usage into a storage account This operation can
     * take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the lab.
     *
     * @param {object} exportResourceUsageParameters The parameters of the export
     * operation.
     *
     * @param {string} [exportResourceUsageParameters.blobStorageAbsoluteSasUri]
     * The blob storage absolute sas uri with write permission to the container
     * which the usage data needs to be uploaded to.
     *
     * @param {date} [exportResourceUsageParameters.usageStartDate] The start time
     * of the usage. If not provided, usage will be reported since the beginning of
     * data collection.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    exportResourceUsage(resourceGroupName: string, name: string, exportResourceUsageParameters: models.ExportResourceUsageParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    exportResourceUsage(resourceGroupName: string, name: string, exportResourceUsageParameters: models.ExportResourceUsageParameters, callback: ServiceCallback<void>): void;
    exportResourceUsage(resourceGroupName: string, name: string, exportResourceUsageParameters: models.ExportResourceUsageParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Generate a URI for uploading custom disk images to a Lab.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the lab.
     *
     * @param {object} generateUploadUriParameter Properties for generating an
     * upload URI.
     *
     * @param {string} [generateUploadUriParameter.blobName] The blob name of the
     * upload URI.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<GenerateUploadUriResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    generateUploadUriWithHttpOperationResponse(resourceGroupName: string, name: string, generateUploadUriParameter: models.GenerateUploadUriParameter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GenerateUploadUriResponse>>;

    /**
     * Generate a URI for uploading custom disk images to a Lab.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the lab.
     *
     * @param {object} generateUploadUriParameter Properties for generating an
     * upload URI.
     *
     * @param {string} [generateUploadUriParameter.blobName] The blob name of the
     * upload URI.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {GenerateUploadUriResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {GenerateUploadUriResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link GenerateUploadUriResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    generateUploadUri(resourceGroupName: string, name: string, generateUploadUriParameter: models.GenerateUploadUriParameter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GenerateUploadUriResponse>;
    generateUploadUri(resourceGroupName: string, name: string, generateUploadUriParameter: models.GenerateUploadUriParameter, callback: ServiceCallback<models.GenerateUploadUriResponse>): void;
    generateUploadUri(resourceGroupName: string, name: string, generateUploadUriParameter: models.GenerateUploadUriParameter, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GenerateUploadUriResponse>): void;


    /**
     * List disk images available for custom image creation.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationLabVhd>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listVhdsWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationLabVhd>>;

    /**
     * List disk images available for custom image creation.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationLabVhd} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationLabVhd} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationLabVhd} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listVhds(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationLabVhd>;
    listVhds(resourceGroupName: string, name: string, callback: ServiceCallback<models.ResponseWithContinuationLabVhd>): void;
    listVhds(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationLabVhd>): void;


    /**
     * Create or replace an existing lab. This operation can take a while to
     * complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the lab.
     *
     * @param {object} lab A lab.
     *
     * @param {string} [lab.labStorageType] Type of storage used by the lab. It can
     * be either Premium or Standard. Default is Premium. Possible values include:
     * 'Standard', 'Premium'
     *
     * @param {string} [lab.premiumDataDisks] The setting to enable usage of
     * premium data disks.
     * When its value is 'Enabled', creation of standard or premium data disks is
     * allowed.
     * When its value is 'Disabled', only creation of standard data disks is
     * allowed. Possible values include: 'Disabled', 'Enabled'
     *
     * @param {string} [lab.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [lab.uniqueIdentifier] The unique immutable identifier of a
     * resource (Guid).
     *
     * @param {string} [lab.location] The location of the resource.
     *
     * @param {object} [lab.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Lab>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, name: string, lab: models.Lab, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Lab>>;

    /**
     * Create or replace an existing lab. This operation can take a while to
     * complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the lab.
     *
     * @param {object} lab A lab.
     *
     * @param {string} [lab.labStorageType] Type of storage used by the lab. It can
     * be either Premium or Standard. Default is Premium. Possible values include:
     * 'Standard', 'Premium'
     *
     * @param {string} [lab.premiumDataDisks] The setting to enable usage of
     * premium data disks.
     * When its value is 'Enabled', creation of standard or premium data disks is
     * allowed.
     * When its value is 'Disabled', only creation of standard data disks is
     * allowed. Possible values include: 'Disabled', 'Enabled'
     *
     * @param {string} [lab.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [lab.uniqueIdentifier] The unique immutable identifier of a
     * resource (Guid).
     *
     * @param {string} [lab.location] The location of the resource.
     *
     * @param {object} [lab.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Lab} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Lab} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Lab} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, name: string, lab: models.Lab, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Lab>;
    beginCreateOrUpdate(resourceGroupName: string, name: string, lab: models.Lab, callback: ServiceCallback<models.Lab>): void;
    beginCreateOrUpdate(resourceGroupName: string, name: string, lab: models.Lab, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Lab>): void;


    /**
     * Delete lab. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete lab. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, name: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Claim a random claimable virtual machine in the lab. This operation can take
     * a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginClaimAnyVmWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Claim a random claimable virtual machine in the lab. This operation can take
     * a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginClaimAnyVm(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginClaimAnyVm(resourceGroupName: string, name: string, callback: ServiceCallback<void>): void;
    beginClaimAnyVm(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Create virtual machines in a lab. This operation can take a while to
     * complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the lab.
     *
     * @param {object} labVirtualMachineCreationParameter Properties for creating a
     * virtual machine.
     *
     * @param {object} [labVirtualMachineCreationParameter.bulkCreationParameters]
     * The number of virtual machine instances to create.
     *
     * @param {number}
     * [labVirtualMachineCreationParameter.bulkCreationParameters.instanceCount]
     * The number of virtual machine instances to create.
     *
     * @param {string} [labVirtualMachineCreationParameter.notes] The notes of the
     * virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.ownerObjectId] The
     * object identifier of the owner of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.ownerUserPrincipalName]
     * The user principal name of the virtual machine owner.
     *
     * @param {string} [labVirtualMachineCreationParameter.createdByUserId] The
     * object identifier of the creator of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.createdByUser] The email
     * address of creator of the virtual machine.
     *
     * @param {date} [labVirtualMachineCreationParameter.createdDate] The creation
     * date of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.customImageId] The
     * custom image identifier of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.osType] The OS type of
     * the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.size] The size of the
     * virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.userName] The user name
     * of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.password] The password
     * of the virtual machine administrator.
     *
     * @param {string} [labVirtualMachineCreationParameter.sshKey] The SSH key of
     * the virtual machine administrator.
     *
     * @param {boolean}
     * [labVirtualMachineCreationParameter.isAuthenticationWithSshKey] Indicates
     * whether this virtual machine uses an SSH key for authentication.
     *
     * @param {string} [labVirtualMachineCreationParameter.fqdn] The
     * fully-qualified domain name of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.labSubnetName] The lab
     * subnet name of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.labVirtualNetworkId] The
     * lab virtual network identifier of the virtual machine.
     *
     * @param {boolean}
     * [labVirtualMachineCreationParameter.disallowPublicIpAddress] Indicates
     * whether the virtual machine is to be created without a public IP address.
     *
     * @param {array} [labVirtualMachineCreationParameter.artifacts] The artifacts
     * to be installed on the virtual machine.
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.artifactDeploymentStatus] The artifact
     * deployment status for the virtual machine.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.artifactDeploymentStatus.deploymentStatus]
     * The deployment status of the artifact.
     *
     * @param {number}
     * [labVirtualMachineCreationParameter.artifactDeploymentStatus.artifactsApplied]
     * The total count of the artifacts that were successfully applied.
     *
     * @param {number}
     * [labVirtualMachineCreationParameter.artifactDeploymentStatus.totalArtifacts]
     * The total count of the artifacts that were tentatively applied.
     *
     * @param {object} [labVirtualMachineCreationParameter.galleryImageReference]
     * The Microsoft Azure Marketplace image reference of the virtual machine.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.galleryImageReference.offer] The offer
     * of the gallery image.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.galleryImageReference.publisher] The
     * publisher of the gallery image.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.galleryImageReference.sku] The SKU of
     * the gallery image.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.galleryImageReference.osType] The OS
     * type of the gallery image.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.galleryImageReference.version] The
     * version of the gallery image.
     *
     * @param {object} [labVirtualMachineCreationParameter.computeVm] The compute
     * virtual machine properties.
     *
     * @param {array} [labVirtualMachineCreationParameter.computeVm.statuses] Gets
     * the statuses of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.computeVm.osType] Gets
     * the OS type of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.computeVm.vmSize] Gets
     * the size of the virtual machine.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.computeVm.networkInterfaceId] Gets the
     * network interface ID of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.computeVm.osDiskId] Gets
     * OS disk blob uri for the virtual machine.
     *
     * @param {array} [labVirtualMachineCreationParameter.computeVm.dataDiskIds]
     * Gets data disks blob uri for the virtual machine.
     *
     * @param {array} [labVirtualMachineCreationParameter.computeVm.dataDisks] Gets
     * all data disks attached to the virtual machine.
     *
     * @param {object} [labVirtualMachineCreationParameter.networkInterface] The
     * network interface properties.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.networkInterface.virtualNetworkId] The
     * resource ID of the virtual network.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.networkInterface.subnetId] The resource
     * ID of the sub net.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.networkInterface.publicIpAddressId] The
     * resource ID of the public IP address.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.networkInterface.publicIpAddress] The
     * public IP address.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.networkInterface.privateIpAddress] The
     * private IP address.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.networkInterface.dnsName] The DNS name.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.networkInterface.rdpAuthority] The
     * RdpAuthority property is a server DNS host name or IP address followed by
     * the service port number for RDP (Remote Desktop Protocol).
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.networkInterface.sshAuthority] The
     * SshAuthority property is a server DNS host name or IP address followed by
     * the service port number for SSH.
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.networkInterface.sharedPublicIpAddressConfiguration]
     * The configuration for sharing a public IP address across multiple virtual
     * machines.
     *
     * @param {array}
     * [labVirtualMachineCreationParameter.networkInterface.sharedPublicIpAddressConfiguration.inboundNatRules]
     * The incoming NAT rules
     *
     * @param {object} [labVirtualMachineCreationParameter.applicableSchedule] The
     * applicable schedule for the virtual machine.
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsShutdown] The
     * auto-shutdown schedule, if one has been set at the lab or lab resource
     * level.
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup] The
     * auto-startup schedule, if one has been set at the lab or lab resource level.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.status]
     * The status of the schedule (i.e. Enabled, Disabled). Possible values
     * include: 'Enabled', 'Disabled'
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.taskType]
     * The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.weeklyRecurrence]
     * If the schedule will occur only some days of the week, specify the weekly
     * recurrence.
     *
     * @param {array}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.weeklyRecurrence.weekdays]
     * The days of the week for which the schedule is set (e.g. Sunday, Monday,
     * Tuesday, etc.).
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.weeklyRecurrence.time]
     * The time of the day the schedule will occur.
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.dailyRecurrence]
     * If the schedule will occur once each day of the week, specify the daily
     * recurrence.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.dailyRecurrence.time]
     * The time of day the schedule will occur.
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.hourlyRecurrence]
     * If the schedule will occur multiple times a day, specify the hourly
     * recurrence.
     *
     * @param {number}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.hourlyRecurrence.minute]
     * Minutes of the hour the schedule will run.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.timeZoneId]
     * The time zone ID (e.g. Pacific Standard time).
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.notificationSettings]
     * Notification settings.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.notificationSettings.status]
     * If notifications are enabled for this schedule (i.e. Enabled, Disabled).
     * Possible values include: 'Disabled', 'Enabled'
     *
     * @param {number}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.notificationSettings.timeInMinutes]
     * Time in minutes before event at which notification will be sent.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.notificationSettings.webhookUrl]
     * The webhook URL to which the notification will be sent.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.targetResourceId]
     * The resource ID to which the schedule belongs
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.provisioningState]
     * The provisioning status of the resource.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.uniqueIdentifier]
     * The unique immutable identifier of a resource (Guid).
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.location]
     * The location of the resource.
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.tags]
     * The tags of the resource.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.location] The
     * location of the resource.
     *
     * @param {object} [labVirtualMachineCreationParameter.applicableSchedule.tags]
     * The tags of the resource.
     *
     * @param {date} [labVirtualMachineCreationParameter.expirationDate] The
     * expiration date for VM.
     *
     * @param {boolean} [labVirtualMachineCreationParameter.allowClaim] Indicates
     * whether another user can take ownership of the virtual machine
     *
     * @param {string} [labVirtualMachineCreationParameter.storageType] Storage
     * type to use for virtual machine (i.e. Standard, Premium).
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.virtualMachineCreationSource] Tells
     * source of creation of lab virtual machine. Output property only. Possible
     * values include: 'FromCustomImage', 'FromGalleryImage'
     *
     * @param {string} [labVirtualMachineCreationParameter.environmentId] The
     * resource ID of the environment that contains this virtual machine, if any.
     *
     * @param {string} [labVirtualMachineCreationParameter.provisioningState] The
     * provisioning status of the resource.
     *
     * @param {string} [labVirtualMachineCreationParameter.uniqueIdentifier] The
     * unique immutable identifier of a resource (Guid).
     *
     * @param {string} [labVirtualMachineCreationParameter.name] The name of the
     * virtual machine or environment
     *
     * @param {string} [labVirtualMachineCreationParameter.location] The location
     * of the new virtual machine or environment
     *
     * @param {object} [labVirtualMachineCreationParameter.tags] The tags of the
     * resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateEnvironmentWithHttpOperationResponse(resourceGroupName: string, name: string, labVirtualMachineCreationParameter: models.LabVirtualMachineCreationParameter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Create virtual machines in a lab. This operation can take a while to
     * complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the lab.
     *
     * @param {object} labVirtualMachineCreationParameter Properties for creating a
     * virtual machine.
     *
     * @param {object} [labVirtualMachineCreationParameter.bulkCreationParameters]
     * The number of virtual machine instances to create.
     *
     * @param {number}
     * [labVirtualMachineCreationParameter.bulkCreationParameters.instanceCount]
     * The number of virtual machine instances to create.
     *
     * @param {string} [labVirtualMachineCreationParameter.notes] The notes of the
     * virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.ownerObjectId] The
     * object identifier of the owner of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.ownerUserPrincipalName]
     * The user principal name of the virtual machine owner.
     *
     * @param {string} [labVirtualMachineCreationParameter.createdByUserId] The
     * object identifier of the creator of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.createdByUser] The email
     * address of creator of the virtual machine.
     *
     * @param {date} [labVirtualMachineCreationParameter.createdDate] The creation
     * date of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.customImageId] The
     * custom image identifier of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.osType] The OS type of
     * the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.size] The size of the
     * virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.userName] The user name
     * of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.password] The password
     * of the virtual machine administrator.
     *
     * @param {string} [labVirtualMachineCreationParameter.sshKey] The SSH key of
     * the virtual machine administrator.
     *
     * @param {boolean}
     * [labVirtualMachineCreationParameter.isAuthenticationWithSshKey] Indicates
     * whether this virtual machine uses an SSH key for authentication.
     *
     * @param {string} [labVirtualMachineCreationParameter.fqdn] The
     * fully-qualified domain name of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.labSubnetName] The lab
     * subnet name of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.labVirtualNetworkId] The
     * lab virtual network identifier of the virtual machine.
     *
     * @param {boolean}
     * [labVirtualMachineCreationParameter.disallowPublicIpAddress] Indicates
     * whether the virtual machine is to be created without a public IP address.
     *
     * @param {array} [labVirtualMachineCreationParameter.artifacts] The artifacts
     * to be installed on the virtual machine.
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.artifactDeploymentStatus] The artifact
     * deployment status for the virtual machine.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.artifactDeploymentStatus.deploymentStatus]
     * The deployment status of the artifact.
     *
     * @param {number}
     * [labVirtualMachineCreationParameter.artifactDeploymentStatus.artifactsApplied]
     * The total count of the artifacts that were successfully applied.
     *
     * @param {number}
     * [labVirtualMachineCreationParameter.artifactDeploymentStatus.totalArtifacts]
     * The total count of the artifacts that were tentatively applied.
     *
     * @param {object} [labVirtualMachineCreationParameter.galleryImageReference]
     * The Microsoft Azure Marketplace image reference of the virtual machine.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.galleryImageReference.offer] The offer
     * of the gallery image.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.galleryImageReference.publisher] The
     * publisher of the gallery image.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.galleryImageReference.sku] The SKU of
     * the gallery image.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.galleryImageReference.osType] The OS
     * type of the gallery image.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.galleryImageReference.version] The
     * version of the gallery image.
     *
     * @param {object} [labVirtualMachineCreationParameter.computeVm] The compute
     * virtual machine properties.
     *
     * @param {array} [labVirtualMachineCreationParameter.computeVm.statuses] Gets
     * the statuses of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.computeVm.osType] Gets
     * the OS type of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.computeVm.vmSize] Gets
     * the size of the virtual machine.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.computeVm.networkInterfaceId] Gets the
     * network interface ID of the virtual machine.
     *
     * @param {string} [labVirtualMachineCreationParameter.computeVm.osDiskId] Gets
     * OS disk blob uri for the virtual machine.
     *
     * @param {array} [labVirtualMachineCreationParameter.computeVm.dataDiskIds]
     * Gets data disks blob uri for the virtual machine.
     *
     * @param {array} [labVirtualMachineCreationParameter.computeVm.dataDisks] Gets
     * all data disks attached to the virtual machine.
     *
     * @param {object} [labVirtualMachineCreationParameter.networkInterface] The
     * network interface properties.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.networkInterface.virtualNetworkId] The
     * resource ID of the virtual network.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.networkInterface.subnetId] The resource
     * ID of the sub net.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.networkInterface.publicIpAddressId] The
     * resource ID of the public IP address.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.networkInterface.publicIpAddress] The
     * public IP address.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.networkInterface.privateIpAddress] The
     * private IP address.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.networkInterface.dnsName] The DNS name.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.networkInterface.rdpAuthority] The
     * RdpAuthority property is a server DNS host name or IP address followed by
     * the service port number for RDP (Remote Desktop Protocol).
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.networkInterface.sshAuthority] The
     * SshAuthority property is a server DNS host name or IP address followed by
     * the service port number for SSH.
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.networkInterface.sharedPublicIpAddressConfiguration]
     * The configuration for sharing a public IP address across multiple virtual
     * machines.
     *
     * @param {array}
     * [labVirtualMachineCreationParameter.networkInterface.sharedPublicIpAddressConfiguration.inboundNatRules]
     * The incoming NAT rules
     *
     * @param {object} [labVirtualMachineCreationParameter.applicableSchedule] The
     * applicable schedule for the virtual machine.
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsShutdown] The
     * auto-shutdown schedule, if one has been set at the lab or lab resource
     * level.
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup] The
     * auto-startup schedule, if one has been set at the lab or lab resource level.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.status]
     * The status of the schedule (i.e. Enabled, Disabled). Possible values
     * include: 'Enabled', 'Disabled'
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.taskType]
     * The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.weeklyRecurrence]
     * If the schedule will occur only some days of the week, specify the weekly
     * recurrence.
     *
     * @param {array}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.weeklyRecurrence.weekdays]
     * The days of the week for which the schedule is set (e.g. Sunday, Monday,
     * Tuesday, etc.).
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.weeklyRecurrence.time]
     * The time of the day the schedule will occur.
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.dailyRecurrence]
     * If the schedule will occur once each day of the week, specify the daily
     * recurrence.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.dailyRecurrence.time]
     * The time of day the schedule will occur.
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.hourlyRecurrence]
     * If the schedule will occur multiple times a day, specify the hourly
     * recurrence.
     *
     * @param {number}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.hourlyRecurrence.minute]
     * Minutes of the hour the schedule will run.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.timeZoneId]
     * The time zone ID (e.g. Pacific Standard time).
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.notificationSettings]
     * Notification settings.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.notificationSettings.status]
     * If notifications are enabled for this schedule (i.e. Enabled, Disabled).
     * Possible values include: 'Disabled', 'Enabled'
     *
     * @param {number}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.notificationSettings.timeInMinutes]
     * Time in minutes before event at which notification will be sent.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.notificationSettings.webhookUrl]
     * The webhook URL to which the notification will be sent.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.targetResourceId]
     * The resource ID to which the schedule belongs
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.provisioningState]
     * The provisioning status of the resource.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.uniqueIdentifier]
     * The unique immutable identifier of a resource (Guid).
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.location]
     * The location of the resource.
     *
     * @param {object}
     * [labVirtualMachineCreationParameter.applicableSchedule.labVmsStartup.tags]
     * The tags of the resource.
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.applicableSchedule.location] The
     * location of the resource.
     *
     * @param {object} [labVirtualMachineCreationParameter.applicableSchedule.tags]
     * The tags of the resource.
     *
     * @param {date} [labVirtualMachineCreationParameter.expirationDate] The
     * expiration date for VM.
     *
     * @param {boolean} [labVirtualMachineCreationParameter.allowClaim] Indicates
     * whether another user can take ownership of the virtual machine
     *
     * @param {string} [labVirtualMachineCreationParameter.storageType] Storage
     * type to use for virtual machine (i.e. Standard, Premium).
     *
     * @param {string}
     * [labVirtualMachineCreationParameter.virtualMachineCreationSource] Tells
     * source of creation of lab virtual machine. Output property only. Possible
     * values include: 'FromCustomImage', 'FromGalleryImage'
     *
     * @param {string} [labVirtualMachineCreationParameter.environmentId] The
     * resource ID of the environment that contains this virtual machine, if any.
     *
     * @param {string} [labVirtualMachineCreationParameter.provisioningState] The
     * provisioning status of the resource.
     *
     * @param {string} [labVirtualMachineCreationParameter.uniqueIdentifier] The
     * unique immutable identifier of a resource (Guid).
     *
     * @param {string} [labVirtualMachineCreationParameter.name] The name of the
     * virtual machine or environment
     *
     * @param {string} [labVirtualMachineCreationParameter.location] The location
     * of the new virtual machine or environment
     *
     * @param {object} [labVirtualMachineCreationParameter.tags] The tags of the
     * resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateEnvironment(resourceGroupName: string, name: string, labVirtualMachineCreationParameter: models.LabVirtualMachineCreationParameter, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginCreateEnvironment(resourceGroupName: string, name: string, labVirtualMachineCreationParameter: models.LabVirtualMachineCreationParameter, callback: ServiceCallback<void>): void;
    beginCreateEnvironment(resourceGroupName: string, name: string, labVirtualMachineCreationParameter: models.LabVirtualMachineCreationParameter, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Exports the lab resource usage into a storage account This operation can
     * take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the lab.
     *
     * @param {object} exportResourceUsageParameters The parameters of the export
     * operation.
     *
     * @param {string} [exportResourceUsageParameters.blobStorageAbsoluteSasUri]
     * The blob storage absolute sas uri with write permission to the container
     * which the usage data needs to be uploaded to.
     *
     * @param {date} [exportResourceUsageParameters.usageStartDate] The start time
     * of the usage. If not provided, usage will be reported since the beginning of
     * data collection.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginExportResourceUsageWithHttpOperationResponse(resourceGroupName: string, name: string, exportResourceUsageParameters: models.ExportResourceUsageParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Exports the lab resource usage into a storage account This operation can
     * take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the lab.
     *
     * @param {object} exportResourceUsageParameters The parameters of the export
     * operation.
     *
     * @param {string} [exportResourceUsageParameters.blobStorageAbsoluteSasUri]
     * The blob storage absolute sas uri with write permission to the container
     * which the usage data needs to be uploaded to.
     *
     * @param {date} [exportResourceUsageParameters.usageStartDate] The start time
     * of the usage. If not provided, usage will be reported since the beginning of
     * data collection.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginExportResourceUsage(resourceGroupName: string, name: string, exportResourceUsageParameters: models.ExportResourceUsageParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginExportResourceUsage(resourceGroupName: string, name: string, exportResourceUsageParameters: models.ExportResourceUsageParameters, callback: ServiceCallback<void>): void;
    beginExportResourceUsage(resourceGroupName: string, name: string, exportResourceUsageParameters: models.ExportResourceUsageParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * List labs in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationLab>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySubscriptionNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationLab>>;

    /**
     * List labs in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationLab} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationLab} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationLab} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySubscriptionNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationLab>;
    listBySubscriptionNext(nextPageLink: string, callback: ServiceCallback<models.ResponseWithContinuationLab>): void;
    listBySubscriptionNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationLab>): void;


    /**
     * List labs in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationLab>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationLab>>;

    /**
     * List labs in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationLab} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationLab} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationLab} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationLab>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.ResponseWithContinuationLab>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationLab>): void;


    /**
     * List disk images available for custom image creation.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationLabVhd>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listVhdsNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationLabVhd>>;

    /**
     * List disk images available for custom image creation.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationLabVhd} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationLabVhd} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationLabVhd} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listVhdsNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationLabVhd>;
    listVhdsNext(nextPageLink: string, callback: ServiceCallback<models.ResponseWithContinuationLabVhd>): void;
    listVhdsNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationLabVhd>): void;
}

/**
 * @class
 * GlobalSchedules
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DevTestLabsClient.
 */
export interface GlobalSchedules {


    /**
     * List schedules in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=status)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationSchedule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySubscriptionWithHttpOperationResponse(options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationSchedule>>;

    /**
     * List schedules in a subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=status)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationSchedule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationSchedule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationSchedule} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySubscription(options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationSchedule>;
    listBySubscription(callback: ServiceCallback<models.ResponseWithContinuationSchedule>): void;
    listBySubscription(options: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationSchedule>): void;


    /**
     * List schedules in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=status)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationSchedule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationSchedule>>;

    /**
     * List schedules in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=status)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationSchedule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationSchedule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationSchedule} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationSchedule>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.ResponseWithContinuationSchedule>): void;
    listByResourceGroup(resourceGroupName: string, options: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationSchedule>): void;


    /**
     * Get schedule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=status)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Schedule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Schedule>>;

    /**
     * Get schedule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=status)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Schedule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Schedule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Schedule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Schedule>;
    get(resourceGroupName: string, name: string, callback: ServiceCallback<models.Schedule>): void;
    get(resourceGroupName: string, name: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Schedule>): void;


    /**
     * Create or replace an existing schedule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} schedule A schedule.
     *
     * @param {string} [schedule.status] The status of the schedule (i.e. Enabled,
     * Disabled). Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [schedule.taskType] The task type of the schedule (e.g.
     * LabVmsShutdownTask, LabVmAutoStart).
     *
     * @param {object} [schedule.weeklyRecurrence] If the schedule will occur only
     * some days of the week, specify the weekly recurrence.
     *
     * @param {array} [schedule.weeklyRecurrence.weekdays] The days of the week for
     * which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.).
     *
     * @param {string} [schedule.weeklyRecurrence.time] The time of the day the
     * schedule will occur.
     *
     * @param {object} [schedule.dailyRecurrence] If the schedule will occur once
     * each day of the week, specify the daily recurrence.
     *
     * @param {string} [schedule.dailyRecurrence.time] The time of day the schedule
     * will occur.
     *
     * @param {object} [schedule.hourlyRecurrence] If the schedule will occur
     * multiple times a day, specify the hourly recurrence.
     *
     * @param {number} [schedule.hourlyRecurrence.minute] Minutes of the hour the
     * schedule will run.
     *
     * @param {string} [schedule.timeZoneId] The time zone ID (e.g. Pacific
     * Standard time).
     *
     * @param {object} [schedule.notificationSettings] Notification settings.
     *
     * @param {string} [schedule.notificationSettings.status] If notifications are
     * enabled for this schedule (i.e. Enabled, Disabled). Possible values include:
     * 'Disabled', 'Enabled'
     *
     * @param {number} [schedule.notificationSettings.timeInMinutes] Time in
     * minutes before event at which notification will be sent.
     *
     * @param {string} [schedule.notificationSettings.webhookUrl] The webhook URL
     * to which the notification will be sent.
     *
     * @param {string} [schedule.targetResourceId] The resource ID to which the
     * schedule belongs
     *
     * @param {string} [schedule.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [schedule.uniqueIdentifier] The unique immutable identifier
     * of a resource (Guid).
     *
     * @param {string} [schedule.location] The location of the resource.
     *
     * @param {object} [schedule.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Schedule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, name: string, schedule: models.Schedule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Schedule>>;

    /**
     * Create or replace an existing schedule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} schedule A schedule.
     *
     * @param {string} [schedule.status] The status of the schedule (i.e. Enabled,
     * Disabled). Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [schedule.taskType] The task type of the schedule (e.g.
     * LabVmsShutdownTask, LabVmAutoStart).
     *
     * @param {object} [schedule.weeklyRecurrence] If the schedule will occur only
     * some days of the week, specify the weekly recurrence.
     *
     * @param {array} [schedule.weeklyRecurrence.weekdays] The days of the week for
     * which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.).
     *
     * @param {string} [schedule.weeklyRecurrence.time] The time of the day the
     * schedule will occur.
     *
     * @param {object} [schedule.dailyRecurrence] If the schedule will occur once
     * each day of the week, specify the daily recurrence.
     *
     * @param {string} [schedule.dailyRecurrence.time] The time of day the schedule
     * will occur.
     *
     * @param {object} [schedule.hourlyRecurrence] If the schedule will occur
     * multiple times a day, specify the hourly recurrence.
     *
     * @param {number} [schedule.hourlyRecurrence.minute] Minutes of the hour the
     * schedule will run.
     *
     * @param {string} [schedule.timeZoneId] The time zone ID (e.g. Pacific
     * Standard time).
     *
     * @param {object} [schedule.notificationSettings] Notification settings.
     *
     * @param {string} [schedule.notificationSettings.status] If notifications are
     * enabled for this schedule (i.e. Enabled, Disabled). Possible values include:
     * 'Disabled', 'Enabled'
     *
     * @param {number} [schedule.notificationSettings.timeInMinutes] Time in
     * minutes before event at which notification will be sent.
     *
     * @param {string} [schedule.notificationSettings.webhookUrl] The webhook URL
     * to which the notification will be sent.
     *
     * @param {string} [schedule.targetResourceId] The resource ID to which the
     * schedule belongs
     *
     * @param {string} [schedule.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [schedule.uniqueIdentifier] The unique immutable identifier
     * of a resource (Guid).
     *
     * @param {string} [schedule.location] The location of the resource.
     *
     * @param {object} [schedule.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Schedule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Schedule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Schedule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, name: string, schedule: models.Schedule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Schedule>;
    createOrUpdate(resourceGroupName: string, name: string, schedule: models.Schedule, callback: ServiceCallback<models.Schedule>): void;
    createOrUpdate(resourceGroupName: string, name: string, schedule: models.Schedule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Schedule>): void;


    /**
     * Delete schedule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete schedule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, name: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Modify properties of schedules.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} schedule A schedule.
     *
     * @param {string} [schedule.status] The status of the schedule (i.e. Enabled,
     * Disabled). Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [schedule.taskType] The task type of the schedule (e.g.
     * LabVmsShutdownTask, LabVmAutoStart).
     *
     * @param {object} [schedule.weeklyRecurrence] If the schedule will occur only
     * some days of the week, specify the weekly recurrence.
     *
     * @param {array} [schedule.weeklyRecurrence.weekdays] The days of the week for
     * which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.).
     *
     * @param {string} [schedule.weeklyRecurrence.time] The time of the day the
     * schedule will occur.
     *
     * @param {object} [schedule.dailyRecurrence] If the schedule will occur once
     * each day of the week, specify the daily recurrence.
     *
     * @param {string} [schedule.dailyRecurrence.time] The time of day the schedule
     * will occur.
     *
     * @param {object} [schedule.hourlyRecurrence] If the schedule will occur
     * multiple times a day, specify the hourly recurrence.
     *
     * @param {number} [schedule.hourlyRecurrence.minute] Minutes of the hour the
     * schedule will run.
     *
     * @param {string} [schedule.timeZoneId] The time zone ID (e.g. Pacific
     * Standard time).
     *
     * @param {object} [schedule.notificationSettings] Notification settings.
     *
     * @param {string} [schedule.notificationSettings.status] If notifications are
     * enabled for this schedule (i.e. Enabled, Disabled). Possible values include:
     * 'Disabled', 'Enabled'
     *
     * @param {number} [schedule.notificationSettings.timeInMinutes] Time in
     * minutes before event at which notification will be sent.
     *
     * @param {string} [schedule.notificationSettings.webhookUrl] The webhook URL
     * to which the notification will be sent.
     *
     * @param {string} [schedule.targetResourceId] The resource ID to which the
     * schedule belongs
     *
     * @param {string} [schedule.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [schedule.uniqueIdentifier] The unique immutable identifier
     * of a resource (Guid).
     *
     * @param {string} [schedule.location] The location of the resource.
     *
     * @param {object} [schedule.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Schedule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, name: string, schedule: models.ScheduleFragment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Schedule>>;

    /**
     * Modify properties of schedules.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} schedule A schedule.
     *
     * @param {string} [schedule.status] The status of the schedule (i.e. Enabled,
     * Disabled). Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [schedule.taskType] The task type of the schedule (e.g.
     * LabVmsShutdownTask, LabVmAutoStart).
     *
     * @param {object} [schedule.weeklyRecurrence] If the schedule will occur only
     * some days of the week, specify the weekly recurrence.
     *
     * @param {array} [schedule.weeklyRecurrence.weekdays] The days of the week for
     * which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.).
     *
     * @param {string} [schedule.weeklyRecurrence.time] The time of the day the
     * schedule will occur.
     *
     * @param {object} [schedule.dailyRecurrence] If the schedule will occur once
     * each day of the week, specify the daily recurrence.
     *
     * @param {string} [schedule.dailyRecurrence.time] The time of day the schedule
     * will occur.
     *
     * @param {object} [schedule.hourlyRecurrence] If the schedule will occur
     * multiple times a day, specify the hourly recurrence.
     *
     * @param {number} [schedule.hourlyRecurrence.minute] Minutes of the hour the
     * schedule will run.
     *
     * @param {string} [schedule.timeZoneId] The time zone ID (e.g. Pacific
     * Standard time).
     *
     * @param {object} [schedule.notificationSettings] Notification settings.
     *
     * @param {string} [schedule.notificationSettings.status] If notifications are
     * enabled for this schedule (i.e. Enabled, Disabled). Possible values include:
     * 'Disabled', 'Enabled'
     *
     * @param {number} [schedule.notificationSettings.timeInMinutes] Time in
     * minutes before event at which notification will be sent.
     *
     * @param {string} [schedule.notificationSettings.webhookUrl] The webhook URL
     * to which the notification will be sent.
     *
     * @param {string} [schedule.targetResourceId] The resource ID to which the
     * schedule belongs
     *
     * @param {string} [schedule.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [schedule.uniqueIdentifier] The unique immutable identifier
     * of a resource (Guid).
     *
     * @param {string} [schedule.location] The location of the resource.
     *
     * @param {object} [schedule.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Schedule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Schedule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Schedule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, name: string, schedule: models.ScheduleFragment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Schedule>;
    update(resourceGroupName: string, name: string, schedule: models.ScheduleFragment, callback: ServiceCallback<models.Schedule>): void;
    update(resourceGroupName: string, name: string, schedule: models.ScheduleFragment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Schedule>): void;


    /**
     * Execute a schedule. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    executeWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Execute a schedule. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    execute(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    execute(resourceGroupName: string, name: string, callback: ServiceCallback<void>): void;
    execute(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a schedule's target resource Id. This operation can take a while to
     * complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} retargetScheduleProperties Properties for retargeting a
     * virtual machine schedule.
     *
     * @param {string} [retargetScheduleProperties.currentResourceId] The resource
     * Id of the virtual machine on which the schedule operates
     *
     * @param {string} [retargetScheduleProperties.targetResourceId] The resource
     * Id of the virtual machine that the schedule should be retargeted to
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    retargetWithHttpOperationResponse(resourceGroupName: string, name: string, retargetScheduleProperties: models.RetargetScheduleProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Updates a schedule's target resource Id. This operation can take a while to
     * complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} retargetScheduleProperties Properties for retargeting a
     * virtual machine schedule.
     *
     * @param {string} [retargetScheduleProperties.currentResourceId] The resource
     * Id of the virtual machine on which the schedule operates
     *
     * @param {string} [retargetScheduleProperties.targetResourceId] The resource
     * Id of the virtual machine that the schedule should be retargeted to
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    retarget(resourceGroupName: string, name: string, retargetScheduleProperties: models.RetargetScheduleProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    retarget(resourceGroupName: string, name: string, retargetScheduleProperties: models.RetargetScheduleProperties, callback: ServiceCallback<void>): void;
    retarget(resourceGroupName: string, name: string, retargetScheduleProperties: models.RetargetScheduleProperties, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Execute a schedule. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginExecuteWithHttpOperationResponse(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Execute a schedule. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginExecute(resourceGroupName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginExecute(resourceGroupName: string, name: string, callback: ServiceCallback<void>): void;
    beginExecute(resourceGroupName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Updates a schedule's target resource Id. This operation can take a while to
     * complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} retargetScheduleProperties Properties for retargeting a
     * virtual machine schedule.
     *
     * @param {string} [retargetScheduleProperties.currentResourceId] The resource
     * Id of the virtual machine on which the schedule operates
     *
     * @param {string} [retargetScheduleProperties.targetResourceId] The resource
     * Id of the virtual machine that the schedule should be retargeted to
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginRetargetWithHttpOperationResponse(resourceGroupName: string, name: string, retargetScheduleProperties: models.RetargetScheduleProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Updates a schedule's target resource Id. This operation can take a while to
     * complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} retargetScheduleProperties Properties for retargeting a
     * virtual machine schedule.
     *
     * @param {string} [retargetScheduleProperties.currentResourceId] The resource
     * Id of the virtual machine on which the schedule operates
     *
     * @param {string} [retargetScheduleProperties.targetResourceId] The resource
     * Id of the virtual machine that the schedule should be retargeted to
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginRetarget(resourceGroupName: string, name: string, retargetScheduleProperties: models.RetargetScheduleProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginRetarget(resourceGroupName: string, name: string, retargetScheduleProperties: models.RetargetScheduleProperties, callback: ServiceCallback<void>): void;
    beginRetarget(resourceGroupName: string, name: string, retargetScheduleProperties: models.RetargetScheduleProperties, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * List schedules in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationSchedule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listBySubscriptionNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationSchedule>>;

    /**
     * List schedules in a subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationSchedule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationSchedule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationSchedule} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listBySubscriptionNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationSchedule>;
    listBySubscriptionNext(nextPageLink: string, callback: ServiceCallback<models.ResponseWithContinuationSchedule>): void;
    listBySubscriptionNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationSchedule>): void;


    /**
     * List schedules in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationSchedule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationSchedule>>;

    /**
     * List schedules in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationSchedule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationSchedule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationSchedule} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationSchedule>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.ResponseWithContinuationSchedule>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationSchedule>): void;
}

/**
 * @class
 * ArtifactSources
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DevTestLabsClient.
 */
export interface ArtifactSources {


    /**
     * List artifact sources in a given lab.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=displayName)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationArtifactSource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, labName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationArtifactSource>>;

    /**
     * List artifact sources in a given lab.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=displayName)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationArtifactSource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationArtifactSource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationArtifactSource} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, labName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationArtifactSource>;
    list(resourceGroupName: string, labName: string, callback: ServiceCallback<models.ResponseWithContinuationArtifactSource>): void;
    list(resourceGroupName: string, labName: string, options: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationArtifactSource>): void;


    /**
     * Get artifact source.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the artifact source.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=displayName)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ArtifactSource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ArtifactSource>>;

    /**
     * Get artifact source.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the artifact source.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=displayName)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ArtifactSource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ArtifactSource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ArtifactSource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, labName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ArtifactSource>;
    get(resourceGroupName: string, labName: string, name: string, callback: ServiceCallback<models.ArtifactSource>): void;
    get(resourceGroupName: string, labName: string, name: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ArtifactSource>): void;


    /**
     * Create or replace an existing artifact source.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the artifact source.
     *
     * @param {object} artifactSource Properties of an artifact source.
     *
     * @param {string} [artifactSource.displayName] The artifact source's display
     * name.
     *
     * @param {string} [artifactSource.uri] The artifact source's URI.
     *
     * @param {string} [artifactSource.sourceType] The artifact source's type.
     * Possible values include: 'VsoGit', 'GitHub'
     *
     * @param {string} [artifactSource.folderPath] The folder containing artifacts.
     *
     * @param {string} [artifactSource.armTemplateFolderPath] The folder containing
     * Azure Resource Manager templates.
     *
     * @param {string} [artifactSource.branchRef] The artifact source's branch
     * reference.
     *
     * @param {string} [artifactSource.securityToken] The security token to
     * authenticate to the artifact source.
     *
     * @param {string} [artifactSource.status] Indicates if the artifact source is
     * enabled (values: Enabled, Disabled). Possible values include: 'Enabled',
     * 'Disabled'
     *
     * @param {string} [artifactSource.provisioningState] The provisioning status
     * of the resource.
     *
     * @param {string} [artifactSource.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [artifactSource.location] The location of the resource.
     *
     * @param {object} [artifactSource.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ArtifactSource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, artifactSource: models.ArtifactSource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ArtifactSource>>;

    /**
     * Create or replace an existing artifact source.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the artifact source.
     *
     * @param {object} artifactSource Properties of an artifact source.
     *
     * @param {string} [artifactSource.displayName] The artifact source's display
     * name.
     *
     * @param {string} [artifactSource.uri] The artifact source's URI.
     *
     * @param {string} [artifactSource.sourceType] The artifact source's type.
     * Possible values include: 'VsoGit', 'GitHub'
     *
     * @param {string} [artifactSource.folderPath] The folder containing artifacts.
     *
     * @param {string} [artifactSource.armTemplateFolderPath] The folder containing
     * Azure Resource Manager templates.
     *
     * @param {string} [artifactSource.branchRef] The artifact source's branch
     * reference.
     *
     * @param {string} [artifactSource.securityToken] The security token to
     * authenticate to the artifact source.
     *
     * @param {string} [artifactSource.status] Indicates if the artifact source is
     * enabled (values: Enabled, Disabled). Possible values include: 'Enabled',
     * 'Disabled'
     *
     * @param {string} [artifactSource.provisioningState] The provisioning status
     * of the resource.
     *
     * @param {string} [artifactSource.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [artifactSource.location] The location of the resource.
     *
     * @param {object} [artifactSource.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ArtifactSource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ArtifactSource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ArtifactSource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, labName: string, name: string, artifactSource: models.ArtifactSource, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ArtifactSource>;
    createOrUpdate(resourceGroupName: string, labName: string, name: string, artifactSource: models.ArtifactSource, callback: ServiceCallback<models.ArtifactSource>): void;
    createOrUpdate(resourceGroupName: string, labName: string, name: string, artifactSource: models.ArtifactSource, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ArtifactSource>): void;


    /**
     * Delete artifact source.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the artifact source.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete artifact source.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the artifact source.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, labName: string, name: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, labName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Modify properties of artifact sources.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the artifact source.
     *
     * @param {object} artifactSource Properties of an artifact source.
     *
     * @param {string} [artifactSource.displayName] The artifact source's display
     * name.
     *
     * @param {string} [artifactSource.uri] The artifact source's URI.
     *
     * @param {string} [artifactSource.sourceType] The artifact source's type.
     * Possible values include: 'VsoGit', 'GitHub'
     *
     * @param {string} [artifactSource.folderPath] The folder containing artifacts.
     *
     * @param {string} [artifactSource.armTemplateFolderPath] The folder containing
     * Azure Resource Manager templates.
     *
     * @param {string} [artifactSource.branchRef] The artifact source's branch
     * reference.
     *
     * @param {string} [artifactSource.securityToken] The security token to
     * authenticate to the artifact source.
     *
     * @param {string} [artifactSource.status] Indicates if the artifact source is
     * enabled (values: Enabled, Disabled). Possible values include: 'Enabled',
     * 'Disabled'
     *
     * @param {string} [artifactSource.provisioningState] The provisioning status
     * of the resource.
     *
     * @param {string} [artifactSource.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [artifactSource.location] The location of the resource.
     *
     * @param {object} [artifactSource.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ArtifactSource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, artifactSource: models.ArtifactSourceFragment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ArtifactSource>>;

    /**
     * Modify properties of artifact sources.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the artifact source.
     *
     * @param {object} artifactSource Properties of an artifact source.
     *
     * @param {string} [artifactSource.displayName] The artifact source's display
     * name.
     *
     * @param {string} [artifactSource.uri] The artifact source's URI.
     *
     * @param {string} [artifactSource.sourceType] The artifact source's type.
     * Possible values include: 'VsoGit', 'GitHub'
     *
     * @param {string} [artifactSource.folderPath] The folder containing artifacts.
     *
     * @param {string} [artifactSource.armTemplateFolderPath] The folder containing
     * Azure Resource Manager templates.
     *
     * @param {string} [artifactSource.branchRef] The artifact source's branch
     * reference.
     *
     * @param {string} [artifactSource.securityToken] The security token to
     * authenticate to the artifact source.
     *
     * @param {string} [artifactSource.status] Indicates if the artifact source is
     * enabled (values: Enabled, Disabled). Possible values include: 'Enabled',
     * 'Disabled'
     *
     * @param {string} [artifactSource.provisioningState] The provisioning status
     * of the resource.
     *
     * @param {string} [artifactSource.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [artifactSource.location] The location of the resource.
     *
     * @param {object} [artifactSource.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ArtifactSource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ArtifactSource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ArtifactSource} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, labName: string, name: string, artifactSource: models.ArtifactSourceFragment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ArtifactSource>;
    update(resourceGroupName: string, labName: string, name: string, artifactSource: models.ArtifactSourceFragment, callback: ServiceCallback<models.ArtifactSource>): void;
    update(resourceGroupName: string, labName: string, name: string, artifactSource: models.ArtifactSourceFragment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ArtifactSource>): void;


    /**
     * List artifact sources in a given lab.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationArtifactSource>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationArtifactSource>>;

    /**
     * List artifact sources in a given lab.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationArtifactSource} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationArtifactSource} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationArtifactSource} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationArtifactSource>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ResponseWithContinuationArtifactSource>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationArtifactSource>): void;
}

/**
 * @class
 * ArmTemplates
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DevTestLabsClient.
 */
export interface ArmTemplates {


    /**
     * List azure resource manager templates in a given artifact source.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} artifactSourceName The name of the artifact source.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=displayName)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationArmTemplate>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, labName: string, artifactSourceName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationArmTemplate>>;

    /**
     * List azure resource manager templates in a given artifact source.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} artifactSourceName The name of the artifact source.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=displayName)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationArmTemplate} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationArmTemplate} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationArmTemplate} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, labName: string, artifactSourceName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationArmTemplate>;
    list(resourceGroupName: string, labName: string, artifactSourceName: string, callback: ServiceCallback<models.ResponseWithContinuationArmTemplate>): void;
    list(resourceGroupName: string, labName: string, artifactSourceName: string, options: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationArmTemplate>): void;


    /**
     * Get azure resource manager template.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} artifactSourceName The name of the artifact source.
     *
     * @param {string} name The name of the azure Resource Manager template.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=displayName)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ArmTemplate>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, labName: string, artifactSourceName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ArmTemplate>>;

    /**
     * Get azure resource manager template.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} artifactSourceName The name of the artifact source.
     *
     * @param {string} name The name of the azure Resource Manager template.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=displayName)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ArmTemplate} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ArmTemplate} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ArmTemplate} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, labName: string, artifactSourceName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ArmTemplate>;
    get(resourceGroupName: string, labName: string, artifactSourceName: string, name: string, callback: ServiceCallback<models.ArmTemplate>): void;
    get(resourceGroupName: string, labName: string, artifactSourceName: string, name: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ArmTemplate>): void;


    /**
     * List azure resource manager templates in a given artifact source.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationArmTemplate>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationArmTemplate>>;

    /**
     * List azure resource manager templates in a given artifact source.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationArmTemplate} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationArmTemplate} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationArmTemplate} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationArmTemplate>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ResponseWithContinuationArmTemplate>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationArmTemplate>): void;
}

/**
 * @class
 * Artifacts
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DevTestLabsClient.
 */
export interface Artifacts {


    /**
     * List artifacts in a given artifact source.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} artifactSourceName The name of the artifact source.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=title)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationArtifact>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, labName: string, artifactSourceName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationArtifact>>;

    /**
     * List artifacts in a given artifact source.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} artifactSourceName The name of the artifact source.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=title)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationArtifact} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationArtifact} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationArtifact} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, labName: string, artifactSourceName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationArtifact>;
    list(resourceGroupName: string, labName: string, artifactSourceName: string, callback: ServiceCallback<models.ResponseWithContinuationArtifact>): void;
    list(resourceGroupName: string, labName: string, artifactSourceName: string, options: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationArtifact>): void;


    /**
     * Get artifact.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} artifactSourceName The name of the artifact source.
     *
     * @param {string} name The name of the artifact.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=title)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Artifact>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, labName: string, artifactSourceName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Artifact>>;

    /**
     * Get artifact.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} artifactSourceName The name of the artifact source.
     *
     * @param {string} name The name of the artifact.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=title)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Artifact} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Artifact} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Artifact} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, labName: string, artifactSourceName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Artifact>;
    get(resourceGroupName: string, labName: string, artifactSourceName: string, name: string, callback: ServiceCallback<models.Artifact>): void;
    get(resourceGroupName: string, labName: string, artifactSourceName: string, name: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Artifact>): void;


    /**
     * Generates an ARM template for the given artifact, uploads the required files
     * to a storage account, and validates the generated artifact.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} artifactSourceName The name of the artifact source.
     *
     * @param {string} name The name of the artifact.
     *
     * @param {object} generateArmTemplateRequest Parameters for generating an ARM
     * template for deploying artifacts.
     *
     * @param {string} [generateArmTemplateRequest.virtualMachineName] The resource
     * name of the virtual machine.
     *
     * @param {array} [generateArmTemplateRequest.parameters] The parameters of the
     * ARM template.
     *
     * @param {string} [generateArmTemplateRequest.location] The location of the
     * virtual machine.
     *
     * @param {string} [generateArmTemplateRequest.fileUploadOptions] Options for
     * uploading the files for the artifact. UploadFilesAndGenerateSasTokens is the
     * default value. Possible values include: 'UploadFilesAndGenerateSasTokens',
     * 'None'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ArmTemplateInfo>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    generateArmTemplateWithHttpOperationResponse(resourceGroupName: string, labName: string, artifactSourceName: string, name: string, generateArmTemplateRequest: models.GenerateArmTemplateRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ArmTemplateInfo>>;

    /**
     * Generates an ARM template for the given artifact, uploads the required files
     * to a storage account, and validates the generated artifact.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} artifactSourceName The name of the artifact source.
     *
     * @param {string} name The name of the artifact.
     *
     * @param {object} generateArmTemplateRequest Parameters for generating an ARM
     * template for deploying artifacts.
     *
     * @param {string} [generateArmTemplateRequest.virtualMachineName] The resource
     * name of the virtual machine.
     *
     * @param {array} [generateArmTemplateRequest.parameters] The parameters of the
     * ARM template.
     *
     * @param {string} [generateArmTemplateRequest.location] The location of the
     * virtual machine.
     *
     * @param {string} [generateArmTemplateRequest.fileUploadOptions] Options for
     * uploading the files for the artifact. UploadFilesAndGenerateSasTokens is the
     * default value. Possible values include: 'UploadFilesAndGenerateSasTokens',
     * 'None'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ArmTemplateInfo} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ArmTemplateInfo} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ArmTemplateInfo} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    generateArmTemplate(resourceGroupName: string, labName: string, artifactSourceName: string, name: string, generateArmTemplateRequest: models.GenerateArmTemplateRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ArmTemplateInfo>;
    generateArmTemplate(resourceGroupName: string, labName: string, artifactSourceName: string, name: string, generateArmTemplateRequest: models.GenerateArmTemplateRequest, callback: ServiceCallback<models.ArmTemplateInfo>): void;
    generateArmTemplate(resourceGroupName: string, labName: string, artifactSourceName: string, name: string, generateArmTemplateRequest: models.GenerateArmTemplateRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ArmTemplateInfo>): void;


    /**
     * List artifacts in a given artifact source.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationArtifact>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationArtifact>>;

    /**
     * List artifacts in a given artifact source.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationArtifact} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationArtifact} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationArtifact} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationArtifact>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ResponseWithContinuationArtifact>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationArtifact>): void;
}

/**
 * @class
 * Costs
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DevTestLabsClient.
 */
export interface Costs {


    /**
     * Get cost.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the cost.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($expand=labCostDetails)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LabCost>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LabCost>>;

    /**
     * Get cost.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the cost.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($expand=labCostDetails)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LabCost} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LabCost} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LabCost} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, labName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.LabCost>;
    get(resourceGroupName: string, labName: string, name: string, callback: ServiceCallback<models.LabCost>): void;
    get(resourceGroupName: string, labName: string, name: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LabCost>): void;


    /**
     * Create or replace an existing cost.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the cost.
     *
     * @param {object} labCost A cost item.
     *
     * @param {object} [labCost.targetCost] The target cost properties
     *
     * @param {string} [labCost.targetCost.status] Target cost status. Possible
     * values include: 'Enabled', 'Disabled'
     *
     * @param {number} [labCost.targetCost.target] Lab target cost
     *
     * @param {array} [labCost.targetCost.costThresholds] Cost thresholds.
     *
     * @param {date} [labCost.targetCost.cycleStartDateTime] Reporting cycle start
     * date.
     *
     * @param {date} [labCost.targetCost.cycleEndDateTime] Reporting cycle end
     * date.
     *
     * @param {string} [labCost.targetCost.cycleType] Reporting cycle type.
     * Possible values include: 'CalendarMonth', 'Custom'
     *
     * @param {string} [labCost.currencyCode] The currency code of the cost.
     *
     * @param {date} [labCost.startDateTime] The start time of the cost data.
     *
     * @param {date} [labCost.endDateTime] The end time of the cost data.
     *
     * @param {date} [labCost.createdDate] The creation date of the cost.
     *
     * @param {string} [labCost.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [labCost.uniqueIdentifier] The unique immutable identifier
     * of a resource (Guid).
     *
     * @param {string} [labCost.location] The location of the resource.
     *
     * @param {object} [labCost.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LabCost>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, labCost: models.LabCost, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LabCost>>;

    /**
     * Create or replace an existing cost.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the cost.
     *
     * @param {object} labCost A cost item.
     *
     * @param {object} [labCost.targetCost] The target cost properties
     *
     * @param {string} [labCost.targetCost.status] Target cost status. Possible
     * values include: 'Enabled', 'Disabled'
     *
     * @param {number} [labCost.targetCost.target] Lab target cost
     *
     * @param {array} [labCost.targetCost.costThresholds] Cost thresholds.
     *
     * @param {date} [labCost.targetCost.cycleStartDateTime] Reporting cycle start
     * date.
     *
     * @param {date} [labCost.targetCost.cycleEndDateTime] Reporting cycle end
     * date.
     *
     * @param {string} [labCost.targetCost.cycleType] Reporting cycle type.
     * Possible values include: 'CalendarMonth', 'Custom'
     *
     * @param {string} [labCost.currencyCode] The currency code of the cost.
     *
     * @param {date} [labCost.startDateTime] The start time of the cost data.
     *
     * @param {date} [labCost.endDateTime] The end time of the cost data.
     *
     * @param {date} [labCost.createdDate] The creation date of the cost.
     *
     * @param {string} [labCost.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [labCost.uniqueIdentifier] The unique immutable identifier
     * of a resource (Guid).
     *
     * @param {string} [labCost.location] The location of the resource.
     *
     * @param {object} [labCost.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LabCost} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LabCost} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LabCost} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, labName: string, name: string, labCost: models.LabCost, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LabCost>;
    createOrUpdate(resourceGroupName: string, labName: string, name: string, labCost: models.LabCost, callback: ServiceCallback<models.LabCost>): void;
    createOrUpdate(resourceGroupName: string, labName: string, name: string, labCost: models.LabCost, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LabCost>): void;
}

/**
 * @class
 * CustomImages
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DevTestLabsClient.
 */
export interface CustomImages {


    /**
     * List custom images in a given lab.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=vm)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationCustomImage>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, labName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationCustomImage>>;

    /**
     * List custom images in a given lab.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=vm)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationCustomImage} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationCustomImage} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationCustomImage} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, labName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationCustomImage>;
    list(resourceGroupName: string, labName: string, callback: ServiceCallback<models.ResponseWithContinuationCustomImage>): void;
    list(resourceGroupName: string, labName: string, options: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationCustomImage>): void;


    /**
     * Get custom image.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the custom image.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=vm)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CustomImage>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CustomImage>>;

    /**
     * Get custom image.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the custom image.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=vm)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CustomImage} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CustomImage} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CustomImage} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, labName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.CustomImage>;
    get(resourceGroupName: string, labName: string, name: string, callback: ServiceCallback<models.CustomImage>): void;
    get(resourceGroupName: string, labName: string, name: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CustomImage>): void;


    /**
     * Create or replace an existing custom image. This operation can take a while
     * to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the custom image.
     *
     * @param {object} customImage A custom image.
     *
     * @param {object} [customImage.vm] The virtual machine from which the image is
     * to be created.
     *
     * @param {string} [customImage.vm.sourceVmId] The source vm identifier.
     *
     * @param {object} [customImage.vm.windowsOsInfo] The Windows OS information of
     * the VM.
     *
     * @param {string} [customImage.vm.windowsOsInfo.windowsOsState] The state of
     * the Windows OS (i.e. NonSysprepped, SysprepRequested, SysprepApplied).
     * Possible values include: 'NonSysprepped', 'SysprepRequested',
     * 'SysprepApplied'
     *
     * @param {object} [customImage.vm.linuxOsInfo] The Linux OS information of the
     * VM.
     *
     * @param {string} [customImage.vm.linuxOsInfo.linuxOsState] The state of the
     * Linux OS (i.e. NonDeprovisioned, DeprovisionRequested, DeprovisionApplied).
     * Possible values include: 'NonDeprovisioned', 'DeprovisionRequested',
     * 'DeprovisionApplied'
     *
     * @param {object} [customImage.vhd] The VHD from which the image is to be
     * created.
     *
     * @param {string} [customImage.vhd.imageName] The image name.
     *
     * @param {boolean} [customImage.vhd.sysPrep] Indicates whether sysprep has
     * been run on the VHD.
     *
     * @param {string} customImage.vhd.osType The OS type of the custom image (i.e.
     * Windows, Linux). Possible values include: 'Windows', 'Linux', 'None'
     *
     * @param {string} [customImage.description] The description of the custom
     * image.
     *
     * @param {string} [customImage.author] The author of the custom image.
     *
     * @param {string} [customImage.managedImageId] The Managed Image Id backing
     * the custom image.
     *
     * @param {string} [customImage.provisioningState] The provisioning status of
     * the resource.
     *
     * @param {string} [customImage.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [customImage.location] The location of the resource.
     *
     * @param {object} [customImage.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CustomImage>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, customImage: models.CustomImage, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CustomImage>>;

    /**
     * Create or replace an existing custom image. This operation can take a while
     * to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the custom image.
     *
     * @param {object} customImage A custom image.
     *
     * @param {object} [customImage.vm] The virtual machine from which the image is
     * to be created.
     *
     * @param {string} [customImage.vm.sourceVmId] The source vm identifier.
     *
     * @param {object} [customImage.vm.windowsOsInfo] The Windows OS information of
     * the VM.
     *
     * @param {string} [customImage.vm.windowsOsInfo.windowsOsState] The state of
     * the Windows OS (i.e. NonSysprepped, SysprepRequested, SysprepApplied).
     * Possible values include: 'NonSysprepped', 'SysprepRequested',
     * 'SysprepApplied'
     *
     * @param {object} [customImage.vm.linuxOsInfo] The Linux OS information of the
     * VM.
     *
     * @param {string} [customImage.vm.linuxOsInfo.linuxOsState] The state of the
     * Linux OS (i.e. NonDeprovisioned, DeprovisionRequested, DeprovisionApplied).
     * Possible values include: 'NonDeprovisioned', 'DeprovisionRequested',
     * 'DeprovisionApplied'
     *
     * @param {object} [customImage.vhd] The VHD from which the image is to be
     * created.
     *
     * @param {string} [customImage.vhd.imageName] The image name.
     *
     * @param {boolean} [customImage.vhd.sysPrep] Indicates whether sysprep has
     * been run on the VHD.
     *
     * @param {string} customImage.vhd.osType The OS type of the custom image (i.e.
     * Windows, Linux). Possible values include: 'Windows', 'Linux', 'None'
     *
     * @param {string} [customImage.description] The description of the custom
     * image.
     *
     * @param {string} [customImage.author] The author of the custom image.
     *
     * @param {string} [customImage.managedImageId] The Managed Image Id backing
     * the custom image.
     *
     * @param {string} [customImage.provisioningState] The provisioning status of
     * the resource.
     *
     * @param {string} [customImage.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [customImage.location] The location of the resource.
     *
     * @param {object} [customImage.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CustomImage} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CustomImage} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CustomImage} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, labName: string, name: string, customImage: models.CustomImage, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CustomImage>;
    createOrUpdate(resourceGroupName: string, labName: string, name: string, customImage: models.CustomImage, callback: ServiceCallback<models.CustomImage>): void;
    createOrUpdate(resourceGroupName: string, labName: string, name: string, customImage: models.CustomImage, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CustomImage>): void;


    /**
     * Delete custom image. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the custom image.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete custom image. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the custom image.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, labName: string, name: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, labName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Create or replace an existing custom image. This operation can take a while
     * to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the custom image.
     *
     * @param {object} customImage A custom image.
     *
     * @param {object} [customImage.vm] The virtual machine from which the image is
     * to be created.
     *
     * @param {string} [customImage.vm.sourceVmId] The source vm identifier.
     *
     * @param {object} [customImage.vm.windowsOsInfo] The Windows OS information of
     * the VM.
     *
     * @param {string} [customImage.vm.windowsOsInfo.windowsOsState] The state of
     * the Windows OS (i.e. NonSysprepped, SysprepRequested, SysprepApplied).
     * Possible values include: 'NonSysprepped', 'SysprepRequested',
     * 'SysprepApplied'
     *
     * @param {object} [customImage.vm.linuxOsInfo] The Linux OS information of the
     * VM.
     *
     * @param {string} [customImage.vm.linuxOsInfo.linuxOsState] The state of the
     * Linux OS (i.e. NonDeprovisioned, DeprovisionRequested, DeprovisionApplied).
     * Possible values include: 'NonDeprovisioned', 'DeprovisionRequested',
     * 'DeprovisionApplied'
     *
     * @param {object} [customImage.vhd] The VHD from which the image is to be
     * created.
     *
     * @param {string} [customImage.vhd.imageName] The image name.
     *
     * @param {boolean} [customImage.vhd.sysPrep] Indicates whether sysprep has
     * been run on the VHD.
     *
     * @param {string} customImage.vhd.osType The OS type of the custom image (i.e.
     * Windows, Linux). Possible values include: 'Windows', 'Linux', 'None'
     *
     * @param {string} [customImage.description] The description of the custom
     * image.
     *
     * @param {string} [customImage.author] The author of the custom image.
     *
     * @param {string} [customImage.managedImageId] The Managed Image Id backing
     * the custom image.
     *
     * @param {string} [customImage.provisioningState] The provisioning status of
     * the resource.
     *
     * @param {string} [customImage.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [customImage.location] The location of the resource.
     *
     * @param {object} [customImage.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CustomImage>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, customImage: models.CustomImage, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CustomImage>>;

    /**
     * Create or replace an existing custom image. This operation can take a while
     * to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the custom image.
     *
     * @param {object} customImage A custom image.
     *
     * @param {object} [customImage.vm] The virtual machine from which the image is
     * to be created.
     *
     * @param {string} [customImage.vm.sourceVmId] The source vm identifier.
     *
     * @param {object} [customImage.vm.windowsOsInfo] The Windows OS information of
     * the VM.
     *
     * @param {string} [customImage.vm.windowsOsInfo.windowsOsState] The state of
     * the Windows OS (i.e. NonSysprepped, SysprepRequested, SysprepApplied).
     * Possible values include: 'NonSysprepped', 'SysprepRequested',
     * 'SysprepApplied'
     *
     * @param {object} [customImage.vm.linuxOsInfo] The Linux OS information of the
     * VM.
     *
     * @param {string} [customImage.vm.linuxOsInfo.linuxOsState] The state of the
     * Linux OS (i.e. NonDeprovisioned, DeprovisionRequested, DeprovisionApplied).
     * Possible values include: 'NonDeprovisioned', 'DeprovisionRequested',
     * 'DeprovisionApplied'
     *
     * @param {object} [customImage.vhd] The VHD from which the image is to be
     * created.
     *
     * @param {string} [customImage.vhd.imageName] The image name.
     *
     * @param {boolean} [customImage.vhd.sysPrep] Indicates whether sysprep has
     * been run on the VHD.
     *
     * @param {string} customImage.vhd.osType The OS type of the custom image (i.e.
     * Windows, Linux). Possible values include: 'Windows', 'Linux', 'None'
     *
     * @param {string} [customImage.description] The description of the custom
     * image.
     *
     * @param {string} [customImage.author] The author of the custom image.
     *
     * @param {string} [customImage.managedImageId] The Managed Image Id backing
     * the custom image.
     *
     * @param {string} [customImage.provisioningState] The provisioning status of
     * the resource.
     *
     * @param {string} [customImage.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [customImage.location] The location of the resource.
     *
     * @param {object} [customImage.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CustomImage} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CustomImage} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CustomImage} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, labName: string, name: string, customImage: models.CustomImage, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CustomImage>;
    beginCreateOrUpdate(resourceGroupName: string, labName: string, name: string, customImage: models.CustomImage, callback: ServiceCallback<models.CustomImage>): void;
    beginCreateOrUpdate(resourceGroupName: string, labName: string, name: string, customImage: models.CustomImage, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CustomImage>): void;


    /**
     * Delete custom image. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the custom image.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete custom image. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the custom image.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, labName: string, name: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, labName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * List custom images in a given lab.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationCustomImage>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationCustomImage>>;

    /**
     * List custom images in a given lab.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationCustomImage} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationCustomImage} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationCustomImage} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationCustomImage>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ResponseWithContinuationCustomImage>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationCustomImage>): void;
}

/**
 * @class
 * Formulas
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DevTestLabsClient.
 */
export interface Formulas {


    /**
     * List formulas in a given lab.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=description)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationFormula>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, labName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationFormula>>;

    /**
     * List formulas in a given lab.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=description)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationFormula} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationFormula} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationFormula} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, labName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationFormula>;
    list(resourceGroupName: string, labName: string, callback: ServiceCallback<models.ResponseWithContinuationFormula>): void;
    list(resourceGroupName: string, labName: string, options: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationFormula>): void;


    /**
     * Get formula.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the formula.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=description)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Formula>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Formula>>;

    /**
     * Get formula.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the formula.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=description)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Formula} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Formula} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Formula} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, labName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Formula>;
    get(resourceGroupName: string, labName: string, name: string, callback: ServiceCallback<models.Formula>): void;
    get(resourceGroupName: string, labName: string, name: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Formula>): void;


    /**
     * Create or replace an existing Formula. This operation can take a while to
     * complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the formula.
     *
     * @param {object} formula A formula for creating a VM, specifying an image
     * base and other parameters
     *
     * @param {string} [formula.description] The description of the formula.
     *
     * @param {string} [formula.author] The author of the formula.
     *
     * @param {string} [formula.osType] The OS type of the formula.
     *
     * @param {object} [formula.formulaContent] The content of the formula.
     *
     * @param {object} [formula.formulaContent.bulkCreationParameters] The number
     * of virtual machine instances to create.
     *
     * @param {number}
     * [formula.formulaContent.bulkCreationParameters.instanceCount] The number of
     * virtual machine instances to create.
     *
     * @param {string} [formula.formulaContent.notes] The notes of the virtual
     * machine.
     *
     * @param {string} [formula.formulaContent.ownerObjectId] The object identifier
     * of the owner of the virtual machine.
     *
     * @param {string} [formula.formulaContent.ownerUserPrincipalName] The user
     * principal name of the virtual machine owner.
     *
     * @param {string} [formula.formulaContent.createdByUserId] The object
     * identifier of the creator of the virtual machine.
     *
     * @param {string} [formula.formulaContent.createdByUser] The email address of
     * creator of the virtual machine.
     *
     * @param {date} [formula.formulaContent.createdDate] The creation date of the
     * virtual machine.
     *
     * @param {string} [formula.formulaContent.customImageId] The custom image
     * identifier of the virtual machine.
     *
     * @param {string} [formula.formulaContent.osType] The OS type of the virtual
     * machine.
     *
     * @param {string} [formula.formulaContent.size] The size of the virtual
     * machine.
     *
     * @param {string} [formula.formulaContent.userName] The user name of the
     * virtual machine.
     *
     * @param {string} [formula.formulaContent.password] The password of the
     * virtual machine administrator.
     *
     * @param {string} [formula.formulaContent.sshKey] The SSH key of the virtual
     * machine administrator.
     *
     * @param {boolean} [formula.formulaContent.isAuthenticationWithSshKey]
     * Indicates whether this virtual machine uses an SSH key for authentication.
     *
     * @param {string} [formula.formulaContent.fqdn] The fully-qualified domain
     * name of the virtual machine.
     *
     * @param {string} [formula.formulaContent.labSubnetName] The lab subnet name
     * of the virtual machine.
     *
     * @param {string} [formula.formulaContent.labVirtualNetworkId] The lab virtual
     * network identifier of the virtual machine.
     *
     * @param {boolean} [formula.formulaContent.disallowPublicIpAddress] Indicates
     * whether the virtual machine is to be created without a public IP address.
     *
     * @param {array} [formula.formulaContent.artifacts] The artifacts to be
     * installed on the virtual machine.
     *
     * @param {object} [formula.formulaContent.artifactDeploymentStatus] The
     * artifact deployment status for the virtual machine.
     *
     * @param {string}
     * [formula.formulaContent.artifactDeploymentStatus.deploymentStatus] The
     * deployment status of the artifact.
     *
     * @param {number}
     * [formula.formulaContent.artifactDeploymentStatus.artifactsApplied] The total
     * count of the artifacts that were successfully applied.
     *
     * @param {number}
     * [formula.formulaContent.artifactDeploymentStatus.totalArtifacts] The total
     * count of the artifacts that were tentatively applied.
     *
     * @param {object} [formula.formulaContent.galleryImageReference] The Microsoft
     * Azure Marketplace image reference of the virtual machine.
     *
     * @param {string} [formula.formulaContent.galleryImageReference.offer] The
     * offer of the gallery image.
     *
     * @param {string} [formula.formulaContent.galleryImageReference.publisher] The
     * publisher of the gallery image.
     *
     * @param {string} [formula.formulaContent.galleryImageReference.sku] The SKU
     * of the gallery image.
     *
     * @param {string} [formula.formulaContent.galleryImageReference.osType] The OS
     * type of the gallery image.
     *
     * @param {string} [formula.formulaContent.galleryImageReference.version] The
     * version of the gallery image.
     *
     * @param {object} [formula.formulaContent.computeVm] The compute virtual
     * machine properties.
     *
     * @param {array} [formula.formulaContent.computeVm.statuses] Gets the statuses
     * of the virtual machine.
     *
     * @param {string} [formula.formulaContent.computeVm.osType] Gets the OS type
     * of the virtual machine.
     *
     * @param {string} [formula.formulaContent.computeVm.vmSize] Gets the size of
     * the virtual machine.
     *
     * @param {string} [formula.formulaContent.computeVm.networkInterfaceId] Gets
     * the network interface ID of the virtual machine.
     *
     * @param {string} [formula.formulaContent.computeVm.osDiskId] Gets OS disk
     * blob uri for the virtual machine.
     *
     * @param {array} [formula.formulaContent.computeVm.dataDiskIds] Gets data
     * disks blob uri for the virtual machine.
     *
     * @param {array} [formula.formulaContent.computeVm.dataDisks] Gets all data
     * disks attached to the virtual machine.
     *
     * @param {object} [formula.formulaContent.networkInterface] The network
     * interface properties.
     *
     * @param {string} [formula.formulaContent.networkInterface.virtualNetworkId]
     * The resource ID of the virtual network.
     *
     * @param {string} [formula.formulaContent.networkInterface.subnetId] The
     * resource ID of the sub net.
     *
     * @param {string} [formula.formulaContent.networkInterface.publicIpAddressId]
     * The resource ID of the public IP address.
     *
     * @param {string} [formula.formulaContent.networkInterface.publicIpAddress]
     * The public IP address.
     *
     * @param {string} [formula.formulaContent.networkInterface.privateIpAddress]
     * The private IP address.
     *
     * @param {string} [formula.formulaContent.networkInterface.dnsName] The DNS
     * name.
     *
     * @param {string} [formula.formulaContent.networkInterface.rdpAuthority] The
     * RdpAuthority property is a server DNS host name or IP address followed by
     * the service port number for RDP (Remote Desktop Protocol).
     *
     * @param {string} [formula.formulaContent.networkInterface.sshAuthority] The
     * SshAuthority property is a server DNS host name or IP address followed by
     * the service port number for SSH.
     *
     * @param {object}
     * [formula.formulaContent.networkInterface.sharedPublicIpAddressConfiguration]
     * The configuration for sharing a public IP address across multiple virtual
     * machines.
     *
     * @param {array}
     * [formula.formulaContent.networkInterface.sharedPublicIpAddressConfiguration.inboundNatRules]
     * The incoming NAT rules
     *
     * @param {object} [formula.formulaContent.applicableSchedule] The applicable
     * schedule for the virtual machine.
     *
     * @param {object} [formula.formulaContent.applicableSchedule.labVmsShutdown]
     * The auto-shutdown schedule, if one has been set at the lab or lab resource
     * level.
     *
     * @param {object} [formula.formulaContent.applicableSchedule.labVmsStartup]
     * The auto-startup schedule, if one has been set at the lab or lab resource
     * level.
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.status] The status
     * of the schedule (i.e. Enabled, Disabled). Possible values include:
     * 'Enabled', 'Disabled'
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.taskType] The task
     * type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
     *
     * @param {object}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.weeklyRecurrence]
     * If the schedule will occur only some days of the week, specify the weekly
     * recurrence.
     *
     * @param {array}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.weeklyRecurrence.weekdays]
     * The days of the week for which the schedule is set (e.g. Sunday, Monday,
     * Tuesday, etc.).
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.weeklyRecurrence.time]
     * The time of the day the schedule will occur.
     *
     * @param {object}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.dailyRecurrence] If
     * the schedule will occur once each day of the week, specify the daily
     * recurrence.
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.dailyRecurrence.time]
     * The time of day the schedule will occur.
     *
     * @param {object}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.hourlyRecurrence]
     * If the schedule will occur multiple times a day, specify the hourly
     * recurrence.
     *
     * @param {number}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.hourlyRecurrence.minute]
     * Minutes of the hour the schedule will run.
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.timeZoneId] The
     * time zone ID (e.g. Pacific Standard time).
     *
     * @param {object}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings]
     * Notification settings.
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings.status]
     * If notifications are enabled for this schedule (i.e. Enabled, Disabled).
     * Possible values include: 'Disabled', 'Enabled'
     *
     * @param {number}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings.timeInMinutes]
     * Time in minutes before event at which notification will be sent.
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings.webhookUrl]
     * The webhook URL to which the notification will be sent.
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.targetResourceId]
     * The resource ID to which the schedule belongs
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.provisioningState]
     * The provisioning status of the resource.
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.uniqueIdentifier]
     * The unique immutable identifier of a resource (Guid).
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.location] The
     * location of the resource.
     *
     * @param {object}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.tags] The tags of
     * the resource.
     *
     * @param {string} [formula.formulaContent.applicableSchedule.location] The
     * location of the resource.
     *
     * @param {object} [formula.formulaContent.applicableSchedule.tags] The tags of
     * the resource.
     *
     * @param {date} [formula.formulaContent.expirationDate] The expiration date
     * for VM.
     *
     * @param {boolean} [formula.formulaContent.allowClaim] Indicates whether
     * another user can take ownership of the virtual machine
     *
     * @param {string} [formula.formulaContent.storageType] Storage type to use for
     * virtual machine (i.e. Standard, Premium).
     *
     * @param {string} [formula.formulaContent.virtualMachineCreationSource] Tells
     * source of creation of lab virtual machine. Output property only. Possible
     * values include: 'FromCustomImage', 'FromGalleryImage'
     *
     * @param {string} [formula.formulaContent.environmentId] The resource ID of
     * the environment that contains this virtual machine, if any.
     *
     * @param {string} [formula.formulaContent.provisioningState] The provisioning
     * status of the resource.
     *
     * @param {string} [formula.formulaContent.uniqueIdentifier] The unique
     * immutable identifier of a resource (Guid).
     *
     * @param {string} [formula.formulaContent.name] The name of the virtual
     * machine or environment
     *
     * @param {string} [formula.formulaContent.location] The location of the new
     * virtual machine or environment
     *
     * @param {object} [formula.formulaContent.tags] The tags of the resource.
     *
     * @param {object} [formula.vm] Information about a VM from which a formula is
     * to be created.
     *
     * @param {string} [formula.vm.labVmId] The identifier of the VM from which a
     * formula is to be created.
     *
     * @param {string} [formula.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [formula.uniqueIdentifier] The unique immutable identifier
     * of a resource (Guid).
     *
     * @param {string} [formula.location] The location of the resource.
     *
     * @param {object} [formula.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Formula>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, formula: models.Formula, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Formula>>;

    /**
     * Create or replace an existing Formula. This operation can take a while to
     * complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the formula.
     *
     * @param {object} formula A formula for creating a VM, specifying an image
     * base and other parameters
     *
     * @param {string} [formula.description] The description of the formula.
     *
     * @param {string} [formula.author] The author of the formula.
     *
     * @param {string} [formula.osType] The OS type of the formula.
     *
     * @param {object} [formula.formulaContent] The content of the formula.
     *
     * @param {object} [formula.formulaContent.bulkCreationParameters] The number
     * of virtual machine instances to create.
     *
     * @param {number}
     * [formula.formulaContent.bulkCreationParameters.instanceCount] The number of
     * virtual machine instances to create.
     *
     * @param {string} [formula.formulaContent.notes] The notes of the virtual
     * machine.
     *
     * @param {string} [formula.formulaContent.ownerObjectId] The object identifier
     * of the owner of the virtual machine.
     *
     * @param {string} [formula.formulaContent.ownerUserPrincipalName] The user
     * principal name of the virtual machine owner.
     *
     * @param {string} [formula.formulaContent.createdByUserId] The object
     * identifier of the creator of the virtual machine.
     *
     * @param {string} [formula.formulaContent.createdByUser] The email address of
     * creator of the virtual machine.
     *
     * @param {date} [formula.formulaContent.createdDate] The creation date of the
     * virtual machine.
     *
     * @param {string} [formula.formulaContent.customImageId] The custom image
     * identifier of the virtual machine.
     *
     * @param {string} [formula.formulaContent.osType] The OS type of the virtual
     * machine.
     *
     * @param {string} [formula.formulaContent.size] The size of the virtual
     * machine.
     *
     * @param {string} [formula.formulaContent.userName] The user name of the
     * virtual machine.
     *
     * @param {string} [formula.formulaContent.password] The password of the
     * virtual machine administrator.
     *
     * @param {string} [formula.formulaContent.sshKey] The SSH key of the virtual
     * machine administrator.
     *
     * @param {boolean} [formula.formulaContent.isAuthenticationWithSshKey]
     * Indicates whether this virtual machine uses an SSH key for authentication.
     *
     * @param {string} [formula.formulaContent.fqdn] The fully-qualified domain
     * name of the virtual machine.
     *
     * @param {string} [formula.formulaContent.labSubnetName] The lab subnet name
     * of the virtual machine.
     *
     * @param {string} [formula.formulaContent.labVirtualNetworkId] The lab virtual
     * network identifier of the virtual machine.
     *
     * @param {boolean} [formula.formulaContent.disallowPublicIpAddress] Indicates
     * whether the virtual machine is to be created without a public IP address.
     *
     * @param {array} [formula.formulaContent.artifacts] The artifacts to be
     * installed on the virtual machine.
     *
     * @param {object} [formula.formulaContent.artifactDeploymentStatus] The
     * artifact deployment status for the virtual machine.
     *
     * @param {string}
     * [formula.formulaContent.artifactDeploymentStatus.deploymentStatus] The
     * deployment status of the artifact.
     *
     * @param {number}
     * [formula.formulaContent.artifactDeploymentStatus.artifactsApplied] The total
     * count of the artifacts that were successfully applied.
     *
     * @param {number}
     * [formula.formulaContent.artifactDeploymentStatus.totalArtifacts] The total
     * count of the artifacts that were tentatively applied.
     *
     * @param {object} [formula.formulaContent.galleryImageReference] The Microsoft
     * Azure Marketplace image reference of the virtual machine.
     *
     * @param {string} [formula.formulaContent.galleryImageReference.offer] The
     * offer of the gallery image.
     *
     * @param {string} [formula.formulaContent.galleryImageReference.publisher] The
     * publisher of the gallery image.
     *
     * @param {string} [formula.formulaContent.galleryImageReference.sku] The SKU
     * of the gallery image.
     *
     * @param {string} [formula.formulaContent.galleryImageReference.osType] The OS
     * type of the gallery image.
     *
     * @param {string} [formula.formulaContent.galleryImageReference.version] The
     * version of the gallery image.
     *
     * @param {object} [formula.formulaContent.computeVm] The compute virtual
     * machine properties.
     *
     * @param {array} [formula.formulaContent.computeVm.statuses] Gets the statuses
     * of the virtual machine.
     *
     * @param {string} [formula.formulaContent.computeVm.osType] Gets the OS type
     * of the virtual machine.
     *
     * @param {string} [formula.formulaContent.computeVm.vmSize] Gets the size of
     * the virtual machine.
     *
     * @param {string} [formula.formulaContent.computeVm.networkInterfaceId] Gets
     * the network interface ID of the virtual machine.
     *
     * @param {string} [formula.formulaContent.computeVm.osDiskId] Gets OS disk
     * blob uri for the virtual machine.
     *
     * @param {array} [formula.formulaContent.computeVm.dataDiskIds] Gets data
     * disks blob uri for the virtual machine.
     *
     * @param {array} [formula.formulaContent.computeVm.dataDisks] Gets all data
     * disks attached to the virtual machine.
     *
     * @param {object} [formula.formulaContent.networkInterface] The network
     * interface properties.
     *
     * @param {string} [formula.formulaContent.networkInterface.virtualNetworkId]
     * The resource ID of the virtual network.
     *
     * @param {string} [formula.formulaContent.networkInterface.subnetId] The
     * resource ID of the sub net.
     *
     * @param {string} [formula.formulaContent.networkInterface.publicIpAddressId]
     * The resource ID of the public IP address.
     *
     * @param {string} [formula.formulaContent.networkInterface.publicIpAddress]
     * The public IP address.
     *
     * @param {string} [formula.formulaContent.networkInterface.privateIpAddress]
     * The private IP address.
     *
     * @param {string} [formula.formulaContent.networkInterface.dnsName] The DNS
     * name.
     *
     * @param {string} [formula.formulaContent.networkInterface.rdpAuthority] The
     * RdpAuthority property is a server DNS host name or IP address followed by
     * the service port number for RDP (Remote Desktop Protocol).
     *
     * @param {string} [formula.formulaContent.networkInterface.sshAuthority] The
     * SshAuthority property is a server DNS host name or IP address followed by
     * the service port number for SSH.
     *
     * @param {object}
     * [formula.formulaContent.networkInterface.sharedPublicIpAddressConfiguration]
     * The configuration for sharing a public IP address across multiple virtual
     * machines.
     *
     * @param {array}
     * [formula.formulaContent.networkInterface.sharedPublicIpAddressConfiguration.inboundNatRules]
     * The incoming NAT rules
     *
     * @param {object} [formula.formulaContent.applicableSchedule] The applicable
     * schedule for the virtual machine.
     *
     * @param {object} [formula.formulaContent.applicableSchedule.labVmsShutdown]
     * The auto-shutdown schedule, if one has been set at the lab or lab resource
     * level.
     *
     * @param {object} [formula.formulaContent.applicableSchedule.labVmsStartup]
     * The auto-startup schedule, if one has been set at the lab or lab resource
     * level.
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.status] The status
     * of the schedule (i.e. Enabled, Disabled). Possible values include:
     * 'Enabled', 'Disabled'
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.taskType] The task
     * type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
     *
     * @param {object}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.weeklyRecurrence]
     * If the schedule will occur only some days of the week, specify the weekly
     * recurrence.
     *
     * @param {array}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.weeklyRecurrence.weekdays]
     * The days of the week for which the schedule is set (e.g. Sunday, Monday,
     * Tuesday, etc.).
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.weeklyRecurrence.time]
     * The time of the day the schedule will occur.
     *
     * @param {object}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.dailyRecurrence] If
     * the schedule will occur once each day of the week, specify the daily
     * recurrence.
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.dailyRecurrence.time]
     * The time of day the schedule will occur.
     *
     * @param {object}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.hourlyRecurrence]
     * If the schedule will occur multiple times a day, specify the hourly
     * recurrence.
     *
     * @param {number}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.hourlyRecurrence.minute]
     * Minutes of the hour the schedule will run.
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.timeZoneId] The
     * time zone ID (e.g. Pacific Standard time).
     *
     * @param {object}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings]
     * Notification settings.
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings.status]
     * If notifications are enabled for this schedule (i.e. Enabled, Disabled).
     * Possible values include: 'Disabled', 'Enabled'
     *
     * @param {number}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings.timeInMinutes]
     * Time in minutes before event at which notification will be sent.
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings.webhookUrl]
     * The webhook URL to which the notification will be sent.
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.targetResourceId]
     * The resource ID to which the schedule belongs
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.provisioningState]
     * The provisioning status of the resource.
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.uniqueIdentifier]
     * The unique immutable identifier of a resource (Guid).
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.location] The
     * location of the resource.
     *
     * @param {object}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.tags] The tags of
     * the resource.
     *
     * @param {string} [formula.formulaContent.applicableSchedule.location] The
     * location of the resource.
     *
     * @param {object} [formula.formulaContent.applicableSchedule.tags] The tags of
     * the resource.
     *
     * @param {date} [formula.formulaContent.expirationDate] The expiration date
     * for VM.
     *
     * @param {boolean} [formula.formulaContent.allowClaim] Indicates whether
     * another user can take ownership of the virtual machine
     *
     * @param {string} [formula.formulaContent.storageType] Storage type to use for
     * virtual machine (i.e. Standard, Premium).
     *
     * @param {string} [formula.formulaContent.virtualMachineCreationSource] Tells
     * source of creation of lab virtual machine. Output property only. Possible
     * values include: 'FromCustomImage', 'FromGalleryImage'
     *
     * @param {string} [formula.formulaContent.environmentId] The resource ID of
     * the environment that contains this virtual machine, if any.
     *
     * @param {string} [formula.formulaContent.provisioningState] The provisioning
     * status of the resource.
     *
     * @param {string} [formula.formulaContent.uniqueIdentifier] The unique
     * immutable identifier of a resource (Guid).
     *
     * @param {string} [formula.formulaContent.name] The name of the virtual
     * machine or environment
     *
     * @param {string} [formula.formulaContent.location] The location of the new
     * virtual machine or environment
     *
     * @param {object} [formula.formulaContent.tags] The tags of the resource.
     *
     * @param {object} [formula.vm] Information about a VM from which a formula is
     * to be created.
     *
     * @param {string} [formula.vm.labVmId] The identifier of the VM from which a
     * formula is to be created.
     *
     * @param {string} [formula.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [formula.uniqueIdentifier] The unique immutable identifier
     * of a resource (Guid).
     *
     * @param {string} [formula.location] The location of the resource.
     *
     * @param {object} [formula.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Formula} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Formula} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Formula} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, labName: string, name: string, formula: models.Formula, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Formula>;
    createOrUpdate(resourceGroupName: string, labName: string, name: string, formula: models.Formula, callback: ServiceCallback<models.Formula>): void;
    createOrUpdate(resourceGroupName: string, labName: string, name: string, formula: models.Formula, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Formula>): void;


    /**
     * Delete formula.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the formula.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete formula.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the formula.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, labName: string, name: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, labName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Create or replace an existing Formula. This operation can take a while to
     * complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the formula.
     *
     * @param {object} formula A formula for creating a VM, specifying an image
     * base and other parameters
     *
     * @param {string} [formula.description] The description of the formula.
     *
     * @param {string} [formula.author] The author of the formula.
     *
     * @param {string} [formula.osType] The OS type of the formula.
     *
     * @param {object} [formula.formulaContent] The content of the formula.
     *
     * @param {object} [formula.formulaContent.bulkCreationParameters] The number
     * of virtual machine instances to create.
     *
     * @param {number}
     * [formula.formulaContent.bulkCreationParameters.instanceCount] The number of
     * virtual machine instances to create.
     *
     * @param {string} [formula.formulaContent.notes] The notes of the virtual
     * machine.
     *
     * @param {string} [formula.formulaContent.ownerObjectId] The object identifier
     * of the owner of the virtual machine.
     *
     * @param {string} [formula.formulaContent.ownerUserPrincipalName] The user
     * principal name of the virtual machine owner.
     *
     * @param {string} [formula.formulaContent.createdByUserId] The object
     * identifier of the creator of the virtual machine.
     *
     * @param {string} [formula.formulaContent.createdByUser] The email address of
     * creator of the virtual machine.
     *
     * @param {date} [formula.formulaContent.createdDate] The creation date of the
     * virtual machine.
     *
     * @param {string} [formula.formulaContent.customImageId] The custom image
     * identifier of the virtual machine.
     *
     * @param {string} [formula.formulaContent.osType] The OS type of the virtual
     * machine.
     *
     * @param {string} [formula.formulaContent.size] The size of the virtual
     * machine.
     *
     * @param {string} [formula.formulaContent.userName] The user name of the
     * virtual machine.
     *
     * @param {string} [formula.formulaContent.password] The password of the
     * virtual machine administrator.
     *
     * @param {string} [formula.formulaContent.sshKey] The SSH key of the virtual
     * machine administrator.
     *
     * @param {boolean} [formula.formulaContent.isAuthenticationWithSshKey]
     * Indicates whether this virtual machine uses an SSH key for authentication.
     *
     * @param {string} [formula.formulaContent.fqdn] The fully-qualified domain
     * name of the virtual machine.
     *
     * @param {string} [formula.formulaContent.labSubnetName] The lab subnet name
     * of the virtual machine.
     *
     * @param {string} [formula.formulaContent.labVirtualNetworkId] The lab virtual
     * network identifier of the virtual machine.
     *
     * @param {boolean} [formula.formulaContent.disallowPublicIpAddress] Indicates
     * whether the virtual machine is to be created without a public IP address.
     *
     * @param {array} [formula.formulaContent.artifacts] The artifacts to be
     * installed on the virtual machine.
     *
     * @param {object} [formula.formulaContent.artifactDeploymentStatus] The
     * artifact deployment status for the virtual machine.
     *
     * @param {string}
     * [formula.formulaContent.artifactDeploymentStatus.deploymentStatus] The
     * deployment status of the artifact.
     *
     * @param {number}
     * [formula.formulaContent.artifactDeploymentStatus.artifactsApplied] The total
     * count of the artifacts that were successfully applied.
     *
     * @param {number}
     * [formula.formulaContent.artifactDeploymentStatus.totalArtifacts] The total
     * count of the artifacts that were tentatively applied.
     *
     * @param {object} [formula.formulaContent.galleryImageReference] The Microsoft
     * Azure Marketplace image reference of the virtual machine.
     *
     * @param {string} [formula.formulaContent.galleryImageReference.offer] The
     * offer of the gallery image.
     *
     * @param {string} [formula.formulaContent.galleryImageReference.publisher] The
     * publisher of the gallery image.
     *
     * @param {string} [formula.formulaContent.galleryImageReference.sku] The SKU
     * of the gallery image.
     *
     * @param {string} [formula.formulaContent.galleryImageReference.osType] The OS
     * type of the gallery image.
     *
     * @param {string} [formula.formulaContent.galleryImageReference.version] The
     * version of the gallery image.
     *
     * @param {object} [formula.formulaContent.computeVm] The compute virtual
     * machine properties.
     *
     * @param {array} [formula.formulaContent.computeVm.statuses] Gets the statuses
     * of the virtual machine.
     *
     * @param {string} [formula.formulaContent.computeVm.osType] Gets the OS type
     * of the virtual machine.
     *
     * @param {string} [formula.formulaContent.computeVm.vmSize] Gets the size of
     * the virtual machine.
     *
     * @param {string} [formula.formulaContent.computeVm.networkInterfaceId] Gets
     * the network interface ID of the virtual machine.
     *
     * @param {string} [formula.formulaContent.computeVm.osDiskId] Gets OS disk
     * blob uri for the virtual machine.
     *
     * @param {array} [formula.formulaContent.computeVm.dataDiskIds] Gets data
     * disks blob uri for the virtual machine.
     *
     * @param {array} [formula.formulaContent.computeVm.dataDisks] Gets all data
     * disks attached to the virtual machine.
     *
     * @param {object} [formula.formulaContent.networkInterface] The network
     * interface properties.
     *
     * @param {string} [formula.formulaContent.networkInterface.virtualNetworkId]
     * The resource ID of the virtual network.
     *
     * @param {string} [formula.formulaContent.networkInterface.subnetId] The
     * resource ID of the sub net.
     *
     * @param {string} [formula.formulaContent.networkInterface.publicIpAddressId]
     * The resource ID of the public IP address.
     *
     * @param {string} [formula.formulaContent.networkInterface.publicIpAddress]
     * The public IP address.
     *
     * @param {string} [formula.formulaContent.networkInterface.privateIpAddress]
     * The private IP address.
     *
     * @param {string} [formula.formulaContent.networkInterface.dnsName] The DNS
     * name.
     *
     * @param {string} [formula.formulaContent.networkInterface.rdpAuthority] The
     * RdpAuthority property is a server DNS host name or IP address followed by
     * the service port number for RDP (Remote Desktop Protocol).
     *
     * @param {string} [formula.formulaContent.networkInterface.sshAuthority] The
     * SshAuthority property is a server DNS host name or IP address followed by
     * the service port number for SSH.
     *
     * @param {object}
     * [formula.formulaContent.networkInterface.sharedPublicIpAddressConfiguration]
     * The configuration for sharing a public IP address across multiple virtual
     * machines.
     *
     * @param {array}
     * [formula.formulaContent.networkInterface.sharedPublicIpAddressConfiguration.inboundNatRules]
     * The incoming NAT rules
     *
     * @param {object} [formula.formulaContent.applicableSchedule] The applicable
     * schedule for the virtual machine.
     *
     * @param {object} [formula.formulaContent.applicableSchedule.labVmsShutdown]
     * The auto-shutdown schedule, if one has been set at the lab or lab resource
     * level.
     *
     * @param {object} [formula.formulaContent.applicableSchedule.labVmsStartup]
     * The auto-startup schedule, if one has been set at the lab or lab resource
     * level.
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.status] The status
     * of the schedule (i.e. Enabled, Disabled). Possible values include:
     * 'Enabled', 'Disabled'
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.taskType] The task
     * type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
     *
     * @param {object}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.weeklyRecurrence]
     * If the schedule will occur only some days of the week, specify the weekly
     * recurrence.
     *
     * @param {array}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.weeklyRecurrence.weekdays]
     * The days of the week for which the schedule is set (e.g. Sunday, Monday,
     * Tuesday, etc.).
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.weeklyRecurrence.time]
     * The time of the day the schedule will occur.
     *
     * @param {object}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.dailyRecurrence] If
     * the schedule will occur once each day of the week, specify the daily
     * recurrence.
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.dailyRecurrence.time]
     * The time of day the schedule will occur.
     *
     * @param {object}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.hourlyRecurrence]
     * If the schedule will occur multiple times a day, specify the hourly
     * recurrence.
     *
     * @param {number}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.hourlyRecurrence.minute]
     * Minutes of the hour the schedule will run.
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.timeZoneId] The
     * time zone ID (e.g. Pacific Standard time).
     *
     * @param {object}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings]
     * Notification settings.
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings.status]
     * If notifications are enabled for this schedule (i.e. Enabled, Disabled).
     * Possible values include: 'Disabled', 'Enabled'
     *
     * @param {number}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings.timeInMinutes]
     * Time in minutes before event at which notification will be sent.
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings.webhookUrl]
     * The webhook URL to which the notification will be sent.
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.targetResourceId]
     * The resource ID to which the schedule belongs
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.provisioningState]
     * The provisioning status of the resource.
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.uniqueIdentifier]
     * The unique immutable identifier of a resource (Guid).
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.location] The
     * location of the resource.
     *
     * @param {object}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.tags] The tags of
     * the resource.
     *
     * @param {string} [formula.formulaContent.applicableSchedule.location] The
     * location of the resource.
     *
     * @param {object} [formula.formulaContent.applicableSchedule.tags] The tags of
     * the resource.
     *
     * @param {date} [formula.formulaContent.expirationDate] The expiration date
     * for VM.
     *
     * @param {boolean} [formula.formulaContent.allowClaim] Indicates whether
     * another user can take ownership of the virtual machine
     *
     * @param {string} [formula.formulaContent.storageType] Storage type to use for
     * virtual machine (i.e. Standard, Premium).
     *
     * @param {string} [formula.formulaContent.virtualMachineCreationSource] Tells
     * source of creation of lab virtual machine. Output property only. Possible
     * values include: 'FromCustomImage', 'FromGalleryImage'
     *
     * @param {string} [formula.formulaContent.environmentId] The resource ID of
     * the environment that contains this virtual machine, if any.
     *
     * @param {string} [formula.formulaContent.provisioningState] The provisioning
     * status of the resource.
     *
     * @param {string} [formula.formulaContent.uniqueIdentifier] The unique
     * immutable identifier of a resource (Guid).
     *
     * @param {string} [formula.formulaContent.name] The name of the virtual
     * machine or environment
     *
     * @param {string} [formula.formulaContent.location] The location of the new
     * virtual machine or environment
     *
     * @param {object} [formula.formulaContent.tags] The tags of the resource.
     *
     * @param {object} [formula.vm] Information about a VM from which a formula is
     * to be created.
     *
     * @param {string} [formula.vm.labVmId] The identifier of the VM from which a
     * formula is to be created.
     *
     * @param {string} [formula.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [formula.uniqueIdentifier] The unique immutable identifier
     * of a resource (Guid).
     *
     * @param {string} [formula.location] The location of the resource.
     *
     * @param {object} [formula.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Formula>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, formula: models.Formula, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Formula>>;

    /**
     * Create or replace an existing Formula. This operation can take a while to
     * complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the formula.
     *
     * @param {object} formula A formula for creating a VM, specifying an image
     * base and other parameters
     *
     * @param {string} [formula.description] The description of the formula.
     *
     * @param {string} [formula.author] The author of the formula.
     *
     * @param {string} [formula.osType] The OS type of the formula.
     *
     * @param {object} [formula.formulaContent] The content of the formula.
     *
     * @param {object} [formula.formulaContent.bulkCreationParameters] The number
     * of virtual machine instances to create.
     *
     * @param {number}
     * [formula.formulaContent.bulkCreationParameters.instanceCount] The number of
     * virtual machine instances to create.
     *
     * @param {string} [formula.formulaContent.notes] The notes of the virtual
     * machine.
     *
     * @param {string} [formula.formulaContent.ownerObjectId] The object identifier
     * of the owner of the virtual machine.
     *
     * @param {string} [formula.formulaContent.ownerUserPrincipalName] The user
     * principal name of the virtual machine owner.
     *
     * @param {string} [formula.formulaContent.createdByUserId] The object
     * identifier of the creator of the virtual machine.
     *
     * @param {string} [formula.formulaContent.createdByUser] The email address of
     * creator of the virtual machine.
     *
     * @param {date} [formula.formulaContent.createdDate] The creation date of the
     * virtual machine.
     *
     * @param {string} [formula.formulaContent.customImageId] The custom image
     * identifier of the virtual machine.
     *
     * @param {string} [formula.formulaContent.osType] The OS type of the virtual
     * machine.
     *
     * @param {string} [formula.formulaContent.size] The size of the virtual
     * machine.
     *
     * @param {string} [formula.formulaContent.userName] The user name of the
     * virtual machine.
     *
     * @param {string} [formula.formulaContent.password] The password of the
     * virtual machine administrator.
     *
     * @param {string} [formula.formulaContent.sshKey] The SSH key of the virtual
     * machine administrator.
     *
     * @param {boolean} [formula.formulaContent.isAuthenticationWithSshKey]
     * Indicates whether this virtual machine uses an SSH key for authentication.
     *
     * @param {string} [formula.formulaContent.fqdn] The fully-qualified domain
     * name of the virtual machine.
     *
     * @param {string} [formula.formulaContent.labSubnetName] The lab subnet name
     * of the virtual machine.
     *
     * @param {string} [formula.formulaContent.labVirtualNetworkId] The lab virtual
     * network identifier of the virtual machine.
     *
     * @param {boolean} [formula.formulaContent.disallowPublicIpAddress] Indicates
     * whether the virtual machine is to be created without a public IP address.
     *
     * @param {array} [formula.formulaContent.artifacts] The artifacts to be
     * installed on the virtual machine.
     *
     * @param {object} [formula.formulaContent.artifactDeploymentStatus] The
     * artifact deployment status for the virtual machine.
     *
     * @param {string}
     * [formula.formulaContent.artifactDeploymentStatus.deploymentStatus] The
     * deployment status of the artifact.
     *
     * @param {number}
     * [formula.formulaContent.artifactDeploymentStatus.artifactsApplied] The total
     * count of the artifacts that were successfully applied.
     *
     * @param {number}
     * [formula.formulaContent.artifactDeploymentStatus.totalArtifacts] The total
     * count of the artifacts that were tentatively applied.
     *
     * @param {object} [formula.formulaContent.galleryImageReference] The Microsoft
     * Azure Marketplace image reference of the virtual machine.
     *
     * @param {string} [formula.formulaContent.galleryImageReference.offer] The
     * offer of the gallery image.
     *
     * @param {string} [formula.formulaContent.galleryImageReference.publisher] The
     * publisher of the gallery image.
     *
     * @param {string} [formula.formulaContent.galleryImageReference.sku] The SKU
     * of the gallery image.
     *
     * @param {string} [formula.formulaContent.galleryImageReference.osType] The OS
     * type of the gallery image.
     *
     * @param {string} [formula.formulaContent.galleryImageReference.version] The
     * version of the gallery image.
     *
     * @param {object} [formula.formulaContent.computeVm] The compute virtual
     * machine properties.
     *
     * @param {array} [formula.formulaContent.computeVm.statuses] Gets the statuses
     * of the virtual machine.
     *
     * @param {string} [formula.formulaContent.computeVm.osType] Gets the OS type
     * of the virtual machine.
     *
     * @param {string} [formula.formulaContent.computeVm.vmSize] Gets the size of
     * the virtual machine.
     *
     * @param {string} [formula.formulaContent.computeVm.networkInterfaceId] Gets
     * the network interface ID of the virtual machine.
     *
     * @param {string} [formula.formulaContent.computeVm.osDiskId] Gets OS disk
     * blob uri for the virtual machine.
     *
     * @param {array} [formula.formulaContent.computeVm.dataDiskIds] Gets data
     * disks blob uri for the virtual machine.
     *
     * @param {array} [formula.formulaContent.computeVm.dataDisks] Gets all data
     * disks attached to the virtual machine.
     *
     * @param {object} [formula.formulaContent.networkInterface] The network
     * interface properties.
     *
     * @param {string} [formula.formulaContent.networkInterface.virtualNetworkId]
     * The resource ID of the virtual network.
     *
     * @param {string} [formula.formulaContent.networkInterface.subnetId] The
     * resource ID of the sub net.
     *
     * @param {string} [formula.formulaContent.networkInterface.publicIpAddressId]
     * The resource ID of the public IP address.
     *
     * @param {string} [formula.formulaContent.networkInterface.publicIpAddress]
     * The public IP address.
     *
     * @param {string} [formula.formulaContent.networkInterface.privateIpAddress]
     * The private IP address.
     *
     * @param {string} [formula.formulaContent.networkInterface.dnsName] The DNS
     * name.
     *
     * @param {string} [formula.formulaContent.networkInterface.rdpAuthority] The
     * RdpAuthority property is a server DNS host name or IP address followed by
     * the service port number for RDP (Remote Desktop Protocol).
     *
     * @param {string} [formula.formulaContent.networkInterface.sshAuthority] The
     * SshAuthority property is a server DNS host name or IP address followed by
     * the service port number for SSH.
     *
     * @param {object}
     * [formula.formulaContent.networkInterface.sharedPublicIpAddressConfiguration]
     * The configuration for sharing a public IP address across multiple virtual
     * machines.
     *
     * @param {array}
     * [formula.formulaContent.networkInterface.sharedPublicIpAddressConfiguration.inboundNatRules]
     * The incoming NAT rules
     *
     * @param {object} [formula.formulaContent.applicableSchedule] The applicable
     * schedule for the virtual machine.
     *
     * @param {object} [formula.formulaContent.applicableSchedule.labVmsShutdown]
     * The auto-shutdown schedule, if one has been set at the lab or lab resource
     * level.
     *
     * @param {object} [formula.formulaContent.applicableSchedule.labVmsStartup]
     * The auto-startup schedule, if one has been set at the lab or lab resource
     * level.
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.status] The status
     * of the schedule (i.e. Enabled, Disabled). Possible values include:
     * 'Enabled', 'Disabled'
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.taskType] The task
     * type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
     *
     * @param {object}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.weeklyRecurrence]
     * If the schedule will occur only some days of the week, specify the weekly
     * recurrence.
     *
     * @param {array}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.weeklyRecurrence.weekdays]
     * The days of the week for which the schedule is set (e.g. Sunday, Monday,
     * Tuesday, etc.).
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.weeklyRecurrence.time]
     * The time of the day the schedule will occur.
     *
     * @param {object}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.dailyRecurrence] If
     * the schedule will occur once each day of the week, specify the daily
     * recurrence.
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.dailyRecurrence.time]
     * The time of day the schedule will occur.
     *
     * @param {object}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.hourlyRecurrence]
     * If the schedule will occur multiple times a day, specify the hourly
     * recurrence.
     *
     * @param {number}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.hourlyRecurrence.minute]
     * Minutes of the hour the schedule will run.
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.timeZoneId] The
     * time zone ID (e.g. Pacific Standard time).
     *
     * @param {object}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings]
     * Notification settings.
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings.status]
     * If notifications are enabled for this schedule (i.e. Enabled, Disabled).
     * Possible values include: 'Disabled', 'Enabled'
     *
     * @param {number}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings.timeInMinutes]
     * Time in minutes before event at which notification will be sent.
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings.webhookUrl]
     * The webhook URL to which the notification will be sent.
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.targetResourceId]
     * The resource ID to which the schedule belongs
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.provisioningState]
     * The provisioning status of the resource.
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.uniqueIdentifier]
     * The unique immutable identifier of a resource (Guid).
     *
     * @param {string}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.location] The
     * location of the resource.
     *
     * @param {object}
     * [formula.formulaContent.applicableSchedule.labVmsStartup.tags] The tags of
     * the resource.
     *
     * @param {string} [formula.formulaContent.applicableSchedule.location] The
     * location of the resource.
     *
     * @param {object} [formula.formulaContent.applicableSchedule.tags] The tags of
     * the resource.
     *
     * @param {date} [formula.formulaContent.expirationDate] The expiration date
     * for VM.
     *
     * @param {boolean} [formula.formulaContent.allowClaim] Indicates whether
     * another user can take ownership of the virtual machine
     *
     * @param {string} [formula.formulaContent.storageType] Storage type to use for
     * virtual machine (i.e. Standard, Premium).
     *
     * @param {string} [formula.formulaContent.virtualMachineCreationSource] Tells
     * source of creation of lab virtual machine. Output property only. Possible
     * values include: 'FromCustomImage', 'FromGalleryImage'
     *
     * @param {string} [formula.formulaContent.environmentId] The resource ID of
     * the environment that contains this virtual machine, if any.
     *
     * @param {string} [formula.formulaContent.provisioningState] The provisioning
     * status of the resource.
     *
     * @param {string} [formula.formulaContent.uniqueIdentifier] The unique
     * immutable identifier of a resource (Guid).
     *
     * @param {string} [formula.formulaContent.name] The name of the virtual
     * machine or environment
     *
     * @param {string} [formula.formulaContent.location] The location of the new
     * virtual machine or environment
     *
     * @param {object} [formula.formulaContent.tags] The tags of the resource.
     *
     * @param {object} [formula.vm] Information about a VM from which a formula is
     * to be created.
     *
     * @param {string} [formula.vm.labVmId] The identifier of the VM from which a
     * formula is to be created.
     *
     * @param {string} [formula.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [formula.uniqueIdentifier] The unique immutable identifier
     * of a resource (Guid).
     *
     * @param {string} [formula.location] The location of the resource.
     *
     * @param {object} [formula.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Formula} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Formula} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Formula} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, labName: string, name: string, formula: models.Formula, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Formula>;
    beginCreateOrUpdate(resourceGroupName: string, labName: string, name: string, formula: models.Formula, callback: ServiceCallback<models.Formula>): void;
    beginCreateOrUpdate(resourceGroupName: string, labName: string, name: string, formula: models.Formula, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Formula>): void;


    /**
     * List formulas in a given lab.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationFormula>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationFormula>>;

    /**
     * List formulas in a given lab.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationFormula} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationFormula} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationFormula} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationFormula>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ResponseWithContinuationFormula>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationFormula>): void;
}

/**
 * @class
 * GalleryImages
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DevTestLabsClient.
 */
export interface GalleryImages {


    /**
     * List gallery images in a given lab.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=author)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationGalleryImage>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, labName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationGalleryImage>>;

    /**
     * List gallery images in a given lab.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=author)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationGalleryImage} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationGalleryImage} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationGalleryImage} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, labName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationGalleryImage>;
    list(resourceGroupName: string, labName: string, callback: ServiceCallback<models.ResponseWithContinuationGalleryImage>): void;
    list(resourceGroupName: string, labName: string, options: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationGalleryImage>): void;


    /**
     * List gallery images in a given lab.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationGalleryImage>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationGalleryImage>>;

    /**
     * List gallery images in a given lab.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationGalleryImage} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationGalleryImage} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationGalleryImage} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationGalleryImage>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ResponseWithContinuationGalleryImage>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationGalleryImage>): void;
}

/**
 * @class
 * NotificationChannels
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DevTestLabsClient.
 */
export interface NotificationChannels {


    /**
     * List notificationchannels in a given lab.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=webHookUrl)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationNotificationChannel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, labName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationNotificationChannel>>;

    /**
     * List notificationchannels in a given lab.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=webHookUrl)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationNotificationChannel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationNotificationChannel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationNotificationChannel}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, labName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationNotificationChannel>;
    list(resourceGroupName: string, labName: string, callback: ServiceCallback<models.ResponseWithContinuationNotificationChannel>): void;
    list(resourceGroupName: string, labName: string, options: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationNotificationChannel>): void;


    /**
     * Get notificationchannel.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the notificationChannel.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=webHookUrl)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NotificationChannel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NotificationChannel>>;

    /**
     * Get notificationchannel.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the notificationChannel.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=webHookUrl)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NotificationChannel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NotificationChannel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NotificationChannel} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, labName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.NotificationChannel>;
    get(resourceGroupName: string, labName: string, name: string, callback: ServiceCallback<models.NotificationChannel>): void;
    get(resourceGroupName: string, labName: string, name: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NotificationChannel>): void;


    /**
     * Create or replace an existing notificationChannel.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the notificationChannel.
     *
     * @param {object} notificationChannel A notification.
     *
     * @param {string} [notificationChannel.webHookUrl] The webhook URL to send
     * notifications to.
     *
     * @param {string} [notificationChannel.description] Description of
     * notification.
     *
     * @param {array} [notificationChannel.events] The list of event for which this
     * notification is enabled.
     *
     * @param {string} [notificationChannel.provisioningState] The provisioning
     * status of the resource.
     *
     * @param {string} [notificationChannel.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [notificationChannel.location] The location of the resource.
     *
     * @param {object} [notificationChannel.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NotificationChannel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, notificationChannel: models.NotificationChannel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NotificationChannel>>;

    /**
     * Create or replace an existing notificationChannel.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the notificationChannel.
     *
     * @param {object} notificationChannel A notification.
     *
     * @param {string} [notificationChannel.webHookUrl] The webhook URL to send
     * notifications to.
     *
     * @param {string} [notificationChannel.description] Description of
     * notification.
     *
     * @param {array} [notificationChannel.events] The list of event for which this
     * notification is enabled.
     *
     * @param {string} [notificationChannel.provisioningState] The provisioning
     * status of the resource.
     *
     * @param {string} [notificationChannel.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [notificationChannel.location] The location of the resource.
     *
     * @param {object} [notificationChannel.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NotificationChannel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NotificationChannel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NotificationChannel} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, labName: string, name: string, notificationChannel: models.NotificationChannel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NotificationChannel>;
    createOrUpdate(resourceGroupName: string, labName: string, name: string, notificationChannel: models.NotificationChannel, callback: ServiceCallback<models.NotificationChannel>): void;
    createOrUpdate(resourceGroupName: string, labName: string, name: string, notificationChannel: models.NotificationChannel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NotificationChannel>): void;


    /**
     * Delete notificationchannel.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the notificationChannel.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete notificationchannel.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the notificationChannel.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, labName: string, name: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, labName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Modify properties of notificationchannels.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the notificationChannel.
     *
     * @param {object} notificationChannel A notification.
     *
     * @param {string} [notificationChannel.webHookUrl] The webhook URL to send
     * notifications to.
     *
     * @param {string} [notificationChannel.description] Description of
     * notification.
     *
     * @param {array} [notificationChannel.events] The list of event for which this
     * notification is enabled.
     *
     * @param {string} [notificationChannel.provisioningState] The provisioning
     * status of the resource.
     *
     * @param {string} [notificationChannel.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [notificationChannel.location] The location of the resource.
     *
     * @param {object} [notificationChannel.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<NotificationChannel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, notificationChannel: models.NotificationChannelFragment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.NotificationChannel>>;

    /**
     * Modify properties of notificationchannels.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the notificationChannel.
     *
     * @param {object} notificationChannel A notification.
     *
     * @param {string} [notificationChannel.webHookUrl] The webhook URL to send
     * notifications to.
     *
     * @param {string} [notificationChannel.description] Description of
     * notification.
     *
     * @param {array} [notificationChannel.events] The list of event for which this
     * notification is enabled.
     *
     * @param {string} [notificationChannel.provisioningState] The provisioning
     * status of the resource.
     *
     * @param {string} [notificationChannel.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [notificationChannel.location] The location of the resource.
     *
     * @param {object} [notificationChannel.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {NotificationChannel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {NotificationChannel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link NotificationChannel} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, labName: string, name: string, notificationChannel: models.NotificationChannelFragment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.NotificationChannel>;
    update(resourceGroupName: string, labName: string, name: string, notificationChannel: models.NotificationChannelFragment, callback: ServiceCallback<models.NotificationChannel>): void;
    update(resourceGroupName: string, labName: string, name: string, notificationChannel: models.NotificationChannelFragment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.NotificationChannel>): void;


    /**
     * Send notification to provided channel.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the notificationChannel.
     *
     * @param {object} notifyParameters Properties for generating a Notification.
     *
     * @param {string} [notifyParameters.eventName] The type of event (i.e.
     * AutoShutdown, Cost). Possible values include: 'AutoShutdown', 'Cost'
     *
     * @param {string} [notifyParameters.jsonPayload] Properties for the
     * notification in json format.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    notifyWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, notifyParameters: models.NotifyParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Send notification to provided channel.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the notificationChannel.
     *
     * @param {object} notifyParameters Properties for generating a Notification.
     *
     * @param {string} [notifyParameters.eventName] The type of event (i.e.
     * AutoShutdown, Cost). Possible values include: 'AutoShutdown', 'Cost'
     *
     * @param {string} [notifyParameters.jsonPayload] Properties for the
     * notification in json format.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    notify(resourceGroupName: string, labName: string, name: string, notifyParameters: models.NotifyParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    notify(resourceGroupName: string, labName: string, name: string, notifyParameters: models.NotifyParameters, callback: ServiceCallback<void>): void;
    notify(resourceGroupName: string, labName: string, name: string, notifyParameters: models.NotifyParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * List notificationchannels in a given lab.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationNotificationChannel>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationNotificationChannel>>;

    /**
     * List notificationchannels in a given lab.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationNotificationChannel} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationNotificationChannel} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationNotificationChannel}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationNotificationChannel>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ResponseWithContinuationNotificationChannel>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationNotificationChannel>): void;
}

/**
 * @class
 * PolicySets
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DevTestLabsClient.
 */
export interface PolicySets {


    /**
     * Evaluates lab policy.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the policy set.
     *
     * @param {object} evaluatePoliciesRequest Request body for evaluating a policy
     * set.
     *
     * @param {array} [evaluatePoliciesRequest.policies] Policies to evaluate.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<EvaluatePoliciesResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    evaluatePoliciesWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, evaluatePoliciesRequest: models.EvaluatePoliciesRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EvaluatePoliciesResponse>>;

    /**
     * Evaluates lab policy.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the policy set.
     *
     * @param {object} evaluatePoliciesRequest Request body for evaluating a policy
     * set.
     *
     * @param {array} [evaluatePoliciesRequest.policies] Policies to evaluate.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {EvaluatePoliciesResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {EvaluatePoliciesResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link EvaluatePoliciesResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    evaluatePolicies(resourceGroupName: string, labName: string, name: string, evaluatePoliciesRequest: models.EvaluatePoliciesRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.EvaluatePoliciesResponse>;
    evaluatePolicies(resourceGroupName: string, labName: string, name: string, evaluatePoliciesRequest: models.EvaluatePoliciesRequest, callback: ServiceCallback<models.EvaluatePoliciesResponse>): void;
    evaluatePolicies(resourceGroupName: string, labName: string, name: string, evaluatePoliciesRequest: models.EvaluatePoliciesRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EvaluatePoliciesResponse>): void;
}

/**
 * @class
 * Policies
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DevTestLabsClient.
 */
export interface Policies {


    /**
     * List policies in a given policy set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} policySetName The name of the policy set.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=description)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, labName: string, policySetName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationPolicy>>;

    /**
     * List policies in a given policy set.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} policySetName The name of the policy set.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=description)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, labName: string, policySetName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationPolicy>;
    list(resourceGroupName: string, labName: string, policySetName: string, callback: ServiceCallback<models.ResponseWithContinuationPolicy>): void;
    list(resourceGroupName: string, labName: string, policySetName: string, options: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationPolicy>): void;


    /**
     * Get policy.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} policySetName The name of the policy set.
     *
     * @param {string} name The name of the policy.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=description)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Policy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, labName: string, policySetName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Policy>>;

    /**
     * Get policy.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} policySetName The name of the policy set.
     *
     * @param {string} name The name of the policy.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=description)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Policy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Policy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Policy} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, labName: string, policySetName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Policy>;
    get(resourceGroupName: string, labName: string, policySetName: string, name: string, callback: ServiceCallback<models.Policy>): void;
    get(resourceGroupName: string, labName: string, policySetName: string, name: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Policy>): void;


    /**
     * Create or replace an existing policy.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} policySetName The name of the policy set.
     *
     * @param {string} name The name of the policy.
     *
     * @param {object} policy A Policy.
     *
     * @param {string} [policy.description] The description of the policy.
     *
     * @param {string} [policy.status] The status of the policy. Possible values
     * include: 'Enabled', 'Disabled'
     *
     * @param {string} [policy.factName] The fact name of the policy (e.g.
     * LabVmCount, LabVmSize, MaxVmsAllowedPerLab, etc. Possible values include:
     * 'UserOwnedLabVmCount', 'UserOwnedLabPremiumVmCount', 'LabVmCount',
     * 'LabPremiumVmCount', 'LabVmSize', 'GalleryImage',
     * 'UserOwnedLabVmCountInSubnet', 'LabTargetCost'
     *
     * @param {string} [policy.factData] The fact data of the policy.
     *
     * @param {string} [policy.threshold] The threshold of the policy (i.e. a
     * number for MaxValuePolicy, and a JSON array of values for
     * AllowedValuesPolicy).
     *
     * @param {string} [policy.evaluatorType] The evaluator type of the policy
     * (i.e. AllowedValuesPolicy, MaxValuePolicy). Possible values include:
     * 'AllowedValuesPolicy', 'MaxValuePolicy'
     *
     * @param {string} [policy.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [policy.uniqueIdentifier] The unique immutable identifier of
     * a resource (Guid).
     *
     * @param {string} [policy.location] The location of the resource.
     *
     * @param {object} [policy.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Policy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, labName: string, policySetName: string, name: string, policy: models.Policy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Policy>>;

    /**
     * Create or replace an existing policy.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} policySetName The name of the policy set.
     *
     * @param {string} name The name of the policy.
     *
     * @param {object} policy A Policy.
     *
     * @param {string} [policy.description] The description of the policy.
     *
     * @param {string} [policy.status] The status of the policy. Possible values
     * include: 'Enabled', 'Disabled'
     *
     * @param {string} [policy.factName] The fact name of the policy (e.g.
     * LabVmCount, LabVmSize, MaxVmsAllowedPerLab, etc. Possible values include:
     * 'UserOwnedLabVmCount', 'UserOwnedLabPremiumVmCount', 'LabVmCount',
     * 'LabPremiumVmCount', 'LabVmSize', 'GalleryImage',
     * 'UserOwnedLabVmCountInSubnet', 'LabTargetCost'
     *
     * @param {string} [policy.factData] The fact data of the policy.
     *
     * @param {string} [policy.threshold] The threshold of the policy (i.e. a
     * number for MaxValuePolicy, and a JSON array of values for
     * AllowedValuesPolicy).
     *
     * @param {string} [policy.evaluatorType] The evaluator type of the policy
     * (i.e. AllowedValuesPolicy, MaxValuePolicy). Possible values include:
     * 'AllowedValuesPolicy', 'MaxValuePolicy'
     *
     * @param {string} [policy.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [policy.uniqueIdentifier] The unique immutable identifier of
     * a resource (Guid).
     *
     * @param {string} [policy.location] The location of the resource.
     *
     * @param {object} [policy.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Policy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Policy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Policy} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, labName: string, policySetName: string, name: string, policy: models.Policy, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Policy>;
    createOrUpdate(resourceGroupName: string, labName: string, policySetName: string, name: string, policy: models.Policy, callback: ServiceCallback<models.Policy>): void;
    createOrUpdate(resourceGroupName: string, labName: string, policySetName: string, name: string, policy: models.Policy, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Policy>): void;


    /**
     * Delete policy.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} policySetName The name of the policy set.
     *
     * @param {string} name The name of the policy.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, labName: string, policySetName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete policy.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} policySetName The name of the policy set.
     *
     * @param {string} name The name of the policy.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, labName: string, policySetName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, labName: string, policySetName: string, name: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, labName: string, policySetName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Modify properties of policies.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} policySetName The name of the policy set.
     *
     * @param {string} name The name of the policy.
     *
     * @param {object} policy A Policy.
     *
     * @param {string} [policy.description] The description of the policy.
     *
     * @param {string} [policy.status] The status of the policy. Possible values
     * include: 'Enabled', 'Disabled'
     *
     * @param {string} [policy.factName] The fact name of the policy (e.g.
     * LabVmCount, LabVmSize, MaxVmsAllowedPerLab, etc. Possible values include:
     * 'UserOwnedLabVmCount', 'UserOwnedLabPremiumVmCount', 'LabVmCount',
     * 'LabPremiumVmCount', 'LabVmSize', 'GalleryImage',
     * 'UserOwnedLabVmCountInSubnet', 'LabTargetCost'
     *
     * @param {string} [policy.factData] The fact data of the policy.
     *
     * @param {string} [policy.threshold] The threshold of the policy (i.e. a
     * number for MaxValuePolicy, and a JSON array of values for
     * AllowedValuesPolicy).
     *
     * @param {string} [policy.evaluatorType] The evaluator type of the policy
     * (i.e. AllowedValuesPolicy, MaxValuePolicy). Possible values include:
     * 'AllowedValuesPolicy', 'MaxValuePolicy'
     *
     * @param {string} [policy.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [policy.uniqueIdentifier] The unique immutable identifier of
     * a resource (Guid).
     *
     * @param {string} [policy.location] The location of the resource.
     *
     * @param {object} [policy.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Policy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, labName: string, policySetName: string, name: string, policy: models.PolicyFragment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Policy>>;

    /**
     * Modify properties of policies.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} policySetName The name of the policy set.
     *
     * @param {string} name The name of the policy.
     *
     * @param {object} policy A Policy.
     *
     * @param {string} [policy.description] The description of the policy.
     *
     * @param {string} [policy.status] The status of the policy. Possible values
     * include: 'Enabled', 'Disabled'
     *
     * @param {string} [policy.factName] The fact name of the policy (e.g.
     * LabVmCount, LabVmSize, MaxVmsAllowedPerLab, etc. Possible values include:
     * 'UserOwnedLabVmCount', 'UserOwnedLabPremiumVmCount', 'LabVmCount',
     * 'LabPremiumVmCount', 'LabVmSize', 'GalleryImage',
     * 'UserOwnedLabVmCountInSubnet', 'LabTargetCost'
     *
     * @param {string} [policy.factData] The fact data of the policy.
     *
     * @param {string} [policy.threshold] The threshold of the policy (i.e. a
     * number for MaxValuePolicy, and a JSON array of values for
     * AllowedValuesPolicy).
     *
     * @param {string} [policy.evaluatorType] The evaluator type of the policy
     * (i.e. AllowedValuesPolicy, MaxValuePolicy). Possible values include:
     * 'AllowedValuesPolicy', 'MaxValuePolicy'
     *
     * @param {string} [policy.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [policy.uniqueIdentifier] The unique immutable identifier of
     * a resource (Guid).
     *
     * @param {string} [policy.location] The location of the resource.
     *
     * @param {object} [policy.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Policy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Policy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Policy} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, labName: string, policySetName: string, name: string, policy: models.PolicyFragment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Policy>;
    update(resourceGroupName: string, labName: string, policySetName: string, name: string, policy: models.PolicyFragment, callback: ServiceCallback<models.Policy>): void;
    update(resourceGroupName: string, labName: string, policySetName: string, name: string, policy: models.PolicyFragment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Policy>): void;


    /**
     * List policies in a given policy set.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationPolicy>>;

    /**
     * List policies in a given policy set.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationPolicy} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationPolicy>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ResponseWithContinuationPolicy>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationPolicy>): void;
}

/**
 * @class
 * Schedules
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DevTestLabsClient.
 */
export interface Schedules {


    /**
     * List schedules in a given lab.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=status)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationSchedule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, labName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationSchedule>>;

    /**
     * List schedules in a given lab.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=status)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationSchedule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationSchedule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationSchedule} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, labName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationSchedule>;
    list(resourceGroupName: string, labName: string, callback: ServiceCallback<models.ResponseWithContinuationSchedule>): void;
    list(resourceGroupName: string, labName: string, options: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationSchedule>): void;


    /**
     * Get schedule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=status)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Schedule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Schedule>>;

    /**
     * Get schedule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=status)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Schedule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Schedule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Schedule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, labName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Schedule>;
    get(resourceGroupName: string, labName: string, name: string, callback: ServiceCallback<models.Schedule>): void;
    get(resourceGroupName: string, labName: string, name: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Schedule>): void;


    /**
     * Create or replace an existing schedule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} schedule A schedule.
     *
     * @param {string} [schedule.status] The status of the schedule (i.e. Enabled,
     * Disabled). Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [schedule.taskType] The task type of the schedule (e.g.
     * LabVmsShutdownTask, LabVmAutoStart).
     *
     * @param {object} [schedule.weeklyRecurrence] If the schedule will occur only
     * some days of the week, specify the weekly recurrence.
     *
     * @param {array} [schedule.weeklyRecurrence.weekdays] The days of the week for
     * which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.).
     *
     * @param {string} [schedule.weeklyRecurrence.time] The time of the day the
     * schedule will occur.
     *
     * @param {object} [schedule.dailyRecurrence] If the schedule will occur once
     * each day of the week, specify the daily recurrence.
     *
     * @param {string} [schedule.dailyRecurrence.time] The time of day the schedule
     * will occur.
     *
     * @param {object} [schedule.hourlyRecurrence] If the schedule will occur
     * multiple times a day, specify the hourly recurrence.
     *
     * @param {number} [schedule.hourlyRecurrence.minute] Minutes of the hour the
     * schedule will run.
     *
     * @param {string} [schedule.timeZoneId] The time zone ID (e.g. Pacific
     * Standard time).
     *
     * @param {object} [schedule.notificationSettings] Notification settings.
     *
     * @param {string} [schedule.notificationSettings.status] If notifications are
     * enabled for this schedule (i.e. Enabled, Disabled). Possible values include:
     * 'Disabled', 'Enabled'
     *
     * @param {number} [schedule.notificationSettings.timeInMinutes] Time in
     * minutes before event at which notification will be sent.
     *
     * @param {string} [schedule.notificationSettings.webhookUrl] The webhook URL
     * to which the notification will be sent.
     *
     * @param {string} [schedule.targetResourceId] The resource ID to which the
     * schedule belongs
     *
     * @param {string} [schedule.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [schedule.uniqueIdentifier] The unique immutable identifier
     * of a resource (Guid).
     *
     * @param {string} [schedule.location] The location of the resource.
     *
     * @param {object} [schedule.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Schedule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, schedule: models.Schedule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Schedule>>;

    /**
     * Create or replace an existing schedule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} schedule A schedule.
     *
     * @param {string} [schedule.status] The status of the schedule (i.e. Enabled,
     * Disabled). Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [schedule.taskType] The task type of the schedule (e.g.
     * LabVmsShutdownTask, LabVmAutoStart).
     *
     * @param {object} [schedule.weeklyRecurrence] If the schedule will occur only
     * some days of the week, specify the weekly recurrence.
     *
     * @param {array} [schedule.weeklyRecurrence.weekdays] The days of the week for
     * which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.).
     *
     * @param {string} [schedule.weeklyRecurrence.time] The time of the day the
     * schedule will occur.
     *
     * @param {object} [schedule.dailyRecurrence] If the schedule will occur once
     * each day of the week, specify the daily recurrence.
     *
     * @param {string} [schedule.dailyRecurrence.time] The time of day the schedule
     * will occur.
     *
     * @param {object} [schedule.hourlyRecurrence] If the schedule will occur
     * multiple times a day, specify the hourly recurrence.
     *
     * @param {number} [schedule.hourlyRecurrence.minute] Minutes of the hour the
     * schedule will run.
     *
     * @param {string} [schedule.timeZoneId] The time zone ID (e.g. Pacific
     * Standard time).
     *
     * @param {object} [schedule.notificationSettings] Notification settings.
     *
     * @param {string} [schedule.notificationSettings.status] If notifications are
     * enabled for this schedule (i.e. Enabled, Disabled). Possible values include:
     * 'Disabled', 'Enabled'
     *
     * @param {number} [schedule.notificationSettings.timeInMinutes] Time in
     * minutes before event at which notification will be sent.
     *
     * @param {string} [schedule.notificationSettings.webhookUrl] The webhook URL
     * to which the notification will be sent.
     *
     * @param {string} [schedule.targetResourceId] The resource ID to which the
     * schedule belongs
     *
     * @param {string} [schedule.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [schedule.uniqueIdentifier] The unique immutable identifier
     * of a resource (Guid).
     *
     * @param {string} [schedule.location] The location of the resource.
     *
     * @param {object} [schedule.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Schedule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Schedule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Schedule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, labName: string, name: string, schedule: models.Schedule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Schedule>;
    createOrUpdate(resourceGroupName: string, labName: string, name: string, schedule: models.Schedule, callback: ServiceCallback<models.Schedule>): void;
    createOrUpdate(resourceGroupName: string, labName: string, name: string, schedule: models.Schedule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Schedule>): void;


    /**
     * Delete schedule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete schedule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, labName: string, name: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, labName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Modify properties of schedules.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} schedule A schedule.
     *
     * @param {string} [schedule.status] The status of the schedule (i.e. Enabled,
     * Disabled). Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [schedule.taskType] The task type of the schedule (e.g.
     * LabVmsShutdownTask, LabVmAutoStart).
     *
     * @param {object} [schedule.weeklyRecurrence] If the schedule will occur only
     * some days of the week, specify the weekly recurrence.
     *
     * @param {array} [schedule.weeklyRecurrence.weekdays] The days of the week for
     * which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.).
     *
     * @param {string} [schedule.weeklyRecurrence.time] The time of the day the
     * schedule will occur.
     *
     * @param {object} [schedule.dailyRecurrence] If the schedule will occur once
     * each day of the week, specify the daily recurrence.
     *
     * @param {string} [schedule.dailyRecurrence.time] The time of day the schedule
     * will occur.
     *
     * @param {object} [schedule.hourlyRecurrence] If the schedule will occur
     * multiple times a day, specify the hourly recurrence.
     *
     * @param {number} [schedule.hourlyRecurrence.minute] Minutes of the hour the
     * schedule will run.
     *
     * @param {string} [schedule.timeZoneId] The time zone ID (e.g. Pacific
     * Standard time).
     *
     * @param {object} [schedule.notificationSettings] Notification settings.
     *
     * @param {string} [schedule.notificationSettings.status] If notifications are
     * enabled for this schedule (i.e. Enabled, Disabled). Possible values include:
     * 'Disabled', 'Enabled'
     *
     * @param {number} [schedule.notificationSettings.timeInMinutes] Time in
     * minutes before event at which notification will be sent.
     *
     * @param {string} [schedule.notificationSettings.webhookUrl] The webhook URL
     * to which the notification will be sent.
     *
     * @param {string} [schedule.targetResourceId] The resource ID to which the
     * schedule belongs
     *
     * @param {string} [schedule.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [schedule.uniqueIdentifier] The unique immutable identifier
     * of a resource (Guid).
     *
     * @param {string} [schedule.location] The location of the resource.
     *
     * @param {object} [schedule.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Schedule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, schedule: models.ScheduleFragment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Schedule>>;

    /**
     * Modify properties of schedules.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} schedule A schedule.
     *
     * @param {string} [schedule.status] The status of the schedule (i.e. Enabled,
     * Disabled). Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [schedule.taskType] The task type of the schedule (e.g.
     * LabVmsShutdownTask, LabVmAutoStart).
     *
     * @param {object} [schedule.weeklyRecurrence] If the schedule will occur only
     * some days of the week, specify the weekly recurrence.
     *
     * @param {array} [schedule.weeklyRecurrence.weekdays] The days of the week for
     * which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.).
     *
     * @param {string} [schedule.weeklyRecurrence.time] The time of the day the
     * schedule will occur.
     *
     * @param {object} [schedule.dailyRecurrence] If the schedule will occur once
     * each day of the week, specify the daily recurrence.
     *
     * @param {string} [schedule.dailyRecurrence.time] The time of day the schedule
     * will occur.
     *
     * @param {object} [schedule.hourlyRecurrence] If the schedule will occur
     * multiple times a day, specify the hourly recurrence.
     *
     * @param {number} [schedule.hourlyRecurrence.minute] Minutes of the hour the
     * schedule will run.
     *
     * @param {string} [schedule.timeZoneId] The time zone ID (e.g. Pacific
     * Standard time).
     *
     * @param {object} [schedule.notificationSettings] Notification settings.
     *
     * @param {string} [schedule.notificationSettings.status] If notifications are
     * enabled for this schedule (i.e. Enabled, Disabled). Possible values include:
     * 'Disabled', 'Enabled'
     *
     * @param {number} [schedule.notificationSettings.timeInMinutes] Time in
     * minutes before event at which notification will be sent.
     *
     * @param {string} [schedule.notificationSettings.webhookUrl] The webhook URL
     * to which the notification will be sent.
     *
     * @param {string} [schedule.targetResourceId] The resource ID to which the
     * schedule belongs
     *
     * @param {string} [schedule.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [schedule.uniqueIdentifier] The unique immutable identifier
     * of a resource (Guid).
     *
     * @param {string} [schedule.location] The location of the resource.
     *
     * @param {object} [schedule.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Schedule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Schedule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Schedule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, labName: string, name: string, schedule: models.ScheduleFragment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Schedule>;
    update(resourceGroupName: string, labName: string, name: string, schedule: models.ScheduleFragment, callback: ServiceCallback<models.Schedule>): void;
    update(resourceGroupName: string, labName: string, name: string, schedule: models.ScheduleFragment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Schedule>): void;


    /**
     * Execute a schedule. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    executeWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Execute a schedule. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    execute(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    execute(resourceGroupName: string, labName: string, name: string, callback: ServiceCallback<void>): void;
    execute(resourceGroupName: string, labName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists all applicable schedules
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationSchedule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listApplicableWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationSchedule>>;

    /**
     * Lists all applicable schedules
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationSchedule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationSchedule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationSchedule} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listApplicable(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationSchedule>;
    listApplicable(resourceGroupName: string, labName: string, name: string, callback: ServiceCallback<models.ResponseWithContinuationSchedule>): void;
    listApplicable(resourceGroupName: string, labName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationSchedule>): void;


    /**
     * Execute a schedule. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginExecuteWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Execute a schedule. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginExecute(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginExecute(resourceGroupName: string, labName: string, name: string, callback: ServiceCallback<void>): void;
    beginExecute(resourceGroupName: string, labName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * List schedules in a given lab.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationSchedule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationSchedule>>;

    /**
     * List schedules in a given lab.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationSchedule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationSchedule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationSchedule} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationSchedule>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ResponseWithContinuationSchedule>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationSchedule>): void;


    /**
     * Lists all applicable schedules
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationSchedule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listApplicableNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationSchedule>>;

    /**
     * Lists all applicable schedules
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationSchedule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationSchedule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationSchedule} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listApplicableNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationSchedule>;
    listApplicableNext(nextPageLink: string, callback: ServiceCallback<models.ResponseWithContinuationSchedule>): void;
    listApplicableNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationSchedule>): void;
}

/**
 * @class
 * ServiceRunners
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DevTestLabsClient.
 */
export interface ServiceRunners {


    /**
     * List service runners in a given lab.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationServiceRunner>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, labName: string, options?: { filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationServiceRunner>>;

    /**
     * List service runners in a given lab.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationServiceRunner} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationServiceRunner} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationServiceRunner} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, labName: string, options?: { filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationServiceRunner>;
    list(resourceGroupName: string, labName: string, callback: ServiceCallback<models.ResponseWithContinuationServiceRunner>): void;
    list(resourceGroupName: string, labName: string, options: { filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationServiceRunner>): void;


    /**
     * Get service runner.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the service runner.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceRunner>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceRunner>>;

    /**
     * Get service runner.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the service runner.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceRunner} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceRunner} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceRunner} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceRunner>;
    get(resourceGroupName: string, labName: string, name: string, callback: ServiceCallback<models.ServiceRunner>): void;
    get(resourceGroupName: string, labName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceRunner>): void;


    /**
     * Create or replace an existing Service runner.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the service runner.
     *
     * @param {object} serviceRunner A container for a managed identity to execute
     * DevTest lab services.
     *
     * @param {object} [serviceRunner.identity] The identity of the resource.
     *
     * @param {string} [serviceRunner.identity.type] Managed identity.
     *
     * @param {string} [serviceRunner.identity.principalId] The principal id of
     * resource identity.
     *
     * @param {string} [serviceRunner.identity.tenantId] The tenant identifier of
     * resource.
     *
     * @param {string} [serviceRunner.identity.clientSecretUrl] The client secret
     * URL of the identity.
     *
     * @param {string} [serviceRunner.location] The location of the resource.
     *
     * @param {object} [serviceRunner.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ServiceRunner>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, serviceRunner: models.ServiceRunner, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ServiceRunner>>;

    /**
     * Create or replace an existing Service runner.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the service runner.
     *
     * @param {object} serviceRunner A container for a managed identity to execute
     * DevTest lab services.
     *
     * @param {object} [serviceRunner.identity] The identity of the resource.
     *
     * @param {string} [serviceRunner.identity.type] Managed identity.
     *
     * @param {string} [serviceRunner.identity.principalId] The principal id of
     * resource identity.
     *
     * @param {string} [serviceRunner.identity.tenantId] The tenant identifier of
     * resource.
     *
     * @param {string} [serviceRunner.identity.clientSecretUrl] The client secret
     * URL of the identity.
     *
     * @param {string} [serviceRunner.location] The location of the resource.
     *
     * @param {object} [serviceRunner.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ServiceRunner} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ServiceRunner} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ServiceRunner} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, labName: string, name: string, serviceRunner: models.ServiceRunner, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ServiceRunner>;
    createOrUpdate(resourceGroupName: string, labName: string, name: string, serviceRunner: models.ServiceRunner, callback: ServiceCallback<models.ServiceRunner>): void;
    createOrUpdate(resourceGroupName: string, labName: string, name: string, serviceRunner: models.ServiceRunner, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ServiceRunner>): void;


    /**
     * Delete service runner.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the service runner.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete service runner.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the service runner.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, labName: string, name: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, labName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * List service runners in a given lab.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationServiceRunner>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationServiceRunner>>;

    /**
     * List service runners in a given lab.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationServiceRunner} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationServiceRunner} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationServiceRunner} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationServiceRunner>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ResponseWithContinuationServiceRunner>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationServiceRunner>): void;
}

/**
 * @class
 * Users
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DevTestLabsClient.
 */
export interface Users {


    /**
     * List user profiles in a given lab.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=identity)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationUser>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, labName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationUser>>;

    /**
     * List user profiles in a given lab.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=identity)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationUser} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationUser} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationUser} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, labName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationUser>;
    list(resourceGroupName: string, labName: string, callback: ServiceCallback<models.ResponseWithContinuationUser>): void;
    list(resourceGroupName: string, labName: string, options: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationUser>): void;


    /**
     * Get user profile.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the user profile.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=identity)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<User>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.User>>;

    /**
     * Get user profile.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the user profile.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=identity)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {User} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {User} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link User} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, labName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.User>;
    get(resourceGroupName: string, labName: string, name: string, callback: ServiceCallback<models.User>): void;
    get(resourceGroupName: string, labName: string, name: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.User>): void;


    /**
     * Create or replace an existing user profile.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the user profile.
     *
     * @param {object} user Profile of a lab user.
     *
     * @param {object} [user.identity] The identity of the user.
     *
     * @param {string} [user.identity.principalName] Set to the principal name /
     * UPN of the client JWT making the request.
     *
     * @param {string} [user.identity.principalId] Set to the principal Id of the
     * client JWT making the request. Service principal will not have the principal
     * Id.
     *
     * @param {string} [user.identity.tenantId] Set to the tenant ID of the client
     * JWT making the request.
     *
     * @param {string} [user.identity.objectId] Set to the object Id of the client
     * JWT making the request. Not all users have object Id. For CSP (reseller)
     * scenarios for example, object Id is not available.
     *
     * @param {string} [user.identity.appId] Set to the app Id of the client JWT
     * making the request.
     *
     * @param {object} [user.secretStore] The secret store of the user.
     *
     * @param {string} [user.secretStore.keyVaultUri] The URI of the user's Key
     * vault.
     *
     * @param {string} [user.secretStore.keyVaultId] The ID of the user's Key
     * vault.
     *
     * @param {string} [user.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [user.uniqueIdentifier] The unique immutable identifier of a
     * resource (Guid).
     *
     * @param {string} [user.location] The location of the resource.
     *
     * @param {object} [user.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<User>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, user: models.User, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.User>>;

    /**
     * Create or replace an existing user profile.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the user profile.
     *
     * @param {object} user Profile of a lab user.
     *
     * @param {object} [user.identity] The identity of the user.
     *
     * @param {string} [user.identity.principalName] Set to the principal name /
     * UPN of the client JWT making the request.
     *
     * @param {string} [user.identity.principalId] Set to the principal Id of the
     * client JWT making the request. Service principal will not have the principal
     * Id.
     *
     * @param {string} [user.identity.tenantId] Set to the tenant ID of the client
     * JWT making the request.
     *
     * @param {string} [user.identity.objectId] Set to the object Id of the client
     * JWT making the request. Not all users have object Id. For CSP (reseller)
     * scenarios for example, object Id is not available.
     *
     * @param {string} [user.identity.appId] Set to the app Id of the client JWT
     * making the request.
     *
     * @param {object} [user.secretStore] The secret store of the user.
     *
     * @param {string} [user.secretStore.keyVaultUri] The URI of the user's Key
     * vault.
     *
     * @param {string} [user.secretStore.keyVaultId] The ID of the user's Key
     * vault.
     *
     * @param {string} [user.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [user.uniqueIdentifier] The unique immutable identifier of a
     * resource (Guid).
     *
     * @param {string} [user.location] The location of the resource.
     *
     * @param {object} [user.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {User} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {User} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link User} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, labName: string, name: string, user: models.User, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.User>;
    createOrUpdate(resourceGroupName: string, labName: string, name: string, user: models.User, callback: ServiceCallback<models.User>): void;
    createOrUpdate(resourceGroupName: string, labName: string, name: string, user: models.User, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.User>): void;


    /**
     * Delete user profile. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the user profile.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete user profile. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the user profile.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, labName: string, name: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, labName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Modify properties of user profiles.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the user profile.
     *
     * @param {object} user Profile of a lab user.
     *
     * @param {object} [user.identity] The identity of the user.
     *
     * @param {string} [user.identity.principalName] Set to the principal name /
     * UPN of the client JWT making the request.
     *
     * @param {string} [user.identity.principalId] Set to the principal Id of the
     * client JWT making the request. Service principal will not have the principal
     * Id.
     *
     * @param {string} [user.identity.tenantId] Set to the tenant ID of the client
     * JWT making the request.
     *
     * @param {string} [user.identity.objectId] Set to the object Id of the client
     * JWT making the request. Not all users have object Id. For CSP (reseller)
     * scenarios for example, object Id is not available.
     *
     * @param {string} [user.identity.appId] Set to the app Id of the client JWT
     * making the request.
     *
     * @param {object} [user.secretStore] The secret store of the user.
     *
     * @param {string} [user.secretStore.keyVaultUri] The URI of the user's Key
     * vault.
     *
     * @param {string} [user.secretStore.keyVaultId] The ID of the user's Key
     * vault.
     *
     * @param {string} [user.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [user.uniqueIdentifier] The unique immutable identifier of a
     * resource (Guid).
     *
     * @param {string} [user.location] The location of the resource.
     *
     * @param {object} [user.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<User>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, user: models.UserFragment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.User>>;

    /**
     * Modify properties of user profiles.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the user profile.
     *
     * @param {object} user Profile of a lab user.
     *
     * @param {object} [user.identity] The identity of the user.
     *
     * @param {string} [user.identity.principalName] Set to the principal name /
     * UPN of the client JWT making the request.
     *
     * @param {string} [user.identity.principalId] Set to the principal Id of the
     * client JWT making the request. Service principal will not have the principal
     * Id.
     *
     * @param {string} [user.identity.tenantId] Set to the tenant ID of the client
     * JWT making the request.
     *
     * @param {string} [user.identity.objectId] Set to the object Id of the client
     * JWT making the request. Not all users have object Id. For CSP (reseller)
     * scenarios for example, object Id is not available.
     *
     * @param {string} [user.identity.appId] Set to the app Id of the client JWT
     * making the request.
     *
     * @param {object} [user.secretStore] The secret store of the user.
     *
     * @param {string} [user.secretStore.keyVaultUri] The URI of the user's Key
     * vault.
     *
     * @param {string} [user.secretStore.keyVaultId] The ID of the user's Key
     * vault.
     *
     * @param {string} [user.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [user.uniqueIdentifier] The unique immutable identifier of a
     * resource (Guid).
     *
     * @param {string} [user.location] The location of the resource.
     *
     * @param {object} [user.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {User} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {User} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link User} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, labName: string, name: string, user: models.UserFragment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.User>;
    update(resourceGroupName: string, labName: string, name: string, user: models.UserFragment, callback: ServiceCallback<models.User>): void;
    update(resourceGroupName: string, labName: string, name: string, user: models.UserFragment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.User>): void;


    /**
     * Delete user profile. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the user profile.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete user profile. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the user profile.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, labName: string, name: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, labName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * List user profiles in a given lab.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationUser>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationUser>>;

    /**
     * List user profiles in a given lab.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationUser} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationUser} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationUser} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationUser>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ResponseWithContinuationUser>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationUser>): void;
}

/**
 * @class
 * Disks
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DevTestLabsClient.
 */
export interface Disks {


    /**
     * List disks in a given user profile.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=diskType)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationDisk>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, labName: string, userName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationDisk>>;

    /**
     * List disks in a given user profile.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=diskType)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationDisk} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationDisk} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationDisk} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, labName: string, userName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationDisk>;
    list(resourceGroupName: string, labName: string, userName: string, callback: ServiceCallback<models.ResponseWithContinuationDisk>): void;
    list(resourceGroupName: string, labName: string, userName: string, options: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationDisk>): void;


    /**
     * Get disk.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {string} name The name of the disk.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=diskType)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Disk>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, labName: string, userName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Disk>>;

    /**
     * Get disk.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {string} name The name of the disk.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=diskType)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Disk} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Disk} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Disk} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, labName: string, userName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Disk>;
    get(resourceGroupName: string, labName: string, userName: string, name: string, callback: ServiceCallback<models.Disk>): void;
    get(resourceGroupName: string, labName: string, userName: string, name: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Disk>): void;


    /**
     * Create or replace an existing disk. This operation can take a while to
     * complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {string} name The name of the disk.
     *
     * @param {object} disk A Disk.
     *
     * @param {string} [disk.diskType] The storage type for the disk (i.e.
     * Standard, Premium). Possible values include: 'Standard', 'Premium'
     *
     * @param {number} [disk.diskSizeGiB] The size of the disk in GibiBytes.
     *
     * @param {string} [disk.leasedByLabVmId] The resource ID of the VM to which
     * this disk is leased.
     *
     * @param {string} [disk.diskBlobName] When backed by a blob, the name of the
     * VHD blob without extension.
     *
     * @param {string} [disk.diskUri] When backed by a blob, the URI of underlying
     * blob.
     *
     * @param {string} [disk.hostCaching] The host caching policy of the disk (i.e.
     * None, ReadOnly, ReadWrite).
     *
     * @param {string} [disk.managedDiskId] When backed by managed disk, this is
     * the ID of the compute disk resource.
     *
     * @param {string} [disk.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [disk.uniqueIdentifier] The unique immutable identifier of a
     * resource (Guid).
     *
     * @param {string} [disk.location] The location of the resource.
     *
     * @param {object} [disk.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Disk>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, labName: string, userName: string, name: string, disk: models.Disk, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Disk>>;

    /**
     * Create or replace an existing disk. This operation can take a while to
     * complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {string} name The name of the disk.
     *
     * @param {object} disk A Disk.
     *
     * @param {string} [disk.diskType] The storage type for the disk (i.e.
     * Standard, Premium). Possible values include: 'Standard', 'Premium'
     *
     * @param {number} [disk.diskSizeGiB] The size of the disk in GibiBytes.
     *
     * @param {string} [disk.leasedByLabVmId] The resource ID of the VM to which
     * this disk is leased.
     *
     * @param {string} [disk.diskBlobName] When backed by a blob, the name of the
     * VHD blob without extension.
     *
     * @param {string} [disk.diskUri] When backed by a blob, the URI of underlying
     * blob.
     *
     * @param {string} [disk.hostCaching] The host caching policy of the disk (i.e.
     * None, ReadOnly, ReadWrite).
     *
     * @param {string} [disk.managedDiskId] When backed by managed disk, this is
     * the ID of the compute disk resource.
     *
     * @param {string} [disk.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [disk.uniqueIdentifier] The unique immutable identifier of a
     * resource (Guid).
     *
     * @param {string} [disk.location] The location of the resource.
     *
     * @param {object} [disk.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Disk} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Disk} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Disk} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, labName: string, userName: string, name: string, disk: models.Disk, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Disk>;
    createOrUpdate(resourceGroupName: string, labName: string, userName: string, name: string, disk: models.Disk, callback: ServiceCallback<models.Disk>): void;
    createOrUpdate(resourceGroupName: string, labName: string, userName: string, name: string, disk: models.Disk, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Disk>): void;


    /**
     * Delete disk. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {string} name The name of the disk.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, labName: string, userName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete disk. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {string} name The name of the disk.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, labName: string, userName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, labName: string, userName: string, name: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, labName: string, userName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Attach and create the lease of the disk to the virtual machine. This
     * operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {string} name The name of the disk.
     *
     * @param {object} attachDiskProperties Properties of the disk to attach.
     *
     * @param {string} [attachDiskProperties.leasedByLabVmId] The resource ID of
     * the Lab virtual machine to which the disk is attached.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    attachWithHttpOperationResponse(resourceGroupName: string, labName: string, userName: string, name: string, attachDiskProperties: models.AttachDiskProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Attach and create the lease of the disk to the virtual machine. This
     * operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {string} name The name of the disk.
     *
     * @param {object} attachDiskProperties Properties of the disk to attach.
     *
     * @param {string} [attachDiskProperties.leasedByLabVmId] The resource ID of
     * the Lab virtual machine to which the disk is attached.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    attach(resourceGroupName: string, labName: string, userName: string, name: string, attachDiskProperties: models.AttachDiskProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    attach(resourceGroupName: string, labName: string, userName: string, name: string, attachDiskProperties: models.AttachDiskProperties, callback: ServiceCallback<void>): void;
    attach(resourceGroupName: string, labName: string, userName: string, name: string, attachDiskProperties: models.AttachDiskProperties, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Detach and break the lease of the disk attached to the virtual machine. This
     * operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {string} name The name of the disk.
     *
     * @param {object} detachDiskProperties Properties of the disk to detach.
     *
     * @param {string} [detachDiskProperties.leasedByLabVmId] The resource ID of
     * the Lab VM to which the disk is attached.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    detachWithHttpOperationResponse(resourceGroupName: string, labName: string, userName: string, name: string, detachDiskProperties: models.DetachDiskProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Detach and break the lease of the disk attached to the virtual machine. This
     * operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {string} name The name of the disk.
     *
     * @param {object} detachDiskProperties Properties of the disk to detach.
     *
     * @param {string} [detachDiskProperties.leasedByLabVmId] The resource ID of
     * the Lab VM to which the disk is attached.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    detach(resourceGroupName: string, labName: string, userName: string, name: string, detachDiskProperties: models.DetachDiskProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    detach(resourceGroupName: string, labName: string, userName: string, name: string, detachDiskProperties: models.DetachDiskProperties, callback: ServiceCallback<void>): void;
    detach(resourceGroupName: string, labName: string, userName: string, name: string, detachDiskProperties: models.DetachDiskProperties, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Create or replace an existing disk. This operation can take a while to
     * complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {string} name The name of the disk.
     *
     * @param {object} disk A Disk.
     *
     * @param {string} [disk.diskType] The storage type for the disk (i.e.
     * Standard, Premium). Possible values include: 'Standard', 'Premium'
     *
     * @param {number} [disk.diskSizeGiB] The size of the disk in GibiBytes.
     *
     * @param {string} [disk.leasedByLabVmId] The resource ID of the VM to which
     * this disk is leased.
     *
     * @param {string} [disk.diskBlobName] When backed by a blob, the name of the
     * VHD blob without extension.
     *
     * @param {string} [disk.diskUri] When backed by a blob, the URI of underlying
     * blob.
     *
     * @param {string} [disk.hostCaching] The host caching policy of the disk (i.e.
     * None, ReadOnly, ReadWrite).
     *
     * @param {string} [disk.managedDiskId] When backed by managed disk, this is
     * the ID of the compute disk resource.
     *
     * @param {string} [disk.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [disk.uniqueIdentifier] The unique immutable identifier of a
     * resource (Guid).
     *
     * @param {string} [disk.location] The location of the resource.
     *
     * @param {object} [disk.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Disk>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, labName: string, userName: string, name: string, disk: models.Disk, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Disk>>;

    /**
     * Create or replace an existing disk. This operation can take a while to
     * complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {string} name The name of the disk.
     *
     * @param {object} disk A Disk.
     *
     * @param {string} [disk.diskType] The storage type for the disk (i.e.
     * Standard, Premium). Possible values include: 'Standard', 'Premium'
     *
     * @param {number} [disk.diskSizeGiB] The size of the disk in GibiBytes.
     *
     * @param {string} [disk.leasedByLabVmId] The resource ID of the VM to which
     * this disk is leased.
     *
     * @param {string} [disk.diskBlobName] When backed by a blob, the name of the
     * VHD blob without extension.
     *
     * @param {string} [disk.diskUri] When backed by a blob, the URI of underlying
     * blob.
     *
     * @param {string} [disk.hostCaching] The host caching policy of the disk (i.e.
     * None, ReadOnly, ReadWrite).
     *
     * @param {string} [disk.managedDiskId] When backed by managed disk, this is
     * the ID of the compute disk resource.
     *
     * @param {string} [disk.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [disk.uniqueIdentifier] The unique immutable identifier of a
     * resource (Guid).
     *
     * @param {string} [disk.location] The location of the resource.
     *
     * @param {object} [disk.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Disk} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Disk} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Disk} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, labName: string, userName: string, name: string, disk: models.Disk, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Disk>;
    beginCreateOrUpdate(resourceGroupName: string, labName: string, userName: string, name: string, disk: models.Disk, callback: ServiceCallback<models.Disk>): void;
    beginCreateOrUpdate(resourceGroupName: string, labName: string, userName: string, name: string, disk: models.Disk, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Disk>): void;


    /**
     * Delete disk. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {string} name The name of the disk.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, labName: string, userName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete disk. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {string} name The name of the disk.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, labName: string, userName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, labName: string, userName: string, name: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, labName: string, userName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Attach and create the lease of the disk to the virtual machine. This
     * operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {string} name The name of the disk.
     *
     * @param {object} attachDiskProperties Properties of the disk to attach.
     *
     * @param {string} [attachDiskProperties.leasedByLabVmId] The resource ID of
     * the Lab virtual machine to which the disk is attached.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginAttachWithHttpOperationResponse(resourceGroupName: string, labName: string, userName: string, name: string, attachDiskProperties: models.AttachDiskProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Attach and create the lease of the disk to the virtual machine. This
     * operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {string} name The name of the disk.
     *
     * @param {object} attachDiskProperties Properties of the disk to attach.
     *
     * @param {string} [attachDiskProperties.leasedByLabVmId] The resource ID of
     * the Lab virtual machine to which the disk is attached.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginAttach(resourceGroupName: string, labName: string, userName: string, name: string, attachDiskProperties: models.AttachDiskProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginAttach(resourceGroupName: string, labName: string, userName: string, name: string, attachDiskProperties: models.AttachDiskProperties, callback: ServiceCallback<void>): void;
    beginAttach(resourceGroupName: string, labName: string, userName: string, name: string, attachDiskProperties: models.AttachDiskProperties, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Detach and break the lease of the disk attached to the virtual machine. This
     * operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {string} name The name of the disk.
     *
     * @param {object} detachDiskProperties Properties of the disk to detach.
     *
     * @param {string} [detachDiskProperties.leasedByLabVmId] The resource ID of
     * the Lab VM to which the disk is attached.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDetachWithHttpOperationResponse(resourceGroupName: string, labName: string, userName: string, name: string, detachDiskProperties: models.DetachDiskProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Detach and break the lease of the disk attached to the virtual machine. This
     * operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {string} name The name of the disk.
     *
     * @param {object} detachDiskProperties Properties of the disk to detach.
     *
     * @param {string} [detachDiskProperties.leasedByLabVmId] The resource ID of
     * the Lab VM to which the disk is attached.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDetach(resourceGroupName: string, labName: string, userName: string, name: string, detachDiskProperties: models.DetachDiskProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDetach(resourceGroupName: string, labName: string, userName: string, name: string, detachDiskProperties: models.DetachDiskProperties, callback: ServiceCallback<void>): void;
    beginDetach(resourceGroupName: string, labName: string, userName: string, name: string, detachDiskProperties: models.DetachDiskProperties, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * List disks in a given user profile.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationDisk>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationDisk>>;

    /**
     * List disks in a given user profile.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationDisk} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationDisk} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationDisk} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationDisk>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ResponseWithContinuationDisk>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationDisk>): void;
}

/**
 * @class
 * Environments
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DevTestLabsClient.
 */
export interface Environments {


    /**
     * List environments in a given user profile.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=deploymentProperties)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationDtlEnvironment>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, labName: string, userName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationDtlEnvironment>>;

    /**
     * List environments in a given user profile.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=deploymentProperties)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationDtlEnvironment} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationDtlEnvironment} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationDtlEnvironment} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, labName: string, userName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationDtlEnvironment>;
    list(resourceGroupName: string, labName: string, userName: string, callback: ServiceCallback<models.ResponseWithContinuationDtlEnvironment>): void;
    list(resourceGroupName: string, labName: string, userName: string, options: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationDtlEnvironment>): void;


    /**
     * Get environment.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {string} name The name of the environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=deploymentProperties)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DtlEnvironment>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, labName: string, userName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DtlEnvironment>>;

    /**
     * Get environment.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {string} name The name of the environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=deploymentProperties)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DtlEnvironment} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DtlEnvironment} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DtlEnvironment} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, labName: string, userName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.DtlEnvironment>;
    get(resourceGroupName: string, labName: string, userName: string, name: string, callback: ServiceCallback<models.DtlEnvironment>): void;
    get(resourceGroupName: string, labName: string, userName: string, name: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DtlEnvironment>): void;


    /**
     * Create or replace an existing environment. This operation can take a while
     * to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {string} name The name of the environment.
     *
     * @param {object} dtlEnvironment An environment, which is essentially an ARM
     * template deployment.
     *
     * @param {object} [dtlEnvironment.deploymentProperties] The deployment
     * properties of the environment.
     *
     * @param {string} [dtlEnvironment.deploymentProperties.armTemplateId] The
     * Azure Resource Manager template's identifier.
     *
     * @param {array} [dtlEnvironment.deploymentProperties.parameters] The
     * parameters of the Azure Resource Manager template.
     *
     * @param {string} [dtlEnvironment.armTemplateDisplayName] The display name of
     * the Azure Resource Manager template that produced the environment.
     *
     * @param {string} [dtlEnvironment.provisioningState] The provisioning status
     * of the resource.
     *
     * @param {string} [dtlEnvironment.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [dtlEnvironment.location] The location of the resource.
     *
     * @param {object} [dtlEnvironment.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DtlEnvironment>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, labName: string, userName: string, name: string, dtlEnvironment: models.DtlEnvironment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DtlEnvironment>>;

    /**
     * Create or replace an existing environment. This operation can take a while
     * to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {string} name The name of the environment.
     *
     * @param {object} dtlEnvironment An environment, which is essentially an ARM
     * template deployment.
     *
     * @param {object} [dtlEnvironment.deploymentProperties] The deployment
     * properties of the environment.
     *
     * @param {string} [dtlEnvironment.deploymentProperties.armTemplateId] The
     * Azure Resource Manager template's identifier.
     *
     * @param {array} [dtlEnvironment.deploymentProperties.parameters] The
     * parameters of the Azure Resource Manager template.
     *
     * @param {string} [dtlEnvironment.armTemplateDisplayName] The display name of
     * the Azure Resource Manager template that produced the environment.
     *
     * @param {string} [dtlEnvironment.provisioningState] The provisioning status
     * of the resource.
     *
     * @param {string} [dtlEnvironment.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [dtlEnvironment.location] The location of the resource.
     *
     * @param {object} [dtlEnvironment.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DtlEnvironment} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DtlEnvironment} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DtlEnvironment} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, labName: string, userName: string, name: string, dtlEnvironment: models.DtlEnvironment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DtlEnvironment>;
    createOrUpdate(resourceGroupName: string, labName: string, userName: string, name: string, dtlEnvironment: models.DtlEnvironment, callback: ServiceCallback<models.DtlEnvironment>): void;
    createOrUpdate(resourceGroupName: string, labName: string, userName: string, name: string, dtlEnvironment: models.DtlEnvironment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DtlEnvironment>): void;


    /**
     * Delete environment. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {string} name The name of the environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, labName: string, userName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete environment. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {string} name The name of the environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, labName: string, userName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, labName: string, userName: string, name: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, labName: string, userName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Create or replace an existing environment. This operation can take a while
     * to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {string} name The name of the environment.
     *
     * @param {object} dtlEnvironment An environment, which is essentially an ARM
     * template deployment.
     *
     * @param {object} [dtlEnvironment.deploymentProperties] The deployment
     * properties of the environment.
     *
     * @param {string} [dtlEnvironment.deploymentProperties.armTemplateId] The
     * Azure Resource Manager template's identifier.
     *
     * @param {array} [dtlEnvironment.deploymentProperties.parameters] The
     * parameters of the Azure Resource Manager template.
     *
     * @param {string} [dtlEnvironment.armTemplateDisplayName] The display name of
     * the Azure Resource Manager template that produced the environment.
     *
     * @param {string} [dtlEnvironment.provisioningState] The provisioning status
     * of the resource.
     *
     * @param {string} [dtlEnvironment.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [dtlEnvironment.location] The location of the resource.
     *
     * @param {object} [dtlEnvironment.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<DtlEnvironment>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, labName: string, userName: string, name: string, dtlEnvironment: models.DtlEnvironment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DtlEnvironment>>;

    /**
     * Create or replace an existing environment. This operation can take a while
     * to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {string} name The name of the environment.
     *
     * @param {object} dtlEnvironment An environment, which is essentially an ARM
     * template deployment.
     *
     * @param {object} [dtlEnvironment.deploymentProperties] The deployment
     * properties of the environment.
     *
     * @param {string} [dtlEnvironment.deploymentProperties.armTemplateId] The
     * Azure Resource Manager template's identifier.
     *
     * @param {array} [dtlEnvironment.deploymentProperties.parameters] The
     * parameters of the Azure Resource Manager template.
     *
     * @param {string} [dtlEnvironment.armTemplateDisplayName] The display name of
     * the Azure Resource Manager template that produced the environment.
     *
     * @param {string} [dtlEnvironment.provisioningState] The provisioning status
     * of the resource.
     *
     * @param {string} [dtlEnvironment.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [dtlEnvironment.location] The location of the resource.
     *
     * @param {object} [dtlEnvironment.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {DtlEnvironment} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {DtlEnvironment} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link DtlEnvironment} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, labName: string, userName: string, name: string, dtlEnvironment: models.DtlEnvironment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.DtlEnvironment>;
    beginCreateOrUpdate(resourceGroupName: string, labName: string, userName: string, name: string, dtlEnvironment: models.DtlEnvironment, callback: ServiceCallback<models.DtlEnvironment>): void;
    beginCreateOrUpdate(resourceGroupName: string, labName: string, userName: string, name: string, dtlEnvironment: models.DtlEnvironment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DtlEnvironment>): void;


    /**
     * Delete environment. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {string} name The name of the environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, labName: string, userName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete environment. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {string} name The name of the environment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, labName: string, userName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, labName: string, userName: string, name: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, labName: string, userName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * List environments in a given user profile.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationDtlEnvironment>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationDtlEnvironment>>;

    /**
     * List environments in a given user profile.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationDtlEnvironment} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationDtlEnvironment} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationDtlEnvironment} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationDtlEnvironment>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ResponseWithContinuationDtlEnvironment>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationDtlEnvironment>): void;
}

/**
 * @class
 * Secrets
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DevTestLabsClient.
 */
export interface Secrets {


    /**
     * List secrets in a given user profile.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=value)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationSecret>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, labName: string, userName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationSecret>>;

    /**
     * List secrets in a given user profile.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=value)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationSecret} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationSecret} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationSecret} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, labName: string, userName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationSecret>;
    list(resourceGroupName: string, labName: string, userName: string, callback: ServiceCallback<models.ResponseWithContinuationSecret>): void;
    list(resourceGroupName: string, labName: string, userName: string, options: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationSecret>): void;


    /**
     * Get secret.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {string} name The name of the secret.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=value)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Secret>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, labName: string, userName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Secret>>;

    /**
     * Get secret.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {string} name The name of the secret.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=value)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Secret} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Secret} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Secret} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, labName: string, userName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Secret>;
    get(resourceGroupName: string, labName: string, userName: string, name: string, callback: ServiceCallback<models.Secret>): void;
    get(resourceGroupName: string, labName: string, userName: string, name: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Secret>): void;


    /**
     * Create or replace an existing secret.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {string} name The name of the secret.
     *
     * @param {object} secret A secret.
     *
     * @param {string} [secret.value] The value of the secret for secret creation.
     *
     * @param {string} [secret.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [secret.uniqueIdentifier] The unique immutable identifier of
     * a resource (Guid).
     *
     * @param {string} [secret.location] The location of the resource.
     *
     * @param {object} [secret.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Secret>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, labName: string, userName: string, name: string, secret: models.Secret, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Secret>>;

    /**
     * Create or replace an existing secret.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {string} name The name of the secret.
     *
     * @param {object} secret A secret.
     *
     * @param {string} [secret.value] The value of the secret for secret creation.
     *
     * @param {string} [secret.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [secret.uniqueIdentifier] The unique immutable identifier of
     * a resource (Guid).
     *
     * @param {string} [secret.location] The location of the resource.
     *
     * @param {object} [secret.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Secret} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Secret} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Secret} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, labName: string, userName: string, name: string, secret: models.Secret, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Secret>;
    createOrUpdate(resourceGroupName: string, labName: string, userName: string, name: string, secret: models.Secret, callback: ServiceCallback<models.Secret>): void;
    createOrUpdate(resourceGroupName: string, labName: string, userName: string, name: string, secret: models.Secret, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Secret>): void;


    /**
     * Delete secret.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {string} name The name of the secret.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, labName: string, userName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete secret.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} userName The name of the user profile.
     *
     * @param {string} name The name of the secret.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, labName: string, userName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, labName: string, userName: string, name: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, labName: string, userName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * List secrets in a given user profile.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationSecret>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationSecret>>;

    /**
     * List secrets in a given user profile.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationSecret} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationSecret} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationSecret} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationSecret>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ResponseWithContinuationSecret>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationSecret>): void;
}

/**
 * @class
 * VirtualMachines
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DevTestLabsClient.
 */
export interface VirtualMachines {


    /**
     * List virtual machines in a given lab.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($expand=artifacts,computeVm,networkInterface,applicableSchedule)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationLabVirtualMachine>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, labName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationLabVirtualMachine>>;

    /**
     * List virtual machines in a given lab.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($expand=artifacts,computeVm,networkInterface,applicableSchedule)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationLabVirtualMachine} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationLabVirtualMachine} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationLabVirtualMachine}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, labName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationLabVirtualMachine>;
    list(resourceGroupName: string, labName: string, callback: ServiceCallback<models.ResponseWithContinuationLabVirtualMachine>): void;
    list(resourceGroupName: string, labName: string, options: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationLabVirtualMachine>): void;


    /**
     * Get virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($expand=artifacts,computeVm,networkInterface,applicableSchedule)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LabVirtualMachine>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LabVirtualMachine>>;

    /**
     * Get virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($expand=artifacts,computeVm,networkInterface,applicableSchedule)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LabVirtualMachine} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LabVirtualMachine} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LabVirtualMachine} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, labName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.LabVirtualMachine>;
    get(resourceGroupName: string, labName: string, name: string, callback: ServiceCallback<models.LabVirtualMachine>): void;
    get(resourceGroupName: string, labName: string, name: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LabVirtualMachine>): void;


    /**
     * Create or replace an existing Virtual machine. This operation can take a
     * while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} labVirtualMachine A virtual machine.
     *
     * @param {string} [labVirtualMachine.notes] The notes of the virtual machine.
     *
     * @param {string} [labVirtualMachine.ownerObjectId] The object identifier of
     * the owner of the virtual machine.
     *
     * @param {string} [labVirtualMachine.ownerUserPrincipalName] The user
     * principal name of the virtual machine owner.
     *
     * @param {string} [labVirtualMachine.createdByUserId] The object identifier of
     * the creator of the virtual machine.
     *
     * @param {string} [labVirtualMachine.createdByUser] The email address of
     * creator of the virtual machine.
     *
     * @param {date} [labVirtualMachine.createdDate] The creation date of the
     * virtual machine.
     *
     * @param {string} [labVirtualMachine.customImageId] The custom image
     * identifier of the virtual machine.
     *
     * @param {string} [labVirtualMachine.osType] The OS type of the virtual
     * machine.
     *
     * @param {string} [labVirtualMachine.size] The size of the virtual machine.
     *
     * @param {string} [labVirtualMachine.userName] The user name of the virtual
     * machine.
     *
     * @param {string} [labVirtualMachine.password] The password of the virtual
     * machine administrator.
     *
     * @param {string} [labVirtualMachine.sshKey] The SSH key of the virtual
     * machine administrator.
     *
     * @param {boolean} [labVirtualMachine.isAuthenticationWithSshKey] Indicates
     * whether this virtual machine uses an SSH key for authentication.
     *
     * @param {string} [labVirtualMachine.fqdn] The fully-qualified domain name of
     * the virtual machine.
     *
     * @param {string} [labVirtualMachine.labSubnetName] The lab subnet name of the
     * virtual machine.
     *
     * @param {string} [labVirtualMachine.labVirtualNetworkId] The lab virtual
     * network identifier of the virtual machine.
     *
     * @param {boolean} [labVirtualMachine.disallowPublicIpAddress] Indicates
     * whether the virtual machine is to be created without a public IP address.
     *
     * @param {array} [labVirtualMachine.artifacts] The artifacts to be installed
     * on the virtual machine.
     *
     * @param {object} [labVirtualMachine.artifactDeploymentStatus] The artifact
     * deployment status for the virtual machine.
     *
     * @param {string}
     * [labVirtualMachine.artifactDeploymentStatus.deploymentStatus] The deployment
     * status of the artifact.
     *
     * @param {number}
     * [labVirtualMachine.artifactDeploymentStatus.artifactsApplied] The total
     * count of the artifacts that were successfully applied.
     *
     * @param {number} [labVirtualMachine.artifactDeploymentStatus.totalArtifacts]
     * The total count of the artifacts that were tentatively applied.
     *
     * @param {object} [labVirtualMachine.galleryImageReference] The Microsoft
     * Azure Marketplace image reference of the virtual machine.
     *
     * @param {string} [labVirtualMachine.galleryImageReference.offer] The offer of
     * the gallery image.
     *
     * @param {string} [labVirtualMachine.galleryImageReference.publisher] The
     * publisher of the gallery image.
     *
     * @param {string} [labVirtualMachine.galleryImageReference.sku] The SKU of the
     * gallery image.
     *
     * @param {string} [labVirtualMachine.galleryImageReference.osType] The OS type
     * of the gallery image.
     *
     * @param {string} [labVirtualMachine.galleryImageReference.version] The
     * version of the gallery image.
     *
     * @param {object} [labVirtualMachine.computeVm] The compute virtual machine
     * properties.
     *
     * @param {array} [labVirtualMachine.computeVm.statuses] Gets the statuses of
     * the virtual machine.
     *
     * @param {string} [labVirtualMachine.computeVm.osType] Gets the OS type of the
     * virtual machine.
     *
     * @param {string} [labVirtualMachine.computeVm.vmSize] Gets the size of the
     * virtual machine.
     *
     * @param {string} [labVirtualMachine.computeVm.networkInterfaceId] Gets the
     * network interface ID of the virtual machine.
     *
     * @param {string} [labVirtualMachine.computeVm.osDiskId] Gets OS disk blob uri
     * for the virtual machine.
     *
     * @param {array} [labVirtualMachine.computeVm.dataDiskIds] Gets data disks
     * blob uri for the virtual machine.
     *
     * @param {array} [labVirtualMachine.computeVm.dataDisks] Gets all data disks
     * attached to the virtual machine.
     *
     * @param {object} [labVirtualMachine.networkInterface] The network interface
     * properties.
     *
     * @param {string} [labVirtualMachine.networkInterface.virtualNetworkId] The
     * resource ID of the virtual network.
     *
     * @param {string} [labVirtualMachine.networkInterface.subnetId] The resource
     * ID of the sub net.
     *
     * @param {string} [labVirtualMachine.networkInterface.publicIpAddressId] The
     * resource ID of the public IP address.
     *
     * @param {string} [labVirtualMachine.networkInterface.publicIpAddress] The
     * public IP address.
     *
     * @param {string} [labVirtualMachine.networkInterface.privateIpAddress] The
     * private IP address.
     *
     * @param {string} [labVirtualMachine.networkInterface.dnsName] The DNS name.
     *
     * @param {string} [labVirtualMachine.networkInterface.rdpAuthority] The
     * RdpAuthority property is a server DNS host name or IP address followed by
     * the service port number for RDP (Remote Desktop Protocol).
     *
     * @param {string} [labVirtualMachine.networkInterface.sshAuthority] The
     * SshAuthority property is a server DNS host name or IP address followed by
     * the service port number for SSH.
     *
     * @param {object}
     * [labVirtualMachine.networkInterface.sharedPublicIpAddressConfiguration] The
     * configuration for sharing a public IP address across multiple virtual
     * machines.
     *
     * @param {array}
     * [labVirtualMachine.networkInterface.sharedPublicIpAddressConfiguration.inboundNatRules]
     * The incoming NAT rules
     *
     * @param {object} [labVirtualMachine.applicableSchedule] The applicable
     * schedule for the virtual machine.
     *
     * @param {object} [labVirtualMachine.applicableSchedule.labVmsShutdown] The
     * auto-shutdown schedule, if one has been set at the lab or lab resource
     * level.
     *
     * @param {object} [labVirtualMachine.applicableSchedule.labVmsStartup] The
     * auto-startup schedule, if one has been set at the lab or lab resource level.
     *
     * @param {string} [labVirtualMachine.applicableSchedule.labVmsStartup.status]
     * The status of the schedule (i.e. Enabled, Disabled). Possible values
     * include: 'Enabled', 'Disabled'
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.taskType] The task type
     * of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
     *
     * @param {object}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.weeklyRecurrence] If the
     * schedule will occur only some days of the week, specify the weekly
     * recurrence.
     *
     * @param {array}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.weeklyRecurrence.weekdays]
     * The days of the week for which the schedule is set (e.g. Sunday, Monday,
     * Tuesday, etc.).
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.weeklyRecurrence.time]
     * The time of the day the schedule will occur.
     *
     * @param {object}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.dailyRecurrence] If the
     * schedule will occur once each day of the week, specify the daily recurrence.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.dailyRecurrence.time]
     * The time of day the schedule will occur.
     *
     * @param {object}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.hourlyRecurrence] If the
     * schedule will occur multiple times a day, specify the hourly recurrence.
     *
     * @param {number}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.hourlyRecurrence.minute]
     * Minutes of the hour the schedule will run.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.timeZoneId] The time
     * zone ID (e.g. Pacific Standard time).
     *
     * @param {object}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.notificationSettings]
     * Notification settings.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.notificationSettings.status]
     * If notifications are enabled for this schedule (i.e. Enabled, Disabled).
     * Possible values include: 'Disabled', 'Enabled'
     *
     * @param {number}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.notificationSettings.timeInMinutes]
     * Time in minutes before event at which notification will be sent.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.notificationSettings.webhookUrl]
     * The webhook URL to which the notification will be sent.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.targetResourceId] The
     * resource ID to which the schedule belongs
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.provisioningState] The
     * provisioning status of the resource.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.uniqueIdentifier] The
     * unique immutable identifier of a resource (Guid).
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.location] The location
     * of the resource.
     *
     * @param {object} [labVirtualMachine.applicableSchedule.labVmsStartup.tags]
     * The tags of the resource.
     *
     * @param {string} [labVirtualMachine.applicableSchedule.location] The location
     * of the resource.
     *
     * @param {object} [labVirtualMachine.applicableSchedule.tags] The tags of the
     * resource.
     *
     * @param {date} [labVirtualMachine.expirationDate] The expiration date for VM.
     *
     * @param {boolean} [labVirtualMachine.allowClaim] Indicates whether another
     * user can take ownership of the virtual machine
     *
     * @param {string} [labVirtualMachine.storageType] Storage type to use for
     * virtual machine (i.e. Standard, Premium).
     *
     * @param {string} [labVirtualMachine.virtualMachineCreationSource] Tells
     * source of creation of lab virtual machine. Output property only. Possible
     * values include: 'FromCustomImage', 'FromGalleryImage'
     *
     * @param {string} [labVirtualMachine.environmentId] The resource ID of the
     * environment that contains this virtual machine, if any.
     *
     * @param {string} [labVirtualMachine.provisioningState] The provisioning
     * status of the resource.
     *
     * @param {string} [labVirtualMachine.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [labVirtualMachine.location] The location of the resource.
     *
     * @param {object} [labVirtualMachine.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LabVirtualMachine>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, labVirtualMachine: models.LabVirtualMachine, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LabVirtualMachine>>;

    /**
     * Create or replace an existing Virtual machine. This operation can take a
     * while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} labVirtualMachine A virtual machine.
     *
     * @param {string} [labVirtualMachine.notes] The notes of the virtual machine.
     *
     * @param {string} [labVirtualMachine.ownerObjectId] The object identifier of
     * the owner of the virtual machine.
     *
     * @param {string} [labVirtualMachine.ownerUserPrincipalName] The user
     * principal name of the virtual machine owner.
     *
     * @param {string} [labVirtualMachine.createdByUserId] The object identifier of
     * the creator of the virtual machine.
     *
     * @param {string} [labVirtualMachine.createdByUser] The email address of
     * creator of the virtual machine.
     *
     * @param {date} [labVirtualMachine.createdDate] The creation date of the
     * virtual machine.
     *
     * @param {string} [labVirtualMachine.customImageId] The custom image
     * identifier of the virtual machine.
     *
     * @param {string} [labVirtualMachine.osType] The OS type of the virtual
     * machine.
     *
     * @param {string} [labVirtualMachine.size] The size of the virtual machine.
     *
     * @param {string} [labVirtualMachine.userName] The user name of the virtual
     * machine.
     *
     * @param {string} [labVirtualMachine.password] The password of the virtual
     * machine administrator.
     *
     * @param {string} [labVirtualMachine.sshKey] The SSH key of the virtual
     * machine administrator.
     *
     * @param {boolean} [labVirtualMachine.isAuthenticationWithSshKey] Indicates
     * whether this virtual machine uses an SSH key for authentication.
     *
     * @param {string} [labVirtualMachine.fqdn] The fully-qualified domain name of
     * the virtual machine.
     *
     * @param {string} [labVirtualMachine.labSubnetName] The lab subnet name of the
     * virtual machine.
     *
     * @param {string} [labVirtualMachine.labVirtualNetworkId] The lab virtual
     * network identifier of the virtual machine.
     *
     * @param {boolean} [labVirtualMachine.disallowPublicIpAddress] Indicates
     * whether the virtual machine is to be created without a public IP address.
     *
     * @param {array} [labVirtualMachine.artifacts] The artifacts to be installed
     * on the virtual machine.
     *
     * @param {object} [labVirtualMachine.artifactDeploymentStatus] The artifact
     * deployment status for the virtual machine.
     *
     * @param {string}
     * [labVirtualMachine.artifactDeploymentStatus.deploymentStatus] The deployment
     * status of the artifact.
     *
     * @param {number}
     * [labVirtualMachine.artifactDeploymentStatus.artifactsApplied] The total
     * count of the artifacts that were successfully applied.
     *
     * @param {number} [labVirtualMachine.artifactDeploymentStatus.totalArtifacts]
     * The total count of the artifacts that were tentatively applied.
     *
     * @param {object} [labVirtualMachine.galleryImageReference] The Microsoft
     * Azure Marketplace image reference of the virtual machine.
     *
     * @param {string} [labVirtualMachine.galleryImageReference.offer] The offer of
     * the gallery image.
     *
     * @param {string} [labVirtualMachine.galleryImageReference.publisher] The
     * publisher of the gallery image.
     *
     * @param {string} [labVirtualMachine.galleryImageReference.sku] The SKU of the
     * gallery image.
     *
     * @param {string} [labVirtualMachine.galleryImageReference.osType] The OS type
     * of the gallery image.
     *
     * @param {string} [labVirtualMachine.galleryImageReference.version] The
     * version of the gallery image.
     *
     * @param {object} [labVirtualMachine.computeVm] The compute virtual machine
     * properties.
     *
     * @param {array} [labVirtualMachine.computeVm.statuses] Gets the statuses of
     * the virtual machine.
     *
     * @param {string} [labVirtualMachine.computeVm.osType] Gets the OS type of the
     * virtual machine.
     *
     * @param {string} [labVirtualMachine.computeVm.vmSize] Gets the size of the
     * virtual machine.
     *
     * @param {string} [labVirtualMachine.computeVm.networkInterfaceId] Gets the
     * network interface ID of the virtual machine.
     *
     * @param {string} [labVirtualMachine.computeVm.osDiskId] Gets OS disk blob uri
     * for the virtual machine.
     *
     * @param {array} [labVirtualMachine.computeVm.dataDiskIds] Gets data disks
     * blob uri for the virtual machine.
     *
     * @param {array} [labVirtualMachine.computeVm.dataDisks] Gets all data disks
     * attached to the virtual machine.
     *
     * @param {object} [labVirtualMachine.networkInterface] The network interface
     * properties.
     *
     * @param {string} [labVirtualMachine.networkInterface.virtualNetworkId] The
     * resource ID of the virtual network.
     *
     * @param {string} [labVirtualMachine.networkInterface.subnetId] The resource
     * ID of the sub net.
     *
     * @param {string} [labVirtualMachine.networkInterface.publicIpAddressId] The
     * resource ID of the public IP address.
     *
     * @param {string} [labVirtualMachine.networkInterface.publicIpAddress] The
     * public IP address.
     *
     * @param {string} [labVirtualMachine.networkInterface.privateIpAddress] The
     * private IP address.
     *
     * @param {string} [labVirtualMachine.networkInterface.dnsName] The DNS name.
     *
     * @param {string} [labVirtualMachine.networkInterface.rdpAuthority] The
     * RdpAuthority property is a server DNS host name or IP address followed by
     * the service port number for RDP (Remote Desktop Protocol).
     *
     * @param {string} [labVirtualMachine.networkInterface.sshAuthority] The
     * SshAuthority property is a server DNS host name or IP address followed by
     * the service port number for SSH.
     *
     * @param {object}
     * [labVirtualMachine.networkInterface.sharedPublicIpAddressConfiguration] The
     * configuration for sharing a public IP address across multiple virtual
     * machines.
     *
     * @param {array}
     * [labVirtualMachine.networkInterface.sharedPublicIpAddressConfiguration.inboundNatRules]
     * The incoming NAT rules
     *
     * @param {object} [labVirtualMachine.applicableSchedule] The applicable
     * schedule for the virtual machine.
     *
     * @param {object} [labVirtualMachine.applicableSchedule.labVmsShutdown] The
     * auto-shutdown schedule, if one has been set at the lab or lab resource
     * level.
     *
     * @param {object} [labVirtualMachine.applicableSchedule.labVmsStartup] The
     * auto-startup schedule, if one has been set at the lab or lab resource level.
     *
     * @param {string} [labVirtualMachine.applicableSchedule.labVmsStartup.status]
     * The status of the schedule (i.e. Enabled, Disabled). Possible values
     * include: 'Enabled', 'Disabled'
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.taskType] The task type
     * of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
     *
     * @param {object}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.weeklyRecurrence] If the
     * schedule will occur only some days of the week, specify the weekly
     * recurrence.
     *
     * @param {array}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.weeklyRecurrence.weekdays]
     * The days of the week for which the schedule is set (e.g. Sunday, Monday,
     * Tuesday, etc.).
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.weeklyRecurrence.time]
     * The time of the day the schedule will occur.
     *
     * @param {object}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.dailyRecurrence] If the
     * schedule will occur once each day of the week, specify the daily recurrence.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.dailyRecurrence.time]
     * The time of day the schedule will occur.
     *
     * @param {object}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.hourlyRecurrence] If the
     * schedule will occur multiple times a day, specify the hourly recurrence.
     *
     * @param {number}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.hourlyRecurrence.minute]
     * Minutes of the hour the schedule will run.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.timeZoneId] The time
     * zone ID (e.g. Pacific Standard time).
     *
     * @param {object}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.notificationSettings]
     * Notification settings.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.notificationSettings.status]
     * If notifications are enabled for this schedule (i.e. Enabled, Disabled).
     * Possible values include: 'Disabled', 'Enabled'
     *
     * @param {number}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.notificationSettings.timeInMinutes]
     * Time in minutes before event at which notification will be sent.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.notificationSettings.webhookUrl]
     * The webhook URL to which the notification will be sent.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.targetResourceId] The
     * resource ID to which the schedule belongs
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.provisioningState] The
     * provisioning status of the resource.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.uniqueIdentifier] The
     * unique immutable identifier of a resource (Guid).
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.location] The location
     * of the resource.
     *
     * @param {object} [labVirtualMachine.applicableSchedule.labVmsStartup.tags]
     * The tags of the resource.
     *
     * @param {string} [labVirtualMachine.applicableSchedule.location] The location
     * of the resource.
     *
     * @param {object} [labVirtualMachine.applicableSchedule.tags] The tags of the
     * resource.
     *
     * @param {date} [labVirtualMachine.expirationDate] The expiration date for VM.
     *
     * @param {boolean} [labVirtualMachine.allowClaim] Indicates whether another
     * user can take ownership of the virtual machine
     *
     * @param {string} [labVirtualMachine.storageType] Storage type to use for
     * virtual machine (i.e. Standard, Premium).
     *
     * @param {string} [labVirtualMachine.virtualMachineCreationSource] Tells
     * source of creation of lab virtual machine. Output property only. Possible
     * values include: 'FromCustomImage', 'FromGalleryImage'
     *
     * @param {string} [labVirtualMachine.environmentId] The resource ID of the
     * environment that contains this virtual machine, if any.
     *
     * @param {string} [labVirtualMachine.provisioningState] The provisioning
     * status of the resource.
     *
     * @param {string} [labVirtualMachine.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [labVirtualMachine.location] The location of the resource.
     *
     * @param {object} [labVirtualMachine.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LabVirtualMachine} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LabVirtualMachine} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LabVirtualMachine} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, labName: string, name: string, labVirtualMachine: models.LabVirtualMachine, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LabVirtualMachine>;
    createOrUpdate(resourceGroupName: string, labName: string, name: string, labVirtualMachine: models.LabVirtualMachine, callback: ServiceCallback<models.LabVirtualMachine>): void;
    createOrUpdate(resourceGroupName: string, labName: string, name: string, labVirtualMachine: models.LabVirtualMachine, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LabVirtualMachine>): void;


    /**
     * Delete virtual machine. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete virtual machine. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, labName: string, name: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, labName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Modify properties of virtual machines.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} labVirtualMachine A virtual machine.
     *
     * @param {string} [labVirtualMachine.notes] The notes of the virtual machine.
     *
     * @param {string} [labVirtualMachine.ownerObjectId] The object identifier of
     * the owner of the virtual machine.
     *
     * @param {string} [labVirtualMachine.ownerUserPrincipalName] The user
     * principal name of the virtual machine owner.
     *
     * @param {string} [labVirtualMachine.createdByUserId] The object identifier of
     * the creator of the virtual machine.
     *
     * @param {string} [labVirtualMachine.createdByUser] The email address of
     * creator of the virtual machine.
     *
     * @param {date} [labVirtualMachine.createdDate] The creation date of the
     * virtual machine.
     *
     * @param {string} [labVirtualMachine.customImageId] The custom image
     * identifier of the virtual machine.
     *
     * @param {string} [labVirtualMachine.osType] The OS type of the virtual
     * machine.
     *
     * @param {string} [labVirtualMachine.size] The size of the virtual machine.
     *
     * @param {string} [labVirtualMachine.userName] The user name of the virtual
     * machine.
     *
     * @param {string} [labVirtualMachine.password] The password of the virtual
     * machine administrator.
     *
     * @param {string} [labVirtualMachine.sshKey] The SSH key of the virtual
     * machine administrator.
     *
     * @param {boolean} [labVirtualMachine.isAuthenticationWithSshKey] Indicates
     * whether this virtual machine uses an SSH key for authentication.
     *
     * @param {string} [labVirtualMachine.fqdn] The fully-qualified domain name of
     * the virtual machine.
     *
     * @param {string} [labVirtualMachine.labSubnetName] The lab subnet name of the
     * virtual machine.
     *
     * @param {string} [labVirtualMachine.labVirtualNetworkId] The lab virtual
     * network identifier of the virtual machine.
     *
     * @param {boolean} [labVirtualMachine.disallowPublicIpAddress] Indicates
     * whether the virtual machine is to be created without a public IP address.
     *
     * @param {array} [labVirtualMachine.artifacts] The artifacts to be installed
     * on the virtual machine.
     *
     * @param {object} [labVirtualMachine.artifactDeploymentStatus] The artifact
     * deployment status for the virtual machine.
     *
     * @param {string}
     * [labVirtualMachine.artifactDeploymentStatus.deploymentStatus] The deployment
     * status of the artifact.
     *
     * @param {number}
     * [labVirtualMachine.artifactDeploymentStatus.artifactsApplied] The total
     * count of the artifacts that were successfully applied.
     *
     * @param {number} [labVirtualMachine.artifactDeploymentStatus.totalArtifacts]
     * The total count of the artifacts that were tentatively applied.
     *
     * @param {object} [labVirtualMachine.galleryImageReference] The Microsoft
     * Azure Marketplace image reference of the virtual machine.
     *
     * @param {string} [labVirtualMachine.galleryImageReference.offer] The offer of
     * the gallery image.
     *
     * @param {string} [labVirtualMachine.galleryImageReference.publisher] The
     * publisher of the gallery image.
     *
     * @param {string} [labVirtualMachine.galleryImageReference.sku] The SKU of the
     * gallery image.
     *
     * @param {string} [labVirtualMachine.galleryImageReference.osType] The OS type
     * of the gallery image.
     *
     * @param {string} [labVirtualMachine.galleryImageReference.version] The
     * version of the gallery image.
     *
     * @param {object} [labVirtualMachine.computeVm] The compute virtual machine
     * properties.
     *
     * @param {array} [labVirtualMachine.computeVm.statuses] Gets the statuses of
     * the virtual machine.
     *
     * @param {string} [labVirtualMachine.computeVm.osType] Gets the OS type of the
     * virtual machine.
     *
     * @param {string} [labVirtualMachine.computeVm.vmSize] Gets the size of the
     * virtual machine.
     *
     * @param {string} [labVirtualMachine.computeVm.networkInterfaceId] Gets the
     * network interface ID of the virtual machine.
     *
     * @param {string} [labVirtualMachine.computeVm.osDiskId] Gets OS disk blob uri
     * for the virtual machine.
     *
     * @param {array} [labVirtualMachine.computeVm.dataDiskIds] Gets data disks
     * blob uri for the virtual machine.
     *
     * @param {array} [labVirtualMachine.computeVm.dataDisks] Gets all data disks
     * attached to the virtual machine.
     *
     * @param {object} [labVirtualMachine.networkInterface] The network interface
     * properties.
     *
     * @param {string} [labVirtualMachine.networkInterface.virtualNetworkId] The
     * resource ID of the virtual network.
     *
     * @param {string} [labVirtualMachine.networkInterface.subnetId] The resource
     * ID of the sub net.
     *
     * @param {string} [labVirtualMachine.networkInterface.publicIpAddressId] The
     * resource ID of the public IP address.
     *
     * @param {string} [labVirtualMachine.networkInterface.publicIpAddress] The
     * public IP address.
     *
     * @param {string} [labVirtualMachine.networkInterface.privateIpAddress] The
     * private IP address.
     *
     * @param {string} [labVirtualMachine.networkInterface.dnsName] The DNS name.
     *
     * @param {string} [labVirtualMachine.networkInterface.rdpAuthority] The
     * RdpAuthority property is a server DNS host name or IP address followed by
     * the service port number for RDP (Remote Desktop Protocol).
     *
     * @param {string} [labVirtualMachine.networkInterface.sshAuthority] The
     * SshAuthority property is a server DNS host name or IP address followed by
     * the service port number for SSH.
     *
     * @param {object}
     * [labVirtualMachine.networkInterface.sharedPublicIpAddressConfiguration] The
     * configuration for sharing a public IP address across multiple virtual
     * machines.
     *
     * @param {array}
     * [labVirtualMachine.networkInterface.sharedPublicIpAddressConfiguration.inboundNatRules]
     * The incoming NAT rules
     *
     * @param {object} [labVirtualMachine.applicableSchedule] The applicable
     * schedule for the virtual machine.
     *
     * @param {object} [labVirtualMachine.applicableSchedule.labVmsShutdown] The
     * auto-shutdown schedule, if one has been set at the lab or lab resource
     * level.
     *
     * @param {object} [labVirtualMachine.applicableSchedule.labVmsStartup] The
     * auto-startup schedule, if one has been set at the lab or lab resource level.
     *
     * @param {string} [labVirtualMachine.applicableSchedule.labVmsStartup.status]
     * The status of the schedule (i.e. Enabled, Disabled). Possible values
     * include: 'Enabled', 'Disabled'
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.taskType] The task type
     * of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
     *
     * @param {object}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.weeklyRecurrence] If the
     * schedule will occur only some days of the week, specify the weekly
     * recurrence.
     *
     * @param {array}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.weeklyRecurrence.weekdays]
     * The days of the week for which the schedule is set (e.g. Sunday, Monday,
     * Tuesday, etc.).
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.weeklyRecurrence.time]
     * The time of the day the schedule will occur.
     *
     * @param {object}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.dailyRecurrence] If the
     * schedule will occur once each day of the week, specify the daily recurrence.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.dailyRecurrence.time]
     * The time of day the schedule will occur.
     *
     * @param {object}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.hourlyRecurrence] If the
     * schedule will occur multiple times a day, specify the hourly recurrence.
     *
     * @param {number}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.hourlyRecurrence.minute]
     * Minutes of the hour the schedule will run.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.timeZoneId] The time
     * zone ID (e.g. Pacific Standard time).
     *
     * @param {object}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.notificationSettings]
     * Notification settings.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.notificationSettings.status]
     * If notifications are enabled for this schedule (i.e. Enabled, Disabled).
     * Possible values include: 'Disabled', 'Enabled'
     *
     * @param {number}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.notificationSettings.timeInMinutes]
     * Time in minutes before event at which notification will be sent.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.notificationSettings.webhookUrl]
     * The webhook URL to which the notification will be sent.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.targetResourceId] The
     * resource ID to which the schedule belongs
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.provisioningState] The
     * provisioning status of the resource.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.uniqueIdentifier] The
     * unique immutable identifier of a resource (Guid).
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.location] The location
     * of the resource.
     *
     * @param {object} [labVirtualMachine.applicableSchedule.labVmsStartup.tags]
     * The tags of the resource.
     *
     * @param {string} [labVirtualMachine.applicableSchedule.location] The location
     * of the resource.
     *
     * @param {object} [labVirtualMachine.applicableSchedule.tags] The tags of the
     * resource.
     *
     * @param {date} [labVirtualMachine.expirationDate] The expiration date for VM.
     *
     * @param {boolean} [labVirtualMachine.allowClaim] Indicates whether another
     * user can take ownership of the virtual machine
     *
     * @param {string} [labVirtualMachine.storageType] Storage type to use for
     * virtual machine (i.e. Standard, Premium).
     *
     * @param {string} [labVirtualMachine.virtualMachineCreationSource] Tells
     * source of creation of lab virtual machine. Output property only. Possible
     * values include: 'FromCustomImage', 'FromGalleryImage'
     *
     * @param {string} [labVirtualMachine.environmentId] The resource ID of the
     * environment that contains this virtual machine, if any.
     *
     * @param {string} [labVirtualMachine.provisioningState] The provisioning
     * status of the resource.
     *
     * @param {string} [labVirtualMachine.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [labVirtualMachine.location] The location of the resource.
     *
     * @param {object} [labVirtualMachine.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LabVirtualMachine>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, labVirtualMachine: models.LabVirtualMachineFragment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LabVirtualMachine>>;

    /**
     * Modify properties of virtual machines.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} labVirtualMachine A virtual machine.
     *
     * @param {string} [labVirtualMachine.notes] The notes of the virtual machine.
     *
     * @param {string} [labVirtualMachine.ownerObjectId] The object identifier of
     * the owner of the virtual machine.
     *
     * @param {string} [labVirtualMachine.ownerUserPrincipalName] The user
     * principal name of the virtual machine owner.
     *
     * @param {string} [labVirtualMachine.createdByUserId] The object identifier of
     * the creator of the virtual machine.
     *
     * @param {string} [labVirtualMachine.createdByUser] The email address of
     * creator of the virtual machine.
     *
     * @param {date} [labVirtualMachine.createdDate] The creation date of the
     * virtual machine.
     *
     * @param {string} [labVirtualMachine.customImageId] The custom image
     * identifier of the virtual machine.
     *
     * @param {string} [labVirtualMachine.osType] The OS type of the virtual
     * machine.
     *
     * @param {string} [labVirtualMachine.size] The size of the virtual machine.
     *
     * @param {string} [labVirtualMachine.userName] The user name of the virtual
     * machine.
     *
     * @param {string} [labVirtualMachine.password] The password of the virtual
     * machine administrator.
     *
     * @param {string} [labVirtualMachine.sshKey] The SSH key of the virtual
     * machine administrator.
     *
     * @param {boolean} [labVirtualMachine.isAuthenticationWithSshKey] Indicates
     * whether this virtual machine uses an SSH key for authentication.
     *
     * @param {string} [labVirtualMachine.fqdn] The fully-qualified domain name of
     * the virtual machine.
     *
     * @param {string} [labVirtualMachine.labSubnetName] The lab subnet name of the
     * virtual machine.
     *
     * @param {string} [labVirtualMachine.labVirtualNetworkId] The lab virtual
     * network identifier of the virtual machine.
     *
     * @param {boolean} [labVirtualMachine.disallowPublicIpAddress] Indicates
     * whether the virtual machine is to be created without a public IP address.
     *
     * @param {array} [labVirtualMachine.artifacts] The artifacts to be installed
     * on the virtual machine.
     *
     * @param {object} [labVirtualMachine.artifactDeploymentStatus] The artifact
     * deployment status for the virtual machine.
     *
     * @param {string}
     * [labVirtualMachine.artifactDeploymentStatus.deploymentStatus] The deployment
     * status of the artifact.
     *
     * @param {number}
     * [labVirtualMachine.artifactDeploymentStatus.artifactsApplied] The total
     * count of the artifacts that were successfully applied.
     *
     * @param {number} [labVirtualMachine.artifactDeploymentStatus.totalArtifacts]
     * The total count of the artifacts that were tentatively applied.
     *
     * @param {object} [labVirtualMachine.galleryImageReference] The Microsoft
     * Azure Marketplace image reference of the virtual machine.
     *
     * @param {string} [labVirtualMachine.galleryImageReference.offer] The offer of
     * the gallery image.
     *
     * @param {string} [labVirtualMachine.galleryImageReference.publisher] The
     * publisher of the gallery image.
     *
     * @param {string} [labVirtualMachine.galleryImageReference.sku] The SKU of the
     * gallery image.
     *
     * @param {string} [labVirtualMachine.galleryImageReference.osType] The OS type
     * of the gallery image.
     *
     * @param {string} [labVirtualMachine.galleryImageReference.version] The
     * version of the gallery image.
     *
     * @param {object} [labVirtualMachine.computeVm] The compute virtual machine
     * properties.
     *
     * @param {array} [labVirtualMachine.computeVm.statuses] Gets the statuses of
     * the virtual machine.
     *
     * @param {string} [labVirtualMachine.computeVm.osType] Gets the OS type of the
     * virtual machine.
     *
     * @param {string} [labVirtualMachine.computeVm.vmSize] Gets the size of the
     * virtual machine.
     *
     * @param {string} [labVirtualMachine.computeVm.networkInterfaceId] Gets the
     * network interface ID of the virtual machine.
     *
     * @param {string} [labVirtualMachine.computeVm.osDiskId] Gets OS disk blob uri
     * for the virtual machine.
     *
     * @param {array} [labVirtualMachine.computeVm.dataDiskIds] Gets data disks
     * blob uri for the virtual machine.
     *
     * @param {array} [labVirtualMachine.computeVm.dataDisks] Gets all data disks
     * attached to the virtual machine.
     *
     * @param {object} [labVirtualMachine.networkInterface] The network interface
     * properties.
     *
     * @param {string} [labVirtualMachine.networkInterface.virtualNetworkId] The
     * resource ID of the virtual network.
     *
     * @param {string} [labVirtualMachine.networkInterface.subnetId] The resource
     * ID of the sub net.
     *
     * @param {string} [labVirtualMachine.networkInterface.publicIpAddressId] The
     * resource ID of the public IP address.
     *
     * @param {string} [labVirtualMachine.networkInterface.publicIpAddress] The
     * public IP address.
     *
     * @param {string} [labVirtualMachine.networkInterface.privateIpAddress] The
     * private IP address.
     *
     * @param {string} [labVirtualMachine.networkInterface.dnsName] The DNS name.
     *
     * @param {string} [labVirtualMachine.networkInterface.rdpAuthority] The
     * RdpAuthority property is a server DNS host name or IP address followed by
     * the service port number for RDP (Remote Desktop Protocol).
     *
     * @param {string} [labVirtualMachine.networkInterface.sshAuthority] The
     * SshAuthority property is a server DNS host name or IP address followed by
     * the service port number for SSH.
     *
     * @param {object}
     * [labVirtualMachine.networkInterface.sharedPublicIpAddressConfiguration] The
     * configuration for sharing a public IP address across multiple virtual
     * machines.
     *
     * @param {array}
     * [labVirtualMachine.networkInterface.sharedPublicIpAddressConfiguration.inboundNatRules]
     * The incoming NAT rules
     *
     * @param {object} [labVirtualMachine.applicableSchedule] The applicable
     * schedule for the virtual machine.
     *
     * @param {object} [labVirtualMachine.applicableSchedule.labVmsShutdown] The
     * auto-shutdown schedule, if one has been set at the lab or lab resource
     * level.
     *
     * @param {object} [labVirtualMachine.applicableSchedule.labVmsStartup] The
     * auto-startup schedule, if one has been set at the lab or lab resource level.
     *
     * @param {string} [labVirtualMachine.applicableSchedule.labVmsStartup.status]
     * The status of the schedule (i.e. Enabled, Disabled). Possible values
     * include: 'Enabled', 'Disabled'
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.taskType] The task type
     * of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
     *
     * @param {object}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.weeklyRecurrence] If the
     * schedule will occur only some days of the week, specify the weekly
     * recurrence.
     *
     * @param {array}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.weeklyRecurrence.weekdays]
     * The days of the week for which the schedule is set (e.g. Sunday, Monday,
     * Tuesday, etc.).
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.weeklyRecurrence.time]
     * The time of the day the schedule will occur.
     *
     * @param {object}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.dailyRecurrence] If the
     * schedule will occur once each day of the week, specify the daily recurrence.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.dailyRecurrence.time]
     * The time of day the schedule will occur.
     *
     * @param {object}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.hourlyRecurrence] If the
     * schedule will occur multiple times a day, specify the hourly recurrence.
     *
     * @param {number}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.hourlyRecurrence.minute]
     * Minutes of the hour the schedule will run.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.timeZoneId] The time
     * zone ID (e.g. Pacific Standard time).
     *
     * @param {object}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.notificationSettings]
     * Notification settings.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.notificationSettings.status]
     * If notifications are enabled for this schedule (i.e. Enabled, Disabled).
     * Possible values include: 'Disabled', 'Enabled'
     *
     * @param {number}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.notificationSettings.timeInMinutes]
     * Time in minutes before event at which notification will be sent.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.notificationSettings.webhookUrl]
     * The webhook URL to which the notification will be sent.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.targetResourceId] The
     * resource ID to which the schedule belongs
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.provisioningState] The
     * provisioning status of the resource.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.uniqueIdentifier] The
     * unique immutable identifier of a resource (Guid).
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.location] The location
     * of the resource.
     *
     * @param {object} [labVirtualMachine.applicableSchedule.labVmsStartup.tags]
     * The tags of the resource.
     *
     * @param {string} [labVirtualMachine.applicableSchedule.location] The location
     * of the resource.
     *
     * @param {object} [labVirtualMachine.applicableSchedule.tags] The tags of the
     * resource.
     *
     * @param {date} [labVirtualMachine.expirationDate] The expiration date for VM.
     *
     * @param {boolean} [labVirtualMachine.allowClaim] Indicates whether another
     * user can take ownership of the virtual machine
     *
     * @param {string} [labVirtualMachine.storageType] Storage type to use for
     * virtual machine (i.e. Standard, Premium).
     *
     * @param {string} [labVirtualMachine.virtualMachineCreationSource] Tells
     * source of creation of lab virtual machine. Output property only. Possible
     * values include: 'FromCustomImage', 'FromGalleryImage'
     *
     * @param {string} [labVirtualMachine.environmentId] The resource ID of the
     * environment that contains this virtual machine, if any.
     *
     * @param {string} [labVirtualMachine.provisioningState] The provisioning
     * status of the resource.
     *
     * @param {string} [labVirtualMachine.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [labVirtualMachine.location] The location of the resource.
     *
     * @param {object} [labVirtualMachine.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LabVirtualMachine} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LabVirtualMachine} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LabVirtualMachine} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, labName: string, name: string, labVirtualMachine: models.LabVirtualMachineFragment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LabVirtualMachine>;
    update(resourceGroupName: string, labName: string, name: string, labVirtualMachine: models.LabVirtualMachineFragment, callback: ServiceCallback<models.LabVirtualMachine>): void;
    update(resourceGroupName: string, labName: string, name: string, labVirtualMachine: models.LabVirtualMachineFragment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LabVirtualMachine>): void;


    /**
     * Attach a new or existing data disk to virtual machine. This operation can
     * take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} dataDiskProperties Request body for adding a new or existing
     * data disk to a virtual machine.
     *
     * @param {object} [dataDiskProperties.attachNewDataDiskOptions] Specifies
     * options to attach a new disk to the virtual machine.
     *
     * @param {number} [dataDiskProperties.attachNewDataDiskOptions.diskSizeGiB]
     * Size of the disk to be attached in GibiBytes.
     *
     * @param {string} [dataDiskProperties.attachNewDataDiskOptions.diskName] The
     * name of the disk to be attached.
     *
     * @param {string} [dataDiskProperties.attachNewDataDiskOptions.diskType] The
     * storage type for the disk (i.e. Standard, Premium). Possible values include:
     * 'Standard', 'Premium'
     *
     * @param {string} [dataDiskProperties.existingLabDiskId] Specifies the
     * existing lab disk id to attach to virtual machine.
     *
     * @param {string} [dataDiskProperties.hostCaching] Caching option for a data
     * disk (i.e. None, ReadOnly, ReadWrite). Possible values include: 'None',
     * 'ReadOnly', 'ReadWrite'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addDataDiskWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, dataDiskProperties: models.DataDiskProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Attach a new or existing data disk to virtual machine. This operation can
     * take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} dataDiskProperties Request body for adding a new or existing
     * data disk to a virtual machine.
     *
     * @param {object} [dataDiskProperties.attachNewDataDiskOptions] Specifies
     * options to attach a new disk to the virtual machine.
     *
     * @param {number} [dataDiskProperties.attachNewDataDiskOptions.diskSizeGiB]
     * Size of the disk to be attached in GibiBytes.
     *
     * @param {string} [dataDiskProperties.attachNewDataDiskOptions.diskName] The
     * name of the disk to be attached.
     *
     * @param {string} [dataDiskProperties.attachNewDataDiskOptions.diskType] The
     * storage type for the disk (i.e. Standard, Premium). Possible values include:
     * 'Standard', 'Premium'
     *
     * @param {string} [dataDiskProperties.existingLabDiskId] Specifies the
     * existing lab disk id to attach to virtual machine.
     *
     * @param {string} [dataDiskProperties.hostCaching] Caching option for a data
     * disk (i.e. None, ReadOnly, ReadWrite). Possible values include: 'None',
     * 'ReadOnly', 'ReadWrite'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    addDataDisk(resourceGroupName: string, labName: string, name: string, dataDiskProperties: models.DataDiskProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    addDataDisk(resourceGroupName: string, labName: string, name: string, dataDiskProperties: models.DataDiskProperties, callback: ServiceCallback<void>): void;
    addDataDisk(resourceGroupName: string, labName: string, name: string, dataDiskProperties: models.DataDiskProperties, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Apply artifacts to virtual machine. This operation can take a while to
     * complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} applyArtifactsRequest Request body for applying artifacts to
     * a virtual machine.
     *
     * @param {array} [applyArtifactsRequest.artifacts] The list of artifacts to
     * apply.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    applyArtifactsWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, applyArtifactsRequest: models.ApplyArtifactsRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Apply artifacts to virtual machine. This operation can take a while to
     * complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} applyArtifactsRequest Request body for applying artifacts to
     * a virtual machine.
     *
     * @param {array} [applyArtifactsRequest.artifacts] The list of artifacts to
     * apply.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    applyArtifacts(resourceGroupName: string, labName: string, name: string, applyArtifactsRequest: models.ApplyArtifactsRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    applyArtifacts(resourceGroupName: string, labName: string, name: string, applyArtifactsRequest: models.ApplyArtifactsRequest, callback: ServiceCallback<void>): void;
    applyArtifacts(resourceGroupName: string, labName: string, name: string, applyArtifactsRequest: models.ApplyArtifactsRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Take ownership of an existing virtual machine This operation can take a
     * while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    claimWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Take ownership of an existing virtual machine This operation can take a
     * while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    claim(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    claim(resourceGroupName: string, labName: string, name: string, callback: ServiceCallback<void>): void;
    claim(resourceGroupName: string, labName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Detach the specified disk from the virtual machine. This operation can take
     * a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} detachDataDiskProperties Request body for detaching data
     * disk from a virtual machine.
     *
     * @param {string} [detachDataDiskProperties.existingLabDiskId] Specifies the
     * disk resource ID to detach from virtual machine.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    detachDataDiskWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, detachDataDiskProperties: models.DetachDataDiskProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Detach the specified disk from the virtual machine. This operation can take
     * a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} detachDataDiskProperties Request body for detaching data
     * disk from a virtual machine.
     *
     * @param {string} [detachDataDiskProperties.existingLabDiskId] Specifies the
     * disk resource ID to detach from virtual machine.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    detachDataDisk(resourceGroupName: string, labName: string, name: string, detachDataDiskProperties: models.DetachDataDiskProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    detachDataDisk(resourceGroupName: string, labName: string, name: string, detachDataDiskProperties: models.DetachDataDiskProperties, callback: ServiceCallback<void>): void;
    detachDataDisk(resourceGroupName: string, labName: string, name: string, detachDataDiskProperties: models.DetachDataDiskProperties, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Lists all applicable schedules
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ApplicableSchedule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listApplicableSchedulesWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicableSchedule>>;

    /**
     * Lists all applicable schedules
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ApplicableSchedule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ApplicableSchedule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ApplicableSchedule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listApplicableSchedules(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicableSchedule>;
    listApplicableSchedules(resourceGroupName: string, labName: string, name: string, callback: ServiceCallback<models.ApplicableSchedule>): void;
    listApplicableSchedules(resourceGroupName: string, labName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicableSchedule>): void;


    /**
     * Start a virtual machine. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    startWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Start a virtual machine. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    start(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    start(resourceGroupName: string, labName: string, name: string, callback: ServiceCallback<void>): void;
    start(resourceGroupName: string, labName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Stop a virtual machine This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    stopWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Stop a virtual machine This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    stop(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    stop(resourceGroupName: string, labName: string, name: string, callback: ServiceCallback<void>): void;
    stop(resourceGroupName: string, labName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Create or replace an existing Virtual machine. This operation can take a
     * while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} labVirtualMachine A virtual machine.
     *
     * @param {string} [labVirtualMachine.notes] The notes of the virtual machine.
     *
     * @param {string} [labVirtualMachine.ownerObjectId] The object identifier of
     * the owner of the virtual machine.
     *
     * @param {string} [labVirtualMachine.ownerUserPrincipalName] The user
     * principal name of the virtual machine owner.
     *
     * @param {string} [labVirtualMachine.createdByUserId] The object identifier of
     * the creator of the virtual machine.
     *
     * @param {string} [labVirtualMachine.createdByUser] The email address of
     * creator of the virtual machine.
     *
     * @param {date} [labVirtualMachine.createdDate] The creation date of the
     * virtual machine.
     *
     * @param {string} [labVirtualMachine.customImageId] The custom image
     * identifier of the virtual machine.
     *
     * @param {string} [labVirtualMachine.osType] The OS type of the virtual
     * machine.
     *
     * @param {string} [labVirtualMachine.size] The size of the virtual machine.
     *
     * @param {string} [labVirtualMachine.userName] The user name of the virtual
     * machine.
     *
     * @param {string} [labVirtualMachine.password] The password of the virtual
     * machine administrator.
     *
     * @param {string} [labVirtualMachine.sshKey] The SSH key of the virtual
     * machine administrator.
     *
     * @param {boolean} [labVirtualMachine.isAuthenticationWithSshKey] Indicates
     * whether this virtual machine uses an SSH key for authentication.
     *
     * @param {string} [labVirtualMachine.fqdn] The fully-qualified domain name of
     * the virtual machine.
     *
     * @param {string} [labVirtualMachine.labSubnetName] The lab subnet name of the
     * virtual machine.
     *
     * @param {string} [labVirtualMachine.labVirtualNetworkId] The lab virtual
     * network identifier of the virtual machine.
     *
     * @param {boolean} [labVirtualMachine.disallowPublicIpAddress] Indicates
     * whether the virtual machine is to be created without a public IP address.
     *
     * @param {array} [labVirtualMachine.artifacts] The artifacts to be installed
     * on the virtual machine.
     *
     * @param {object} [labVirtualMachine.artifactDeploymentStatus] The artifact
     * deployment status for the virtual machine.
     *
     * @param {string}
     * [labVirtualMachine.artifactDeploymentStatus.deploymentStatus] The deployment
     * status of the artifact.
     *
     * @param {number}
     * [labVirtualMachine.artifactDeploymentStatus.artifactsApplied] The total
     * count of the artifacts that were successfully applied.
     *
     * @param {number} [labVirtualMachine.artifactDeploymentStatus.totalArtifacts]
     * The total count of the artifacts that were tentatively applied.
     *
     * @param {object} [labVirtualMachine.galleryImageReference] The Microsoft
     * Azure Marketplace image reference of the virtual machine.
     *
     * @param {string} [labVirtualMachine.galleryImageReference.offer] The offer of
     * the gallery image.
     *
     * @param {string} [labVirtualMachine.galleryImageReference.publisher] The
     * publisher of the gallery image.
     *
     * @param {string} [labVirtualMachine.galleryImageReference.sku] The SKU of the
     * gallery image.
     *
     * @param {string} [labVirtualMachine.galleryImageReference.osType] The OS type
     * of the gallery image.
     *
     * @param {string} [labVirtualMachine.galleryImageReference.version] The
     * version of the gallery image.
     *
     * @param {object} [labVirtualMachine.computeVm] The compute virtual machine
     * properties.
     *
     * @param {array} [labVirtualMachine.computeVm.statuses] Gets the statuses of
     * the virtual machine.
     *
     * @param {string} [labVirtualMachine.computeVm.osType] Gets the OS type of the
     * virtual machine.
     *
     * @param {string} [labVirtualMachine.computeVm.vmSize] Gets the size of the
     * virtual machine.
     *
     * @param {string} [labVirtualMachine.computeVm.networkInterfaceId] Gets the
     * network interface ID of the virtual machine.
     *
     * @param {string} [labVirtualMachine.computeVm.osDiskId] Gets OS disk blob uri
     * for the virtual machine.
     *
     * @param {array} [labVirtualMachine.computeVm.dataDiskIds] Gets data disks
     * blob uri for the virtual machine.
     *
     * @param {array} [labVirtualMachine.computeVm.dataDisks] Gets all data disks
     * attached to the virtual machine.
     *
     * @param {object} [labVirtualMachine.networkInterface] The network interface
     * properties.
     *
     * @param {string} [labVirtualMachine.networkInterface.virtualNetworkId] The
     * resource ID of the virtual network.
     *
     * @param {string} [labVirtualMachine.networkInterface.subnetId] The resource
     * ID of the sub net.
     *
     * @param {string} [labVirtualMachine.networkInterface.publicIpAddressId] The
     * resource ID of the public IP address.
     *
     * @param {string} [labVirtualMachine.networkInterface.publicIpAddress] The
     * public IP address.
     *
     * @param {string} [labVirtualMachine.networkInterface.privateIpAddress] The
     * private IP address.
     *
     * @param {string} [labVirtualMachine.networkInterface.dnsName] The DNS name.
     *
     * @param {string} [labVirtualMachine.networkInterface.rdpAuthority] The
     * RdpAuthority property is a server DNS host name or IP address followed by
     * the service port number for RDP (Remote Desktop Protocol).
     *
     * @param {string} [labVirtualMachine.networkInterface.sshAuthority] The
     * SshAuthority property is a server DNS host name or IP address followed by
     * the service port number for SSH.
     *
     * @param {object}
     * [labVirtualMachine.networkInterface.sharedPublicIpAddressConfiguration] The
     * configuration for sharing a public IP address across multiple virtual
     * machines.
     *
     * @param {array}
     * [labVirtualMachine.networkInterface.sharedPublicIpAddressConfiguration.inboundNatRules]
     * The incoming NAT rules
     *
     * @param {object} [labVirtualMachine.applicableSchedule] The applicable
     * schedule for the virtual machine.
     *
     * @param {object} [labVirtualMachine.applicableSchedule.labVmsShutdown] The
     * auto-shutdown schedule, if one has been set at the lab or lab resource
     * level.
     *
     * @param {object} [labVirtualMachine.applicableSchedule.labVmsStartup] The
     * auto-startup schedule, if one has been set at the lab or lab resource level.
     *
     * @param {string} [labVirtualMachine.applicableSchedule.labVmsStartup.status]
     * The status of the schedule (i.e. Enabled, Disabled). Possible values
     * include: 'Enabled', 'Disabled'
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.taskType] The task type
     * of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
     *
     * @param {object}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.weeklyRecurrence] If the
     * schedule will occur only some days of the week, specify the weekly
     * recurrence.
     *
     * @param {array}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.weeklyRecurrence.weekdays]
     * The days of the week for which the schedule is set (e.g. Sunday, Monday,
     * Tuesday, etc.).
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.weeklyRecurrence.time]
     * The time of the day the schedule will occur.
     *
     * @param {object}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.dailyRecurrence] If the
     * schedule will occur once each day of the week, specify the daily recurrence.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.dailyRecurrence.time]
     * The time of day the schedule will occur.
     *
     * @param {object}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.hourlyRecurrence] If the
     * schedule will occur multiple times a day, specify the hourly recurrence.
     *
     * @param {number}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.hourlyRecurrence.minute]
     * Minutes of the hour the schedule will run.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.timeZoneId] The time
     * zone ID (e.g. Pacific Standard time).
     *
     * @param {object}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.notificationSettings]
     * Notification settings.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.notificationSettings.status]
     * If notifications are enabled for this schedule (i.e. Enabled, Disabled).
     * Possible values include: 'Disabled', 'Enabled'
     *
     * @param {number}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.notificationSettings.timeInMinutes]
     * Time in minutes before event at which notification will be sent.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.notificationSettings.webhookUrl]
     * The webhook URL to which the notification will be sent.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.targetResourceId] The
     * resource ID to which the schedule belongs
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.provisioningState] The
     * provisioning status of the resource.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.uniqueIdentifier] The
     * unique immutable identifier of a resource (Guid).
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.location] The location
     * of the resource.
     *
     * @param {object} [labVirtualMachine.applicableSchedule.labVmsStartup.tags]
     * The tags of the resource.
     *
     * @param {string} [labVirtualMachine.applicableSchedule.location] The location
     * of the resource.
     *
     * @param {object} [labVirtualMachine.applicableSchedule.tags] The tags of the
     * resource.
     *
     * @param {date} [labVirtualMachine.expirationDate] The expiration date for VM.
     *
     * @param {boolean} [labVirtualMachine.allowClaim] Indicates whether another
     * user can take ownership of the virtual machine
     *
     * @param {string} [labVirtualMachine.storageType] Storage type to use for
     * virtual machine (i.e. Standard, Premium).
     *
     * @param {string} [labVirtualMachine.virtualMachineCreationSource] Tells
     * source of creation of lab virtual machine. Output property only. Possible
     * values include: 'FromCustomImage', 'FromGalleryImage'
     *
     * @param {string} [labVirtualMachine.environmentId] The resource ID of the
     * environment that contains this virtual machine, if any.
     *
     * @param {string} [labVirtualMachine.provisioningState] The provisioning
     * status of the resource.
     *
     * @param {string} [labVirtualMachine.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [labVirtualMachine.location] The location of the resource.
     *
     * @param {object} [labVirtualMachine.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LabVirtualMachine>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, labVirtualMachine: models.LabVirtualMachine, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LabVirtualMachine>>;

    /**
     * Create or replace an existing Virtual machine. This operation can take a
     * while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} labVirtualMachine A virtual machine.
     *
     * @param {string} [labVirtualMachine.notes] The notes of the virtual machine.
     *
     * @param {string} [labVirtualMachine.ownerObjectId] The object identifier of
     * the owner of the virtual machine.
     *
     * @param {string} [labVirtualMachine.ownerUserPrincipalName] The user
     * principal name of the virtual machine owner.
     *
     * @param {string} [labVirtualMachine.createdByUserId] The object identifier of
     * the creator of the virtual machine.
     *
     * @param {string} [labVirtualMachine.createdByUser] The email address of
     * creator of the virtual machine.
     *
     * @param {date} [labVirtualMachine.createdDate] The creation date of the
     * virtual machine.
     *
     * @param {string} [labVirtualMachine.customImageId] The custom image
     * identifier of the virtual machine.
     *
     * @param {string} [labVirtualMachine.osType] The OS type of the virtual
     * machine.
     *
     * @param {string} [labVirtualMachine.size] The size of the virtual machine.
     *
     * @param {string} [labVirtualMachine.userName] The user name of the virtual
     * machine.
     *
     * @param {string} [labVirtualMachine.password] The password of the virtual
     * machine administrator.
     *
     * @param {string} [labVirtualMachine.sshKey] The SSH key of the virtual
     * machine administrator.
     *
     * @param {boolean} [labVirtualMachine.isAuthenticationWithSshKey] Indicates
     * whether this virtual machine uses an SSH key for authentication.
     *
     * @param {string} [labVirtualMachine.fqdn] The fully-qualified domain name of
     * the virtual machine.
     *
     * @param {string} [labVirtualMachine.labSubnetName] The lab subnet name of the
     * virtual machine.
     *
     * @param {string} [labVirtualMachine.labVirtualNetworkId] The lab virtual
     * network identifier of the virtual machine.
     *
     * @param {boolean} [labVirtualMachine.disallowPublicIpAddress] Indicates
     * whether the virtual machine is to be created without a public IP address.
     *
     * @param {array} [labVirtualMachine.artifacts] The artifacts to be installed
     * on the virtual machine.
     *
     * @param {object} [labVirtualMachine.artifactDeploymentStatus] The artifact
     * deployment status for the virtual machine.
     *
     * @param {string}
     * [labVirtualMachine.artifactDeploymentStatus.deploymentStatus] The deployment
     * status of the artifact.
     *
     * @param {number}
     * [labVirtualMachine.artifactDeploymentStatus.artifactsApplied] The total
     * count of the artifacts that were successfully applied.
     *
     * @param {number} [labVirtualMachine.artifactDeploymentStatus.totalArtifacts]
     * The total count of the artifacts that were tentatively applied.
     *
     * @param {object} [labVirtualMachine.galleryImageReference] The Microsoft
     * Azure Marketplace image reference of the virtual machine.
     *
     * @param {string} [labVirtualMachine.galleryImageReference.offer] The offer of
     * the gallery image.
     *
     * @param {string} [labVirtualMachine.galleryImageReference.publisher] The
     * publisher of the gallery image.
     *
     * @param {string} [labVirtualMachine.galleryImageReference.sku] The SKU of the
     * gallery image.
     *
     * @param {string} [labVirtualMachine.galleryImageReference.osType] The OS type
     * of the gallery image.
     *
     * @param {string} [labVirtualMachine.galleryImageReference.version] The
     * version of the gallery image.
     *
     * @param {object} [labVirtualMachine.computeVm] The compute virtual machine
     * properties.
     *
     * @param {array} [labVirtualMachine.computeVm.statuses] Gets the statuses of
     * the virtual machine.
     *
     * @param {string} [labVirtualMachine.computeVm.osType] Gets the OS type of the
     * virtual machine.
     *
     * @param {string} [labVirtualMachine.computeVm.vmSize] Gets the size of the
     * virtual machine.
     *
     * @param {string} [labVirtualMachine.computeVm.networkInterfaceId] Gets the
     * network interface ID of the virtual machine.
     *
     * @param {string} [labVirtualMachine.computeVm.osDiskId] Gets OS disk blob uri
     * for the virtual machine.
     *
     * @param {array} [labVirtualMachine.computeVm.dataDiskIds] Gets data disks
     * blob uri for the virtual machine.
     *
     * @param {array} [labVirtualMachine.computeVm.dataDisks] Gets all data disks
     * attached to the virtual machine.
     *
     * @param {object} [labVirtualMachine.networkInterface] The network interface
     * properties.
     *
     * @param {string} [labVirtualMachine.networkInterface.virtualNetworkId] The
     * resource ID of the virtual network.
     *
     * @param {string} [labVirtualMachine.networkInterface.subnetId] The resource
     * ID of the sub net.
     *
     * @param {string} [labVirtualMachine.networkInterface.publicIpAddressId] The
     * resource ID of the public IP address.
     *
     * @param {string} [labVirtualMachine.networkInterface.publicIpAddress] The
     * public IP address.
     *
     * @param {string} [labVirtualMachine.networkInterface.privateIpAddress] The
     * private IP address.
     *
     * @param {string} [labVirtualMachine.networkInterface.dnsName] The DNS name.
     *
     * @param {string} [labVirtualMachine.networkInterface.rdpAuthority] The
     * RdpAuthority property is a server DNS host name or IP address followed by
     * the service port number for RDP (Remote Desktop Protocol).
     *
     * @param {string} [labVirtualMachine.networkInterface.sshAuthority] The
     * SshAuthority property is a server DNS host name or IP address followed by
     * the service port number for SSH.
     *
     * @param {object}
     * [labVirtualMachine.networkInterface.sharedPublicIpAddressConfiguration] The
     * configuration for sharing a public IP address across multiple virtual
     * machines.
     *
     * @param {array}
     * [labVirtualMachine.networkInterface.sharedPublicIpAddressConfiguration.inboundNatRules]
     * The incoming NAT rules
     *
     * @param {object} [labVirtualMachine.applicableSchedule] The applicable
     * schedule for the virtual machine.
     *
     * @param {object} [labVirtualMachine.applicableSchedule.labVmsShutdown] The
     * auto-shutdown schedule, if one has been set at the lab or lab resource
     * level.
     *
     * @param {object} [labVirtualMachine.applicableSchedule.labVmsStartup] The
     * auto-startup schedule, if one has been set at the lab or lab resource level.
     *
     * @param {string} [labVirtualMachine.applicableSchedule.labVmsStartup.status]
     * The status of the schedule (i.e. Enabled, Disabled). Possible values
     * include: 'Enabled', 'Disabled'
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.taskType] The task type
     * of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
     *
     * @param {object}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.weeklyRecurrence] If the
     * schedule will occur only some days of the week, specify the weekly
     * recurrence.
     *
     * @param {array}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.weeklyRecurrence.weekdays]
     * The days of the week for which the schedule is set (e.g. Sunday, Monday,
     * Tuesday, etc.).
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.weeklyRecurrence.time]
     * The time of the day the schedule will occur.
     *
     * @param {object}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.dailyRecurrence] If the
     * schedule will occur once each day of the week, specify the daily recurrence.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.dailyRecurrence.time]
     * The time of day the schedule will occur.
     *
     * @param {object}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.hourlyRecurrence] If the
     * schedule will occur multiple times a day, specify the hourly recurrence.
     *
     * @param {number}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.hourlyRecurrence.minute]
     * Minutes of the hour the schedule will run.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.timeZoneId] The time
     * zone ID (e.g. Pacific Standard time).
     *
     * @param {object}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.notificationSettings]
     * Notification settings.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.notificationSettings.status]
     * If notifications are enabled for this schedule (i.e. Enabled, Disabled).
     * Possible values include: 'Disabled', 'Enabled'
     *
     * @param {number}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.notificationSettings.timeInMinutes]
     * Time in minutes before event at which notification will be sent.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.notificationSettings.webhookUrl]
     * The webhook URL to which the notification will be sent.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.targetResourceId] The
     * resource ID to which the schedule belongs
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.provisioningState] The
     * provisioning status of the resource.
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.uniqueIdentifier] The
     * unique immutable identifier of a resource (Guid).
     *
     * @param {string}
     * [labVirtualMachine.applicableSchedule.labVmsStartup.location] The location
     * of the resource.
     *
     * @param {object} [labVirtualMachine.applicableSchedule.labVmsStartup.tags]
     * The tags of the resource.
     *
     * @param {string} [labVirtualMachine.applicableSchedule.location] The location
     * of the resource.
     *
     * @param {object} [labVirtualMachine.applicableSchedule.tags] The tags of the
     * resource.
     *
     * @param {date} [labVirtualMachine.expirationDate] The expiration date for VM.
     *
     * @param {boolean} [labVirtualMachine.allowClaim] Indicates whether another
     * user can take ownership of the virtual machine
     *
     * @param {string} [labVirtualMachine.storageType] Storage type to use for
     * virtual machine (i.e. Standard, Premium).
     *
     * @param {string} [labVirtualMachine.virtualMachineCreationSource] Tells
     * source of creation of lab virtual machine. Output property only. Possible
     * values include: 'FromCustomImage', 'FromGalleryImage'
     *
     * @param {string} [labVirtualMachine.environmentId] The resource ID of the
     * environment that contains this virtual machine, if any.
     *
     * @param {string} [labVirtualMachine.provisioningState] The provisioning
     * status of the resource.
     *
     * @param {string} [labVirtualMachine.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [labVirtualMachine.location] The location of the resource.
     *
     * @param {object} [labVirtualMachine.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LabVirtualMachine} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LabVirtualMachine} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LabVirtualMachine} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, labName: string, name: string, labVirtualMachine: models.LabVirtualMachine, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LabVirtualMachine>;
    beginCreateOrUpdate(resourceGroupName: string, labName: string, name: string, labVirtualMachine: models.LabVirtualMachine, callback: ServiceCallback<models.LabVirtualMachine>): void;
    beginCreateOrUpdate(resourceGroupName: string, labName: string, name: string, labVirtualMachine: models.LabVirtualMachine, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LabVirtualMachine>): void;


    /**
     * Delete virtual machine. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete virtual machine. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, labName: string, name: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, labName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Attach a new or existing data disk to virtual machine. This operation can
     * take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} dataDiskProperties Request body for adding a new or existing
     * data disk to a virtual machine.
     *
     * @param {object} [dataDiskProperties.attachNewDataDiskOptions] Specifies
     * options to attach a new disk to the virtual machine.
     *
     * @param {number} [dataDiskProperties.attachNewDataDiskOptions.diskSizeGiB]
     * Size of the disk to be attached in GibiBytes.
     *
     * @param {string} [dataDiskProperties.attachNewDataDiskOptions.diskName] The
     * name of the disk to be attached.
     *
     * @param {string} [dataDiskProperties.attachNewDataDiskOptions.diskType] The
     * storage type for the disk (i.e. Standard, Premium). Possible values include:
     * 'Standard', 'Premium'
     *
     * @param {string} [dataDiskProperties.existingLabDiskId] Specifies the
     * existing lab disk id to attach to virtual machine.
     *
     * @param {string} [dataDiskProperties.hostCaching] Caching option for a data
     * disk (i.e. None, ReadOnly, ReadWrite). Possible values include: 'None',
     * 'ReadOnly', 'ReadWrite'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginAddDataDiskWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, dataDiskProperties: models.DataDiskProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Attach a new or existing data disk to virtual machine. This operation can
     * take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} dataDiskProperties Request body for adding a new or existing
     * data disk to a virtual machine.
     *
     * @param {object} [dataDiskProperties.attachNewDataDiskOptions] Specifies
     * options to attach a new disk to the virtual machine.
     *
     * @param {number} [dataDiskProperties.attachNewDataDiskOptions.diskSizeGiB]
     * Size of the disk to be attached in GibiBytes.
     *
     * @param {string} [dataDiskProperties.attachNewDataDiskOptions.diskName] The
     * name of the disk to be attached.
     *
     * @param {string} [dataDiskProperties.attachNewDataDiskOptions.diskType] The
     * storage type for the disk (i.e. Standard, Premium). Possible values include:
     * 'Standard', 'Premium'
     *
     * @param {string} [dataDiskProperties.existingLabDiskId] Specifies the
     * existing lab disk id to attach to virtual machine.
     *
     * @param {string} [dataDiskProperties.hostCaching] Caching option for a data
     * disk (i.e. None, ReadOnly, ReadWrite). Possible values include: 'None',
     * 'ReadOnly', 'ReadWrite'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginAddDataDisk(resourceGroupName: string, labName: string, name: string, dataDiskProperties: models.DataDiskProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginAddDataDisk(resourceGroupName: string, labName: string, name: string, dataDiskProperties: models.DataDiskProperties, callback: ServiceCallback<void>): void;
    beginAddDataDisk(resourceGroupName: string, labName: string, name: string, dataDiskProperties: models.DataDiskProperties, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Apply artifacts to virtual machine. This operation can take a while to
     * complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} applyArtifactsRequest Request body for applying artifacts to
     * a virtual machine.
     *
     * @param {array} [applyArtifactsRequest.artifacts] The list of artifacts to
     * apply.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginApplyArtifactsWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, applyArtifactsRequest: models.ApplyArtifactsRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Apply artifacts to virtual machine. This operation can take a while to
     * complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} applyArtifactsRequest Request body for applying artifacts to
     * a virtual machine.
     *
     * @param {array} [applyArtifactsRequest.artifacts] The list of artifacts to
     * apply.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginApplyArtifacts(resourceGroupName: string, labName: string, name: string, applyArtifactsRequest: models.ApplyArtifactsRequest, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginApplyArtifacts(resourceGroupName: string, labName: string, name: string, applyArtifactsRequest: models.ApplyArtifactsRequest, callback: ServiceCallback<void>): void;
    beginApplyArtifacts(resourceGroupName: string, labName: string, name: string, applyArtifactsRequest: models.ApplyArtifactsRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Take ownership of an existing virtual machine This operation can take a
     * while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginClaimWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Take ownership of an existing virtual machine This operation can take a
     * while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginClaim(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginClaim(resourceGroupName: string, labName: string, name: string, callback: ServiceCallback<void>): void;
    beginClaim(resourceGroupName: string, labName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Detach the specified disk from the virtual machine. This operation can take
     * a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} detachDataDiskProperties Request body for detaching data
     * disk from a virtual machine.
     *
     * @param {string} [detachDataDiskProperties.existingLabDiskId] Specifies the
     * disk resource ID to detach from virtual machine.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDetachDataDiskWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, detachDataDiskProperties: models.DetachDataDiskProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Detach the specified disk from the virtual machine. This operation can take
     * a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} detachDataDiskProperties Request body for detaching data
     * disk from a virtual machine.
     *
     * @param {string} [detachDataDiskProperties.existingLabDiskId] Specifies the
     * disk resource ID to detach from virtual machine.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDetachDataDisk(resourceGroupName: string, labName: string, name: string, detachDataDiskProperties: models.DetachDataDiskProperties, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDetachDataDisk(resourceGroupName: string, labName: string, name: string, detachDataDiskProperties: models.DetachDataDiskProperties, callback: ServiceCallback<void>): void;
    beginDetachDataDisk(resourceGroupName: string, labName: string, name: string, detachDataDiskProperties: models.DetachDataDiskProperties, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Start a virtual machine. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginStartWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Start a virtual machine. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginStart(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginStart(resourceGroupName: string, labName: string, name: string, callback: ServiceCallback<void>): void;
    beginStart(resourceGroupName: string, labName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Stop a virtual machine This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginStopWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Stop a virtual machine This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual machine.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginStop(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginStop(resourceGroupName: string, labName: string, name: string, callback: ServiceCallback<void>): void;
    beginStop(resourceGroupName: string, labName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * List virtual machines in a given lab.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationLabVirtualMachine>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationLabVirtualMachine>>;

    /**
     * List virtual machines in a given lab.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationLabVirtualMachine} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationLabVirtualMachine} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationLabVirtualMachine}
     *                      for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationLabVirtualMachine>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ResponseWithContinuationLabVirtualMachine>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationLabVirtualMachine>): void;
}

/**
 * @class
 * VirtualMachineSchedules
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DevTestLabsClient.
 */
export interface VirtualMachineSchedules {


    /**
     * List schedules in a given virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} virtualMachineName The name of the virtual machine.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=status)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationSchedule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, labName: string, virtualMachineName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationSchedule>>;

    /**
     * List schedules in a given virtual machine.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} virtualMachineName The name of the virtual machine.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=status)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationSchedule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationSchedule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationSchedule} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, labName: string, virtualMachineName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationSchedule>;
    list(resourceGroupName: string, labName: string, virtualMachineName: string, callback: ServiceCallback<models.ResponseWithContinuationSchedule>): void;
    list(resourceGroupName: string, labName: string, virtualMachineName: string, options: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationSchedule>): void;


    /**
     * Get schedule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} virtualMachineName The name of the virtual machine.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=status)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Schedule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, labName: string, virtualMachineName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Schedule>>;

    /**
     * Get schedule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} virtualMachineName The name of the virtual machine.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($select=status)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Schedule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Schedule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Schedule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, labName: string, virtualMachineName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.Schedule>;
    get(resourceGroupName: string, labName: string, virtualMachineName: string, name: string, callback: ServiceCallback<models.Schedule>): void;
    get(resourceGroupName: string, labName: string, virtualMachineName: string, name: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Schedule>): void;


    /**
     * Create or replace an existing schedule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} virtualMachineName The name of the virtual machine.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} schedule A schedule.
     *
     * @param {string} [schedule.status] The status of the schedule (i.e. Enabled,
     * Disabled). Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [schedule.taskType] The task type of the schedule (e.g.
     * LabVmsShutdownTask, LabVmAutoStart).
     *
     * @param {object} [schedule.weeklyRecurrence] If the schedule will occur only
     * some days of the week, specify the weekly recurrence.
     *
     * @param {array} [schedule.weeklyRecurrence.weekdays] The days of the week for
     * which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.).
     *
     * @param {string} [schedule.weeklyRecurrence.time] The time of the day the
     * schedule will occur.
     *
     * @param {object} [schedule.dailyRecurrence] If the schedule will occur once
     * each day of the week, specify the daily recurrence.
     *
     * @param {string} [schedule.dailyRecurrence.time] The time of day the schedule
     * will occur.
     *
     * @param {object} [schedule.hourlyRecurrence] If the schedule will occur
     * multiple times a day, specify the hourly recurrence.
     *
     * @param {number} [schedule.hourlyRecurrence.minute] Minutes of the hour the
     * schedule will run.
     *
     * @param {string} [schedule.timeZoneId] The time zone ID (e.g. Pacific
     * Standard time).
     *
     * @param {object} [schedule.notificationSettings] Notification settings.
     *
     * @param {string} [schedule.notificationSettings.status] If notifications are
     * enabled for this schedule (i.e. Enabled, Disabled). Possible values include:
     * 'Disabled', 'Enabled'
     *
     * @param {number} [schedule.notificationSettings.timeInMinutes] Time in
     * minutes before event at which notification will be sent.
     *
     * @param {string} [schedule.notificationSettings.webhookUrl] The webhook URL
     * to which the notification will be sent.
     *
     * @param {string} [schedule.targetResourceId] The resource ID to which the
     * schedule belongs
     *
     * @param {string} [schedule.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [schedule.uniqueIdentifier] The unique immutable identifier
     * of a resource (Guid).
     *
     * @param {string} [schedule.location] The location of the resource.
     *
     * @param {object} [schedule.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Schedule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, labName: string, virtualMachineName: string, name: string, schedule: models.Schedule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Schedule>>;

    /**
     * Create or replace an existing schedule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} virtualMachineName The name of the virtual machine.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} schedule A schedule.
     *
     * @param {string} [schedule.status] The status of the schedule (i.e. Enabled,
     * Disabled). Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [schedule.taskType] The task type of the schedule (e.g.
     * LabVmsShutdownTask, LabVmAutoStart).
     *
     * @param {object} [schedule.weeklyRecurrence] If the schedule will occur only
     * some days of the week, specify the weekly recurrence.
     *
     * @param {array} [schedule.weeklyRecurrence.weekdays] The days of the week for
     * which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.).
     *
     * @param {string} [schedule.weeklyRecurrence.time] The time of the day the
     * schedule will occur.
     *
     * @param {object} [schedule.dailyRecurrence] If the schedule will occur once
     * each day of the week, specify the daily recurrence.
     *
     * @param {string} [schedule.dailyRecurrence.time] The time of day the schedule
     * will occur.
     *
     * @param {object} [schedule.hourlyRecurrence] If the schedule will occur
     * multiple times a day, specify the hourly recurrence.
     *
     * @param {number} [schedule.hourlyRecurrence.minute] Minutes of the hour the
     * schedule will run.
     *
     * @param {string} [schedule.timeZoneId] The time zone ID (e.g. Pacific
     * Standard time).
     *
     * @param {object} [schedule.notificationSettings] Notification settings.
     *
     * @param {string} [schedule.notificationSettings.status] If notifications are
     * enabled for this schedule (i.e. Enabled, Disabled). Possible values include:
     * 'Disabled', 'Enabled'
     *
     * @param {number} [schedule.notificationSettings.timeInMinutes] Time in
     * minutes before event at which notification will be sent.
     *
     * @param {string} [schedule.notificationSettings.webhookUrl] The webhook URL
     * to which the notification will be sent.
     *
     * @param {string} [schedule.targetResourceId] The resource ID to which the
     * schedule belongs
     *
     * @param {string} [schedule.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [schedule.uniqueIdentifier] The unique immutable identifier
     * of a resource (Guid).
     *
     * @param {string} [schedule.location] The location of the resource.
     *
     * @param {object} [schedule.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Schedule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Schedule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Schedule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, labName: string, virtualMachineName: string, name: string, schedule: models.Schedule, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Schedule>;
    createOrUpdate(resourceGroupName: string, labName: string, virtualMachineName: string, name: string, schedule: models.Schedule, callback: ServiceCallback<models.Schedule>): void;
    createOrUpdate(resourceGroupName: string, labName: string, virtualMachineName: string, name: string, schedule: models.Schedule, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Schedule>): void;


    /**
     * Delete schedule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} virtualMachineName The name of the virtual machine.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, labName: string, virtualMachineName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete schedule.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} virtualMachineName The name of the virtual machine.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, labName: string, virtualMachineName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, labName: string, virtualMachineName: string, name: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, labName: string, virtualMachineName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Modify properties of schedules.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} virtualMachineName The name of the virtual machine.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} schedule A schedule.
     *
     * @param {string} [schedule.status] The status of the schedule (i.e. Enabled,
     * Disabled). Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [schedule.taskType] The task type of the schedule (e.g.
     * LabVmsShutdownTask, LabVmAutoStart).
     *
     * @param {object} [schedule.weeklyRecurrence] If the schedule will occur only
     * some days of the week, specify the weekly recurrence.
     *
     * @param {array} [schedule.weeklyRecurrence.weekdays] The days of the week for
     * which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.).
     *
     * @param {string} [schedule.weeklyRecurrence.time] The time of the day the
     * schedule will occur.
     *
     * @param {object} [schedule.dailyRecurrence] If the schedule will occur once
     * each day of the week, specify the daily recurrence.
     *
     * @param {string} [schedule.dailyRecurrence.time] The time of day the schedule
     * will occur.
     *
     * @param {object} [schedule.hourlyRecurrence] If the schedule will occur
     * multiple times a day, specify the hourly recurrence.
     *
     * @param {number} [schedule.hourlyRecurrence.minute] Minutes of the hour the
     * schedule will run.
     *
     * @param {string} [schedule.timeZoneId] The time zone ID (e.g. Pacific
     * Standard time).
     *
     * @param {object} [schedule.notificationSettings] Notification settings.
     *
     * @param {string} [schedule.notificationSettings.status] If notifications are
     * enabled for this schedule (i.e. Enabled, Disabled). Possible values include:
     * 'Disabled', 'Enabled'
     *
     * @param {number} [schedule.notificationSettings.timeInMinutes] Time in
     * minutes before event at which notification will be sent.
     *
     * @param {string} [schedule.notificationSettings.webhookUrl] The webhook URL
     * to which the notification will be sent.
     *
     * @param {string} [schedule.targetResourceId] The resource ID to which the
     * schedule belongs
     *
     * @param {string} [schedule.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [schedule.uniqueIdentifier] The unique immutable identifier
     * of a resource (Guid).
     *
     * @param {string} [schedule.location] The location of the resource.
     *
     * @param {object} [schedule.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Schedule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, labName: string, virtualMachineName: string, name: string, schedule: models.ScheduleFragment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Schedule>>;

    /**
     * Modify properties of schedules.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} virtualMachineName The name of the virtual machine.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} schedule A schedule.
     *
     * @param {string} [schedule.status] The status of the schedule (i.e. Enabled,
     * Disabled). Possible values include: 'Enabled', 'Disabled'
     *
     * @param {string} [schedule.taskType] The task type of the schedule (e.g.
     * LabVmsShutdownTask, LabVmAutoStart).
     *
     * @param {object} [schedule.weeklyRecurrence] If the schedule will occur only
     * some days of the week, specify the weekly recurrence.
     *
     * @param {array} [schedule.weeklyRecurrence.weekdays] The days of the week for
     * which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.).
     *
     * @param {string} [schedule.weeklyRecurrence.time] The time of the day the
     * schedule will occur.
     *
     * @param {object} [schedule.dailyRecurrence] If the schedule will occur once
     * each day of the week, specify the daily recurrence.
     *
     * @param {string} [schedule.dailyRecurrence.time] The time of day the schedule
     * will occur.
     *
     * @param {object} [schedule.hourlyRecurrence] If the schedule will occur
     * multiple times a day, specify the hourly recurrence.
     *
     * @param {number} [schedule.hourlyRecurrence.minute] Minutes of the hour the
     * schedule will run.
     *
     * @param {string} [schedule.timeZoneId] The time zone ID (e.g. Pacific
     * Standard time).
     *
     * @param {object} [schedule.notificationSettings] Notification settings.
     *
     * @param {string} [schedule.notificationSettings.status] If notifications are
     * enabled for this schedule (i.e. Enabled, Disabled). Possible values include:
     * 'Disabled', 'Enabled'
     *
     * @param {number} [schedule.notificationSettings.timeInMinutes] Time in
     * minutes before event at which notification will be sent.
     *
     * @param {string} [schedule.notificationSettings.webhookUrl] The webhook URL
     * to which the notification will be sent.
     *
     * @param {string} [schedule.targetResourceId] The resource ID to which the
     * schedule belongs
     *
     * @param {string} [schedule.provisioningState] The provisioning status of the
     * resource.
     *
     * @param {string} [schedule.uniqueIdentifier] The unique immutable identifier
     * of a resource (Guid).
     *
     * @param {string} [schedule.location] The location of the resource.
     *
     * @param {object} [schedule.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Schedule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Schedule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Schedule} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, labName: string, virtualMachineName: string, name: string, schedule: models.ScheduleFragment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Schedule>;
    update(resourceGroupName: string, labName: string, virtualMachineName: string, name: string, schedule: models.ScheduleFragment, callback: ServiceCallback<models.Schedule>): void;
    update(resourceGroupName: string, labName: string, virtualMachineName: string, name: string, schedule: models.ScheduleFragment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Schedule>): void;


    /**
     * Execute a schedule. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} virtualMachineName The name of the virtual machine.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    executeWithHttpOperationResponse(resourceGroupName: string, labName: string, virtualMachineName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Execute a schedule. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} virtualMachineName The name of the virtual machine.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    execute(resourceGroupName: string, labName: string, virtualMachineName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    execute(resourceGroupName: string, labName: string, virtualMachineName: string, name: string, callback: ServiceCallback<void>): void;
    execute(resourceGroupName: string, labName: string, virtualMachineName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Execute a schedule. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} virtualMachineName The name of the virtual machine.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginExecuteWithHttpOperationResponse(resourceGroupName: string, labName: string, virtualMachineName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Execute a schedule. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} virtualMachineName The name of the virtual machine.
     *
     * @param {string} name The name of the schedule.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginExecute(resourceGroupName: string, labName: string, virtualMachineName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginExecute(resourceGroupName: string, labName: string, virtualMachineName: string, name: string, callback: ServiceCallback<void>): void;
    beginExecute(resourceGroupName: string, labName: string, virtualMachineName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * List schedules in a given virtual machine.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationSchedule>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationSchedule>>;

    /**
     * List schedules in a given virtual machine.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationSchedule} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationSchedule} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationSchedule} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationSchedule>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ResponseWithContinuationSchedule>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationSchedule>): void;
}

/**
 * @class
 * VirtualNetworks
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the DevTestLabsClient.
 */
export interface VirtualNetworks {


    /**
     * List virtual networks in a given lab.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($expand=externalSubnets)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationVirtualNetwork>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, labName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationVirtualNetwork>>;

    /**
     * List virtual networks in a given lab.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($expand=externalSubnets)'
     *
     * @param {string} [options.filter] The filter to apply to the operation.
     *
     * @param {number} [options.top] The maximum number of resources to return from
     * the operation.
     *
     * @param {string} [options.orderby] The ordering expression for the results,
     * using OData notation.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationVirtualNetwork} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationVirtualNetwork} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationVirtualNetwork} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, labName: string, options?: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationVirtualNetwork>;
    list(resourceGroupName: string, labName: string, callback: ServiceCallback<models.ResponseWithContinuationVirtualNetwork>): void;
    list(resourceGroupName: string, labName: string, options: { expand? : string, filter? : string, top? : number, orderby? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationVirtualNetwork>): void;


    /**
     * Get virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($expand=externalSubnets)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetwork>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetwork>>;

    /**
     * Get virtual network.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.expand] Specify the $expand query. Example:
     * 'properties($expand=externalSubnets)'
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetwork} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetwork} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetwork} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, labName: string, name: string, options?: { expand? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetwork>;
    get(resourceGroupName: string, labName: string, name: string, callback: ServiceCallback<models.VirtualNetwork>): void;
    get(resourceGroupName: string, labName: string, name: string, options: { expand? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetwork>): void;


    /**
     * Create or replace an existing virtual network. This operation can take a
     * while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual network.
     *
     * @param {object} virtualNetwork A virtual network.
     *
     * @param {array} [virtualNetwork.allowedSubnets] The allowed subnets of the
     * virtual network.
     *
     * @param {string} [virtualNetwork.description] The description of the virtual
     * network.
     *
     * @param {string} [virtualNetwork.externalProviderResourceId] The
     * Microsoft.Network resource identifier of the virtual network.
     *
     * @param {array} [virtualNetwork.externalSubnets] The external subnet
     * properties.
     *
     * @param {array} [virtualNetwork.subnetOverrides] The subnet overrides of the
     * virtual network.
     *
     * @param {string} [virtualNetwork.provisioningState] The provisioning status
     * of the resource.
     *
     * @param {string} [virtualNetwork.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [virtualNetwork.location] The location of the resource.
     *
     * @param {object} [virtualNetwork.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetwork>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, virtualNetwork: models.VirtualNetwork, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetwork>>;

    /**
     * Create or replace an existing virtual network. This operation can take a
     * while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual network.
     *
     * @param {object} virtualNetwork A virtual network.
     *
     * @param {array} [virtualNetwork.allowedSubnets] The allowed subnets of the
     * virtual network.
     *
     * @param {string} [virtualNetwork.description] The description of the virtual
     * network.
     *
     * @param {string} [virtualNetwork.externalProviderResourceId] The
     * Microsoft.Network resource identifier of the virtual network.
     *
     * @param {array} [virtualNetwork.externalSubnets] The external subnet
     * properties.
     *
     * @param {array} [virtualNetwork.subnetOverrides] The subnet overrides of the
     * virtual network.
     *
     * @param {string} [virtualNetwork.provisioningState] The provisioning status
     * of the resource.
     *
     * @param {string} [virtualNetwork.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [virtualNetwork.location] The location of the resource.
     *
     * @param {object} [virtualNetwork.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetwork} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetwork} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetwork} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, labName: string, name: string, virtualNetwork: models.VirtualNetwork, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetwork>;
    createOrUpdate(resourceGroupName: string, labName: string, name: string, virtualNetwork: models.VirtualNetwork, callback: ServiceCallback<models.VirtualNetwork>): void;
    createOrUpdate(resourceGroupName: string, labName: string, name: string, virtualNetwork: models.VirtualNetwork, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetwork>): void;


    /**
     * Delete virtual network. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete virtual network. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, labName: string, name: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, labName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Modify properties of virtual networks.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual network.
     *
     * @param {object} virtualNetwork A virtual network.
     *
     * @param {array} [virtualNetwork.allowedSubnets] The allowed subnets of the
     * virtual network.
     *
     * @param {string} [virtualNetwork.description] The description of the virtual
     * network.
     *
     * @param {string} [virtualNetwork.externalProviderResourceId] The
     * Microsoft.Network resource identifier of the virtual network.
     *
     * @param {array} [virtualNetwork.externalSubnets] The external subnet
     * properties.
     *
     * @param {array} [virtualNetwork.subnetOverrides] The subnet overrides of the
     * virtual network.
     *
     * @param {string} [virtualNetwork.provisioningState] The provisioning status
     * of the resource.
     *
     * @param {string} [virtualNetwork.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [virtualNetwork.location] The location of the resource.
     *
     * @param {object} [virtualNetwork.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetwork>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, virtualNetwork: models.VirtualNetworkFragment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetwork>>;

    /**
     * Modify properties of virtual networks.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual network.
     *
     * @param {object} virtualNetwork A virtual network.
     *
     * @param {array} [virtualNetwork.allowedSubnets] The allowed subnets of the
     * virtual network.
     *
     * @param {string} [virtualNetwork.description] The description of the virtual
     * network.
     *
     * @param {string} [virtualNetwork.externalProviderResourceId] The
     * Microsoft.Network resource identifier of the virtual network.
     *
     * @param {array} [virtualNetwork.externalSubnets] The external subnet
     * properties.
     *
     * @param {array} [virtualNetwork.subnetOverrides] The subnet overrides of the
     * virtual network.
     *
     * @param {string} [virtualNetwork.provisioningState] The provisioning status
     * of the resource.
     *
     * @param {string} [virtualNetwork.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [virtualNetwork.location] The location of the resource.
     *
     * @param {object} [virtualNetwork.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetwork} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetwork} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetwork} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, labName: string, name: string, virtualNetwork: models.VirtualNetworkFragment, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetwork>;
    update(resourceGroupName: string, labName: string, name: string, virtualNetwork: models.VirtualNetworkFragment, callback: ServiceCallback<models.VirtualNetwork>): void;
    update(resourceGroupName: string, labName: string, name: string, virtualNetwork: models.VirtualNetworkFragment, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetwork>): void;


    /**
     * Create or replace an existing virtual network. This operation can take a
     * while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual network.
     *
     * @param {object} virtualNetwork A virtual network.
     *
     * @param {array} [virtualNetwork.allowedSubnets] The allowed subnets of the
     * virtual network.
     *
     * @param {string} [virtualNetwork.description] The description of the virtual
     * network.
     *
     * @param {string} [virtualNetwork.externalProviderResourceId] The
     * Microsoft.Network resource identifier of the virtual network.
     *
     * @param {array} [virtualNetwork.externalSubnets] The external subnet
     * properties.
     *
     * @param {array} [virtualNetwork.subnetOverrides] The subnet overrides of the
     * virtual network.
     *
     * @param {string} [virtualNetwork.provisioningState] The provisioning status
     * of the resource.
     *
     * @param {string} [virtualNetwork.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [virtualNetwork.location] The location of the resource.
     *
     * @param {object} [virtualNetwork.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<VirtualNetwork>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, virtualNetwork: models.VirtualNetwork, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.VirtualNetwork>>;

    /**
     * Create or replace an existing virtual network. This operation can take a
     * while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual network.
     *
     * @param {object} virtualNetwork A virtual network.
     *
     * @param {array} [virtualNetwork.allowedSubnets] The allowed subnets of the
     * virtual network.
     *
     * @param {string} [virtualNetwork.description] The description of the virtual
     * network.
     *
     * @param {string} [virtualNetwork.externalProviderResourceId] The
     * Microsoft.Network resource identifier of the virtual network.
     *
     * @param {array} [virtualNetwork.externalSubnets] The external subnet
     * properties.
     *
     * @param {array} [virtualNetwork.subnetOverrides] The subnet overrides of the
     * virtual network.
     *
     * @param {string} [virtualNetwork.provisioningState] The provisioning status
     * of the resource.
     *
     * @param {string} [virtualNetwork.uniqueIdentifier] The unique immutable
     * identifier of a resource (Guid).
     *
     * @param {string} [virtualNetwork.location] The location of the resource.
     *
     * @param {object} [virtualNetwork.tags] The tags of the resource.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {VirtualNetwork} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {VirtualNetwork} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link VirtualNetwork} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, labName: string, name: string, virtualNetwork: models.VirtualNetwork, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.VirtualNetwork>;
    beginCreateOrUpdate(resourceGroupName: string, labName: string, name: string, virtualNetwork: models.VirtualNetwork, callback: ServiceCallback<models.VirtualNetwork>): void;
    beginCreateOrUpdate(resourceGroupName: string, labName: string, name: string, virtualNetwork: models.VirtualNetwork, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.VirtualNetwork>): void;


    /**
     * Delete virtual network. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete virtual network. This operation can take a while to complete.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} labName The name of the lab.
     *
     * @param {string} name The name of the virtual network.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, labName: string, name: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, labName: string, name: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, labName: string, name: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * List virtual networks in a given lab.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ResponseWithContinuationVirtualNetwork>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ResponseWithContinuationVirtualNetwork>>;

    /**
     * List virtual networks in a given lab.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ResponseWithContinuationVirtualNetwork} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ResponseWithContinuationVirtualNetwork} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ResponseWithContinuationVirtualNetwork} for
     *                      more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ResponseWithContinuationVirtualNetwork>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ResponseWithContinuationVirtualNetwork>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ResponseWithContinuationVirtualNetwork>): void;
}
