/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const WebResource = msRest.WebResource;

/**
 * List formulas in a given lab.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} labName The name of the lab.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.expand] Specify the $expand query. Example:
 * 'properties($select=description)'
 *
 * @param {string} [options.filter] The filter to apply to the operation.
 *
 * @param {number} [options.top] The maximum number of resources to return from
 * the operation.
 *
 * @param {string} [options.orderby] The ordering expression for the results,
 * using OData notation.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ResponseWithContinuationFormula} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _list(resourceGroupName, labName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  let filter = (options && options.filter !== undefined) ? options.filter : undefined;
  let top = (options && options.top !== undefined) ? options.top : undefined;
  let orderby = (options && options.orderby !== undefined) ? options.orderby : undefined;
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (labName === null || labName === undefined || typeof labName.valueOf() !== 'string') {
      throw new Error('labName cannot be null or undefined and it must be of type string.');
    }
    if (expand !== null && expand !== undefined && typeof expand.valueOf() !== 'string') {
      throw new Error('expand must be of type string.');
    }
    if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {
      throw new Error('filter must be of type string.');
    }
    if (top !== null && top !== undefined && typeof top !== 'number') {
      throw new Error('top must be of type number.');
    }
    if (orderby !== null && orderby !== undefined && typeof orderby.valueOf() !== 'string') {
      throw new Error('orderby must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/formulas';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{labName}', encodeURIComponent(labName));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand));
  }
  if (filter !== null && filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(filter));
  }
  if (top !== null && top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(top.toString()));
  }
  if (orderby !== null && orderby !== undefined) {
    queryParameters.push('$orderby=' + encodeURIComponent(orderby));
  }
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ResponseWithContinuationFormula']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Get formula.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} labName The name of the lab.
 *
 * @param {string} name The name of the formula.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.expand] Specify the $expand query. Example:
 * 'properties($select=description)'
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Formula} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _get(resourceGroupName, labName, name, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let expand = (options && options.expand !== undefined) ? options.expand : undefined;
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (labName === null || labName === undefined || typeof labName.valueOf() !== 'string') {
      throw new Error('labName cannot be null or undefined and it must be of type string.');
    }
    if (name === null || name === undefined || typeof name.valueOf() !== 'string') {
      throw new Error('name cannot be null or undefined and it must be of type string.');
    }
    if (expand !== null && expand !== undefined && typeof expand.valueOf() !== 'string') {
      throw new Error('expand must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/formulas/{name}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{labName}', encodeURIComponent(labName));
  requestUrl = requestUrl.replace('{name}', encodeURIComponent(name));
  let queryParameters = [];
  if (expand !== null && expand !== undefined) {
    queryParameters.push('$expand=' + encodeURIComponent(expand));
  }
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Formula']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}


/**
 * Create or replace an existing Formula. This operation can take a while to
 * complete.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} labName The name of the lab.
 *
 * @param {string} name The name of the formula.
 *
 * @param {object} formula A formula for creating a VM, specifying an image
 * base and other parameters
 *
 * @param {string} [formula.description] The description of the formula.
 *
 * @param {string} [formula.author] The author of the formula.
 *
 * @param {string} [formula.osType] The OS type of the formula.
 *
 * @param {object} [formula.formulaContent] The content of the formula.
 *
 * @param {object} [formula.formulaContent.bulkCreationParameters] The number
 * of virtual machine instances to create.
 *
 * @param {number}
 * [formula.formulaContent.bulkCreationParameters.instanceCount] The number of
 * virtual machine instances to create.
 *
 * @param {string} [formula.formulaContent.notes] The notes of the virtual
 * machine.
 *
 * @param {string} [formula.formulaContent.ownerObjectId] The object identifier
 * of the owner of the virtual machine.
 *
 * @param {string} [formula.formulaContent.ownerUserPrincipalName] The user
 * principal name of the virtual machine owner.
 *
 * @param {string} [formula.formulaContent.createdByUserId] The object
 * identifier of the creator of the virtual machine.
 *
 * @param {string} [formula.formulaContent.createdByUser] The email address of
 * creator of the virtual machine.
 *
 * @param {date} [formula.formulaContent.createdDate] The creation date of the
 * virtual machine.
 *
 * @param {string} [formula.formulaContent.customImageId] The custom image
 * identifier of the virtual machine.
 *
 * @param {string} [formula.formulaContent.osType] The OS type of the virtual
 * machine.
 *
 * @param {string} [formula.formulaContent.size] The size of the virtual
 * machine.
 *
 * @param {string} [formula.formulaContent.userName] The user name of the
 * virtual machine.
 *
 * @param {string} [formula.formulaContent.password] The password of the
 * virtual machine administrator.
 *
 * @param {string} [formula.formulaContent.sshKey] The SSH key of the virtual
 * machine administrator.
 *
 * @param {boolean} [formula.formulaContent.isAuthenticationWithSshKey]
 * Indicates whether this virtual machine uses an SSH key for authentication.
 *
 * @param {string} [formula.formulaContent.fqdn] The fully-qualified domain
 * name of the virtual machine.
 *
 * @param {string} [formula.formulaContent.labSubnetName] The lab subnet name
 * of the virtual machine.
 *
 * @param {string} [formula.formulaContent.labVirtualNetworkId] The lab virtual
 * network identifier of the virtual machine.
 *
 * @param {boolean} [formula.formulaContent.disallowPublicIpAddress] Indicates
 * whether the virtual machine is to be created without a public IP address.
 *
 * @param {array} [formula.formulaContent.artifacts] The artifacts to be
 * installed on the virtual machine.
 *
 * @param {object} [formula.formulaContent.artifactDeploymentStatus] The
 * artifact deployment status for the virtual machine.
 *
 * @param {string}
 * [formula.formulaContent.artifactDeploymentStatus.deploymentStatus] The
 * deployment status of the artifact.
 *
 * @param {number}
 * [formula.formulaContent.artifactDeploymentStatus.artifactsApplied] The total
 * count of the artifacts that were successfully applied.
 *
 * @param {number}
 * [formula.formulaContent.artifactDeploymentStatus.totalArtifacts] The total
 * count of the artifacts that were tentatively applied.
 *
 * @param {object} [formula.formulaContent.galleryImageReference] The Microsoft
 * Azure Marketplace image reference of the virtual machine.
 *
 * @param {string} [formula.formulaContent.galleryImageReference.offer] The
 * offer of the gallery image.
 *
 * @param {string} [formula.formulaContent.galleryImageReference.publisher] The
 * publisher of the gallery image.
 *
 * @param {string} [formula.formulaContent.galleryImageReference.sku] The SKU
 * of the gallery image.
 *
 * @param {string} [formula.formulaContent.galleryImageReference.osType] The OS
 * type of the gallery image.
 *
 * @param {string} [formula.formulaContent.galleryImageReference.version] The
 * version of the gallery image.
 *
 * @param {object} [formula.formulaContent.computeVm] The compute virtual
 * machine properties.
 *
 * @param {array} [formula.formulaContent.computeVm.statuses] Gets the statuses
 * of the virtual machine.
 *
 * @param {string} [formula.formulaContent.computeVm.osType] Gets the OS type
 * of the virtual machine.
 *
 * @param {string} [formula.formulaContent.computeVm.vmSize] Gets the size of
 * the virtual machine.
 *
 * @param {string} [formula.formulaContent.computeVm.networkInterfaceId] Gets
 * the network interface ID of the virtual machine.
 *
 * @param {string} [formula.formulaContent.computeVm.osDiskId] Gets OS disk
 * blob uri for the virtual machine.
 *
 * @param {array} [formula.formulaContent.computeVm.dataDiskIds] Gets data
 * disks blob uri for the virtual machine.
 *
 * @param {array} [formula.formulaContent.computeVm.dataDisks] Gets all data
 * disks attached to the virtual machine.
 *
 * @param {object} [formula.formulaContent.networkInterface] The network
 * interface properties.
 *
 * @param {string} [formula.formulaContent.networkInterface.virtualNetworkId]
 * The resource ID of the virtual network.
 *
 * @param {string} [formula.formulaContent.networkInterface.subnetId] The
 * resource ID of the sub net.
 *
 * @param {string} [formula.formulaContent.networkInterface.publicIpAddressId]
 * The resource ID of the public IP address.
 *
 * @param {string} [formula.formulaContent.networkInterface.publicIpAddress]
 * The public IP address.
 *
 * @param {string} [formula.formulaContent.networkInterface.privateIpAddress]
 * The private IP address.
 *
 * @param {string} [formula.formulaContent.networkInterface.dnsName] The DNS
 * name.
 *
 * @param {string} [formula.formulaContent.networkInterface.rdpAuthority] The
 * RdpAuthority property is a server DNS host name or IP address followed by
 * the service port number for RDP (Remote Desktop Protocol).
 *
 * @param {string} [formula.formulaContent.networkInterface.sshAuthority] The
 * SshAuthority property is a server DNS host name or IP address followed by
 * the service port number for SSH.
 *
 * @param {object}
 * [formula.formulaContent.networkInterface.sharedPublicIpAddressConfiguration]
 * The configuration for sharing a public IP address across multiple virtual
 * machines.
 *
 * @param {array}
 * [formula.formulaContent.networkInterface.sharedPublicIpAddressConfiguration.inboundNatRules]
 * The incoming NAT rules
 *
 * @param {object} [formula.formulaContent.applicableSchedule] The applicable
 * schedule for the virtual machine.
 *
 * @param {object} [formula.formulaContent.applicableSchedule.labVmsShutdown]
 * The auto-shutdown schedule, if one has been set at the lab or lab resource
 * level.
 *
 * @param {object} [formula.formulaContent.applicableSchedule.labVmsStartup]
 * The auto-startup schedule, if one has been set at the lab or lab resource
 * level.
 *
 * @param {string}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.status] The status
 * of the schedule (i.e. Enabled, Disabled). Possible values include:
 * 'Enabled', 'Disabled'
 *
 * @param {string}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.taskType] The task
 * type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
 *
 * @param {object}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.weeklyRecurrence]
 * If the schedule will occur only some days of the week, specify the weekly
 * recurrence.
 *
 * @param {array}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.weeklyRecurrence.weekdays]
 * The days of the week for which the schedule is set (e.g. Sunday, Monday,
 * Tuesday, etc.).
 *
 * @param {string}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.weeklyRecurrence.time]
 * The time of the day the schedule will occur.
 *
 * @param {object}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.dailyRecurrence] If
 * the schedule will occur once each day of the week, specify the daily
 * recurrence.
 *
 * @param {string}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.dailyRecurrence.time]
 * The time of day the schedule will occur.
 *
 * @param {object}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.hourlyRecurrence]
 * If the schedule will occur multiple times a day, specify the hourly
 * recurrence.
 *
 * @param {number}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.hourlyRecurrence.minute]
 * Minutes of the hour the schedule will run.
 *
 * @param {string}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.timeZoneId] The
 * time zone ID (e.g. Pacific Standard time).
 *
 * @param {object}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings]
 * Notification settings.
 *
 * @param {string}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings.status]
 * If notifications are enabled for this schedule (i.e. Enabled, Disabled).
 * Possible values include: 'Disabled', 'Enabled'
 *
 * @param {number}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings.timeInMinutes]
 * Time in minutes before event at which notification will be sent.
 *
 * @param {string}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings.webhookUrl]
 * The webhook URL to which the notification will be sent.
 *
 * @param {string}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.targetResourceId]
 * The resource ID to which the schedule belongs
 *
 * @param {string}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.provisioningState]
 * The provisioning status of the resource.
 *
 * @param {string}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.uniqueIdentifier]
 * The unique immutable identifier of a resource (Guid).
 *
 * @param {string}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.location] The
 * location of the resource.
 *
 * @param {object}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.tags] The tags of
 * the resource.
 *
 * @param {string} [formula.formulaContent.applicableSchedule.location] The
 * location of the resource.
 *
 * @param {object} [formula.formulaContent.applicableSchedule.tags] The tags of
 * the resource.
 *
 * @param {date} [formula.formulaContent.expirationDate] The expiration date
 * for VM.
 *
 * @param {boolean} [formula.formulaContent.allowClaim] Indicates whether
 * another user can take ownership of the virtual machine
 *
 * @param {string} [formula.formulaContent.storageType] Storage type to use for
 * virtual machine (i.e. Standard, Premium).
 *
 * @param {string} [formula.formulaContent.virtualMachineCreationSource] Tells
 * source of creation of lab virtual machine. Output property only. Possible
 * values include: 'FromCustomImage', 'FromGalleryImage'
 *
 * @param {string} [formula.formulaContent.environmentId] The resource ID of
 * the environment that contains this virtual machine, if any.
 *
 * @param {string} [formula.formulaContent.provisioningState] The provisioning
 * status of the resource.
 *
 * @param {string} [formula.formulaContent.uniqueIdentifier] The unique
 * immutable identifier of a resource (Guid).
 *
 * @param {string} [formula.formulaContent.name] The name of the virtual
 * machine or environment
 *
 * @param {string} [formula.formulaContent.location] The location of the new
 * virtual machine or environment
 *
 * @param {object} [formula.formulaContent.tags] The tags of the resource.
 *
 * @param {object} [formula.vm] Information about a VM from which a formula is
 * to be created.
 *
 * @param {string} [formula.vm.labVmId] The identifier of the VM from which a
 * formula is to be created.
 *
 * @param {string} [formula.provisioningState] The provisioning status of the
 * resource.
 *
 * @param {string} [formula.uniqueIdentifier] The unique immutable identifier
 * of a resource (Guid).
 *
 * @param {string} [formula.location] The location of the resource.
 *
 * @param {object} [formula.tags] The tags of the resource.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Formula} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _createOrUpdate(resourceGroupName, labName, name, formula, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginCreateOrUpdate(resourceGroupName, labName, name, formula, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Formula']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}

/**
 * Delete formula.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} labName The name of the lab.
 *
 * @param {string} name The name of the formula.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteMethod(resourceGroupName, labName, name, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (labName === null || labName === undefined || typeof labName.valueOf() !== 'string') {
      throw new Error('labName cannot be null or undefined and it must be of type string.');
    }
    if (name === null || name === undefined || typeof name.valueOf() !== 'string') {
      throw new Error('name cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/formulas/{name}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{labName}', encodeURIComponent(labName));
  requestUrl = requestUrl.replace('{name}', encodeURIComponent(name));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Create or replace an existing Formula. This operation can take a while to
 * complete.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} labName The name of the lab.
 *
 * @param {string} name The name of the formula.
 *
 * @param {object} formula A formula for creating a VM, specifying an image
 * base and other parameters
 *
 * @param {string} [formula.description] The description of the formula.
 *
 * @param {string} [formula.author] The author of the formula.
 *
 * @param {string} [formula.osType] The OS type of the formula.
 *
 * @param {object} [formula.formulaContent] The content of the formula.
 *
 * @param {object} [formula.formulaContent.bulkCreationParameters] The number
 * of virtual machine instances to create.
 *
 * @param {number}
 * [formula.formulaContent.bulkCreationParameters.instanceCount] The number of
 * virtual machine instances to create.
 *
 * @param {string} [formula.formulaContent.notes] The notes of the virtual
 * machine.
 *
 * @param {string} [formula.formulaContent.ownerObjectId] The object identifier
 * of the owner of the virtual machine.
 *
 * @param {string} [formula.formulaContent.ownerUserPrincipalName] The user
 * principal name of the virtual machine owner.
 *
 * @param {string} [formula.formulaContent.createdByUserId] The object
 * identifier of the creator of the virtual machine.
 *
 * @param {string} [formula.formulaContent.createdByUser] The email address of
 * creator of the virtual machine.
 *
 * @param {date} [formula.formulaContent.createdDate] The creation date of the
 * virtual machine.
 *
 * @param {string} [formula.formulaContent.customImageId] The custom image
 * identifier of the virtual machine.
 *
 * @param {string} [formula.formulaContent.osType] The OS type of the virtual
 * machine.
 *
 * @param {string} [formula.formulaContent.size] The size of the virtual
 * machine.
 *
 * @param {string} [formula.formulaContent.userName] The user name of the
 * virtual machine.
 *
 * @param {string} [formula.formulaContent.password] The password of the
 * virtual machine administrator.
 *
 * @param {string} [formula.formulaContent.sshKey] The SSH key of the virtual
 * machine administrator.
 *
 * @param {boolean} [formula.formulaContent.isAuthenticationWithSshKey]
 * Indicates whether this virtual machine uses an SSH key for authentication.
 *
 * @param {string} [formula.formulaContent.fqdn] The fully-qualified domain
 * name of the virtual machine.
 *
 * @param {string} [formula.formulaContent.labSubnetName] The lab subnet name
 * of the virtual machine.
 *
 * @param {string} [formula.formulaContent.labVirtualNetworkId] The lab virtual
 * network identifier of the virtual machine.
 *
 * @param {boolean} [formula.formulaContent.disallowPublicIpAddress] Indicates
 * whether the virtual machine is to be created without a public IP address.
 *
 * @param {array} [formula.formulaContent.artifacts] The artifacts to be
 * installed on the virtual machine.
 *
 * @param {object} [formula.formulaContent.artifactDeploymentStatus] The
 * artifact deployment status for the virtual machine.
 *
 * @param {string}
 * [formula.formulaContent.artifactDeploymentStatus.deploymentStatus] The
 * deployment status of the artifact.
 *
 * @param {number}
 * [formula.formulaContent.artifactDeploymentStatus.artifactsApplied] The total
 * count of the artifacts that were successfully applied.
 *
 * @param {number}
 * [formula.formulaContent.artifactDeploymentStatus.totalArtifacts] The total
 * count of the artifacts that were tentatively applied.
 *
 * @param {object} [formula.formulaContent.galleryImageReference] The Microsoft
 * Azure Marketplace image reference of the virtual machine.
 *
 * @param {string} [formula.formulaContent.galleryImageReference.offer] The
 * offer of the gallery image.
 *
 * @param {string} [formula.formulaContent.galleryImageReference.publisher] The
 * publisher of the gallery image.
 *
 * @param {string} [formula.formulaContent.galleryImageReference.sku] The SKU
 * of the gallery image.
 *
 * @param {string} [formula.formulaContent.galleryImageReference.osType] The OS
 * type of the gallery image.
 *
 * @param {string} [formula.formulaContent.galleryImageReference.version] The
 * version of the gallery image.
 *
 * @param {object} [formula.formulaContent.computeVm] The compute virtual
 * machine properties.
 *
 * @param {array} [formula.formulaContent.computeVm.statuses] Gets the statuses
 * of the virtual machine.
 *
 * @param {string} [formula.formulaContent.computeVm.osType] Gets the OS type
 * of the virtual machine.
 *
 * @param {string} [formula.formulaContent.computeVm.vmSize] Gets the size of
 * the virtual machine.
 *
 * @param {string} [formula.formulaContent.computeVm.networkInterfaceId] Gets
 * the network interface ID of the virtual machine.
 *
 * @param {string} [formula.formulaContent.computeVm.osDiskId] Gets OS disk
 * blob uri for the virtual machine.
 *
 * @param {array} [formula.formulaContent.computeVm.dataDiskIds] Gets data
 * disks blob uri for the virtual machine.
 *
 * @param {array} [formula.formulaContent.computeVm.dataDisks] Gets all data
 * disks attached to the virtual machine.
 *
 * @param {object} [formula.formulaContent.networkInterface] The network
 * interface properties.
 *
 * @param {string} [formula.formulaContent.networkInterface.virtualNetworkId]
 * The resource ID of the virtual network.
 *
 * @param {string} [formula.formulaContent.networkInterface.subnetId] The
 * resource ID of the sub net.
 *
 * @param {string} [formula.formulaContent.networkInterface.publicIpAddressId]
 * The resource ID of the public IP address.
 *
 * @param {string} [formula.formulaContent.networkInterface.publicIpAddress]
 * The public IP address.
 *
 * @param {string} [formula.formulaContent.networkInterface.privateIpAddress]
 * The private IP address.
 *
 * @param {string} [formula.formulaContent.networkInterface.dnsName] The DNS
 * name.
 *
 * @param {string} [formula.formulaContent.networkInterface.rdpAuthority] The
 * RdpAuthority property is a server DNS host name or IP address followed by
 * the service port number for RDP (Remote Desktop Protocol).
 *
 * @param {string} [formula.formulaContent.networkInterface.sshAuthority] The
 * SshAuthority property is a server DNS host name or IP address followed by
 * the service port number for SSH.
 *
 * @param {object}
 * [formula.formulaContent.networkInterface.sharedPublicIpAddressConfiguration]
 * The configuration for sharing a public IP address across multiple virtual
 * machines.
 *
 * @param {array}
 * [formula.formulaContent.networkInterface.sharedPublicIpAddressConfiguration.inboundNatRules]
 * The incoming NAT rules
 *
 * @param {object} [formula.formulaContent.applicableSchedule] The applicable
 * schedule for the virtual machine.
 *
 * @param {object} [formula.formulaContent.applicableSchedule.labVmsShutdown]
 * The auto-shutdown schedule, if one has been set at the lab or lab resource
 * level.
 *
 * @param {object} [formula.formulaContent.applicableSchedule.labVmsStartup]
 * The auto-startup schedule, if one has been set at the lab or lab resource
 * level.
 *
 * @param {string}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.status] The status
 * of the schedule (i.e. Enabled, Disabled). Possible values include:
 * 'Enabled', 'Disabled'
 *
 * @param {string}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.taskType] The task
 * type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
 *
 * @param {object}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.weeklyRecurrence]
 * If the schedule will occur only some days of the week, specify the weekly
 * recurrence.
 *
 * @param {array}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.weeklyRecurrence.weekdays]
 * The days of the week for which the schedule is set (e.g. Sunday, Monday,
 * Tuesday, etc.).
 *
 * @param {string}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.weeklyRecurrence.time]
 * The time of the day the schedule will occur.
 *
 * @param {object}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.dailyRecurrence] If
 * the schedule will occur once each day of the week, specify the daily
 * recurrence.
 *
 * @param {string}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.dailyRecurrence.time]
 * The time of day the schedule will occur.
 *
 * @param {object}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.hourlyRecurrence]
 * If the schedule will occur multiple times a day, specify the hourly
 * recurrence.
 *
 * @param {number}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.hourlyRecurrence.minute]
 * Minutes of the hour the schedule will run.
 *
 * @param {string}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.timeZoneId] The
 * time zone ID (e.g. Pacific Standard time).
 *
 * @param {object}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings]
 * Notification settings.
 *
 * @param {string}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings.status]
 * If notifications are enabled for this schedule (i.e. Enabled, Disabled).
 * Possible values include: 'Disabled', 'Enabled'
 *
 * @param {number}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings.timeInMinutes]
 * Time in minutes before event at which notification will be sent.
 *
 * @param {string}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings.webhookUrl]
 * The webhook URL to which the notification will be sent.
 *
 * @param {string}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.targetResourceId]
 * The resource ID to which the schedule belongs
 *
 * @param {string}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.provisioningState]
 * The provisioning status of the resource.
 *
 * @param {string}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.uniqueIdentifier]
 * The unique immutable identifier of a resource (Guid).
 *
 * @param {string}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.location] The
 * location of the resource.
 *
 * @param {object}
 * [formula.formulaContent.applicableSchedule.labVmsStartup.tags] The tags of
 * the resource.
 *
 * @param {string} [formula.formulaContent.applicableSchedule.location] The
 * location of the resource.
 *
 * @param {object} [formula.formulaContent.applicableSchedule.tags] The tags of
 * the resource.
 *
 * @param {date} [formula.formulaContent.expirationDate] The expiration date
 * for VM.
 *
 * @param {boolean} [formula.formulaContent.allowClaim] Indicates whether
 * another user can take ownership of the virtual machine
 *
 * @param {string} [formula.formulaContent.storageType] Storage type to use for
 * virtual machine (i.e. Standard, Premium).
 *
 * @param {string} [formula.formulaContent.virtualMachineCreationSource] Tells
 * source of creation of lab virtual machine. Output property only. Possible
 * values include: 'FromCustomImage', 'FromGalleryImage'
 *
 * @param {string} [formula.formulaContent.environmentId] The resource ID of
 * the environment that contains this virtual machine, if any.
 *
 * @param {string} [formula.formulaContent.provisioningState] The provisioning
 * status of the resource.
 *
 * @param {string} [formula.formulaContent.uniqueIdentifier] The unique
 * immutable identifier of a resource (Guid).
 *
 * @param {string} [formula.formulaContent.name] The name of the virtual
 * machine or environment
 *
 * @param {string} [formula.formulaContent.location] The location of the new
 * virtual machine or environment
 *
 * @param {object} [formula.formulaContent.tags] The tags of the resource.
 *
 * @param {object} [formula.vm] Information about a VM from which a formula is
 * to be created.
 *
 * @param {string} [formula.vm.labVmId] The identifier of the VM from which a
 * formula is to be created.
 *
 * @param {string} [formula.provisioningState] The provisioning status of the
 * resource.
 *
 * @param {string} [formula.uniqueIdentifier] The unique immutable identifier
 * of a resource (Guid).
 *
 * @param {string} [formula.location] The location of the resource.
 *
 * @param {object} [formula.tags] The tags of the resource.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Formula} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginCreateOrUpdate(resourceGroupName, labName, name, formula, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (labName === null || labName === undefined || typeof labName.valueOf() !== 'string') {
      throw new Error('labName cannot be null or undefined and it must be of type string.');
    }
    if (name === null || name === undefined || typeof name.valueOf() !== 'string') {
      throw new Error('name cannot be null or undefined and it must be of type string.');
    }
    if (formula === null || formula === undefined) {
      throw new Error('formula cannot be null or undefined.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevTestLab/labs/{labName}/formulas/{name}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{labName}', encodeURIComponent(labName));
  requestUrl = requestUrl.replace('{name}', encodeURIComponent(name));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (formula !== null && formula !== undefined) {
      let requestModelMapper = new client.models['Formula']().mapper();
      requestModel = client.serialize(requestModelMapper, formula, 'formula');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(formula, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 201) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Formula']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Formula']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError1 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError1.request = msRest.stripRequest(httpRequest);
        deserializationError1.response = msRest.stripResponse(response);
        return callback(deserializationError1);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * List formulas in a given lab.
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ResponseWithContinuationFormula} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listNext(nextPageLink, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
      throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let requestUrl = '{nextLink}';
  requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ResponseWithContinuationFormula']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a Formulas. */
class Formulas {
  /**
   * Create a Formulas.
   * @param {DevTestLabsClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._list = _list;
    this._get = _get;
    this._createOrUpdate = _createOrUpdate;
    this._deleteMethod = _deleteMethod;
    this._beginCreateOrUpdate = _beginCreateOrUpdate;
    this._listNext = _listNext;
  }

  /**
   * List formulas in a given lab.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} labName The name of the lab.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.expand] Specify the $expand query. Example:
   * 'properties($select=description)'
   *
   * @param {string} [options.filter] The filter to apply to the operation.
   *
   * @param {number} [options.top] The maximum number of resources to return from
   * the operation.
   *
   * @param {string} [options.orderby] The ordering expression for the results,
   * using OData notation.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ResponseWithContinuationFormula>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listWithHttpOperationResponse(resourceGroupName, labName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._list(resourceGroupName, labName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * List formulas in a given lab.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} labName The name of the lab.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.expand] Specify the $expand query. Example:
   * 'properties($select=description)'
   *
   * @param {string} [options.filter] The filter to apply to the operation.
   *
   * @param {number} [options.top] The maximum number of resources to return from
   * the operation.
   *
   * @param {string} [options.orderby] The ordering expression for the results,
   * using OData notation.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ResponseWithContinuationFormula} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ResponseWithContinuationFormula} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  list(resourceGroupName, labName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._list(resourceGroupName, labName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._list(resourceGroupName, labName, options, optionalCallback);
    }
  }

  /**
   * Get formula.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} labName The name of the lab.
   *
   * @param {string} name The name of the formula.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.expand] Specify the $expand query. Example:
   * 'properties($select=description)'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Formula>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWithHttpOperationResponse(resourceGroupName, labName, name, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._get(resourceGroupName, labName, name, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Get formula.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} labName The name of the lab.
   *
   * @param {string} name The name of the formula.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.expand] Specify the $expand query. Example:
   * 'properties($select=description)'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Formula} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Formula} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  get(resourceGroupName, labName, name, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._get(resourceGroupName, labName, name, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._get(resourceGroupName, labName, name, options, optionalCallback);
    }
  }

  /**
   * Create or replace an existing Formula. This operation can take a while to
   * complete.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} labName The name of the lab.
   *
   * @param {string} name The name of the formula.
   *
   * @param {object} formula A formula for creating a VM, specifying an image
   * base and other parameters
   *
   * @param {string} [formula.description] The description of the formula.
   *
   * @param {string} [formula.author] The author of the formula.
   *
   * @param {string} [formula.osType] The OS type of the formula.
   *
   * @param {object} [formula.formulaContent] The content of the formula.
   *
   * @param {object} [formula.formulaContent.bulkCreationParameters] The number
   * of virtual machine instances to create.
   *
   * @param {number}
   * [formula.formulaContent.bulkCreationParameters.instanceCount] The number of
   * virtual machine instances to create.
   *
   * @param {string} [formula.formulaContent.notes] The notes of the virtual
   * machine.
   *
   * @param {string} [formula.formulaContent.ownerObjectId] The object identifier
   * of the owner of the virtual machine.
   *
   * @param {string} [formula.formulaContent.ownerUserPrincipalName] The user
   * principal name of the virtual machine owner.
   *
   * @param {string} [formula.formulaContent.createdByUserId] The object
   * identifier of the creator of the virtual machine.
   *
   * @param {string} [formula.formulaContent.createdByUser] The email address of
   * creator of the virtual machine.
   *
   * @param {date} [formula.formulaContent.createdDate] The creation date of the
   * virtual machine.
   *
   * @param {string} [formula.formulaContent.customImageId] The custom image
   * identifier of the virtual machine.
   *
   * @param {string} [formula.formulaContent.osType] The OS type of the virtual
   * machine.
   *
   * @param {string} [formula.formulaContent.size] The size of the virtual
   * machine.
   *
   * @param {string} [formula.formulaContent.userName] The user name of the
   * virtual machine.
   *
   * @param {string} [formula.formulaContent.password] The password of the
   * virtual machine administrator.
   *
   * @param {string} [formula.formulaContent.sshKey] The SSH key of the virtual
   * machine administrator.
   *
   * @param {boolean} [formula.formulaContent.isAuthenticationWithSshKey]
   * Indicates whether this virtual machine uses an SSH key for authentication.
   *
   * @param {string} [formula.formulaContent.fqdn] The fully-qualified domain
   * name of the virtual machine.
   *
   * @param {string} [formula.formulaContent.labSubnetName] The lab subnet name
   * of the virtual machine.
   *
   * @param {string} [formula.formulaContent.labVirtualNetworkId] The lab virtual
   * network identifier of the virtual machine.
   *
   * @param {boolean} [formula.formulaContent.disallowPublicIpAddress] Indicates
   * whether the virtual machine is to be created without a public IP address.
   *
   * @param {array} [formula.formulaContent.artifacts] The artifacts to be
   * installed on the virtual machine.
   *
   * @param {object} [formula.formulaContent.artifactDeploymentStatus] The
   * artifact deployment status for the virtual machine.
   *
   * @param {string}
   * [formula.formulaContent.artifactDeploymentStatus.deploymentStatus] The
   * deployment status of the artifact.
   *
   * @param {number}
   * [formula.formulaContent.artifactDeploymentStatus.artifactsApplied] The total
   * count of the artifacts that were successfully applied.
   *
   * @param {number}
   * [formula.formulaContent.artifactDeploymentStatus.totalArtifacts] The total
   * count of the artifacts that were tentatively applied.
   *
   * @param {object} [formula.formulaContent.galleryImageReference] The Microsoft
   * Azure Marketplace image reference of the virtual machine.
   *
   * @param {string} [formula.formulaContent.galleryImageReference.offer] The
   * offer of the gallery image.
   *
   * @param {string} [formula.formulaContent.galleryImageReference.publisher] The
   * publisher of the gallery image.
   *
   * @param {string} [formula.formulaContent.galleryImageReference.sku] The SKU
   * of the gallery image.
   *
   * @param {string} [formula.formulaContent.galleryImageReference.osType] The OS
   * type of the gallery image.
   *
   * @param {string} [formula.formulaContent.galleryImageReference.version] The
   * version of the gallery image.
   *
   * @param {object} [formula.formulaContent.computeVm] The compute virtual
   * machine properties.
   *
   * @param {array} [formula.formulaContent.computeVm.statuses] Gets the statuses
   * of the virtual machine.
   *
   * @param {string} [formula.formulaContent.computeVm.osType] Gets the OS type
   * of the virtual machine.
   *
   * @param {string} [formula.formulaContent.computeVm.vmSize] Gets the size of
   * the virtual machine.
   *
   * @param {string} [formula.formulaContent.computeVm.networkInterfaceId] Gets
   * the network interface ID of the virtual machine.
   *
   * @param {string} [formula.formulaContent.computeVm.osDiskId] Gets OS disk
   * blob uri for the virtual machine.
   *
   * @param {array} [formula.formulaContent.computeVm.dataDiskIds] Gets data
   * disks blob uri for the virtual machine.
   *
   * @param {array} [formula.formulaContent.computeVm.dataDisks] Gets all data
   * disks attached to the virtual machine.
   *
   * @param {object} [formula.formulaContent.networkInterface] The network
   * interface properties.
   *
   * @param {string} [formula.formulaContent.networkInterface.virtualNetworkId]
   * The resource ID of the virtual network.
   *
   * @param {string} [formula.formulaContent.networkInterface.subnetId] The
   * resource ID of the sub net.
   *
   * @param {string} [formula.formulaContent.networkInterface.publicIpAddressId]
   * The resource ID of the public IP address.
   *
   * @param {string} [formula.formulaContent.networkInterface.publicIpAddress]
   * The public IP address.
   *
   * @param {string} [formula.formulaContent.networkInterface.privateIpAddress]
   * The private IP address.
   *
   * @param {string} [formula.formulaContent.networkInterface.dnsName] The DNS
   * name.
   *
   * @param {string} [formula.formulaContent.networkInterface.rdpAuthority] The
   * RdpAuthority property is a server DNS host name or IP address followed by
   * the service port number for RDP (Remote Desktop Protocol).
   *
   * @param {string} [formula.formulaContent.networkInterface.sshAuthority] The
   * SshAuthority property is a server DNS host name or IP address followed by
   * the service port number for SSH.
   *
   * @param {object}
   * [formula.formulaContent.networkInterface.sharedPublicIpAddressConfiguration]
   * The configuration for sharing a public IP address across multiple virtual
   * machines.
   *
   * @param {array}
   * [formula.formulaContent.networkInterface.sharedPublicIpAddressConfiguration.inboundNatRules]
   * The incoming NAT rules
   *
   * @param {object} [formula.formulaContent.applicableSchedule] The applicable
   * schedule for the virtual machine.
   *
   * @param {object} [formula.formulaContent.applicableSchedule.labVmsShutdown]
   * The auto-shutdown schedule, if one has been set at the lab or lab resource
   * level.
   *
   * @param {object} [formula.formulaContent.applicableSchedule.labVmsStartup]
   * The auto-startup schedule, if one has been set at the lab or lab resource
   * level.
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.status] The status
   * of the schedule (i.e. Enabled, Disabled). Possible values include:
   * 'Enabled', 'Disabled'
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.taskType] The task
   * type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
   *
   * @param {object}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.weeklyRecurrence]
   * If the schedule will occur only some days of the week, specify the weekly
   * recurrence.
   *
   * @param {array}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.weeklyRecurrence.weekdays]
   * The days of the week for which the schedule is set (e.g. Sunday, Monday,
   * Tuesday, etc.).
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.weeklyRecurrence.time]
   * The time of the day the schedule will occur.
   *
   * @param {object}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.dailyRecurrence] If
   * the schedule will occur once each day of the week, specify the daily
   * recurrence.
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.dailyRecurrence.time]
   * The time of day the schedule will occur.
   *
   * @param {object}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.hourlyRecurrence]
   * If the schedule will occur multiple times a day, specify the hourly
   * recurrence.
   *
   * @param {number}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.hourlyRecurrence.minute]
   * Minutes of the hour the schedule will run.
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.timeZoneId] The
   * time zone ID (e.g. Pacific Standard time).
   *
   * @param {object}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings]
   * Notification settings.
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings.status]
   * If notifications are enabled for this schedule (i.e. Enabled, Disabled).
   * Possible values include: 'Disabled', 'Enabled'
   *
   * @param {number}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings.timeInMinutes]
   * Time in minutes before event at which notification will be sent.
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings.webhookUrl]
   * The webhook URL to which the notification will be sent.
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.targetResourceId]
   * The resource ID to which the schedule belongs
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.provisioningState]
   * The provisioning status of the resource.
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.uniqueIdentifier]
   * The unique immutable identifier of a resource (Guid).
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.location] The
   * location of the resource.
   *
   * @param {object}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.tags] The tags of
   * the resource.
   *
   * @param {string} [formula.formulaContent.applicableSchedule.location] The
   * location of the resource.
   *
   * @param {object} [formula.formulaContent.applicableSchedule.tags] The tags of
   * the resource.
   *
   * @param {date} [formula.formulaContent.expirationDate] The expiration date
   * for VM.
   *
   * @param {boolean} [formula.formulaContent.allowClaim] Indicates whether
   * another user can take ownership of the virtual machine
   *
   * @param {string} [formula.formulaContent.storageType] Storage type to use for
   * virtual machine (i.e. Standard, Premium).
   *
   * @param {string} [formula.formulaContent.virtualMachineCreationSource] Tells
   * source of creation of lab virtual machine. Output property only. Possible
   * values include: 'FromCustomImage', 'FromGalleryImage'
   *
   * @param {string} [formula.formulaContent.environmentId] The resource ID of
   * the environment that contains this virtual machine, if any.
   *
   * @param {string} [formula.formulaContent.provisioningState] The provisioning
   * status of the resource.
   *
   * @param {string} [formula.formulaContent.uniqueIdentifier] The unique
   * immutable identifier of a resource (Guid).
   *
   * @param {string} [formula.formulaContent.name] The name of the virtual
   * machine or environment
   *
   * @param {string} [formula.formulaContent.location] The location of the new
   * virtual machine or environment
   *
   * @param {object} [formula.formulaContent.tags] The tags of the resource.
   *
   * @param {object} [formula.vm] Information about a VM from which a formula is
   * to be created.
   *
   * @param {string} [formula.vm.labVmId] The identifier of the VM from which a
   * formula is to be created.
   *
   * @param {string} [formula.provisioningState] The provisioning status of the
   * resource.
   *
   * @param {string} [formula.uniqueIdentifier] The unique immutable identifier
   * of a resource (Guid).
   *
   * @param {string} [formula.location] The location of the resource.
   *
   * @param {object} [formula.tags] The tags of the resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Formula>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createOrUpdateWithHttpOperationResponse(resourceGroupName, labName, name, formula, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._createOrUpdate(resourceGroupName, labName, name, formula, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Create or replace an existing Formula. This operation can take a while to
   * complete.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} labName The name of the lab.
   *
   * @param {string} name The name of the formula.
   *
   * @param {object} formula A formula for creating a VM, specifying an image
   * base and other parameters
   *
   * @param {string} [formula.description] The description of the formula.
   *
   * @param {string} [formula.author] The author of the formula.
   *
   * @param {string} [formula.osType] The OS type of the formula.
   *
   * @param {object} [formula.formulaContent] The content of the formula.
   *
   * @param {object} [formula.formulaContent.bulkCreationParameters] The number
   * of virtual machine instances to create.
   *
   * @param {number}
   * [formula.formulaContent.bulkCreationParameters.instanceCount] The number of
   * virtual machine instances to create.
   *
   * @param {string} [formula.formulaContent.notes] The notes of the virtual
   * machine.
   *
   * @param {string} [formula.formulaContent.ownerObjectId] The object identifier
   * of the owner of the virtual machine.
   *
   * @param {string} [formula.formulaContent.ownerUserPrincipalName] The user
   * principal name of the virtual machine owner.
   *
   * @param {string} [formula.formulaContent.createdByUserId] The object
   * identifier of the creator of the virtual machine.
   *
   * @param {string} [formula.formulaContent.createdByUser] The email address of
   * creator of the virtual machine.
   *
   * @param {date} [formula.formulaContent.createdDate] The creation date of the
   * virtual machine.
   *
   * @param {string} [formula.formulaContent.customImageId] The custom image
   * identifier of the virtual machine.
   *
   * @param {string} [formula.formulaContent.osType] The OS type of the virtual
   * machine.
   *
   * @param {string} [formula.formulaContent.size] The size of the virtual
   * machine.
   *
   * @param {string} [formula.formulaContent.userName] The user name of the
   * virtual machine.
   *
   * @param {string} [formula.formulaContent.password] The password of the
   * virtual machine administrator.
   *
   * @param {string} [formula.formulaContent.sshKey] The SSH key of the virtual
   * machine administrator.
   *
   * @param {boolean} [formula.formulaContent.isAuthenticationWithSshKey]
   * Indicates whether this virtual machine uses an SSH key for authentication.
   *
   * @param {string} [formula.formulaContent.fqdn] The fully-qualified domain
   * name of the virtual machine.
   *
   * @param {string} [formula.formulaContent.labSubnetName] The lab subnet name
   * of the virtual machine.
   *
   * @param {string} [formula.formulaContent.labVirtualNetworkId] The lab virtual
   * network identifier of the virtual machine.
   *
   * @param {boolean} [formula.formulaContent.disallowPublicIpAddress] Indicates
   * whether the virtual machine is to be created without a public IP address.
   *
   * @param {array} [formula.formulaContent.artifacts] The artifacts to be
   * installed on the virtual machine.
   *
   * @param {object} [formula.formulaContent.artifactDeploymentStatus] The
   * artifact deployment status for the virtual machine.
   *
   * @param {string}
   * [formula.formulaContent.artifactDeploymentStatus.deploymentStatus] The
   * deployment status of the artifact.
   *
   * @param {number}
   * [formula.formulaContent.artifactDeploymentStatus.artifactsApplied] The total
   * count of the artifacts that were successfully applied.
   *
   * @param {number}
   * [formula.formulaContent.artifactDeploymentStatus.totalArtifacts] The total
   * count of the artifacts that were tentatively applied.
   *
   * @param {object} [formula.formulaContent.galleryImageReference] The Microsoft
   * Azure Marketplace image reference of the virtual machine.
   *
   * @param {string} [formula.formulaContent.galleryImageReference.offer] The
   * offer of the gallery image.
   *
   * @param {string} [formula.formulaContent.galleryImageReference.publisher] The
   * publisher of the gallery image.
   *
   * @param {string} [formula.formulaContent.galleryImageReference.sku] The SKU
   * of the gallery image.
   *
   * @param {string} [formula.formulaContent.galleryImageReference.osType] The OS
   * type of the gallery image.
   *
   * @param {string} [formula.formulaContent.galleryImageReference.version] The
   * version of the gallery image.
   *
   * @param {object} [formula.formulaContent.computeVm] The compute virtual
   * machine properties.
   *
   * @param {array} [formula.formulaContent.computeVm.statuses] Gets the statuses
   * of the virtual machine.
   *
   * @param {string} [formula.formulaContent.computeVm.osType] Gets the OS type
   * of the virtual machine.
   *
   * @param {string} [formula.formulaContent.computeVm.vmSize] Gets the size of
   * the virtual machine.
   *
   * @param {string} [formula.formulaContent.computeVm.networkInterfaceId] Gets
   * the network interface ID of the virtual machine.
   *
   * @param {string} [formula.formulaContent.computeVm.osDiskId] Gets OS disk
   * blob uri for the virtual machine.
   *
   * @param {array} [formula.formulaContent.computeVm.dataDiskIds] Gets data
   * disks blob uri for the virtual machine.
   *
   * @param {array} [formula.formulaContent.computeVm.dataDisks] Gets all data
   * disks attached to the virtual machine.
   *
   * @param {object} [formula.formulaContent.networkInterface] The network
   * interface properties.
   *
   * @param {string} [formula.formulaContent.networkInterface.virtualNetworkId]
   * The resource ID of the virtual network.
   *
   * @param {string} [formula.formulaContent.networkInterface.subnetId] The
   * resource ID of the sub net.
   *
   * @param {string} [formula.formulaContent.networkInterface.publicIpAddressId]
   * The resource ID of the public IP address.
   *
   * @param {string} [formula.formulaContent.networkInterface.publicIpAddress]
   * The public IP address.
   *
   * @param {string} [formula.formulaContent.networkInterface.privateIpAddress]
   * The private IP address.
   *
   * @param {string} [formula.formulaContent.networkInterface.dnsName] The DNS
   * name.
   *
   * @param {string} [formula.formulaContent.networkInterface.rdpAuthority] The
   * RdpAuthority property is a server DNS host name or IP address followed by
   * the service port number for RDP (Remote Desktop Protocol).
   *
   * @param {string} [formula.formulaContent.networkInterface.sshAuthority] The
   * SshAuthority property is a server DNS host name or IP address followed by
   * the service port number for SSH.
   *
   * @param {object}
   * [formula.formulaContent.networkInterface.sharedPublicIpAddressConfiguration]
   * The configuration for sharing a public IP address across multiple virtual
   * machines.
   *
   * @param {array}
   * [formula.formulaContent.networkInterface.sharedPublicIpAddressConfiguration.inboundNatRules]
   * The incoming NAT rules
   *
   * @param {object} [formula.formulaContent.applicableSchedule] The applicable
   * schedule for the virtual machine.
   *
   * @param {object} [formula.formulaContent.applicableSchedule.labVmsShutdown]
   * The auto-shutdown schedule, if one has been set at the lab or lab resource
   * level.
   *
   * @param {object} [formula.formulaContent.applicableSchedule.labVmsStartup]
   * The auto-startup schedule, if one has been set at the lab or lab resource
   * level.
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.status] The status
   * of the schedule (i.e. Enabled, Disabled). Possible values include:
   * 'Enabled', 'Disabled'
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.taskType] The task
   * type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
   *
   * @param {object}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.weeklyRecurrence]
   * If the schedule will occur only some days of the week, specify the weekly
   * recurrence.
   *
   * @param {array}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.weeklyRecurrence.weekdays]
   * The days of the week for which the schedule is set (e.g. Sunday, Monday,
   * Tuesday, etc.).
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.weeklyRecurrence.time]
   * The time of the day the schedule will occur.
   *
   * @param {object}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.dailyRecurrence] If
   * the schedule will occur once each day of the week, specify the daily
   * recurrence.
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.dailyRecurrence.time]
   * The time of day the schedule will occur.
   *
   * @param {object}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.hourlyRecurrence]
   * If the schedule will occur multiple times a day, specify the hourly
   * recurrence.
   *
   * @param {number}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.hourlyRecurrence.minute]
   * Minutes of the hour the schedule will run.
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.timeZoneId] The
   * time zone ID (e.g. Pacific Standard time).
   *
   * @param {object}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings]
   * Notification settings.
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings.status]
   * If notifications are enabled for this schedule (i.e. Enabled, Disabled).
   * Possible values include: 'Disabled', 'Enabled'
   *
   * @param {number}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings.timeInMinutes]
   * Time in minutes before event at which notification will be sent.
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings.webhookUrl]
   * The webhook URL to which the notification will be sent.
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.targetResourceId]
   * The resource ID to which the schedule belongs
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.provisioningState]
   * The provisioning status of the resource.
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.uniqueIdentifier]
   * The unique immutable identifier of a resource (Guid).
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.location] The
   * location of the resource.
   *
   * @param {object}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.tags] The tags of
   * the resource.
   *
   * @param {string} [formula.formulaContent.applicableSchedule.location] The
   * location of the resource.
   *
   * @param {object} [formula.formulaContent.applicableSchedule.tags] The tags of
   * the resource.
   *
   * @param {date} [formula.formulaContent.expirationDate] The expiration date
   * for VM.
   *
   * @param {boolean} [formula.formulaContent.allowClaim] Indicates whether
   * another user can take ownership of the virtual machine
   *
   * @param {string} [formula.formulaContent.storageType] Storage type to use for
   * virtual machine (i.e. Standard, Premium).
   *
   * @param {string} [formula.formulaContent.virtualMachineCreationSource] Tells
   * source of creation of lab virtual machine. Output property only. Possible
   * values include: 'FromCustomImage', 'FromGalleryImage'
   *
   * @param {string} [formula.formulaContent.environmentId] The resource ID of
   * the environment that contains this virtual machine, if any.
   *
   * @param {string} [formula.formulaContent.provisioningState] The provisioning
   * status of the resource.
   *
   * @param {string} [formula.formulaContent.uniqueIdentifier] The unique
   * immutable identifier of a resource (Guid).
   *
   * @param {string} [formula.formulaContent.name] The name of the virtual
   * machine or environment
   *
   * @param {string} [formula.formulaContent.location] The location of the new
   * virtual machine or environment
   *
   * @param {object} [formula.formulaContent.tags] The tags of the resource.
   *
   * @param {object} [formula.vm] Information about a VM from which a formula is
   * to be created.
   *
   * @param {string} [formula.vm.labVmId] The identifier of the VM from which a
   * formula is to be created.
   *
   * @param {string} [formula.provisioningState] The provisioning status of the
   * resource.
   *
   * @param {string} [formula.uniqueIdentifier] The unique immutable identifier
   * of a resource (Guid).
   *
   * @param {string} [formula.location] The location of the resource.
   *
   * @param {object} [formula.tags] The tags of the resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Formula} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Formula} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdate(resourceGroupName, labName, name, formula, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._createOrUpdate(resourceGroupName, labName, name, formula, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._createOrUpdate(resourceGroupName, labName, name, formula, options, optionalCallback);
    }
  }

  /**
   * Delete formula.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} labName The name of the lab.
   *
   * @param {string} name The name of the formula.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteMethodWithHttpOperationResponse(resourceGroupName, labName, name, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteMethod(resourceGroupName, labName, name, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Delete formula.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} labName The name of the lab.
   *
   * @param {string} name The name of the formula.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(resourceGroupName, labName, name, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteMethod(resourceGroupName, labName, name, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteMethod(resourceGroupName, labName, name, options, optionalCallback);
    }
  }

  /**
   * Create or replace an existing Formula. This operation can take a while to
   * complete.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} labName The name of the lab.
   *
   * @param {string} name The name of the formula.
   *
   * @param {object} formula A formula for creating a VM, specifying an image
   * base and other parameters
   *
   * @param {string} [formula.description] The description of the formula.
   *
   * @param {string} [formula.author] The author of the formula.
   *
   * @param {string} [formula.osType] The OS type of the formula.
   *
   * @param {object} [formula.formulaContent] The content of the formula.
   *
   * @param {object} [formula.formulaContent.bulkCreationParameters] The number
   * of virtual machine instances to create.
   *
   * @param {number}
   * [formula.formulaContent.bulkCreationParameters.instanceCount] The number of
   * virtual machine instances to create.
   *
   * @param {string} [formula.formulaContent.notes] The notes of the virtual
   * machine.
   *
   * @param {string} [formula.formulaContent.ownerObjectId] The object identifier
   * of the owner of the virtual machine.
   *
   * @param {string} [formula.formulaContent.ownerUserPrincipalName] The user
   * principal name of the virtual machine owner.
   *
   * @param {string} [formula.formulaContent.createdByUserId] The object
   * identifier of the creator of the virtual machine.
   *
   * @param {string} [formula.formulaContent.createdByUser] The email address of
   * creator of the virtual machine.
   *
   * @param {date} [formula.formulaContent.createdDate] The creation date of the
   * virtual machine.
   *
   * @param {string} [formula.formulaContent.customImageId] The custom image
   * identifier of the virtual machine.
   *
   * @param {string} [formula.formulaContent.osType] The OS type of the virtual
   * machine.
   *
   * @param {string} [formula.formulaContent.size] The size of the virtual
   * machine.
   *
   * @param {string} [formula.formulaContent.userName] The user name of the
   * virtual machine.
   *
   * @param {string} [formula.formulaContent.password] The password of the
   * virtual machine administrator.
   *
   * @param {string} [formula.formulaContent.sshKey] The SSH key of the virtual
   * machine administrator.
   *
   * @param {boolean} [formula.formulaContent.isAuthenticationWithSshKey]
   * Indicates whether this virtual machine uses an SSH key for authentication.
   *
   * @param {string} [formula.formulaContent.fqdn] The fully-qualified domain
   * name of the virtual machine.
   *
   * @param {string} [formula.formulaContent.labSubnetName] The lab subnet name
   * of the virtual machine.
   *
   * @param {string} [formula.formulaContent.labVirtualNetworkId] The lab virtual
   * network identifier of the virtual machine.
   *
   * @param {boolean} [formula.formulaContent.disallowPublicIpAddress] Indicates
   * whether the virtual machine is to be created without a public IP address.
   *
   * @param {array} [formula.formulaContent.artifacts] The artifacts to be
   * installed on the virtual machine.
   *
   * @param {object} [formula.formulaContent.artifactDeploymentStatus] The
   * artifact deployment status for the virtual machine.
   *
   * @param {string}
   * [formula.formulaContent.artifactDeploymentStatus.deploymentStatus] The
   * deployment status of the artifact.
   *
   * @param {number}
   * [formula.formulaContent.artifactDeploymentStatus.artifactsApplied] The total
   * count of the artifacts that were successfully applied.
   *
   * @param {number}
   * [formula.formulaContent.artifactDeploymentStatus.totalArtifacts] The total
   * count of the artifacts that were tentatively applied.
   *
   * @param {object} [formula.formulaContent.galleryImageReference] The Microsoft
   * Azure Marketplace image reference of the virtual machine.
   *
   * @param {string} [formula.formulaContent.galleryImageReference.offer] The
   * offer of the gallery image.
   *
   * @param {string} [formula.formulaContent.galleryImageReference.publisher] The
   * publisher of the gallery image.
   *
   * @param {string} [formula.formulaContent.galleryImageReference.sku] The SKU
   * of the gallery image.
   *
   * @param {string} [formula.formulaContent.galleryImageReference.osType] The OS
   * type of the gallery image.
   *
   * @param {string} [formula.formulaContent.galleryImageReference.version] The
   * version of the gallery image.
   *
   * @param {object} [formula.formulaContent.computeVm] The compute virtual
   * machine properties.
   *
   * @param {array} [formula.formulaContent.computeVm.statuses] Gets the statuses
   * of the virtual machine.
   *
   * @param {string} [formula.formulaContent.computeVm.osType] Gets the OS type
   * of the virtual machine.
   *
   * @param {string} [formula.formulaContent.computeVm.vmSize] Gets the size of
   * the virtual machine.
   *
   * @param {string} [formula.formulaContent.computeVm.networkInterfaceId] Gets
   * the network interface ID of the virtual machine.
   *
   * @param {string} [formula.formulaContent.computeVm.osDiskId] Gets OS disk
   * blob uri for the virtual machine.
   *
   * @param {array} [formula.formulaContent.computeVm.dataDiskIds] Gets data
   * disks blob uri for the virtual machine.
   *
   * @param {array} [formula.formulaContent.computeVm.dataDisks] Gets all data
   * disks attached to the virtual machine.
   *
   * @param {object} [formula.formulaContent.networkInterface] The network
   * interface properties.
   *
   * @param {string} [formula.formulaContent.networkInterface.virtualNetworkId]
   * The resource ID of the virtual network.
   *
   * @param {string} [formula.formulaContent.networkInterface.subnetId] The
   * resource ID of the sub net.
   *
   * @param {string} [formula.formulaContent.networkInterface.publicIpAddressId]
   * The resource ID of the public IP address.
   *
   * @param {string} [formula.formulaContent.networkInterface.publicIpAddress]
   * The public IP address.
   *
   * @param {string} [formula.formulaContent.networkInterface.privateIpAddress]
   * The private IP address.
   *
   * @param {string} [formula.formulaContent.networkInterface.dnsName] The DNS
   * name.
   *
   * @param {string} [formula.formulaContent.networkInterface.rdpAuthority] The
   * RdpAuthority property is a server DNS host name or IP address followed by
   * the service port number for RDP (Remote Desktop Protocol).
   *
   * @param {string} [formula.formulaContent.networkInterface.sshAuthority] The
   * SshAuthority property is a server DNS host name or IP address followed by
   * the service port number for SSH.
   *
   * @param {object}
   * [formula.formulaContent.networkInterface.sharedPublicIpAddressConfiguration]
   * The configuration for sharing a public IP address across multiple virtual
   * machines.
   *
   * @param {array}
   * [formula.formulaContent.networkInterface.sharedPublicIpAddressConfiguration.inboundNatRules]
   * The incoming NAT rules
   *
   * @param {object} [formula.formulaContent.applicableSchedule] The applicable
   * schedule for the virtual machine.
   *
   * @param {object} [formula.formulaContent.applicableSchedule.labVmsShutdown]
   * The auto-shutdown schedule, if one has been set at the lab or lab resource
   * level.
   *
   * @param {object} [formula.formulaContent.applicableSchedule.labVmsStartup]
   * The auto-startup schedule, if one has been set at the lab or lab resource
   * level.
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.status] The status
   * of the schedule (i.e. Enabled, Disabled). Possible values include:
   * 'Enabled', 'Disabled'
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.taskType] The task
   * type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
   *
   * @param {object}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.weeklyRecurrence]
   * If the schedule will occur only some days of the week, specify the weekly
   * recurrence.
   *
   * @param {array}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.weeklyRecurrence.weekdays]
   * The days of the week for which the schedule is set (e.g. Sunday, Monday,
   * Tuesday, etc.).
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.weeklyRecurrence.time]
   * The time of the day the schedule will occur.
   *
   * @param {object}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.dailyRecurrence] If
   * the schedule will occur once each day of the week, specify the daily
   * recurrence.
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.dailyRecurrence.time]
   * The time of day the schedule will occur.
   *
   * @param {object}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.hourlyRecurrence]
   * If the schedule will occur multiple times a day, specify the hourly
   * recurrence.
   *
   * @param {number}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.hourlyRecurrence.minute]
   * Minutes of the hour the schedule will run.
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.timeZoneId] The
   * time zone ID (e.g. Pacific Standard time).
   *
   * @param {object}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings]
   * Notification settings.
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings.status]
   * If notifications are enabled for this schedule (i.e. Enabled, Disabled).
   * Possible values include: 'Disabled', 'Enabled'
   *
   * @param {number}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings.timeInMinutes]
   * Time in minutes before event at which notification will be sent.
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings.webhookUrl]
   * The webhook URL to which the notification will be sent.
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.targetResourceId]
   * The resource ID to which the schedule belongs
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.provisioningState]
   * The provisioning status of the resource.
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.uniqueIdentifier]
   * The unique immutable identifier of a resource (Guid).
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.location] The
   * location of the resource.
   *
   * @param {object}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.tags] The tags of
   * the resource.
   *
   * @param {string} [formula.formulaContent.applicableSchedule.location] The
   * location of the resource.
   *
   * @param {object} [formula.formulaContent.applicableSchedule.tags] The tags of
   * the resource.
   *
   * @param {date} [formula.formulaContent.expirationDate] The expiration date
   * for VM.
   *
   * @param {boolean} [formula.formulaContent.allowClaim] Indicates whether
   * another user can take ownership of the virtual machine
   *
   * @param {string} [formula.formulaContent.storageType] Storage type to use for
   * virtual machine (i.e. Standard, Premium).
   *
   * @param {string} [formula.formulaContent.virtualMachineCreationSource] Tells
   * source of creation of lab virtual machine. Output property only. Possible
   * values include: 'FromCustomImage', 'FromGalleryImage'
   *
   * @param {string} [formula.formulaContent.environmentId] The resource ID of
   * the environment that contains this virtual machine, if any.
   *
   * @param {string} [formula.formulaContent.provisioningState] The provisioning
   * status of the resource.
   *
   * @param {string} [formula.formulaContent.uniqueIdentifier] The unique
   * immutable identifier of a resource (Guid).
   *
   * @param {string} [formula.formulaContent.name] The name of the virtual
   * machine or environment
   *
   * @param {string} [formula.formulaContent.location] The location of the new
   * virtual machine or environment
   *
   * @param {object} [formula.formulaContent.tags] The tags of the resource.
   *
   * @param {object} [formula.vm] Information about a VM from which a formula is
   * to be created.
   *
   * @param {string} [formula.vm.labVmId] The identifier of the VM from which a
   * formula is to be created.
   *
   * @param {string} [formula.provisioningState] The provisioning status of the
   * resource.
   *
   * @param {string} [formula.uniqueIdentifier] The unique immutable identifier
   * of a resource (Guid).
   *
   * @param {string} [formula.location] The location of the resource.
   *
   * @param {object} [formula.tags] The tags of the resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Formula>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, labName, name, formula, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginCreateOrUpdate(resourceGroupName, labName, name, formula, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Create or replace an existing Formula. This operation can take a while to
   * complete.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} labName The name of the lab.
   *
   * @param {string} name The name of the formula.
   *
   * @param {object} formula A formula for creating a VM, specifying an image
   * base and other parameters
   *
   * @param {string} [formula.description] The description of the formula.
   *
   * @param {string} [formula.author] The author of the formula.
   *
   * @param {string} [formula.osType] The OS type of the formula.
   *
   * @param {object} [formula.formulaContent] The content of the formula.
   *
   * @param {object} [formula.formulaContent.bulkCreationParameters] The number
   * of virtual machine instances to create.
   *
   * @param {number}
   * [formula.formulaContent.bulkCreationParameters.instanceCount] The number of
   * virtual machine instances to create.
   *
   * @param {string} [formula.formulaContent.notes] The notes of the virtual
   * machine.
   *
   * @param {string} [formula.formulaContent.ownerObjectId] The object identifier
   * of the owner of the virtual machine.
   *
   * @param {string} [formula.formulaContent.ownerUserPrincipalName] The user
   * principal name of the virtual machine owner.
   *
   * @param {string} [formula.formulaContent.createdByUserId] The object
   * identifier of the creator of the virtual machine.
   *
   * @param {string} [formula.formulaContent.createdByUser] The email address of
   * creator of the virtual machine.
   *
   * @param {date} [formula.formulaContent.createdDate] The creation date of the
   * virtual machine.
   *
   * @param {string} [formula.formulaContent.customImageId] The custom image
   * identifier of the virtual machine.
   *
   * @param {string} [formula.formulaContent.osType] The OS type of the virtual
   * machine.
   *
   * @param {string} [formula.formulaContent.size] The size of the virtual
   * machine.
   *
   * @param {string} [formula.formulaContent.userName] The user name of the
   * virtual machine.
   *
   * @param {string} [formula.formulaContent.password] The password of the
   * virtual machine administrator.
   *
   * @param {string} [formula.formulaContent.sshKey] The SSH key of the virtual
   * machine administrator.
   *
   * @param {boolean} [formula.formulaContent.isAuthenticationWithSshKey]
   * Indicates whether this virtual machine uses an SSH key for authentication.
   *
   * @param {string} [formula.formulaContent.fqdn] The fully-qualified domain
   * name of the virtual machine.
   *
   * @param {string} [formula.formulaContent.labSubnetName] The lab subnet name
   * of the virtual machine.
   *
   * @param {string} [formula.formulaContent.labVirtualNetworkId] The lab virtual
   * network identifier of the virtual machine.
   *
   * @param {boolean} [formula.formulaContent.disallowPublicIpAddress] Indicates
   * whether the virtual machine is to be created without a public IP address.
   *
   * @param {array} [formula.formulaContent.artifacts] The artifacts to be
   * installed on the virtual machine.
   *
   * @param {object} [formula.formulaContent.artifactDeploymentStatus] The
   * artifact deployment status for the virtual machine.
   *
   * @param {string}
   * [formula.formulaContent.artifactDeploymentStatus.deploymentStatus] The
   * deployment status of the artifact.
   *
   * @param {number}
   * [formula.formulaContent.artifactDeploymentStatus.artifactsApplied] The total
   * count of the artifacts that were successfully applied.
   *
   * @param {number}
   * [formula.formulaContent.artifactDeploymentStatus.totalArtifacts] The total
   * count of the artifacts that were tentatively applied.
   *
   * @param {object} [formula.formulaContent.galleryImageReference] The Microsoft
   * Azure Marketplace image reference of the virtual machine.
   *
   * @param {string} [formula.formulaContent.galleryImageReference.offer] The
   * offer of the gallery image.
   *
   * @param {string} [formula.formulaContent.galleryImageReference.publisher] The
   * publisher of the gallery image.
   *
   * @param {string} [formula.formulaContent.galleryImageReference.sku] The SKU
   * of the gallery image.
   *
   * @param {string} [formula.formulaContent.galleryImageReference.osType] The OS
   * type of the gallery image.
   *
   * @param {string} [formula.formulaContent.galleryImageReference.version] The
   * version of the gallery image.
   *
   * @param {object} [formula.formulaContent.computeVm] The compute virtual
   * machine properties.
   *
   * @param {array} [formula.formulaContent.computeVm.statuses] Gets the statuses
   * of the virtual machine.
   *
   * @param {string} [formula.formulaContent.computeVm.osType] Gets the OS type
   * of the virtual machine.
   *
   * @param {string} [formula.formulaContent.computeVm.vmSize] Gets the size of
   * the virtual machine.
   *
   * @param {string} [formula.formulaContent.computeVm.networkInterfaceId] Gets
   * the network interface ID of the virtual machine.
   *
   * @param {string} [formula.formulaContent.computeVm.osDiskId] Gets OS disk
   * blob uri for the virtual machine.
   *
   * @param {array} [formula.formulaContent.computeVm.dataDiskIds] Gets data
   * disks blob uri for the virtual machine.
   *
   * @param {array} [formula.formulaContent.computeVm.dataDisks] Gets all data
   * disks attached to the virtual machine.
   *
   * @param {object} [formula.formulaContent.networkInterface] The network
   * interface properties.
   *
   * @param {string} [formula.formulaContent.networkInterface.virtualNetworkId]
   * The resource ID of the virtual network.
   *
   * @param {string} [formula.formulaContent.networkInterface.subnetId] The
   * resource ID of the sub net.
   *
   * @param {string} [formula.formulaContent.networkInterface.publicIpAddressId]
   * The resource ID of the public IP address.
   *
   * @param {string} [formula.formulaContent.networkInterface.publicIpAddress]
   * The public IP address.
   *
   * @param {string} [formula.formulaContent.networkInterface.privateIpAddress]
   * The private IP address.
   *
   * @param {string} [formula.formulaContent.networkInterface.dnsName] The DNS
   * name.
   *
   * @param {string} [formula.formulaContent.networkInterface.rdpAuthority] The
   * RdpAuthority property is a server DNS host name or IP address followed by
   * the service port number for RDP (Remote Desktop Protocol).
   *
   * @param {string} [formula.formulaContent.networkInterface.sshAuthority] The
   * SshAuthority property is a server DNS host name or IP address followed by
   * the service port number for SSH.
   *
   * @param {object}
   * [formula.formulaContent.networkInterface.sharedPublicIpAddressConfiguration]
   * The configuration for sharing a public IP address across multiple virtual
   * machines.
   *
   * @param {array}
   * [formula.formulaContent.networkInterface.sharedPublicIpAddressConfiguration.inboundNatRules]
   * The incoming NAT rules
   *
   * @param {object} [formula.formulaContent.applicableSchedule] The applicable
   * schedule for the virtual machine.
   *
   * @param {object} [formula.formulaContent.applicableSchedule.labVmsShutdown]
   * The auto-shutdown schedule, if one has been set at the lab or lab resource
   * level.
   *
   * @param {object} [formula.formulaContent.applicableSchedule.labVmsStartup]
   * The auto-startup schedule, if one has been set at the lab or lab resource
   * level.
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.status] The status
   * of the schedule (i.e. Enabled, Disabled). Possible values include:
   * 'Enabled', 'Disabled'
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.taskType] The task
   * type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
   *
   * @param {object}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.weeklyRecurrence]
   * If the schedule will occur only some days of the week, specify the weekly
   * recurrence.
   *
   * @param {array}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.weeklyRecurrence.weekdays]
   * The days of the week for which the schedule is set (e.g. Sunday, Monday,
   * Tuesday, etc.).
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.weeklyRecurrence.time]
   * The time of the day the schedule will occur.
   *
   * @param {object}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.dailyRecurrence] If
   * the schedule will occur once each day of the week, specify the daily
   * recurrence.
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.dailyRecurrence.time]
   * The time of day the schedule will occur.
   *
   * @param {object}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.hourlyRecurrence]
   * If the schedule will occur multiple times a day, specify the hourly
   * recurrence.
   *
   * @param {number}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.hourlyRecurrence.minute]
   * Minutes of the hour the schedule will run.
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.timeZoneId] The
   * time zone ID (e.g. Pacific Standard time).
   *
   * @param {object}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings]
   * Notification settings.
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings.status]
   * If notifications are enabled for this schedule (i.e. Enabled, Disabled).
   * Possible values include: 'Disabled', 'Enabled'
   *
   * @param {number}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings.timeInMinutes]
   * Time in minutes before event at which notification will be sent.
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.notificationSettings.webhookUrl]
   * The webhook URL to which the notification will be sent.
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.targetResourceId]
   * The resource ID to which the schedule belongs
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.provisioningState]
   * The provisioning status of the resource.
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.uniqueIdentifier]
   * The unique immutable identifier of a resource (Guid).
   *
   * @param {string}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.location] The
   * location of the resource.
   *
   * @param {object}
   * [formula.formulaContent.applicableSchedule.labVmsStartup.tags] The tags of
   * the resource.
   *
   * @param {string} [formula.formulaContent.applicableSchedule.location] The
   * location of the resource.
   *
   * @param {object} [formula.formulaContent.applicableSchedule.tags] The tags of
   * the resource.
   *
   * @param {date} [formula.formulaContent.expirationDate] The expiration date
   * for VM.
   *
   * @param {boolean} [formula.formulaContent.allowClaim] Indicates whether
   * another user can take ownership of the virtual machine
   *
   * @param {string} [formula.formulaContent.storageType] Storage type to use for
   * virtual machine (i.e. Standard, Premium).
   *
   * @param {string} [formula.formulaContent.virtualMachineCreationSource] Tells
   * source of creation of lab virtual machine. Output property only. Possible
   * values include: 'FromCustomImage', 'FromGalleryImage'
   *
   * @param {string} [formula.formulaContent.environmentId] The resource ID of
   * the environment that contains this virtual machine, if any.
   *
   * @param {string} [formula.formulaContent.provisioningState] The provisioning
   * status of the resource.
   *
   * @param {string} [formula.formulaContent.uniqueIdentifier] The unique
   * immutable identifier of a resource (Guid).
   *
   * @param {string} [formula.formulaContent.name] The name of the virtual
   * machine or environment
   *
   * @param {string} [formula.formulaContent.location] The location of the new
   * virtual machine or environment
   *
   * @param {object} [formula.formulaContent.tags] The tags of the resource.
   *
   * @param {object} [formula.vm] Information about a VM from which a formula is
   * to be created.
   *
   * @param {string} [formula.vm.labVmId] The identifier of the VM from which a
   * formula is to be created.
   *
   * @param {string} [formula.provisioningState] The provisioning status of the
   * resource.
   *
   * @param {string} [formula.uniqueIdentifier] The unique immutable identifier
   * of a resource (Guid).
   *
   * @param {string} [formula.location] The location of the resource.
   *
   * @param {object} [formula.tags] The tags of the resource.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Formula} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Formula} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginCreateOrUpdate(resourceGroupName, labName, name, formula, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginCreateOrUpdate(resourceGroupName, labName, name, formula, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginCreateOrUpdate(resourceGroupName, labName, name, formula, options, optionalCallback);
    }
  }

  /**
   * List formulas in a given lab.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ResponseWithContinuationFormula>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listNextWithHttpOperationResponse(nextPageLink, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listNext(nextPageLink, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * List formulas in a given lab.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ResponseWithContinuationFormula} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ResponseWithContinuationFormula} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listNext(nextPageLink, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listNext(nextPageLink, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listNext(nextPageLink, options, optionalCallback);
    }
  }

}

module.exports = Formulas;
