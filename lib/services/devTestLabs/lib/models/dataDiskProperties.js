/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the DataDiskProperties class.
 * @constructor
 * Request body for adding a new or existing data disk to a virtual machine.
 *
 * @member {object} [attachNewDataDiskOptions] Specifies options to attach a
 * new disk to the virtual machine.
 *
 * @member {number} [attachNewDataDiskOptions.diskSizeGiB] Size of the disk to
 * be attached in GibiBytes.
 *
 * @member {string} [attachNewDataDiskOptions.diskName] The name of the disk to
 * be attached.
 *
 * @member {string} [attachNewDataDiskOptions.diskType] The storage type for
 * the disk (i.e. Standard, Premium). Possible values include: 'Standard',
 * 'Premium'
 *
 * @member {string} [existingLabDiskId] Specifies the existing lab disk id to
 * attach to virtual machine.
 *
 * @member {string} [hostCaching] Caching option for a data disk (i.e. None,
 * ReadOnly, ReadWrite). Possible values include: 'None', 'ReadOnly',
 * 'ReadWrite'
 *
 */
class DataDiskProperties {
  constructor() {
  }

  /**
   * Defines the metadata of DataDiskProperties
   *
   * @returns {object} metadata of DataDiskProperties
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DataDiskProperties',
      type: {
        name: 'Composite',
        className: 'DataDiskProperties',
        modelProperties: {
          attachNewDataDiskOptions: {
            required: false,
            serializedName: 'attachNewDataDiskOptions',
            type: {
              name: 'Composite',
              className: 'AttachNewDataDiskOptions'
            }
          },
          existingLabDiskId: {
            required: false,
            serializedName: 'existingLabDiskId',
            type: {
              name: 'String'
            }
          },
          hostCaching: {
            required: false,
            serializedName: 'hostCaching',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = DataDiskProperties;
