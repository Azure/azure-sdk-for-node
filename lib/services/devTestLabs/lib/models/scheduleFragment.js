/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the ScheduleFragment class.
 * @constructor
 * A schedule.
 *
 * @member {string} [status] The status of the schedule (i.e. Enabled,
 * Disabled). Possible values include: 'Enabled', 'Disabled'
 *
 * @member {string} [taskType] The task type of the schedule (e.g.
 * LabVmsShutdownTask, LabVmAutoStart).
 *
 * @member {object} [weeklyRecurrence] If the schedule will occur only some
 * days of the week, specify the weekly recurrence.
 *
 * @member {array} [weeklyRecurrence.weekdays] The days of the week for which
 * the schedule is set (e.g. Sunday, Monday, Tuesday, etc.).
 *
 * @member {string} [weeklyRecurrence.time] The time of the day the schedule
 * will occur.
 *
 * @member {object} [dailyRecurrence] If the schedule will occur once each day
 * of the week, specify the daily recurrence.
 *
 * @member {string} [dailyRecurrence.time] The time of day the schedule will
 * occur.
 *
 * @member {object} [hourlyRecurrence] If the schedule will occur multiple
 * times a day, specify the hourly recurrence.
 *
 * @member {number} [hourlyRecurrence.minute] Minutes of the hour the schedule
 * will run.
 *
 * @member {string} [timeZoneId] The time zone ID (e.g. Pacific Standard time).
 *
 * @member {object} [notificationSettings] Notification settings.
 *
 * @member {string} [notificationSettings.status] If notifications are enabled
 * for this schedule (i.e. Enabled, Disabled). Possible values include:
 * 'Disabled', 'Enabled'
 *
 * @member {number} [notificationSettings.timeInMinutes] Time in minutes before
 * event at which notification will be sent.
 *
 * @member {string} [notificationSettings.webhookUrl] The webhook URL to which
 * the notification will be sent.
 *
 * @member {string} [targetResourceId] The resource ID to which the schedule
 * belongs
 *
 * @member {string} [provisioningState] The provisioning status of the
 * resource.
 *
 * @member {string} [uniqueIdentifier] The unique immutable identifier of a
 * resource (Guid).
 *
 */
class ScheduleFragment extends models['Resource'] {
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ScheduleFragment
   *
   * @returns {object} metadata of ScheduleFragment
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ScheduleFragment',
      type: {
        name: 'Composite',
        className: 'ScheduleFragment',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: false,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          status: {
            required: false,
            serializedName: 'properties.status',
            type: {
              name: 'String'
            }
          },
          taskType: {
            required: false,
            serializedName: 'properties.taskType',
            type: {
              name: 'String'
            }
          },
          weeklyRecurrence: {
            required: false,
            serializedName: 'properties.weeklyRecurrence',
            type: {
              name: 'Composite',
              className: 'WeekDetailsFragment'
            }
          },
          dailyRecurrence: {
            required: false,
            serializedName: 'properties.dailyRecurrence',
            type: {
              name: 'Composite',
              className: 'DayDetailsFragment'
            }
          },
          hourlyRecurrence: {
            required: false,
            serializedName: 'properties.hourlyRecurrence',
            type: {
              name: 'Composite',
              className: 'HourDetailsFragment'
            }
          },
          timeZoneId: {
            required: false,
            serializedName: 'properties.timeZoneId',
            type: {
              name: 'String'
            }
          },
          notificationSettings: {
            required: false,
            serializedName: 'properties.notificationSettings',
            type: {
              name: 'Composite',
              className: 'NotificationSettingsFragment'
            }
          },
          targetResourceId: {
            required: false,
            serializedName: 'properties.targetResourceId',
            type: {
              name: 'String'
            }
          },
          provisioningState: {
            required: false,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          uniqueIdentifier: {
            required: false,
            serializedName: 'properties.uniqueIdentifier',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ScheduleFragment;
