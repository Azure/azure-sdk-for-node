/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * A virtual machine.
 *
 * @extends models['UpdateResource']
 */
class LabVirtualMachineFragment extends models['UpdateResource'] {
  /**
   * Create a LabVirtualMachineFragment.
   * @member {string} [notes] The notes of the virtual machine.
   * @member {string} [ownerObjectId] The object identifier of the owner of the
   * virtual machine.
   * @member {string} [ownerUserPrincipalName] The user principal name of the
   * virtual machine owner.
   * @member {string} [createdByUserId] The object identifier of the creator of
   * the virtual machine.
   * @member {string} [createdByUser] The email address of creator of the
   * virtual machine.
   * @member {date} [createdDate] The creation date of the virtual machine.
   * @member {string} [computeId] The resource identifier (Microsoft.Compute)
   * of the virtual machine.
   * @member {string} [customImageId] The custom image identifier of the
   * virtual machine.
   * @member {string} [osType] The OS type of the virtual machine.
   * @member {string} [size] The size of the virtual machine.
   * @member {string} [userName] The user name of the virtual machine.
   * @member {string} [password] The password of the virtual machine
   * administrator.
   * @member {string} [sshKey] The SSH key of the virtual machine
   * administrator.
   * @member {boolean} [isAuthenticationWithSshKey] Indicates whether this
   * virtual machine uses an SSH key for authentication.
   * @member {string} [fqdn] The fully-qualified domain name of the virtual
   * machine.
   * @member {string} [labSubnetName] The lab subnet name of the virtual
   * machine.
   * @member {string} [labVirtualNetworkId] The lab virtual network identifier
   * of the virtual machine.
   * @member {boolean} [disallowPublicIpAddress] Indicates whether the virtual
   * machine is to be created without a public IP address.
   * @member {array} [artifacts] The artifacts to be installed on the virtual
   * machine.
   * @member {object} [artifactDeploymentStatus] The artifact deployment status
   * for the virtual machine.
   * @member {string} [artifactDeploymentStatus.deploymentStatus] The
   * deployment status of the artifact.
   * @member {number} [artifactDeploymentStatus.artifactsApplied] The total
   * count of the artifacts that were successfully applied.
   * @member {number} [artifactDeploymentStatus.totalArtifacts] The total count
   * of the artifacts that were tentatively applied.
   * @member {object} [galleryImageReference] The Microsoft Azure Marketplace
   * image reference of the virtual machine.
   * @member {string} [galleryImageReference.offer] The offer of the gallery
   * image.
   * @member {string} [galleryImageReference.publisher] The publisher of the
   * gallery image.
   * @member {string} [galleryImageReference.sku] The SKU of the gallery image.
   * @member {string} [galleryImageReference.osType] The OS type of the gallery
   * image.
   * @member {string} [galleryImageReference.version] The version of the
   * gallery image.
   * @member {string} [planId] The id of the plan associated with the virtual
   * machine image
   * @member {object} [networkInterface] The network interface properties.
   * @member {string} [networkInterface.virtualNetworkId] The resource ID of
   * the virtual network.
   * @member {string} [networkInterface.subnetId] The resource ID of the sub
   * net.
   * @member {string} [networkInterface.publicIpAddressId] The resource ID of
   * the public IP address.
   * @member {string} [networkInterface.publicIpAddress] The public IP address.
   * @member {string} [networkInterface.privateIpAddress] The private IP
   * address.
   * @member {string} [networkInterface.dnsName] The DNS name.
   * @member {string} [networkInterface.rdpAuthority] The RdpAuthority property
   * is a server DNS host name or IP address followed by the service port
   * number for RDP (Remote Desktop Protocol).
   * @member {string} [networkInterface.sshAuthority] The SshAuthority property
   * is a server DNS host name or IP address followed by the service port
   * number for SSH.
   * @member {object} [networkInterface.sharedPublicIpAddressConfiguration] The
   * configuration for sharing a public IP address across multiple virtual
   * machines.
   * @member {array}
   * [networkInterface.sharedPublicIpAddressConfiguration.inboundNatRules] The
   * incoming NAT rules
   * @member {date} [expirationDate] The expiration date for VM.
   * @member {boolean} [allowClaim] Indicates whether another user can take
   * ownership of the virtual machine
   * @member {string} [storageType] Storage type to use for virtual machine
   * (i.e. Standard, Premium).
   * @member {string} [virtualMachineCreationSource] Tells source of creation
   * of lab virtual machine. Output property only. Possible values include:
   * 'FromCustomImage', 'FromGalleryImage'
   * @member {string} [environmentId] The resource ID of the environment that
   * contains this virtual machine, if any.
   * @member {array} [dataDiskParameters] New or existing data disks to attach
   * to the virtual machine after creation
   * @member {array} [scheduleParameters] Virtual Machine schedules to be
   * created
   * @member {string} [lastKnownPowerState] Last known compute power state
   * captured in DTL
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of LabVirtualMachineFragment
   *
   * @returns {object} metadata of LabVirtualMachineFragment
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'LabVirtualMachineFragment',
      type: {
        name: 'Composite',
        className: 'LabVirtualMachineFragment',
        modelProperties: {
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          notes: {
            required: false,
            serializedName: 'properties.notes',
            type: {
              name: 'String'
            }
          },
          ownerObjectId: {
            required: false,
            serializedName: 'properties.ownerObjectId',
            type: {
              name: 'String'
            }
          },
          ownerUserPrincipalName: {
            required: false,
            serializedName: 'properties.ownerUserPrincipalName',
            type: {
              name: 'String'
            }
          },
          createdByUserId: {
            required: false,
            serializedName: 'properties.createdByUserId',
            type: {
              name: 'String'
            }
          },
          createdByUser: {
            required: false,
            serializedName: 'properties.createdByUser',
            type: {
              name: 'String'
            }
          },
          createdDate: {
            required: false,
            serializedName: 'properties.createdDate',
            type: {
              name: 'DateTime'
            }
          },
          computeId: {
            required: false,
            serializedName: 'properties.computeId',
            type: {
              name: 'String'
            }
          },
          customImageId: {
            required: false,
            serializedName: 'properties.customImageId',
            type: {
              name: 'String'
            }
          },
          osType: {
            required: false,
            serializedName: 'properties.osType',
            type: {
              name: 'String'
            }
          },
          size: {
            required: false,
            serializedName: 'properties.size',
            type: {
              name: 'String'
            }
          },
          userName: {
            required: false,
            serializedName: 'properties.userName',
            type: {
              name: 'String'
            }
          },
          password: {
            required: false,
            serializedName: 'properties.password',
            type: {
              name: 'String'
            }
          },
          sshKey: {
            required: false,
            serializedName: 'properties.sshKey',
            type: {
              name: 'String'
            }
          },
          isAuthenticationWithSshKey: {
            required: false,
            serializedName: 'properties.isAuthenticationWithSshKey',
            type: {
              name: 'Boolean'
            }
          },
          fqdn: {
            required: false,
            serializedName: 'properties.fqdn',
            type: {
              name: 'String'
            }
          },
          labSubnetName: {
            required: false,
            serializedName: 'properties.labSubnetName',
            type: {
              name: 'String'
            }
          },
          labVirtualNetworkId: {
            required: false,
            serializedName: 'properties.labVirtualNetworkId',
            type: {
              name: 'String'
            }
          },
          disallowPublicIpAddress: {
            required: false,
            serializedName: 'properties.disallowPublicIpAddress',
            type: {
              name: 'Boolean'
            }
          },
          artifacts: {
            required: false,
            serializedName: 'properties.artifacts',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ArtifactInstallPropertiesFragmentElementType',
                  type: {
                    name: 'Composite',
                    className: 'ArtifactInstallPropertiesFragment'
                  }
              }
            }
          },
          artifactDeploymentStatus: {
            required: false,
            serializedName: 'properties.artifactDeploymentStatus',
            type: {
              name: 'Composite',
              className: 'ArtifactDeploymentStatusPropertiesFragment'
            }
          },
          galleryImageReference: {
            required: false,
            serializedName: 'properties.galleryImageReference',
            type: {
              name: 'Composite',
              className: 'GalleryImageReferenceFragment'
            }
          },
          planId: {
            required: false,
            serializedName: 'properties.planId',
            type: {
              name: 'String'
            }
          },
          networkInterface: {
            required: false,
            serializedName: 'properties.networkInterface',
            type: {
              name: 'Composite',
              className: 'NetworkInterfacePropertiesFragment'
            }
          },
          expirationDate: {
            required: false,
            serializedName: 'properties.expirationDate',
            type: {
              name: 'DateTime'
            }
          },
          allowClaim: {
            required: false,
            serializedName: 'properties.allowClaim',
            type: {
              name: 'Boolean'
            }
          },
          storageType: {
            required: false,
            serializedName: 'properties.storageType',
            type: {
              name: 'String'
            }
          },
          virtualMachineCreationSource: {
            required: false,
            serializedName: 'properties.virtualMachineCreationSource',
            type: {
              name: 'String'
            }
          },
          environmentId: {
            required: false,
            serializedName: 'properties.environmentId',
            type: {
              name: 'String'
            }
          },
          dataDiskParameters: {
            required: false,
            serializedName: 'properties.dataDiskParameters',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'DataDiskPropertiesFragmentElementType',
                  type: {
                    name: 'Composite',
                    className: 'DataDiskPropertiesFragment'
                  }
              }
            }
          },
          scheduleParameters: {
            required: false,
            serializedName: 'properties.scheduleParameters',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ScheduleCreationParameterFragmentElementType',
                  type: {
                    name: 'Composite',
                    className: 'ScheduleCreationParameterFragment'
                  }
              }
            }
          },
          lastKnownPowerState: {
            required: false,
            serializedName: 'properties.lastKnownPowerState',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = LabVirtualMachineFragment;
