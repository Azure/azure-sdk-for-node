/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the CustomImage class.
 * @constructor
 * A custom image.
 *
 * @member {object} [vm] The virtual machine from which the image is to be
 * created.
 *
 * @member {string} [vm.sourceVmId] The source vm identifier.
 *
 * @member {object} [vm.windowsOsInfo] The Windows OS information of the VM.
 *
 * @member {string} [vm.windowsOsInfo.windowsOsState] The state of the Windows
 * OS (i.e. NonSysprepped, SysprepRequested, SysprepApplied). Possible values
 * include: 'NonSysprepped', 'SysprepRequested', 'SysprepApplied'
 *
 * @member {object} [vm.linuxOsInfo] The Linux OS information of the VM.
 *
 * @member {string} [vm.linuxOsInfo.linuxOsState] The state of the Linux OS
 * (i.e. NonDeprovisioned, DeprovisionRequested, DeprovisionApplied). Possible
 * values include: 'NonDeprovisioned', 'DeprovisionRequested',
 * 'DeprovisionApplied'
 *
 * @member {object} [vhd] The VHD from which the image is to be created.
 *
 * @member {string} [vhd.imageName] The image name.
 *
 * @member {boolean} [vhd.sysPrep] Indicates whether sysprep has been run on
 * the VHD.
 *
 * @member {string} [vhd.osType] The OS type of the custom image (i.e. Windows,
 * Linux). Possible values include: 'Windows', 'Linux', 'None'
 *
 * @member {string} [description] The description of the custom image.
 *
 * @member {string} [author] The author of the custom image.
 *
 * @member {date} [creationDate] The creation date of the custom image.
 *
 * @member {string} [managedImageId] The Managed Image Id backing the custom
 * image.
 *
 * @member {string} [provisioningState] The provisioning status of the
 * resource.
 *
 * @member {string} [uniqueIdentifier] The unique immutable identifier of a
 * resource (Guid).
 *
 */
class CustomImage extends models['Resource'] {
  constructor() {
    super();
  }

  /**
   * Defines the metadata of CustomImage
   *
   * @returns {object} metadata of CustomImage
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'CustomImage',
      type: {
        name: 'Composite',
        className: 'CustomImage',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: false,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          vm: {
            required: false,
            serializedName: 'properties.vm',
            type: {
              name: 'Composite',
              className: 'CustomImagePropertiesFromVm'
            }
          },
          vhd: {
            required: false,
            serializedName: 'properties.vhd',
            type: {
              name: 'Composite',
              className: 'CustomImagePropertiesCustom'
            }
          },
          description: {
            required: false,
            serializedName: 'properties.description',
            type: {
              name: 'String'
            }
          },
          author: {
            required: false,
            serializedName: 'properties.author',
            type: {
              name: 'String'
            }
          },
          creationDate: {
            required: false,
            readOnly: true,
            serializedName: 'properties.creationDate',
            type: {
              name: 'DateTime'
            }
          },
          managedImageId: {
            required: false,
            serializedName: 'properties.managedImageId',
            type: {
              name: 'String'
            }
          },
          provisioningState: {
            required: false,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          uniqueIdentifier: {
            required: false,
            serializedName: 'properties.uniqueIdentifier',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = CustomImage;
