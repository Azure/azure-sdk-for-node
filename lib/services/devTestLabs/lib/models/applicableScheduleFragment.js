/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the ApplicableScheduleFragment class.
 * @constructor
 * Schedules applicable to a virtual machine. The schedules may have been
 * defined on a VM or on lab level.
 *
 * @member {object} [labVmsShutdown] The auto-shutdown schedule, if one has
 * been set at the lab or lab resource level.
 *
 * @member {string} [labVmsShutdown.status] The status of the schedule (i.e.
 * Enabled, Disabled). Possible values include: 'Enabled', 'Disabled'
 *
 * @member {string} [labVmsShutdown.taskType] The task type of the schedule
 * (e.g. LabVmsShutdownTask, LabVmAutoStart).
 *
 * @member {object} [labVmsShutdown.weeklyRecurrence] If the schedule will
 * occur only some days of the week, specify the weekly recurrence.
 *
 * @member {array} [labVmsShutdown.weeklyRecurrence.weekdays] The days of the
 * week for which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.).
 *
 * @member {string} [labVmsShutdown.weeklyRecurrence.time] The time of the day
 * the schedule will occur.
 *
 * @member {object} [labVmsShutdown.dailyRecurrence] If the schedule will occur
 * once each day of the week, specify the daily recurrence.
 *
 * @member {string} [labVmsShutdown.dailyRecurrence.time] The time of day the
 * schedule will occur.
 *
 * @member {object} [labVmsShutdown.hourlyRecurrence] If the schedule will
 * occur multiple times a day, specify the hourly recurrence.
 *
 * @member {number} [labVmsShutdown.hourlyRecurrence.minute] Minutes of the
 * hour the schedule will run.
 *
 * @member {string} [labVmsShutdown.timeZoneId] The time zone ID (e.g. Pacific
 * Standard time).
 *
 * @member {object} [labVmsShutdown.notificationSettings] Notification
 * settings.
 *
 * @member {string} [labVmsShutdown.notificationSettings.status] If
 * notifications are enabled for this schedule (i.e. Enabled, Disabled).
 * Possible values include: 'Disabled', 'Enabled'
 *
 * @member {number} [labVmsShutdown.notificationSettings.timeInMinutes] Time in
 * minutes before event at which notification will be sent.
 *
 * @member {string} [labVmsShutdown.notificationSettings.webhookUrl] The
 * webhook URL to which the notification will be sent.
 *
 * @member {string} [labVmsShutdown.targetResourceId] The resource ID to which
 * the schedule belongs
 *
 * @member {string} [labVmsShutdown.provisioningState] The provisioning status
 * of the resource.
 *
 * @member {string} [labVmsShutdown.uniqueIdentifier] The unique immutable
 * identifier of a resource (Guid).
 *
 * @member {object} [labVmsStartup] The auto-startup schedule, if one has been
 * set at the lab or lab resource level.
 *
 * @member {string} [labVmsStartup.status] The status of the schedule (i.e.
 * Enabled, Disabled). Possible values include: 'Enabled', 'Disabled'
 *
 * @member {string} [labVmsStartup.taskType] The task type of the schedule
 * (e.g. LabVmsShutdownTask, LabVmAutoStart).
 *
 * @member {object} [labVmsStartup.weeklyRecurrence] If the schedule will occur
 * only some days of the week, specify the weekly recurrence.
 *
 * @member {array} [labVmsStartup.weeklyRecurrence.weekdays] The days of the
 * week for which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.).
 *
 * @member {string} [labVmsStartup.weeklyRecurrence.time] The time of the day
 * the schedule will occur.
 *
 * @member {object} [labVmsStartup.dailyRecurrence] If the schedule will occur
 * once each day of the week, specify the daily recurrence.
 *
 * @member {string} [labVmsStartup.dailyRecurrence.time] The time of day the
 * schedule will occur.
 *
 * @member {object} [labVmsStartup.hourlyRecurrence] If the schedule will occur
 * multiple times a day, specify the hourly recurrence.
 *
 * @member {number} [labVmsStartup.hourlyRecurrence.minute] Minutes of the hour
 * the schedule will run.
 *
 * @member {string} [labVmsStartup.timeZoneId] The time zone ID (e.g. Pacific
 * Standard time).
 *
 * @member {object} [labVmsStartup.notificationSettings] Notification settings.
 *
 * @member {string} [labVmsStartup.notificationSettings.status] If
 * notifications are enabled for this schedule (i.e. Enabled, Disabled).
 * Possible values include: 'Disabled', 'Enabled'
 *
 * @member {number} [labVmsStartup.notificationSettings.timeInMinutes] Time in
 * minutes before event at which notification will be sent.
 *
 * @member {string} [labVmsStartup.notificationSettings.webhookUrl] The webhook
 * URL to which the notification will be sent.
 *
 * @member {string} [labVmsStartup.targetResourceId] The resource ID to which
 * the schedule belongs
 *
 * @member {string} [labVmsStartup.provisioningState] The provisioning status
 * of the resource.
 *
 * @member {string} [labVmsStartup.uniqueIdentifier] The unique immutable
 * identifier of a resource (Guid).
 *
 */
class ApplicableScheduleFragment extends models['Resource'] {
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ApplicableScheduleFragment
   *
   * @returns {object} metadata of ApplicableScheduleFragment
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ApplicableScheduleFragment',
      type: {
        name: 'Composite',
        className: 'ApplicableScheduleFragment',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: false,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          labVmsShutdown: {
            required: false,
            serializedName: 'properties.labVmsShutdown',
            type: {
              name: 'Composite',
              className: 'ScheduleFragment'
            }
          },
          labVmsStartup: {
            required: false,
            serializedName: 'properties.labVmsStartup',
            type: {
              name: 'Composite',
              className: 'ScheduleFragment'
            }
          }
        }
      }
    };
  }
}

module.exports = ApplicableScheduleFragment;
