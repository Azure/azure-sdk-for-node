/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the PolicyFragment class.
 * @constructor
 * A Policy.
 *
 * @member {string} [description] The description of the policy.
 *
 * @member {string} [status] The status of the policy. Possible values include:
 * 'Enabled', 'Disabled'
 *
 * @member {string} [factName] The fact name of the policy (e.g. LabVmCount,
 * LabVmSize, MaxVmsAllowedPerLab, etc. Possible values include:
 * 'UserOwnedLabVmCount', 'UserOwnedLabPremiumVmCount', 'LabVmCount',
 * 'LabPremiumVmCount', 'LabVmSize', 'GalleryImage',
 * 'UserOwnedLabVmCountInSubnet', 'LabTargetCost'
 *
 * @member {string} [factData] The fact data of the policy.
 *
 * @member {string} [threshold] The threshold of the policy (i.e. a number for
 * MaxValuePolicy, and a JSON array of values for AllowedValuesPolicy).
 *
 * @member {string} [evaluatorType] The evaluator type of the policy (i.e.
 * AllowedValuesPolicy, MaxValuePolicy). Possible values include:
 * 'AllowedValuesPolicy', 'MaxValuePolicy'
 *
 * @member {string} [provisioningState] The provisioning status of the
 * resource.
 *
 * @member {string} [uniqueIdentifier] The unique immutable identifier of a
 * resource (Guid).
 *
 */
class PolicyFragment extends models['Resource'] {
  constructor() {
    super();
  }

  /**
   * Defines the metadata of PolicyFragment
   *
   * @returns {object} metadata of PolicyFragment
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'PolicyFragment',
      type: {
        name: 'Composite',
        className: 'PolicyFragment',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: false,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          description: {
            required: false,
            serializedName: 'properties.description',
            type: {
              name: 'String'
            }
          },
          status: {
            required: false,
            serializedName: 'properties.status',
            type: {
              name: 'String'
            }
          },
          factName: {
            required: false,
            serializedName: 'properties.factName',
            type: {
              name: 'String'
            }
          },
          factData: {
            required: false,
            serializedName: 'properties.factData',
            type: {
              name: 'String'
            }
          },
          threshold: {
            required: false,
            serializedName: 'properties.threshold',
            type: {
              name: 'String'
            }
          },
          evaluatorType: {
            required: false,
            serializedName: 'properties.evaluatorType',
            type: {
              name: 'String'
            }
          },
          provisioningState: {
            required: false,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          uniqueIdentifier: {
            required: false,
            serializedName: 'properties.uniqueIdentifier',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = PolicyFragment;
