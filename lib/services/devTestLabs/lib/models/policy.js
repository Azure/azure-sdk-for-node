/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the Policy class.
 * @constructor
 * A Policy.
 *
 * @member {string} [description] The description of the policy.
 * 
 * @member {string} [status] The status of the policy. Possible values include:
 * 'Enabled', 'Disabled'
 * 
 * @member {string} [factName] The fact name of the policy. Possible values
 * include: 'UserOwnedLabVmCount', 'LabVmCount', 'LabVmSize', 'GalleryImage',
 * 'UserOwnedLabVmCountInSubnet'
 * 
 * @member {string} [factData] The fact data of the policy.
 * 
 * @member {string} [threshold] The threshold of the policy.
 * 
 * @member {string} [evaluatorType] The evaluator type of the policy. Possible
 * values include: 'AllowedValuesPolicy', 'MaxValuePolicy'
 * 
 * @member {string} [provisioningState] The provisioning status of the
 * resource.
 * 
 * @member {string} [uniqueIdentifier] The unique immutable identifier of a
 * resource (Guid).
 * 
 * @member {string} [id] The identifier of the resource.
 * 
 * @member {string} [name] The name of the resource.
 * 
 * @member {string} [type] The type of the resource.
 * 
 * @member {string} [location] The location of the resource.
 * 
 * @member {object} [tags] The tags of the resource.
 * 
 */
function Policy() {
  Policy['super_'].call(this);
}

util.inherits(Policy, models['BaseResource']);

/**
 * Defines the metadata of Policy
 *
 * @returns {object} metadata of Policy
 *
 */
Policy.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'Policy',
    type: {
      name: 'Composite',
      className: 'Policy',
      modelProperties: {
        description: {
          required: false,
          serializedName: 'properties.description',
          type: {
            name: 'String'
          }
        },
        status: {
          required: false,
          serializedName: 'properties.status',
          type: {
            name: 'String'
          }
        },
        factName: {
          required: false,
          serializedName: 'properties.factName',
          type: {
            name: 'String'
          }
        },
        factData: {
          required: false,
          serializedName: 'properties.factData',
          type: {
            name: 'String'
          }
        },
        threshold: {
          required: false,
          serializedName: 'properties.threshold',
          type: {
            name: 'String'
          }
        },
        evaluatorType: {
          required: false,
          serializedName: 'properties.evaluatorType',
          type: {
            name: 'String'
          }
        },
        provisioningState: {
          required: false,
          serializedName: 'properties.provisioningState',
          type: {
            name: 'String'
          }
        },
        uniqueIdentifier: {
          required: false,
          serializedName: 'properties.uniqueIdentifier',
          type: {
            name: 'String'
          }
        },
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        type: {
          required: false,
          serializedName: 'type',
          type: {
            name: 'String'
          }
        },
        location: {
          required: false,
          serializedName: 'location',
          type: {
            name: 'String'
          }
        },
        tags: {
          required: false,
          serializedName: 'tags',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        }
      }
    }
  };
};

module.exports = Policy;
