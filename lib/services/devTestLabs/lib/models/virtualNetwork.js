/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the VirtualNetwork class.
 * @constructor
 * A virtual network.
 *
 * @member {array} [allowedSubnets] The allowed subnets of the virtual network.
 *
 * @member {string} [description] The description of the virtual network.
 *
 * @member {string} [externalProviderResourceId] The Microsoft.Network resource
 * identifier of the virtual network.
 *
 * @member {array} [externalSubnets] The external subnet properties.
 *
 * @member {array} [subnetOverrides] The subnet overrides of the virtual
 * network.
 *
 * @member {date} [createdDate] The creation date of the virtual network.
 *
 * @member {string} [provisioningState] The provisioning status of the
 * resource.
 *
 * @member {string} [uniqueIdentifier] The unique immutable identifier of a
 * resource (Guid).
 *
 */
class VirtualNetwork extends models['Resource'] {
  constructor() {
    super();
  }

  /**
   * Defines the metadata of VirtualNetwork
   *
   * @returns {object} metadata of VirtualNetwork
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'VirtualNetwork',
      type: {
        name: 'Composite',
        className: 'VirtualNetwork',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: false,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          allowedSubnets: {
            required: false,
            serializedName: 'properties.allowedSubnets',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'SubnetElementType',
                  type: {
                    name: 'Composite',
                    className: 'Subnet'
                  }
              }
            }
          },
          description: {
            required: false,
            serializedName: 'properties.description',
            type: {
              name: 'String'
            }
          },
          externalProviderResourceId: {
            required: false,
            serializedName: 'properties.externalProviderResourceId',
            type: {
              name: 'String'
            }
          },
          externalSubnets: {
            required: false,
            serializedName: 'properties.externalSubnets',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ExternalSubnetElementType',
                  type: {
                    name: 'Composite',
                    className: 'ExternalSubnet'
                  }
              }
            }
          },
          subnetOverrides: {
            required: false,
            serializedName: 'properties.subnetOverrides',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'SubnetOverrideElementType',
                  type: {
                    name: 'Composite',
                    className: 'SubnetOverride'
                  }
              }
            }
          },
          createdDate: {
            required: false,
            readOnly: true,
            serializedName: 'properties.createdDate',
            type: {
              name: 'DateTime'
            }
          },
          provisioningState: {
            required: false,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          uniqueIdentifier: {
            required: false,
            serializedName: 'properties.uniqueIdentifier',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = VirtualNetwork;
