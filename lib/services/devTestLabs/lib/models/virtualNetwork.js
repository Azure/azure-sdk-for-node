/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the VirtualNetwork class.
 * @constructor
 * A virtual network.
 *
 * @member {array} [allowedSubnets] The allowed subnets of the virtual network.
 * 
 * @member {string} [description] The description of the virtual network.
 * 
 * @member {string} [externalProviderResourceId] The Microsoft.Network resource
 * identifier of the virtual network.
 * 
 * @member {array} [subnetOverrides] The subnet overrides of the virtual
 * network.
 * 
 * @member {string} [provisioningState] The provisioning status of the
 * resource.
 * 
 * @member {string} [uniqueIdentifier] The unique immutable identifier of a
 * resource (Guid).
 * 
 * @member {string} [id] The identifier of the resource.
 * 
 * @member {string} [name] The name of the resource.
 * 
 * @member {string} [type] The type of the resource.
 * 
 * @member {string} [location] The location of the resource.
 * 
 * @member {object} [tags] The tags of the resource.
 * 
 */
function VirtualNetwork() {
  VirtualNetwork['super_'].call(this);
}

util.inherits(VirtualNetwork, models['BaseResource']);

/**
 * Defines the metadata of VirtualNetwork
 *
 * @returns {object} metadata of VirtualNetwork
 *
 */
VirtualNetwork.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'VirtualNetwork',
    type: {
      name: 'Composite',
      className: 'VirtualNetwork',
      modelProperties: {
        allowedSubnets: {
          required: false,
          serializedName: 'properties.allowedSubnets',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'SubnetElementType',
                type: {
                  name: 'Composite',
                  className: 'Subnet'
                }
            }
          }
        },
        description: {
          required: false,
          serializedName: 'properties.description',
          type: {
            name: 'String'
          }
        },
        externalProviderResourceId: {
          required: false,
          serializedName: 'properties.externalProviderResourceId',
          type: {
            name: 'String'
          }
        },
        subnetOverrides: {
          required: false,
          serializedName: 'properties.subnetOverrides',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'SubnetOverrideElementType',
                type: {
                  name: 'Composite',
                  className: 'SubnetOverride'
                }
            }
          }
        },
        provisioningState: {
          required: false,
          serializedName: 'properties.provisioningState',
          type: {
            name: 'String'
          }
        },
        uniqueIdentifier: {
          required: false,
          serializedName: 'properties.uniqueIdentifier',
          type: {
            name: 'String'
          }
        },
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        type: {
          required: false,
          serializedName: 'type',
          type: {
            name: 'String'
          }
        },
        location: {
          required: false,
          serializedName: 'location',
          type: {
            name: 'String'
          }
        },
        tags: {
          required: false,
          serializedName: 'tags',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        }
      }
    }
  };
};

module.exports = VirtualNetwork;
