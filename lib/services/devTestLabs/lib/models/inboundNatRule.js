/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the InboundNatRule class.
 * @constructor
 * A rule for NAT - exposing a VM's port (backendPort) on the public IP address
 * using a load balancer.
 *
 * @member {string} [transportProtocol] The transport protocol for the
 * endpoint. Possible values include: 'Tcp', 'Udp'
 *
 * @member {number} [frontendPort] The external endpoint port of the inbound
 * connection. Possible values range between 1 and 65535, inclusive. If
 * unspecified, a value will be allocated automatically.
 *
 * @member {number} [backendPort] The port to which the external traffic will
 * be redirected.
 *
 */
class InboundNatRule {
  constructor() {
  }

  /**
   * Defines the metadata of InboundNatRule
   *
   * @returns {object} metadata of InboundNatRule
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'InboundNatRule',
      type: {
        name: 'Composite',
        className: 'InboundNatRule',
        modelProperties: {
          transportProtocol: {
            required: false,
            serializedName: 'transportProtocol',
            type: {
              name: 'String'
            }
          },
          frontendPort: {
            required: false,
            serializedName: 'frontendPort',
            type: {
              name: 'Number'
            }
          },
          backendPort: {
            required: false,
            serializedName: 'backendPort',
            type: {
              name: 'Number'
            }
          }
        }
      }
    };
  }
}

module.exports = InboundNatRule;
