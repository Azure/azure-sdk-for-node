/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Properties of a cost threshold item.
 *
 */
class CostThresholdProperties {
  /**
   * Create a CostThresholdProperties.
   * @member {string} [thresholdId] The ID of the cost threshold item.
   * @member {object} [percentageThreshold] The value of the percentage cost
   * threshold.
   * @member {number} [percentageThreshold.thresholdValue] The cost threshold
   * value.
   * @member {string} [displayOnChart] Indicates whether this threshold will be
   * displayed on cost charts. Possible values include: 'Enabled', 'Disabled'
   * @member {string} [sendNotificationWhenExceeded] Indicates whether
   * notifications will be sent when this threshold is exceeded. Possible
   * values include: 'Enabled', 'Disabled'
   * @member {string} [notificationSent] Indicates the datetime when
   * notifications were last sent for this threshold.
   */
  constructor() {
  }

  /**
   * Defines the metadata of CostThresholdProperties
   *
   * @returns {object} metadata of CostThresholdProperties
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'CostThresholdProperties',
      type: {
        name: 'Composite',
        className: 'CostThresholdProperties',
        modelProperties: {
          thresholdId: {
            required: false,
            serializedName: 'thresholdId',
            type: {
              name: 'String'
            }
          },
          percentageThreshold: {
            required: false,
            serializedName: 'percentageThreshold',
            type: {
              name: 'Composite',
              className: 'PercentageCostThresholdProperties'
            }
          },
          displayOnChart: {
            required: false,
            serializedName: 'displayOnChart',
            type: {
              name: 'String'
            }
          },
          sendNotificationWhenExceeded: {
            required: false,
            serializedName: 'sendNotificationWhenExceeded',
            type: {
              name: 'String'
            }
          },
          notificationSent: {
            required: false,
            serializedName: 'notificationSent',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = CostThresholdProperties;
