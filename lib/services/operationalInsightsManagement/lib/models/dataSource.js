/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Datasources under OMS Workspace.
 *
 * @extends models['ProxyResource']
 */
class DataSource extends models['ProxyResource'] {
  /**
   * Create a DataSource.
   * @member {object} properties The data source properties in raw json format,
   * each kind of data source have it's own schema.
   * @member {string} [eTag] The ETag of the data source.
   * @member {string} kind Possible values include: 'AzureActivityLog',
   * 'ChangeTrackingPath', 'ChangeTrackingDefaultPath',
   * 'ChangeTrackingDefaultRegistry', 'ChangeTrackingCustomRegistry',
   * 'CustomLog', 'CustomLogCollection', 'GenericDataSource', 'IISLogs',
   * 'LinuxPerformanceObject', 'LinuxPerformanceCollection', 'LinuxSyslog',
   * 'LinuxSyslogCollection', 'WindowsEvent', 'WindowsPerformanceCounter'
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of DataSource
   *
   * @returns {object} metadata of DataSource
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DataSource',
      type: {
        name: 'Composite',
        className: 'DataSource',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          properties: {
            required: true,
            serializedName: 'properties',
            type: {
              name: 'Object'
            }
          },
          eTag: {
            required: false,
            serializedName: 'eTag',
            type: {
              name: 'String'
            }
          },
          kind: {
            required: true,
            serializedName: 'kind',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = DataSource;
