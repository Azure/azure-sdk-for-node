/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The top level storage insight resource container.
 *
 * @extends models['ProxyResource']
 */
class StorageInsight extends models['ProxyResource'] {
  /**
   * Create a StorageInsight.
   * @member {array} [containers] The names of the blob containers that the
   * workspace should read
   * @member {array} [tables] The names of the Azure tables that the workspace
   * should read
   * @member {object} storageAccount The storage account connection details
   * @member {string} [storageAccount.id] The Azure Resource Manager ID of the
   * storage account resource.
   * @member {string} [storageAccount.key] The storage account key.
   * @member {object} [status] The status of the storage insight
   * @member {string} [status.state] The state of the storage insight
   * connection to the workspace. Possible values include: 'OK', 'ERROR'
   * @member {string} [status.description] Description of the state of the
   * storage insight.
   * @member {string} [eTag] The ETag of the storage insight.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of StorageInsight
   *
   * @returns {object} metadata of StorageInsight
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'StorageInsight',
      type: {
        name: 'Composite',
        className: 'StorageInsight',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          containers: {
            required: false,
            serializedName: 'properties.containers',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          tables: {
            required: false,
            serializedName: 'properties.tables',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          storageAccount: {
            required: true,
            serializedName: 'properties.storageAccount',
            type: {
              name: 'Composite',
              className: 'StorageAccount'
            }
          },
          status: {
            required: false,
            readOnly: true,
            serializedName: 'properties.status',
            type: {
              name: 'Composite',
              className: 'StorageInsightStatus'
            }
          },
          eTag: {
            required: false,
            serializedName: 'eTag',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = StorageInsight;
