/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * ContainerGroups
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ContainerInstanceManagementClient.
 */
export interface ContainerGroups {


    /**
     * @summary Get a list of container groups in the specified subscription.
     *
     * Get a list of container groups in the specified subscription. This operation
     * returns properties of each container group including containers, image
     * registry credentials, restart policy, IP address type, OS type, state, and
     * volumes.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ContainerGroupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ContainerGroupListResult>>;

    /**
     * @summary Get a list of container groups in the specified subscription.
     *
     * Get a list of container groups in the specified subscription. This operation
     * returns properties of each container group including containers, image
     * registry credentials, restart policy, IP address type, OS type, state, and
     * volumes.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ContainerGroupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ContainerGroupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ContainerGroupListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ContainerGroupListResult>;
    list(callback: ServiceCallback<models.ContainerGroupListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ContainerGroupListResult>): void;


    /**
     * @summary Get a list of container groups in the specified subscription and
     * resource group.
     *
     * Get a list of container groups in a specified subscription and resource
     * group. This operation returns properties of each container group including
     * containers, image registry credentials, restart policy, IP address type, OS
     * type, state, and volumes.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the container group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ContainerGroupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ContainerGroupListResult>>;

    /**
     * @summary Get a list of container groups in the specified subscription and
     * resource group.
     *
     * Get a list of container groups in a specified subscription and resource
     * group. This operation returns properties of each container group including
     * containers, image registry credentials, restart policy, IP address type, OS
     * type, state, and volumes.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the container group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ContainerGroupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ContainerGroupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ContainerGroupListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ContainerGroupListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.ContainerGroupListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ContainerGroupListResult>): void;


    /**
     * @summary Get the properties of the specified container group.
     *
     * Gets the properties of the specified container group in the specified
     * subscription and resource group. The operation returns the properties of
     * each container group including containers, image registry credentials,
     * restart policy, IP address type, OS type, state, and volumes.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the container group.
     *
     * @param {string} containerGroupName The name of the container group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ContainerGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, containerGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ContainerGroup>>;

    /**
     * @summary Get the properties of the specified container group.
     *
     * Gets the properties of the specified container group in the specified
     * subscription and resource group. The operation returns the properties of
     * each container group including containers, image registry credentials,
     * restart policy, IP address type, OS type, state, and volumes.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the container group.
     *
     * @param {string} containerGroupName The name of the container group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ContainerGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ContainerGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ContainerGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, containerGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ContainerGroup>;
    get(resourceGroupName: string, containerGroupName: string, callback: ServiceCallback<models.ContainerGroup>): void;
    get(resourceGroupName: string, containerGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ContainerGroup>): void;


    /**
     * @summary Create or update container groups.
     *
     * Create or update container groups with specified configurations.
     *
     * @param {string} resourceGroupName The name of the resource group to contain
     * the container group to be created or updated.
     *
     * @param {string} containerGroupName The name of the container group to be
     * created or updated.
     *
     * @param {object} containerGroup The properties of the container group to be
     * created or updated.
     *
     * @param {array} [containerGroup.containers] The containers within the
     * container group.
     *
     * @param {array} [containerGroup.imageRegistryCredentials] The image registry
     * credentials by which the container group is created from.
     *
     * @param {string} [containerGroup.restartPolicy] Restart policy for all
     * containers within the container group. Currently the only available option
     * is `always`. Possible values include: 'always'
     *
     * @param {object} [containerGroup.ipAddress] The IP address type of the
     * container group.
     *
     * @param {array} containerGroup.ipAddress.ports The list of ports exposed on
     * the container group.
     *
     * @param {string} [containerGroup.ipAddress.ip] The IP exposed to the public
     * internet.
     *
     * @param {string} [containerGroup.osType] The operating system type required
     * by the containers in the container group. Possible values include:
     * 'Windows', 'Linux'
     *
     * @param {array} [containerGroup.volumes] The list of volumes that can be
     * mounted by containers in this container group.
     *
     * @param {string} containerGroup.location The resource location.
     *
     * @param {object} [containerGroup.tags] The resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ContainerGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, containerGroupName: string, containerGroup: models.ContainerGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ContainerGroup>>;

    /**
     * @summary Create or update container groups.
     *
     * Create or update container groups with specified configurations.
     *
     * @param {string} resourceGroupName The name of the resource group to contain
     * the container group to be created or updated.
     *
     * @param {string} containerGroupName The name of the container group to be
     * created or updated.
     *
     * @param {object} containerGroup The properties of the container group to be
     * created or updated.
     *
     * @param {array} [containerGroup.containers] The containers within the
     * container group.
     *
     * @param {array} [containerGroup.imageRegistryCredentials] The image registry
     * credentials by which the container group is created from.
     *
     * @param {string} [containerGroup.restartPolicy] Restart policy for all
     * containers within the container group. Currently the only available option
     * is `always`. Possible values include: 'always'
     *
     * @param {object} [containerGroup.ipAddress] The IP address type of the
     * container group.
     *
     * @param {array} containerGroup.ipAddress.ports The list of ports exposed on
     * the container group.
     *
     * @param {string} [containerGroup.ipAddress.ip] The IP exposed to the public
     * internet.
     *
     * @param {string} [containerGroup.osType] The operating system type required
     * by the containers in the container group. Possible values include:
     * 'Windows', 'Linux'
     *
     * @param {array} [containerGroup.volumes] The list of volumes that can be
     * mounted by containers in this container group.
     *
     * @param {string} containerGroup.location The resource location.
     *
     * @param {object} [containerGroup.tags] The resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ContainerGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ContainerGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ContainerGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, containerGroupName: string, containerGroup: models.ContainerGroup, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ContainerGroup>;
    createOrUpdate(resourceGroupName: string, containerGroupName: string, containerGroup: models.ContainerGroup, callback: ServiceCallback<models.ContainerGroup>): void;
    createOrUpdate(resourceGroupName: string, containerGroupName: string, containerGroup: models.ContainerGroup, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ContainerGroup>): void;


    /**
     * @summary Delete the specified container group.
     *
     * Delete the specified container group in the specified subscription and
     * resource group. The operation does not delete other resources provided by
     * the user, such as volumes.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the container group.
     *
     * @param {string} containerGroupName The name of the container group to be
     * deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ContainerGroup>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, containerGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ContainerGroup>>;

    /**
     * @summary Delete the specified container group.
     *
     * Delete the specified container group in the specified subscription and
     * resource group. The operation does not delete other resources provided by
     * the user, such as volumes.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the container group.
     *
     * @param {string} containerGroupName The name of the container group to be
     * deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ContainerGroup} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ContainerGroup} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ContainerGroup} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, containerGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ContainerGroup>;
    deleteMethod(resourceGroupName: string, containerGroupName: string, callback: ServiceCallback<models.ContainerGroup>): void;
    deleteMethod(resourceGroupName: string, containerGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ContainerGroup>): void;


    /**
     * @summary Get a list of container groups in the specified subscription.
     *
     * Get a list of container groups in the specified subscription. This operation
     * returns properties of each container group including containers, image
     * registry credentials, restart policy, IP address type, OS type, state, and
     * volumes.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ContainerGroupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ContainerGroupListResult>>;

    /**
     * @summary Get a list of container groups in the specified subscription.
     *
     * Get a list of container groups in the specified subscription. This operation
     * returns properties of each container group including containers, image
     * registry credentials, restart policy, IP address type, OS type, state, and
     * volumes.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ContainerGroupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ContainerGroupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ContainerGroupListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ContainerGroupListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ContainerGroupListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ContainerGroupListResult>): void;


    /**
     * @summary Get a list of container groups in the specified subscription and
     * resource group.
     *
     * Get a list of container groups in a specified subscription and resource
     * group. This operation returns properties of each container group including
     * containers, image registry credentials, restart policy, IP address type, OS
     * type, state, and volumes.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ContainerGroupListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ContainerGroupListResult>>;

    /**
     * @summary Get a list of container groups in the specified subscription and
     * resource group.
     *
     * Get a list of container groups in a specified subscription and resource
     * group. This operation returns properties of each container group including
     * containers, image registry credentials, restart policy, IP address type, OS
     * type, state, and volumes.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ContainerGroupListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ContainerGroupListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ContainerGroupListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ContainerGroupListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.ContainerGroupListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ContainerGroupListResult>): void;
}

/**
 * @class
 * ContainerLogs
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ContainerInstanceManagementClient.
 */
export interface ContainerLogs {


    /**
     * @summary Get the logs for a specified container instance.
     *
     * Get the logs for a specified container instance in a specified resource
     * group and container group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the container instance.
     *
     * @param {string} containerName The name of the container instance.
     *
     * @param {string} containerGroupName The name of the container group the
     * container instance belongs to.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.tail] The number of lines to show from the tail of
     * the container instance log. If not provided, all available logs are shown up
     * to 4mb.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Logs>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(resourceGroupName: string, containerName: string, containerGroupName: string, options?: { tail? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Logs>>;

    /**
     * @summary Get the logs for a specified container instance.
     *
     * Get the logs for a specified container instance in a specified resource
     * group and container group.
     *
     * @param {string} resourceGroupName The name of the resource group that
     * contains the container instance.
     *
     * @param {string} containerName The name of the container instance.
     *
     * @param {string} containerGroupName The name of the container group the
     * container instance belongs to.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.tail] The number of lines to show from the tail of
     * the container instance log. If not provided, all available logs are shown up
     * to 4mb.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Logs} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Logs} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Logs} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(resourceGroupName: string, containerName: string, containerGroupName: string, options?: { tail? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.Logs>;
    list(resourceGroupName: string, containerName: string, containerGroupName: string, callback: ServiceCallback<models.Logs>): void;
    list(resourceGroupName: string, containerName: string, containerGroupName: string, options: { tail? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Logs>): void;
}
