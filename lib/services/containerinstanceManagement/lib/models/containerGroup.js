/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * A container group.
 *
 * @extends models['Resource']
 */
class ContainerGroup extends models['Resource'] {
  /**
   * Create a ContainerGroup.
   * @property {object} [identity] The identity of the container group, if
   * configured.
   * @property {string} [identity.principalId] The principal id of the
   * container group identity. This property will only be provided for a system
   * assigned identity.
   * @property {string} [identity.tenantId] The tenant id associated with the
   * container group. This property will only be provided for a system assigned
   * identity.
   * @property {string} [identity.type] The type of identity used for the
   * container group. The type 'SystemAssigned, UserAssigned' includes both an
   * implicitly created identity and a set of user assigned identities. The
   * type 'None' will remove any identities from the container group. Possible
   * values include: 'SystemAssigned', 'UserAssigned', 'SystemAssigned,
   * UserAssigned', 'None'
   * @property {object} [identity.userAssignedIdentities] The list of user
   * identities associated with the container group. The user identity
   * dictionary key references will be ARM resource ids in the form:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
   * @property {string} [provisioningState] The provisioning state of the
   * container group. This only appears in the response.
   * @property {array} containers The containers within the container group.
   * @property {array} [imageRegistryCredentials] The image registry
   * credentials by which the container group is created from.
   * @property {string} [restartPolicy] Restart policy for all containers
   * within the container group.
   * - `Always` Always restart
   * - `OnFailure` Restart on failure
   * - `Never` Never restart
   * . Possible values include: 'Always', 'OnFailure', 'Never'
   * @property {object} [ipAddress] The IP address type of the container group.
   * @property {array} [ipAddress.ports] The list of ports exposed on the
   * container group.
   * @property {string} [ipAddress.type] Specifies if the IP is exposed to the
   * public internet or private VNET. Possible values include: 'Public',
   * 'Private'
   * @property {string} [ipAddress.ip] The IP exposed to the public internet.
   * @property {string} [ipAddress.dnsNameLabel] The Dns name label for the IP.
   * @property {string} [ipAddress.fqdn] The FQDN for the IP.
   * @property {string} osType The operating system type required by the
   * containers in the container group. Possible values include: 'Windows',
   * 'Linux'
   * @property {array} [volumes] The list of volumes that can be mounted by
   * containers in this container group.
   * @property {object} [instanceView] The instance view of the container
   * group. Only valid in response.
   * @property {array} [instanceView.events] The events of this container
   * group.
   * @property {string} [instanceView.state] The state of the container group.
   * Only valid in response.
   * @property {object} [diagnostics] The diagnostic information for a
   * container group.
   * @property {object} [diagnostics.logAnalytics] Container group log
   * analytics information.
   * @property {string} [diagnostics.logAnalytics.workspaceId] The workspace id
   * for log analytics
   * @property {string} [diagnostics.logAnalytics.workspaceKey] The workspace
   * key for log analytics
   * @property {string} [diagnostics.logAnalytics.logType] The log type to be
   * used. Possible values include: 'ContainerInsights',
   * 'ContainerInstanceLogs'
   * @property {object} [diagnostics.logAnalytics.metadata] Metadata for log
   * analytics.
   * @property {object} [networkProfile] The network profile information for a
   * container group.
   * @property {string} [networkProfile.id] The identifier for a network
   * profile.
   * @property {object} [dnsConfig] The DNS config information for a container
   * group.
   * @property {array} [dnsConfig.nameServers] The DNS servers for the
   * container group.
   * @property {string} [dnsConfig.searchDomains] The DNS search domains for
   * hostname lookup in the container group.
   * @property {string} [dnsConfig.options] The DNS options for the container
   * group.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ContainerGroup
   *
   * @returns {object} metadata of ContainerGroup
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ContainerGroup',
      type: {
        name: 'Composite',
        className: 'ContainerGroup',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: false,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          identity: {
            required: false,
            serializedName: 'identity',
            type: {
              name: 'Composite',
              className: 'ContainerGroupIdentity'
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          containers: {
            required: true,
            serializedName: 'properties.containers',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ContainerElementType',
                  type: {
                    name: 'Composite',
                    className: 'Container'
                  }
              }
            }
          },
          imageRegistryCredentials: {
            required: false,
            serializedName: 'properties.imageRegistryCredentials',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ImageRegistryCredentialElementType',
                  type: {
                    name: 'Composite',
                    className: 'ImageRegistryCredential'
                  }
              }
            }
          },
          restartPolicy: {
            required: false,
            serializedName: 'properties.restartPolicy',
            type: {
              name: 'String'
            }
          },
          ipAddress: {
            required: false,
            serializedName: 'properties.ipAddress',
            type: {
              name: 'Composite',
              className: 'IpAddress'
            }
          },
          osType: {
            required: true,
            serializedName: 'properties.osType',
            type: {
              name: 'String'
            }
          },
          volumes: {
            required: false,
            serializedName: 'properties.volumes',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'VolumeElementType',
                  type: {
                    name: 'Composite',
                    className: 'Volume'
                  }
              }
            }
          },
          instanceView: {
            required: false,
            readOnly: true,
            serializedName: 'properties.instanceView',
            type: {
              name: 'Composite',
              className: 'ContainerGroupPropertiesInstanceView'
            }
          },
          diagnostics: {
            required: false,
            serializedName: 'properties.diagnostics',
            type: {
              name: 'Composite',
              className: 'ContainerGroupDiagnostics'
            }
          },
          networkProfile: {
            required: false,
            serializedName: 'properties.networkProfile',
            type: {
              name: 'Composite',
              className: 'ContainerGroupNetworkProfile'
            }
          },
          dnsConfig: {
            required: false,
            serializedName: 'properties.dnsConfig',
            type: {
              name: 'Composite',
              className: 'DnsConfiguration'
            }
          }
        }
      }
    };
  }
}

module.exports = ContainerGroup;
