/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * The instance view of the container instance. Only valid in response.
 *
 */
class ContainerPropertiesInstanceView {
  /**
   * Create a ContainerPropertiesInstanceView.
   * @property {number} [restartCount] The number of times that the container
   * instance has been restarted.
   * @property {object} [currentState] Current container instance state.
   * @property {string} [currentState.state] The state of the container
   * instance.
   * @property {date} [currentState.startTime] The date-time when the container
   * instance state started.
   * @property {number} [currentState.exitCode] The container instance exit
   * codes correspond to those from the `docker run` command.
   * @property {date} [currentState.finishTime] The date-time when the
   * container instance state finished.
   * @property {string} [currentState.detailStatus] The human-readable status
   * of the container instance state.
   * @property {object} [previousState] Previous container instance state.
   * @property {string} [previousState.state] The state of the container
   * instance.
   * @property {date} [previousState.startTime] The date-time when the
   * container instance state started.
   * @property {number} [previousState.exitCode] The container instance exit
   * codes correspond to those from the `docker run` command.
   * @property {date} [previousState.finishTime] The date-time when the
   * container instance state finished.
   * @property {string} [previousState.detailStatus] The human-readable status
   * of the container instance state.
   * @property {array} [events] The events of the container instance.
   */
  constructor() {
  }

  /**
   * Defines the metadata of ContainerPropertiesInstanceView
   *
   * @returns {object} metadata of ContainerPropertiesInstanceView
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ContainerProperties_instanceView',
      type: {
        name: 'Composite',
        className: 'ContainerPropertiesInstanceView',
        modelProperties: {
          restartCount: {
            required: false,
            readOnly: true,
            serializedName: 'restartCount',
            type: {
              name: 'Number'
            }
          },
          currentState: {
            required: false,
            readOnly: true,
            serializedName: 'currentState',
            type: {
              name: 'Composite',
              className: 'ContainerState'
            }
          },
          previousState: {
            required: false,
            readOnly: true,
            serializedName: 'previousState',
            type: {
              name: 'Composite',
              className: 'ContainerState'
            }
          },
          events: {
            required: false,
            readOnly: true,
            serializedName: 'events',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'EventElementType',
                  type: {
                    name: 'Composite',
                    className: 'Event'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = ContainerPropertiesInstanceView;
