/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * The container probe, for liveness or readiness
 *
 */
class ContainerProbe {
  /**
   * Create a ContainerProbe.
   * @property {object} [exec] The execution command to probe
   * @property {array} [exec.command] The commands to execute within the
   * container.
   * @property {object} [httpGet] The Http Get settings to probe
   * @property {string} [httpGet.path] The path to probe.
   * @property {number} [httpGet.port] The port number to probe.
   * @property {string} [httpGet.scheme] The scheme. Possible values include:
   * 'http', 'https'
   * @property {number} [initialDelaySeconds] The initial delay seconds.
   * @property {number} [periodSeconds] The period seconds.
   * @property {number} [failureThreshold] The failure threshold.
   * @property {number} [successThreshold] The success threshold.
   * @property {number} [timeoutSeconds] The timeout seconds.
   */
  constructor() {
  }

  /**
   * Defines the metadata of ContainerProbe
   *
   * @returns {object} metadata of ContainerProbe
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ContainerProbe',
      type: {
        name: 'Composite',
        className: 'ContainerProbe',
        modelProperties: {
          exec: {
            required: false,
            serializedName: 'exec',
            type: {
              name: 'Composite',
              className: 'ContainerExec'
            }
          },
          httpGet: {
            required: false,
            serializedName: 'httpGet',
            type: {
              name: 'Composite',
              className: 'ContainerHttpGet'
            }
          },
          initialDelaySeconds: {
            required: false,
            serializedName: 'initialDelaySeconds',
            type: {
              name: 'Number'
            }
          },
          periodSeconds: {
            required: false,
            serializedName: 'periodSeconds',
            type: {
              name: 'Number'
            }
          },
          failureThreshold: {
            required: false,
            serializedName: 'failureThreshold',
            type: {
              name: 'Number'
            }
          },
          successThreshold: {
            required: false,
            serializedName: 'successThreshold',
            type: {
              name: 'Number'
            }
          },
          timeoutSeconds: {
            required: false,
            serializedName: 'timeoutSeconds',
            type: {
              name: 'Number'
            }
          }
        }
      }
    };
  }
}

module.exports = ContainerProbe;
