/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError } from "ms-rest-azure";
import * as moment from "moment";

export {

  BaseResource,
  CloudError
};

/**
 * The port exposed on the container instance.
 */
export interface ContainerPort {
  /**
   * The protocol associated with the port. Possible values include: 'TCP', 'UDP'
   */
  protocol?: string;
  /**
   * The port number exposed within the container group.
   */
  port: number;
}

/**
 * The environment variable to set within the container instance.
 */
export interface EnvironmentVariable {
  /**
   * The name of the environment variable.
   */
  name: string;
  /**
   * The value of the environment variable.
   */
  value?: string;
  /**
   * The value of the secure environment variable.
   */
  secureValue?: string;
}

/**
 * The container instance state.
 */
export interface ContainerState {
  /**
   * The state of the container instance.
   */
  state?: string;
  /**
   * The date-time when the container instance state started.
   */
  startTime?: Date;
  /**
   * The container instance exit codes correspond to those from the `docker run` command.
   */
  exitCode?: number;
  /**
   * The date-time when the container instance state finished.
   */
  finishTime?: Date;
  /**
   * The human-readable status of the container instance state.
   */
  detailStatus?: string;
}

/**
 * A container group or container instance event.
 */
export interface Event {
  /**
   * The count of the event.
   */
  count?: number;
  /**
   * The date-time of the earliest logged event.
   */
  firstTimestamp?: Date;
  /**
   * The date-time of the latest logged event.
   */
  lastTimestamp?: Date;
  /**
   * The event name.
   */
  name?: string;
  /**
   * The event message.
   */
  message?: string;
  /**
   * The event type.
   */
  type?: string;
}

/**
 * The instance view of the container instance. Only valid in response.
 */
export interface ContainerPropertiesInstanceView {
  /**
   * The number of times that the container instance has been restarted.
   */
  readonly restartCount?: number;
  /**
   * Current container instance state.
   */
  readonly currentState?: ContainerState;
  /**
   * Previous container instance state.
   */
  readonly previousState?: ContainerState;
  /**
   * The events of the container instance.
   */
  readonly events?: Event[];
}

/**
 * The GPU resource.
 */
export interface GpuResource {
  /**
   * The count of the GPU resource.
   */
  count: number;
  /**
   * The SKU of the GPU resource. Possible values include: 'K80', 'P100', 'V100'
   */
  sku: string;
}

/**
 * The resource requests.
 */
export interface ResourceRequests {
  /**
   * The memory request in GB of this container instance.
   */
  memoryInGB: number;
  /**
   * The CPU request of this container instance.
   */
  cpu: number;
  /**
   * The GPU request of this container instance.
   */
  gpu?: GpuResource;
}

/**
 * The resource limits.
 */
export interface ResourceLimits {
  /**
   * The memory limit in GB of this container instance.
   */
  memoryInGB?: number;
  /**
   * The CPU limit of this container instance.
   */
  cpu?: number;
  /**
   * The GPU limit of this container instance.
   */
  gpu?: GpuResource;
}

/**
 * The resource requirements.
 */
export interface ResourceRequirements {
  /**
   * The resource requests of this container instance.
   */
  requests: ResourceRequests;
  /**
   * The resource limits of this container instance.
   */
  limits?: ResourceLimits;
}

/**
 * The properties of the volume mount.
 */
export interface VolumeMount {
  /**
   * The name of the volume mount.
   */
  name: string;
  /**
   * The path within the container where the volume should be mounted. Must not contain colon (:).
   */
  mountPath: string;
  /**
   * The flag indicating whether the volume mount is read-only.
   */
  readOnly?: boolean;
}

/**
 * The container execution command, for liveness or readiness probe
 */
export interface ContainerExec {
  /**
   * The commands to execute within the container.
   */
  command?: string[];
}

/**
 * The container Http Get settings, for liveness or readiness probe
 */
export interface ContainerHttpGet {
  /**
   * The path to probe.
   */
  path?: string;
  /**
   * The port number to probe.
   */
  port: number;
  /**
   * The scheme. Possible values include: 'http', 'https'
   */
  scheme?: string;
}

/**
 * The container probe, for liveness or readiness
 */
export interface ContainerProbe {
  /**
   * The execution command to probe
   */
  exec?: ContainerExec;
  /**
   * The Http Get settings to probe
   */
  httpGet?: ContainerHttpGet;
  /**
   * The initial delay seconds.
   */
  initialDelaySeconds?: number;
  /**
   * The period seconds.
   */
  periodSeconds?: number;
  /**
   * The failure threshold.
   */
  failureThreshold?: number;
  /**
   * The success threshold.
   */
  successThreshold?: number;
  /**
   * The timeout seconds.
   */
  timeoutSeconds?: number;
}

/**
 * A container instance.
 */
export interface Container {
  /**
   * The user-provided name of the container instance.
   */
  name: string;
  /**
   * The name of the image used to create the container instance.
   */
  image: string;
  /**
   * The commands to execute within the container instance in exec form.
   */
  command?: string[];
  /**
   * The exposed ports on the container instance.
   */
  ports?: ContainerPort[];
  /**
   * The environment variables to set in the container instance.
   */
  environmentVariables?: EnvironmentVariable[];
  /**
   * The instance view of the container instance. Only valid in response.
   */
  readonly instanceView?: ContainerPropertiesInstanceView;
  /**
   * The resource requirements of the container instance.
   */
  resources: ResourceRequirements;
  /**
   * The volume mounts available to the container instance.
   */
  volumeMounts?: VolumeMount[];
  /**
   * The liveness probe.
   */
  livenessProbe?: ContainerProbe;
  /**
   * The readiness probe.
   */
  readinessProbe?: ContainerProbe;
}

/**
 * The properties of the Azure File volume. Azure File shares are mounted as volumes.
 */
export interface AzureFileVolume {
  /**
   * The name of the Azure File share to be mounted as a volume.
   */
  shareName: string;
  /**
   * The flag indicating whether the Azure File shared mounted as a volume is read-only.
   */
  readOnly?: boolean;
  /**
   * The name of the storage account that contains the Azure File share.
   */
  storageAccountName: string;
  /**
   * The storage account access key used to access the Azure File share.
   */
  storageAccountKey?: string;
}

/**
 * Represents a volume that is populated with the contents of a git repository
 */
export interface GitRepoVolume {
  /**
   * Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume
   * directory will be the git repository.  Otherwise, if specified, the volume will contain the
   * git repository in the subdirectory with the given name.
   */
  directory?: string;
  /**
   * Repository URL
   */
  repository: string;
  /**
   * Commit hash for the specified revision.
   */
  revision?: string;
}

/**
 * The properties of the volume.
 */
export interface Volume {
  /**
   * The name of the volume.
   */
  name: string;
  /**
   * The Azure File volume.
   */
  azureFile?: AzureFileVolume;
  /**
   * The empty directory volume.
   */
  emptyDir?: any;
  /**
   * The secret volume.
   */
  secret?: { [propertyName: string]: string };
  /**
   * The git repo volume.
   */
  gitRepo?: GitRepoVolume;
}

export interface ContainerGroupIdentityUserAssignedIdentitiesValue {
  /**
   * The principal id of user assigned identity.
  */
  readonly principalId?: string;
  /**
   * The client id of user assigned identity.
  */
  readonly clientId?: string;
}

/**
 * Identity for the container group.
*/
export interface ContainerGroupIdentity {
  /**
   * The principal id of the container group identity. This property will only be provided for a
   * system assigned identity.
  */
  readonly principalId?: string;
  /**
   * The tenant id associated with the container group. This property will only be provided for a
   * system assigned identity.
  */
  readonly tenantId?: string;
  /**
   * The type of identity used for the container group. The type 'SystemAssigned, UserAssigned'
   * includes both an implicitly created identity and a set of user assigned identities. The type
   * 'None' will remove any identities from the container group. Possible values include:
   * 'SystemAssigned', 'UserAssigned', 'SystemAssigned, UserAssigned', 'None'
  */
  type?: string;
  /**
   * The list of user identities associated with the container group. The user identity dictionary
   * key references will be ARM resource ids in the form:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
  */
  userAssignedIdentities?: { [propertyName: string]:
  ContainerGroupIdentityUserAssignedIdentitiesValue };
}

/**
 * Image registry credential.
*/
export interface ImageRegistryCredential {
  /**
   * The Docker image registry server without a protocol such as "http" and "https".
  */
  server: string;
  /**
   * The username for the private registry.
  */
  username: string;
  /**
   * The password for the private registry.
  */
  password?: string;
}

/**
 * The port exposed on the container group.
*/
export interface Port {
  /**
   * The protocol associated with the port. Possible values include: 'TCP', 'UDP'
  */
  protocol?: string;
  /**
   * The port number.
  */
  port: number;
}

/**
 * IP address for the container group.
*/
export interface IpAddress {
  /**
   * The list of ports exposed on the container group.
  */
  ports: Port[];
  /**
   * Specifies if the IP is exposed to the public internet or private VNET. Possible values
   * include: 'Public', 'Private'
  */
  type: string;
  /**
   * The IP exposed to the public internet.
  */
  ip?: string;
  /**
   * The Dns name label for the IP.
  */
  dnsNameLabel?: string;
  /**
   * The FQDN for the IP.
  */
  readonly fqdn?: string;
}

/**
 * The instance view of the container group. Only valid in response.
*/
export interface ContainerGroupPropertiesInstanceView {
  /**
   * The events of this container group.
  */
  readonly events?: Event[];
  /**
   * The state of the container group. Only valid in response.
  */
  readonly state?: string;
}

/**
 * Container group log analytics information.
*/
export interface LogAnalytics {
  /**
   * The workspace id for log analytics
  */
  workspaceId: string;
  /**
   * The workspace key for log analytics
  */
  workspaceKey: string;
  /**
   * The log type to be used. Possible values include: 'ContainerInsights', 'ContainerInstanceLogs'
  */
  logType?: string;
  /**
   * Metadata for log analytics.
  */
  metadata?: { [propertyName: string]: string };
}

/**
 * Container group diagnostic information.
*/
export interface ContainerGroupDiagnostics {
  /**
   * Container group log analytics information.
  */
  logAnalytics?: LogAnalytics;
}

/**
 * Container group network profile information.
*/
export interface ContainerGroupNetworkProfile {
  /**
   * The identifier for a network profile.
  */
  id: string;
}

/**
 * DNS configuration for the container group.
*/
export interface DnsConfiguration {
  /**
   * The DNS servers for the container group.
  */
  nameServers: string[];
  /**
   * The DNS search domains for hostname lookup in the container group.
  */
  searchDomains?: string;
  /**
   * The DNS options for the container group.
  */
  options?: string;
}

/**
 * The Resource model definition.
*/
export interface Resource extends BaseResource {
  /**
   * The resource id.
  */
  readonly id?: string;
  /**
   * The resource name.
  */
  readonly name?: string;
  /**
   * The resource type.
  */
  readonly type?: string;
  /**
   * The resource location.
  */
  location?: string;
  /**
   * The resource tags.
  */
  tags?: { [propertyName: string]: string };
}

/**
 * A container group.
*/
export interface ContainerGroup extends Resource {
  /**
   * The identity of the container group, if configured.
  */
  identity?: ContainerGroupIdentity;
  /**
   * The provisioning state of the container group. This only appears in the response.
  */
  readonly provisioningState?: string;
  /**
   * The containers within the container group.
  */
  containers: Container[];
  /**
   * The image registry credentials by which the container group is created from.
  */
  imageRegistryCredentials?: ImageRegistryCredential[];
  /**
   * Restart policy for all containers within the container group.
   * - `Always` Always restart
   * - `OnFailure` Restart on failure
   * - `Never` Never restart
   * . Possible values include: 'Always', 'OnFailure', 'Never'
  */
  restartPolicy?: string;
  /**
   * The IP address type of the container group.
  */
  ipAddress?: IpAddress;
  /**
   * The operating system type required by the containers in the container group. Possible values
   * include: 'Windows', 'Linux'
  */
  osType: string;
  /**
   * The list of volumes that can be mounted by containers in this container group.
  */
  volumes?: Volume[];
  /**
   * The instance view of the container group. Only valid in response.
  */
  readonly instanceView?: ContainerGroupPropertiesInstanceView;
  /**
   * The diagnostic information for a container group.
  */
  diagnostics?: ContainerGroupDiagnostics;
  /**
   * The network profile information for a container group.
  */
  networkProfile?: ContainerGroupNetworkProfile;
  /**
   * The DNS config information for a container group.
  */
  dnsConfig?: DnsConfiguration;
}

/**
 * The display information of the operation.
*/
export interface OperationDisplay {
  /**
   * The name of the provider of the operation.
  */
  provider?: string;
  /**
   * The name of the resource type of the operation.
  */
  resource?: string;
  /**
   * The friendly name of the operation.
  */
  operation?: string;
  /**
   * The description of the operation.
  */
  description?: string;
}

/**
 * An operation for Azure Container Instance service.
*/
export interface Operation {
  /**
   * The name of the operation.
  */
  name: string;
  /**
   * The display information of the operation.
  */
  display: OperationDisplay;
  /**
   * The intended executor of the operation. Possible values include: 'User', 'System'
  */
  origin?: string;
}

/**
 * The operation list response that contains all operations for Azure Container Instance service.
*/
export interface OperationListResult {
  /**
   * The list of operations.
  */
  value?: Operation[];
  /**
   * The URI to fetch the next page of operations.
  */
  nextLink?: string;
}

/**
 * The name object of the resource
*/
export interface UsageName {
  /**
   * The name of the resource
  */
  readonly value?: string;
  /**
   * The localized name of the resource
  */
  readonly localizedValue?: string;
}

/**
 * A single usage result
*/
export interface Usage {
  /**
   * Unit of the usage result
  */
  readonly unit?: string;
  /**
   * The current usage of the resource
  */
  readonly currentValue?: number;
  /**
   * The maximum permitted usage of the resource.
  */
  readonly limit?: number;
  /**
   * The name object of the resource
  */
  readonly name?: UsageName;
}

/**
 * The response containing the usage data
*/
export interface UsageListResult {
  readonly value?: Usage[];
}

/**
 * The logs.
*/
export interface Logs {
  /**
   * The content of the log.
  */
  content?: string;
}

/**
 * The size of the terminal.
*/
export interface ContainerExecRequestTerminalSize {
  /**
   * The row size of the terminal
  */
  rows?: number;
  /**
   * The column size of the terminal
  */
  cols?: number;
}

/**
 * The container exec request.
*/
export interface ContainerExecRequest {
  /**
   * The command to be executed.
  */
  command?: string;
  /**
   * The size of the terminal.
  */
  terminalSize?: ContainerExecRequestTerminalSize;
}

/**
 * The information for the container exec command.
*/
export interface ContainerExecResponse {
  /**
   * The uri for the exec websocket.
  */
  webSocketUri?: string;
  /**
   * The password to start the exec command.
  */
  password?: string;
}

/**
 * The container group list response that contains the container group properties.
*/
export interface ContainerGroupListResult extends Array<ContainerGroup> {
  /**
   * The URI to fetch the next page of container groups.
  */
  nextLink?: string;
}
