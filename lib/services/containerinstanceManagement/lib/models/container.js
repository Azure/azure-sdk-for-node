/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * A container instance.
 *
 */
class Container {
  /**
   * Create a Container.
   * @member {string} name The user-provided name of the container instance.
   * @member {string} image The name of the image used to create the container
   * instance.
   * @member {array} [command] The commands to execute within the container
   * instance in exec form.
   * @member {array} [ports] The exposed ports on the container instance.
   * @member {array} [environmentVariables] The environment variables to set in
   * the container instance.
   * @member {object} [instanceView] The instance view of the container
   * instance. Only valid in response.
   * @member {number} [instanceView.restartCount] The number of times that the
   * container instance has been restarted.
   * @member {object} [instanceView.currentState] Current container instance
   * state.
   * @member {string} [instanceView.currentState.state] The state of the
   * container instance.
   * @member {date} [instanceView.currentState.startTime] The date-time when
   * the container instance state started.
   * @member {number} [instanceView.currentState.exitCode] The container
   * instance exit codes correspond to those from the `docker run` command.
   * @member {date} [instanceView.currentState.finishTime] The date-time when
   * the container instance state finished.
   * @member {string} [instanceView.currentState.detailStatus] The
   * human-readable status of the container instance state.
   * @member {object} [instanceView.previousState] Previous container instance
   * state.
   * @member {string} [instanceView.previousState.state] The state of the
   * container instance.
   * @member {date} [instanceView.previousState.startTime] The date-time when
   * the container instance state started.
   * @member {number} [instanceView.previousState.exitCode] The container
   * instance exit codes correspond to those from the `docker run` command.
   * @member {date} [instanceView.previousState.finishTime] The date-time when
   * the container instance state finished.
   * @member {string} [instanceView.previousState.detailStatus] The
   * human-readable status of the container instance state.
   * @member {array} [instanceView.events] The events of the container
   * instance.
   * @member {object} resources The resource requirements of the container
   * instance.
   * @member {object} [resources.requests] The resource requests of this
   * container instance.
   * @member {number} [resources.requests.memoryInGB] The memory request in GB
   * of this container instance.
   * @member {number} [resources.requests.cpu] The CPU request of this
   * container instance.
   * @member {object} [resources.limits] The resource limits of this container
   * instance.
   * @member {number} [resources.limits.memoryInGB] The memory limit in GB of
   * this container instance.
   * @member {number} [resources.limits.cpu] The CPU limit of this container
   * instance.
   * @member {array} [volumeMounts] The volume mounts available to the
   * container instance.
   */
  constructor() {
  }

  /**
   * Defines the metadata of Container
   *
   * @returns {object} metadata of Container
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Container',
      type: {
        name: 'Composite',
        className: 'Container',
        modelProperties: {
          name: {
            required: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          image: {
            required: true,
            serializedName: 'properties.image',
            type: {
              name: 'String'
            }
          },
          command: {
            required: false,
            serializedName: 'properties.command',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          ports: {
            required: false,
            serializedName: 'properties.ports',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ContainerPortElementType',
                  type: {
                    name: 'Composite',
                    className: 'ContainerPort'
                  }
              }
            }
          },
          environmentVariables: {
            required: false,
            serializedName: 'properties.environmentVariables',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'EnvironmentVariableElementType',
                  type: {
                    name: 'Composite',
                    className: 'EnvironmentVariable'
                  }
              }
            }
          },
          instanceView: {
            required: false,
            readOnly: true,
            serializedName: 'properties.instanceView',
            type: {
              name: 'Composite',
              className: 'ContainerPropertiesInstanceView'
            }
          },
          resources: {
            required: true,
            serializedName: 'properties.resources',
            type: {
              name: 'Composite',
              className: 'ResourceRequirements'
            }
          },
          volumeMounts: {
            required: false,
            serializedName: 'properties.volumeMounts',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'VolumeMountElementType',
                  type: {
                    name: 'Composite',
                    className: 'VolumeMount'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = Container;
