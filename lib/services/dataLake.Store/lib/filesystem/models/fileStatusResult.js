/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * @class
 * Initializes a new instance of the FileStatusResult class.
 * @constructor
 * Data Lake Store filesystem file status information response.
 *
 * @member {object} [fileStatus] the file status object associated with the
 * specified path.
 *
 * @member {number} [fileStatus.accessTime] the last access time as ticks since
 * the epoch.
 *
 * @member {number} [fileStatus.blockSize] the block size for the file.
 *
 * @member {number} [fileStatus.childrenNum] the number of children in the
 * directory.
 *
 * @member {number} [fileStatus.expirationTime] Gets the expiration time, if
 * any, as ticks since the epoch. If the value is 0 or DateTime.MaxValue there
 * is no expiration.
 *
 * @member {string} [fileStatus.group] the group owner.
 *
 * @member {number} [fileStatus.length] the number of bytes in a file.
 *
 * @member {number} [fileStatus.modificationTime] the modification time as
 * ticks since the epoch.
 *
 * @member {string} [fileStatus.owner] the user who is the owner.
 *
 * @member {string} [fileStatus.pathSuffix] the path suffix.
 *
 * @member {string} [fileStatus.permission] the permission represented as an
 * string.
 *
 * @member {string} [fileStatus.type] the type of the path object. Possible
 * values include: 'FILE', 'DIRECTORY'
 *
 * @member {boolean} [fileStatus.aclBit] flag to indicate if extended acls are
 * enabled
 *
 */
class FileStatusResult {
  constructor() {
  }

  /**
   * Defines the metadata of FileStatusResult
   *
   * @returns {object} metadata of FileStatusResult
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'FileStatusResult',
      type: {
        name: 'Composite',
        className: 'FileStatusResult',
        modelProperties: {
          fileStatus: {
            required: false,
            readOnly: true,
            serializedName: 'FileStatus',
            type: {
              name: 'Composite',
              className: 'FileStatusProperties'
            }
          }
        }
      }
    };
  }
}

module.exports = FileStatusResult;
