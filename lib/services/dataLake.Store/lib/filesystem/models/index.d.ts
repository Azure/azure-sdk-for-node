/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
// TODO: Include PageTemplateModels here too?? Probably
 */


/**
 * @class
 * Initializes a new instance of the FileOperationResult class.
 * @constructor
 * The result of the request or operation.
 * @member {boolean} [operationResult] Gets the result of the operation or
 * request.
 * 
 */
export interface FileOperationResult {
    operationResult?: boolean;
}

/**
 * @class
 * Initializes a new instance of the AclStatus class.
 * @constructor
 * Data Lake Store file or directory Access Control List information.
 * @member {array} [entries] Gets or sets the list of ACLSpec entries on a
 * file or directory.
 * 
 * @member {string} [group] Gets or sets the group owner, an AAD Object ID.
 * 
 * @member {string} [owner] Gets or sets the user owner, an AAD Object ID.
 * 
 * @member {boolean} [stickyBit] Gets or sets the indicator of whether the
 * sticky bit is on or off.
 * 
 */
export interface AclStatus {
    entries?: string[];
    group?: string;
    owner?: string;
    stickyBit?: boolean;
}

/**
 * @class
 * Initializes a new instance of the AclStatusResult class.
 * @constructor
 * Data Lake Store file or directory Access Control List information.
 * @member {object} [aclStatus] Gets or sets the AclStatus object for a given
 * file or directory.
 * 
 * @member {array} [aclStatus.entries] Gets or sets the list of ACLSpec
 * entries on a file or directory.
 * 
 * @member {string} [aclStatus.group] Gets or sets the group owner, an AAD
 * Object ID.
 * 
 * @member {string} [aclStatus.owner] Gets or sets the user owner, an AAD
 * Object ID.
 * 
 * @member {boolean} [aclStatus.stickyBit] Gets or sets the indicator of
 * whether the sticky bit is on or off.
 * 
 */
export interface AclStatusResult {
    aclStatus?: AclStatus;
}

/**
 * @class
 * Initializes a new instance of the ContentSummary class.
 * @constructor
 * Data Lake Store content summary information
 * @member {number} [directoryCount] Gets the number of directories.
 * 
 * @member {number} [fileCount] Gets the number of files.
 * 
 * @member {number} [length] Gets the number of bytes used by the contet.
 * 
 * @member {number} [spaceConsumed] Gets the disk space consumed by the
 * content.
 * 
 */
export interface ContentSummary {
    directoryCount?: number;
    fileCount?: number;
    length?: number;
    spaceConsumed?: number;
}

/**
 * @class
 * Initializes a new instance of the ContentSummaryResult class.
 * @constructor
 * Data Lake Store filesystem content summary information response.
 * @member {object} [contentSummary] Gets the content summary for the
 * specified path
 * 
 * @member {number} [contentSummary.directoryCount] Gets the number of
 * directories.
 * 
 * @member {number} [contentSummary.fileCount] Gets the number of files.
 * 
 * @member {number} [contentSummary.length] Gets the number of bytes used by
 * the contet.
 * 
 * @member {number} [contentSummary.spaceConsumed] Gets the disk space
 * consumed by the content.
 * 
 */
export interface ContentSummaryResult {
    contentSummary?: ContentSummary;
}

/**
 * @class
 * Initializes a new instance of the FileStatusProperties class.
 * @constructor
 * Data Lake Store file or directory information.
 * @member {number} [accessTime] Gets the last access time as ticks since the
 * epoch.
 * 
 * @member {number} [blockSize] Gets the block size for the file.
 * 
 * @member {number} [childrenNum] Gets the number of children in the directory.
 * 
 * @member {string} [group] Gets the group owner.
 * 
 * @member {number} [length] Gets the number of bytes in a file.
 * 
 * @member {number} [modificationTime] Gets the modification time as ticks
 * since the epoch.
 * 
 * @member {string} [owner] Gets the user who is the owner.
 * 
 * @member {string} [pathSuffix] Gets the path suffix.
 * 
 * @member {string} [permission] Gets the permission represented as an string.
 * 
 * @member {string} [type] Gets the type of the path object. Possible values
 * include: 'FILE', 'DIRECTORY'
 * 
 */
export interface FileStatusProperties {
    accessTime?: number;
    blockSize?: number;
    childrenNum?: number;
    group?: string;
    length?: number;
    modificationTime?: number;
    owner?: string;
    pathSuffix?: string;
    permission?: string;
    type?: string;
}

/**
 * @class
 * Initializes a new instance of the FileStatuses class.
 * @constructor
 * Data Lake Store file status list information.
 * @member {array} [fileStatus] Gets the object containing the list of
 * properties of the files.
 * 
 */
export interface FileStatuses {
    fileStatus?: FileStatusProperties[];
}

/**
 * @class
 * Initializes a new instance of the FileStatusesResult class.
 * @constructor
 * Data Lake Store filesystem file status list information response.
 * @member {object} [fileStatuses] Gets the object representing the list of
 * file statuses.
 * 
 * @member {array} [fileStatuses.fileStatus] Gets the object containing the
 * list of properties of the files.
 * 
 */
export interface FileStatusesResult {
    fileStatuses?: FileStatuses;
}

/**
 * @class
 * Initializes a new instance of the FileStatusResult class.
 * @constructor
 * Data Lake Store filesystem file status information response.
 * @member {object} [fileStatus] Gets the file status object associated with
 * the specified path.
 * 
 * @member {number} [fileStatus.accessTime] Gets the last access time as ticks
 * since the epoch.
 * 
 * @member {number} [fileStatus.blockSize] Gets the block size for the file.
 * 
 * @member {number} [fileStatus.childrenNum] Gets the number of children in
 * the directory.
 * 
 * @member {string} [fileStatus.group] Gets the group owner.
 * 
 * @member {number} [fileStatus.length] Gets the number of bytes in a file.
 * 
 * @member {number} [fileStatus.modificationTime] Gets the modification time
 * as ticks since the epoch.
 * 
 * @member {string} [fileStatus.owner] Gets the user who is the owner.
 * 
 * @member {string} [fileStatus.pathSuffix] Gets the path suffix.
 * 
 * @member {string} [fileStatus.permission] Gets the permission represented as
 * an string.
 * 
 * @member {string} [fileStatus.type] Gets the type of the path object.
 * Possible values include: 'FILE', 'DIRECTORY'
 * 
 */
export interface FileStatusResult {
    fileStatus?: FileStatusProperties;
}
