/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the DataLakeStoreAccount class.
 * @constructor
 * Data Lake Store account information
 *
 * @member {object} [identity] The Key vault encryption identity, if any.
 *
 * @member {uuid} [identity.principalId] The principal identifier associated
 * with the encryption.
 *
 * @member {uuid} [identity.tenantId] The tenant identifier associated with the
 * encryption.
 *
 * @member {string} [provisioningState] the status of the Data Lake Store
 * account while being provisioned. Possible values include: 'Failed',
 * 'Creating', 'Running', 'Succeeded', 'Patching', 'Suspending', 'Resuming',
 * 'Deleting', 'Deleted'
 *
 * @member {string} [state] the status of the Data Lake Store account after
 * provisioning has completed. Possible values include: 'Active', 'Suspended'
 *
 * @member {date} [creationTime] the account creation time.
 *
 * @member {string} [encryptionState] The current state of encryption for this
 * Data Lake store account. Possible values include: 'Enabled', 'Disabled'
 *
 * @member {string} [encryptionProvisioningState] The current state of
 * encryption provisioning for this Data Lake store account. Possible values
 * include: 'Creating', 'Succeeded'
 *
 * @member {object} [encryptionConfig] The Key vault encryption configuration.
 *
 * @member {string} [encryptionConfig.type] The type of encryption
 * configuration being used. Currently the only supported types are
 * 'UserManaged' and 'ServiceManaged'. Possible values include: 'UserManaged',
 * 'ServiceManaged'
 *
 * @member {object} [encryptionConfig.keyVaultMetaInfo] The Key vault
 * information for connecting to user managed encryption keys.
 *
 * @member {string} [encryptionConfig.keyVaultMetaInfo.keyVaultResourceId] The
 * resource identifier for the user managed Key Vault being used to encrypt.
 *
 * @member {string} [encryptionConfig.keyVaultMetaInfo.encryptionKeyName] The
 * name of the user managed encryption key.
 *
 * @member {string} [encryptionConfig.keyVaultMetaInfo.encryptionKeyVersion]
 * The version of the user managed encryption key.
 *
 * @member {string} [firewallState] The current state of the IP address
 * firewall for this Data Lake store account. Possible values include:
 * 'Enabled', 'Disabled'
 *
 * @member {array} [firewallRules] The list of firewall rules associated with
 * this Data Lake store account.
 *
 * @member {string} [trustedIdProviderState] The current state of the trusted
 * identity provider feature for this Data Lake store account. Possible values
 * include: 'Enabled', 'Disabled'
 *
 * @member {array} [trustedIdProviders] The list of trusted identity providers
 * associated with this Data Lake store account.
 *
 * @member {date} [lastModifiedTime] the account last modified time.
 *
 * @member {string} [endpoint] the gateway host.
 *
 * @member {string} [defaultGroup] the default owner group for all new folders
 * and files created in the Data Lake Store account.
 *
 * @member {string} [newTier] the commitment tier to use for next month.
 * Possible values include: 'Consumption', 'Commitment_1TB', 'Commitment_10TB',
 * 'Commitment_100TB', 'Commitment_500TB', 'Commitment_1PB', 'Commitment_5PB'
 *
 * @member {string} [currentTier] the commitment tier in use for the current
 * month. Possible values include: 'Consumption', 'Commitment_1TB',
 * 'Commitment_10TB', 'Commitment_100TB', 'Commitment_500TB', 'Commitment_1PB',
 * 'Commitment_5PB'
 *
 * @member {string} [firewallAllowAzureIps] The current state of allowing or
 * disallowing IPs originating within Azure through the firewall. If the
 * firewall is disabled, this is not enforced. Possible values include:
 * 'Enabled', 'Disabled'
 *
 */
function DataLakeStoreAccount() {
  DataLakeStoreAccount['super_'].call(this);
}

util.inherits(DataLakeStoreAccount, models['Resource']);

/**
 * Defines the metadata of DataLakeStoreAccount
 *
 * @returns {object} metadata of DataLakeStoreAccount
 *
 */
DataLakeStoreAccount.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'DataLakeStoreAccount',
    type: {
      name: 'Composite',
      className: 'DataLakeStoreAccount',
      modelProperties: {
        id: {
          required: false,
          readOnly: true,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          readOnly: true,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        type: {
          required: false,
          readOnly: true,
          serializedName: 'type',
          type: {
            name: 'String'
          }
        },
        location: {
          required: true,
          serializedName: 'location',
          type: {
            name: 'String'
          }
        },
        tags: {
          required: false,
          serializedName: 'tags',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        identity: {
          required: false,
          serializedName: 'identity',
          type: {
            name: 'Composite',
            className: 'EncryptionIdentity'
          }
        },
        provisioningState: {
          required: false,
          readOnly: true,
          serializedName: 'properties.provisioningState',
          type: {
            name: 'Enum',
            allowedValues: [ 'Failed', 'Creating', 'Running', 'Succeeded', 'Patching', 'Suspending', 'Resuming', 'Deleting', 'Deleted' ]
          }
        },
        state: {
          required: false,
          readOnly: true,
          serializedName: 'properties.state',
          type: {
            name: 'Enum',
            allowedValues: [ 'Active', 'Suspended' ]
          }
        },
        creationTime: {
          required: false,
          readOnly: true,
          serializedName: 'properties.creationTime',
          type: {
            name: 'DateTime'
          }
        },
        encryptionState: {
          required: false,
          serializedName: 'properties.encryptionState',
          type: {
            name: 'Enum',
            allowedValues: [ 'Enabled', 'Disabled' ]
          }
        },
        encryptionProvisioningState: {
          required: false,
          readOnly: true,
          serializedName: 'properties.encryptionProvisioningState',
          type: {
            name: 'Enum',
            allowedValues: [ 'Creating', 'Succeeded' ]
          }
        },
        encryptionConfig: {
          required: false,
          serializedName: 'properties.encryptionConfig',
          type: {
            name: 'Composite',
            className: 'EncryptionConfig'
          }
        },
        firewallState: {
          required: false,
          serializedName: 'properties.firewallState',
          type: {
            name: 'Enum',
            allowedValues: [ 'Enabled', 'Disabled' ]
          }
        },
        firewallRules: {
          required: false,
          serializedName: 'properties.firewallRules',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'FirewallRuleElementType',
                type: {
                  name: 'Composite',
                  className: 'FirewallRule'
                }
            }
          }
        },
        trustedIdProviderState: {
          required: false,
          serializedName: 'properties.trustedIdProviderState',
          type: {
            name: 'Enum',
            allowedValues: [ 'Enabled', 'Disabled' ]
          }
        },
        trustedIdProviders: {
          required: false,
          serializedName: 'properties.trustedIdProviders',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'TrustedIdProviderElementType',
                type: {
                  name: 'Composite',
                  className: 'TrustedIdProvider'
                }
            }
          }
        },
        lastModifiedTime: {
          required: false,
          readOnly: true,
          serializedName: 'properties.lastModifiedTime',
          type: {
            name: 'DateTime'
          }
        },
        endpoint: {
          required: false,
          readOnly: true,
          serializedName: 'properties.endpoint',
          type: {
            name: 'String'
          }
        },
        defaultGroup: {
          required: false,
          serializedName: 'properties.defaultGroup',
          type: {
            name: 'String'
          }
        },
        newTier: {
          required: false,
          serializedName: 'properties.newTier',
          type: {
            name: 'Enum',
            allowedValues: [ 'Consumption', 'Commitment_1TB', 'Commitment_10TB', 'Commitment_100TB', 'Commitment_500TB', 'Commitment_1PB', 'Commitment_5PB' ]
          }
        },
        currentTier: {
          required: false,
          readOnly: true,
          serializedName: 'properties.currentTier',
          type: {
            name: 'Enum',
            allowedValues: [ 'Consumption', 'Commitment_1TB', 'Commitment_10TB', 'Commitment_100TB', 'Commitment_500TB', 'Commitment_1PB', 'Commitment_5PB' ]
          }
        },
        firewallAllowAzureIps: {
          required: false,
          serializedName: 'properties.firewallAllowAzureIps',
          type: {
            name: 'Enum',
            allowedValues: [ 'Enabled', 'Disabled' ]
          }
        }
      }
    }
  };
};

module.exports = DataLakeStoreAccount;
