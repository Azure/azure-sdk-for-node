/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the DataLakeStoreAccount class.
 * @constructor
 * Data Lake Store account information
 *
 * @member {string} [location] the account regional location.
 * 
 * @member {string} [name] the account name.
 * 
 * @member {string} [type] the namespace and type of the account.
 * 
 * @member {string} [id] the account subscription ID.
 * 
 * @member {object} [identity] The Key vault encryption identity, if any.
 * 
 * @member {string} [identity.type] The type of encryption being used.
 * Currently the only supported type is 'SystemAssigned'. Possible values
 * include: 'SystemAssigned'
 * 
 * @member {uuid} [identity.principalId] The principal identifier associated
 * with the encryption.
 * 
 * @member {uuid} [identity.tenantId] The tenant identifier associated with
 * the encryption.
 * 
 * @member {object} [tags] the value of custom properties.
 * 
 * @member {object} [properties] the Data Lake Store account properties.
 * 
 * @member {string} [properties.provisioningState] the status of the Data Lake
 * Store account while being provisioned. Possible values include: 'Failed',
 * 'Creating', 'Running', 'Succeeded', 'Patching', 'Suspending', 'Resuming',
 * 'Deleting', 'Deleted'
 * 
 * @member {string} [properties.state] the status of the Data Lake Store
 * account after provisioning has completed. Possible values include:
 * 'active', 'suspended'
 * 
 * @member {date} [properties.creationTime] the account creation time.
 * 
 * @member {string} [properties.encryptionState] The current state of
 * encryption for this Data Lake store account. Possible values include:
 * 'Enabled', 'Disabled'
 * 
 * @member {string} [properties.encryptionProvisioningState] The current state
 * of encryption provisioning for this Data Lake store account. Possible
 * values include: 'Creating', 'Succeeded'
 * 
 * @member {object} [properties.encryptionConfig] The Key vault encryption
 * configuration.
 * 
 * @member {string} [properties.encryptionConfig.type] The type of encryption
 * configuration being used. Currently the only supported types are
 * 'UserManaged' and 'ServiceManaged'. Possible values include:
 * 'UserManaged', 'ServiceManaged'
 * 
 * @member {object} [properties.encryptionConfig.keyVaultMetaInfo] The Key
 * vault information for connecting to user managed encryption keys.
 * 
 * @member {string}
 * [properties.encryptionConfig.keyVaultMetaInfo.keyVaultResourceId] The
 * resource identifier for the user managed Key Vault being used to encrypt.
 * 
 * @member {string}
 * [properties.encryptionConfig.keyVaultMetaInfo.encryptionKeyName] The name
 * of the user managed encryption key.
 * 
 * @member {string}
 * [properties.encryptionConfig.keyVaultMetaInfo.encryptionKeyVersion] The
 * version of the user managed encryption key.
 * 
 * @member {date} [properties.lastModifiedTime] the account last modified time.
 * 
 * @member {string} [properties.endpoint] the gateway host.
 * 
 * @member {string} [properties.defaultGroup] the default owner group for all
 * new folders and files created in the Data Lake Store account.
 * 
 */
function DataLakeStoreAccount() {
}

/**
 * Defines the metadata of DataLakeStoreAccount
 *
 * @returns {object} metadata of DataLakeStoreAccount
 *
 */
DataLakeStoreAccount.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'DataLakeStoreAccount',
    type: {
      name: 'Composite',
      className: 'DataLakeStoreAccount',
      modelProperties: {
        location: {
          required: false,
          serializedName: 'location',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        type: {
          required: false,
          readOnly: true,
          serializedName: 'type',
          type: {
            name: 'String'
          }
        },
        id: {
          required: false,
          readOnly: true,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        identity: {
          required: false,
          serializedName: 'identity',
          type: {
            name: 'Composite',
            className: 'EncryptionIdentity'
          }
        },
        tags: {
          required: false,
          serializedName: 'tags',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        properties: {
          required: false,
          serializedName: 'properties',
          type: {
            name: 'Composite',
            className: 'DataLakeStoreAccountProperties'
          }
        }
      }
    }
  };
};

module.exports = DataLakeStoreAccount;
