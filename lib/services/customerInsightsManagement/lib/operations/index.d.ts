/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Hubs
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the CustomerInsightsManagementClient.
 */
export interface Hubs {


    /**
     * Creates a hub, or updates an existing hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the Hub.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate Hub
     * operation.
     *
     * @param {number} [parameters.tenantFeatures] The bit flags for enabled hub
     * features. Bit 0 is set to 1 indicates graph is enabled, or disabled if set
     * to 0. Bit 1 is set to 1 indicates the hub is disabled, or enabled if set to
     * 0.
     *
     * @param {object} [parameters.hubBillingInfo] Billing settings of the hub.
     *
     * @param {string} [parameters.hubBillingInfo.skuName] The sku name.
     *
     * @param {number} [parameters.hubBillingInfo.minUnits] The minimum number of
     * units will be billed. One unit is 10,000 Profiles and 100,000 Interactions.
     *
     * @param {number} [parameters.hubBillingInfo.maxUnits] The maximum number of
     * units can be used.  One unit is 10,000 Profiles and 100,000 Interactions.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Hub>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, hubName: string, parameters: models.Hub, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Hub>>;

    /**
     * Creates a hub, or updates an existing hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the Hub.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate Hub
     * operation.
     *
     * @param {number} [parameters.tenantFeatures] The bit flags for enabled hub
     * features. Bit 0 is set to 1 indicates graph is enabled, or disabled if set
     * to 0. Bit 1 is set to 1 indicates the hub is disabled, or enabled if set to
     * 0.
     *
     * @param {object} [parameters.hubBillingInfo] Billing settings of the hub.
     *
     * @param {string} [parameters.hubBillingInfo.skuName] The sku name.
     *
     * @param {number} [parameters.hubBillingInfo.minUnits] The minimum number of
     * units will be billed. One unit is 10,000 Profiles and 100,000 Interactions.
     *
     * @param {number} [parameters.hubBillingInfo.maxUnits] The maximum number of
     * units can be used.  One unit is 10,000 Profiles and 100,000 Interactions.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Hub} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Hub} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Hub} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, hubName: string, parameters: models.Hub, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Hub>;
    createOrUpdate(resourceGroupName: string, hubName: string, parameters: models.Hub, callback: ServiceCallback<models.Hub>): void;
    createOrUpdate(resourceGroupName: string, hubName: string, parameters: models.Hub, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Hub>): void;


    /**
     * Updates a Hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the Hub.
     *
     * @param {object} parameters Parameters supplied to the Update Hub operation.
     *
     * @param {number} [parameters.tenantFeatures] The bit flags for enabled hub
     * features. Bit 0 is set to 1 indicates graph is enabled, or disabled if set
     * to 0. Bit 1 is set to 1 indicates the hub is disabled, or enabled if set to
     * 0.
     *
     * @param {object} [parameters.hubBillingInfo] Billing settings of the hub.
     *
     * @param {string} [parameters.hubBillingInfo.skuName] The sku name.
     *
     * @param {number} [parameters.hubBillingInfo.minUnits] The minimum number of
     * units will be billed. One unit is 10,000 Profiles and 100,000 Interactions.
     *
     * @param {number} [parameters.hubBillingInfo.maxUnits] The maximum number of
     * units can be used.  One unit is 10,000 Profiles and 100,000 Interactions.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Hub>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, hubName: string, parameters: models.Hub, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Hub>>;

    /**
     * Updates a Hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the Hub.
     *
     * @param {object} parameters Parameters supplied to the Update Hub operation.
     *
     * @param {number} [parameters.tenantFeatures] The bit flags for enabled hub
     * features. Bit 0 is set to 1 indicates graph is enabled, or disabled if set
     * to 0. Bit 1 is set to 1 indicates the hub is disabled, or enabled if set to
     * 0.
     *
     * @param {object} [parameters.hubBillingInfo] Billing settings of the hub.
     *
     * @param {string} [parameters.hubBillingInfo.skuName] The sku name.
     *
     * @param {number} [parameters.hubBillingInfo.minUnits] The minimum number of
     * units will be billed. One unit is 10,000 Profiles and 100,000 Interactions.
     *
     * @param {number} [parameters.hubBillingInfo.maxUnits] The maximum number of
     * units can be used.  One unit is 10,000 Profiles and 100,000 Interactions.
     *
     * @param {string} [parameters.location] Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Hub} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Hub} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Hub} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, hubName: string, parameters: models.Hub, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Hub>;
    update(resourceGroupName: string, hubName: string, parameters: models.Hub, callback: ServiceCallback<models.Hub>): void;
    update(resourceGroupName: string, hubName: string, parameters: models.Hub, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Hub>): void;


    /**
     * Deletes the specified hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, hubName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, hubName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, hubName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, hubName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets information about the specified hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Hub>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, hubName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Hub>>;

    /**
     * Gets information about the specified hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Hub} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Hub} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Hub} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, hubName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Hub>;
    get(resourceGroupName: string, hubName: string, callback: ServiceCallback<models.Hub>): void;
    get(resourceGroupName: string, hubName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Hub>): void;


    /**
     * Gets all the hubs in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HubListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HubListResult>>;

    /**
     * Gets all the hubs in a resource group.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HubListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HubListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HubListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HubListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.HubListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HubListResult>): void;


    /**
     * Gets all hubs in the specified subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HubListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HubListResult>>;

    /**
     * Gets all hubs in the specified subscription.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HubListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HubListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HubListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HubListResult>;
    list(callback: ServiceCallback<models.HubListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HubListResult>): void;


    /**
     * Deletes the specified hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, hubName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the specified hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, hubName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, hubName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, hubName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets all the hubs in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HubListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HubListResult>>;

    /**
     * Gets all the hubs in a resource group.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HubListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HubListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HubListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HubListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.HubListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HubListResult>): void;


    /**
     * Gets all hubs in the specified subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<HubListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HubListResult>>;

    /**
     * Gets all hubs in the specified subscription.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {HubListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {HubListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link HubListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HubListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.HubListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HubListResult>): void;
}

/**
 * @class
 * Profiles
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the CustomerInsightsManagementClient.
 */
export interface Profiles {


    /**
     * Creates a profile within a Hub, or updates an existing profile.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} profileName The name of the profile.
     *
     * @param {object} parameters Parameters supplied to the create/delete Profile
     * type operation
     *
     * @param {object} [parameters.attributes] The attributes for the Type.
     *
     * @param {object} [parameters.description] Localized descriptions for the
     * property.
     *
     * @param {object} [parameters.displayName] Localized display names for the
     * property.
     *
     * @param {object} [parameters.localizedAttributes] Any custom localized
     * attributes for the Type.
     *
     * @param {string} [parameters.smallImage] Small Image associated with the
     * Property or EntityType.
     *
     * @param {string} [parameters.mediumImage] Medium Image associated with the
     * Property or EntityType.
     *
     * @param {string} [parameters.largeImage] Large Image associated with the
     * Property or EntityType.
     *
     * @param {string} [parameters.apiEntitySetName] The api entity set name. This
     * becomes the odata entity set name for the entity Type being refered in this
     * object.
     *
     * @param {string} [parameters.entityType] Type of entity. Possible values
     * include: 'None', 'Profile', 'Interaction', 'Relationship'
     *
     * @param {array} [parameters.fields] The properties of the Profile.
     *
     * @param {number} [parameters.instancesCount] The instance count.
     *
     * @param {string} [parameters.schemaItemTypeLink] The schema org link. This
     * helps ACI identify and suggest semantic models.
     *
     * @param {string} [parameters.timestampFieldName] The timestamp property name.
     * Represents the time when the interaction or profile update happened.
     *
     * @param {string} [parameters.typeName] The name of the entity.
     *
     * @param {array} [parameters.strongIds] The strong IDs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProfileResourceFormat>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, hubName: string, profileName: string, parameters: models.ProfileResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProfileResourceFormat>>;

    /**
     * Creates a profile within a Hub, or updates an existing profile.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} profileName The name of the profile.
     *
     * @param {object} parameters Parameters supplied to the create/delete Profile
     * type operation
     *
     * @param {object} [parameters.attributes] The attributes for the Type.
     *
     * @param {object} [parameters.description] Localized descriptions for the
     * property.
     *
     * @param {object} [parameters.displayName] Localized display names for the
     * property.
     *
     * @param {object} [parameters.localizedAttributes] Any custom localized
     * attributes for the Type.
     *
     * @param {string} [parameters.smallImage] Small Image associated with the
     * Property or EntityType.
     *
     * @param {string} [parameters.mediumImage] Medium Image associated with the
     * Property or EntityType.
     *
     * @param {string} [parameters.largeImage] Large Image associated with the
     * Property or EntityType.
     *
     * @param {string} [parameters.apiEntitySetName] The api entity set name. This
     * becomes the odata entity set name for the entity Type being refered in this
     * object.
     *
     * @param {string} [parameters.entityType] Type of entity. Possible values
     * include: 'None', 'Profile', 'Interaction', 'Relationship'
     *
     * @param {array} [parameters.fields] The properties of the Profile.
     *
     * @param {number} [parameters.instancesCount] The instance count.
     *
     * @param {string} [parameters.schemaItemTypeLink] The schema org link. This
     * helps ACI identify and suggest semantic models.
     *
     * @param {string} [parameters.timestampFieldName] The timestamp property name.
     * Represents the time when the interaction or profile update happened.
     *
     * @param {string} [parameters.typeName] The name of the entity.
     *
     * @param {array} [parameters.strongIds] The strong IDs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProfileResourceFormat} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProfileResourceFormat} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProfileResourceFormat} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, hubName: string, profileName: string, parameters: models.ProfileResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProfileResourceFormat>;
    createOrUpdate(resourceGroupName: string, hubName: string, profileName: string, parameters: models.ProfileResourceFormat, callback: ServiceCallback<models.ProfileResourceFormat>): void;
    createOrUpdate(resourceGroupName: string, hubName: string, profileName: string, parameters: models.ProfileResourceFormat, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProfileResourceFormat>): void;


    /**
     * Gets information about the specified profile.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} profileName The name of the profile.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.localeCode] Locale of profile to retrieve, default
     * is en-us.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProfileResourceFormat>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, hubName: string, profileName: string, options?: { localeCode? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProfileResourceFormat>>;

    /**
     * Gets information about the specified profile.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} profileName The name of the profile.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.localeCode] Locale of profile to retrieve, default
     * is en-us.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProfileResourceFormat} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProfileResourceFormat} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProfileResourceFormat} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, hubName: string, profileName: string, options?: { localeCode? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ProfileResourceFormat>;
    get(resourceGroupName: string, hubName: string, profileName: string, callback: ServiceCallback<models.ProfileResourceFormat>): void;
    get(resourceGroupName: string, hubName: string, profileName: string, options: { localeCode? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProfileResourceFormat>): void;


    /**
     * Deletes a profile within a hub
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} profileName The name of the profile.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.localeCode] Locale of profile to retrieve, default
     * is en-us.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, hubName: string, profileName: string, options?: { localeCode? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a profile within a hub
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} profileName The name of the profile.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.localeCode] Locale of profile to retrieve, default
     * is en-us.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, hubName: string, profileName: string, options?: { localeCode? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, hubName: string, profileName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, hubName: string, profileName: string, options: { localeCode? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets all profile in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.localeCode] Locale of profile to retrieve, default
     * is en-us.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProfileListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHubWithHttpOperationResponse(resourceGroupName: string, hubName: string, options?: { localeCode? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProfileListResult>>;

    /**
     * Gets all profile in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.localeCode] Locale of profile to retrieve, default
     * is en-us.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProfileListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProfileListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProfileListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHub(resourceGroupName: string, hubName: string, options?: { localeCode? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ProfileListResult>;
    listByHub(resourceGroupName: string, hubName: string, callback: ServiceCallback<models.ProfileListResult>): void;
    listByHub(resourceGroupName: string, hubName: string, options: { localeCode? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProfileListResult>): void;


    /**
     * Gets the KPIs that enrich the profile Type identified by the supplied name.
     * Enrichment happens through participants of the Interaction on an Interaction
     * KPI and through Relationships for Profile KPIs.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} profileName The name of the profile.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEnrichingKpisWithHttpOperationResponse(resourceGroupName: string, hubName: string, profileName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.KpiDefinition[]>>;

    /**
     * Gets the KPIs that enrich the profile Type identified by the supplied name.
     * Enrichment happens through participants of the Interaction on an Interaction
     * KPI and through Relationships for Profile KPIs.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} profileName The name of the profile.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEnrichingKpis(resourceGroupName: string, hubName: string, profileName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.KpiDefinition[]>;
    getEnrichingKpis(resourceGroupName: string, hubName: string, profileName: string, callback: ServiceCallback<models.KpiDefinition[]>): void;
    getEnrichingKpis(resourceGroupName: string, hubName: string, profileName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KpiDefinition[]>): void;


    /**
     * Creates a profile within a Hub, or updates an existing profile.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} profileName The name of the profile.
     *
     * @param {object} parameters Parameters supplied to the create/delete Profile
     * type operation
     *
     * @param {object} [parameters.attributes] The attributes for the Type.
     *
     * @param {object} [parameters.description] Localized descriptions for the
     * property.
     *
     * @param {object} [parameters.displayName] Localized display names for the
     * property.
     *
     * @param {object} [parameters.localizedAttributes] Any custom localized
     * attributes for the Type.
     *
     * @param {string} [parameters.smallImage] Small Image associated with the
     * Property or EntityType.
     *
     * @param {string} [parameters.mediumImage] Medium Image associated with the
     * Property or EntityType.
     *
     * @param {string} [parameters.largeImage] Large Image associated with the
     * Property or EntityType.
     *
     * @param {string} [parameters.apiEntitySetName] The api entity set name. This
     * becomes the odata entity set name for the entity Type being refered in this
     * object.
     *
     * @param {string} [parameters.entityType] Type of entity. Possible values
     * include: 'None', 'Profile', 'Interaction', 'Relationship'
     *
     * @param {array} [parameters.fields] The properties of the Profile.
     *
     * @param {number} [parameters.instancesCount] The instance count.
     *
     * @param {string} [parameters.schemaItemTypeLink] The schema org link. This
     * helps ACI identify and suggest semantic models.
     *
     * @param {string} [parameters.timestampFieldName] The timestamp property name.
     * Represents the time when the interaction or profile update happened.
     *
     * @param {string} [parameters.typeName] The name of the entity.
     *
     * @param {array} [parameters.strongIds] The strong IDs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProfileResourceFormat>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, hubName: string, profileName: string, parameters: models.ProfileResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProfileResourceFormat>>;

    /**
     * Creates a profile within a Hub, or updates an existing profile.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} profileName The name of the profile.
     *
     * @param {object} parameters Parameters supplied to the create/delete Profile
     * type operation
     *
     * @param {object} [parameters.attributes] The attributes for the Type.
     *
     * @param {object} [parameters.description] Localized descriptions for the
     * property.
     *
     * @param {object} [parameters.displayName] Localized display names for the
     * property.
     *
     * @param {object} [parameters.localizedAttributes] Any custom localized
     * attributes for the Type.
     *
     * @param {string} [parameters.smallImage] Small Image associated with the
     * Property or EntityType.
     *
     * @param {string} [parameters.mediumImage] Medium Image associated with the
     * Property or EntityType.
     *
     * @param {string} [parameters.largeImage] Large Image associated with the
     * Property or EntityType.
     *
     * @param {string} [parameters.apiEntitySetName] The api entity set name. This
     * becomes the odata entity set name for the entity Type being refered in this
     * object.
     *
     * @param {string} [parameters.entityType] Type of entity. Possible values
     * include: 'None', 'Profile', 'Interaction', 'Relationship'
     *
     * @param {array} [parameters.fields] The properties of the Profile.
     *
     * @param {number} [parameters.instancesCount] The instance count.
     *
     * @param {string} [parameters.schemaItemTypeLink] The schema org link. This
     * helps ACI identify and suggest semantic models.
     *
     * @param {string} [parameters.timestampFieldName] The timestamp property name.
     * Represents the time when the interaction or profile update happened.
     *
     * @param {string} [parameters.typeName] The name of the entity.
     *
     * @param {array} [parameters.strongIds] The strong IDs.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProfileResourceFormat} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProfileResourceFormat} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProfileResourceFormat} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, profileName: string, parameters: models.ProfileResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProfileResourceFormat>;
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, profileName: string, parameters: models.ProfileResourceFormat, callback: ServiceCallback<models.ProfileResourceFormat>): void;
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, profileName: string, parameters: models.ProfileResourceFormat, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProfileResourceFormat>): void;


    /**
     * Deletes a profile within a hub
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} profileName The name of the profile.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.localeCode] Locale of profile to retrieve, default
     * is en-us.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, hubName: string, profileName: string, options?: { localeCode? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a profile within a hub
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} profileName The name of the profile.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.localeCode] Locale of profile to retrieve, default
     * is en-us.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, hubName: string, profileName: string, options?: { localeCode? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, hubName: string, profileName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, hubName: string, profileName: string, options: { localeCode? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets all profile in the hub.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ProfileListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHubNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ProfileListResult>>;

    /**
     * Gets all profile in the hub.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ProfileListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ProfileListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ProfileListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHubNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ProfileListResult>;
    listByHubNext(nextPageLink: string, callback: ServiceCallback<models.ProfileListResult>): void;
    listByHubNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ProfileListResult>): void;
}

/**
 * @class
 * Interactions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the CustomerInsightsManagementClient.
 */
export interface Interactions {


    /**
     * Creates an interaction or updates an existing interaction within a hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} interactionName The name of the interaction.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate
     * Interaction operation.
     *
     * @param {object} [parameters.attributes] The attributes for the Type.
     *
     * @param {object} [parameters.description] Localized descriptions for the
     * property.
     *
     * @param {object} [parameters.displayName] Localized display names for the
     * property.
     *
     * @param {object} [parameters.localizedAttributes] Any custom localized
     * attributes for the Type.
     *
     * @param {string} [parameters.smallImage] Small Image associated with the
     * Property or EntityType.
     *
     * @param {string} [parameters.mediumImage] Medium Image associated with the
     * Property or EntityType.
     *
     * @param {string} [parameters.largeImage] Large Image associated with the
     * Property or EntityType.
     *
     * @param {string} [parameters.apiEntitySetName] The api entity set name. This
     * becomes the odata entity set name for the entity Type being refered in this
     * object.
     *
     * @param {string} [parameters.entityType] Type of entity. Possible values
     * include: 'None', 'Profile', 'Interaction', 'Relationship'
     *
     * @param {array} [parameters.fields] The properties of the Profile.
     *
     * @param {number} [parameters.instancesCount] The instance count.
     *
     * @param {string} [parameters.schemaItemTypeLink] The schema org link. This
     * helps ACI identify and suggest semantic models.
     *
     * @param {string} [parameters.timestampFieldName] The timestamp property name.
     * Represents the time when the interaction or profile update happened.
     *
     * @param {string} [parameters.typeName] The name of the entity.
     *
     * @param {array} [parameters.idPropertyNames] The id property names.
     * Properties which uniquely identify an interaction instance.
     *
     * @param {array} [parameters.participantProfiles] Profiles that participated
     * in the interaction.
     *
     * @param {string} [parameters.primaryParticipantProfilePropertyName] The
     * primary participant property name for an interaction ,This is used to
     * logically represent the agent of the interaction, Specify the participant
     * name here from ParticipantName.
     *
     * @param {boolean} [parameters.isActivity] An interaction can be tagged as an
     * activity only during create. This enables the interaction to be editable and
     * can enable merging of properties from multiple data sources based on
     * precedence, which is defined at a link level.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<InteractionResourceFormat>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, hubName: string, interactionName: string, parameters: models.InteractionResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.InteractionResourceFormat>>;

    /**
     * Creates an interaction or updates an existing interaction within a hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} interactionName The name of the interaction.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate
     * Interaction operation.
     *
     * @param {object} [parameters.attributes] The attributes for the Type.
     *
     * @param {object} [parameters.description] Localized descriptions for the
     * property.
     *
     * @param {object} [parameters.displayName] Localized display names for the
     * property.
     *
     * @param {object} [parameters.localizedAttributes] Any custom localized
     * attributes for the Type.
     *
     * @param {string} [parameters.smallImage] Small Image associated with the
     * Property or EntityType.
     *
     * @param {string} [parameters.mediumImage] Medium Image associated with the
     * Property or EntityType.
     *
     * @param {string} [parameters.largeImage] Large Image associated with the
     * Property or EntityType.
     *
     * @param {string} [parameters.apiEntitySetName] The api entity set name. This
     * becomes the odata entity set name for the entity Type being refered in this
     * object.
     *
     * @param {string} [parameters.entityType] Type of entity. Possible values
     * include: 'None', 'Profile', 'Interaction', 'Relationship'
     *
     * @param {array} [parameters.fields] The properties of the Profile.
     *
     * @param {number} [parameters.instancesCount] The instance count.
     *
     * @param {string} [parameters.schemaItemTypeLink] The schema org link. This
     * helps ACI identify and suggest semantic models.
     *
     * @param {string} [parameters.timestampFieldName] The timestamp property name.
     * Represents the time when the interaction or profile update happened.
     *
     * @param {string} [parameters.typeName] The name of the entity.
     *
     * @param {array} [parameters.idPropertyNames] The id property names.
     * Properties which uniquely identify an interaction instance.
     *
     * @param {array} [parameters.participantProfiles] Profiles that participated
     * in the interaction.
     *
     * @param {string} [parameters.primaryParticipantProfilePropertyName] The
     * primary participant property name for an interaction ,This is used to
     * logically represent the agent of the interaction, Specify the participant
     * name here from ParticipantName.
     *
     * @param {boolean} [parameters.isActivity] An interaction can be tagged as an
     * activity only during create. This enables the interaction to be editable and
     * can enable merging of properties from multiple data sources based on
     * precedence, which is defined at a link level.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {InteractionResourceFormat} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {InteractionResourceFormat} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link InteractionResourceFormat} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, hubName: string, interactionName: string, parameters: models.InteractionResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.InteractionResourceFormat>;
    createOrUpdate(resourceGroupName: string, hubName: string, interactionName: string, parameters: models.InteractionResourceFormat, callback: ServiceCallback<models.InteractionResourceFormat>): void;
    createOrUpdate(resourceGroupName: string, hubName: string, interactionName: string, parameters: models.InteractionResourceFormat, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.InteractionResourceFormat>): void;


    /**
     * Gets information about the specified interaction.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} interactionName The name of the interaction.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.localeCode] Locale of interaction to retrieve,
     * default is en-us.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<InteractionResourceFormat>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, hubName: string, interactionName: string, options?: { localeCode? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.InteractionResourceFormat>>;

    /**
     * Gets information about the specified interaction.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} interactionName The name of the interaction.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.localeCode] Locale of interaction to retrieve,
     * default is en-us.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {InteractionResourceFormat} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {InteractionResourceFormat} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link InteractionResourceFormat} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, hubName: string, interactionName: string, options?: { localeCode? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.InteractionResourceFormat>;
    get(resourceGroupName: string, hubName: string, interactionName: string, callback: ServiceCallback<models.InteractionResourceFormat>): void;
    get(resourceGroupName: string, hubName: string, interactionName: string, options: { localeCode? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.InteractionResourceFormat>): void;


    /**
     * Gets all interactions in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.localeCode] Locale of interaction to retrieve,
     * default is en-us.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<InteractionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHubWithHttpOperationResponse(resourceGroupName: string, hubName: string, options?: { localeCode? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.InteractionListResult>>;

    /**
     * Gets all interactions in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.localeCode] Locale of interaction to retrieve,
     * default is en-us.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {InteractionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {InteractionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link InteractionListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHub(resourceGroupName: string, hubName: string, options?: { localeCode? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.InteractionListResult>;
    listByHub(resourceGroupName: string, hubName: string, callback: ServiceCallback<models.InteractionListResult>): void;
    listByHub(resourceGroupName: string, hubName: string, options: { localeCode? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.InteractionListResult>): void;


    /**
     * Suggests relationships to create relationship links.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} interactionName The name of the interaction.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SuggestRelationshipLinksResponse>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    suggestRelationshipLinksWithHttpOperationResponse(resourceGroupName: string, hubName: string, interactionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SuggestRelationshipLinksResponse>>;

    /**
     * Suggests relationships to create relationship links.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} interactionName The name of the interaction.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SuggestRelationshipLinksResponse} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SuggestRelationshipLinksResponse} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SuggestRelationshipLinksResponse} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    suggestRelationshipLinks(resourceGroupName: string, hubName: string, interactionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SuggestRelationshipLinksResponse>;
    suggestRelationshipLinks(resourceGroupName: string, hubName: string, interactionName: string, callback: ServiceCallback<models.SuggestRelationshipLinksResponse>): void;
    suggestRelationshipLinks(resourceGroupName: string, hubName: string, interactionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SuggestRelationshipLinksResponse>): void;


    /**
     * Creates an interaction or updates an existing interaction within a hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} interactionName The name of the interaction.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate
     * Interaction operation.
     *
     * @param {object} [parameters.attributes] The attributes for the Type.
     *
     * @param {object} [parameters.description] Localized descriptions for the
     * property.
     *
     * @param {object} [parameters.displayName] Localized display names for the
     * property.
     *
     * @param {object} [parameters.localizedAttributes] Any custom localized
     * attributes for the Type.
     *
     * @param {string} [parameters.smallImage] Small Image associated with the
     * Property or EntityType.
     *
     * @param {string} [parameters.mediumImage] Medium Image associated with the
     * Property or EntityType.
     *
     * @param {string} [parameters.largeImage] Large Image associated with the
     * Property or EntityType.
     *
     * @param {string} [parameters.apiEntitySetName] The api entity set name. This
     * becomes the odata entity set name for the entity Type being refered in this
     * object.
     *
     * @param {string} [parameters.entityType] Type of entity. Possible values
     * include: 'None', 'Profile', 'Interaction', 'Relationship'
     *
     * @param {array} [parameters.fields] The properties of the Profile.
     *
     * @param {number} [parameters.instancesCount] The instance count.
     *
     * @param {string} [parameters.schemaItemTypeLink] The schema org link. This
     * helps ACI identify and suggest semantic models.
     *
     * @param {string} [parameters.timestampFieldName] The timestamp property name.
     * Represents the time when the interaction or profile update happened.
     *
     * @param {string} [parameters.typeName] The name of the entity.
     *
     * @param {array} [parameters.idPropertyNames] The id property names.
     * Properties which uniquely identify an interaction instance.
     *
     * @param {array} [parameters.participantProfiles] Profiles that participated
     * in the interaction.
     *
     * @param {string} [parameters.primaryParticipantProfilePropertyName] The
     * primary participant property name for an interaction ,This is used to
     * logically represent the agent of the interaction, Specify the participant
     * name here from ParticipantName.
     *
     * @param {boolean} [parameters.isActivity] An interaction can be tagged as an
     * activity only during create. This enables the interaction to be editable and
     * can enable merging of properties from multiple data sources based on
     * precedence, which is defined at a link level.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<InteractionResourceFormat>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, hubName: string, interactionName: string, parameters: models.InteractionResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.InteractionResourceFormat>>;

    /**
     * Creates an interaction or updates an existing interaction within a hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} interactionName The name of the interaction.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate
     * Interaction operation.
     *
     * @param {object} [parameters.attributes] The attributes for the Type.
     *
     * @param {object} [parameters.description] Localized descriptions for the
     * property.
     *
     * @param {object} [parameters.displayName] Localized display names for the
     * property.
     *
     * @param {object} [parameters.localizedAttributes] Any custom localized
     * attributes for the Type.
     *
     * @param {string} [parameters.smallImage] Small Image associated with the
     * Property or EntityType.
     *
     * @param {string} [parameters.mediumImage] Medium Image associated with the
     * Property or EntityType.
     *
     * @param {string} [parameters.largeImage] Large Image associated with the
     * Property or EntityType.
     *
     * @param {string} [parameters.apiEntitySetName] The api entity set name. This
     * becomes the odata entity set name for the entity Type being refered in this
     * object.
     *
     * @param {string} [parameters.entityType] Type of entity. Possible values
     * include: 'None', 'Profile', 'Interaction', 'Relationship'
     *
     * @param {array} [parameters.fields] The properties of the Profile.
     *
     * @param {number} [parameters.instancesCount] The instance count.
     *
     * @param {string} [parameters.schemaItemTypeLink] The schema org link. This
     * helps ACI identify and suggest semantic models.
     *
     * @param {string} [parameters.timestampFieldName] The timestamp property name.
     * Represents the time when the interaction or profile update happened.
     *
     * @param {string} [parameters.typeName] The name of the entity.
     *
     * @param {array} [parameters.idPropertyNames] The id property names.
     * Properties which uniquely identify an interaction instance.
     *
     * @param {array} [parameters.participantProfiles] Profiles that participated
     * in the interaction.
     *
     * @param {string} [parameters.primaryParticipantProfilePropertyName] The
     * primary participant property name for an interaction ,This is used to
     * logically represent the agent of the interaction, Specify the participant
     * name here from ParticipantName.
     *
     * @param {boolean} [parameters.isActivity] An interaction can be tagged as an
     * activity only during create. This enables the interaction to be editable and
     * can enable merging of properties from multiple data sources based on
     * precedence, which is defined at a link level.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {InteractionResourceFormat} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {InteractionResourceFormat} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link InteractionResourceFormat} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, interactionName: string, parameters: models.InteractionResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.InteractionResourceFormat>;
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, interactionName: string, parameters: models.InteractionResourceFormat, callback: ServiceCallback<models.InteractionResourceFormat>): void;
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, interactionName: string, parameters: models.InteractionResourceFormat, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.InteractionResourceFormat>): void;


    /**
     * Gets all interactions in the hub.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<InteractionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHubNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.InteractionListResult>>;

    /**
     * Gets all interactions in the hub.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {InteractionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {InteractionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link InteractionListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHubNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.InteractionListResult>;
    listByHubNext(nextPageLink: string, callback: ServiceCallback<models.InteractionListResult>): void;
    listByHubNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.InteractionListResult>): void;
}

/**
 * @class
 * Relationships
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the CustomerInsightsManagementClient.
 */
export interface Relationships {


    /**
     * Creates a relationship or updates an existing relationship within a hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} relationshipName The name of the Relationship.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate
     * Relationship operation.
     *
     * @param {string} [parameters.cardinality] The Relationship Cardinality.
     * Possible values include: 'OneToOne', 'OneToMany', 'ManyToMany'
     *
     * @param {object} [parameters.displayName] Localized display name for the
     * Relationship.
     *
     * @param {object} [parameters.description] Localized descriptions for the
     * Relationship.
     *
     * @param {date} [parameters.expiryDateTimeUtc] The expiry date time in UTC.
     *
     * @param {array} [parameters.fields] The properties of the Relationship.
     *
     * @param {array} [parameters.lookupMappings] Optional property to be used to
     * map fields in profile to their strong ids in related profile.
     *
     * @param {string} parameters.profileType Profile type.
     *
     * @param {string} parameters.relatedProfileType Related profile being
     * referenced.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RelationshipResourceFormat>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, hubName: string, relationshipName: string, parameters: models.RelationshipResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RelationshipResourceFormat>>;

    /**
     * Creates a relationship or updates an existing relationship within a hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} relationshipName The name of the Relationship.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate
     * Relationship operation.
     *
     * @param {string} [parameters.cardinality] The Relationship Cardinality.
     * Possible values include: 'OneToOne', 'OneToMany', 'ManyToMany'
     *
     * @param {object} [parameters.displayName] Localized display name for the
     * Relationship.
     *
     * @param {object} [parameters.description] Localized descriptions for the
     * Relationship.
     *
     * @param {date} [parameters.expiryDateTimeUtc] The expiry date time in UTC.
     *
     * @param {array} [parameters.fields] The properties of the Relationship.
     *
     * @param {array} [parameters.lookupMappings] Optional property to be used to
     * map fields in profile to their strong ids in related profile.
     *
     * @param {string} parameters.profileType Profile type.
     *
     * @param {string} parameters.relatedProfileType Related profile being
     * referenced.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RelationshipResourceFormat} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RelationshipResourceFormat} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RelationshipResourceFormat} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, hubName: string, relationshipName: string, parameters: models.RelationshipResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RelationshipResourceFormat>;
    createOrUpdate(resourceGroupName: string, hubName: string, relationshipName: string, parameters: models.RelationshipResourceFormat, callback: ServiceCallback<models.RelationshipResourceFormat>): void;
    createOrUpdate(resourceGroupName: string, hubName: string, relationshipName: string, parameters: models.RelationshipResourceFormat, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RelationshipResourceFormat>): void;


    /**
     * Gets information about the specified relationship.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} relationshipName The name of the relationship.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RelationshipResourceFormat>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, hubName: string, relationshipName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RelationshipResourceFormat>>;

    /**
     * Gets information about the specified relationship.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} relationshipName The name of the relationship.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RelationshipResourceFormat} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RelationshipResourceFormat} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RelationshipResourceFormat} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, hubName: string, relationshipName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RelationshipResourceFormat>;
    get(resourceGroupName: string, hubName: string, relationshipName: string, callback: ServiceCallback<models.RelationshipResourceFormat>): void;
    get(resourceGroupName: string, hubName: string, relationshipName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RelationshipResourceFormat>): void;


    /**
     * Deletes a relationship within a hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} relationshipName The name of the relationship.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, hubName: string, relationshipName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a relationship within a hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} relationshipName The name of the relationship.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, hubName: string, relationshipName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, hubName: string, relationshipName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, hubName: string, relationshipName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets all relationships in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RelationshipListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHubWithHttpOperationResponse(resourceGroupName: string, hubName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RelationshipListResult>>;

    /**
     * Gets all relationships in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RelationshipListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RelationshipListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RelationshipListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHub(resourceGroupName: string, hubName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RelationshipListResult>;
    listByHub(resourceGroupName: string, hubName: string, callback: ServiceCallback<models.RelationshipListResult>): void;
    listByHub(resourceGroupName: string, hubName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RelationshipListResult>): void;


    /**
     * Creates a relationship or updates an existing relationship within a hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} relationshipName The name of the Relationship.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate
     * Relationship operation.
     *
     * @param {string} [parameters.cardinality] The Relationship Cardinality.
     * Possible values include: 'OneToOne', 'OneToMany', 'ManyToMany'
     *
     * @param {object} [parameters.displayName] Localized display name for the
     * Relationship.
     *
     * @param {object} [parameters.description] Localized descriptions for the
     * Relationship.
     *
     * @param {date} [parameters.expiryDateTimeUtc] The expiry date time in UTC.
     *
     * @param {array} [parameters.fields] The properties of the Relationship.
     *
     * @param {array} [parameters.lookupMappings] Optional property to be used to
     * map fields in profile to their strong ids in related profile.
     *
     * @param {string} parameters.profileType Profile type.
     *
     * @param {string} parameters.relatedProfileType Related profile being
     * referenced.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RelationshipResourceFormat>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, hubName: string, relationshipName: string, parameters: models.RelationshipResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RelationshipResourceFormat>>;

    /**
     * Creates a relationship or updates an existing relationship within a hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} relationshipName The name of the Relationship.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate
     * Relationship operation.
     *
     * @param {string} [parameters.cardinality] The Relationship Cardinality.
     * Possible values include: 'OneToOne', 'OneToMany', 'ManyToMany'
     *
     * @param {object} [parameters.displayName] Localized display name for the
     * Relationship.
     *
     * @param {object} [parameters.description] Localized descriptions for the
     * Relationship.
     *
     * @param {date} [parameters.expiryDateTimeUtc] The expiry date time in UTC.
     *
     * @param {array} [parameters.fields] The properties of the Relationship.
     *
     * @param {array} [parameters.lookupMappings] Optional property to be used to
     * map fields in profile to their strong ids in related profile.
     *
     * @param {string} parameters.profileType Profile type.
     *
     * @param {string} parameters.relatedProfileType Related profile being
     * referenced.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RelationshipResourceFormat} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RelationshipResourceFormat} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RelationshipResourceFormat} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, relationshipName: string, parameters: models.RelationshipResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RelationshipResourceFormat>;
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, relationshipName: string, parameters: models.RelationshipResourceFormat, callback: ServiceCallback<models.RelationshipResourceFormat>): void;
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, relationshipName: string, parameters: models.RelationshipResourceFormat, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RelationshipResourceFormat>): void;


    /**
     * Deletes a relationship within a hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} relationshipName The name of the relationship.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, hubName: string, relationshipName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a relationship within a hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} relationshipName The name of the relationship.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, hubName: string, relationshipName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, hubName: string, relationshipName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, hubName: string, relationshipName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets all relationships in the hub.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RelationshipListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHubNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RelationshipListResult>>;

    /**
     * Gets all relationships in the hub.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RelationshipListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RelationshipListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RelationshipListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHubNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RelationshipListResult>;
    listByHubNext(nextPageLink: string, callback: ServiceCallback<models.RelationshipListResult>): void;
    listByHubNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RelationshipListResult>): void;
}

/**
 * @class
 * RelationshipLinks
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the CustomerInsightsManagementClient.
 */
export interface RelationshipLinks {


    /**
     * Creates a relationship link or updates an existing relationship link within
     * a hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} relationshipLinkName The name of the relationship link.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate
     * relationship link operation.
     *
     * @param {object} [parameters.displayName] Localized display name for the
     * Relationship Link.
     *
     * @param {object} [parameters.description] Localized descriptions for the
     * Relationship Link.
     *
     * @param {string} parameters.interactionType The InteractionType associated
     * with the Relationship Link.
     *
     * @param {array} [parameters.mappings] The mappings between Interaction and
     * Relationship fields.
     *
     * @param {array} parameters.profilePropertyReferences The property references
     * for the Profile of the Relationship.
     *
     * @param {array} parameters.relatedProfilePropertyReferences The property
     * references for the Related Profile of the Relationship.
     *
     * @param {string} parameters.relationshipName The Relationship associated with
     * the Link.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RelationshipLinkResourceFormat>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, hubName: string, relationshipLinkName: string, parameters: models.RelationshipLinkResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RelationshipLinkResourceFormat>>;

    /**
     * Creates a relationship link or updates an existing relationship link within
     * a hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} relationshipLinkName The name of the relationship link.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate
     * relationship link operation.
     *
     * @param {object} [parameters.displayName] Localized display name for the
     * Relationship Link.
     *
     * @param {object} [parameters.description] Localized descriptions for the
     * Relationship Link.
     *
     * @param {string} parameters.interactionType The InteractionType associated
     * with the Relationship Link.
     *
     * @param {array} [parameters.mappings] The mappings between Interaction and
     * Relationship fields.
     *
     * @param {array} parameters.profilePropertyReferences The property references
     * for the Profile of the Relationship.
     *
     * @param {array} parameters.relatedProfilePropertyReferences The property
     * references for the Related Profile of the Relationship.
     *
     * @param {string} parameters.relationshipName The Relationship associated with
     * the Link.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RelationshipLinkResourceFormat} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RelationshipLinkResourceFormat} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RelationshipLinkResourceFormat} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, hubName: string, relationshipLinkName: string, parameters: models.RelationshipLinkResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RelationshipLinkResourceFormat>;
    createOrUpdate(resourceGroupName: string, hubName: string, relationshipLinkName: string, parameters: models.RelationshipLinkResourceFormat, callback: ServiceCallback<models.RelationshipLinkResourceFormat>): void;
    createOrUpdate(resourceGroupName: string, hubName: string, relationshipLinkName: string, parameters: models.RelationshipLinkResourceFormat, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RelationshipLinkResourceFormat>): void;


    /**
     * Gets information about the specified relationship Link.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} relationshipLinkName The name of the relationship link.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RelationshipLinkResourceFormat>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, hubName: string, relationshipLinkName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RelationshipLinkResourceFormat>>;

    /**
     * Gets information about the specified relationship Link.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} relationshipLinkName The name of the relationship link.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RelationshipLinkResourceFormat} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RelationshipLinkResourceFormat} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RelationshipLinkResourceFormat} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, hubName: string, relationshipLinkName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RelationshipLinkResourceFormat>;
    get(resourceGroupName: string, hubName: string, relationshipLinkName: string, callback: ServiceCallback<models.RelationshipLinkResourceFormat>): void;
    get(resourceGroupName: string, hubName: string, relationshipLinkName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RelationshipLinkResourceFormat>): void;


    /**
     * Deletes a relationship link within a hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} relationshipLinkName The name of the relationship.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, hubName: string, relationshipLinkName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a relationship link within a hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} relationshipLinkName The name of the relationship.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, hubName: string, relationshipLinkName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, hubName: string, relationshipLinkName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, hubName: string, relationshipLinkName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets all relationship links in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RelationshipLinkListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHubWithHttpOperationResponse(resourceGroupName: string, hubName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RelationshipLinkListResult>>;

    /**
     * Gets all relationship links in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RelationshipLinkListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RelationshipLinkListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RelationshipLinkListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHub(resourceGroupName: string, hubName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RelationshipLinkListResult>;
    listByHub(resourceGroupName: string, hubName: string, callback: ServiceCallback<models.RelationshipLinkListResult>): void;
    listByHub(resourceGroupName: string, hubName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RelationshipLinkListResult>): void;


    /**
     * Creates a relationship link or updates an existing relationship link within
     * a hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} relationshipLinkName The name of the relationship link.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate
     * relationship link operation.
     *
     * @param {object} [parameters.displayName] Localized display name for the
     * Relationship Link.
     *
     * @param {object} [parameters.description] Localized descriptions for the
     * Relationship Link.
     *
     * @param {string} parameters.interactionType The InteractionType associated
     * with the Relationship Link.
     *
     * @param {array} [parameters.mappings] The mappings between Interaction and
     * Relationship fields.
     *
     * @param {array} parameters.profilePropertyReferences The property references
     * for the Profile of the Relationship.
     *
     * @param {array} parameters.relatedProfilePropertyReferences The property
     * references for the Related Profile of the Relationship.
     *
     * @param {string} parameters.relationshipName The Relationship associated with
     * the Link.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RelationshipLinkResourceFormat>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, hubName: string, relationshipLinkName: string, parameters: models.RelationshipLinkResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RelationshipLinkResourceFormat>>;

    /**
     * Creates a relationship link or updates an existing relationship link within
     * a hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} relationshipLinkName The name of the relationship link.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate
     * relationship link operation.
     *
     * @param {object} [parameters.displayName] Localized display name for the
     * Relationship Link.
     *
     * @param {object} [parameters.description] Localized descriptions for the
     * Relationship Link.
     *
     * @param {string} parameters.interactionType The InteractionType associated
     * with the Relationship Link.
     *
     * @param {array} [parameters.mappings] The mappings between Interaction and
     * Relationship fields.
     *
     * @param {array} parameters.profilePropertyReferences The property references
     * for the Profile of the Relationship.
     *
     * @param {array} parameters.relatedProfilePropertyReferences The property
     * references for the Related Profile of the Relationship.
     *
     * @param {string} parameters.relationshipName The Relationship associated with
     * the Link.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RelationshipLinkResourceFormat} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RelationshipLinkResourceFormat} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RelationshipLinkResourceFormat} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, relationshipLinkName: string, parameters: models.RelationshipLinkResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RelationshipLinkResourceFormat>;
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, relationshipLinkName: string, parameters: models.RelationshipLinkResourceFormat, callback: ServiceCallback<models.RelationshipLinkResourceFormat>): void;
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, relationshipLinkName: string, parameters: models.RelationshipLinkResourceFormat, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RelationshipLinkResourceFormat>): void;


    /**
     * Deletes a relationship link within a hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} relationshipLinkName The name of the relationship.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, hubName: string, relationshipLinkName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a relationship link within a hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} relationshipLinkName The name of the relationship.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, hubName: string, relationshipLinkName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, hubName: string, relationshipLinkName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, hubName: string, relationshipLinkName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets all relationship links in the hub.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RelationshipLinkListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHubNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RelationshipLinkListResult>>;

    /**
     * Gets all relationship links in the hub.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RelationshipLinkListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RelationshipLinkListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RelationshipLinkListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHubNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RelationshipLinkListResult>;
    listByHubNext(nextPageLink: string, callback: ServiceCallback<models.RelationshipLinkListResult>): void;
    listByHubNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RelationshipLinkListResult>): void;
}

/**
 * @class
 * AuthorizationPolicies
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the CustomerInsightsManagementClient.
 */
export interface AuthorizationPolicies {


    /**
     * Creates an authorization policy or updates an existing authorization policy.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} authorizationPolicyName The name of the policy.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate
     * authorization policy operation.
     *
     * @param {array} parameters.permissions The permissions associated with the
     * policy.
     *
     * @param {string} [parameters.primaryKey] Primary key assiciated with the
     * policy.
     *
     * @param {string} [parameters.secondaryKey] Secondary key assiciated with the
     * policy.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AuthorizationPolicyResourceFormat>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, hubName: string, authorizationPolicyName: string, parameters: models.AuthorizationPolicyResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AuthorizationPolicyResourceFormat>>;

    /**
     * Creates an authorization policy or updates an existing authorization policy.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} authorizationPolicyName The name of the policy.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate
     * authorization policy operation.
     *
     * @param {array} parameters.permissions The permissions associated with the
     * policy.
     *
     * @param {string} [parameters.primaryKey] Primary key assiciated with the
     * policy.
     *
     * @param {string} [parameters.secondaryKey] Secondary key assiciated with the
     * policy.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AuthorizationPolicyResourceFormat} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AuthorizationPolicyResourceFormat} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AuthorizationPolicyResourceFormat} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, hubName: string, authorizationPolicyName: string, parameters: models.AuthorizationPolicyResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AuthorizationPolicyResourceFormat>;
    createOrUpdate(resourceGroupName: string, hubName: string, authorizationPolicyName: string, parameters: models.AuthorizationPolicyResourceFormat, callback: ServiceCallback<models.AuthorizationPolicyResourceFormat>): void;
    createOrUpdate(resourceGroupName: string, hubName: string, authorizationPolicyName: string, parameters: models.AuthorizationPolicyResourceFormat, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AuthorizationPolicyResourceFormat>): void;


    /**
     * Gets an authorization policy in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} authorizationPolicyName The name of the policy.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AuthorizationPolicyResourceFormat>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, hubName: string, authorizationPolicyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AuthorizationPolicyResourceFormat>>;

    /**
     * Gets an authorization policy in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} authorizationPolicyName The name of the policy.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AuthorizationPolicyResourceFormat} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AuthorizationPolicyResourceFormat} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AuthorizationPolicyResourceFormat} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, hubName: string, authorizationPolicyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AuthorizationPolicyResourceFormat>;
    get(resourceGroupName: string, hubName: string, authorizationPolicyName: string, callback: ServiceCallback<models.AuthorizationPolicyResourceFormat>): void;
    get(resourceGroupName: string, hubName: string, authorizationPolicyName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AuthorizationPolicyResourceFormat>): void;


    /**
     * Gets all the authorization policies in a specified hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AuthorizationPolicyListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHubWithHttpOperationResponse(resourceGroupName: string, hubName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AuthorizationPolicyListResult>>;

    /**
     * Gets all the authorization policies in a specified hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AuthorizationPolicyListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AuthorizationPolicyListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AuthorizationPolicyListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHub(resourceGroupName: string, hubName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AuthorizationPolicyListResult>;
    listByHub(resourceGroupName: string, hubName: string, callback: ServiceCallback<models.AuthorizationPolicyListResult>): void;
    listByHub(resourceGroupName: string, hubName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AuthorizationPolicyListResult>): void;


    /**
     * Regenerates the primary policy key of the specified authorization policy.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} authorizationPolicyName The name of the policy.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AuthorizationPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    regeneratePrimaryKeyWithHttpOperationResponse(resourceGroupName: string, hubName: string, authorizationPolicyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AuthorizationPolicy>>;

    /**
     * Regenerates the primary policy key of the specified authorization policy.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} authorizationPolicyName The name of the policy.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AuthorizationPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AuthorizationPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AuthorizationPolicy} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    regeneratePrimaryKey(resourceGroupName: string, hubName: string, authorizationPolicyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AuthorizationPolicy>;
    regeneratePrimaryKey(resourceGroupName: string, hubName: string, authorizationPolicyName: string, callback: ServiceCallback<models.AuthorizationPolicy>): void;
    regeneratePrimaryKey(resourceGroupName: string, hubName: string, authorizationPolicyName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AuthorizationPolicy>): void;


    /**
     * Regenerates the secondary policy key of the specified authorization policy.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} authorizationPolicyName The name of the policy.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AuthorizationPolicy>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    regenerateSecondaryKeyWithHttpOperationResponse(resourceGroupName: string, hubName: string, authorizationPolicyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AuthorizationPolicy>>;

    /**
     * Regenerates the secondary policy key of the specified authorization policy.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} authorizationPolicyName The name of the policy.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AuthorizationPolicy} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AuthorizationPolicy} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AuthorizationPolicy} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    regenerateSecondaryKey(resourceGroupName: string, hubName: string, authorizationPolicyName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AuthorizationPolicy>;
    regenerateSecondaryKey(resourceGroupName: string, hubName: string, authorizationPolicyName: string, callback: ServiceCallback<models.AuthorizationPolicy>): void;
    regenerateSecondaryKey(resourceGroupName: string, hubName: string, authorizationPolicyName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AuthorizationPolicy>): void;


    /**
     * Gets all the authorization policies in a specified hub.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<AuthorizationPolicyListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHubNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.AuthorizationPolicyListResult>>;

    /**
     * Gets all the authorization policies in a specified hub.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {AuthorizationPolicyListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {AuthorizationPolicyListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link AuthorizationPolicyListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHubNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.AuthorizationPolicyListResult>;
    listByHubNext(nextPageLink: string, callback: ServiceCallback<models.AuthorizationPolicyListResult>): void;
    listByHubNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AuthorizationPolicyListResult>): void;
}

/**
 * @class
 * Connectors
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the CustomerInsightsManagementClient.
 */
export interface Connectors {


    /**
     * Creates a connector or updates an existing connector in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} connectorName The name of the connector.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate
     * Connector operation.
     *
     * @param {string} [parameters.connectorName] Name of the connector.
     *
     * @param {string} parameters.connectorType Type of connector. Possible values
     * include: 'None', 'CRM', 'AzureBlob', 'Salesforce', 'ExchangeOnline',
     * 'Outbound'
     *
     * @param {string} [parameters.displayName] Display name of the connector.
     *
     * @param {string} [parameters.description] Description of the connector.
     *
     * @param {object} parameters.connectorProperties The connector properties.
     *
     * @param {boolean} [parameters.isInternal] If this is an internal connector.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectorResourceFormat>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, hubName: string, connectorName: string, parameters: models.ConnectorResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectorResourceFormat>>;

    /**
     * Creates a connector or updates an existing connector in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} connectorName The name of the connector.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate
     * Connector operation.
     *
     * @param {string} [parameters.connectorName] Name of the connector.
     *
     * @param {string} parameters.connectorType Type of connector. Possible values
     * include: 'None', 'CRM', 'AzureBlob', 'Salesforce', 'ExchangeOnline',
     * 'Outbound'
     *
     * @param {string} [parameters.displayName] Display name of the connector.
     *
     * @param {string} [parameters.description] Description of the connector.
     *
     * @param {object} parameters.connectorProperties The connector properties.
     *
     * @param {boolean} [parameters.isInternal] If this is an internal connector.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectorResourceFormat} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectorResourceFormat} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectorResourceFormat} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, hubName: string, connectorName: string, parameters: models.ConnectorResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectorResourceFormat>;
    createOrUpdate(resourceGroupName: string, hubName: string, connectorName: string, parameters: models.ConnectorResourceFormat, callback: ServiceCallback<models.ConnectorResourceFormat>): void;
    createOrUpdate(resourceGroupName: string, hubName: string, connectorName: string, parameters: models.ConnectorResourceFormat, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectorResourceFormat>): void;


    /**
     * Gets a connector in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} connectorName The name of the connector.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectorResourceFormat>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, hubName: string, connectorName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectorResourceFormat>>;

    /**
     * Gets a connector in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} connectorName The name of the connector.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectorResourceFormat} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectorResourceFormat} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectorResourceFormat} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, hubName: string, connectorName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectorResourceFormat>;
    get(resourceGroupName: string, hubName: string, connectorName: string, callback: ServiceCallback<models.ConnectorResourceFormat>): void;
    get(resourceGroupName: string, hubName: string, connectorName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectorResourceFormat>): void;


    /**
     * Deletes a connector in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} connectorName The name of the connector.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, hubName: string, connectorName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a connector in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} connectorName The name of the connector.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, hubName: string, connectorName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, hubName: string, connectorName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, hubName: string, connectorName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets all the connectors in the specified hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectorListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHubWithHttpOperationResponse(resourceGroupName: string, hubName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectorListResult>>;

    /**
     * Gets all the connectors in the specified hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectorListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectorListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectorListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHub(resourceGroupName: string, hubName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectorListResult>;
    listByHub(resourceGroupName: string, hubName: string, callback: ServiceCallback<models.ConnectorListResult>): void;
    listByHub(resourceGroupName: string, hubName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectorListResult>): void;


    /**
     * Creates a connector or updates an existing connector in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} connectorName The name of the connector.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate
     * Connector operation.
     *
     * @param {string} [parameters.connectorName] Name of the connector.
     *
     * @param {string} parameters.connectorType Type of connector. Possible values
     * include: 'None', 'CRM', 'AzureBlob', 'Salesforce', 'ExchangeOnline',
     * 'Outbound'
     *
     * @param {string} [parameters.displayName] Display name of the connector.
     *
     * @param {string} [parameters.description] Description of the connector.
     *
     * @param {object} parameters.connectorProperties The connector properties.
     *
     * @param {boolean} [parameters.isInternal] If this is an internal connector.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectorResourceFormat>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, hubName: string, connectorName: string, parameters: models.ConnectorResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectorResourceFormat>>;

    /**
     * Creates a connector or updates an existing connector in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} connectorName The name of the connector.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate
     * Connector operation.
     *
     * @param {string} [parameters.connectorName] Name of the connector.
     *
     * @param {string} parameters.connectorType Type of connector. Possible values
     * include: 'None', 'CRM', 'AzureBlob', 'Salesforce', 'ExchangeOnline',
     * 'Outbound'
     *
     * @param {string} [parameters.displayName] Display name of the connector.
     *
     * @param {string} [parameters.description] Description of the connector.
     *
     * @param {object} parameters.connectorProperties The connector properties.
     *
     * @param {boolean} [parameters.isInternal] If this is an internal connector.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectorResourceFormat} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectorResourceFormat} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectorResourceFormat} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, connectorName: string, parameters: models.ConnectorResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectorResourceFormat>;
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, connectorName: string, parameters: models.ConnectorResourceFormat, callback: ServiceCallback<models.ConnectorResourceFormat>): void;
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, connectorName: string, parameters: models.ConnectorResourceFormat, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectorResourceFormat>): void;


    /**
     * Deletes a connector in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} connectorName The name of the connector.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, hubName: string, connectorName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a connector in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} connectorName The name of the connector.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, hubName: string, connectorName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, hubName: string, connectorName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, hubName: string, connectorName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets all the connectors in the specified hub.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectorListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHubNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectorListResult>>;

    /**
     * Gets all the connectors in the specified hub.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectorListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectorListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectorListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHubNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectorListResult>;
    listByHubNext(nextPageLink: string, callback: ServiceCallback<models.ConnectorListResult>): void;
    listByHubNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectorListResult>): void;
}

/**
 * @class
 * ConnectorMappings
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the CustomerInsightsManagementClient.
 */
export interface ConnectorMappings {


    /**
     * Creates a connector mapping or updates an existing connector mapping in the
     * connector.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} connectorName The name of the connector.
     *
     * @param {string} mappingName The name of the connector mapping.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate
     * Connector Mapping operation.
     *
     * @param {string} [parameters.connectorType] Type of connector. Possible
     * values include: 'None', 'CRM', 'AzureBlob', 'Salesforce', 'ExchangeOnline',
     * 'Outbound'
     *
     * @param {string} parameters.entityType Defines which entity type the file
     * should map to. Possible values include: 'None', 'Profile', 'Interaction',
     * 'Relationship'
     *
     * @param {string} parameters.entityTypeName The mapping entity name.
     *
     * @param {string} [parameters.displayName] Display name for the connector
     * mapping.
     *
     * @param {string} [parameters.description] The description of the connector
     * mapping.
     *
     * @param {object} parameters.mappingProperties The properties of the mapping.
     *
     * @param {string} [parameters.mappingProperties.folderPath] The folder path
     * for the mapping.
     *
     * @param {string} [parameters.mappingProperties.fileFilter] The file filter
     * for the mapping.
     *
     * @param {boolean} [parameters.mappingProperties.hasHeader] If the file
     * contains a header or not.
     *
     * @param {object} parameters.mappingProperties.errorManagement The error
     * management setting for the mapping.
     *
     * @param {string}
     * parameters.mappingProperties.errorManagement.errorManagementType The type of
     * error management to use for the mapping. Possible values include:
     * 'RejectAndContinue', 'StopImport', 'RejectUntilLimit'
     *
     * @param {number} [parameters.mappingProperties.errorManagement.errorLimit]
     * The error limit allowed while importing data.
     *
     * @param {object} parameters.mappingProperties.format The format of mapping
     * property.
     *
     * @param {string} [parameters.mappingProperties.format.columnDelimiter] The
     * character that signifies a break between columns.
     *
     * @param {string} [parameters.mappingProperties.format.acceptLanguage] The
     * oData language.
     *
     * @param {string} [parameters.mappingProperties.format.quoteCharacter] Quote
     * character, used to indicate enquoted fields.
     *
     * @param {string} [parameters.mappingProperties.format.quoteEscapeCharacter]
     * Escape character for quotes, can be the same as the quoteCharacter.
     *
     * @param {string} [parameters.mappingProperties.format.arraySeparator]
     * Character separating array elements.
     *
     * @param {object} parameters.mappingProperties.availability The availability
     * of mapping property.
     *
     * @param {string} [parameters.mappingProperties.availability.frequency] The
     * frequency to update. Possible values include: 'Minute', 'Hour', 'Day',
     * 'Week', 'Month'
     *
     * @param {number} parameters.mappingProperties.availability.interval The
     * interval of the given frequency to use.
     *
     * @param {array} parameters.mappingProperties.structure Ingestion mapping
     * information at property level.
     *
     * @param {object} parameters.mappingProperties.completeOperation The operation
     * after import is done.
     *
     * @param {string}
     * [parameters.mappingProperties.completeOperation.completionOperationType] The
     * type of completion operation. Possible values include: 'DoNothing',
     * 'DeleteFile', 'MoveFile'
     *
     * @param {string}
     * [parameters.mappingProperties.completeOperation.destinationFolder] The
     * destination folder where files will be moved to once the import is done.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectorMappingResourceFormat>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, hubName: string, connectorName: string, mappingName: string, parameters: models.ConnectorMappingResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectorMappingResourceFormat>>;

    /**
     * Creates a connector mapping or updates an existing connector mapping in the
     * connector.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} connectorName The name of the connector.
     *
     * @param {string} mappingName The name of the connector mapping.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate
     * Connector Mapping operation.
     *
     * @param {string} [parameters.connectorType] Type of connector. Possible
     * values include: 'None', 'CRM', 'AzureBlob', 'Salesforce', 'ExchangeOnline',
     * 'Outbound'
     *
     * @param {string} parameters.entityType Defines which entity type the file
     * should map to. Possible values include: 'None', 'Profile', 'Interaction',
     * 'Relationship'
     *
     * @param {string} parameters.entityTypeName The mapping entity name.
     *
     * @param {string} [parameters.displayName] Display name for the connector
     * mapping.
     *
     * @param {string} [parameters.description] The description of the connector
     * mapping.
     *
     * @param {object} parameters.mappingProperties The properties of the mapping.
     *
     * @param {string} [parameters.mappingProperties.folderPath] The folder path
     * for the mapping.
     *
     * @param {string} [parameters.mappingProperties.fileFilter] The file filter
     * for the mapping.
     *
     * @param {boolean} [parameters.mappingProperties.hasHeader] If the file
     * contains a header or not.
     *
     * @param {object} parameters.mappingProperties.errorManagement The error
     * management setting for the mapping.
     *
     * @param {string}
     * parameters.mappingProperties.errorManagement.errorManagementType The type of
     * error management to use for the mapping. Possible values include:
     * 'RejectAndContinue', 'StopImport', 'RejectUntilLimit'
     *
     * @param {number} [parameters.mappingProperties.errorManagement.errorLimit]
     * The error limit allowed while importing data.
     *
     * @param {object} parameters.mappingProperties.format The format of mapping
     * property.
     *
     * @param {string} [parameters.mappingProperties.format.columnDelimiter] The
     * character that signifies a break between columns.
     *
     * @param {string} [parameters.mappingProperties.format.acceptLanguage] The
     * oData language.
     *
     * @param {string} [parameters.mappingProperties.format.quoteCharacter] Quote
     * character, used to indicate enquoted fields.
     *
     * @param {string} [parameters.mappingProperties.format.quoteEscapeCharacter]
     * Escape character for quotes, can be the same as the quoteCharacter.
     *
     * @param {string} [parameters.mappingProperties.format.arraySeparator]
     * Character separating array elements.
     *
     * @param {object} parameters.mappingProperties.availability The availability
     * of mapping property.
     *
     * @param {string} [parameters.mappingProperties.availability.frequency] The
     * frequency to update. Possible values include: 'Minute', 'Hour', 'Day',
     * 'Week', 'Month'
     *
     * @param {number} parameters.mappingProperties.availability.interval The
     * interval of the given frequency to use.
     *
     * @param {array} parameters.mappingProperties.structure Ingestion mapping
     * information at property level.
     *
     * @param {object} parameters.mappingProperties.completeOperation The operation
     * after import is done.
     *
     * @param {string}
     * [parameters.mappingProperties.completeOperation.completionOperationType] The
     * type of completion operation. Possible values include: 'DoNothing',
     * 'DeleteFile', 'MoveFile'
     *
     * @param {string}
     * [parameters.mappingProperties.completeOperation.destinationFolder] The
     * destination folder where files will be moved to once the import is done.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectorMappingResourceFormat} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectorMappingResourceFormat} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectorMappingResourceFormat} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, hubName: string, connectorName: string, mappingName: string, parameters: models.ConnectorMappingResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectorMappingResourceFormat>;
    createOrUpdate(resourceGroupName: string, hubName: string, connectorName: string, mappingName: string, parameters: models.ConnectorMappingResourceFormat, callback: ServiceCallback<models.ConnectorMappingResourceFormat>): void;
    createOrUpdate(resourceGroupName: string, hubName: string, connectorName: string, mappingName: string, parameters: models.ConnectorMappingResourceFormat, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectorMappingResourceFormat>): void;


    /**
     * Gets a connector mapping in the connector.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} connectorName The name of the connector.
     *
     * @param {string} mappingName The name of the connector mapping.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectorMappingResourceFormat>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, hubName: string, connectorName: string, mappingName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectorMappingResourceFormat>>;

    /**
     * Gets a connector mapping in the connector.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} connectorName The name of the connector.
     *
     * @param {string} mappingName The name of the connector mapping.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectorMappingResourceFormat} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectorMappingResourceFormat} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectorMappingResourceFormat} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, hubName: string, connectorName: string, mappingName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectorMappingResourceFormat>;
    get(resourceGroupName: string, hubName: string, connectorName: string, mappingName: string, callback: ServiceCallback<models.ConnectorMappingResourceFormat>): void;
    get(resourceGroupName: string, hubName: string, connectorName: string, mappingName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectorMappingResourceFormat>): void;


    /**
     * Deletes a connector mapping in the connector.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} connectorName The name of the connector.
     *
     * @param {string} mappingName The name of the connector mapping.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, hubName: string, connectorName: string, mappingName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a connector mapping in the connector.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} connectorName The name of the connector.
     *
     * @param {string} mappingName The name of the connector mapping.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, hubName: string, connectorName: string, mappingName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, hubName: string, connectorName: string, mappingName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, hubName: string, connectorName: string, mappingName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets all the connector mappings in the specified connector.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} connectorName The name of the connector.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectorMappingListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByConnectorWithHttpOperationResponse(resourceGroupName: string, hubName: string, connectorName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectorMappingListResult>>;

    /**
     * Gets all the connector mappings in the specified connector.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} connectorName The name of the connector.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectorMappingListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectorMappingListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectorMappingListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByConnector(resourceGroupName: string, hubName: string, connectorName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectorMappingListResult>;
    listByConnector(resourceGroupName: string, hubName: string, connectorName: string, callback: ServiceCallback<models.ConnectorMappingListResult>): void;
    listByConnector(resourceGroupName: string, hubName: string, connectorName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectorMappingListResult>): void;


    /**
     * Gets all the connector mappings in the specified connector.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ConnectorMappingListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByConnectorNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ConnectorMappingListResult>>;

    /**
     * Gets all the connector mappings in the specified connector.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ConnectorMappingListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ConnectorMappingListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ConnectorMappingListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByConnectorNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ConnectorMappingListResult>;
    listByConnectorNext(nextPageLink: string, callback: ServiceCallback<models.ConnectorMappingListResult>): void;
    listByConnectorNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ConnectorMappingListResult>): void;
}

/**
 * @class
 * Kpi
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the CustomerInsightsManagementClient.
 */
export interface Kpi {


    /**
     * Creates a KPI or updates an existing KPI in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} kpiName The name of the KPI.
     *
     * @param {object} parameters Parameters supplied to the create/update KPI
     * operation.
     *
     * @param {string} parameters.entityType The mapping entity type. Possible
     * values include: 'None', 'Profile', 'Interaction', 'Relationship'
     *
     * @param {string} parameters.entityTypeName The mapping entity name.
     *
     * @param {object} [parameters.displayName] Localized display name for the KPI.
     *
     * @param {object} [parameters.description] Localized description for the KPI.
     *
     * @param {string} parameters.calculationWindow The calculation window.
     * Possible values include: 'Lifetime', 'Hour', 'Day', 'Week', 'Month'
     *
     * @param {string} [parameters.calculationWindowFieldName] Name of calculation
     * window field.
     *
     * @param {string} parameters.functionProperty The computation function for the
     * KPI. Possible values include: 'Sum', 'Avg', 'Min', 'Max', 'Last', 'Count',
     * 'None', 'CountDistinct'
     *
     * @param {string} parameters.expression The computation expression for the
     * KPI.
     *
     * @param {string} [parameters.unit] The unit of measurement for the KPI.
     *
     * @param {string} [parameters.filter] The filter expression for the KPI.
     *
     * @param {array} [parameters.groupBy] the group by properties for the KPI.
     *
     * @param {object} [parameters.thresHolds] The KPI thresholds.
     *
     * @param {number} parameters.thresHolds.lowerLimit The lower threshold limit.
     *
     * @param {number} parameters.thresHolds.upperLimit The upper threshold limit.
     *
     * @param {boolean} parameters.thresHolds.increasingKpi Whether or not the KPI
     * is an increasing KPI.
     *
     * @param {array} [parameters.aliases] The aliases.
     *
     * @param {array} [parameters.extracts] The KPI extracts.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<KpiResourceFormat>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, hubName: string, kpiName: string, parameters: models.KpiResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.KpiResourceFormat>>;

    /**
     * Creates a KPI or updates an existing KPI in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} kpiName The name of the KPI.
     *
     * @param {object} parameters Parameters supplied to the create/update KPI
     * operation.
     *
     * @param {string} parameters.entityType The mapping entity type. Possible
     * values include: 'None', 'Profile', 'Interaction', 'Relationship'
     *
     * @param {string} parameters.entityTypeName The mapping entity name.
     *
     * @param {object} [parameters.displayName] Localized display name for the KPI.
     *
     * @param {object} [parameters.description] Localized description for the KPI.
     *
     * @param {string} parameters.calculationWindow The calculation window.
     * Possible values include: 'Lifetime', 'Hour', 'Day', 'Week', 'Month'
     *
     * @param {string} [parameters.calculationWindowFieldName] Name of calculation
     * window field.
     *
     * @param {string} parameters.functionProperty The computation function for the
     * KPI. Possible values include: 'Sum', 'Avg', 'Min', 'Max', 'Last', 'Count',
     * 'None', 'CountDistinct'
     *
     * @param {string} parameters.expression The computation expression for the
     * KPI.
     *
     * @param {string} [parameters.unit] The unit of measurement for the KPI.
     *
     * @param {string} [parameters.filter] The filter expression for the KPI.
     *
     * @param {array} [parameters.groupBy] the group by properties for the KPI.
     *
     * @param {object} [parameters.thresHolds] The KPI thresholds.
     *
     * @param {number} parameters.thresHolds.lowerLimit The lower threshold limit.
     *
     * @param {number} parameters.thresHolds.upperLimit The upper threshold limit.
     *
     * @param {boolean} parameters.thresHolds.increasingKpi Whether or not the KPI
     * is an increasing KPI.
     *
     * @param {array} [parameters.aliases] The aliases.
     *
     * @param {array} [parameters.extracts] The KPI extracts.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {KpiResourceFormat} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {KpiResourceFormat} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link KpiResourceFormat} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, hubName: string, kpiName: string, parameters: models.KpiResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.KpiResourceFormat>;
    createOrUpdate(resourceGroupName: string, hubName: string, kpiName: string, parameters: models.KpiResourceFormat, callback: ServiceCallback<models.KpiResourceFormat>): void;
    createOrUpdate(resourceGroupName: string, hubName: string, kpiName: string, parameters: models.KpiResourceFormat, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KpiResourceFormat>): void;


    /**
     * Gets a KPI in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} kpiName The name of the KPI.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<KpiResourceFormat>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, hubName: string, kpiName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.KpiResourceFormat>>;

    /**
     * Gets a KPI in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} kpiName The name of the KPI.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {KpiResourceFormat} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {KpiResourceFormat} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link KpiResourceFormat} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, hubName: string, kpiName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.KpiResourceFormat>;
    get(resourceGroupName: string, hubName: string, kpiName: string, callback: ServiceCallback<models.KpiResourceFormat>): void;
    get(resourceGroupName: string, hubName: string, kpiName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KpiResourceFormat>): void;


    /**
     * Deletes a KPI in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} kpiName The name of the KPI.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, hubName: string, kpiName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a KPI in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} kpiName The name of the KPI.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, hubName: string, kpiName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, hubName: string, kpiName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, hubName: string, kpiName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Reprocesses the Kpi values of the specified KPI.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} kpiName The name of the KPI.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    reprocessWithHttpOperationResponse(resourceGroupName: string, hubName: string, kpiName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Reprocesses the Kpi values of the specified KPI.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} kpiName The name of the KPI.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    reprocess(resourceGroupName: string, hubName: string, kpiName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    reprocess(resourceGroupName: string, hubName: string, kpiName: string, callback: ServiceCallback<void>): void;
    reprocess(resourceGroupName: string, hubName: string, kpiName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets all the KPIs in the specified hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<KpiListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHubWithHttpOperationResponse(resourceGroupName: string, hubName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.KpiListResult>>;

    /**
     * Gets all the KPIs in the specified hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {KpiListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {KpiListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link KpiListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHub(resourceGroupName: string, hubName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.KpiListResult>;
    listByHub(resourceGroupName: string, hubName: string, callback: ServiceCallback<models.KpiListResult>): void;
    listByHub(resourceGroupName: string, hubName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KpiListResult>): void;


    /**
     * Creates a KPI or updates an existing KPI in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} kpiName The name of the KPI.
     *
     * @param {object} parameters Parameters supplied to the create/update KPI
     * operation.
     *
     * @param {string} parameters.entityType The mapping entity type. Possible
     * values include: 'None', 'Profile', 'Interaction', 'Relationship'
     *
     * @param {string} parameters.entityTypeName The mapping entity name.
     *
     * @param {object} [parameters.displayName] Localized display name for the KPI.
     *
     * @param {object} [parameters.description] Localized description for the KPI.
     *
     * @param {string} parameters.calculationWindow The calculation window.
     * Possible values include: 'Lifetime', 'Hour', 'Day', 'Week', 'Month'
     *
     * @param {string} [parameters.calculationWindowFieldName] Name of calculation
     * window field.
     *
     * @param {string} parameters.functionProperty The computation function for the
     * KPI. Possible values include: 'Sum', 'Avg', 'Min', 'Max', 'Last', 'Count',
     * 'None', 'CountDistinct'
     *
     * @param {string} parameters.expression The computation expression for the
     * KPI.
     *
     * @param {string} [parameters.unit] The unit of measurement for the KPI.
     *
     * @param {string} [parameters.filter] The filter expression for the KPI.
     *
     * @param {array} [parameters.groupBy] the group by properties for the KPI.
     *
     * @param {object} [parameters.thresHolds] The KPI thresholds.
     *
     * @param {number} parameters.thresHolds.lowerLimit The lower threshold limit.
     *
     * @param {number} parameters.thresHolds.upperLimit The upper threshold limit.
     *
     * @param {boolean} parameters.thresHolds.increasingKpi Whether or not the KPI
     * is an increasing KPI.
     *
     * @param {array} [parameters.aliases] The aliases.
     *
     * @param {array} [parameters.extracts] The KPI extracts.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<KpiResourceFormat>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, hubName: string, kpiName: string, parameters: models.KpiResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.KpiResourceFormat>>;

    /**
     * Creates a KPI or updates an existing KPI in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} kpiName The name of the KPI.
     *
     * @param {object} parameters Parameters supplied to the create/update KPI
     * operation.
     *
     * @param {string} parameters.entityType The mapping entity type. Possible
     * values include: 'None', 'Profile', 'Interaction', 'Relationship'
     *
     * @param {string} parameters.entityTypeName The mapping entity name.
     *
     * @param {object} [parameters.displayName] Localized display name for the KPI.
     *
     * @param {object} [parameters.description] Localized description for the KPI.
     *
     * @param {string} parameters.calculationWindow The calculation window.
     * Possible values include: 'Lifetime', 'Hour', 'Day', 'Week', 'Month'
     *
     * @param {string} [parameters.calculationWindowFieldName] Name of calculation
     * window field.
     *
     * @param {string} parameters.functionProperty The computation function for the
     * KPI. Possible values include: 'Sum', 'Avg', 'Min', 'Max', 'Last', 'Count',
     * 'None', 'CountDistinct'
     *
     * @param {string} parameters.expression The computation expression for the
     * KPI.
     *
     * @param {string} [parameters.unit] The unit of measurement for the KPI.
     *
     * @param {string} [parameters.filter] The filter expression for the KPI.
     *
     * @param {array} [parameters.groupBy] the group by properties for the KPI.
     *
     * @param {object} [parameters.thresHolds] The KPI thresholds.
     *
     * @param {number} parameters.thresHolds.lowerLimit The lower threshold limit.
     *
     * @param {number} parameters.thresHolds.upperLimit The upper threshold limit.
     *
     * @param {boolean} parameters.thresHolds.increasingKpi Whether or not the KPI
     * is an increasing KPI.
     *
     * @param {array} [parameters.aliases] The aliases.
     *
     * @param {array} [parameters.extracts] The KPI extracts.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {KpiResourceFormat} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {KpiResourceFormat} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link KpiResourceFormat} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, kpiName: string, parameters: models.KpiResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.KpiResourceFormat>;
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, kpiName: string, parameters: models.KpiResourceFormat, callback: ServiceCallback<models.KpiResourceFormat>): void;
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, kpiName: string, parameters: models.KpiResourceFormat, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KpiResourceFormat>): void;


    /**
     * Deletes a KPI in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} kpiName The name of the KPI.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, hubName: string, kpiName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a KPI in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} kpiName The name of the KPI.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, hubName: string, kpiName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, hubName: string, kpiName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, hubName: string, kpiName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets all the KPIs in the specified hub.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<KpiListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHubNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.KpiListResult>>;

    /**
     * Gets all the KPIs in the specified hub.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {KpiListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {KpiListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link KpiListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHubNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.KpiListResult>;
    listByHubNext(nextPageLink: string, callback: ServiceCallback<models.KpiListResult>): void;
    listByHubNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.KpiListResult>): void;
}

/**
 * @class
 * WidgetTypes
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the CustomerInsightsManagementClient.
 */
export interface WidgetTypes {


    /**
     * Gets all available widget types in the specified hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WidgetTypeListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHubWithHttpOperationResponse(resourceGroupName: string, hubName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WidgetTypeListResult>>;

    /**
     * Gets all available widget types in the specified hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WidgetTypeListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WidgetTypeListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WidgetTypeListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHub(resourceGroupName: string, hubName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WidgetTypeListResult>;
    listByHub(resourceGroupName: string, hubName: string, callback: ServiceCallback<models.WidgetTypeListResult>): void;
    listByHub(resourceGroupName: string, hubName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WidgetTypeListResult>): void;


    /**
     * Gets a widget type in the specified hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} widgetTypeName The name of the widget type.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WidgetTypeResourceFormat>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, hubName: string, widgetTypeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WidgetTypeResourceFormat>>;

    /**
     * Gets a widget type in the specified hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} widgetTypeName The name of the widget type.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WidgetTypeResourceFormat} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WidgetTypeResourceFormat} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WidgetTypeResourceFormat} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, hubName: string, widgetTypeName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WidgetTypeResourceFormat>;
    get(resourceGroupName: string, hubName: string, widgetTypeName: string, callback: ServiceCallback<models.WidgetTypeResourceFormat>): void;
    get(resourceGroupName: string, hubName: string, widgetTypeName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WidgetTypeResourceFormat>): void;


    /**
     * Gets all available widget types in the specified hub.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<WidgetTypeListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHubNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.WidgetTypeListResult>>;

    /**
     * Gets all available widget types in the specified hub.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {WidgetTypeListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {WidgetTypeListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link WidgetTypeListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHubNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.WidgetTypeListResult>;
    listByHubNext(nextPageLink: string, callback: ServiceCallback<models.WidgetTypeListResult>): void;
    listByHubNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.WidgetTypeListResult>): void;
}

/**
 * @class
 * Views
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the CustomerInsightsManagementClient.
 */
export interface Views {


    /**
     * Gets all available views for given user in the specified hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} userId The user ID. Use * to retreive hub level views.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ViewListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHubWithHttpOperationResponse(resourceGroupName: string, hubName: string, userId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ViewListResult>>;

    /**
     * Gets all available views for given user in the specified hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} userId The user ID. Use * to retreive hub level views.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ViewListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ViewListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ViewListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHub(resourceGroupName: string, hubName: string, userId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ViewListResult>;
    listByHub(resourceGroupName: string, hubName: string, userId: string, callback: ServiceCallback<models.ViewListResult>): void;
    listByHub(resourceGroupName: string, hubName: string, userId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ViewListResult>): void;


    /**
     * Creates a view or updates an exisiting view in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} viewName The name of the view.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate View
     * operation.
     *
     * @param {string} [parameters.userId] the user ID.
     *
     * @param {object} [parameters.displayName] Localized display name for the
     * view.
     *
     * @param {string} parameters.definition View definition.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ViewResourceFormat>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, hubName: string, viewName: string, parameters: models.ViewResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ViewResourceFormat>>;

    /**
     * Creates a view or updates an exisiting view in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} viewName The name of the view.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate View
     * operation.
     *
     * @param {string} [parameters.userId] the user ID.
     *
     * @param {object} [parameters.displayName] Localized display name for the
     * view.
     *
     * @param {string} parameters.definition View definition.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ViewResourceFormat} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ViewResourceFormat} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ViewResourceFormat} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, hubName: string, viewName: string, parameters: models.ViewResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ViewResourceFormat>;
    createOrUpdate(resourceGroupName: string, hubName: string, viewName: string, parameters: models.ViewResourceFormat, callback: ServiceCallback<models.ViewResourceFormat>): void;
    createOrUpdate(resourceGroupName: string, hubName: string, viewName: string, parameters: models.ViewResourceFormat, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ViewResourceFormat>): void;


    /**
     * Gets a view in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} viewName The name of the view.
     *
     * @param {string} userId The user ID. Use * to retreive hub level view.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ViewResourceFormat>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, hubName: string, viewName: string, userId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ViewResourceFormat>>;

    /**
     * Gets a view in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} viewName The name of the view.
     *
     * @param {string} userId The user ID. Use * to retreive hub level view.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ViewResourceFormat} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ViewResourceFormat} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ViewResourceFormat} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, hubName: string, viewName: string, userId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ViewResourceFormat>;
    get(resourceGroupName: string, hubName: string, viewName: string, userId: string, callback: ServiceCallback<models.ViewResourceFormat>): void;
    get(resourceGroupName: string, hubName: string, viewName: string, userId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ViewResourceFormat>): void;


    /**
     * Deletes a view in the specified hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} viewName The name of the view.
     *
     * @param {string} userId The user ID. Use * to retreive hub level view.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, hubName: string, viewName: string, userId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a view in the specified hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} viewName The name of the view.
     *
     * @param {string} userId The user ID. Use * to retreive hub level view.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, hubName: string, viewName: string, userId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, hubName: string, viewName: string, userId: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, hubName: string, viewName: string, userId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets all available views for given user in the specified hub.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ViewListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHubNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ViewListResult>>;

    /**
     * Gets all available views for given user in the specified hub.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ViewListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ViewListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ViewListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHubNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ViewListResult>;
    listByHubNext(nextPageLink: string, callback: ServiceCallback<models.ViewListResult>): void;
    listByHubNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ViewListResult>): void;
}

/**
 * @class
 * Links
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the CustomerInsightsManagementClient.
 */
export interface Links {


    /**
     * Creates a link or updates an existing link in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} linkName The name of the link.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate Link
     * operation.
     *
     * @param {string} parameters.sourceEntityType Type of source entity. Possible
     * values include: 'None', 'Profile', 'Interaction', 'Relationship'
     *
     * @param {string} parameters.targetEntityType Type of target entity. Possible
     * values include: 'None', 'Profile', 'Interaction', 'Relationship'
     *
     * @param {string} parameters.sourceEntityTypeName Name of the source Entity
     * Type.
     *
     * @param {string} parameters.targetEntityTypeName Name of the target Entity
     * Type.
     *
     * @param {object} [parameters.displayName] Localized display name for the
     * Link.
     *
     * @param {object} [parameters.description] Localized descriptions for the
     * Link.
     *
     * @param {array} [parameters.mappings] The set of properties mappings between
     * the source and target Types.
     *
     * @param {array} parameters.participantPropertyReferences The properties that
     * represent the participating profile.
     *
     * @param {boolean} [parameters.referenceOnly] Indicating whether the link is
     * reference only link. This flag is ingored if the Mappings are defined. If
     * the mappings are not defined and it is set to true, links processing will
     * not create or update profiles.
     *
     * @param {string} [parameters.operationType] Determines whether this link is
     * supposed to create or delete instances if Link is NOT Reference Only.
     * Possible values include: 'Upsert', 'Delete'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LinkResourceFormat>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, hubName: string, linkName: string, parameters: models.LinkResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LinkResourceFormat>>;

    /**
     * Creates a link or updates an existing link in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} linkName The name of the link.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate Link
     * operation.
     *
     * @param {string} parameters.sourceEntityType Type of source entity. Possible
     * values include: 'None', 'Profile', 'Interaction', 'Relationship'
     *
     * @param {string} parameters.targetEntityType Type of target entity. Possible
     * values include: 'None', 'Profile', 'Interaction', 'Relationship'
     *
     * @param {string} parameters.sourceEntityTypeName Name of the source Entity
     * Type.
     *
     * @param {string} parameters.targetEntityTypeName Name of the target Entity
     * Type.
     *
     * @param {object} [parameters.displayName] Localized display name for the
     * Link.
     *
     * @param {object} [parameters.description] Localized descriptions for the
     * Link.
     *
     * @param {array} [parameters.mappings] The set of properties mappings between
     * the source and target Types.
     *
     * @param {array} parameters.participantPropertyReferences The properties that
     * represent the participating profile.
     *
     * @param {boolean} [parameters.referenceOnly] Indicating whether the link is
     * reference only link. This flag is ingored if the Mappings are defined. If
     * the mappings are not defined and it is set to true, links processing will
     * not create or update profiles.
     *
     * @param {string} [parameters.operationType] Determines whether this link is
     * supposed to create or delete instances if Link is NOT Reference Only.
     * Possible values include: 'Upsert', 'Delete'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LinkResourceFormat} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LinkResourceFormat} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LinkResourceFormat} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, hubName: string, linkName: string, parameters: models.LinkResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LinkResourceFormat>;
    createOrUpdate(resourceGroupName: string, hubName: string, linkName: string, parameters: models.LinkResourceFormat, callback: ServiceCallback<models.LinkResourceFormat>): void;
    createOrUpdate(resourceGroupName: string, hubName: string, linkName: string, parameters: models.LinkResourceFormat, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LinkResourceFormat>): void;


    /**
     * Gets a link in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} linkName The name of the link.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LinkResourceFormat>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, hubName: string, linkName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LinkResourceFormat>>;

    /**
     * Gets a link in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} linkName The name of the link.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LinkResourceFormat} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LinkResourceFormat} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LinkResourceFormat} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, hubName: string, linkName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LinkResourceFormat>;
    get(resourceGroupName: string, hubName: string, linkName: string, callback: ServiceCallback<models.LinkResourceFormat>): void;
    get(resourceGroupName: string, hubName: string, linkName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LinkResourceFormat>): void;


    /**
     * Deletes a link in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} linkName The name of the link.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, hubName: string, linkName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a link in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} linkName The name of the link.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, hubName: string, linkName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, hubName: string, linkName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, hubName: string, linkName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets all the links in the specified hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LinkListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHubWithHttpOperationResponse(resourceGroupName: string, hubName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LinkListResult>>;

    /**
     * Gets all the links in the specified hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LinkListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LinkListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LinkListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHub(resourceGroupName: string, hubName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LinkListResult>;
    listByHub(resourceGroupName: string, hubName: string, callback: ServiceCallback<models.LinkListResult>): void;
    listByHub(resourceGroupName: string, hubName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LinkListResult>): void;


    /**
     * Creates a link or updates an existing link in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} linkName The name of the link.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate Link
     * operation.
     *
     * @param {string} parameters.sourceEntityType Type of source entity. Possible
     * values include: 'None', 'Profile', 'Interaction', 'Relationship'
     *
     * @param {string} parameters.targetEntityType Type of target entity. Possible
     * values include: 'None', 'Profile', 'Interaction', 'Relationship'
     *
     * @param {string} parameters.sourceEntityTypeName Name of the source Entity
     * Type.
     *
     * @param {string} parameters.targetEntityTypeName Name of the target Entity
     * Type.
     *
     * @param {object} [parameters.displayName] Localized display name for the
     * Link.
     *
     * @param {object} [parameters.description] Localized descriptions for the
     * Link.
     *
     * @param {array} [parameters.mappings] The set of properties mappings between
     * the source and target Types.
     *
     * @param {array} parameters.participantPropertyReferences The properties that
     * represent the participating profile.
     *
     * @param {boolean} [parameters.referenceOnly] Indicating whether the link is
     * reference only link. This flag is ingored if the Mappings are defined. If
     * the mappings are not defined and it is set to true, links processing will
     * not create or update profiles.
     *
     * @param {string} [parameters.operationType] Determines whether this link is
     * supposed to create or delete instances if Link is NOT Reference Only.
     * Possible values include: 'Upsert', 'Delete'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LinkResourceFormat>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, hubName: string, linkName: string, parameters: models.LinkResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LinkResourceFormat>>;

    /**
     * Creates a link or updates an existing link in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} linkName The name of the link.
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate Link
     * operation.
     *
     * @param {string} parameters.sourceEntityType Type of source entity. Possible
     * values include: 'None', 'Profile', 'Interaction', 'Relationship'
     *
     * @param {string} parameters.targetEntityType Type of target entity. Possible
     * values include: 'None', 'Profile', 'Interaction', 'Relationship'
     *
     * @param {string} parameters.sourceEntityTypeName Name of the source Entity
     * Type.
     *
     * @param {string} parameters.targetEntityTypeName Name of the target Entity
     * Type.
     *
     * @param {object} [parameters.displayName] Localized display name for the
     * Link.
     *
     * @param {object} [parameters.description] Localized descriptions for the
     * Link.
     *
     * @param {array} [parameters.mappings] The set of properties mappings between
     * the source and target Types.
     *
     * @param {array} parameters.participantPropertyReferences The properties that
     * represent the participating profile.
     *
     * @param {boolean} [parameters.referenceOnly] Indicating whether the link is
     * reference only link. This flag is ingored if the Mappings are defined. If
     * the mappings are not defined and it is set to true, links processing will
     * not create or update profiles.
     *
     * @param {string} [parameters.operationType] Determines whether this link is
     * supposed to create or delete instances if Link is NOT Reference Only.
     * Possible values include: 'Upsert', 'Delete'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LinkResourceFormat} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LinkResourceFormat} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LinkResourceFormat} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, linkName: string, parameters: models.LinkResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LinkResourceFormat>;
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, linkName: string, parameters: models.LinkResourceFormat, callback: ServiceCallback<models.LinkResourceFormat>): void;
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, linkName: string, parameters: models.LinkResourceFormat, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LinkResourceFormat>): void;


    /**
     * Gets all the links in the specified hub.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<LinkListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHubNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LinkListResult>>;

    /**
     * Gets all the links in the specified hub.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {LinkListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {LinkListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link LinkListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHubNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.LinkListResult>;
    listByHubNext(nextPageLink: string, callback: ServiceCallback<models.LinkListResult>): void;
    listByHubNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LinkListResult>): void;
}

/**
 * @class
 * Roles
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the CustomerInsightsManagementClient.
 */
export interface Roles {


    /**
     * Gets all the roles for the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RoleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHubWithHttpOperationResponse(resourceGroupName: string, hubName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RoleListResult>>;

    /**
     * Gets all the roles for the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RoleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RoleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RoleListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHub(resourceGroupName: string, hubName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RoleListResult>;
    listByHub(resourceGroupName: string, hubName: string, callback: ServiceCallback<models.RoleListResult>): void;
    listByHub(resourceGroupName: string, hubName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleListResult>): void;


    /**
     * Gets all the roles for the hub.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RoleListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHubNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RoleListResult>>;

    /**
     * Gets all the roles for the hub.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RoleListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RoleListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RoleListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHubNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RoleListResult>;
    listByHubNext(nextPageLink: string, callback: ServiceCallback<models.RoleListResult>): void;
    listByHubNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleListResult>): void;
}

/**
 * @class
 * RoleAssignments
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the CustomerInsightsManagementClient.
 */
export interface RoleAssignments {


    /**
     * Gets all the role assignments for the specified hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RoleAssignmentListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHubWithHttpOperationResponse(resourceGroupName: string, hubName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RoleAssignmentListResult>>;

    /**
     * Gets all the role assignments for the specified hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RoleAssignmentListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RoleAssignmentListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RoleAssignmentListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHub(resourceGroupName: string, hubName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RoleAssignmentListResult>;
    listByHub(resourceGroupName: string, hubName: string, callback: ServiceCallback<models.RoleAssignmentListResult>): void;
    listByHub(resourceGroupName: string, hubName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleAssignmentListResult>): void;


    /**
     * Creates or updates a role assignment in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} assignmentName The assignment name
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate
     * RoleAssignment operation.
     *
     * @param {object} [parameters.displayName] Localized display names for the
     * metadata.
     *
     * @param {object} [parameters.description] Localized description for the
     * metadata.
     *
     * @param {string} parameters.role Type of roles. Possible values include:
     * 'Admin', 'Reader', 'ManageAdmin', 'ManageReader', 'DataAdmin', 'DataReader'
     *
     * @param {array} parameters.principals The principals being assigned to.
     *
     * @param {object} [parameters.profiles] Profiles set for the assignment.
     *
     * @param {object} [parameters.interactions] Interactions set for the
     * assignment.
     *
     * @param {object} [parameters.links] Links set for the assignment.
     *
     * @param {object} [parameters.kpis] Kpis set for the assignment.
     *
     * @param {object} [parameters.sasPolicies] Sas Policies set for the
     * assignment.
     *
     * @param {object} [parameters.connectors] Connectors set for the assignment.
     *
     * @param {object} [parameters.views] Views set for the assignment.
     *
     * @param {object} [parameters.relationshipLinks] The Role assignments set for
     * the relationship links.
     *
     * @param {object} [parameters.relationships] The Role assignments set for the
     * relationships.
     *
     * @param {object} [parameters.widgetTypes] Widget types set for the
     * assignment.
     *
     * @param {object} [parameters.roleAssignments] The Role assignments set for
     * the assignment.
     *
     * @param {object} [parameters.conflationPolicies] Widget types set for the
     * assignment.
     *
     * @param {object} [parameters.segments] The Role assignments set for the
     * assignment.
     *
     * @param {array} [parameters.segments.elements] The elements included in the
     * set.
     *
     * @param {array} [parameters.segments.exceptions] The elements that are not
     * included in the set, in case elements contains '*' indicating 'all'.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RoleAssignmentResourceFormat>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, hubName: string, assignmentName: string, parameters: models.RoleAssignmentResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RoleAssignmentResourceFormat>>;

    /**
     * Creates or updates a role assignment in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} assignmentName The assignment name
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate
     * RoleAssignment operation.
     *
     * @param {object} [parameters.displayName] Localized display names for the
     * metadata.
     *
     * @param {object} [parameters.description] Localized description for the
     * metadata.
     *
     * @param {string} parameters.role Type of roles. Possible values include:
     * 'Admin', 'Reader', 'ManageAdmin', 'ManageReader', 'DataAdmin', 'DataReader'
     *
     * @param {array} parameters.principals The principals being assigned to.
     *
     * @param {object} [parameters.profiles] Profiles set for the assignment.
     *
     * @param {object} [parameters.interactions] Interactions set for the
     * assignment.
     *
     * @param {object} [parameters.links] Links set for the assignment.
     *
     * @param {object} [parameters.kpis] Kpis set for the assignment.
     *
     * @param {object} [parameters.sasPolicies] Sas Policies set for the
     * assignment.
     *
     * @param {object} [parameters.connectors] Connectors set for the assignment.
     *
     * @param {object} [parameters.views] Views set for the assignment.
     *
     * @param {object} [parameters.relationshipLinks] The Role assignments set for
     * the relationship links.
     *
     * @param {object} [parameters.relationships] The Role assignments set for the
     * relationships.
     *
     * @param {object} [parameters.widgetTypes] Widget types set for the
     * assignment.
     *
     * @param {object} [parameters.roleAssignments] The Role assignments set for
     * the assignment.
     *
     * @param {object} [parameters.conflationPolicies] Widget types set for the
     * assignment.
     *
     * @param {object} [parameters.segments] The Role assignments set for the
     * assignment.
     *
     * @param {array} [parameters.segments.elements] The elements included in the
     * set.
     *
     * @param {array} [parameters.segments.exceptions] The elements that are not
     * included in the set, in case elements contains '*' indicating 'all'.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RoleAssignmentResourceFormat} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RoleAssignmentResourceFormat} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RoleAssignmentResourceFormat} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, hubName: string, assignmentName: string, parameters: models.RoleAssignmentResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RoleAssignmentResourceFormat>;
    createOrUpdate(resourceGroupName: string, hubName: string, assignmentName: string, parameters: models.RoleAssignmentResourceFormat, callback: ServiceCallback<models.RoleAssignmentResourceFormat>): void;
    createOrUpdate(resourceGroupName: string, hubName: string, assignmentName: string, parameters: models.RoleAssignmentResourceFormat, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleAssignmentResourceFormat>): void;


    /**
     * Gets the role assignment in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} assignmentName The name of the role assignment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RoleAssignmentResourceFormat>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, hubName: string, assignmentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RoleAssignmentResourceFormat>>;

    /**
     * Gets the role assignment in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} assignmentName The name of the role assignment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RoleAssignmentResourceFormat} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RoleAssignmentResourceFormat} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RoleAssignmentResourceFormat} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, hubName: string, assignmentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RoleAssignmentResourceFormat>;
    get(resourceGroupName: string, hubName: string, assignmentName: string, callback: ServiceCallback<models.RoleAssignmentResourceFormat>): void;
    get(resourceGroupName: string, hubName: string, assignmentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleAssignmentResourceFormat>): void;


    /**
     * Deletes the role assignment in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} assignmentName The name of the role assignment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, hubName: string, assignmentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes the role assignment in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} assignmentName The name of the role assignment.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, hubName: string, assignmentName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, hubName: string, assignmentName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, hubName: string, assignmentName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Creates or updates a role assignment in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} assignmentName The assignment name
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate
     * RoleAssignment operation.
     *
     * @param {object} [parameters.displayName] Localized display names for the
     * metadata.
     *
     * @param {object} [parameters.description] Localized description for the
     * metadata.
     *
     * @param {string} parameters.role Type of roles. Possible values include:
     * 'Admin', 'Reader', 'ManageAdmin', 'ManageReader', 'DataAdmin', 'DataReader'
     *
     * @param {array} parameters.principals The principals being assigned to.
     *
     * @param {object} [parameters.profiles] Profiles set for the assignment.
     *
     * @param {object} [parameters.interactions] Interactions set for the
     * assignment.
     *
     * @param {object} [parameters.links] Links set for the assignment.
     *
     * @param {object} [parameters.kpis] Kpis set for the assignment.
     *
     * @param {object} [parameters.sasPolicies] Sas Policies set for the
     * assignment.
     *
     * @param {object} [parameters.connectors] Connectors set for the assignment.
     *
     * @param {object} [parameters.views] Views set for the assignment.
     *
     * @param {object} [parameters.relationshipLinks] The Role assignments set for
     * the relationship links.
     *
     * @param {object} [parameters.relationships] The Role assignments set for the
     * relationships.
     *
     * @param {object} [parameters.widgetTypes] Widget types set for the
     * assignment.
     *
     * @param {object} [parameters.roleAssignments] The Role assignments set for
     * the assignment.
     *
     * @param {object} [parameters.conflationPolicies] Widget types set for the
     * assignment.
     *
     * @param {object} [parameters.segments] The Role assignments set for the
     * assignment.
     *
     * @param {array} [parameters.segments.elements] The elements included in the
     * set.
     *
     * @param {array} [parameters.segments.exceptions] The elements that are not
     * included in the set, in case elements contains '*' indicating 'all'.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RoleAssignmentResourceFormat>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, hubName: string, assignmentName: string, parameters: models.RoleAssignmentResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RoleAssignmentResourceFormat>>;

    /**
     * Creates or updates a role assignment in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} assignmentName The assignment name
     *
     * @param {object} parameters Parameters supplied to the CreateOrUpdate
     * RoleAssignment operation.
     *
     * @param {object} [parameters.displayName] Localized display names for the
     * metadata.
     *
     * @param {object} [parameters.description] Localized description for the
     * metadata.
     *
     * @param {string} parameters.role Type of roles. Possible values include:
     * 'Admin', 'Reader', 'ManageAdmin', 'ManageReader', 'DataAdmin', 'DataReader'
     *
     * @param {array} parameters.principals The principals being assigned to.
     *
     * @param {object} [parameters.profiles] Profiles set for the assignment.
     *
     * @param {object} [parameters.interactions] Interactions set for the
     * assignment.
     *
     * @param {object} [parameters.links] Links set for the assignment.
     *
     * @param {object} [parameters.kpis] Kpis set for the assignment.
     *
     * @param {object} [parameters.sasPolicies] Sas Policies set for the
     * assignment.
     *
     * @param {object} [parameters.connectors] Connectors set for the assignment.
     *
     * @param {object} [parameters.views] Views set for the assignment.
     *
     * @param {object} [parameters.relationshipLinks] The Role assignments set for
     * the relationship links.
     *
     * @param {object} [parameters.relationships] The Role assignments set for the
     * relationships.
     *
     * @param {object} [parameters.widgetTypes] Widget types set for the
     * assignment.
     *
     * @param {object} [parameters.roleAssignments] The Role assignments set for
     * the assignment.
     *
     * @param {object} [parameters.conflationPolicies] Widget types set for the
     * assignment.
     *
     * @param {object} [parameters.segments] The Role assignments set for the
     * assignment.
     *
     * @param {array} [parameters.segments.elements] The elements included in the
     * set.
     *
     * @param {array} [parameters.segments.exceptions] The elements that are not
     * included in the set, in case elements contains '*' indicating 'all'.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RoleAssignmentResourceFormat} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RoleAssignmentResourceFormat} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RoleAssignmentResourceFormat} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, assignmentName: string, parameters: models.RoleAssignmentResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RoleAssignmentResourceFormat>;
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, assignmentName: string, parameters: models.RoleAssignmentResourceFormat, callback: ServiceCallback<models.RoleAssignmentResourceFormat>): void;
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, assignmentName: string, parameters: models.RoleAssignmentResourceFormat, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleAssignmentResourceFormat>): void;


    /**
     * Gets all the role assignments for the specified hub.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RoleAssignmentListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHubNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RoleAssignmentListResult>>;

    /**
     * Gets all the role assignments for the specified hub.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RoleAssignmentListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RoleAssignmentListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RoleAssignmentListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHubNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RoleAssignmentListResult>;
    listByHubNext(nextPageLink: string, callback: ServiceCallback<models.RoleAssignmentListResult>): void;
    listByHubNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RoleAssignmentListResult>): void;
}

/**
 * @class
 * Images
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the CustomerInsightsManagementClient.
 */
export interface Images {


    /**
     * Gets entity type (profile or interaction) image upload URL.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {object} parameters Parameters supplied to the
     * GetUploadUrlForEntityType operation.
     *
     * @param {string} [parameters.entityType] Type of entity. Can be Profile or
     * Interaction.
     *
     * @param {string} [parameters.entityTypeName] Name of the entity type.
     *
     * @param {string} [parameters.relativePath] Relative path of the image.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ImageDefinition>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getUploadUrlForEntityTypeWithHttpOperationResponse(resourceGroupName: string, hubName: string, parameters: models.GetImageUploadUrlInput, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImageDefinition>>;

    /**
     * Gets entity type (profile or interaction) image upload URL.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {object} parameters Parameters supplied to the
     * GetUploadUrlForEntityType operation.
     *
     * @param {string} [parameters.entityType] Type of entity. Can be Profile or
     * Interaction.
     *
     * @param {string} [parameters.entityTypeName] Name of the entity type.
     *
     * @param {string} [parameters.relativePath] Relative path of the image.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ImageDefinition} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ImageDefinition} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ImageDefinition} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getUploadUrlForEntityType(resourceGroupName: string, hubName: string, parameters: models.GetImageUploadUrlInput, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ImageDefinition>;
    getUploadUrlForEntityType(resourceGroupName: string, hubName: string, parameters: models.GetImageUploadUrlInput, callback: ServiceCallback<models.ImageDefinition>): void;
    getUploadUrlForEntityType(resourceGroupName: string, hubName: string, parameters: models.GetImageUploadUrlInput, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImageDefinition>): void;


    /**
     * Gets data image upload URL.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {object} parameters Parameters supplied to the GetUploadUrlForData
     * operation.
     *
     * @param {string} [parameters.entityType] Type of entity. Can be Profile or
     * Interaction.
     *
     * @param {string} [parameters.entityTypeName] Name of the entity type.
     *
     * @param {string} [parameters.relativePath] Relative path of the image.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ImageDefinition>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getUploadUrlForDataWithHttpOperationResponse(resourceGroupName: string, hubName: string, parameters: models.GetImageUploadUrlInput, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImageDefinition>>;

    /**
     * Gets data image upload URL.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {object} parameters Parameters supplied to the GetUploadUrlForData
     * operation.
     *
     * @param {string} [parameters.entityType] Type of entity. Can be Profile or
     * Interaction.
     *
     * @param {string} [parameters.entityTypeName] Name of the entity type.
     *
     * @param {string} [parameters.relativePath] Relative path of the image.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ImageDefinition} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ImageDefinition} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ImageDefinition} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getUploadUrlForData(resourceGroupName: string, hubName: string, parameters: models.GetImageUploadUrlInput, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ImageDefinition>;
    getUploadUrlForData(resourceGroupName: string, hubName: string, parameters: models.GetImageUploadUrlInput, callback: ServiceCallback<models.ImageDefinition>): void;
    getUploadUrlForData(resourceGroupName: string, hubName: string, parameters: models.GetImageUploadUrlInput, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImageDefinition>): void;
}

/**
 * @class
 * Predictions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the CustomerInsightsManagementClient.
 */
export interface Predictions {


    /**
     * Creates a Prediction or updates an existing Prediction in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} predictionName The name of the Prediction.
     *
     * @param {object} parameters Parameters supplied to the create/update
     * Prediction operation.
     *
     * @param {object} [parameters.description] Description of the prediction.
     *
     * @param {object} [parameters.displayName] Display name of the prediction.
     *
     * @param {array} [parameters.involvedInteractionTypes] Interaction types
     * involved in the prediction.
     *
     * @param {array} [parameters.involvedKpiTypes] KPI types involved in the
     * prediction.
     *
     * @param {array} [parameters.involvedRelationships] Relationships involved in
     * the prediction.
     *
     * @param {string} parameters.negativeOutcomeExpression Negative outcome
     * expression.
     *
     * @param {string} parameters.positiveOutcomeExpression Positive outcome
     * expression.
     *
     * @param {string} parameters.primaryProfileType Primary profile type.
     *
     * @param {string} [parameters.predictionName] Name of the prediction.
     *
     * @param {string} parameters.scopeExpression Scope expression.
     *
     * @param {boolean} parameters.autoAnalyze Whether do auto analyze.
     *
     * @param {object} parameters.mappings Definition of the link mapping of
     * prediction.
     *
     * @param {string} [parameters.mappings.score] The score of the link mapping.
     *
     * @param {string} [parameters.mappings.grade] The grade of the link mapping.
     *
     * @param {string} [parameters.mappings.reason] The reason of the link mapping.
     *
     * @param {string} parameters.scoreLabel Score label.
     *
     * @param {array} [parameters.grades] The prediction grades.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PredictionResourceFormat>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createOrUpdateWithHttpOperationResponse(resourceGroupName: string, hubName: string, predictionName: string, parameters: models.PredictionResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PredictionResourceFormat>>;

    /**
     * Creates a Prediction or updates an existing Prediction in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} predictionName The name of the Prediction.
     *
     * @param {object} parameters Parameters supplied to the create/update
     * Prediction operation.
     *
     * @param {object} [parameters.description] Description of the prediction.
     *
     * @param {object} [parameters.displayName] Display name of the prediction.
     *
     * @param {array} [parameters.involvedInteractionTypes] Interaction types
     * involved in the prediction.
     *
     * @param {array} [parameters.involvedKpiTypes] KPI types involved in the
     * prediction.
     *
     * @param {array} [parameters.involvedRelationships] Relationships involved in
     * the prediction.
     *
     * @param {string} parameters.negativeOutcomeExpression Negative outcome
     * expression.
     *
     * @param {string} parameters.positiveOutcomeExpression Positive outcome
     * expression.
     *
     * @param {string} parameters.primaryProfileType Primary profile type.
     *
     * @param {string} [parameters.predictionName] Name of the prediction.
     *
     * @param {string} parameters.scopeExpression Scope expression.
     *
     * @param {boolean} parameters.autoAnalyze Whether do auto analyze.
     *
     * @param {object} parameters.mappings Definition of the link mapping of
     * prediction.
     *
     * @param {string} [parameters.mappings.score] The score of the link mapping.
     *
     * @param {string} [parameters.mappings.grade] The grade of the link mapping.
     *
     * @param {string} [parameters.mappings.reason] The reason of the link mapping.
     *
     * @param {string} parameters.scoreLabel Score label.
     *
     * @param {array} [parameters.grades] The prediction grades.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PredictionResourceFormat} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PredictionResourceFormat} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PredictionResourceFormat} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    createOrUpdate(resourceGroupName: string, hubName: string, predictionName: string, parameters: models.PredictionResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PredictionResourceFormat>;
    createOrUpdate(resourceGroupName: string, hubName: string, predictionName: string, parameters: models.PredictionResourceFormat, callback: ServiceCallback<models.PredictionResourceFormat>): void;
    createOrUpdate(resourceGroupName: string, hubName: string, predictionName: string, parameters: models.PredictionResourceFormat, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PredictionResourceFormat>): void;


    /**
     * Gets a Prediction in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} predictionName The name of the Prediction.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PredictionResourceFormat>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, hubName: string, predictionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PredictionResourceFormat>>;

    /**
     * Gets a Prediction in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} predictionName The name of the Prediction.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PredictionResourceFormat} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PredictionResourceFormat} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PredictionResourceFormat} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, hubName: string, predictionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PredictionResourceFormat>;
    get(resourceGroupName: string, hubName: string, predictionName: string, callback: ServiceCallback<models.PredictionResourceFormat>): void;
    get(resourceGroupName: string, hubName: string, predictionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PredictionResourceFormat>): void;


    /**
     * Deletes a Prediction in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} predictionName The name of the Prediction.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, hubName: string, predictionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a Prediction in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} predictionName The name of the Prediction.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, hubName: string, predictionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, hubName: string, predictionName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, hubName: string, predictionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets training results.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} predictionName The name of the Prediction.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PredictionTrainingResults>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getTrainingResultsWithHttpOperationResponse(resourceGroupName: string, hubName: string, predictionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PredictionTrainingResults>>;

    /**
     * Gets training results.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} predictionName The name of the Prediction.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PredictionTrainingResults} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PredictionTrainingResults} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PredictionTrainingResults} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getTrainingResults(resourceGroupName: string, hubName: string, predictionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PredictionTrainingResults>;
    getTrainingResults(resourceGroupName: string, hubName: string, predictionName: string, callback: ServiceCallback<models.PredictionTrainingResults>): void;
    getTrainingResults(resourceGroupName: string, hubName: string, predictionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PredictionTrainingResults>): void;


    /**
     * Gets model status of the prediction.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} predictionName The name of the Prediction.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PredictionModelStatus>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getModelStatusWithHttpOperationResponse(resourceGroupName: string, hubName: string, predictionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PredictionModelStatus>>;

    /**
     * Gets model status of the prediction.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} predictionName The name of the Prediction.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PredictionModelStatus} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PredictionModelStatus} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PredictionModelStatus} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getModelStatus(resourceGroupName: string, hubName: string, predictionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PredictionModelStatus>;
    getModelStatus(resourceGroupName: string, hubName: string, predictionName: string, callback: ServiceCallback<models.PredictionModelStatus>): void;
    getModelStatus(resourceGroupName: string, hubName: string, predictionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PredictionModelStatus>): void;


    /**
     * Creates or updates the model status of prediction.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} predictionName The name of the Prediction.
     *
     * @param {object} parameters Parameters supplied to the create/update
     * prediction model status operation.
     *
     * @param {string} parameters.status Prediction model life cycle.  When
     * prediction is in PendingModelConfirmation status, it is allowed to update
     * the status to PendingFeaturing or Active through API. Possible values
     * include: 'New', 'Provisioning', 'ProvisioningFailed', 'PendingDiscovering',
     * 'Discovering', 'PendingFeaturing', 'Featuring', 'FeaturingFailed',
     * 'PendingTraining', 'Training', 'TrainingFailed', 'Evaluating',
     * 'EvaluatingFailed', 'PendingModelConfirmation', 'Active', 'Deleted',
     * 'HumanIntervention', 'Failed'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    modelStatusWithHttpOperationResponse(resourceGroupName: string, hubName: string, predictionName: string, parameters: models.PredictionModelStatus, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Creates or updates the model status of prediction.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} predictionName The name of the Prediction.
     *
     * @param {object} parameters Parameters supplied to the create/update
     * prediction model status operation.
     *
     * @param {string} parameters.status Prediction model life cycle.  When
     * prediction is in PendingModelConfirmation status, it is allowed to update
     * the status to PendingFeaturing or Active through API. Possible values
     * include: 'New', 'Provisioning', 'ProvisioningFailed', 'PendingDiscovering',
     * 'Discovering', 'PendingFeaturing', 'Featuring', 'FeaturingFailed',
     * 'PendingTraining', 'Training', 'TrainingFailed', 'Evaluating',
     * 'EvaluatingFailed', 'PendingModelConfirmation', 'Active', 'Deleted',
     * 'HumanIntervention', 'Failed'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    modelStatus(resourceGroupName: string, hubName: string, predictionName: string, parameters: models.PredictionModelStatus, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    modelStatus(resourceGroupName: string, hubName: string, predictionName: string, parameters: models.PredictionModelStatus, callback: ServiceCallback<void>): void;
    modelStatus(resourceGroupName: string, hubName: string, predictionName: string, parameters: models.PredictionModelStatus, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets all the predictions in the specified hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PredictionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHubWithHttpOperationResponse(resourceGroupName: string, hubName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PredictionListResult>>;

    /**
     * Gets all the predictions in the specified hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PredictionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PredictionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PredictionListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHub(resourceGroupName: string, hubName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PredictionListResult>;
    listByHub(resourceGroupName: string, hubName: string, callback: ServiceCallback<models.PredictionListResult>): void;
    listByHub(resourceGroupName: string, hubName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PredictionListResult>): void;


    /**
     * Creates a Prediction or updates an existing Prediction in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} predictionName The name of the Prediction.
     *
     * @param {object} parameters Parameters supplied to the create/update
     * Prediction operation.
     *
     * @param {object} [parameters.description] Description of the prediction.
     *
     * @param {object} [parameters.displayName] Display name of the prediction.
     *
     * @param {array} [parameters.involvedInteractionTypes] Interaction types
     * involved in the prediction.
     *
     * @param {array} [parameters.involvedKpiTypes] KPI types involved in the
     * prediction.
     *
     * @param {array} [parameters.involvedRelationships] Relationships involved in
     * the prediction.
     *
     * @param {string} parameters.negativeOutcomeExpression Negative outcome
     * expression.
     *
     * @param {string} parameters.positiveOutcomeExpression Positive outcome
     * expression.
     *
     * @param {string} parameters.primaryProfileType Primary profile type.
     *
     * @param {string} [parameters.predictionName] Name of the prediction.
     *
     * @param {string} parameters.scopeExpression Scope expression.
     *
     * @param {boolean} parameters.autoAnalyze Whether do auto analyze.
     *
     * @param {object} parameters.mappings Definition of the link mapping of
     * prediction.
     *
     * @param {string} [parameters.mappings.score] The score of the link mapping.
     *
     * @param {string} [parameters.mappings.grade] The grade of the link mapping.
     *
     * @param {string} [parameters.mappings.reason] The reason of the link mapping.
     *
     * @param {string} parameters.scoreLabel Score label.
     *
     * @param {array} [parameters.grades] The prediction grades.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PredictionResourceFormat>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName: string, hubName: string, predictionName: string, parameters: models.PredictionResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PredictionResourceFormat>>;

    /**
     * Creates a Prediction or updates an existing Prediction in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} predictionName The name of the Prediction.
     *
     * @param {object} parameters Parameters supplied to the create/update
     * Prediction operation.
     *
     * @param {object} [parameters.description] Description of the prediction.
     *
     * @param {object} [parameters.displayName] Display name of the prediction.
     *
     * @param {array} [parameters.involvedInteractionTypes] Interaction types
     * involved in the prediction.
     *
     * @param {array} [parameters.involvedKpiTypes] KPI types involved in the
     * prediction.
     *
     * @param {array} [parameters.involvedRelationships] Relationships involved in
     * the prediction.
     *
     * @param {string} parameters.negativeOutcomeExpression Negative outcome
     * expression.
     *
     * @param {string} parameters.positiveOutcomeExpression Positive outcome
     * expression.
     *
     * @param {string} parameters.primaryProfileType Primary profile type.
     *
     * @param {string} [parameters.predictionName] Name of the prediction.
     *
     * @param {string} parameters.scopeExpression Scope expression.
     *
     * @param {boolean} parameters.autoAnalyze Whether do auto analyze.
     *
     * @param {object} parameters.mappings Definition of the link mapping of
     * prediction.
     *
     * @param {string} [parameters.mappings.score] The score of the link mapping.
     *
     * @param {string} [parameters.mappings.grade] The grade of the link mapping.
     *
     * @param {string} [parameters.mappings.reason] The reason of the link mapping.
     *
     * @param {string} parameters.scoreLabel Score label.
     *
     * @param {array} [parameters.grades] The prediction grades.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PredictionResourceFormat} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PredictionResourceFormat} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PredictionResourceFormat} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, predictionName: string, parameters: models.PredictionResourceFormat, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PredictionResourceFormat>;
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, predictionName: string, parameters: models.PredictionResourceFormat, callback: ServiceCallback<models.PredictionResourceFormat>): void;
    beginCreateOrUpdate(resourceGroupName: string, hubName: string, predictionName: string, parameters: models.PredictionResourceFormat, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PredictionResourceFormat>): void;


    /**
     * Deletes a Prediction in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} predictionName The name of the Prediction.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginDeleteMethodWithHttpOperationResponse(resourceGroupName: string, hubName: string, predictionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Deletes a Prediction in the hub.
     *
     * @param {string} resourceGroupName The name of the resource group.
     *
     * @param {string} hubName The name of the hub.
     *
     * @param {string} predictionName The name of the Prediction.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginDeleteMethod(resourceGroupName: string, hubName: string, predictionName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    beginDeleteMethod(resourceGroupName: string, hubName: string, predictionName: string, callback: ServiceCallback<void>): void;
    beginDeleteMethod(resourceGroupName: string, hubName: string, predictionName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * Gets all the predictions in the specified hub.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<PredictionListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByHubNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PredictionListResult>>;

    /**
     * Gets all the predictions in the specified hub.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {PredictionListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {PredictionListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link PredictionListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByHubNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.PredictionListResult>;
    listByHubNext(nextPageLink: string, callback: ServiceCallback<models.PredictionListResult>): void;
    listByHubNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PredictionListResult>): void;
}
