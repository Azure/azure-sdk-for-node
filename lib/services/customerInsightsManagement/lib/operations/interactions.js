/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const WebResource = msRest.WebResource;


/**
 * Creates an interaction or updates an existing interaction within a hub.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} hubName The name of the hub.
 *
 * @param {string} interactionName The name of the interaction.
 *
 * @param {object} parameters Parameters supplied to the CreateOrUpdate
 * Interaction operation.
 *
 * @param {object} [parameters.attributes] The attributes for the Type.
 *
 * @param {object} [parameters.description] Localized descriptions for the
 * property.
 *
 * @param {object} [parameters.displayName] Localized display names for the
 * property.
 *
 * @param {object} [parameters.localizedAttributes] Any custom localized
 * attributes for the Type.
 *
 * @param {string} [parameters.smallImage] Small Image associated with the
 * Property or EntityType.
 *
 * @param {string} [parameters.mediumImage] Medium Image associated with the
 * Property or EntityType.
 *
 * @param {string} [parameters.largeImage] Large Image associated with the
 * Property or EntityType.
 *
 * @param {string} [parameters.apiEntitySetName] The api entity set name. This
 * becomes the odata entity set name for the entity Type being refered in this
 * object.
 *
 * @param {string} [parameters.entityType] Type of entity. Possible values
 * include: 'None', 'Profile', 'Interaction', 'Relationship'
 *
 * @param {array} [parameters.fields] The properties of the Profile.
 *
 * @param {number} [parameters.instancesCount] The instance count.
 *
 * @param {string} [parameters.schemaItemTypeLink] The schema org link. This
 * helps ACI identify and suggest semantic models.
 *
 * @param {string} [parameters.timestampFieldName] The timestamp property name.
 * Represents the time when the interaction or profile update happened.
 *
 * @param {string} [parameters.typeName] The name of the entity.
 *
 * @param {array} [parameters.idPropertyNames] The id property names.
 * Properties which uniquely identify an interaction instance.
 *
 * @param {array} [parameters.participantProfiles] Profiles that participated
 * in the interaction.
 *
 * @param {string} [parameters.primaryParticipantProfilePropertyName] The
 * primary participant property name for an interaction ,This is used to
 * logically represent the agent of the interaction, Specify the participant
 * name here from ParticipantName.
 *
 * @param {boolean} [parameters.isActivity] An interaction can be tagged as an
 * activity only during create. This enables the interaction to be editable and
 * can enable merging of properties from multiple data sources based on
 * precedence, which is defined at a link level.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link InteractionResourceFormat} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _createOrUpdate(resourceGroupName, hubName, interactionName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginCreateOrUpdate(resourceGroupName, hubName, interactionName, parameters, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['InteractionResourceFormat']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}

/**
 * Gets information about the specified interaction.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} hubName The name of the hub.
 *
 * @param {string} interactionName The name of the interaction.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.localeCode] Locale of interaction to retrieve,
 * default is en-us.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link InteractionResourceFormat} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _get(resourceGroupName, hubName, interactionName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let localeCode = (options && options.localeCode !== undefined) ? options.localeCode : 'en-us';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (hubName === null || hubName === undefined || typeof hubName.valueOf() !== 'string') {
      throw new Error('hubName cannot be null or undefined and it must be of type string.');
    }
    if (interactionName === null || interactionName === undefined || typeof interactionName.valueOf() !== 'string') {
      throw new Error('interactionName cannot be null or undefined and it must be of type string.');
    }
    if (localeCode !== null && localeCode !== undefined && typeof localeCode.valueOf() !== 'string') {
      throw new Error('localeCode must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/interactions/{interactionName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{hubName}', encodeURIComponent(hubName));
  requestUrl = requestUrl.replace('{interactionName}', encodeURIComponent(interactionName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  if (localeCode !== null && localeCode !== undefined) {
    queryParameters.push('locale-code=' + encodeURIComponent(localeCode));
  }
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['InteractionResourceFormat']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets all interactions in the hub.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} hubName The name of the hub.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.localeCode] Locale of interaction to retrieve,
 * default is en-us.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link InteractionListResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listByHub(resourceGroupName, hubName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let localeCode = (options && options.localeCode !== undefined) ? options.localeCode : 'en-us';
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (hubName === null || hubName === undefined || typeof hubName.valueOf() !== 'string') {
      throw new Error('hubName cannot be null or undefined and it must be of type string.');
    }
    if (localeCode !== null && localeCode !== undefined && typeof localeCode.valueOf() !== 'string') {
      throw new Error('localeCode must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/interactions';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{hubName}', encodeURIComponent(hubName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  if (localeCode !== null && localeCode !== undefined) {
    queryParameters.push('locale-code=' + encodeURIComponent(localeCode));
  }
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['InteractionListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Suggests relationships to create relationship links.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} hubName The name of the hub.
 *
 * @param {string} interactionName The name of the interaction.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SuggestRelationshipLinksResponse} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _suggestRelationshipLinks(resourceGroupName, hubName, interactionName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (hubName === null || hubName === undefined || typeof hubName.valueOf() !== 'string') {
      throw new Error('hubName cannot be null or undefined and it must be of type string.');
    }
    if (interactionName === null || interactionName === undefined || typeof interactionName.valueOf() !== 'string') {
      throw new Error('interactionName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/interactions/{interactionName}/suggestRelationshipLinks';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{hubName}', encodeURIComponent(hubName));
  requestUrl = requestUrl.replace('{interactionName}', encodeURIComponent(interactionName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SuggestRelationshipLinksResponse']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Creates an interaction or updates an existing interaction within a hub.
 *
 * @param {string} resourceGroupName The name of the resource group.
 *
 * @param {string} hubName The name of the hub.
 *
 * @param {string} interactionName The name of the interaction.
 *
 * @param {object} parameters Parameters supplied to the CreateOrUpdate
 * Interaction operation.
 *
 * @param {object} [parameters.attributes] The attributes for the Type.
 *
 * @param {object} [parameters.description] Localized descriptions for the
 * property.
 *
 * @param {object} [parameters.displayName] Localized display names for the
 * property.
 *
 * @param {object} [parameters.localizedAttributes] Any custom localized
 * attributes for the Type.
 *
 * @param {string} [parameters.smallImage] Small Image associated with the
 * Property or EntityType.
 *
 * @param {string} [parameters.mediumImage] Medium Image associated with the
 * Property or EntityType.
 *
 * @param {string} [parameters.largeImage] Large Image associated with the
 * Property or EntityType.
 *
 * @param {string} [parameters.apiEntitySetName] The api entity set name. This
 * becomes the odata entity set name for the entity Type being refered in this
 * object.
 *
 * @param {string} [parameters.entityType] Type of entity. Possible values
 * include: 'None', 'Profile', 'Interaction', 'Relationship'
 *
 * @param {array} [parameters.fields] The properties of the Profile.
 *
 * @param {number} [parameters.instancesCount] The instance count.
 *
 * @param {string} [parameters.schemaItemTypeLink] The schema org link. This
 * helps ACI identify and suggest semantic models.
 *
 * @param {string} [parameters.timestampFieldName] The timestamp property name.
 * Represents the time when the interaction or profile update happened.
 *
 * @param {string} [parameters.typeName] The name of the entity.
 *
 * @param {array} [parameters.idPropertyNames] The id property names.
 * Properties which uniquely identify an interaction instance.
 *
 * @param {array} [parameters.participantProfiles] Profiles that participated
 * in the interaction.
 *
 * @param {string} [parameters.primaryParticipantProfilePropertyName] The
 * primary participant property name for an interaction ,This is used to
 * logically represent the agent of the interaction, Specify the participant
 * name here from ParticipantName.
 *
 * @param {boolean} [parameters.isActivity] An interaction can be tagged as an
 * activity only during create. This enables the interaction to be editable and
 * can enable merging of properties from multiple data sources based on
 * precedence, which is defined at a link level.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link InteractionResourceFormat} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginCreateOrUpdate(resourceGroupName, hubName, interactionName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (hubName === null || hubName === undefined || typeof hubName.valueOf() !== 'string') {
      throw new Error('hubName cannot be null or undefined and it must be of type string.');
    }
    if (interactionName === null || interactionName === undefined || typeof interactionName.valueOf() !== 'string') {
      throw new Error('interactionName cannot be null or undefined and it must be of type string.');
    }
    if (interactionName !== null && interactionName !== undefined) {
      if (interactionName.length > 128)
      {
        throw new Error('"interactionName" should satisfy the constraint - "MaxLength": 128');
      }
      if (interactionName.length < 1)
      {
        throw new Error('"interactionName" should satisfy the constraint - "MinLength": 1');
      }
      if (interactionName.match(/^[a-zA-Z][a-zA-Z0-9_]+$/) === null)
      {
        throw new Error('"interactionName" should satisfy the constraint - "Pattern": /^[a-zA-Z][a-zA-Z0-9_]+$/');
      }
    }
    if (parameters === null || parameters === undefined) {
      throw new Error('parameters cannot be null or undefined.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/interactions/{interactionName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{hubName}', encodeURIComponent(hubName));
  requestUrl = requestUrl.replace('{interactionName}', encodeURIComponent(interactionName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (parameters !== null && parameters !== undefined) {
      let requestModelMapper = new client.models['InteractionResourceFormat']().mapper();
      requestModel = client.serialize(requestModelMapper, parameters, 'parameters');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(parameters, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['InteractionResourceFormat']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets all interactions in the hub.
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link InteractionListResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listByHubNext(nextPageLink, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
      throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let requestUrl = '{nextLink}';
  requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['InteractionListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a Interactions. */
class Interactions {
  /**
   * Create a Interactions.
   * @param {CustomerInsightsManagementClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._createOrUpdate = _createOrUpdate;
    this._get = _get;
    this._listByHub = _listByHub;
    this._suggestRelationshipLinks = _suggestRelationshipLinks;
    this._beginCreateOrUpdate = _beginCreateOrUpdate;
    this._listByHubNext = _listByHubNext;
  }

  /**
   * Creates an interaction or updates an existing interaction within a hub.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} hubName The name of the hub.
   *
   * @param {string} interactionName The name of the interaction.
   *
   * @param {object} parameters Parameters supplied to the CreateOrUpdate
   * Interaction operation.
   *
   * @param {object} [parameters.attributes] The attributes for the Type.
   *
   * @param {object} [parameters.description] Localized descriptions for the
   * property.
   *
   * @param {object} [parameters.displayName] Localized display names for the
   * property.
   *
   * @param {object} [parameters.localizedAttributes] Any custom localized
   * attributes for the Type.
   *
   * @param {string} [parameters.smallImage] Small Image associated with the
   * Property or EntityType.
   *
   * @param {string} [parameters.mediumImage] Medium Image associated with the
   * Property or EntityType.
   *
   * @param {string} [parameters.largeImage] Large Image associated with the
   * Property or EntityType.
   *
   * @param {string} [parameters.apiEntitySetName] The api entity set name. This
   * becomes the odata entity set name for the entity Type being refered in this
   * object.
   *
   * @param {string} [parameters.entityType] Type of entity. Possible values
   * include: 'None', 'Profile', 'Interaction', 'Relationship'
   *
   * @param {array} [parameters.fields] The properties of the Profile.
   *
   * @param {number} [parameters.instancesCount] The instance count.
   *
   * @param {string} [parameters.schemaItemTypeLink] The schema org link. This
   * helps ACI identify and suggest semantic models.
   *
   * @param {string} [parameters.timestampFieldName] The timestamp property name.
   * Represents the time when the interaction or profile update happened.
   *
   * @param {string} [parameters.typeName] The name of the entity.
   *
   * @param {array} [parameters.idPropertyNames] The id property names.
   * Properties which uniquely identify an interaction instance.
   *
   * @param {array} [parameters.participantProfiles] Profiles that participated
   * in the interaction.
   *
   * @param {string} [parameters.primaryParticipantProfilePropertyName] The
   * primary participant property name for an interaction ,This is used to
   * logically represent the agent of the interaction, Specify the participant
   * name here from ParticipantName.
   *
   * @param {boolean} [parameters.isActivity] An interaction can be tagged as an
   * activity only during create. This enables the interaction to be editable and
   * can enable merging of properties from multiple data sources based on
   * precedence, which is defined at a link level.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<InteractionResourceFormat>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createOrUpdateWithHttpOperationResponse(resourceGroupName, hubName, interactionName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._createOrUpdate(resourceGroupName, hubName, interactionName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Creates an interaction or updates an existing interaction within a hub.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} hubName The name of the hub.
   *
   * @param {string} interactionName The name of the interaction.
   *
   * @param {object} parameters Parameters supplied to the CreateOrUpdate
   * Interaction operation.
   *
   * @param {object} [parameters.attributes] The attributes for the Type.
   *
   * @param {object} [parameters.description] Localized descriptions for the
   * property.
   *
   * @param {object} [parameters.displayName] Localized display names for the
   * property.
   *
   * @param {object} [parameters.localizedAttributes] Any custom localized
   * attributes for the Type.
   *
   * @param {string} [parameters.smallImage] Small Image associated with the
   * Property or EntityType.
   *
   * @param {string} [parameters.mediumImage] Medium Image associated with the
   * Property or EntityType.
   *
   * @param {string} [parameters.largeImage] Large Image associated with the
   * Property or EntityType.
   *
   * @param {string} [parameters.apiEntitySetName] The api entity set name. This
   * becomes the odata entity set name for the entity Type being refered in this
   * object.
   *
   * @param {string} [parameters.entityType] Type of entity. Possible values
   * include: 'None', 'Profile', 'Interaction', 'Relationship'
   *
   * @param {array} [parameters.fields] The properties of the Profile.
   *
   * @param {number} [parameters.instancesCount] The instance count.
   *
   * @param {string} [parameters.schemaItemTypeLink] The schema org link. This
   * helps ACI identify and suggest semantic models.
   *
   * @param {string} [parameters.timestampFieldName] The timestamp property name.
   * Represents the time when the interaction or profile update happened.
   *
   * @param {string} [parameters.typeName] The name of the entity.
   *
   * @param {array} [parameters.idPropertyNames] The id property names.
   * Properties which uniquely identify an interaction instance.
   *
   * @param {array} [parameters.participantProfiles] Profiles that participated
   * in the interaction.
   *
   * @param {string} [parameters.primaryParticipantProfilePropertyName] The
   * primary participant property name for an interaction ,This is used to
   * logically represent the agent of the interaction, Specify the participant
   * name here from ParticipantName.
   *
   * @param {boolean} [parameters.isActivity] An interaction can be tagged as an
   * activity only during create. This enables the interaction to be editable and
   * can enable merging of properties from multiple data sources based on
   * precedence, which is defined at a link level.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {InteractionResourceFormat} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link InteractionResourceFormat} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdate(resourceGroupName, hubName, interactionName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._createOrUpdate(resourceGroupName, hubName, interactionName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._createOrUpdate(resourceGroupName, hubName, interactionName, parameters, options, optionalCallback);
    }
  }

  /**
   * Gets information about the specified interaction.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} hubName The name of the hub.
   *
   * @param {string} interactionName The name of the interaction.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.localeCode] Locale of interaction to retrieve,
   * default is en-us.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<InteractionResourceFormat>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWithHttpOperationResponse(resourceGroupName, hubName, interactionName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._get(resourceGroupName, hubName, interactionName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets information about the specified interaction.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} hubName The name of the hub.
   *
   * @param {string} interactionName The name of the interaction.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.localeCode] Locale of interaction to retrieve,
   * default is en-us.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {InteractionResourceFormat} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link InteractionResourceFormat} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  get(resourceGroupName, hubName, interactionName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._get(resourceGroupName, hubName, interactionName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._get(resourceGroupName, hubName, interactionName, options, optionalCallback);
    }
  }

  /**
   * Gets all interactions in the hub.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} hubName The name of the hub.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.localeCode] Locale of interaction to retrieve,
   * default is en-us.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<InteractionListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listByHubWithHttpOperationResponse(resourceGroupName, hubName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listByHub(resourceGroupName, hubName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets all interactions in the hub.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} hubName The name of the hub.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.localeCode] Locale of interaction to retrieve,
   * default is en-us.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {InteractionListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link InteractionListResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listByHub(resourceGroupName, hubName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listByHub(resourceGroupName, hubName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listByHub(resourceGroupName, hubName, options, optionalCallback);
    }
  }

  /**
   * Suggests relationships to create relationship links.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} hubName The name of the hub.
   *
   * @param {string} interactionName The name of the interaction.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SuggestRelationshipLinksResponse>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  suggestRelationshipLinksWithHttpOperationResponse(resourceGroupName, hubName, interactionName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._suggestRelationshipLinks(resourceGroupName, hubName, interactionName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Suggests relationships to create relationship links.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} hubName The name of the hub.
   *
   * @param {string} interactionName The name of the interaction.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SuggestRelationshipLinksResponse} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SuggestRelationshipLinksResponse} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  suggestRelationshipLinks(resourceGroupName, hubName, interactionName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._suggestRelationshipLinks(resourceGroupName, hubName, interactionName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._suggestRelationshipLinks(resourceGroupName, hubName, interactionName, options, optionalCallback);
    }
  }

  /**
   * Creates an interaction or updates an existing interaction within a hub.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} hubName The name of the hub.
   *
   * @param {string} interactionName The name of the interaction.
   *
   * @param {object} parameters Parameters supplied to the CreateOrUpdate
   * Interaction operation.
   *
   * @param {object} [parameters.attributes] The attributes for the Type.
   *
   * @param {object} [parameters.description] Localized descriptions for the
   * property.
   *
   * @param {object} [parameters.displayName] Localized display names for the
   * property.
   *
   * @param {object} [parameters.localizedAttributes] Any custom localized
   * attributes for the Type.
   *
   * @param {string} [parameters.smallImage] Small Image associated with the
   * Property or EntityType.
   *
   * @param {string} [parameters.mediumImage] Medium Image associated with the
   * Property or EntityType.
   *
   * @param {string} [parameters.largeImage] Large Image associated with the
   * Property or EntityType.
   *
   * @param {string} [parameters.apiEntitySetName] The api entity set name. This
   * becomes the odata entity set name for the entity Type being refered in this
   * object.
   *
   * @param {string} [parameters.entityType] Type of entity. Possible values
   * include: 'None', 'Profile', 'Interaction', 'Relationship'
   *
   * @param {array} [parameters.fields] The properties of the Profile.
   *
   * @param {number} [parameters.instancesCount] The instance count.
   *
   * @param {string} [parameters.schemaItemTypeLink] The schema org link. This
   * helps ACI identify and suggest semantic models.
   *
   * @param {string} [parameters.timestampFieldName] The timestamp property name.
   * Represents the time when the interaction or profile update happened.
   *
   * @param {string} [parameters.typeName] The name of the entity.
   *
   * @param {array} [parameters.idPropertyNames] The id property names.
   * Properties which uniquely identify an interaction instance.
   *
   * @param {array} [parameters.participantProfiles] Profiles that participated
   * in the interaction.
   *
   * @param {string} [parameters.primaryParticipantProfilePropertyName] The
   * primary participant property name for an interaction ,This is used to
   * logically represent the agent of the interaction, Specify the participant
   * name here from ParticipantName.
   *
   * @param {boolean} [parameters.isActivity] An interaction can be tagged as an
   * activity only during create. This enables the interaction to be editable and
   * can enable merging of properties from multiple data sources based on
   * precedence, which is defined at a link level.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<InteractionResourceFormat>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, hubName, interactionName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginCreateOrUpdate(resourceGroupName, hubName, interactionName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Creates an interaction or updates an existing interaction within a hub.
   *
   * @param {string} resourceGroupName The name of the resource group.
   *
   * @param {string} hubName The name of the hub.
   *
   * @param {string} interactionName The name of the interaction.
   *
   * @param {object} parameters Parameters supplied to the CreateOrUpdate
   * Interaction operation.
   *
   * @param {object} [parameters.attributes] The attributes for the Type.
   *
   * @param {object} [parameters.description] Localized descriptions for the
   * property.
   *
   * @param {object} [parameters.displayName] Localized display names for the
   * property.
   *
   * @param {object} [parameters.localizedAttributes] Any custom localized
   * attributes for the Type.
   *
   * @param {string} [parameters.smallImage] Small Image associated with the
   * Property or EntityType.
   *
   * @param {string} [parameters.mediumImage] Medium Image associated with the
   * Property or EntityType.
   *
   * @param {string} [parameters.largeImage] Large Image associated with the
   * Property or EntityType.
   *
   * @param {string} [parameters.apiEntitySetName] The api entity set name. This
   * becomes the odata entity set name for the entity Type being refered in this
   * object.
   *
   * @param {string} [parameters.entityType] Type of entity. Possible values
   * include: 'None', 'Profile', 'Interaction', 'Relationship'
   *
   * @param {array} [parameters.fields] The properties of the Profile.
   *
   * @param {number} [parameters.instancesCount] The instance count.
   *
   * @param {string} [parameters.schemaItemTypeLink] The schema org link. This
   * helps ACI identify and suggest semantic models.
   *
   * @param {string} [parameters.timestampFieldName] The timestamp property name.
   * Represents the time when the interaction or profile update happened.
   *
   * @param {string} [parameters.typeName] The name of the entity.
   *
   * @param {array} [parameters.idPropertyNames] The id property names.
   * Properties which uniquely identify an interaction instance.
   *
   * @param {array} [parameters.participantProfiles] Profiles that participated
   * in the interaction.
   *
   * @param {string} [parameters.primaryParticipantProfilePropertyName] The
   * primary participant property name for an interaction ,This is used to
   * logically represent the agent of the interaction, Specify the participant
   * name here from ParticipantName.
   *
   * @param {boolean} [parameters.isActivity] An interaction can be tagged as an
   * activity only during create. This enables the interaction to be editable and
   * can enable merging of properties from multiple data sources based on
   * precedence, which is defined at a link level.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {InteractionResourceFormat} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link InteractionResourceFormat} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginCreateOrUpdate(resourceGroupName, hubName, interactionName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginCreateOrUpdate(resourceGroupName, hubName, interactionName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginCreateOrUpdate(resourceGroupName, hubName, interactionName, parameters, options, optionalCallback);
    }
  }

  /**
   * Gets all interactions in the hub.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<InteractionListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listByHubNextWithHttpOperationResponse(nextPageLink, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listByHubNext(nextPageLink, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets all interactions in the hub.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {InteractionListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link InteractionListResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listByHubNext(nextPageLink, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listByHubNext(nextPageLink, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listByHubNext(nextPageLink, options, optionalCallback);
    }
  }

}

module.exports = Interactions;
