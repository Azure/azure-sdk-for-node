/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Connector mapping property format.
 *
 */
class ConnectorMappingFormat {
  /**
   * Create a ConnectorMappingFormat.
   * @property {string} [columnDelimiter] The character that signifies a break
   * between columns.
   * @property {string} [acceptLanguage] The oData language.
   * @property {string} [quoteCharacter] Quote character, used to indicate
   * enquoted fields.
   * @property {string} [quoteEscapeCharacter] Escape character for quotes, can
   * be the same as the quoteCharacter.
   * @property {string} [arraySeparator] Character separating array elements.
   */
  constructor() {
  }

  /**
   * Defines the metadata of ConnectorMappingFormat
   *
   * @returns {object} metadata of ConnectorMappingFormat
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ConnectorMappingFormat',
      type: {
        name: 'Composite',
        className: 'ConnectorMappingFormat',
        modelProperties: {
          formatType: {
            required: true,
            isConstant: true,
            serializedName: 'formatType',
            defaultValue: 'TextFormat',
            type: {
              name: 'String'
            }
          },
          columnDelimiter: {
            required: false,
            serializedName: 'columnDelimiter',
            type: {
              name: 'String'
            }
          },
          acceptLanguage: {
            required: false,
            serializedName: 'acceptLanguage',
            type: {
              name: 'String'
            }
          },
          quoteCharacter: {
            required: false,
            serializedName: 'quoteCharacter',
            type: {
              name: 'String'
            }
          },
          quoteEscapeCharacter: {
            required: false,
            serializedName: 'quoteEscapeCharacter',
            type: {
              name: 'String'
            }
          },
          arraySeparator: {
            required: false,
            serializedName: 'arraySeparator',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ConnectorMappingFormat;
