/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The training results of the prediction.
 *
 */
class PredictionTrainingResults {
  /**
   * Create a PredictionTrainingResults.
   * @member {string} [tenantId] The hub name.
   * @member {string} [scoreName] Score name.
   * @member {object} [predictionDistribution] Prediction distribution.
   * @member {number} [predictionDistribution.totalPositives] Total positive in
   * the distribution.
   * @member {number} [predictionDistribution.totalNegatives] Total negatives
   * in the distribution.
   * @member {array} [predictionDistribution.distributions] Distributions of
   * the prediction.
   * @member {array} [canonicalProfiles] Canonical profiles.
   * @member {number} [primaryProfileInstanceCount] Instance count of the
   * primary profile.
   */
  constructor() {
  }

  /**
   * Defines the metadata of PredictionTrainingResults
   *
   * @returns {object} metadata of PredictionTrainingResults
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'PredictionTrainingResults',
      type: {
        name: 'Composite',
        className: 'PredictionTrainingResults',
        modelProperties: {
          tenantId: {
            required: false,
            readOnly: true,
            serializedName: 'tenantId',
            type: {
              name: 'String'
            }
          },
          scoreName: {
            required: false,
            readOnly: true,
            serializedName: 'scoreName',
            type: {
              name: 'String'
            }
          },
          predictionDistribution: {
            required: false,
            readOnly: true,
            serializedName: 'predictionDistribution',
            type: {
              name: 'Composite',
              className: 'PredictionDistributionDefinition'
            }
          },
          canonicalProfiles: {
            required: false,
            readOnly: true,
            serializedName: 'canonicalProfiles',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'CanonicalProfileDefinitionElementType',
                  type: {
                    name: 'Composite',
                    className: 'CanonicalProfileDefinition'
                  }
              }
            }
          },
          primaryProfileInstanceCount: {
            required: false,
            readOnly: true,
            serializedName: 'primaryProfileInstanceCount',
            type: {
              name: 'Number'
            }
          }
        }
      }
    };
  }
}

module.exports = PredictionTrainingResults;
