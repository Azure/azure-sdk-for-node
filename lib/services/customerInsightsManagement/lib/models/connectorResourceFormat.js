/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The connector resource format.
 *
 * @extends models['ProxyResource']
 */
class ConnectorResourceFormat extends models['ProxyResource'] {
  /**
   * Create a ConnectorResourceFormat.
   * @property {number} [connectorId] ID of the connector.
   * @property {string} [connectorName] Name of the connector.
   * @property {string} connectorType Type of connector. Possible values
   * include: 'None', 'CRM', 'AzureBlob', 'Salesforce', 'ExchangeOnline',
   * 'Outbound'
   * @property {string} [displayName] Display name of the connector.
   * @property {string} [description] Description of the connector.
   * @property {object} connectorProperties The connector properties.
   * @property {date} [created] The created time.
   * @property {date} [lastModified] The last modified time.
   * @property {string} [state] State of connector. Possible values include:
   * 'Creating', 'Created', 'Ready', 'Expiring', 'Deleting', 'Failed'
   * @property {string} [tenantId] The hub name.
   * @property {boolean} [isInternal] If this is an internal connector.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ConnectorResourceFormat
   *
   * @returns {object} metadata of ConnectorResourceFormat
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ConnectorResourceFormat',
      type: {
        name: 'Composite',
        className: 'ConnectorResourceFormat',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          connectorId: {
            required: false,
            readOnly: true,
            serializedName: 'properties.connectorId',
            type: {
              name: 'Number'
            }
          },
          connectorName: {
            required: false,
            serializedName: 'properties.connectorName',
            type: {
              name: 'String'
            }
          },
          connectorType: {
            required: true,
            serializedName: 'properties.connectorType',
            type: {
              name: 'String'
            }
          },
          displayName: {
            required: false,
            serializedName: 'properties.displayName',
            type: {
              name: 'String'
            }
          },
          description: {
            required: false,
            serializedName: 'properties.description',
            type: {
              name: 'String'
            }
          },
          connectorProperties: {
            required: true,
            serializedName: 'properties.connectorProperties',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'ObjectElementType',
                  type: {
                    name: 'Object'
                  }
              }
            }
          },
          created: {
            required: false,
            readOnly: true,
            serializedName: 'properties.created',
            type: {
              name: 'DateTime'
            }
          },
          lastModified: {
            required: false,
            readOnly: true,
            serializedName: 'properties.lastModified',
            type: {
              name: 'DateTime'
            }
          },
          state: {
            required: false,
            readOnly: true,
            serializedName: 'properties.state',
            type: {
              name: 'Enum',
              allowedValues: [ 'Creating', 'Created', 'Ready', 'Expiring', 'Deleting', 'Failed' ]
            }
          },
          tenantId: {
            required: false,
            readOnly: true,
            serializedName: 'properties.tenantId',
            type: {
              name: 'String'
            }
          },
          isInternal: {
            required: false,
            serializedName: 'properties.isInternal',
            type: {
              name: 'Boolean'
            }
          }
        }
      }
    };
  }
}

module.exports = ConnectorResourceFormat;
