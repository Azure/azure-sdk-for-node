/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The interaction resource format.
 *
 * @extends models['ProxyResource']
 */
class InteractionResourceFormat extends models['ProxyResource'] {
  /**
   * Create a InteractionResourceFormat.
   * @member {object} [attributes] The attributes for the Type.
   * @member {object} [description] Localized descriptions for the property.
   * @member {object} [displayName] Localized display names for the property.
   * @member {object} [localizedAttributes] Any custom localized attributes for
   * the Type.
   * @member {string} [smallImage] Small Image associated with the Property or
   * EntityType.
   * @member {string} [mediumImage] Medium Image associated with the Property
   * or EntityType.
   * @member {string} [largeImage] Large Image associated with the Property or
   * EntityType.
   * @member {string} [apiEntitySetName] The api entity set name. This becomes
   * the odata entity set name for the entity Type being refered in this
   * object.
   * @member {string} [entityType] Type of entity. Possible values include:
   * 'None', 'Profile', 'Interaction', 'Relationship'
   * @member {array} [fields] The properties of the Profile.
   * @member {number} [instancesCount] The instance count.
   * @member {date} [lastChangedUtc] The last changed time for the type
   * definition.
   * @member {string} [provisioningState] Provisioning state. Possible values
   * include: 'Provisioning', 'Succeeded', 'Expiring', 'Deleting',
   * 'HumanIntervention', 'Failed'
   * @member {string} [schemaItemTypeLink] The schema org link. This helps ACI
   * identify and suggest semantic models.
   * @member {string} [tenantId] The hub name.
   * @member {string} [timestampFieldName] The timestamp property name.
   * Represents the time when the interaction or profile update happened.
   * @member {string} [typeName] The name of the entity.
   * @member {array} [idPropertyNames] The id property names. Properties which
   * uniquely identify an interaction instance.
   * @member {array} [participantProfiles] Profiles that participated in the
   * interaction.
   * @member {string} [primaryParticipantProfilePropertyName] The primary
   * participant property name for an interaction ,This is used to logically
   * represent the agent of the interaction, Specify the participant name here
   * from ParticipantName.
   * @member {array} [dataSourcePrecedenceRules] This is specific to
   * interactions modeled as activities. Data sources are used to determine
   * where data is stored and also in precedence rules.
   * @member {string} [interactionResourceFormatName] The data source name
   * @member {string} [dataSourceType] The data source type. Possible values
   * include: 'Connector', 'LinkInteraction', 'SystemDefault'
   * @member {string} [status] The data source status. Possible values include:
   * 'None', 'Active', 'Deleted'
   * @member {number} [interactionResourceFormatId] The data source ID.
   * @member {string} [dataSourceReferenceId] The data source reference id.
   * @member {boolean} [isActivity] An interaction can be tagged as an activity
   * only during create. This enables the interaction to be editable and can
   * enable merging of properties from multiple data sources based on
   * precedence, which is defined at a link level.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of InteractionResourceFormat
   *
   * @returns {object} metadata of InteractionResourceFormat
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'InteractionResourceFormat',
      type: {
        name: 'Composite',
        className: 'InteractionResourceFormat',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          attributes: {
            required: false,
            serializedName: 'properties.attributes',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'ArrayElementType',
                  type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'StringElementType',
                        type: {
                          name: 'String'
                        }
                    }
                  }
              }
            }
          },
          description: {
            required: false,
            serializedName: 'properties.description',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          displayName: {
            required: false,
            serializedName: 'properties.displayName',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          localizedAttributes: {
            required: false,
            serializedName: 'properties.localizedAttributes',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'ObjectElementType',
                  type: {
                    name: 'Dictionary',
                    value: {
                        required: false,
                        serializedName: 'StringElementType',
                        type: {
                          name: 'String'
                        }
                    }
                  }
              }
            }
          },
          smallImage: {
            required: false,
            serializedName: 'properties.smallImage',
            type: {
              name: 'String'
            }
          },
          mediumImage: {
            required: false,
            serializedName: 'properties.mediumImage',
            type: {
              name: 'String'
            }
          },
          largeImage: {
            required: false,
            serializedName: 'properties.largeImage',
            type: {
              name: 'String'
            }
          },
          apiEntitySetName: {
            required: false,
            serializedName: 'properties.apiEntitySetName',
            type: {
              name: 'String'
            }
          },
          entityType: {
            required: false,
            serializedName: 'properties.entityType',
            type: {
              name: 'Enum',
              allowedValues: [ 'None', 'Profile', 'Interaction', 'Relationship' ]
            }
          },
          fields: {
            required: false,
            serializedName: 'properties.fields',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'PropertyDefinitionElementType',
                  type: {
                    name: 'Composite',
                    className: 'PropertyDefinition'
                  }
              }
            }
          },
          instancesCount: {
            required: false,
            serializedName: 'properties.instancesCount',
            type: {
              name: 'Number'
            }
          },
          lastChangedUtc: {
            required: false,
            readOnly: true,
            serializedName: 'properties.lastChangedUtc',
            type: {
              name: 'DateTime'
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          schemaItemTypeLink: {
            required: false,
            serializedName: 'properties.schemaItemTypeLink',
            type: {
              name: 'String'
            }
          },
          tenantId: {
            required: false,
            readOnly: true,
            serializedName: 'properties.tenantId',
            type: {
              name: 'String'
            }
          },
          timestampFieldName: {
            required: false,
            serializedName: 'properties.timestampFieldName',
            type: {
              name: 'String'
            }
          },
          typeName: {
            required: false,
            serializedName: 'properties.typeName',
            type: {
              name: 'String'
            }
          },
          idPropertyNames: {
            required: false,
            serializedName: 'properties.idPropertyNames',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          participantProfiles: {
            required: false,
            serializedName: 'properties.participantProfiles',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ParticipantElementType',
                  type: {
                    name: 'Composite',
                    className: 'Participant'
                  }
              }
            }
          },
          primaryParticipantProfilePropertyName: {
            required: false,
            serializedName: 'properties.primaryParticipantProfilePropertyName',
            type: {
              name: 'String'
            }
          },
          dataSourcePrecedenceRules: {
            required: false,
            readOnly: true,
            serializedName: 'properties.dataSourcePrecedenceRules',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'DataSourcePrecedenceElementType',
                  type: {
                    name: 'Composite',
                    className: 'DataSourcePrecedence'
                  }
              }
            }
          },
          interactionResourceFormatName: {
            required: false,
            readOnly: true,
            serializedName: 'properties.defaultDataSource.name',
            type: {
              name: 'String'
            }
          },
          dataSourceType: {
            required: false,
            readOnly: true,
            serializedName: 'properties.defaultDataSource.dataSourceType',
            type: {
              name: 'String'
            }
          },
          status: {
            required: false,
            readOnly: true,
            serializedName: 'properties.defaultDataSource.status',
            type: {
              name: 'String'
            }
          },
          interactionResourceFormatId: {
            required: false,
            readOnly: true,
            serializedName: 'properties.defaultDataSource.id',
            type: {
              name: 'Number'
            }
          },
          dataSourceReferenceId: {
            required: false,
            readOnly: true,
            serializedName: 'properties.defaultDataSource.dataSourceReferenceId',
            type: {
              name: 'String'
            }
          },
          isActivity: {
            required: false,
            serializedName: 'properties.isActivity',
            type: {
              name: 'Boolean'
            }
          }
        }
      }
    };
  }
}

module.exports = InteractionResourceFormat;
