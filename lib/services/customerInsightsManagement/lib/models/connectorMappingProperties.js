/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * The connector mapping properties.
 *
 */
class ConnectorMappingProperties {
  /**
   * Create a ConnectorMappingProperties.
   * @property {string} [folderPath] The folder path for the mapping.
   * @property {string} [fileFilter] The file filter for the mapping.
   * @property {boolean} [hasHeader] If the file contains a header or not.
   * @property {object} errorManagement The error management setting for the
   * mapping.
   * @property {string} [errorManagement.errorManagementType] The type of error
   * management to use for the mapping. Possible values include:
   * 'RejectAndContinue', 'StopImport', 'RejectUntilLimit'
   * @property {number} [errorManagement.errorLimit] The error limit allowed
   * while importing data.
   * @property {object} format The format of mapping property.
   * @property {string} [format.columnDelimiter] The character that signifies a
   * break between columns.
   * @property {string} [format.acceptLanguage] The oData language.
   * @property {string} [format.quoteCharacter] Quote character, used to
   * indicate enquoted fields.
   * @property {string} [format.quoteEscapeCharacter] Escape character for
   * quotes, can be the same as the quoteCharacter.
   * @property {string} [format.arraySeparator] Character separating array
   * elements.
   * @property {object} availability The availability of mapping property.
   * @property {string} [availability.frequency] The frequency to update.
   * Possible values include: 'Minute', 'Hour', 'Day', 'Week', 'Month'
   * @property {number} [availability.interval] The interval of the given
   * frequency to use.
   * @property {array} structure Ingestion mapping information at property
   * level.
   * @property {object} completeOperation The operation after import is done.
   * @property {string} [completeOperation.completionOperationType] The type of
   * completion operation. Possible values include: 'DoNothing', 'DeleteFile',
   * 'MoveFile'
   * @property {string} [completeOperation.destinationFolder] The destination
   * folder where files will be moved to once the import is done.
   */
  constructor() {
  }

  /**
   * Defines the metadata of ConnectorMappingProperties
   *
   * @returns {object} metadata of ConnectorMappingProperties
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ConnectorMappingProperties',
      type: {
        name: 'Composite',
        className: 'ConnectorMappingProperties',
        modelProperties: {
          folderPath: {
            required: false,
            serializedName: 'folderPath',
            type: {
              name: 'String'
            }
          },
          fileFilter: {
            required: false,
            serializedName: 'fileFilter',
            type: {
              name: 'String'
            }
          },
          hasHeader: {
            required: false,
            serializedName: 'hasHeader',
            type: {
              name: 'Boolean'
            }
          },
          errorManagement: {
            required: true,
            serializedName: 'errorManagement',
            type: {
              name: 'Composite',
              className: 'ConnectorMappingErrorManagement'
            }
          },
          format: {
            required: true,
            serializedName: 'format',
            defaultValue: {},
            type: {
              name: 'Composite',
              className: 'ConnectorMappingFormat'
            }
          },
          availability: {
            required: true,
            serializedName: 'availability',
            type: {
              name: 'Composite',
              className: 'ConnectorMappingAvailability'
            }
          },
          structure: {
            required: true,
            serializedName: 'structure',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ConnectorMappingStructureElementType',
                  type: {
                    name: 'Composite',
                    className: 'ConnectorMappingStructure'
                  }
              }
            }
          },
          completeOperation: {
            required: true,
            serializedName: 'completeOperation',
            type: {
              name: 'Composite',
              className: 'ConnectorMappingCompleteOperation'
            }
          }
        }
      }
    };
  }
}

module.exports = ConnectorMappingProperties;
