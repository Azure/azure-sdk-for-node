/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * The notification associated with a budget.
 *
 */
class Notification {
  /**
   * Create a Notification.
   * @property {boolean} enabled The notification is enabled or not.
   * @property {string} operator The comparison operator. Possible values
   * include: 'EqualTo', 'GreaterThan', 'GreaterThanOrEqualTo'
   * @property {number} threshold Threshold value associated with a
   * notification. Notification is sent when the cost exceeded the threshold.
   * It is always percent and has to be between 0 and 1000.
   * @property {array} contactEmails Email addresses to send the budget
   * notification to when the threshold is exceeded.
   * @property {array} [contactRoles] Contact roles to send the budget
   * notification to when the threshold is exceeded.
   * @property {array} [contactGroups] Action groups to send the budget
   * notification to when the threshold is exceeded.
   */
  constructor() {
  }

  /**
   * Defines the metadata of Notification
   *
   * @returns {object} metadata of Notification
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Notification',
      type: {
        name: 'Composite',
        className: 'Notification',
        modelProperties: {
          enabled: {
            required: true,
            serializedName: 'enabled',
            type: {
              name: 'Boolean'
            }
          },
          operator: {
            required: true,
            serializedName: 'operator',
            type: {
              name: 'String'
            }
          },
          threshold: {
            required: true,
            serializedName: 'threshold',
            type: {
              name: 'Number'
            }
          },
          contactEmails: {
            required: true,
            serializedName: 'contactEmails',
            constraints: {
              MaxItems: 50,
              MinItems: 1
            },
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          contactRoles: {
            required: false,
            serializedName: 'contactRoles',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          contactGroups: {
            required: false,
            serializedName: 'contactGroups',
            constraints: {
              MaxItems: 50,
              MinItems: 0
            },
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = Notification;
