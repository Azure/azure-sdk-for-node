/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError } from "ms-rest-azure";
import * as moment from "moment";

export {

  BaseResource,
  CloudError
};

/**
 * The properties of the meter detail.
 */
export interface MeterDetails {
  /**
   * The name of the meter, within the given meter category
   */
  readonly meterName?: string;
  /**
   * The category of the meter, for example, 'Cloud services', 'Networking', etc..
   */
  readonly meterCategory?: string;
  /**
   * The subcategory of the meter, for example, 'A6 Cloud services', 'ExpressRoute (IXP)', etc..
   */
  readonly meterSubCategory?: string;
  /**
   * The unit in which the meter consumption is charged, for example, 'Hours', 'GB', etc.
   */
  readonly unit?: string;
  /**
   * The location in which the Azure service is available.
   */
  readonly meterLocation?: string;
  /**
   * The total included quantity associated with the offer.
   */
  readonly totalIncludedQuantity?: number;
  /**
   * The pretax listing price.
   */
  readonly pretaxStandardRate?: number;
  /**
   * The name of the service.
   */
  readonly serviceName?: string;
  /**
   * The service tier.
   */
  readonly serviceTier?: string;
}

/**
 * The Resource model definition.
 */
export interface Resource extends BaseResource {
  /**
   * Resource Id.
   */
  readonly id?: string;
  /**
   * Resource name.
   */
  readonly name?: string;
  /**
   * Resource type.
   */
  readonly type?: string;
  /**
   * Resource tags.
   */
  readonly tags?: { [propertyName: string]: string };
}

/**
 * An usage detail resource.
 */
export interface UsageDetail extends Resource {
  /**
   * The id of the billing period resource that the usage belongs to.
   */
  readonly billingPeriodId?: string;
  /**
   * The id of the invoice resource that the usage belongs to.
   */
  readonly invoiceId?: string;
  /**
   * The start of the date time range covered by the usage detail.
   */
  readonly usageStart?: Date;
  /**
   * The end of the date time range covered by the usage detail.
   */
  readonly usageEnd?: Date;
  /**
   * The name of the resource instance that the usage is about.
   */
  readonly instanceName?: string;
  /**
   * The uri of the resource instance that the usage is about.
   */
  readonly instanceId?: string;
  /**
   * The location of the resource instance that the usage is about.
   */
  readonly instanceLocation?: string;
  /**
   * The ISO currency in which the meter is charged, for example, USD.
   */
  readonly currency?: string;
  /**
   * The quantity of usage.
   */
  readonly usageQuantity?: number;
  /**
   * The billable usage quantity.
   */
  readonly billableQuantity?: number;
  /**
   * The amount of cost before tax.
   */
  readonly pretaxCost?: number;
  /**
   * The estimated usage is subject to change.
   */
  readonly isEstimated?: boolean;
  /**
   * The meter id (GUID).
   */
  readonly meterId?: string;
  /**
   * The details about the meter. By default this is not populated, unless it's specified in
   * $expand.
   */
  readonly meterDetails?: MeterDetails;
  /**
   * Subscription guid.
   */
  readonly subscriptionGuid?: string;
  /**
   * Subscription name.
   */
  readonly subscriptionName?: string;
  /**
   * Account name.
   */
  readonly accountName?: string;
  /**
   * Department name.
   */
  readonly departmentName?: string;
  /**
   * Product name.
   */
  readonly product?: string;
  /**
   * Consumed service name.
   */
  readonly consumedService?: string;
  /**
   * The cost center of this department if it is a department and a costcenter exists
   */
  readonly costCenter?: string;
  /**
   * Part Number
   */
  readonly partNumber?: string;
  /**
   * Resource Guid
   */
  readonly resourceGuid?: string;
  /**
   * Offer Id
   */
  readonly offerId?: string;
  /**
   * Charges billed separately
   */
  readonly chargesBilledSeparately?: boolean;
  /**
   * Resource Location
   */
  readonly location?: string;
  /**
   * Additional details of this usage item. By default this is not populated, unless it's specified
   * in $expand.
   */
  readonly additionalProperties?: string;
}

/**
 * An marketplace resource.
 */
export interface Marketplace extends Resource {
  /**
   * The id of the billing period resource that the usage belongs to.
   */
  readonly billingPeriodId?: string;
  /**
   * The start of the date time range covered by the usage detail.
   */
  readonly usageStart?: Date;
  /**
   * The end of the date time range covered by the usage detail.
   */
  readonly usageEnd?: Date;
  /**
   * The marketplace resource rate.
   */
  readonly resourceRate?: number;
  /**
   * The type of offer.
   */
  readonly offerName?: string;
  /**
   * The name of resource group.
   */
  readonly resourceGroup?: string;
  /**
   * The order number.
   */
  readonly orderNumber?: string;
  /**
   * The name of the resource instance that the usage is about.
   */
  readonly instanceName?: string;
  /**
   * The uri of the resource instance that the usage is about.
   */
  readonly instanceId?: string;
  /**
   * The ISO currency in which the meter is charged, for example, USD.
   */
  readonly currency?: string;
  /**
   * The quantity of usage.
   */
  readonly consumedQuantity?: number;
  /**
   * The unit of measure.
   */
  readonly unitOfMeasure?: string;
  /**
   * The amount of cost before tax.
   */
  readonly pretaxCost?: number;
  /**
   * The estimated usage is subject to change.
   */
  readonly isEstimated?: boolean;
  /**
   * The meter id (GUID).
   */
  readonly meterId?: string;
  /**
   * Subscription guid.
   */
  readonly subscriptionGuid?: string;
  /**
   * Subscription name.
   */
  readonly subscriptionName?: string;
  /**
   * Account name.
   */
  readonly accountName?: string;
  /**
   * Department name.
   */
  readonly departmentName?: string;
  /**
   * Consumed service name.
   */
  readonly consumedService?: string;
  /**
   * The cost center of this department if it is a department and a costcenter exists
   */
  readonly costCenter?: string;
  /**
   * Additional details of this usage item. By default this is not populated, unless it's specified
   * in $expand.
   */
  readonly additionalProperties?: string;
  /**
   * The name of publisher.
   */
  readonly publisherName?: string;
  /**
   * The name of plan.
   */
  readonly planName?: string;
  /**
   * Flag indicating whether this is a recurring charge or not.
   */
  readonly isRecurringCharge?: boolean;
}

export interface BalancePropertiesNewPurchasesDetailsItem {
  /**
   * the name of new purchase.
  */
  readonly name?: string;
  /**
   * the value of new purchase.
  */
  readonly value?: number;
}

export interface BalancePropertiesAdjustmentDetailsItem {
  /**
   * the name of new adjustment.
  */
  readonly name?: string;
  /**
   * the value of new adjustment.
  */
  readonly value?: number;
}

/**
 * A balance resource.
*/
export interface Balance extends Resource {
  /**
   * The ISO currency in which the meter is charged, for example, USD.
  */
  readonly currency?: string;
  /**
   * The beginning balance for the billing period.
  */
  readonly beginningBalance?: number;
  /**
   * The ending balance for the billing period (for open periods this will be updated daily).
  */
  readonly endingBalance?: number;
  /**
   * Total new purchase amount.
  */
  readonly newPurchases?: number;
  /**
   * Total adjustment amount.
  */
  readonly adjustments?: number;
  /**
   * Total Commitment usage.
  */
  readonly utilized?: number;
  /**
   * Overage for Azure services.
  */
  readonly serviceOverage?: number;
  /**
   * Charges Billed separately.
  */
  readonly chargesBilledSeparately?: number;
  /**
   * serviceOverage + chargesBilledSeparately.
  */
  readonly totalOverage?: number;
  /**
   * Azure service commitment + total Overage.
  */
  readonly totalUsage?: number;
  /**
   * Total charges for Azure Marketplace.
  */
  readonly azureMarketplaceServiceCharges?: number;
  /**
   * The billing frequency. Possible values include: 'Month', 'Quarter', 'Year'
  */
  billingFrequency?: string;
  /**
   * Price is hidden or not.
  */
  readonly priceHidden?: boolean;
  /**
   * List of new purchases.
  */
  readonly newPurchasesDetails?: BalancePropertiesNewPurchasesDetailsItem[];
  /**
   * List of Adjustments (Promo credit, SIE credit etc.).
  */
  readonly adjustmentDetails?: BalancePropertiesAdjustmentDetailsItem[];
}

/**
 * reservation summary resource.
*/
export interface ReservationSummary extends Resource {
  /**
   * The reservation order ID is the identifier for a reservation purchase. Each reservation order
   * ID represents a single purchase transaction. A reservation order contains reservations. The
   * reservation order specifies the VM size and region for the reservations.
  */
  readonly reservationOrderId?: string;
  /**
   * The reservation ID is the identifier of a reservation within a reservation order. Each
   * reservation is the grouping for applying the benefit scope and also specifies the number of
   * instances to which the reservation benefit can be applied to.
  */
  readonly reservationId?: string;
  /**
   * This is the ARM Sku name. It can be used to join with the serviceType field in additional info
   * in usage records.
  */
  readonly skuName?: string;
  /**
   * This is the total hours reserved. E.g. if reservation for 1 instance was made on 1 PM, this
   * will be 11 hours for that day and 24 hours from subsequent days
  */
  readonly reservedHours?: number;
  /**
   * Data corresponding to the utilization record. If the grain of data is monthly, it will be
   * first day of month.
  */
  readonly usageDate?: Date;
  /**
   * Total used hours by the reservation
  */
  readonly usedHours?: number;
  /**
   * This is the minimum hourly utilization in the usage time (day or month). E.g. if usage record
   * corresponds to 12/10/2017 and on that for hour 4 and 5, utilization was 10%, this field will
   * return 10% for that day
  */
  readonly minUtilizationPercentage?: number;
  /**
   * This is average utilization for the entire time range. (day or month depending on the grain)
  */
  readonly avgUtilizationPercentage?: number;
  /**
   * This is the maximum hourly utilization in the usage time (day or month). E.g. if usage record
   * corresponds to 12/10/2017 and on that for hour 4 and 5, utilization was 100%, this field will
   * return 100% for that day.
  */
  readonly maxUtilizationPercentage?: number;
}

/**
 * reservation detail resource.
*/
export interface ReservationDetail extends Resource {
  /**
   * The reservation order ID is the identifier for a reservation purchase. Each reservation order
   * ID represents a single purchase transaction. A reservation order contains reservations. The
   * reservation order specifies the VM size and region for the reservations.
  */
  readonly reservationOrderId?: string;
  /**
   * The reservation ID is the identifier of a reservation within a reservation order. Each
   * reservation is the grouping for applying the benefit scope and also specifies the number of
   * instances to which the reservation benefit can be applied to.
  */
  readonly reservationId?: string;
  /**
   * This is the ARM Sku name. It can be used to join with the serviceType field in additional info
   * in usage records.
  */
  readonly skuName?: string;
  /**
   * This is the total hours reserved for the day. E.g. if reservation for 1 instance was made on 1
   * PM, this will be 11 hours for that day and 24 hours from subsequent days.
  */
  readonly reservedHours?: number;
  /**
   * The date on which consumption occurred.
  */
  readonly usageDate?: Date;
  /**
   * This is the total hours used by the instance.
  */
  readonly usedHours?: number;
  /**
   * This identifier is the name of the resource or the fully qualified Resource ID.
  */
  readonly instanceId?: string;
  /**
   * This is the total count of instances that are reserved for the reservationId.
  */
  readonly totalReservedQuantity?: number;
}

/**
 * Reservation recommendation resource.
*/
export interface ReservationRecommendation {
  /**
   * Resource Id.
  */
  readonly id?: string;
  /**
   * Resource name.
  */
  readonly name?: string;
  /**
   * Resource type.
  */
  readonly type?: string;
  /**
   * Resource tags.
  */
  readonly tags?: { [propertyName: string]: string };
  /**
   * Resource location
  */
  readonly location?: string;
  /**
   * Resource sku
  */
  readonly sku?: string;
  /**
   * The number of days of usage to look back for recommendation.
  */
  readonly lookBackPeriod?: string;
  /**
   * The meter id (GUID)
  */
  readonly meterId?: string;
  /**
   * RI recommendations in one or three year terms.
  */
  readonly term?: string;
  /**
   * The total amount of cost without reserved instances.
  */
  readonly costWithNoReservedInstances?: number;
  /**
   * Recommended quality for reserved instances.
  */
  readonly recommendedQuantity?: number;
  /**
   * The total amount of cost with reserved instances.
  */
  readonly totalCostWithReservedInstances?: number;
  /**
   * Total estimated savings with reserved instances.
  */
  readonly netSavings?: number;
  /**
   * The usage date for looking back.
  */
  readonly firstUsageDate?: Date;
  /**
   * Shared or single recommendation.
  */
  readonly scope?: string;
}

/**
 * The tag resource.
*/
export interface Tag {
  /**
   * Tag key.
  */
  key?: string;
}

/**
 * The Resource model definition.
*/
export interface ProxyResource extends BaseResource {
  /**
   * Resource Id.
  */
  readonly id?: string;
  /**
   * Resource name.
  */
  readonly name?: string;
  /**
   * Resource type.
  */
  readonly type?: string;
  /**
   * eTag of the resource. To handle concurrent update scenario, this field will be used to
   * determine whether the user is updating the latest version or not.
  */
  eTag?: string;
}

/**
 * A resource listing all tags.
*/
export interface TagsResult extends ProxyResource {
  /**
   * A list of Tag.
  */
  tags?: Tag[];
}

/**
 * The start and end date for a budget.
*/
export interface BudgetTimePeriod {
  /**
   * The start date for the budget.
  */
  startDate: Date;
  /**
   * The end date for the budget. If not provided, we default this to 10 years from the start date.
  */
  endDate?: Date;
}

/**
 * May be used to filter budgets by resource group, resource, or meter.
*/
export interface Filters {
  /**
   * The list of filters on resource groups, allowed at subscription level only.
  */
  resourceGroups?: string[];
  /**
   * The list of filters on resources.
  */
  resources?: string[];
  /**
   * The list of filters on meters (GUID), mandatory for budgets of usage category.
  */
  meters?: string[];
  /**
   * The dictionary of filters on tags.
  */
  tags?: { [propertyName: string]: string[] };
}

/**
 * The current amount of cost which is being tracked for a budget.
*/
export interface CurrentSpend {
  /**
   * The total amount of cost which is being tracked by the budget.
  */
  readonly amount?: number;
  /**
   * The unit of measure for the budget amount.
  */
  readonly unit?: string;
}

/**
 * The notification associated with a budget.
*/
export interface Notification {
  /**
   * The notification is enabled or not.
  */
  enabled: boolean;
  /**
   * The comparison operator. Possible values include: 'EqualTo', 'GreaterThan',
   * 'GreaterThanOrEqualTo'
  */
  operator: string;
  /**
   * Threshold value associated with a notification. Notification is sent when the cost exceeded
   * the threshold. It is always percent and has to be between 0 and 1000.
  */
  threshold: number;
  /**
   * Email addresses to send the budget notification to when the threshold is exceeded.
  */
  contactEmails: string[];
  /**
   * Contact roles to send the budget notification to when the threshold is exceeded.
  */
  contactRoles?: string[];
  /**
   * Action groups to send the budget notification to when the threshold is exceeded.
  */
  contactGroups?: string[];
}

/**
 * A budget resource.
*/
export interface Budget extends ProxyResource {
  /**
   * The category of the budget, whether the budget tracks cost or usage. Possible values include:
   * 'Cost', 'Usage'
  */
  category: string;
  /**
   * The total amount of cost to track with the budget
  */
  amount: number;
  /**
   * The time covered by a budget. Tracking of the amount will be reset based on the time grain.
   * Possible values include: 'Monthly', 'Quarterly', 'Annually'
  */
  timeGrain: string;
  /**
   * Has start and end date of the budget. The start date must be first of the month and should be
   * less than the end date. Budget start date must be on or after June 1, 2017. Future start date
   * should not be more than three months. Past start date should  be selected within the timegrain
   * period. There are no restrictions on the end date.
  */
  timePeriod: BudgetTimePeriod;
  /**
   * May be used to filter budgets by resource group, resource, or meter.
  */
  filters?: Filters;
  /**
   * The current amount of cost which is being tracked for a budget.
  */
  readonly currentSpend?: CurrentSpend;
  /**
   * Dictionary of notifications associated with the budget. Budget can have up to five
   * notifications.
  */
  notifications?: { [propertyName: string]: Notification };
}

/**
 * The properties of the price sheet.
*/
export interface PriceSheetProperties {
  /**
   * The id of the billing period resource that the usage belongs to.
  */
  readonly billingPeriodId?: string;
  /**
   * The meter id (GUID)
  */
  readonly meterId?: string;
  /**
   * The details about the meter. By default this is not populated, unless it's specified in
   * $expand.
  */
  readonly meterDetails?: MeterDetails;
  /**
   * Unit of measure
  */
  readonly unitOfMeasure?: string;
  /**
   * Included quality for an offer
  */
  readonly includedQuantity?: number;
  /**
   * Part Number
  */
  readonly partNumber?: string;
  /**
   * Unit Price
  */
  readonly unitPrice?: number;
  /**
   * Currency Code
  */
  readonly currencyCode?: string;
  /**
   * Offer Id
  */
  readonly offerId?: string;
}

/**
 * An pricesheet resource.
*/
export interface PriceSheetResult extends Resource {
  /**
   * Price sheet
  */
  readonly pricesheets?: PriceSheetProperties[];
  /**
   * The link (url) to the next page of results.
  */
  readonly nextLink?: string;
}

export interface ForecastPropertiesConfidenceLevelsItem {
  /**
   * The percentage level of the confidence
  */
  readonly percentage?: number;
  /**
   * The boundary of the percentage, values could be 'Upper' or 'Lower'. Possible values include:
   * 'Upper', 'Lower'
  */
  bound?: string;
  /**
   * The amount of forecast within the percentage level
  */
  readonly value?: number;
}

/**
 * A forecast resource.
*/
export interface Forecast extends Resource {
  /**
   * The usage date of the forecast.
  */
  readonly usageDate?: string;
  /**
   * The granularity of forecast. Possible values include: 'Daily', 'Monthly', 'Yearly'
  */
  grain?: string;
  /**
   * The amount of charge
  */
  readonly charge?: number;
  /**
   * The ISO currency in which the meter is charged, for example, USD.
  */
  readonly currency?: string;
  /**
   * The type of the charge. Could be actual or forecast. Possible values include: 'Actual',
   * 'Forecast'
  */
  chargeType?: string;
  /**
   * The details about the forecast confidence levels. This is populated only when chargeType is
   * Forecast.
  */
  readonly confidenceLevels?: ForecastPropertiesConfidenceLevelsItem[];
}

/**
 * A management group aggregated cost resource.
*/
export interface ManagementGroupAggregatedCostResult extends Resource {
  /**
   * The id of the billing period resource that the aggregated cost belongs to.
  */
  readonly billingPeriodId?: string;
  /**
   * The start of the date time range covered by aggregated cost.
  */
  readonly usageStart?: Date;
  /**
   * The end of the date time range covered by the aggregated cost.
  */
  readonly usageEnd?: Date;
  /**
   * Azure Charges.
  */
  readonly azureCharges?: number;
  /**
   * Marketplace Charges.
  */
  readonly marketplaceCharges?: number;
  /**
   * Charges Billed Separately.
  */
  readonly chargesBilledSeparately?: number;
  /**
   * The ISO currency in which the meter is charged, for example, USD.
  */
  readonly currency?: string;
  /**
   * Children of a management group
  */
  children?: ManagementGroupAggregatedCostResult[];
  /**
   * List of subscription Guids included in the calculation of aggregated cost
  */
  includedSubscriptions?: string[];
  /**
   * List of subscription Guids excluded from the calculation of aggregated cost
  */
  excludedSubscriptions?: string[];
}

/**
 * A charge summary resource.
*/
export interface ChargeSummary extends Resource {
  /**
   * The id of the billing period resource that the charge belongs to.
  */
  readonly billingPeriodId?: string;
  /**
   * Usage start date.
  */
  readonly usageStart?: string;
  /**
   * Usage end date.
  */
  readonly usageEnd?: string;
  /**
   * Azure Charges.
  */
  readonly azureCharges?: number;
  /**
   * Charges Billed separately.
  */
  readonly chargesBilledSeparately?: number;
  /**
   * Marketplace Charges.
  */
  readonly marketplaceCharges?: number;
  /**
   * Currency Code
  */
  readonly currency?: string;
}

/**
 * Result of listing charge summary.
*/
export interface ChargesListResult {
  /**
   * The list of charge summary
  */
  readonly value?: ChargeSummary[];
}

/**
 * The details of the error.
*/
export interface ErrorDetails {
  /**
   * Error code.
  */
  readonly code?: string;
  /**
   * Error message indicating why the operation failed.
  */
  readonly message?: string;
}

/**
 * Error response indicates that the service is not able to process the incoming request. The
 * reason is provided in the error message.
*/
export interface ErrorResponse {
  /**
   * The details of the error.
  */
  error?: ErrorDetails;
}

/**
 * The object that represents the operation.
*/
export interface OperationDisplay {
  /**
   * Service provider: Microsoft.Consumption.
  */
  readonly provider?: string;
  /**
   * Resource on which the operation is performed: UsageDetail, etc.
  */
  readonly resource?: string;
  /**
   * Operation type: Read, write, delete, etc.
  */
  readonly operation?: string;
}

/**
 * A Consumption REST API operation.
*/
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{operation}.
  */
  readonly name?: string;
  /**
   * The object that represents the operation.
  */
  display?: OperationDisplay;
}

/**
 * The Resource model definition.
*/
export interface ResourceAttributes {
  /**
   * Resource location
  */
  readonly location?: string;
  /**
   * Resource sku
  */
  readonly sku?: string;
}

/**
 * Additional parameters for list operation.
*/
export interface QueryOptions {
  /**
   * OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)
  */
  apply?: string;
}

/**
 * Result of listing usage details. It contains a list of available usage details in reverse
 * chronological order by billing period.
*/
export interface UsageDetailsListResult extends Array<UsageDetail> {
  /**
   * The link (url) to the next page of results.
  */
  readonly nextLink?: string;
}

/**
 * Result of listing marketplaces. It contains a list of available marketplaces in reverse
 * chronological order by billing period.
*/
export interface MarketplacesListResult extends Array<Marketplace> {
  /**
   * The link (url) to the next page of results.
  */
  readonly nextLink?: string;
}

/**
 * Result of listing budgets. It contains a list of available budgets in the scope provided.
*/
export interface BudgetsListResult extends Array<Budget> {
  /**
   * The link (url) to the next page of results.
  */
  readonly nextLink?: string;
}

/**
 * Result of listing reservation summaries.
*/
export interface ReservationSummariesListResult extends Array<ReservationSummary> {
  /**
   * The link (url) to the next page of results.
  */
  readonly nextLink?: string;
}

/**
 * Result of listing reservation details.
*/
export interface ReservationDetailsListResult extends Array<ReservationDetail> {
  /**
   * The link (url) to the next page of results.
  */
  readonly nextLink?: string;
}

/**
 * Result of listing reservation recommendations.
*/
export interface ReservationRecommendationsListResult extends Array<ReservationRecommendation> {
  /**
   * The link (url) to the next page of results.
  */
  readonly nextLink?: string;
}

/**
 * Result of listing forecasts. It contains a list of available forecasts.
*/
export interface ForecastsListResult extends Array<Forecast> {
}

/**
 * Result of listing consumption operations. It contains a list of operations and a URL link to get
 * the next set of results.
*/
export interface OperationListResult extends Array<Operation> {
  /**
   * URL to get the next set of operation list results if there are any.
  */
  readonly nextLink?: string;
}
