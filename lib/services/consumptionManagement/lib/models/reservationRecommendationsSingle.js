/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Reservation Recommendation for single subscription scope.
 *
 * @extends models['Resource']
 */
class ReservationRecommendationsSingle extends models['Resource'] {
  /**
   * Create a ReservationRecommendationsSingle.
   * @member {string} [lookBackPeriod] The number of days of usage to look back
   * for recommendation.
   * @member {uuid} [meterId] The meter id (GUID)
   * @member {string} [skuName] Sku name of the reserved instance resource.
   * @member {string} [region] Region of the reserved instance resource.
   * @member {string} [term] RI recommendations in one or three year terms.
   * @member {object} [costWithNoRI] The total amount of cost without reserved
   * instances.
   * @member {string} [costWithNoRI.currency] The currency for the amount
   * value.
   * @member {number} [costWithNoRI.value] Tha actual amount value.
   * @member {number} [recommendedQuantity] Recommended quality for reserved
   * instances.
   * @member {object} [totalCostWithRI] The total amount of cost with reserved
   * instances.
   * @member {string} [totalCostWithRI.currency] The currency for the amount
   * value.
   * @member {number} [totalCostWithRI.value] Tha actual amount value.
   * @member {object} [netSavings] Total estimated savings with reserved
   * instances.
   * @member {string} [netSavings.currency] The currency for the amount value.
   * @member {number} [netSavings.value] Tha actual amount value.
   * @member {date} [firstUsageDate] The usage date for looking back.
   * @member {uuid} [subscriptionId] Subscription Id.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of ReservationRecommendationsSingle
   *
   * @returns {object} metadata of ReservationRecommendationsSingle
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ReservationRecommendationsSingle',
      type: {
        name: 'Composite',
        className: 'ReservationRecommendationsSingle',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            readOnly: true,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          lookBackPeriod: {
            required: false,
            readOnly: true,
            serializedName: 'properties.lookBackPeriod',
            type: {
              name: 'String'
            }
          },
          meterId: {
            required: false,
            readOnly: true,
            serializedName: 'properties.meterId',
            type: {
              name: 'String'
            }
          },
          skuName: {
            required: false,
            readOnly: true,
            serializedName: 'properties.skuName',
            type: {
              name: 'String'
            }
          },
          region: {
            required: false,
            readOnly: true,
            serializedName: 'properties.region',
            type: {
              name: 'String'
            }
          },
          term: {
            required: false,
            readOnly: true,
            serializedName: 'properties.term',
            type: {
              name: 'String'
            }
          },
          costWithNoRI: {
            required: false,
            serializedName: 'properties.costWithNoRI',
            type: {
              name: 'Composite',
              className: 'Amount'
            }
          },
          recommendedQuantity: {
            required: false,
            readOnly: true,
            serializedName: 'properties.recommendedQuantity',
            type: {
              name: 'Number'
            }
          },
          totalCostWithRI: {
            required: false,
            serializedName: 'properties.totalCostWithRI',
            type: {
              name: 'Composite',
              className: 'Amount'
            }
          },
          netSavings: {
            required: false,
            serializedName: 'properties.netSavings',
            type: {
              name: 'Composite',
              className: 'Amount'
            }
          },
          firstUsageDate: {
            required: false,
            readOnly: true,
            serializedName: 'properties.firstUsageDate',
            type: {
              name: 'DateTime'
            }
          },
          subscriptionId: {
            required: false,
            readOnly: true,
            serializedName: 'properties.subscriptionId',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ReservationRecommendationsSingle;
