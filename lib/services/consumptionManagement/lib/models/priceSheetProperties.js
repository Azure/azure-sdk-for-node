/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The properties of the price sheet.
 *
 */
class PriceSheetProperties {
  /**
   * Create a PriceSheetProperties.
   * @member {string} [billingPeriodId] The id of the billing period resource
   * that the usage belongs to.
   * @member {uuid} [meterId] The meter id (GUID)
   * @member {object} [meterDetails] The details about the meter. By default
   * this is not populated, unless it's specified in $expand.
   * @member {string} [meterDetails.meterName] The name of the meter, within
   * the given meter category
   * @member {string} [meterDetails.meterCategory] The category of the meter,
   * for example, 'Cloud services', 'Networking', etc..
   * @member {string} [meterDetails.meterSubCategory] The subcategory of the
   * meter, for example, 'A6 Cloud services', 'ExpressRoute (IXP)', etc..
   * @member {string} [meterDetails.unit] The unit in which the meter
   * consumption is charged, for example, 'Hours', 'GB', etc.
   * @member {string} [meterDetails.meterLocation] The location in which the
   * Azure service is available.
   * @member {number} [meterDetails.totalIncludedQuantity] The total included
   * quantity associated with the offer.
   * @member {number} [meterDetails.pretaxStandardRate] The pretax listing
   * price.
   * @member {string} [meterDetails.serviceName] The name of the service.
   * @member {string} [meterDetails.serviceTier] The service tier.
   * @member {string} [unitOfMeasure] Unit of measure
   * @member {number} [includedQuantity] Included quality for an offer
   * @member {string} [partNumber] Part Number
   * @member {number} [unitPrice] Unit Price
   * @member {string} [currencyCode] Currency Code
   * @member {string} [offerId] Offer Id
   */
  constructor() {
  }

  /**
   * Defines the metadata of PriceSheetProperties
   *
   * @returns {object} metadata of PriceSheetProperties
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'PriceSheetProperties',
      type: {
        name: 'Composite',
        className: 'PriceSheetProperties',
        modelProperties: {
          billingPeriodId: {
            required: false,
            readOnly: true,
            serializedName: 'billingPeriodId',
            type: {
              name: 'String'
            }
          },
          meterId: {
            required: false,
            readOnly: true,
            serializedName: 'meterId',
            type: {
              name: 'String'
            }
          },
          meterDetails: {
            required: false,
            readOnly: true,
            serializedName: 'meterDetails',
            type: {
              name: 'Composite',
              className: 'MeterDetails'
            }
          },
          unitOfMeasure: {
            required: false,
            readOnly: true,
            serializedName: 'unitOfMeasure',
            type: {
              name: 'String'
            }
          },
          includedQuantity: {
            required: false,
            readOnly: true,
            serializedName: 'includedQuantity',
            type: {
              name: 'Number'
            }
          },
          partNumber: {
            required: false,
            readOnly: true,
            serializedName: 'partNumber',
            type: {
              name: 'String'
            }
          },
          unitPrice: {
            required: false,
            readOnly: true,
            serializedName: 'unitPrice',
            type: {
              name: 'Number'
            }
          },
          currencyCode: {
            required: false,
            readOnly: true,
            serializedName: 'currencyCode',
            type: {
              name: 'String'
            }
          },
          offerId: {
            required: false,
            readOnly: true,
            serializedName: 'offerId',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = PriceSheetProperties;
