/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * The properties of the meter detail.
 *
 */
class MeterDetails {
  /**
   * Create a MeterDetails.
   * @property {string} [meterName] The name of the meter, within the given
   * meter category
   * @property {string} [meterCategory] The category of the meter, for example,
   * 'Cloud services', 'Networking', etc..
   * @property {string} [meterSubCategory] The subcategory of the meter, for
   * example, 'A6 Cloud services', 'ExpressRoute (IXP)', etc..
   * @property {string} [unit] The unit in which the meter consumption is
   * charged, for example, 'Hours', 'GB', etc.
   * @property {string} [meterLocation] The location in which the Azure service
   * is available.
   * @property {number} [totalIncludedQuantity] The total included quantity
   * associated with the offer.
   * @property {number} [pretaxStandardRate] The pretax listing price.
   * @property {string} [serviceName] The name of the service.
   * @property {string} [serviceTier] The service tier.
   */
  constructor() {
  }

  /**
   * Defines the metadata of MeterDetails
   *
   * @returns {object} metadata of MeterDetails
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'MeterDetails',
      type: {
        name: 'Composite',
        className: 'MeterDetails',
        modelProperties: {
          meterName: {
            required: false,
            readOnly: true,
            serializedName: 'meterName',
            type: {
              name: 'String'
            }
          },
          meterCategory: {
            required: false,
            readOnly: true,
            serializedName: 'meterCategory',
            type: {
              name: 'String'
            }
          },
          meterSubCategory: {
            required: false,
            readOnly: true,
            serializedName: 'meterSubCategory',
            type: {
              name: 'String'
            }
          },
          unit: {
            required: false,
            readOnly: true,
            serializedName: 'unit',
            type: {
              name: 'String'
            }
          },
          meterLocation: {
            required: false,
            readOnly: true,
            serializedName: 'meterLocation',
            type: {
              name: 'String'
            }
          },
          totalIncludedQuantity: {
            required: false,
            readOnly: true,
            serializedName: 'totalIncludedQuantity',
            type: {
              name: 'Number'
            }
          },
          pretaxStandardRate: {
            required: false,
            readOnly: true,
            serializedName: 'pretaxStandardRate',
            type: {
              name: 'Number'
            }
          },
          serviceName: {
            required: false,
            readOnly: true,
            serializedName: 'serviceName',
            type: {
              name: 'String'
            }
          },
          serviceTier: {
            required: false,
            readOnly: true,
            serializedName: 'serviceTier',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = MeterDetails;
