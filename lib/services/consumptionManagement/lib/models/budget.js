/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * A budget resource.
 *
 * @extends models['ProxyResource']
 */
class Budget extends models['ProxyResource'] {
  /**
   * Create a Budget.
   * @member {string} category The category of the budget, whether the budget
   * tracks cost or usage. Possible values include: 'Cost', 'Usage'
   * @member {number} amount The total amount of cost to track with the budget
   * @member {string} timeGrain The time covered by a budget. Tracking of the
   * amount will be reset based on the time grain. Possible values include:
   * 'Monthly', 'Quarterly', 'Annually'
   * @member {object} timePeriod Has start and end date of the budget. The
   * start date must be first of the month and should be less than the end
   * date. Budget start date must be on or after June 1, 2017. Future start
   * date should not be more than three months. Past start date should  be
   * selected within the timegrain period. There are no restrictions on the end
   * date.
   * @member {date} [timePeriod.startDate] The start date for the budget.
   * @member {date} [timePeriod.endDate] The end date for the budget. If not
   * provided, we default this to 10 years from the start date.
   * @member {object} [filters] May be used to filter budgets by resource
   * group, resource, or meter.
   * @member {array} [filters.resourceGroups] The list of filters on resource
   * groups, allowed at subscription level only.
   * @member {array} [filters.resources] The list of filters on resources.
   * @member {array} [filters.meters] The list of filters on meters (GUID),
   * mandatory for budgets of usage category.
   * @member {object} [filters.tags] The dictionary of filters on tags.
   * @member {object} [currentSpend] The current amount of cost which is being
   * tracked for a budget.
   * @member {number} [currentSpend.amount] The total amount of cost which is
   * being tracked by the budget.
   * @member {string} [currentSpend.unit] The unit of measure for the budget
   * amount.
   * @member {object} [notifications] Dictionary of notifications associated
   * with the budget. Budget can have up to five notifications.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Budget
   *
   * @returns {object} metadata of Budget
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Budget',
      type: {
        name: 'Composite',
        className: 'Budget',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          eTag: {
            required: false,
            serializedName: 'eTag',
            type: {
              name: 'String'
            }
          },
          category: {
            required: true,
            serializedName: 'properties.category',
            type: {
              name: 'String'
            }
          },
          amount: {
            required: true,
            serializedName: 'properties.amount',
            type: {
              name: 'Number'
            }
          },
          timeGrain: {
            required: true,
            serializedName: 'properties.timeGrain',
            type: {
              name: 'String'
            }
          },
          timePeriod: {
            required: true,
            serializedName: 'properties.timePeriod',
            type: {
              name: 'Composite',
              className: 'BudgetTimePeriod'
            }
          },
          filters: {
            required: false,
            serializedName: 'properties.filters',
            type: {
              name: 'Composite',
              className: 'Filters'
            }
          },
          currentSpend: {
            required: false,
            readOnly: true,
            serializedName: 'properties.currentSpend',
            type: {
              name: 'Composite',
              className: 'CurrentSpend'
            }
          },
          notifications: {
            required: false,
            serializedName: 'properties.notifications',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'NotificationElementType',
                  type: {
                    name: 'Composite',
                    className: 'Notification'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = Budget;
