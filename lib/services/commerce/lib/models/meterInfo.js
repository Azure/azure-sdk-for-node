/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the MeterInfo class.
 * @constructor
 * Detailed information about the meter.
 *
 * @member {uuid} [meterId] The unique identifier of the resource.
 * 
 * @member {string} [meterName] The name of the meter, within the given meter
 * category
 * 
 * @member {string} [meterCategory] The category of the meter, e.g., 'Cloud
 * services', 'Networking', etc..
 * 
 * @member {string} [meterSubCategory] The subcategory of the meter, e.g., 'A6
 * Cloud services', 'ExpressRoute (IXP)', etc..
 * 
 * @member {string} [unit] The unit in which the meter consumption is charged,
 * e.g., 'Hours', 'GB', etc.
 * 
 * @member {object} [meterRates] The list of key/value pairs for the meter
 * rates, in the format 'key':'value' where key = the meter quantity, and
 * value = the corresponding price
 * 
 * @member {date} [effectiveDate] Indicates the date from which the meter rate
 * or offer term is effective.
 * 
 * @member {number} [includedQuantity] The resource quantity that is included
 * in the offer at no cost. Consumption beyond this quantity will be charged.
 * 
 */
function MeterInfo() {
}

/**
 * Defines the metadata of MeterInfo
 *
 * @returns {object} metadata of MeterInfo
 *
 */
MeterInfo.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'MeterInfo',
    type: {
      name: 'Composite',
      className: 'MeterInfo',
      modelProperties: {
        meterId: {
          required: false,
          serializedName: 'MeterId',
          type: {
            name: 'String'
          }
        },
        meterName: {
          required: false,
          serializedName: 'MeterName',
          type: {
            name: 'String'
          }
        },
        meterCategory: {
          required: false,
          serializedName: 'MeterCategory',
          type: {
            name: 'String'
          }
        },
        meterSubCategory: {
          required: false,
          serializedName: 'MeterSubCategory',
          type: {
            name: 'String'
          }
        },
        unit: {
          required: false,
          serializedName: 'Unit',
          type: {
            name: 'String'
          }
        },
        meterRates: {
          required: false,
          serializedName: 'MeterRates',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'NumberElementType',
                type: {
                  name: 'Number'
                }
            }
          }
        },
        effectiveDate: {
          required: false,
          serializedName: 'EffectiveDate',
          type: {
            name: 'DateTime'
          }
        },
        includedQuantity: {
          required: false,
          serializedName: 'IncludedQuantity',
          type: {
            name: 'Number'
          }
        }
      }
    }
  };
};

module.exports = MeterInfo;
