/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError } from "ms-rest-azure";
import * as moment from "moment";

export {

  BaseResource,
  CloudError
};

/**
 * The object that describes a operation.
 */
export interface OperationDisplay {
  /**
   * Friendly name of the resource provider
   */
  provider?: string;
  /**
   * Resource type on which the operation is performed.
   */
  resource?: string;
  /**
   * The localized friendly name for the operation.
   */
  operation?: string;
  /**
   * The localized friendly description for the operation
   */
  description?: string;
}

/**
 * Specifications of the Dimension of metrics.
 */
export interface Dimension {
  /**
   * The public facing name of the dimension.
   */
  name?: string;
  /**
   * Localized friendly display name of the dimension.
   */
  displayName?: string;
  /**
   * Name of the dimension as it appears in MDM.
   */
  internalName?: string;
  /**
   * A Boolean flag indicating whether this dimension should be included for the shoebox export
   * scenario.
   */
  toBeExportedForShoebox?: boolean;
}

/**
 * Specifications of the Metrics for Azure Monitoring.
 */
export interface MetricSpecification {
  /**
   * Name of the metric.
   */
  name?: string;
  /**
   * Localized friendly display name of the metric.
   */
  displayName?: string;
  /**
   * Localized friendly description of the metric.
   */
  displayDescription?: string;
  /**
   * The unit that makes sense for the metric.
   */
  unit?: string;
  /**
   * Only provide one value for this field. Valid values: Average, Minimum, Maximum, Total, Count.
   */
  aggregationType?: string;
  /**
   * Optional. If set to true, then zero will be returned for time duration where no metric is
   * emitted/published.
   * Ex. a metric that returns the number of times a particular error code was emitted. The error
   * code may not appear
   * often, instead of the RP publishing 0, Shoebox can auto fill in 0s for time periods where
   * nothing was emitted.
   */
  fillGapWithZero?: string;
  /**
   * The name of the metric category that the metric belongs to. A metric can only belong to a
   * single category.
   */
  category?: string;
  /**
   * The dimensions of the metrics.
   */
  dimensions?: Dimension[];
}

/**
 * An object that describes a specification.
 */
export interface ServiceSpecification {
  /**
   * Specifications of the Metrics for Azure Monitoring.
   */
  metricSpecifications?: MetricSpecification[];
}

/**
 * Extra Operation properties.
 */
export interface OperationProperties {
  /**
   * The service specifications.
   */
  serviceSpecification?: ServiceSpecification;
}

/**
 * REST API operation supported by SignalR resource provider.
 */
export interface Operation {
  /**
   * Name of the operation with format: {provider}/{resource}/{operation}
   */
  name?: string;
  /**
   * The object that describes the operation.
   */
  display?: OperationDisplay;
  /**
   * Optional. The intended executor of the operation; governs the display of the operation in the
   * RBAC UX and the audit logs UX.
   */
  origin?: string;
  /**
   * Extra properties for the operation.
   */
  properties?: OperationProperties;
}

/**
 * Data POST-ed to the nameAvailability action
 */
export interface NameAvailabilityParameters {
  /**
   * The resource type. Should be always "Microsoft.SignalRService/SignalR".
   */
  type: string;
  /**
   * The SignalR service name to validate. e.g."my-signalR-name-here"
   */
  name: string;
}

/**
 * Result of the request to check name availability. It contains a flag and possible reason of
 * failure.
 */
export interface NameAvailability {
  /**
   * Indicates whether the name is available or not.
   */
  nameAvailable?: boolean;
  /**
   * The reason of the availability. Required if name is not available.
   */
  reason?: string;
  /**
   * The message of the operation.
   */
  message?: string;
}

/**
 * The billing information of the resource.(e.g. basic vs. standard)
 */
export interface ResourceSku {
  /**
   * The name of the SKU. This is typically a letter + number code, such as A0 or P3.  Required (if
   * sku is specified)
   */
  name: string;
  /**
   * Optional tier of this particular SKU. `Basic` is deprecated, use `Standard` instead. Possible
   * values include: 'Free', 'Basic', 'Standard', 'Premium'
   */
  tier?: string;
  /**
   * Optional, string. When the name field is the combination of tier and some other value, this
   * would be the standalone code.
   */
  size?: string;
  /**
   * Optional, string. If the service has different generations of hardware, for the same SKU, then
   * that can be captured here.
   */
  family?: string;
  /**
   * Optional, integer. If the SKU supports scale out/in then the capacity integer should be
   * included. If scale out/in is not
   * possible for the resource this may be omitted.
   */
  capacity?: number;
}

/**
 * The core properties of ARM resources.
 */
export interface Resource extends BaseResource {
  /**
   * Fully qualified resource Id for the resource.
   */
  readonly id?: string;
  /**
   * The name of the resource.
   */
  readonly name?: string;
  /**
   * The type of the service - e.g. "Microsoft.SignalRService/SignalR"
   */
  readonly type?: string;
}

/**
 * The resource model definition for a ARM tracked top level resource.
 */
export interface TrackedResource extends Resource {
  /**
   * The GEO location of the SignalR service. e.g. West US | East US | North Central US | South
   * Central US.
   */
  location?: string;
  /**
   * Tags of the service which is a list of key value pairs that describe the resource.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * A class represent a SignalR service resource.
 */
export interface SignalRResource extends TrackedResource {
  /**
   * SKU of the service.
   */
  sku?: ResourceSku;
  /**
   * Prefix for the hostName of the SignalR service. Retained for future use.
   * The hostname will be of format: &lt;hostNamePrefix&gt;.service.signalr.net.
   */
  hostNamePrefix?: string;
  /**
   * Provisioning state of the resource. Possible values include: 'Unknown', 'Succeeded', 'Failed',
   * 'Canceled', 'Running', 'Creating', 'Updating', 'Deleting', 'Moving'
   */
  readonly provisioningState?: string;
  /**
   * The publicly accessible IP of the SignalR service.
   */
  readonly externalIP?: string;
  /**
   * FQDN of the SignalR service instance. Format: xxx.service.signalr.net
   */
  readonly hostName?: string;
  /**
   * The publicly accessible port of the SignalR service which is designed for browser/client side
   * usage.
   */
  readonly publicPort?: number;
  /**
   * The publicly accessible port of the SignalR service which is designed for customer server side
   * usage.
   */
  readonly serverPort?: number;
  /**
   * Version of the SignalR resource. Probably you need the same or higher version of client SDKs.
   */
  version?: string;
}

/**
 * Settings used to provision or configure the resource.
 */
export interface SignalRCreateOrUpdateProperties {
  /**
   * Prefix for the hostName of the SignalR service. Retained for future use.
   * The hostname will be of format: &lt;hostNamePrefix&gt;.service.signalr.net.
   */
  hostNamePrefix?: string;
}

/**
 * A class represents the access keys of SignalR service.
 */
export interface SignalRKeys {
  /**
   * The primary access key.
   */
  primaryKey?: string;
  /**
   * The secondary access key.
   */
  secondaryKey?: string;
  /**
   * SignalR connection string constructed via the primaryKey
   */
  primaryConnectionString?: string;
  /**
   * SignalR connection string constructed via the secondaryKey
   */
  secondaryConnectionString?: string;
}

/**
 * Parameters describes the request to regenerate access keys
 */
export interface RegenerateKeyParameters {
  /**
   * The keyType to regenerate. Must be either 'primary' or 'secondary'(case-insensitive). Possible
   * values include: 'Primary', 'Secondary'
   */
  keyType?: string;
}

/**
 * Parameters for SignalR service update operation
 */
export interface SignalRUpdateParameters {
  /**
   * A list of key value pairs that describe the resource.
   */
  tags?: { [propertyName: string]: string };
  /**
   * The billing information of the resource.(e.g. basic vs. standard)
   */
  sku?: ResourceSku;
  /**
   * Settings used to provision or configure the resource
   */
  properties?: SignalRCreateOrUpdateProperties;
}

/**
 * Parameters for SignalR service create/update operation.
 *
 * Keep the same schema as AzSignalR.Models.SignalRResource
 */
export interface SignalRCreateParameters extends SignalRUpdateParameters {
  /**
   * Azure GEO region: e.g. West US | East US | North Central US | South Central US | West Europe |
   * North Europe | East Asia | Southeast Asia | etc.
   * The geo region of a resource never changes after it is created.
   */
  location: string;
}

/**
 * Localizable String object containing the name and a localized value.
 */
export interface SignalRUsageName {
  /**
   * The identifier of the usage.
   */
  value?: string;
  /**
   * Localized name of the usage.
   */
  localizedValue?: string;
}

/**
 * Object that describes a specific usage of SignalR resources.
 */
export interface SignalRUsage {
  /**
   * Fully qualified ARM resource id
   */
  id?: string;
  /**
   * Current value for the usage quota.
   */
  currentValue?: number;
  /**
   * The maximum permitted value for the usage quota. If there is no limit, this value will be -1.
   */
  limit?: number;
  /**
   * Localizable String object containing the name and a localized value.
   */
  name?: SignalRUsageName;
  /**
   * Representing the units of the usage quota. Possible values are: Count, Bytes, Seconds,
   * Percent, CountPerSecond, BytesPerSecond.
   */
  unit?: string;
}

/**
 * Result of the request to list REST API operations. It contains a list of operations.
 */
export interface OperationList extends Array<Operation> {
  /**
   * The URL the client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/**
 * Object that includes an array of SignalR services and a possible link for next set.
 */
export interface SignalRResourceList extends Array<SignalRResource> {
  /**
   * The URL the client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/**
 * Object that includes an array of SignalR resource usages and a possible link for next set.
 */
export interface SignalRUsageList extends Array<SignalRUsage> {
  /**
   * The URL the client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}
