/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as moment from "moment";

/**
 * Response base.
 */
export interface ResponseBase {
  /**
   * Polymorphic Discriminator
   */
  _type: string;
}

/**
 * Defines the identity of a resource.
 */
export interface Identifiable extends ResponseBase {
  /**
   * A String identifier.
   */
  readonly id?: string;
}

/**
 * Defines a response. All schemas that return at the root of the response must inherit from this
 * object.
 */
export interface Response extends Identifiable {
  /**
   * The URL that returns this resource. To use the URL, append query parameters as appropriate and
   * include the Ocp-Apim-Subscription-Key header.
   */
  readonly readLink?: string;
  /**
   * The URL to Bing's search result for this item.
   */
  readonly webSearchUrl?: string;
}

/**
 * Defines a thing.
 */
export interface Thing extends Response {
  /**
   * The name of the thing represented by this object.
   */
  readonly name?: string;
  /**
   * The URL to get more information about the thing represented by this object.
   */
  readonly url?: string;
  /**
   * An image of the item.
   */
  readonly image?: ImageObject;
  /**
   * A short description of the item.
   */
  readonly description?: string;
  /**
   * An alias for the item.
   */
  readonly alternateName?: string;
  /**
   * An ID that uniquely identifies this item.
   */
  readonly bingId?: string;
}

/**
 * A utility class that serves as the umbrella for a number of 'intangible' things such as
 * quantities, structured values, etc.
 */
export interface Intangible extends Thing {
}

export interface StructuredValue extends Intangible {
}

/**
 * Defines a 2D point with X and Y coordinates.
*/
export interface Point2D extends StructuredValue {
  /**
   * The x-coordinate of the point.
  */
  x: number;
  /**
   * The y-coordinate of the point.
  */
  y: number;
}

/**
 * Defines a region of an image. The region is a convex quadrilateral defined by coordinates of its
 * top left, top right, bottom left, and bottom right points. The coordinates are fractional values
 * of the original image's width and height in the range 0.0 through 1.0.
*/
export interface NormalizedQuadrilateral extends StructuredValue {
  /**
   * The top left corner coordinate.
  */
  topLeft: Point2D;
  /**
   * The top right corner coordinate.
  */
  topRight: Point2D;
  /**
   * The bottom right corner coordinate.
  */
  bottomRight: Point2D;
  /**
   * The bottom left corner coordinate.
  */
  bottomLeft: Point2D;
}

/**
 * Defines an image region relevant to the ImageTag.
*/
export interface ImageTagRegion {
  /**
   * A rectangle that outlines the area of interest for this tag.
  */
  queryRectangle: NormalizedQuadrilateral;
  /**
   * A recommended rectangle to show to the user.
  */
  displayRectangle: NormalizedQuadrilateral;
}

/**
 * The most generic kind of creative work, including books, movies, photographs, software programs,
 * etc.
*/
export interface CreativeWork extends Thing {
  /**
   * The URL to a thumbnail of the item.
  */
  readonly thumbnailUrl?: string;
  /**
   * The source of the creative work.
  */
  readonly provider?: Thing[];
  /**
   * The date on which the CreativeWork was published.
  */
  readonly datePublished?: string;
  /**
   * Text content of this creative work.
  */
  readonly text?: string;
}

/**
 * Defines an action.
*/
export interface Action extends CreativeWork {
  /**
   * The result produced in the action.
  */
  readonly result?: Thing[];
  /**
   * A display name for the action.
  */
  readonly displayName?: string;
  /**
   * A Boolean representing whether this result is the top action.
  */
  readonly isTopAction?: boolean;
  /**
   * Use this URL to get additional data to determine how to take the appropriate action. For
   * example, the serviceUrl might return JSON along with an image URL.
  */
  readonly serviceUrl?: string;
}

/**
 * Defines an image action.
*/
export interface ImageAction extends Action {
  /**
   * A string representing the type of action.
  */
  readonly actionType?: string;
}

/**
 * A visual search tag.
*/
export interface ImageTag extends Thing {
  /**
   * Display name for this tag. For the default tag, the display name is empty.
  */
  readonly displayName?: string;
  /**
   * The bounding box for this tag. For the default tag, there is no bounding box.
  */
  readonly boundingBox?: ImageTagRegion;
  /**
   * Actions within this tag. The order of the items denotes the default ranking order of these
   * actions, with the first action being the most likely user intent.
  */
  readonly actions?: ImageAction[];
}

/**
 * Defines an organization.
*/
export interface Organization extends Thing {
}

/**
 * Defines an item.
*/
export interface PropertiesItem {
  /**
   * Text representation of an item.
  */
  readonly text?: string;
  /**
   * Polymorphic Discriminator
  */
  _type: string;
}

/**
 * Defines a rating.
*/
export interface Rating extends PropertiesItem {
  /**
   * The mean (average) rating. The possible values are 1.0 through 5.0.
  */
  ratingValue: number;
  /**
   * The highest rated review. The possible values are 1.0 through 5.0.
  */
  readonly bestRating?: number;
}

/**
 * Defines the metrics that indicate how well an item was rated by others.
*/
export interface AggregateRating extends Rating {
  /**
   * The number of times the recipe has been rated or reviewed.
  */
  readonly reviewCount?: number;
}

/**
 * Defines a merchant's offer.
*/
export interface Offer extends Thing {
  /**
   * Seller for this offer.
  */
  readonly seller?: Organization;
  /**
   * The item's price.
  */
  readonly price?: number;
  /**
   * The monetary currency. For example, USD. Possible values include: 'USD', 'CAD', 'GBP', 'EUR',
   * 'COP', 'JPY', 'CNY', 'AUD', 'INR', 'AED', 'AFN', 'ALL', 'AMD', 'ANG', 'AOA', 'ARS', 'AWG',
   * 'AZN', 'BAM', 'BBD', 'BDT', 'BGN', 'BHD', 'BIF', 'BMD', 'BND', 'BOB', 'BOV', 'BRL', 'BSD',
   * 'BTN', 'BWP', 'BYR', 'BZD', 'CDF', 'CHE', 'CHF', 'CHW', 'CLF', 'CLP', 'COU', 'CRC', 'CUC',
   * 'CUP', 'CVE', 'CZK', 'DJF', 'DKK', 'DOP', 'DZD', 'EGP', 'ERN', 'ETB', 'FJD', 'FKP', 'GEL',
   * 'GHS', 'GIP', 'GMD', 'GNF', 'GTQ', 'GYD', 'HKD', 'HNL', 'HRK', 'HTG', 'HUF', 'IDR', 'ILS',
   * 'IQD', 'IRR', 'ISK', 'JMD', 'JOD', 'KES', 'KGS', 'KHR', 'KMF', 'KPW', 'KRW', 'KWD', 'KYD',
   * 'KZT', 'LAK', 'LBP', 'LKR', 'LRD', 'LSL', 'LYD', 'MAD', 'MDL', 'MGA', 'MKD', 'MMK', 'MNT',
   * 'MOP', 'MRO', 'MUR', 'MVR', 'MWK', 'MXN', 'MXV', 'MYR', 'MZN', 'NAD', 'NGN', 'NIO', 'NOK',
   * 'NPR', 'NZD', 'OMR', 'PAB', 'PEN', 'PGK', 'PHP', 'PKR', 'PLN', 'PYG', 'QAR', 'RON', 'RSD',
   * 'RUB', 'RWF', 'SAR', 'SBD', 'SCR', 'SDG', 'SEK', 'SGD', 'SHP', 'SLL', 'SOS', 'SRD', 'SSP',
   * 'STD', 'SYP', 'SZL', 'THB', 'TJS', 'TMT', 'TND', 'TOP', 'TRY', 'TTD', 'TWD', 'TZS', 'UAH',
   * 'UGX', 'UYU', 'UZS', 'VEF', 'VND', 'VUV', 'WST', 'XAF', 'XCD', 'XOF', 'XPF', 'YER', 'ZAR',
   * 'ZMW'
  */
  readonly priceCurrency?: string;
  /**
   * The item's availability. The following are the possible values: Discontinued, InStock,
   * InStoreOnly, LimitedAvailability, OnlineOnly, OutOfStock, PreOrder, SoldOut. Possible values
   * include: 'Discontinued', 'InStock', 'InStoreOnly', 'LimitedAvailability', 'OnlineOnly',
   * 'OutOfStock', 'PreOrder', 'SoldOut'
  */
  readonly availability?: string;
  /**
   * An aggregated rating that indicates how well the product has been rated by others.
  */
  readonly aggregateRating?: AggregateRating;
  /**
   * The last date that the offer was updated. The date is in the form YYYY-MM-DD.
  */
  readonly lastUpdated?: string;
}

/**
 * Defines a list of offers from merchants that are related to the image.
*/
export interface AggregateOffer extends Offer {
  /**
   * A list of offers from merchants that have offerings related to the image.
  */
  readonly offers?: Offer[];
}

/**
 * Defines a count of the number of websites where you can shop or perform other actions related to
 * the image.
*/
export interface ImagesImageMetadata {
  /**
   * The number of websites that sell the products seen in the image.
  */
  readonly shoppingSourcesCount?: number;
  /**
   * The number of websites that offer recipes of the food seen in the image.
  */
  readonly recipeSourcesCount?: number;
  /**
   * A summary of the online offers of products found in the image. For example, if the image is of
   * a dress, the offer might identify the lowest price and the number of offers found. Only
   * visually similar products insights include this field. The offer includes the following
   * fields: Name, AggregateRating, OfferCount, and LowPrice.
  */
  readonly aggregateOffer?: AggregateOffer;
}

/**
 * Defines a media object.
*/
export interface MediaObject extends CreativeWork {
  /**
   * Original URL to retrieve the source (file) for the media object (e.g., the source URL for the
   * image).
  */
  readonly contentUrl?: string;
  /**
   * URL of the page that hosts the media object.
  */
  readonly hostPageUrl?: string;
  /**
   * Size of the media object content. Use format "value unit" (e.g., "1024 B").
  */
  readonly contentSize?: string;
  /**
   * Encoding format (e.g., png, gif, jpeg, etc).
  */
  readonly encodingFormat?: string;
  /**
   * Display URL of the page that hosts the media object.
  */
  readonly hostPageDisplayUrl?: string;
  /**
   * The width of the media object, in pixels.
  */
  readonly width?: number;
  /**
   * The height of the media object, in pixels.
  */
  readonly height?: number;
}

/**
 * Defines an image.
*/
export interface ImageObject extends MediaObject {
  /**
   * The URL to a thumbnail of the image.
  */
  readonly thumbnail?: ImageObject;
  /**
   * The token that you use in a subsequent call to Visual Search API to get additional information
   * about the image. For information about using this token, see the imageInsightsToken field
   * inside the knowledgeRequest request parameter.
  */
  readonly imageInsightsToken?: string;
  /**
   * A count of the number of websites where you can shop or perform other actions related to the
   * image. For example, if the image is of an apple pie, this object includes a count of the
   * number of websites where you can buy an apple pie. To indicate the number of offers in your
   * UX, include badging such as a shopping cart icon that contains the count. When the user clicks
   * on the icon, use imageInsightsToken in a subsequent Visual Search API call to get the list of
   * shopping websites.
  */
  readonly insightsMetadata?: ImagesImageMetadata;
  /**
   * Unique Id for the image.
  */
  readonly imageId?: string;
  /**
   * A three-byte hexadecimal number that represents the color that dominates the image. Use the
   * color as the temporary background in your client until the image is loaded.
  */
  readonly accentColor?: string;
  /**
   * For internal use only.
  */
  readonly visualWords?: string;
}

/**
 * Defines a visual search API response.
*/
export interface ImageKnowledge extends Response {
  /**
   * A list of visual search tags.
  */
  readonly tags?: ImageTag[];
  /**
   * Image object containing metadata about the requested image.
  */
  readonly image?: ImageObject;
}

/**
 * Defines the error that occurred.
*/
export interface ErrorModel {
  /**
   * The error code that identifies the category of error. Possible values include: 'None',
   * 'ServerError', 'InvalidRequest', 'RateLimitExceeded', 'InvalidAuthorization',
   * 'InsufficientAuthorization'
  */
  code: string;
  /**
   * The error code that further helps to identify the error. Possible values include:
   * 'UnexpectedError', 'ResourceError', 'NotImplemented', 'ParameterMissing',
   * 'ParameterInvalidValue', 'HttpNotAllowed', 'Blocked', 'AuthorizationMissing',
   * 'AuthorizationRedundancy', 'AuthorizationDisabled', 'AuthorizationExpired'
  */
  readonly subCode?: string;
  /**
   * A description of the error.
  */
  message: string;
  /**
   * A description that provides additional information about the error.
  */
  readonly moreDetails?: string;
  /**
   * The parameter in the request that caused the error.
  */
  readonly parameter?: string;
  /**
   * The parameter's value in the request that was not valid.
  */
  readonly value?: string;
}

/**
 * The top-level response that represents a failed request.
*/
export interface ErrorResponse extends Response {
  /**
   * A list of errors that describe the reasons why the request failed.
  */
  errors: ErrorModel[];
}

/**
 * Defines a person.
*/
export interface Person extends Thing {
  /**
   * The person's job title.
  */
  readonly jobTitle?: string;
  /**
   * The URL of the person's twitter profile.
  */
  readonly twitterProfile?: string;
}

/**
 * Defines an entity action.
*/
export interface ImageEntityAction extends ImageAction {
}

/**
 * Defines a list of images.
*/
export interface ImagesModule {
  /**
   * A list of images.
  */
  readonly value?: ImageObject[];
}

/**
 * Defines an image list action.
*/
export interface ImageModuleAction extends ImageAction {
  /**
   * A list of images.
  */
  readonly data?: ImagesModule;
}

/**
 * Defines a cooking recipe.
*/
export interface Recipe extends CreativeWork {
  /**
   * The amount of time the food takes to cook. For example, PT25M. For information about the time
   * format, see http://en.wikipedia.org/wiki/ISO_8601#Durations.
  */
  readonly cookTime?: string;
  /**
   * The amount of time required to prepare the ingredients. For example, PT15M. For information
   * about the time format, see http://en.wikipedia.org/wiki/ISO_8601#Durations.
  */
  readonly prepTime?: string;
  /**
   * The total amount of time it takes to prepare and cook the recipe. For example, PT45M. For
   * information about the time format, see http://en.wikipedia.org/wiki/ISO_8601#Durations.
  */
  readonly totalTime?: string;
}

/**
 * Defines a list of recipes.
*/
export interface RecipesModule {
  /**
   * A list of recipes.
  */
  readonly value?: Recipe[];
}

/**
 * Defines an recipe action.
*/
export interface ImageRecipesAction extends ImageAction {
  /**
   * A list of recipes related to the image.
  */
  readonly data?: RecipesModule;
}

/**
 * Defines a search query.
*/
export interface Query {
  /**
   * The query string. Use this string as the query term in a new search request.
  */
  text: string;
  /**
   * The display version of the query term.
  */
  readonly displayText?: string;
  /**
   * The URL that takes the user to the Bing search results page for the query.
  */
  readonly webSearchUrl?: string;
  /**
   * The URL that you use to get the results of the related search. Before using the URL, you must
   * append query parameters as appropriate and include the Ocp-Apim-Subscription-Key header. Use
   * this URL if you're displaying the results in your own user interface. Otherwise, use the
   * webSearchUrl URL.
  */
  readonly searchLink?: string;
  /**
   * The URL to a thumbnail of a related image.
  */
  readonly thumbnail?: ImageObject;
}

/**
 * Defines a list of related searches.
*/
export interface RelatedSearchesModule {
  /**
   * A list of related searches.
  */
  readonly value?: Query[];
}

/**
 * Defines an related search action.
*/
export interface ImageRelatedSearchesAction extends ImageAction {
  /**
   * A list of queries related to the image.
  */
  readonly data?: RelatedSearchesModule;
}

/**
 * Defines a shopping sources action.
*/
export interface ImageShoppingSourcesAction extends ImageAction {
  /**
   * A list of merchants that offer items related to the image.
  */
  readonly data?: AggregateOffer;
}

/**
 * A JSON object consisting of coordinates specifying the four corners of a cropped rectangle
 * within the input image.
*/
export interface CropArea {
  /**
   * The top coordinate of the region to be cropped. The coordinate is a fractional value of the
   * original image's height and is measured from the top edge of the image. Specify the coordinate
   * as a value from 0.0 through 1.0.
  */
  top: number;
  /**
   * The bottom coordinate of the region to be cropped. The coordinate is a fractional value of the
   * original image's height and is measured from the top edge of the image. Specify the coordinate
   * as a value from 0.0 through 1.0.
  */
  bottom: number;
  /**
   * The left coordinate of the region to be cropped. The coordinate is a fractional value of the
   * original image's width and is measured from the left edge of the image. Specify the coordinate
   * as a value from 0.0 through 1.0.
  */
  left: number;
  /**
   * The right coordinate of the region to be cropped. The coordinate is a fractional value of the
   * original image's width and is measured from the left edge of the image. Specify the coordinate
   * as a value from 0.0 through 1.0.
  */
  right: number;
}

/**
 * A JSON object that identities the image to get insights of . It also includes the optional crop
 * area that you use to identify the region of interest in the image.
*/
export interface ImageInfo {
  /**
   * An image insights token. To get the insights token, call one of the Image Search APIs (for
   * example, /images/search). In the search results, the
   * [Image](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#image)
   * object's
   * [imageInsightsToken](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#image-imageinsightstoken)
   * field contains the token. The imageInsightsToken and url fields mutually exclusive; do not
   * specify both. Do not specify an insights token if the request includes the image form data.
  */
  imageInsightsToken?: string;
  /**
   * The URL of the input image. The imageInsightsToken and url fields are mutually exclusive; do
   * not specify both. Do not specify the URL if the request includes the image form data.
  */
  url?: string;
  /**
   * A JSON object consisting of coordinates specifying the four corners of a cropped rectangle
   * within the input image. Use the crop area to identify the region of interest in the image. You
   * can apply the crop area to the images specified using the imageInsightsToken or url fields, or
   * an image binary specified in an image form data.
  */
  cropArea?: CropArea;
}

/**
 * A key-value object consisting of filters that may be specified to limit the results returned by
 * the API. Current available filters: site.
*/
export interface Filters {
  /**
   * The URL of the site to return similar images and similar products from. (e.g., "www.bing.com",
   * "bing.com").
  */
  site?: string;
}

/**
 * A JSON object containing information about the request, such as filters for the resulting
 * actions.
*/
export interface KnowledgeRequest {
  /**
   * A key-value object consisting of filters that may be specified to limit the results returned
   * by the API.
  */
  filters?: Filters;
}

/**
 * A JSON object that contains information about the image to get insights of. Specify this object
 * only in a knowledgeRequest form data.
*/
export interface VisualSearchRequest {
  /**
   * A JSON object that identities the image to get insights of.
  */
  imageInfo?: ImageInfo;
  /**
   * A JSON object containing information about the request, such as filters, or a description.
  */
  knowledgeRequest?: KnowledgeRequest;
}
