/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as moment from "moment";

/**
 * Response base
 */
export interface ResponseBase {
  /**
   * Polymorphic Discriminator
   */
  _type: string;
}

/**
 * Defines the identity of a resource.
 */
export interface Identifiable extends ResponseBase {
  /**
   * A String identifier.
   */
  readonly id?: string;
}

/**
 * Defines a response. All schemas that could be returned at the root of a response should inherit
 * from this
 */
export interface Response extends Identifiable {
  /**
   * The URL that returns this resource.
   */
  readonly readLink?: string;
  /**
   * The URL To Bing's search result for this item.
   */
  readonly webSearchUrl?: string;
  readonly potentialAction?: Action[];
  readonly immediateAction?: Action[];
  readonly preferredClickthroughUrl?: string;
  readonly adaptiveCard?: string;
}

/**
 * Defines a thing.
*/
export interface Thing extends Response {
  /**
   * The URL to get more information about the thing represented by this object.
  */
  readonly url?: string;
}

/**
 * The most generic kind of creative work, including books, movies, photographs, software programs,
 * etc.
*/
export interface CreativeWork extends Thing {
  /**
   * The URL to a thumbnail of the item.
  */
  readonly thumbnailUrl?: string;
  /**
   * For internal use only.
  */
  readonly about?: Thing[];
  /**
   * For internal use only.
  */
  readonly mentions?: Thing[];
  /**
   * The source of the creative work.
  */
  readonly provider?: Thing[];
  readonly creator?: Thing;
  /**
   * Text content of this creative work
  */
  readonly text?: string;
  readonly discussionUrl?: string;
  readonly commentCount?: number;
  readonly mainEntity?: Thing;
  readonly headLine?: string;
  readonly copyrightHolder?: Thing;
  readonly copyrightYear?: number;
  readonly disclaimer?: string;
  readonly isAccessibleForFree?: boolean;
  readonly genre?: string[];
  readonly isFamilyFriendly?: boolean;
}

export interface Action extends CreativeWork {
  readonly result?: Thing[];
  readonly displayName?: string;
  readonly isTopAction?: boolean;
  readonly serviceUrl?: string;
}

export interface SearchAction extends Action {
  readonly displayText?: string;
  readonly query?: string;
  /**
   * Possible values include: 'WebSearch', 'HistorySearch', 'DocumentSearch', 'TagSearch',
   * 'LocationSearch', 'CustomSearch'
  */
  readonly searchKind?: string;
}

export interface SuggestionsSuggestionGroup {
  /**
   * Possible values include: 'Unknown', 'Web', 'StoreApps', 'SearchHistory',
   * 'PersonalSearchDocuments', 'PersonalSearchTags', 'Custom'
  */
  name: string;
  searchSuggestions: SearchAction[];
  /**
   * Polymorphic Discriminator
  */
  _type: string;
}

/**
 * Defines an answer.
*/
export interface Answer extends Response {
}

/**
 * Defines a search result answer.
*/
export interface SearchResultsAnswer extends Answer {
  readonly queryContext?: QueryContext;
}

export interface Suggestions extends SearchResultsAnswer {
  suggestionGroups: SuggestionsSuggestionGroup[];
}

/**
 * Defines the query context that Bing used for the request.
*/
export interface QueryContext {
  /**
   * The query string as specified in the request.
  */
  originalQuery: string;
  /**
   * The query string used by Bing to perform the query. Bing uses the altered query string if the
   * original query string contained spelling mistakes. For example, if the query string is "saling
   * downwind", the altered query string will be "sailing downwind". This field is included only if
   * the original query string contains a spelling mistake.
  */
  readonly alteredQuery?: string;
  /**
   * The query string to use to force Bing to use the original string. For example, if the query
   * string is "saling downwind", the override query string will be "+saling downwind". Remember to
   * encode the query string which results in "%2Bsaling+downwind". This field is included only if
   * the original query string contains a spelling mistake.
  */
  readonly alterationOverrideQuery?: string;
  /**
   * A Boolean value that indicates whether the specified query has adult intent. The value is true
   * if the query has adult intent; otherwise, false.
  */
  readonly adultIntent?: boolean;
  /**
   * A Boolean value that indicates whether Bing requires the user's location to provide accurate
   * results. If you specified the user's location by using the X-MSEdge-ClientIP and
   * X-Search-Location headers, you can ignore this field. For location aware queries, such as
   * "today's weather" or "restaurants near me" that need the user's location to provide accurate
   * results, this field is set to true. For location aware queries that include the location (for
   * example, "Seattle weather"), this field is set to false. This field is also set to false for
   * queries that are not location aware, such as "best sellers".
  */
  readonly askUserForLocation?: boolean;
  readonly isTransactional?: boolean;
  /**
   * Polymorphic Discriminator
  */
  _type: string;
}

/**
 * Defines the error that occurred.
*/
export interface ErrorModel {
  /**
   * The error code that identifies the category of error. Possible values include: 'None',
   * 'ServerError', 'InvalidRequest', 'RateLimitExceeded', 'InvalidAuthorization',
   * 'InsufficientAuthorization'
  */
  code: string;
  /**
   * A description of the error.
  */
  message: string;
  /**
   * A description that provides additional information about the error.
  */
  readonly moreDetails?: string;
  /**
   * The parameter in the request that caused the error.
  */
  readonly parameter?: string;
  /**
   * The parameter's value in the request that was not valid.
  */
  readonly value?: string;
  /**
   * Polymorphic Discriminator
  */
  _type: string;
}

/**
 * The top-level response that represents a failed request.
*/
export interface ErrorResponse extends Response {
  /**
   * A list of errors that describe the reasons why the request failed.
  */
  errors: ErrorModel[];
}
