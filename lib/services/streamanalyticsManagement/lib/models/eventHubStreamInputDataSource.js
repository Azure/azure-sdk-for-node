/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Describes an Event Hub input data source that contains stream data.
 *
 * @extends models['StreamInputDataSource']
 */
class EventHubStreamInputDataSource extends models['StreamInputDataSource'] {
  /**
   * Create a EventHubStreamInputDataSource.
   * @member {string} [serviceBusNamespace] The namespace that is associated
   * with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc.
   * Required on PUT (CreateOrReplace) requests.
   * @member {string} [sharedAccessPolicyName] The shared access policy name
   * for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on
   * PUT (CreateOrReplace) requests.
   * @member {string} [sharedAccessPolicyKey] The shared access policy key for
   * the specified shared access policy. Required on PUT (CreateOrReplace)
   * requests.
   * @member {string} [eventHubName] The name of the Event Hub. Required on PUT
   * (CreateOrReplace) requests.
   * @member {string} [consumerGroupName] The name of an Event Hub Consumer
   * Group that should be used to read events from the Event Hub. Specifying
   * distinct consumer group names for multiple inputs allows each of those
   * inputs to receive the same events from the Event Hub. If not specified,
   * the input uses the Event Hubâ€™s default consumer group.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of EventHubStreamInputDataSource
   *
   * @returns {object} metadata of EventHubStreamInputDataSource
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Microsoft.ServiceBus/EventHub',
      type: {
        name: 'Composite',
        className: 'EventHubStreamInputDataSource',
        modelProperties: {
          type: {
            required: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          serviceBusNamespace: {
            required: false,
            serializedName: 'properties.serviceBusNamespace',
            type: {
              name: 'String'
            }
          },
          sharedAccessPolicyName: {
            required: false,
            serializedName: 'properties.sharedAccessPolicyName',
            type: {
              name: 'String'
            }
          },
          sharedAccessPolicyKey: {
            required: false,
            serializedName: 'properties.sharedAccessPolicyKey',
            type: {
              name: 'String'
            }
          },
          eventHubName: {
            required: false,
            serializedName: 'properties.eventHubName',
            type: {
              name: 'String'
            }
          },
          consumerGroupName: {
            required: false,
            serializedName: 'properties.consumerGroupName',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = EventHubStreamInputDataSource;
