/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * An output object, containing all information associated with the named
 * output. All outputs are contained under a streaming job.
 *
 * @extends models['SubResource']
 */
class Output extends models['SubResource'] {
  /**
   * Create a Output.
   * @member {object} [datasource] Describes the data source that output will
   * be written to. Required on PUT (CreateOrReplace) requests.
   * @member {string} [datasource.type] Polymorphic Discriminator
   * @member {object} [serialization] Describes how data from an input is
   * serialized or how data is serialized when written to an output. Required
   * on PUT (CreateOrReplace) requests.
   * @member {string} [serialization.type] Polymorphic Discriminator
   * @member {object} [diagnostics] Describes conditions applicable to the
   * Input, Output, or the job overall, that warrant customer attention.
   * @member {array} [diagnostics.conditions] A collection of zero or more
   * conditions applicable to the resource, or to the job overall, that warrant
   * customer attention.
   * @member {string} [etag] The current entity tag for the output. This is an
   * opaque string. You can use it to detect whether the resource has changed
   * between requests. You can also use it in the If-Match or If-None-Match
   * headers for write operations for optimistic concurrency.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Output
   *
   * @returns {object} metadata of Output
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Output',
      type: {
        name: 'Composite',
        className: 'Output',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          datasource: {
            required: false,
            serializedName: 'properties.datasource',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: 'type',
                clientName: 'type'
              },
              uberParent: 'OutputDataSource',
              className: 'OutputDataSource'
            }
          },
          serialization: {
            required: false,
            serializedName: 'properties.serialization',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: 'type',
                clientName: 'type'
              },
              uberParent: 'Serialization',
              className: 'Serialization'
            }
          },
          diagnostics: {
            required: false,
            readOnly: true,
            serializedName: 'properties.diagnostics',
            type: {
              name: 'Composite',
              className: 'Diagnostics'
            }
          },
          etag: {
            required: false,
            readOnly: true,
            serializedName: 'properties.etag',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = Output;
