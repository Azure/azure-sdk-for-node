/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The properties that are associated with an input containing stream data.
 *
 * @extends models['InputProperties']
 */
class StreamInputProperties extends models['InputProperties'] {
  /**
   * Create a StreamInputProperties.
   * @member {object} [datasource] Describes an input data source that contains
   * stream data. Required on PUT (CreateOrReplace) requests.
   * @member {string} [datasource.type] Polymorphic Discriminator
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of StreamInputProperties
   *
   * @returns {object} metadata of StreamInputProperties
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Stream',
      type: {
        name: 'Composite',
        className: 'StreamInputProperties',
        modelProperties: {
          serialization: {
            required: false,
            serializedName: 'serialization',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: 'type',
                clientName: 'type'
              },
              uberParent: 'Serialization',
              className: 'Serialization'
            }
          },
          diagnostics: {
            required: false,
            readOnly: true,
            serializedName: 'diagnostics',
            type: {
              name: 'Composite',
              className: 'Diagnostics'
            }
          },
          etag: {
            required: false,
            readOnly: true,
            serializedName: 'etag',
            type: {
              name: 'String'
            }
          },
          type: {
            required: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          datasource: {
            required: false,
            serializedName: 'datasource',
            type: {
              name: 'Composite',
              polymorphicDiscriminator: {
                serializedName: 'type',
                clientName: 'type'
              },
              uberParent: 'StreamInputDataSource',
              className: 'StreamInputDataSource'
            }
          }
        }
      }
    };
  }
}

module.exports = StreamInputProperties;
