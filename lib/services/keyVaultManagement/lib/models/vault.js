/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Resource information with extended details.
 *
 * @extends models['Resource']
 */
class Vault extends models['Resource'] {
  /**
   * Create a Vault.
   * @member {object} properties Properties of the vault
   * @member {uuid} [properties.tenantId] The Azure Active Directory tenant ID
   * that should be used for authenticating requests to the key vault.
   * @member {object} [properties.sku] SKU details
   * @member {string} [properties.sku.name] SKU name to specify whether the key
   * vault is a standard vault or a premium vault. Possible values include:
   * 'standard', 'premium'
   * @member {array} [properties.accessPolicies] An array of 0 to 16 identities
   * that have access to the key vault. All identities in the array must use
   * the same tenant ID as the key vault's tenant ID.
   * @member {string} [properties.vaultUri] The URI of the vault for performing
   * operations on keys and secrets.
   * @member {boolean} [properties.enabledForDeployment] Property to specify
   * whether Azure Virtual Machines are permitted to retrieve certificates
   * stored as secrets from the key vault.
   * @member {boolean} [properties.enabledForDiskEncryption] Property to
   * specify whether Azure Disk Encryption is permitted to retrieve secrets
   * from the vault and unwrap keys.
   * @member {boolean} [properties.enabledForTemplateDeployment] Property to
   * specify whether Azure Resource Manager is permitted to retrieve secrets
   * from the key vault.
   * @member {boolean} [properties.enableSoftDelete] Property to specify
   * whether the 'soft delete' functionality is enabled for this key vault. It
   * does not accept false value.
   * @member {string} [properties.createMode] The vault's create mode to
   * indicate whether the vault need to be recovered or not. Possible values
   * include: 'recover', 'default'
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Vault
   *
   * @returns {object} metadata of Vault
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Vault',
      type: {
        name: 'Composite',
        className: 'Vault',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          properties: {
            required: true,
            serializedName: 'properties',
            defaultValue: {},
            type: {
              name: 'Composite',
              className: 'VaultProperties'
            }
          }
        }
      }
    };
  }
}

module.exports = Vault;
