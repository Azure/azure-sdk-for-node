/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * A set of rules governing the network accessibility of a vault.
 *
 */
class NetworkRuleSet {
  /**
   * Create a NetworkRuleSet.
   * @property {string} [bypass] Tells what traffic can bypass network rules.
   * This can be 'AzureServices' or 'None'.  If not specified the default is
   * 'AzureServices'. Possible values include: 'AzureServices', 'None'
   * @property {string} [defaultAction] The default action when no rule from
   * ipRules and from virtualNetworkRules match. This is only used after the
   * bypass property has been evaluated. Possible values include: 'Allow',
   * 'Deny'
   * @property {array} [ipRules] The list of IP address rules.
   * @property {array} [virtualNetworkRules] The list of virtual network rules.
   */
  constructor() {
  }

  /**
   * Defines the metadata of NetworkRuleSet
   *
   * @returns {object} metadata of NetworkRuleSet
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'NetworkRuleSet',
      type: {
        name: 'Composite',
        className: 'NetworkRuleSet',
        modelProperties: {
          bypass: {
            required: false,
            serializedName: 'bypass',
            type: {
              name: 'String'
            }
          },
          defaultAction: {
            required: false,
            serializedName: 'defaultAction',
            type: {
              name: 'String'
            }
          },
          ipRules: {
            required: false,
            serializedName: 'ipRules',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'IPRuleElementType',
                  type: {
                    name: 'Composite',
                    className: 'IPRule'
                  }
              }
            }
          },
          virtualNetworkRules: {
            required: false,
            serializedName: 'virtualNetworkRules',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'VirtualNetworkRuleElementType',
                  type: {
                    name: 'Composite',
                    className: 'VirtualNetworkRule'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = NetworkRuleSet;
