/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * An identity that have access to the key vault. All identities in the array
 * must use the same tenant ID as the key vault's tenant ID.
 *
 */
class AccessPolicyEntry {
  /**
   * Create a AccessPolicyEntry.
   * @property {uuid} tenantId The Azure Active Directory tenant ID that should
   * be used for authenticating requests to the key vault.
   * @property {string} objectId The object ID of a user, service principal or
   * security group in the Azure Active Directory tenant for the vault. The
   * object ID must be unique for the list of access policies.
   * @property {uuid} [applicationId] Application ID of the client making
   * request on behalf of a principal
   * @property {object} permissions Permissions the identity has for keys,
   * secrets and certificates.
   * @property {array} [permissions.keys] Permissions to keys
   * @property {array} [permissions.secrets] Permissions to secrets
   * @property {array} [permissions.certificates] Permissions to certificates
   * @property {array} [permissions.storage] Permissions to storage accounts
   */
  constructor() {
  }

  /**
   * Defines the metadata of AccessPolicyEntry
   *
   * @returns {object} metadata of AccessPolicyEntry
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'AccessPolicyEntry',
      type: {
        name: 'Composite',
        className: 'AccessPolicyEntry',
        modelProperties: {
          tenantId: {
            required: true,
            serializedName: 'tenantId',
            type: {
              name: 'String'
            }
          },
          objectId: {
            required: true,
            serializedName: 'objectId',
            type: {
              name: 'String'
            }
          },
          applicationId: {
            required: false,
            serializedName: 'applicationId',
            type: {
              name: 'String'
            }
          },
          permissions: {
            required: true,
            serializedName: 'permissions',
            type: {
              name: 'Composite',
              className: 'Permissions'
            }
          }
        }
      }
    };
  }
}

module.exports = AccessPolicyEntry;
