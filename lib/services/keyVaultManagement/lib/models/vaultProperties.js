/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Properties of the vault
 *
 */
class VaultProperties {
  /**
   * Create a VaultProperties.
   * @property {uuid} tenantId The Azure Active Directory tenant ID that should
   * be used for authenticating requests to the key vault.
   * @property {object} sku SKU details
   * @property {string} [sku.name] SKU name to specify whether the key vault is
   * a standard vault or a premium vault. Possible values include: 'standard',
   * 'premium'
   * @property {array} [accessPolicies] An array of 0 to 16 identities that
   * have access to the key vault. All identities in the array must use the
   * same tenant ID as the key vault's tenant ID.
   * @property {string} [vaultUri] The URI of the vault for performing
   * operations on keys and secrets.
   * @property {boolean} [enabledForDeployment] Property to specify whether
   * Azure Virtual Machines are permitted to retrieve certificates stored as
   * secrets from the key vault.
   * @property {boolean} [enabledForDiskEncryption] Property to specify whether
   * Azure Disk Encryption is permitted to retrieve secrets from the vault and
   * unwrap keys.
   * @property {boolean} [enabledForTemplateDeployment] Property to specify
   * whether Azure Resource Manager is permitted to retrieve secrets from the
   * key vault.
   * @property {boolean} [enableSoftDelete] Property to specify whether the
   * 'soft delete' functionality is enabled for this key vault. It does not
   * accept false value.
   * @property {string} [createMode] The vault's create mode to indicate
   * whether the vault need to be recovered or not. Possible values include:
   * 'recover', 'default'
   * @property {boolean} [enablePurgeProtection] Property specifying whether
   * protection against purge is enabled for this vault. Setting this property
   * to true activates protection against purge for this vault and its content
   * - only the Key Vault service may initiate a hard, irrecoverable deletion.
   * The setting is effective only if soft delete is also enabled. Enabling
   * this functionality is irreversible - that is, the property does not accept
   * false as its value.
   * @property {object} [networkAcls] A collection of rules governing the
   * accessibility of the vault from specific network locations.
   * @property {string} [networkAcls.bypass] Tells what traffic can bypass
   * network rules. This can be 'AzureServices' or 'None'.  If not specified
   * the default is 'AzureServices'. Possible values include: 'AzureServices',
   * 'None'
   * @property {string} [networkAcls.defaultAction] The default action when no
   * rule from ipRules and from virtualNetworkRules match. This is only used
   * after the bypass property has been evaluated. Possible values include:
   * 'Allow', 'Deny'
   * @property {array} [networkAcls.ipRules] The list of IP address rules.
   * @property {array} [networkAcls.virtualNetworkRules] The list of virtual
   * network rules.
   */
  constructor() {
  }

  /**
   * Defines the metadata of VaultProperties
   *
   * @returns {object} metadata of VaultProperties
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'VaultProperties',
      type: {
        name: 'Composite',
        className: 'VaultProperties',
        modelProperties: {
          tenantId: {
            required: true,
            serializedName: 'tenantId',
            type: {
              name: 'String'
            }
          },
          sku: {
            required: true,
            serializedName: 'sku',
            defaultValue: {},
            type: {
              name: 'Composite',
              className: 'Sku'
            }
          },
          accessPolicies: {
            required: false,
            serializedName: 'accessPolicies',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'AccessPolicyEntryElementType',
                  type: {
                    name: 'Composite',
                    className: 'AccessPolicyEntry'
                  }
              }
            }
          },
          vaultUri: {
            required: false,
            serializedName: 'vaultUri',
            type: {
              name: 'String'
            }
          },
          enabledForDeployment: {
            required: false,
            serializedName: 'enabledForDeployment',
            type: {
              name: 'Boolean'
            }
          },
          enabledForDiskEncryption: {
            required: false,
            serializedName: 'enabledForDiskEncryption',
            type: {
              name: 'Boolean'
            }
          },
          enabledForTemplateDeployment: {
            required: false,
            serializedName: 'enabledForTemplateDeployment',
            type: {
              name: 'Boolean'
            }
          },
          enableSoftDelete: {
            required: false,
            serializedName: 'enableSoftDelete',
            type: {
              name: 'Boolean'
            }
          },
          createMode: {
            required: false,
            serializedName: 'createMode',
            type: {
              name: 'Enum',
              allowedValues: [ 'recover', 'default' ]
            }
          },
          enablePurgeProtection: {
            required: false,
            serializedName: 'enablePurgeProtection',
            type: {
              name: 'Boolean'
            }
          },
          networkAcls: {
            required: false,
            serializedName: 'networkAcls',
            type: {
              name: 'Composite',
              className: 'NetworkRuleSet'
            }
          }
        }
      }
    };
  }
}

module.exports = VaultProperties;
