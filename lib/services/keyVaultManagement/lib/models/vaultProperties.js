/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Properties of the vault
 *
 */
class VaultProperties {
  /**
   * Create a VaultProperties.
   * @member {uuid} tenantId The Azure Active Directory tenant ID that should
   * be used for authenticating requests to the key vault.
   * @member {object} sku SKU details
   * @member {string} [sku.name] SKU name to specify whether the key vault is a
   * standard vault or a premium vault. Possible values include: 'standard',
   * 'premium'
   * @member {array} [accessPolicies] An array of 0 to 16 identities that have
   * access to the key vault. All identities in the array must use the same
   * tenant ID as the key vault's tenant ID.
   * @member {string} [vaultUri] The URI of the vault for performing operations
   * on keys and secrets.
   * @member {boolean} [enabledForDeployment] Property to specify whether Azure
   * Virtual Machines are permitted to retrieve certificates stored as secrets
   * from the key vault.
   * @member {boolean} [enabledForDiskEncryption] Property to specify whether
   * Azure Disk Encryption is permitted to retrieve secrets from the vault and
   * unwrap keys.
   * @member {boolean} [enabledForTemplateDeployment] Property to specify
   * whether Azure Resource Manager is permitted to retrieve secrets from the
   * key vault.
   * @member {boolean} [enableSoftDelete] Property to specify whether the 'soft
   * delete' functionality is enabled for this key vault. It does not accept
   * false value.
   * @member {string} [createMode] The vault's create mode to indicate whether
   * the vault need to be recovered or not. Possible values include: 'recover',
   * 'default'
   */
  constructor() {
  }

  /**
   * Defines the metadata of VaultProperties
   *
   * @returns {object} metadata of VaultProperties
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'VaultProperties',
      type: {
        name: 'Composite',
        className: 'VaultProperties',
        modelProperties: {
          tenantId: {
            required: true,
            serializedName: 'tenantId',
            type: {
              name: 'String'
            }
          },
          sku: {
            required: true,
            serializedName: 'sku',
            defaultValue: {},
            type: {
              name: 'Composite',
              className: 'Sku'
            }
          },
          accessPolicies: {
            required: false,
            serializedName: 'accessPolicies',
            constraints: {
              MaxItems: 16
            },
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'AccessPolicyEntryElementType',
                  type: {
                    name: 'Composite',
                    className: 'AccessPolicyEntry'
                  }
              }
            }
          },
          vaultUri: {
            required: false,
            serializedName: 'vaultUri',
            type: {
              name: 'String'
            }
          },
          enabledForDeployment: {
            required: false,
            serializedName: 'enabledForDeployment',
            type: {
              name: 'Boolean'
            }
          },
          enabledForDiskEncryption: {
            required: false,
            serializedName: 'enabledForDiskEncryption',
            type: {
              name: 'Boolean'
            }
          },
          enabledForTemplateDeployment: {
            required: false,
            serializedName: 'enabledForTemplateDeployment',
            type: {
              name: 'Boolean'
            }
          },
          enableSoftDelete: {
            required: false,
            serializedName: 'enableSoftDelete',
            type: {
              name: 'Boolean'
            }
          },
          createMode: {
            required: false,
            serializedName: 'createMode',
            type: {
              name: 'Enum',
              allowedValues: [ 'recover', 'default' ]
            }
          }
        }
      }
    };
  }
}

module.exports = VaultProperties;
