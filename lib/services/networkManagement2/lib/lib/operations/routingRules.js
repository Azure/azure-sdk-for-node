/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const WebResource = msRest.WebResource;

/**
 * Lists all of the Routing Rules within a Front Door.
 *
 * @param {string} resourceGroupName Name of the Resource group within the
 * Azure subscription.
 *
 * @param {string} frontDoorName Name of the Front Door which is globally
 * unique.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link RoutingRuleListResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listByFrontDoor(resourceGroupName, frontDoorName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2018-08-01';
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      if (resourceGroupName.length > 80)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MaxLength": 80');
      }
      if (resourceGroupName.length < 1)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MinLength": 1');
      }
      if (resourceGroupName.match(/^[a-zA-Z0-9_\-\(\)\.]*[^\.]$/) === null)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "Pattern": /^[a-zA-Z0-9_\-\(\)\.]*[^\.]$/');
      }
    }
    if (frontDoorName === null || frontDoorName === undefined || typeof frontDoorName.valueOf() !== 'string') {
      throw new Error('frontDoorName cannot be null or undefined and it must be of type string.');
    }
    if (frontDoorName !== null && frontDoorName !== undefined) {
      if (frontDoorName.length > 74)
      {
        throw new Error('"frontDoorName" should satisfy the constraint - "MaxLength": 74');
      }
      if (frontDoorName.length < 5)
      {
        throw new Error('"frontDoorName" should satisfy the constraint - "MinLength": 5');
      }
      if (frontDoorName.match(/^[a-zA-Z0-9]+([-a-zA-Z0-9][a-zA-Z0-9])$/) === null)
      {
        throw new Error('"frontDoorName" should satisfy the constraint - "Pattern": /^[a-zA-Z0-9]+([-a-zA-Z0-9][a-zA-Z0-9])$/');
      }
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/routingRules';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{frontDoorName}', encodeURIComponent(frontDoorName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['RoutingRuleListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Gets a Routing Rule with the specified Rule name within the specified Front
 * Door.
 *
 * @param {string} resourceGroupName Name of the Resource group within the
 * Azure subscription.
 *
 * @param {string} frontDoorName Name of the Front Door which is globally
 * unique.
 *
 * @param {string} routingRuleName Name of the Routing Rule which is unique
 * within the Front Door.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link RoutingRule} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _get(resourceGroupName, frontDoorName, routingRuleName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2018-08-01';
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      if (resourceGroupName.length > 80)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MaxLength": 80');
      }
      if (resourceGroupName.length < 1)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MinLength": 1');
      }
      if (resourceGroupName.match(/^[a-zA-Z0-9_\-\(\)\.]*[^\.]$/) === null)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "Pattern": /^[a-zA-Z0-9_\-\(\)\.]*[^\.]$/');
      }
    }
    if (frontDoorName === null || frontDoorName === undefined || typeof frontDoorName.valueOf() !== 'string') {
      throw new Error('frontDoorName cannot be null or undefined and it must be of type string.');
    }
    if (frontDoorName !== null && frontDoorName !== undefined) {
      if (frontDoorName.length > 74)
      {
        throw new Error('"frontDoorName" should satisfy the constraint - "MaxLength": 74');
      }
      if (frontDoorName.length < 5)
      {
        throw new Error('"frontDoorName" should satisfy the constraint - "MinLength": 5');
      }
      if (frontDoorName.match(/^[a-zA-Z0-9]+([-a-zA-Z0-9][a-zA-Z0-9])$/) === null)
      {
        throw new Error('"frontDoorName" should satisfy the constraint - "Pattern": /^[a-zA-Z0-9]+([-a-zA-Z0-9][a-zA-Z0-9])$/');
      }
    }
    if (routingRuleName === null || routingRuleName === undefined || typeof routingRuleName.valueOf() !== 'string') {
      throw new Error('routingRuleName cannot be null or undefined and it must be of type string.');
    }
    if (routingRuleName !== null && routingRuleName !== undefined) {
      if (routingRuleName.length > 90)
      {
        throw new Error('"routingRuleName" should satisfy the constraint - "MaxLength": 90');
      }
      if (routingRuleName.length < 1)
      {
        throw new Error('"routingRuleName" should satisfy the constraint - "MinLength": 1');
      }
      if (routingRuleName.match(/^[a-zA-Z0-9]+(-*[a-zA-Z0-9])*$/) === null)
      {
        throw new Error('"routingRuleName" should satisfy the constraint - "Pattern": /^[a-zA-Z0-9]+(-*[a-zA-Z0-9])*$/');
      }
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/routingRules/{routingRuleName}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{frontDoorName}', encodeURIComponent(frontDoorName));
  requestUrl = requestUrl.replace('{routingRuleName}', encodeURIComponent(routingRuleName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['RoutingRule']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}


/**
 * Creates a new Routing Rule with the specified Rule name within the specified
 * Front Door.
 *
 * @param {string} resourceGroupName Name of the Resource group within the
 * Azure subscription.
 *
 * @param {string} frontDoorName Name of the Front Door which is globally
 * unique.
 *
 * @param {string} routingRuleName Name of the Routing Rule which is unique
 * within the Front Door.
 *
 * @param {object} routingRuleParameters Routing Rule properties needed to
 * create a new Front Door.
 *
 * @param {array} [routingRuleParameters.frontendEndpoints] Frontend endpoints
 * associated with this rule
 *
 * @param {array} [routingRuleParameters.acceptedProtocols] Protocol schemes to
 * match for this rule
 *
 * @param {array} [routingRuleParameters.patternsToMatch] The route patterns of
 * the rule.
 *
 * @param {string} [routingRuleParameters.customForwardingPath] A custom path
 * used to rewrite resource paths matched by this rule. Leave empty to use
 * incoming path.
 *
 * @param {string} [routingRuleParameters.forwardingProtocol] Protocol this
 * rule will use when forwarding traffic to backends. Possible values include:
 * 'HttpOnly', 'HttpsOnly', 'MatchRequest'
 *
 * @param {object} [routingRuleParameters.cacheConfiguration] The caching
 * configuration associated with this rule.
 *
 * @param {string}
 * [routingRuleParameters.cacheConfiguration.queryParameterStripDirective]
 * Treatment of URL query terms when forming the cache key. Possible values
 * include: 'StripNone', 'StripAll'
 *
 * @param {string}
 * [routingRuleParameters.cacheConfiguration.dynamicCompression] Whether to use
 * dynamic compression for cached content. Possible values include: 'Enabled',
 * 'Disabled'
 *
 * @param {object} [routingRuleParameters.backendPool] A reference to the
 * BackendPool which this rule routes to.
 *
 * @param {string} [routingRuleParameters.backendPool.id] Resource ID.
 *
 * @param {string} [routingRuleParameters.enabledState] Whether to enable use
 * of this rule. Permitted values are 'Enabled' or 'Disabled'. Possible values
 * include: 'Enabled', 'Disabled'
 *
 * @param {string} [routingRuleParameters.resourceState] Resource status.
 * Possible values include: 'Creating', 'Enabling', 'Enabled', 'Disabling',
 * 'Disabled', 'Deleting'
 *
 * @param {string} [routingRuleParameters.name] Resource name.
 *
 * @param {string} [routingRuleParameters.id] Resource ID.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link RoutingRule} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _createOrUpdate(resourceGroupName, frontDoorName, routingRuleName, routingRuleParameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginCreateOrUpdate(resourceGroupName, frontDoorName, routingRuleName, routingRuleParameters, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['RoutingRule']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}


/**
 * Deletes an existing Routing Rule with the specified parameters.
 *
 * @param {string} resourceGroupName Name of the Resource group within the
 * Azure subscription.
 *
 * @param {string} frontDoorName Name of the Front Door which is globally
 * unique.
 *
 * @param {string} routingRuleName Name of the Routing Rule which is unique
 * within the Front Door.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteMethod(resourceGroupName, frontDoorName, routingRuleName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginDeleteMethod(resourceGroupName, frontDoorName, routingRuleName, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response

      return callback(null, result, httpRequest, response);
    });
  });
}

/**
 * Creates a new Routing Rule with the specified Rule name within the specified
 * Front Door.
 *
 * @param {string} resourceGroupName Name of the Resource group within the
 * Azure subscription.
 *
 * @param {string} frontDoorName Name of the Front Door which is globally
 * unique.
 *
 * @param {string} routingRuleName Name of the Routing Rule which is unique
 * within the Front Door.
 *
 * @param {object} routingRuleParameters Routing Rule properties needed to
 * create a new Front Door.
 *
 * @param {array} [routingRuleParameters.frontendEndpoints] Frontend endpoints
 * associated with this rule
 *
 * @param {array} [routingRuleParameters.acceptedProtocols] Protocol schemes to
 * match for this rule
 *
 * @param {array} [routingRuleParameters.patternsToMatch] The route patterns of
 * the rule.
 *
 * @param {string} [routingRuleParameters.customForwardingPath] A custom path
 * used to rewrite resource paths matched by this rule. Leave empty to use
 * incoming path.
 *
 * @param {string} [routingRuleParameters.forwardingProtocol] Protocol this
 * rule will use when forwarding traffic to backends. Possible values include:
 * 'HttpOnly', 'HttpsOnly', 'MatchRequest'
 *
 * @param {object} [routingRuleParameters.cacheConfiguration] The caching
 * configuration associated with this rule.
 *
 * @param {string}
 * [routingRuleParameters.cacheConfiguration.queryParameterStripDirective]
 * Treatment of URL query terms when forming the cache key. Possible values
 * include: 'StripNone', 'StripAll'
 *
 * @param {string}
 * [routingRuleParameters.cacheConfiguration.dynamicCompression] Whether to use
 * dynamic compression for cached content. Possible values include: 'Enabled',
 * 'Disabled'
 *
 * @param {object} [routingRuleParameters.backendPool] A reference to the
 * BackendPool which this rule routes to.
 *
 * @param {string} [routingRuleParameters.backendPool.id] Resource ID.
 *
 * @param {string} [routingRuleParameters.enabledState] Whether to enable use
 * of this rule. Permitted values are 'Enabled' or 'Disabled'. Possible values
 * include: 'Enabled', 'Disabled'
 *
 * @param {string} [routingRuleParameters.resourceState] Resource status.
 * Possible values include: 'Creating', 'Enabling', 'Enabled', 'Disabling',
 * 'Disabled', 'Deleting'
 *
 * @param {string} [routingRuleParameters.name] Resource name.
 *
 * @param {string} [routingRuleParameters.id] Resource ID.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link RoutingRule} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginCreateOrUpdate(resourceGroupName, frontDoorName, routingRuleName, routingRuleParameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2018-08-01';
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      if (resourceGroupName.length > 80)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MaxLength": 80');
      }
      if (resourceGroupName.length < 1)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MinLength": 1');
      }
      if (resourceGroupName.match(/^[a-zA-Z0-9_\-\(\)\.]*[^\.]$/) === null)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "Pattern": /^[a-zA-Z0-9_\-\(\)\.]*[^\.]$/');
      }
    }
    if (frontDoorName === null || frontDoorName === undefined || typeof frontDoorName.valueOf() !== 'string') {
      throw new Error('frontDoorName cannot be null or undefined and it must be of type string.');
    }
    if (frontDoorName !== null && frontDoorName !== undefined) {
      if (frontDoorName.length > 74)
      {
        throw new Error('"frontDoorName" should satisfy the constraint - "MaxLength": 74');
      }
      if (frontDoorName.length < 5)
      {
        throw new Error('"frontDoorName" should satisfy the constraint - "MinLength": 5');
      }
      if (frontDoorName.match(/^[a-zA-Z0-9]+([-a-zA-Z0-9][a-zA-Z0-9])$/) === null)
      {
        throw new Error('"frontDoorName" should satisfy the constraint - "Pattern": /^[a-zA-Z0-9]+([-a-zA-Z0-9][a-zA-Z0-9])$/');
      }
    }
    if (routingRuleName === null || routingRuleName === undefined || typeof routingRuleName.valueOf() !== 'string') {
      throw new Error('routingRuleName cannot be null or undefined and it must be of type string.');
    }
    if (routingRuleName !== null && routingRuleName !== undefined) {
      if (routingRuleName.length > 90)
      {
        throw new Error('"routingRuleName" should satisfy the constraint - "MaxLength": 90');
      }
      if (routingRuleName.length < 1)
      {
        throw new Error('"routingRuleName" should satisfy the constraint - "MinLength": 1');
      }
      if (routingRuleName.match(/^[a-zA-Z0-9]+(-*[a-zA-Z0-9])*$/) === null)
      {
        throw new Error('"routingRuleName" should satisfy the constraint - "Pattern": /^[a-zA-Z0-9]+(-*[a-zA-Z0-9])*$/');
      }
    }
    if (routingRuleParameters === null || routingRuleParameters === undefined) {
      throw new Error('routingRuleParameters cannot be null or undefined.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/routingRules/{routingRuleName}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{frontDoorName}', encodeURIComponent(frontDoorName));
  requestUrl = requestUrl.replace('{routingRuleName}', encodeURIComponent(routingRuleName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (routingRuleParameters !== null && routingRuleParameters !== undefined) {
      let requestModelMapper = new client.models['RoutingRule']().mapper();
      requestModel = client.serialize(requestModelMapper, routingRuleParameters, 'routingRuleParameters');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(routingRuleParameters, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 201 && statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['RoutingRule']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }
    // Deserialize Response
    if (statusCode === 201) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['RoutingRule']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError1 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError1.request = msRest.stripRequest(httpRequest);
        deserializationError1.response = msRest.stripResponse(response);
        return callback(deserializationError1);
      }
    }
    // Deserialize Response
    if (statusCode === 202) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['RoutingRule']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError2 = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError2.request = msRest.stripRequest(httpRequest);
        deserializationError2.response = msRest.stripResponse(response);
        return callback(deserializationError2);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Deletes an existing Routing Rule with the specified parameters.
 *
 * @param {string} resourceGroupName Name of the Resource group within the
 * Azure subscription.
 *
 * @param {string} frontDoorName Name of the Front Door which is globally
 * unique.
 *
 * @param {string} routingRuleName Name of the Routing Rule which is unique
 * within the Front Door.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginDeleteMethod(resourceGroupName, frontDoorName, routingRuleName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let apiVersion = '2018-08-01';
  // Validate
  try {
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      if (resourceGroupName.length > 80)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MaxLength": 80');
      }
      if (resourceGroupName.length < 1)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "MinLength": 1');
      }
      if (resourceGroupName.match(/^[a-zA-Z0-9_\-\(\)\.]*[^\.]$/) === null)
      {
        throw new Error('"resourceGroupName" should satisfy the constraint - "Pattern": /^[a-zA-Z0-9_\-\(\)\.]*[^\.]$/');
      }
    }
    if (frontDoorName === null || frontDoorName === undefined || typeof frontDoorName.valueOf() !== 'string') {
      throw new Error('frontDoorName cannot be null or undefined and it must be of type string.');
    }
    if (frontDoorName !== null && frontDoorName !== undefined) {
      if (frontDoorName.length > 74)
      {
        throw new Error('"frontDoorName" should satisfy the constraint - "MaxLength": 74');
      }
      if (frontDoorName.length < 5)
      {
        throw new Error('"frontDoorName" should satisfy the constraint - "MinLength": 5');
      }
      if (frontDoorName.match(/^[a-zA-Z0-9]+([-a-zA-Z0-9][a-zA-Z0-9])$/) === null)
      {
        throw new Error('"frontDoorName" should satisfy the constraint - "Pattern": /^[a-zA-Z0-9]+([-a-zA-Z0-9][a-zA-Z0-9])$/');
      }
    }
    if (routingRuleName === null || routingRuleName === undefined || typeof routingRuleName.valueOf() !== 'string') {
      throw new Error('routingRuleName cannot be null or undefined and it must be of type string.');
    }
    if (routingRuleName !== null && routingRuleName !== undefined) {
      if (routingRuleName.length > 90)
      {
        throw new Error('"routingRuleName" should satisfy the constraint - "MaxLength": 90');
      }
      if (routingRuleName.length < 1)
      {
        throw new Error('"routingRuleName" should satisfy the constraint - "MinLength": 1');
      }
      if (routingRuleName.match(/^[a-zA-Z0-9]+(-*[a-zA-Z0-9])*$/) === null)
      {
        throw new Error('"routingRuleName" should satisfy the constraint - "Pattern": /^[a-zA-Z0-9]+(-*[a-zA-Z0-9])*$/');
      }
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/routingRules/{routingRuleName}';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{frontDoorName}', encodeURIComponent(frontDoorName));
  requestUrl = requestUrl.replace('{routingRuleName}', encodeURIComponent(routingRuleName));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 202 && statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Lists all of the Routing Rules within a Front Door.
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link RoutingRuleListResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listByFrontDoorNext(nextPageLink, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
      throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let requestUrl = '{nextLink}';
  requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorResponse']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['RoutingRuleListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a RoutingRules. */
class RoutingRules {
  /**
   * Create a RoutingRules.
   * @param {FrontdoorManagementClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._listByFrontDoor = _listByFrontDoor;
    this._get = _get;
    this._createOrUpdate = _createOrUpdate;
    this._deleteMethod = _deleteMethod;
    this._beginCreateOrUpdate = _beginCreateOrUpdate;
    this._beginDeleteMethod = _beginDeleteMethod;
    this._listByFrontDoorNext = _listByFrontDoorNext;
  }

  /**
   * Lists all of the Routing Rules within a Front Door.
   *
   * @param {string} resourceGroupName Name of the Resource group within the
   * Azure subscription.
   *
   * @param {string} frontDoorName Name of the Front Door which is globally
   * unique.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<RoutingRuleListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listByFrontDoorWithHttpOperationResponse(resourceGroupName, frontDoorName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listByFrontDoor(resourceGroupName, frontDoorName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Lists all of the Routing Rules within a Front Door.
   *
   * @param {string} resourceGroupName Name of the Resource group within the
   * Azure subscription.
   *
   * @param {string} frontDoorName Name of the Front Door which is globally
   * unique.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {RoutingRuleListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link RoutingRuleListResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listByFrontDoor(resourceGroupName, frontDoorName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listByFrontDoor(resourceGroupName, frontDoorName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listByFrontDoor(resourceGroupName, frontDoorName, options, optionalCallback);
    }
  }

  /**
   * Gets a Routing Rule with the specified Rule name within the specified Front
   * Door.
   *
   * @param {string} resourceGroupName Name of the Resource group within the
   * Azure subscription.
   *
   * @param {string} frontDoorName Name of the Front Door which is globally
   * unique.
   *
   * @param {string} routingRuleName Name of the Routing Rule which is unique
   * within the Front Door.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<RoutingRule>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWithHttpOperationResponse(resourceGroupName, frontDoorName, routingRuleName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._get(resourceGroupName, frontDoorName, routingRuleName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Gets a Routing Rule with the specified Rule name within the specified Front
   * Door.
   *
   * @param {string} resourceGroupName Name of the Resource group within the
   * Azure subscription.
   *
   * @param {string} frontDoorName Name of the Front Door which is globally
   * unique.
   *
   * @param {string} routingRuleName Name of the Routing Rule which is unique
   * within the Front Door.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {RoutingRule} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link RoutingRule} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  get(resourceGroupName, frontDoorName, routingRuleName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._get(resourceGroupName, frontDoorName, routingRuleName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._get(resourceGroupName, frontDoorName, routingRuleName, options, optionalCallback);
    }
  }

  /**
   * Creates a new Routing Rule with the specified Rule name within the specified
   * Front Door.
   *
   * @param {string} resourceGroupName Name of the Resource group within the
   * Azure subscription.
   *
   * @param {string} frontDoorName Name of the Front Door which is globally
   * unique.
   *
   * @param {string} routingRuleName Name of the Routing Rule which is unique
   * within the Front Door.
   *
   * @param {object} routingRuleParameters Routing Rule properties needed to
   * create a new Front Door.
   *
   * @param {array} [routingRuleParameters.frontendEndpoints] Frontend endpoints
   * associated with this rule
   *
   * @param {array} [routingRuleParameters.acceptedProtocols] Protocol schemes to
   * match for this rule
   *
   * @param {array} [routingRuleParameters.patternsToMatch] The route patterns of
   * the rule.
   *
   * @param {string} [routingRuleParameters.customForwardingPath] A custom path
   * used to rewrite resource paths matched by this rule. Leave empty to use
   * incoming path.
   *
   * @param {string} [routingRuleParameters.forwardingProtocol] Protocol this
   * rule will use when forwarding traffic to backends. Possible values include:
   * 'HttpOnly', 'HttpsOnly', 'MatchRequest'
   *
   * @param {object} [routingRuleParameters.cacheConfiguration] The caching
   * configuration associated with this rule.
   *
   * @param {string}
   * [routingRuleParameters.cacheConfiguration.queryParameterStripDirective]
   * Treatment of URL query terms when forming the cache key. Possible values
   * include: 'StripNone', 'StripAll'
   *
   * @param {string}
   * [routingRuleParameters.cacheConfiguration.dynamicCompression] Whether to use
   * dynamic compression for cached content. Possible values include: 'Enabled',
   * 'Disabled'
   *
   * @param {object} [routingRuleParameters.backendPool] A reference to the
   * BackendPool which this rule routes to.
   *
   * @param {string} [routingRuleParameters.backendPool.id] Resource ID.
   *
   * @param {string} [routingRuleParameters.enabledState] Whether to enable use
   * of this rule. Permitted values are 'Enabled' or 'Disabled'. Possible values
   * include: 'Enabled', 'Disabled'
   *
   * @param {string} [routingRuleParameters.resourceState] Resource status.
   * Possible values include: 'Creating', 'Enabling', 'Enabled', 'Disabling',
   * 'Disabled', 'Deleting'
   *
   * @param {string} [routingRuleParameters.name] Resource name.
   *
   * @param {string} [routingRuleParameters.id] Resource ID.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<RoutingRule>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createOrUpdateWithHttpOperationResponse(resourceGroupName, frontDoorName, routingRuleName, routingRuleParameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._createOrUpdate(resourceGroupName, frontDoorName, routingRuleName, routingRuleParameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Creates a new Routing Rule with the specified Rule name within the specified
   * Front Door.
   *
   * @param {string} resourceGroupName Name of the Resource group within the
   * Azure subscription.
   *
   * @param {string} frontDoorName Name of the Front Door which is globally
   * unique.
   *
   * @param {string} routingRuleName Name of the Routing Rule which is unique
   * within the Front Door.
   *
   * @param {object} routingRuleParameters Routing Rule properties needed to
   * create a new Front Door.
   *
   * @param {array} [routingRuleParameters.frontendEndpoints] Frontend endpoints
   * associated with this rule
   *
   * @param {array} [routingRuleParameters.acceptedProtocols] Protocol schemes to
   * match for this rule
   *
   * @param {array} [routingRuleParameters.patternsToMatch] The route patterns of
   * the rule.
   *
   * @param {string} [routingRuleParameters.customForwardingPath] A custom path
   * used to rewrite resource paths matched by this rule. Leave empty to use
   * incoming path.
   *
   * @param {string} [routingRuleParameters.forwardingProtocol] Protocol this
   * rule will use when forwarding traffic to backends. Possible values include:
   * 'HttpOnly', 'HttpsOnly', 'MatchRequest'
   *
   * @param {object} [routingRuleParameters.cacheConfiguration] The caching
   * configuration associated with this rule.
   *
   * @param {string}
   * [routingRuleParameters.cacheConfiguration.queryParameterStripDirective]
   * Treatment of URL query terms when forming the cache key. Possible values
   * include: 'StripNone', 'StripAll'
   *
   * @param {string}
   * [routingRuleParameters.cacheConfiguration.dynamicCompression] Whether to use
   * dynamic compression for cached content. Possible values include: 'Enabled',
   * 'Disabled'
   *
   * @param {object} [routingRuleParameters.backendPool] A reference to the
   * BackendPool which this rule routes to.
   *
   * @param {string} [routingRuleParameters.backendPool.id] Resource ID.
   *
   * @param {string} [routingRuleParameters.enabledState] Whether to enable use
   * of this rule. Permitted values are 'Enabled' or 'Disabled'. Possible values
   * include: 'Enabled', 'Disabled'
   *
   * @param {string} [routingRuleParameters.resourceState] Resource status.
   * Possible values include: 'Creating', 'Enabling', 'Enabled', 'Disabling',
   * 'Disabled', 'Deleting'
   *
   * @param {string} [routingRuleParameters.name] Resource name.
   *
   * @param {string} [routingRuleParameters.id] Resource ID.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {RoutingRule} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link RoutingRule} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  createOrUpdate(resourceGroupName, frontDoorName, routingRuleName, routingRuleParameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._createOrUpdate(resourceGroupName, frontDoorName, routingRuleName, routingRuleParameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._createOrUpdate(resourceGroupName, frontDoorName, routingRuleName, routingRuleParameters, options, optionalCallback);
    }
  }

  /**
   * Deletes an existing Routing Rule with the specified parameters.
   *
   * @param {string} resourceGroupName Name of the Resource group within the
   * Azure subscription.
   *
   * @param {string} frontDoorName Name of the Front Door which is globally
   * unique.
   *
   * @param {string} routingRuleName Name of the Routing Rule which is unique
   * within the Front Door.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteMethodWithHttpOperationResponse(resourceGroupName, frontDoorName, routingRuleName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteMethod(resourceGroupName, frontDoorName, routingRuleName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Deletes an existing Routing Rule with the specified parameters.
   *
   * @param {string} resourceGroupName Name of the Resource group within the
   * Azure subscription.
   *
   * @param {string} frontDoorName Name of the Front Door which is globally
   * unique.
   *
   * @param {string} routingRuleName Name of the Routing Rule which is unique
   * within the Front Door.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(resourceGroupName, frontDoorName, routingRuleName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteMethod(resourceGroupName, frontDoorName, routingRuleName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteMethod(resourceGroupName, frontDoorName, routingRuleName, options, optionalCallback);
    }
  }

  /**
   * Creates a new Routing Rule with the specified Rule name within the specified
   * Front Door.
   *
   * @param {string} resourceGroupName Name of the Resource group within the
   * Azure subscription.
   *
   * @param {string} frontDoorName Name of the Front Door which is globally
   * unique.
   *
   * @param {string} routingRuleName Name of the Routing Rule which is unique
   * within the Front Door.
   *
   * @param {object} routingRuleParameters Routing Rule properties needed to
   * create a new Front Door.
   *
   * @param {array} [routingRuleParameters.frontendEndpoints] Frontend endpoints
   * associated with this rule
   *
   * @param {array} [routingRuleParameters.acceptedProtocols] Protocol schemes to
   * match for this rule
   *
   * @param {array} [routingRuleParameters.patternsToMatch] The route patterns of
   * the rule.
   *
   * @param {string} [routingRuleParameters.customForwardingPath] A custom path
   * used to rewrite resource paths matched by this rule. Leave empty to use
   * incoming path.
   *
   * @param {string} [routingRuleParameters.forwardingProtocol] Protocol this
   * rule will use when forwarding traffic to backends. Possible values include:
   * 'HttpOnly', 'HttpsOnly', 'MatchRequest'
   *
   * @param {object} [routingRuleParameters.cacheConfiguration] The caching
   * configuration associated with this rule.
   *
   * @param {string}
   * [routingRuleParameters.cacheConfiguration.queryParameterStripDirective]
   * Treatment of URL query terms when forming the cache key. Possible values
   * include: 'StripNone', 'StripAll'
   *
   * @param {string}
   * [routingRuleParameters.cacheConfiguration.dynamicCompression] Whether to use
   * dynamic compression for cached content. Possible values include: 'Enabled',
   * 'Disabled'
   *
   * @param {object} [routingRuleParameters.backendPool] A reference to the
   * BackendPool which this rule routes to.
   *
   * @param {string} [routingRuleParameters.backendPool.id] Resource ID.
   *
   * @param {string} [routingRuleParameters.enabledState] Whether to enable use
   * of this rule. Permitted values are 'Enabled' or 'Disabled'. Possible values
   * include: 'Enabled', 'Disabled'
   *
   * @param {string} [routingRuleParameters.resourceState] Resource status.
   * Possible values include: 'Creating', 'Enabling', 'Enabled', 'Disabling',
   * 'Disabled', 'Deleting'
   *
   * @param {string} [routingRuleParameters.name] Resource name.
   *
   * @param {string} [routingRuleParameters.id] Resource ID.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<RoutingRule>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginCreateOrUpdateWithHttpOperationResponse(resourceGroupName, frontDoorName, routingRuleName, routingRuleParameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginCreateOrUpdate(resourceGroupName, frontDoorName, routingRuleName, routingRuleParameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Creates a new Routing Rule with the specified Rule name within the specified
   * Front Door.
   *
   * @param {string} resourceGroupName Name of the Resource group within the
   * Azure subscription.
   *
   * @param {string} frontDoorName Name of the Front Door which is globally
   * unique.
   *
   * @param {string} routingRuleName Name of the Routing Rule which is unique
   * within the Front Door.
   *
   * @param {object} routingRuleParameters Routing Rule properties needed to
   * create a new Front Door.
   *
   * @param {array} [routingRuleParameters.frontendEndpoints] Frontend endpoints
   * associated with this rule
   *
   * @param {array} [routingRuleParameters.acceptedProtocols] Protocol schemes to
   * match for this rule
   *
   * @param {array} [routingRuleParameters.patternsToMatch] The route patterns of
   * the rule.
   *
   * @param {string} [routingRuleParameters.customForwardingPath] A custom path
   * used to rewrite resource paths matched by this rule. Leave empty to use
   * incoming path.
   *
   * @param {string} [routingRuleParameters.forwardingProtocol] Protocol this
   * rule will use when forwarding traffic to backends. Possible values include:
   * 'HttpOnly', 'HttpsOnly', 'MatchRequest'
   *
   * @param {object} [routingRuleParameters.cacheConfiguration] The caching
   * configuration associated with this rule.
   *
   * @param {string}
   * [routingRuleParameters.cacheConfiguration.queryParameterStripDirective]
   * Treatment of URL query terms when forming the cache key. Possible values
   * include: 'StripNone', 'StripAll'
   *
   * @param {string}
   * [routingRuleParameters.cacheConfiguration.dynamicCompression] Whether to use
   * dynamic compression for cached content. Possible values include: 'Enabled',
   * 'Disabled'
   *
   * @param {object} [routingRuleParameters.backendPool] A reference to the
   * BackendPool which this rule routes to.
   *
   * @param {string} [routingRuleParameters.backendPool.id] Resource ID.
   *
   * @param {string} [routingRuleParameters.enabledState] Whether to enable use
   * of this rule. Permitted values are 'Enabled' or 'Disabled'. Possible values
   * include: 'Enabled', 'Disabled'
   *
   * @param {string} [routingRuleParameters.resourceState] Resource status.
   * Possible values include: 'Creating', 'Enabling', 'Enabled', 'Disabling',
   * 'Disabled', 'Deleting'
   *
   * @param {string} [routingRuleParameters.name] Resource name.
   *
   * @param {string} [routingRuleParameters.id] Resource ID.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {RoutingRule} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link RoutingRule} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginCreateOrUpdate(resourceGroupName, frontDoorName, routingRuleName, routingRuleParameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginCreateOrUpdate(resourceGroupName, frontDoorName, routingRuleName, routingRuleParameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginCreateOrUpdate(resourceGroupName, frontDoorName, routingRuleName, routingRuleParameters, options, optionalCallback);
    }
  }

  /**
   * Deletes an existing Routing Rule with the specified parameters.
   *
   * @param {string} resourceGroupName Name of the Resource group within the
   * Azure subscription.
   *
   * @param {string} frontDoorName Name of the Front Door which is globally
   * unique.
   *
   * @param {string} routingRuleName Name of the Routing Rule which is unique
   * within the Front Door.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginDeleteMethodWithHttpOperationResponse(resourceGroupName, frontDoorName, routingRuleName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginDeleteMethod(resourceGroupName, frontDoorName, routingRuleName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Deletes an existing Routing Rule with the specified parameters.
   *
   * @param {string} resourceGroupName Name of the Resource group within the
   * Azure subscription.
   *
   * @param {string} frontDoorName Name of the Front Door which is globally
   * unique.
   *
   * @param {string} routingRuleName Name of the Routing Rule which is unique
   * within the Front Door.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginDeleteMethod(resourceGroupName, frontDoorName, routingRuleName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginDeleteMethod(resourceGroupName, frontDoorName, routingRuleName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginDeleteMethod(resourceGroupName, frontDoorName, routingRuleName, options, optionalCallback);
    }
  }

  /**
   * Lists all of the Routing Rules within a Front Door.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<RoutingRuleListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listByFrontDoorNextWithHttpOperationResponse(nextPageLink, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listByFrontDoorNext(nextPageLink, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Lists all of the Routing Rules within a Front Door.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {RoutingRuleListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link RoutingRuleListResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listByFrontDoorNext(nextPageLink, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listByFrontDoorNext(nextPageLink, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listByFrontDoorNext(nextPageLink, options, optionalCallback);
    }
  }

}

module.exports = RoutingRules;
